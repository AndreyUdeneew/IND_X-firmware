
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8d0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bae8  0800c98c  0800c98c  0001c98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018474  08018474  00030040  2**0
                  CONTENTS
  4 .ARM          00000000  08018474  08018474  00030040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08018474  08018474  00030040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018474  08018474  00028474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018478  08018478  00028478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  0801847c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c4  20000040  080184bc  00030040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001304  080184bc  00031304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001937c  00000000  00000000  00030068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b0  00000000  00000000  000493e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  0004c998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  0004e2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c89a  00000000  00000000  0004fa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c96e  00000000  00000000  0006c30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afb25  00000000  00000000  00088c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013879d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c3c  00000000  00000000  001387f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000040 	.word	0x20000040
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c974 	.word	0x0800c974

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000044 	.word	0x20000044
 8000100:	0800c974 	.word	0x0800c974

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000372:	f3ef 8310 	mrs	r3, PRIMASK
 8000376:	60bb      	str	r3, [r7, #8]
  return(result);
 8000378:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	2301      	movs	r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f383 8810 	msr	PRIMASK, r3
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	08da      	lsrs	r2, r3, #3
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	075b      	lsls	r3, r3, #29
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	f383 8810 	msr	PRIMASK, r3
}
 80003a4:	46c0      	nop			; (mov r8, r8)
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b006      	add	sp, #24
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80003ba:	f3ef 8310 	mrs	r3, PRIMASK
 80003be:	60bb      	str	r3, [r7, #8]
  return(result);
 80003c0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	2301      	movs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f383 8810 	msr	PRIMASK, r3
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <LL_USART_SetRXFIFOThreshold+0x48>)
 80003d6:	401a      	ands	r2, r3
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	065b      	lsls	r3, r3, #25
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	f383 8810 	msr	PRIMASK, r3
}
 80003ec:	46c0      	nop			; (mov r8, r8)
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b006      	add	sp, #24
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	f1ffffff 	.word	0xf1ffffff

080003fc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <LL_USART_ConfigAsyncMode+0x2c>)
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	222a      	movs	r2, #42	; 0x2a
 8000416:	4393      	bics	r3, r2
 8000418:	001a      	movs	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	609a      	str	r2, [r3, #8]
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffb7ff 	.word	0xffffb7ff

0800042c <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	69da      	ldr	r2, [r3, #28]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	039b      	lsls	r3, r3, #14
 800043c:	401a      	ands	r2, r3
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	039b      	lsls	r3, r3, #14
 8000442:	429a      	cmp	r2, r3
 8000444:	d101      	bne.n	800044a <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <LL_USART_IsActiveFlag_TEACK+0x20>
 800044a:	2300      	movs	r3, #0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}

08000454 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	03db      	lsls	r3, r3, #15
 8000464:	401a      	ands	r2, r3
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	03db      	lsls	r3, r3, #15
 800046a:	429a      	cmp	r2, r3
 800046c:	d101      	bne.n	8000472 <LL_USART_IsActiveFlag_REACK+0x1e>
 800046e:	2301      	movs	r3, #1
 8000470:	e000      	b.n	8000474 <LL_USART_IsActiveFlag_REACK+0x20>
 8000472:	2300      	movs	r3, #0
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}

0800047c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000484:	f3ef 8310 	mrs	r3, PRIMASK
 8000488:	60bb      	str	r3, [r7, #8]
  return(result);
 800048a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	2301      	movs	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	f383 8810 	msr	PRIMASK, r3
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2220      	movs	r2, #32
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	f383 8810 	msr	PRIMASK, r3
}
 80004b0:	46c0      	nop			; (mov r8, r8)
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b006      	add	sp, #24
 80004b8:	bd80      	pop	{r7, pc}

080004ba <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b086      	sub	sp, #24
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80004c2:	f3ef 8310 	mrs	r3, PRIMASK
 80004c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80004c8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	2301      	movs	r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f383 8810 	msr	PRIMASK, r3
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2201      	movs	r2, #1
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	f383 8810 	msr	PRIMASK, r3
}
 80004ee:	46c0      	nop			; (mov r8, r8)
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b006      	add	sp, #24
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(const USART_TypeDef *USARTx)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000504:	b29b      	uxth	r3, r3
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	0ddb      	lsrs	r3, r3, #23
 800050a:	b29b      	uxth	r3, r3
}
 800050c:	0018      	movs	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}

08000514 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40010000 	.word	0x40010000

08000534 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	619a      	str	r2, [r3, #24]
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}

0800054c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800056e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	430a      	orrs	r2, r1
 8000576:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800057a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4013      	ands	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b004      	add	sp, #16
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b004      	add	sp, #16
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b089      	sub	sp, #36	; 0x24
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80005c2:	231c      	movs	r3, #28
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80005ca:	231a      	movs	r3, #26
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 80005d2:	2318      	movs	r3, #24
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 80005da:	2316      	movs	r3, #22
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 80005e2:	2314      	movs	r3, #20
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	2201      	movs	r2, #1
 80005e8:	4252      	negs	r2, r2
 80005ea:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f004 feb0 	bl	8005350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f892 	bl	8000718 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b42      	ldr	r3, [pc, #264]	; (8000700 <main+0x144>)
 80005f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f8:	4b41      	ldr	r3, [pc, #260]	; (8000700 <main+0x144>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	430a      	orrs	r2, r1
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000600:	4b3f      	ldr	r3, [pc, #252]	; (8000700 <main+0x144>)
 8000602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000604:	2201      	movs	r2, #1
 8000606:	4013      	ands	r3, r2
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <main+0x144>)
 800060e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000610:	4b3b      	ldr	r3, [pc, #236]	; (8000700 <main+0x144>)
 8000612:	2102      	movs	r1, #2
 8000614:	430a      	orrs	r2, r1
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
 8000618:	4b39      	ldr	r3, [pc, #228]	; (8000700 <main+0x144>)
 800061a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061c:	2202      	movs	r2, #2
 800061e:	4013      	ands	r3, r2
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <main+0x144>)
 8000626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000628:	4b35      	ldr	r3, [pc, #212]	; (8000700 <main+0x144>)
 800062a:	2104      	movs	r1, #4
 800062c:	430a      	orrs	r2, r1
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <main+0x144>)
 8000632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000634:	2204      	movs	r2, #4
 8000636:	4013      	ands	r3, r2
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fbd4 	bl	8000de8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 fba4 	bl	8000d8c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000644:	f000 fac2 	bl	8000bcc <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8000648:	f000 f8e6 	bl	8000818 <MX_COMP1_Init>
  MX_TIM1_Init();
 800064c:	f000 f9c4 	bl	80009d8 <MX_TIM1_Init>
  MX_USART3_Init();
 8000650:	f000 fb5a 	bl	8000d08 <MX_USART3_Init>
  MX_I2S1_Init();
 8000654:	f000 f952 	bl	80008fc <MX_I2S1_Init>
  MX_I2C1_Init();
 8000658:	f000 f910 	bl	800087c <MX_I2C1_Init>
  MX_SPI2_Init();
 800065c:	f000 f978 	bl	8000950 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <main+0x148>)
 8000662:	0018      	movs	r0, r3
 8000664:	f005 f942 	bl	80058ec <HAL_COMP_Start>
	HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f004 fef7 	bl	800545c <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800066e:	f001 fd3f 	bl	80020f0 <MEM_Reset>

	weoInit();
 8000672:	f000 fe21 	bl	80012b8 <weoInit>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f004 fef0 	bl	800545c <HAL_Delay>
	weoClear();
 800067c:	f000 feb8 	bl	80013f0 <weoClear>
	MEM_GetID();
 8000680:	f002 fa46 	bl	8002b10 <MEM_GetID>
	soundSetup();
 8000684:	f001 f83e 	bl	8001704 <soundSetup>
	LIS3DHsetup();
 8000688:	f004 fa18 	bl	8004abc <LIS3DHsetup>
//	I2C_SOUND_ChangePage(0x01);
//	WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//	WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
//    squeak_triple(signal);
//    squeak_long();
  USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <main+0x14c>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <main+0x14c>)
 8000692:	491e      	ldr	r1, [pc, #120]	; (800070c <main+0x150>)
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]
	LL_USART_EnableIT_RXNE(USART2);
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <main+0x14c>)
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff feee 	bl	800047c <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <main+0x14c>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ff09 	bl	80004ba <LL_USART_EnableIT_ERROR>
	USART2->ICR|=USART_ICR_ORECF;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <main+0x14c>)
 80006aa:	6a1a      	ldr	r2, [r3, #32]
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <main+0x14c>)
 80006ae:	2108      	movs	r1, #8
 80006b0:	430a      	orrs	r2, r1
 80006b2:	621a      	str	r2, [r3, #32]
//				if(y % 2 !=0){
//					decY=0x02;
//				}
//	weoDrawRectangleFilled(x,y,(x+localWidth-1),(y+localHeight-decY),0xFF,aim);

	for(uint8_t k = 0; k < 16; k++)
 80006b4:	231f      	movs	r3, #31
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	e00f      	b.n	80006de <main+0x122>
	{
		soundPlay(k);
 80006be:	241f      	movs	r4, #31
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 ff89 	bl	80025dc <soundPlay>
		HAL_Delay(1000);
 80006ca:	23fa      	movs	r3, #250	; 0xfa
 80006cc:	009b      	lsls	r3, r3, #2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f004 fec4 	bl	800545c <HAL_Delay>
	for(uint8_t k = 0; k < 16; k++)
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	3201      	adds	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	231f      	movs	r3, #31
 80006e0:	18fb      	adds	r3, r7, r3
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b0f      	cmp	r3, #15
 80006e6:	d9ea      	bls.n	80006be <main+0x102>
	}
//    GPIOB->PUPDR &= ~0x3F000;
	GPIOC->ODR |= 1 << 6;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <main+0x154>)
 80006ea:	695a      	ldr	r2, [r3, #20]
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <main+0x154>)
 80006ee:	2140      	movs	r1, #64	; 0x40
 80006f0:	430a      	orrs	r2, r1
 80006f2:	615a      	str	r2, [r3, #20]
	while (1) {
//		weoShowSmallImage(0x02,0x70,0x00);
//		LIS3DHreadData();
		cmdExecute(cmd2Execute);
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <main+0x158>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	0018      	movs	r0, r3
 80006fa:	f002 fa6b 	bl	8002bd4 <cmdExecute>
 80006fe:	e7f9      	b.n	80006f4 <main+0x138>
 8000700:	40021000 	.word	0x40021000
 8000704:	2000005c 	.word	0x2000005c
 8000708:	40004400 	.word	0x40004400
 800070c:	1000100d 	.word	0x1000100d
 8000710:	50000800 	.word	0x50000800
 8000714:	200002ea 	.word	0x200002ea

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b0a1      	sub	sp, #132	; 0x84
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	2448      	movs	r4, #72	; 0x48
 8000720:	193b      	adds	r3, r7, r4
 8000722:	0018      	movs	r0, r3
 8000724:	2338      	movs	r3, #56	; 0x38
 8000726:	001a      	movs	r2, r3
 8000728:	2100      	movs	r1, #0
 800072a:	f00c f91b 	bl	800c964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072e:	2338      	movs	r3, #56	; 0x38
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	0018      	movs	r0, r3
 8000734:	2310      	movs	r3, #16
 8000736:	001a      	movs	r2, r3
 8000738:	2100      	movs	r1, #0
 800073a:	f00c f913 	bl	800c964 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	0018      	movs	r0, r3
 8000742:	2334      	movs	r3, #52	; 0x34
 8000744:	001a      	movs	r2, r3
 8000746:	2100      	movs	r1, #0
 8000748:	f00c f90c 	bl	800c964 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	0018      	movs	r0, r3
 8000752:	f007 fb25 	bl	8007da0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2202      	movs	r2, #2
 800075a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	0052      	lsls	r2, r2, #1
 8000762:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000764:	0021      	movs	r1, r4
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2240      	movs	r2, #64	; 0x40
 8000770:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2202      	movs	r2, #2
 8000776:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2202      	movs	r2, #2
 800077c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2208      	movs	r2, #8
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	0292      	lsls	r2, r2, #10
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	0492      	lsls	r2, r2, #18
 8000798:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	0592      	lsls	r2, r2, #22
 80007a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	0018      	movs	r0, r3
 80007a6:	f007 fb47 	bl	8007e38 <HAL_RCC_OscConfig>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ae:	f004 f9b7 	bl	8004b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b2:	2138      	movs	r1, #56	; 0x38
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2207      	movs	r2, #7
 80007b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2202      	movs	r2, #2
 80007be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2102      	movs	r1, #2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f007 fe4b 	bl	800846c <HAL_RCC_ClockConfig>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007da:	f004 f9a1 	bl	8004b20 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <SystemClock_Config+0xfc>)
 80007e2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	0018      	movs	r0, r3
 8000800:	f007 ffde 	bl	80087c0 <HAL_RCCEx_PeriphCLKConfig>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000808:	f004 f98a 	bl	8004b20 <Error_Handler>
  }
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b021      	add	sp, #132	; 0x84
 8000812:	bd90      	pop	{r4, r7, pc}
 8000814:	00200822 	.word	0x00200822

08000818 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_COMP1_Init+0x5c>)
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <MX_COMP1_Init+0x60>)
 8000820:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_COMP1_Init+0x5c>)
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	0052      	lsls	r2, r2, #1
 8000828:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_COMP1_Init+0x5c>)
 800082c:	2230      	movs	r2, #48	; 0x30
 800082e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_COMP1_Init+0x5c>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_COMP1_Init+0x5c>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_COMP1_Init+0x5c>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_COMP1_Init+0x5c>)
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	0392      	lsls	r2, r2, #14
 8000848:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_COMP1_Init+0x5c>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_COMP1_Init+0x5c>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_COMP1_Init+0x5c>)
 8000858:	2212      	movs	r2, #18
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <MX_COMP1_Init+0x5c>)
 800085e:	0018      	movs	r0, r3
 8000860:	f004 fee2 	bl	8005628 <HAL_COMP_Init>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 8000868:	f004 f95a 	bl	8004b20 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	2000005c 	.word	0x2000005c
 8000878:	40010200 	.word	0x40010200

0800087c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_I2C1_Init+0x74>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <MX_I2C1_Init+0x78>)
 8000884:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_I2C1_Init+0x74>)
 8000888:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <MX_I2C1_Init+0x7c>)
 800088a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_I2C1_Init+0x74>)
 8000894:	2201      	movs	r2, #1
 8000896:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_I2C1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_I2C1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_I2C1_Init+0x74>)
 80008b8:	0018      	movs	r0, r3
 80008ba:	f005 fd73 	bl	80063a4 <HAL_I2C_Init>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008c2:	f004 f92d 	bl	8004b20 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_I2C1_Init+0x74>)
 80008c8:	2100      	movs	r1, #0
 80008ca:	0018      	movs	r0, r3
 80008cc:	f006 fefc 	bl	80076c8 <HAL_I2CEx_ConfigAnalogFilter>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008d4:	f004 f924 	bl	8004b20 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <MX_I2C1_Init+0x74>)
 80008da:	2100      	movs	r1, #0
 80008dc:	0018      	movs	r0, r3
 80008de:	f006 ff3f 	bl	8007760 <HAL_I2CEx_ConfigDigitalFilter>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f004 f91b 	bl	8004b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000008c 	.word	0x2000008c
 80008f4:	40005400 	.word	0x40005400
 80008f8:	1094102c 	.word	0x1094102c

080008fc <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_I2S1_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_I2S1_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_I2S1_Init+0x4c>)
 8000908:	2280      	movs	r2, #128	; 0x80
 800090a:	0092      	lsls	r2, r2, #2
 800090c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_I2S1_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_I2S1_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_I2S1_Init+0x4c>)
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	0092      	lsls	r2, r2, #2
 8000920:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_I2S1_Init+0x4c>)
 8000924:	22fa      	movs	r2, #250	; 0xfa
 8000926:	0192      	lsls	r2, r2, #6
 8000928:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_I2S1_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <MX_I2S1_Init+0x4c>)
 8000932:	0018      	movs	r0, r3
 8000934:	f006 ff60 	bl	80077f8 <HAL_I2S_Init>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d001      	beq.n	8000940 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 800093c:	f004 f8f0 	bl	8004b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	200000e0 	.word	0x200000e0
 800094c:	40013000 	.word	0x40013000

08000950 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <MX_SPI2_Init+0x80>)
 8000956:	2208      	movs	r2, #8
 8000958:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800095a:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_SPI2_Init+0x80>)
 800095c:	4a1d      	ldr	r2, [pc, #116]	; (80009d4 <MX_SPI2_Init+0x84>)
 800095e:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_SPI2_Init+0x80>)
 8000962:	2282      	movs	r2, #130	; 0x82
 8000964:	0052      	lsls	r2, r2, #1
 8000966:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_SPI2_Init+0x80>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_SPI2_Init+0x80>)
 8000970:	22e0      	movs	r2, #224	; 0xe0
 8000972:	00d2      	lsls	r2, r2, #3
 8000974:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_SPI2_Init+0x80>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_SPI2_Init+0x80>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_SPI2_Init+0x80>)
 8000984:	2280      	movs	r2, #128	; 0x80
 8000986:	0092      	lsls	r2, r2, #2
 8000988:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_SPI2_Init+0x80>)
 800098c:	2210      	movs	r2, #16
 800098e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_SPI2_Init+0x80>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_SPI2_Init+0x80>)
 8000998:	2200      	movs	r2, #0
 800099a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_SPI2_Init+0x80>)
 800099e:	2200      	movs	r2, #0
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_SPI2_Init+0x80>)
 80009a4:	2207      	movs	r2, #7
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_SPI2_Init+0x80>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_SPI2_Init+0x80>)
 80009b0:	2208      	movs	r2, #8
 80009b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_SPI2_Init+0x80>)
 80009b6:	0018      	movs	r0, r3
 80009b8:	f008 fc02 	bl	80091c0 <HAL_SPI_Init>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d001      	beq.n	80009c4 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80009c0:	f004 f8ae 	bl	8004b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <MX_SPI2_Init+0x80>)
 80009c6:	2208      	movs	r2, #8
 80009c8:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000178 	.word	0x20000178
 80009d4:	40003800 	.word	0x40003800

080009d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b09e      	sub	sp, #120	; 0x78
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	2368      	movs	r3, #104	; 0x68
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	0018      	movs	r0, r3
 80009e4:	2310      	movs	r3, #16
 80009e6:	001a      	movs	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f00b ffbb 	bl	800c964 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ee:	235c      	movs	r3, #92	; 0x5c
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	0018      	movs	r0, r3
 80009f4:	230c      	movs	r3, #12
 80009f6:	001a      	movs	r2, r3
 80009f8:	2100      	movs	r1, #0
 80009fa:	f00b ffb3 	bl	800c964 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80009fe:	2350      	movs	r3, #80	; 0x50
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	0018      	movs	r0, r3
 8000a04:	230c      	movs	r3, #12
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f00b ffab 	bl	800c964 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0e:	2334      	movs	r3, #52	; 0x34
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	0018      	movs	r0, r3
 8000a14:	231c      	movs	r3, #28
 8000a16:	001a      	movs	r2, r3
 8000a18:	2100      	movs	r1, #0
 8000a1a:	f00b ffa3 	bl	800c964 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a1e:	003b      	movs	r3, r7
 8000a20:	0018      	movs	r0, r3
 8000a22:	2334      	movs	r3, #52	; 0x34
 8000a24:	001a      	movs	r2, r3
 8000a26:	2100      	movs	r1, #0
 8000a28:	f00b ff9c 	bl	800c964 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a2c:	4b64      	ldr	r3, [pc, #400]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000a2e:	4a65      	ldr	r2, [pc, #404]	; (8000bc4 <MX_TIM1_Init+0x1ec>)
 8000a30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a32:	4b63      	ldr	r3, [pc, #396]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	4b61      	ldr	r3, [pc, #388]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8000a3e:	4b60      	ldr	r3, [pc, #384]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000a40:	4a61      	ldr	r2, [pc, #388]	; (8000bc8 <MX_TIM1_Init+0x1f0>)
 8000a42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b5e      	ldr	r3, [pc, #376]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a4a:	4b5d      	ldr	r3, [pc, #372]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a50:	4b5b      	ldr	r3, [pc, #364]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a56:	4b5a      	ldr	r3, [pc, #360]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f009 fbcf 	bl	800a1fc <HAL_TIM_Base_Init>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000a62:	f004 f85d 	bl	8004b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a66:	2168      	movs	r1, #104	; 0x68
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	0152      	lsls	r2, r2, #5
 8000a6e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a70:	187a      	adds	r2, r7, r1
 8000a72:	4b53      	ldr	r3, [pc, #332]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f009 fe62 	bl	800a740 <HAL_TIM_ConfigClockSource>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000a80:	f004 f84e 	bl	8004b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a84:	4b4e      	ldr	r3, [pc, #312]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f009 fc10 	bl	800a2ac <HAL_TIM_PWM_Init>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000a90:	f004 f846 	bl	8004b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a94:	215c      	movs	r1, #92	; 0x5c
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aa8:	187a      	adds	r2, r7, r1
 8000aaa:	4b45      	ldr	r3, [pc, #276]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000aac:	0011      	movs	r1, r2
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f00a fb20 	bl	800b0f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000ab8:	f004 f832 	bl	8004b20 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000abc:	2150      	movs	r1, #80	; 0x50
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000ad0:	187a      	adds	r2, r7, r1
 8000ad2:	4b3b      	ldr	r3, [pc, #236]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f00a fc20 	bl	800b31c <HAL_TIMEx_ConfigBreakInput>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000ae0:	f004 f81e 	bl	8004b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae4:	2134      	movs	r1, #52	; 0x34
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2260      	movs	r2, #96	; 0x60
 8000aea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2296      	movs	r2, #150	; 0x96
 8000af0:	0052      	lsls	r2, r2, #1
 8000af2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2204      	movs	r2, #4
 8000b04:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2200      	movs	r2, #0
 8000b0a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2200      	movs	r2, #0
 8000b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b12:	1879      	adds	r1, r7, r1
 8000b14:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f009 fd11 	bl	800a540 <HAL_TIM_PWM_ConfigChannel>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000b22:	f003 fffd 	bl	8004b20 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000b26:	2134      	movs	r1, #52	; 0x34
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2232      	movs	r2, #50	; 0x32
 8000b2c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000b2e:	1879      	adds	r1, r7, r1
 8000b30:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000b32:	2210      	movs	r2, #16
 8000b34:	0018      	movs	r0, r3
 8000b36:	f009 fd03 	bl	800a540 <HAL_TIM_PWM_ConfigChannel>
 8000b3a:	1e03      	subs	r3, r0, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000b3e:	f003 ffef 	bl	8004b20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000b42:	003b      	movs	r3, r7
 8000b44:	2280      	movs	r2, #128	; 0x80
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	00d2      	lsls	r2, r2, #3
 8000b50:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b52:	003b      	movs	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b58:	003b      	movs	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000b5e:	003b      	movs	r3, r7
 8000b60:	2280      	movs	r2, #128	; 0x80
 8000b62:	0152      	lsls	r2, r2, #5
 8000b64:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2280      	movs	r2, #128	; 0x80
 8000b6a:	0192      	lsls	r2, r2, #6
 8000b6c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000b6e:	003b      	movs	r3, r7
 8000b70:	220a      	movs	r2, #10
 8000b72:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b74:	003b      	movs	r3, r7
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b7a:	003b      	movs	r3, r7
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b80:	003b      	movs	r3, r7
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	0492      	lsls	r2, r2, #18
 8000b86:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b88:	003b      	movs	r3, r7
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b8e:	003b      	movs	r3, r7
 8000b90:	2200      	movs	r2, #0
 8000b92:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000b94:	003b      	movs	r3, r7
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	01d2      	lsls	r2, r2, #7
 8000b9a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b9c:	003a      	movs	r2, r7
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000ba0:	0011      	movs	r1, r2
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f00a fb14 	bl	800b1d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ba8:	1e03      	subs	r3, r0, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000bac:	f003 ffb8 	bl	8004b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <MX_TIM1_Init+0x1e8>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f004 f9e2 	bl	8004f7c <HAL_TIM_MspPostInit>

}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b01e      	add	sp, #120	; 0x78
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200001dc 	.word	0x200001dc
 8000bc4:	40012c00 	.word	0x40012c00
 8000bc8:	0000027f 	.word	0x0000027f

08000bcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b08f      	sub	sp, #60	; 0x3c
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000bd2:	2418      	movs	r4, #24
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	2320      	movs	r3, #32
 8000bda:	001a      	movs	r2, r3
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f00b fec1 	bl	800c964 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	003b      	movs	r3, r7
 8000be4:	0018      	movs	r0, r3
 8000be6:	2318      	movs	r3, #24
 8000be8:	001a      	movs	r2, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	f00b feba 	bl	800c964 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	029b      	lsls	r3, r3, #10
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff fcb5 	bl	8000564 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f7ff fcc8 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000c00:	003b      	movs	r3, r7
 8000c02:	2204      	movs	r2, #4
 8000c04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c06:	003b      	movs	r3, r7
 8000c08:	2202      	movs	r2, #2
 8000c0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c0c:	003b      	movs	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c12:	003b      	movs	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c18:	003b      	movs	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000c1e:	003b      	movs	r3, r7
 8000c20:	2201      	movs	r2, #1
 8000c22:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	003a      	movs	r2, r7
 8000c26:	23a0      	movs	r3, #160	; 0xa0
 8000c28:	05db      	lsls	r3, r3, #23
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f00b fb17 	bl	800c260 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000c32:	003b      	movs	r3, r7
 8000c34:	2208      	movs	r2, #8
 8000c36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c38:	003b      	movs	r3, r7
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c3e:	003b      	movs	r3, r7
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c44:	003b      	movs	r3, r7
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c4a:	003b      	movs	r3, r7
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000c50:	003b      	movs	r3, r7
 8000c52:	2201      	movs	r2, #1
 8000c54:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	003a      	movs	r2, r7
 8000c58:	23a0      	movs	r3, #160	; 0xa0
 8000c5a:	05db      	lsls	r3, r3, #23
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f00b fafe 	bl	800c260 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000c64:	2100      	movs	r1, #0
 8000c66:	201c      	movs	r0, #28
 8000c68:	f7ff faf2 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000c6c:	201c      	movs	r0, #28
 8000c6e:	f7ff fad5 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	22e1      	movs	r2, #225	; 0xe1
 8000c7c:	0212      	lsls	r2, r2, #8
 8000c7e:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000c80:	193b      	adds	r3, r7, r4
 8000c82:	2280      	movs	r2, #128	; 0x80
 8000c84:	0152      	lsls	r2, r2, #5
 8000c86:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c88:	0021      	movs	r1, r4
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	220c      	movs	r2, #12
 8000c9a:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	4a16      	ldr	r2, [pc, #88]	; (8000d04 <MX_USART2_UART_Init+0x138>)
 8000cac:	0019      	movs	r1, r3
 8000cae:	0010      	movs	r0, r2
 8000cb0:	f00b fda6 	bl	800c800 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_USART2_UART_Init+0x138>)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f7ff fb55 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_USART2_UART_Init+0x138>)
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff fb74 	bl	80003b0 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_USART2_UART_Init+0x138>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff fb3c 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_USART2_UART_Init+0x138>)
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff fb92 	bl	80003fc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <MX_USART2_UART_Init+0x138>)
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff fb26 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_USART2_UART_Init+0x138>)
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff fba1 	bl	800042c <LL_USART_IsActiveFlag_TEACK>
 8000cea:	1e03      	subs	r3, r0, #0
 8000cec:	d0f9      	beq.n	8000ce2 <MX_USART2_UART_Init+0x116>
 8000cee:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <MX_USART2_UART_Init+0x138>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fbaf 	bl	8000454 <LL_USART_IsActiveFlag_REACK>
 8000cf6:	1e03      	subs	r3, r0, #0
 8000cf8:	d0f3      	beq.n	8000ce2 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b00f      	add	sp, #60	; 0x3c
 8000d02:	bd90      	pop	{r4, r7, pc}
 8000d04:	40004400 	.word	0x40004400

08000d08 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <MX_USART3_Init+0x78>)
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_USART3_Init+0x78>)
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	0309      	lsls	r1, r1, #12
 8000d16:	430a      	orrs	r2, r1
 8000d18:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_USART3_Init+0x7c>)
 8000d1c:	4a18      	ldr	r2, [pc, #96]	; (8000d80 <MX_USART3_Init+0x78>)
 8000d1e:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_USART3_Init+0x7c>)
 8000d22:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <MX_USART3_Init+0x80>)
 8000d24:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_USART3_Init+0x7c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_USART3_Init+0x7c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_USART3_Init+0x7c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_USART3_Init+0x7c>)
 8000d3a:	2208      	movs	r2, #8
 8000d3c:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_USART3_Init+0x7c>)
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	00d2      	lsls	r2, r2, #3
 8000d44:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_USART3_Init+0x7c>)
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	0092      	lsls	r2, r2, #2
 8000d4c:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <MX_USART3_Init+0x7c>)
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	0052      	lsls	r2, r2, #1
 8000d54:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_USART3_Init+0x7c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_USART3_Init+0x7c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_USART3_Init+0x7c>)
 8000d64:	0018      	movs	r0, r3
 8000d66:	f00a fb85 	bl	800b474 <HAL_USART_Init>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000d6e:	f003 fed7 	bl	8004b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8000000;
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <MX_USART3_Init+0x7c>)
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <MX_USART3_Init+0x80>)
 8000d76:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	40004800 	.word	0x40004800
 8000d84:	20000228 	.word	0x20000228
 8000d88:	007a1200 	.word	0x007a1200

08000d8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_DMA_Init+0x58>)
 8000d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_DMA_Init+0x58>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	639a      	str	r2, [r3, #56]	; 0x38
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_DMA_Init+0x58>)
 8000da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000da2:	2201      	movs	r2, #1
 8000da4:	4013      	ands	r3, r2
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	2009      	movs	r0, #9
 8000db0:	f004 fe9a 	bl	8005ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000db4:	2009      	movs	r0, #9
 8000db6:	f004 feac 	bl	8005b12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	200a      	movs	r0, #10
 8000dc0:	f004 fe92 	bl	8005ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000dc4:	200a      	movs	r0, #10
 8000dc6:	f004 fea4 	bl	8005b12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	200b      	movs	r0, #11
 8000dd0:	f004 fe8a 	bl	8005ae8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000dd4:	200b      	movs	r0, #11
 8000dd6:	f004 fe9c 	bl	8005b12 <HAL_NVIC_EnableIRQ>

}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	40021000 	.word	0x40021000

08000de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	003b      	movs	r3, r7
 8000df0:	0018      	movs	r0, r3
 8000df2:	2318      	movs	r3, #24
 8000df4:	001a      	movs	r2, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	f00b fdb4 	bl	800c964 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000dfc:	2002      	movs	r0, #2
 8000dfe:	f7ff fbc7 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000e02:	2004      	movs	r0, #4
 8000e04:	f7ff fbc4 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f7ff fbc1 	bl	8000590 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	4aa0      	ldr	r2, [pc, #640]	; (8001094 <MX_GPIO_Init+0x2ac>)
 8000e14:	0019      	movs	r1, r3
 8000e16:	0010      	movs	r0, r2
 8000e18:	f7ff fb8c 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	01db      	lsls	r3, r3, #7
 8000e20:	4a9c      	ldr	r2, [pc, #624]	; (8001094 <MX_GPIO_Init+0x2ac>)
 8000e22:	0019      	movs	r1, r3
 8000e24:	0010      	movs	r0, r2
 8000e26:	f7ff fb85 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4a9a      	ldr	r2, [pc, #616]	; (8001098 <MX_GPIO_Init+0x2b0>)
 8000e30:	0019      	movs	r1, r3
 8000e32:	0010      	movs	r0, r2
 8000e34:	f7ff fb7e 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000e38:	23a0      	movs	r3, #160	; 0xa0
 8000e3a:	05db      	lsls	r3, r3, #23
 8000e3c:	2140      	movs	r1, #64	; 0x40
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f7ff fb78 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000e44:	23a0      	movs	r3, #160	; 0xa0
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	2180      	movs	r1, #128	; 0x80
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f7ff fb72 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000e50:	4b90      	ldr	r3, [pc, #576]	; (8001094 <MX_GPIO_Init+0x2ac>)
 8000e52:	2140      	movs	r1, #64	; 0x40
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff fb6d 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	011a      	lsls	r2, r3, #4
 8000e5e:	23a0      	movs	r3, #160	; 0xa0
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	0011      	movs	r1, r2
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff fb71 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	015a      	lsls	r2, r3, #5
 8000e6e:	23a0      	movs	r3, #160	; 0xa0
 8000e70:	05db      	lsls	r3, r3, #23
 8000e72:	0011      	movs	r1, r2
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff fb69 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000e7a:	003b      	movs	r3, r7
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	0212      	lsls	r2, r2, #8
 8000e80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e82:	003b      	movs	r3, r7
 8000e84:	2201      	movs	r2, #1
 8000e86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	003b      	movs	r3, r7
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e8e:	003b      	movs	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e94:	003b      	movs	r3, r7
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	003b      	movs	r3, r7
 8000e9c:	4a7d      	ldr	r2, [pc, #500]	; (8001094 <MX_GPIO_Init+0x2ac>)
 8000e9e:	0019      	movs	r1, r3
 8000ea0:	0010      	movs	r0, r2
 8000ea2:	f00b f9dd 	bl	800c260 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000ea6:	003b      	movs	r3, r7
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	01d2      	lsls	r2, r2, #7
 8000eac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eae:	003b      	movs	r3, r7
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eb4:	003b      	movs	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eba:	003b      	movs	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ec0:	003b      	movs	r3, r7
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	4a72      	ldr	r2, [pc, #456]	; (8001094 <MX_GPIO_Init+0x2ac>)
 8000eca:	0019      	movs	r1, r3
 8000ecc:	0010      	movs	r0, r2
 8000ece:	f00b f9c7 	bl	800c260 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000ed2:	003b      	movs	r3, r7
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	0092      	lsls	r2, r2, #2
 8000ed8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eda:	003b      	movs	r3, r7
 8000edc:	2201      	movs	r2, #1
 8000ede:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ee0:	003b      	movs	r3, r7
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ee6:	003b      	movs	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eec:	003b      	movs	r3, r7
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	003b      	movs	r3, r7
 8000ef4:	4a68      	ldr	r2, [pc, #416]	; (8001098 <MX_GPIO_Init+0x2b0>)
 8000ef6:	0019      	movs	r1, r3
 8000ef8:	0010      	movs	r0, r2
 8000efa:	f00b f9b1 	bl	800c260 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000efe:	003b      	movs	r3, r7
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f04:	003b      	movs	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f0a:	003b      	movs	r3, r7
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000f10:	003a      	movs	r2, r7
 8000f12:	23a0      	movs	r3, #160	; 0xa0
 8000f14:	05db      	lsls	r3, r3, #23
 8000f16:	0011      	movs	r1, r2
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f00b f9a1 	bl	800c260 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000f1e:	003b      	movs	r3, r7
 8000f20:	2202      	movs	r2, #2
 8000f22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f24:	003b      	movs	r3, r7
 8000f26:	2200      	movs	r2, #0
 8000f28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f2a:	003b      	movs	r3, r7
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000f30:	003a      	movs	r2, r7
 8000f32:	23a0      	movs	r3, #160	; 0xa0
 8000f34:	05db      	lsls	r3, r3, #23
 8000f36:	0011      	movs	r1, r2
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f00b f991 	bl	800c260 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000f3e:	003b      	movs	r3, r7
 8000f40:	2210      	movs	r2, #16
 8000f42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f44:	003b      	movs	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f4a:	003b      	movs	r3, r7
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000f50:	003a      	movs	r2, r7
 8000f52:	23a0      	movs	r3, #160	; 0xa0
 8000f54:	05db      	lsls	r3, r3, #23
 8000f56:	0011      	movs	r1, r2
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f00b f981 	bl	800c260 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000f5e:	003b      	movs	r3, r7
 8000f60:	2240      	movs	r2, #64	; 0x40
 8000f62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f64:	003b      	movs	r3, r7
 8000f66:	2201      	movs	r2, #1
 8000f68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	003b      	movs	r3, r7
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f70:	003b      	movs	r3, r7
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f76:	003b      	movs	r3, r7
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	003a      	movs	r2, r7
 8000f7e:	23a0      	movs	r3, #160	; 0xa0
 8000f80:	05db      	lsls	r3, r3, #23
 8000f82:	0011      	movs	r1, r2
 8000f84:	0018      	movs	r0, r3
 8000f86:	f00b f96b 	bl	800c260 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000f8a:	003b      	movs	r3, r7
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f90:	003b      	movs	r3, r7
 8000f92:	2201      	movs	r2, #1
 8000f94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	003b      	movs	r3, r7
 8000f98:	2203      	movs	r2, #3
 8000f9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f9c:	003b      	movs	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fa2:	003b      	movs	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	003a      	movs	r2, r7
 8000faa:	23a0      	movs	r3, #160	; 0xa0
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	0011      	movs	r1, r2
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f00b f955 	bl	800c260 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000fb6:	003b      	movs	r3, r7
 8000fb8:	2240      	movs	r2, #64	; 0x40
 8000fba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fbc:	003b      	movs	r3, r7
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	003b      	movs	r3, r7
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fc8:	003b      	movs	r3, r7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fce:	003b      	movs	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	003b      	movs	r3, r7
 8000fd6:	4a2f      	ldr	r2, [pc, #188]	; (8001094 <MX_GPIO_Init+0x2ac>)
 8000fd8:	0019      	movs	r1, r3
 8000fda:	0010      	movs	r0, r2
 8000fdc:	f00b f940 	bl	800c260 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8000fe0:	003b      	movs	r3, r7
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fe8:	003b      	movs	r3, r7
 8000fea:	2201      	movs	r2, #1
 8000fec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	003b      	movs	r3, r7
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ff4:	003b      	movs	r3, r7
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ffa:	003b      	movs	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8001000:	003a      	movs	r2, r7
 8001002:	23a0      	movs	r3, #160	; 0xa0
 8001004:	05db      	lsls	r3, r3, #23
 8001006:	0011      	movs	r1, r2
 8001008:	0018      	movs	r0, r3
 800100a:	f00b f929 	bl	800c260 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 800100e:	003b      	movs	r3, r7
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	0152      	lsls	r2, r2, #5
 8001014:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001016:	003b      	movs	r3, r7
 8001018:	2201      	movs	r2, #1
 800101a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	003b      	movs	r3, r7
 800101e:	2203      	movs	r2, #3
 8001020:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001022:	003b      	movs	r3, r7
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001028:	003b      	movs	r3, r7
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 800102e:	003a      	movs	r2, r7
 8001030:	23a0      	movs	r3, #160	; 0xa0
 8001032:	05db      	lsls	r3, r3, #23
 8001034:	0011      	movs	r1, r2
 8001036:	0018      	movs	r0, r3
 8001038:	f00b f912 	bl	800c260 <LL_GPIO_Init>

  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 800103c:	003b      	movs	r3, r7
 800103e:	2280      	movs	r2, #128	; 0x80
 8001040:	0192      	lsls	r2, r2, #6
 8001042:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001044:	003b      	movs	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800104a:	003b      	movs	r3, r7
 800104c:	2201      	movs	r2, #1
 800104e:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8001050:	003a      	movs	r2, r7
 8001052:	23a0      	movs	r3, #160	; 0xa0
 8001054:	05db      	lsls	r3, r3, #23
 8001056:	0011      	movs	r1, r2
 8001058:	0018      	movs	r0, r3
 800105a:	f00b f901 	bl	800c260 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 800105e:	003b      	movs	r3, r7
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	01d2      	lsls	r2, r2, #7
 8001064:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001066:	003b      	movs	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800106c:	003b      	movs	r3, r7
 800106e:	2201      	movs	r2, #1
 8001070:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8001072:	003a      	movs	r2, r7
 8001074:	23a0      	movs	r3, #160	; 0xa0
 8001076:	05db      	lsls	r3, r3, #23
 8001078:	0011      	movs	r1, r2
 800107a:	0018      	movs	r0, r3
 800107c:	f00b f8f0 	bl	800c260 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	031b      	lsls	r3, r3, #12
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff fa45 	bl	8000514 <LL_SYSCFG_EnableFastModePlus>

}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b006      	add	sp, #24
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	50000800 	.word	0x50000800
 8001098:	50000400 	.word	0x50000400

0800109c <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <USART2_RX_Callback+0x58>)
 80010a2:	0018      	movs	r0, r3
 80010a4:	f7ff fa28 	bl	80004f8 <LL_USART_ReceiveData9>
 80010a8:	0003      	movs	r3, r0
 80010aa:	001a      	movs	r2, r3
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <USART2_RX_Callback+0x5c>)
 80010ae:	801a      	strh	r2, [r3, #0]
//	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
  ByteReceived=1;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <USART2_RX_Callback+0x60>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
  if(dt1 & 0x100){
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <USART2_RX_Callback+0x5c>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	001a      	movs	r2, r3
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4013      	ands	r3, r2
 80010c2:	d00a      	beq.n	80010da <USART2_RX_Callback+0x3e>
	  cmd[0]=dt1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <USART2_RX_Callback+0x5c>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <USART2_RX_Callback+0x64>)
 80010cc:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <USART2_RX_Callback+0x68>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <USART2_RX_Callback+0x6c>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <USART2_RX_Callback+0x6c>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d104      	bne.n	80010ec <USART2_RX_Callback+0x50>
	  cmdReceive(dt1);
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <USART2_RX_Callback+0x5c>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	0018      	movs	r0, r3
 80010e8:	f000 f84a 	bl	8001180 <cmdReceive>
  }
}
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	40004400 	.word	0x40004400
 80010f8:	200002e6 	.word	0x200002e6
 80010fc:	200002e4 	.word	0x200002e4
 8001100:	200002b4 	.word	0x200002b4
 8001104:	200002e8 	.word	0x200002e8
 8001108:	200002e5 	.word	0x200002e5

0800110c <HAL_USART_TxCpltCallback>:
//return;
//	}
}
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001114:	23a0      	movs	r3, #160	; 0xa0
 8001116:	05db      	lsls	r3, r3, #23
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	23a0      	movs	r3, #160	; 0xa0
 800111c:	05db      	lsls	r3, r3, #23
 800111e:	2180      	movs	r1, #128	; 0x80
 8001120:	438a      	bics	r2, r1
 8001122:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8001124:	23a0      	movs	r3, #160	; 0xa0
 8001126:	05db      	lsls	r3, r3, #23
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	23a0      	movs	r3, #160	; 0xa0
 800112c:	05db      	lsls	r3, r3, #23
 800112e:	2140      	movs	r1, #64	; 0x40
 8001130:	430a      	orrs	r2, r1
 8001132:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_USART_TxCpltCallback+0x44>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
//	while(BFEN==0){};
	GPIOC->ODR |= 1 << 6;	//set BF
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_USART_TxCpltCallback+0x48>)
 800113c:	695a      	ldr	r2, [r3, #20]
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_USART_TxCpltCallback+0x48>)
 8001140:	2140      	movs	r1, #64	; 0x40
 8001142:	430a      	orrs	r2, r1
 8001144:	615a      	str	r2, [r3, #20]
}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	200002ea 	.word	0x200002ea
 8001154:	50000800 	.word	0x50000800

08001158 <HAL_I2S_TxHalfCpltCallback>:
	//	cmd2Execute=0;
//	GPIOC->ODR |= 1 << 6;	//set BF
}
//======================================================================================================================
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	sound_half_transfer_callback();
 8001160:	f001 fc6e 	bl	8002a40 <sound_half_transfer_callback>
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b002      	add	sp, #8
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_I2S_TxCpltCallback>:
//======================================================================================================================
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	sound_full_transfer_callback();
 8001174:	f001 fc6e 	bl	8002a54 <sound_full_transfer_callback>
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b002      	add	sp, #8
 800117e:	bd80      	pop	{r7, pc}

08001180 <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	0002      	movs	r2, r0
 8001188:	1dbb      	adds	r3, r7, #6
 800118a:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 800118c:	230f      	movs	r3, #15
 800118e:	18fb      	adds	r3, r7, r3
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	4b39      	ldr	r3, [pc, #228]	; (800127c <cmdReceive+0xfc>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0fb      	beq.n	8001196 <cmdReceive+0x16>
	  ByteReceived=0;
 800119e:	4b37      	ldr	r3, [pc, #220]	; (800127c <cmdReceive+0xfc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 80011a4:	4b36      	ldr	r3, [pc, #216]	; (8001280 <cmdReceive+0x100>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	001a      	movs	r2, r3
 80011aa:	1dbb      	adds	r3, r7, #6
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	b2d9      	uxtb	r1, r3
 80011b0:	4b34      	ldr	r3, [pc, #208]	; (8001284 <cmdReceive+0x104>)
 80011b2:	5499      	strb	r1, [r3, r2]
//	  if(dt1==0x110){
//		  BFEN=0;
//	  }
	  ind++;
 80011b4:	4b32      	ldr	r3, [pc, #200]	; (8001280 <cmdReceive+0x100>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <cmdReceive+0x100>)
 80011be:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 80011c0:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <cmdReceive+0x100>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d04f      	beq.n	8001268 <cmdReceive+0xe8>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <cmdReceive+0x100>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	001a      	movs	r2, r3
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <cmdReceive+0x104>)
 80011d0:	785b      	ldrb	r3, [r3, #1]
 80011d2:	3301      	adds	r3, #1
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dd47      	ble.n	8001268 <cmdReceive+0xe8>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 80011d8:	230f      	movs	r3, #15
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
 80011e0:	e00f      	b.n	8001202 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 80011e2:	210f      	movs	r1, #15
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4a26      	ldr	r2, [pc, #152]	; (8001284 <cmdReceive+0x104>)
 80011ea:	5cd2      	ldrb	r2, [r2, r3]
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <cmdReceive+0x108>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	18d3      	adds	r3, r2, r3
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <cmdReceive+0x108>)
 80011f6:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	3201      	adds	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <cmdReceive+0x104>)
 8001204:	785b      	ldrb	r3, [r3, #1]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	210f      	movs	r1, #15
 800120a:	187b      	adds	r3, r7, r1
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	429a      	cmp	r2, r3
 8001210:	dae7      	bge.n	80011e2 <cmdReceive+0x62>
			 }
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <cmdReceive+0x108>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d022      	beq.n	8001260 <cmdReceive+0xe0>
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <cmdReceive+0x100>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	001a      	movs	r2, r3
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <cmdReceive+0x104>)
 8001222:	785b      	ldrb	r3, [r3, #1]
 8001224:	3302      	adds	r3, #2
 8001226:	429a      	cmp	r2, r3
 8001228:	d11a      	bne.n	8001260 <cmdReceive+0xe0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
//				 firstByteReceived=0;
				 firstByteReceived=0;
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <cmdReceive+0x10c>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
				 				 for (i=0;i<cmd[1]+2;i++){
 8001230:	187b      	adds	r3, r7, r1
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	e00a      	b.n	800124e <cmdReceive+0xce>
				 					 cmd[i]=0;
 8001238:	200f      	movs	r0, #15
 800123a:	183b      	adds	r3, r7, r0
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	4a11      	ldr	r2, [pc, #68]	; (8001284 <cmdReceive+0x104>)
 8001240:	2100      	movs	r1, #0
 8001242:	54d1      	strb	r1, [r2, r3]
				 				 for (i=0;i<cmd[1]+2;i++){
 8001244:	183b      	adds	r3, r7, r0
 8001246:	781a      	ldrb	r2, [r3, #0]
 8001248:	183b      	adds	r3, r7, r0
 800124a:	3201      	adds	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <cmdReceive+0x104>)
 8001250:	785b      	ldrb	r3, [r3, #1]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	230f      	movs	r3, #15
 8001256:	18fb      	adds	r3, r7, r3
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	daec      	bge.n	8001238 <cmdReceive+0xb8>
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 800125e:	e003      	b.n	8001268 <cmdReceive+0xe8>
				 				 }
			 }
			 else{
				 answer2CPU(cmd);
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <cmdReceive+0x104>)
 8001262:	0018      	movs	r0, r3
 8001264:	f000 fad8 	bl	8001818 <answer2CPU>
//				 GPIOC->ODR |= 1 << 6;	//set BF
//			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <cmdReceive+0x110>)
 800126a:	6a1a      	ldr	r2, [r3, #32]
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <cmdReceive+0x110>)
 800126e:	2108      	movs	r1, #8
 8001270:	430a      	orrs	r2, r1
 8001272:	621a      	str	r2, [r3, #32]
	}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b004      	add	sp, #16
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200002e4 	.word	0x200002e4
 8001280:	200002e8 	.word	0x200002e8
 8001284:	200002b4 	.word	0x200002b4
 8001288:	200002ec 	.word	0x200002ec
 800128c:	200002e5 	.word	0x200002e5
 8001290:	40004400 	.word	0x40004400

08001294 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	0002      	movs	r2, r0
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 80012a0:	1df9      	adds	r1, r7, #7
 80012a2:	4804      	ldr	r0, [pc, #16]	; (80012b4 <USART_AS_SPI_sendCMD+0x20>)
 80012a4:	230a      	movs	r3, #10
 80012a6:	2201      	movs	r2, #1
 80012a8:	f00a f934 	bl	800b514 <HAL_USART_Transmit>
		}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000228 	.word	0x20000228

080012b8 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 80012bc:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <weoInit+0x130>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <weoInit+0x130>)
 80012c2:	2101      	movs	r1, #1
 80012c4:	438a      	bics	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 80012c8:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <weoInit+0x130>)
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <weoInit+0x130>)
 80012ce:	2180      	movs	r1, #128	; 0x80
 80012d0:	0309      	lsls	r1, r1, #12
 80012d2:	430a      	orrs	r2, r1
 80012d4:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 80012d6:	4b44      	ldr	r3, [pc, #272]	; (80013e8 <weoInit+0x130>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b43      	ldr	r3, [pc, #268]	; (80013e8 <weoInit+0x130>)
 80012dc:	2101      	movs	r1, #1
 80012de:	430a      	orrs	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f004 f8ba 	bl	800545c <HAL_Delay>
		HAL_Delay(1);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f004 f8b7 	bl	800545c <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012ee:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <weoInit+0x134>)
 80012f0:	2100      	movs	r1, #0
 80012f2:	0018      	movs	r0, r3
 80012f4:	f009 f83a 	bl	800a36c <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f004 f8af 	bl	800545c <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 80012fe:	23a0      	movs	r3, #160	; 0xa0
 8001300:	05db      	lsls	r3, r3, #23
 8001302:	695a      	ldr	r2, [r3, #20]
 8001304:	23a0      	movs	r3, #160	; 0xa0
 8001306:	05db      	lsls	r3, r3, #23
 8001308:	2140      	movs	r1, #64	; 0x40
 800130a:	438a      	bics	r2, r1
 800130c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 800130e:	23a0      	movs	r3, #160	; 0xa0
 8001310:	05db      	lsls	r3, r3, #23
 8001312:	695a      	ldr	r2, [r3, #20]
 8001314:	23a0      	movs	r3, #160	; 0xa0
 8001316:	05db      	lsls	r3, r3, #23
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	438a      	bics	r2, r1
 800131c:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 800131e:	20af      	movs	r0, #175	; 0xaf
 8001320:	f7ff ffb8 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xB8);
 8001324:	20b8      	movs	r0, #184	; 0xb8
 8001326:	f7ff ffb5 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff ffb2 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff ffaf 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(1);
 8001336:	2001      	movs	r0, #1
 8001338:	f7ff ffac 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(2);
 800133c:	2002      	movs	r0, #2
 800133e:	f7ff ffa9 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(4);
 8001342:	2004      	movs	r0, #4
 8001344:	f7ff ffa6 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(7);
 8001348:	2007      	movs	r0, #7
 800134a:	f7ff ffa3 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(11);
 800134e:	200b      	movs	r0, #11
 8001350:	f7ff ffa0 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(14);
 8001354:	200e      	movs	r0, #14
 8001356:	f7ff ff9d 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(18);
 800135a:	2012      	movs	r0, #18
 800135c:	f7ff ff9a 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(23);
 8001360:	2017      	movs	r0, #23
 8001362:	f7ff ff97 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(27);
 8001366:	201b      	movs	r0, #27
 8001368:	f7ff ff94 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(33);
 800136c:	2021      	movs	r0, #33	; 0x21
 800136e:	f7ff ff91 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(40);
 8001372:	2028      	movs	r0, #40	; 0x28
 8001374:	f7ff ff8e 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(49);
 8001378:	2031      	movs	r0, #49	; 0x31
 800137a:	f7ff ff8b 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(63);
 800137e:	203f      	movs	r0, #63	; 0x3f
 8001380:	f7ff ff88 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001384:	20a0      	movs	r0, #160	; 0xa0
 8001386:	f7ff ff85 	bl	8001294 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 800138a:	2051      	movs	r0, #81	; 0x51
 800138c:	f7ff ff82 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8001390:	2081      	movs	r0, #129	; 0x81
 8001392:	f7ff ff7f 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 8001396:	20ff      	movs	r0, #255	; 0xff
 8001398:	f7ff ff7c 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 800139c:	20a1      	movs	r0, #161	; 0xa1
 800139e:	f7ff ff79 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff ff76 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 80013a8:	20a2      	movs	r0, #162	; 0xa2
 80013aa:	f7ff ff73 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff ff70 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 80013b4:	20a8      	movs	r0, #168	; 0xa8
 80013b6:	f7ff ff6d 	bl	8001294 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80013ba:	207f      	movs	r0, #127	; 0x7f
 80013bc:	f7ff ff6a 	bl	8001294 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 80013c0:	23a0      	movs	r3, #160	; 0xa0
 80013c2:	05db      	lsls	r3, r3, #23
 80013c4:	695a      	ldr	r2, [r3, #20]
 80013c6:	23a0      	movs	r3, #160	; 0xa0
 80013c8:	05db      	lsls	r3, r3, #23
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	430a      	orrs	r2, r1
 80013ce:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 80013d0:	23a0      	movs	r3, #160	; 0xa0
 80013d2:	05db      	lsls	r3, r3, #23
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	23a0      	movs	r3, #160	; 0xa0
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	2140      	movs	r1, #64	; 0x40
 80013dc:	430a      	orrs	r2, r1
 80013de:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	40004800 	.word	0x40004800
 80013ec:	200001dc 	.word	0x200001dc

080013f0 <weoClear>:
	void weoClear(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80013f6:	23a0      	movs	r3, #160	; 0xa0
 80013f8:	05db      	lsls	r3, r3, #23
 80013fa:	695a      	ldr	r2, [r3, #20]
 80013fc:	23a0      	movs	r3, #160	; 0xa0
 80013fe:	05db      	lsls	r3, r3, #23
 8001400:	2140      	movs	r1, #64	; 0x40
 8001402:	438a      	bics	r2, r1
 8001404:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001406:	23a0      	movs	r3, #160	; 0xa0
 8001408:	05db      	lsls	r3, r3, #23
 800140a:	695a      	ldr	r2, [r3, #20]
 800140c:	23a0      	movs	r3, #160	; 0xa0
 800140e:	05db      	lsls	r3, r3, #23
 8001410:	2180      	movs	r1, #128	; 0x80
 8001412:	438a      	bics	r2, r1
 8001414:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001416:	2075      	movs	r0, #117	; 0x75
 8001418:	f7ff ff3c 	bl	8001294 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 800141c:	2000      	movs	r0, #0
 800141e:	f7ff ff39 	bl	8001294 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001422:	207f      	movs	r0, #127	; 0x7f
 8001424:	f7ff ff36 	bl	8001294 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001428:	2015      	movs	r0, #21
 800142a:	f7ff ff33 	bl	8001294 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff ff30 	bl	8001294 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001434:	207f      	movs	r0, #127	; 0x7f
 8001436:	f7ff ff2d 	bl	8001294 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800143a:	23a0      	movs	r3, #160	; 0xa0
 800143c:	05db      	lsls	r3, r3, #23
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	23a0      	movs	r3, #160	; 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	2140      	movs	r1, #64	; 0x40
 8001446:	438a      	bics	r2, r1
 8001448:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 800144a:	23a0      	movs	r3, #160	; 0xa0
 800144c:	05db      	lsls	r3, r3, #23
 800144e:	695a      	ldr	r2, [r3, #20]
 8001450:	23a0      	movs	r3, #160	; 0xa0
 8001452:	05db      	lsls	r3, r3, #23
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	430a      	orrs	r2, r1
 8001458:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 800145a:	1dbb      	adds	r3, r7, #6
 800145c:	2200      	movs	r2, #0
 800145e:	801a      	strh	r2, [r3, #0]
 8001460:	e00d      	b.n	800147e <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <weoClear+0xc0>)
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	4013      	ands	r3, r2
 800146c:	d0fa      	beq.n	8001464 <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <weoClear+0xc0>)
 8001470:	2200      	movs	r2, #0
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8001474:	1dbb      	adds	r3, r7, #6
 8001476:	881a      	ldrh	r2, [r3, #0]
 8001478:	1dbb      	adds	r3, r7, #6
 800147a:	3201      	adds	r2, #1
 800147c:	801a      	strh	r2, [r3, #0]
 800147e:	1dbb      	adds	r3, r7, #6
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <weoClear+0xc4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d9ec      	bls.n	8001462 <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001488:	23a0      	movs	r3, #160	; 0xa0
 800148a:	05db      	lsls	r3, r3, #23
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	23a0      	movs	r3, #160	; 0xa0
 8001490:	05db      	lsls	r3, r3, #23
 8001492:	2180      	movs	r1, #128	; 0x80
 8001494:	438a      	bics	r2, r1
 8001496:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8001498:	23a0      	movs	r3, #160	; 0xa0
 800149a:	05db      	lsls	r3, r3, #23
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	23a0      	movs	r3, #160	; 0xa0
 80014a0:	05db      	lsls	r3, r3, #23
 80014a2:	2140      	movs	r1, #64	; 0x40
 80014a4:	430a      	orrs	r2, r1
 80014a6:	615a      	str	r2, [r3, #20]
	}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40004800 	.word	0x40004800
 80014b4:	00002001 	.word	0x00002001

080014b8 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char contrast,
				uint8_t MEM_Buffer[]) {
 80014b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	0005      	movs	r5, r0
 80014c0:	000c      	movs	r4, r1
 80014c2:	0010      	movs	r0, r2
 80014c4:	0019      	movs	r1, r3
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	1c2a      	adds	r2, r5, #0
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	1dbb      	adds	r3, r7, #6
 80014ce:	1c22      	adds	r2, r4, #0
 80014d0:	701a      	strb	r2, [r3, #0]
 80014d2:	1d7b      	adds	r3, r7, #5
 80014d4:	1c02      	adds	r2, r0, #0
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	1c0a      	adds	r2, r1, #0
 80014dc:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80014de:	240e      	movs	r4, #14
 80014e0:	193b      	adds	r3, r7, r4
 80014e2:	2200      	movs	r2, #0
 80014e4:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80014e6:	1dfb      	adds	r3, r7, #7
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da00      	bge.n	80014f2 <weoDrawRectangleFilled+0x3a>
 80014f0:	e0c2      	b.n	8001678 <weoDrawRectangleFilled+0x1c0>
 80014f2:	1dbb      	adds	r3, r7, #6
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da00      	bge.n	80014fe <weoDrawRectangleFilled+0x46>
 80014fc:	e0bc      	b.n	8001678 <weoDrawRectangleFilled+0x1c0>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80014fe:	1d7b      	adds	r3, r7, #5
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b25b      	sxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	da00      	bge.n	800150a <weoDrawRectangleFilled+0x52>
 8001508:	e0b6      	b.n	8001678 <weoDrawRectangleFilled+0x1c0>
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b25b      	sxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	da00      	bge.n	8001516 <weoDrawRectangleFilled+0x5e>
 8001514:	e0b0      	b.n	8001678 <weoDrawRectangleFilled+0x1c0>
				return;
			}

			start_x_New=start_x;
 8001516:	250d      	movs	r5, #13
 8001518:	197b      	adds	r3, r7, r5
 800151a:	1dfa      	adds	r2, r7, #7
 800151c:	7812      	ldrb	r2, [r2, #0]
 800151e:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001520:	260c      	movs	r6, #12
 8001522:	19bb      	adds	r3, r7, r6
 8001524:	1d3a      	adds	r2, r7, #4
 8001526:	7812      	ldrb	r2, [r2, #0]
 8001528:	217f      	movs	r1, #127	; 0x7f
 800152a:	1a8a      	subs	r2, r1, r2
 800152c:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 800152e:	230b      	movs	r3, #11
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	1d7a      	adds	r2, r7, #5
 8001534:	7812      	ldrb	r2, [r2, #0]
 8001536:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001538:	220a      	movs	r2, #10
 800153a:	18bb      	adds	r3, r7, r2
 800153c:	1dba      	adds	r2, r7, #6
 800153e:	7812      	ldrb	r2, [r2, #0]
 8001540:	217f      	movs	r1, #127	; 0x7f
 8001542:	1a8a      	subs	r2, r1, r2
 8001544:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001546:	23a0      	movs	r3, #160	; 0xa0
 8001548:	05db      	lsls	r3, r3, #23
 800154a:	695a      	ldr	r2, [r3, #20]
 800154c:	23a0      	movs	r3, #160	; 0xa0
 800154e:	05db      	lsls	r3, r3, #23
 8001550:	2140      	movs	r1, #64	; 0x40
 8001552:	438a      	bics	r2, r1
 8001554:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001556:	23a0      	movs	r3, #160	; 0xa0
 8001558:	05db      	lsls	r3, r3, #23
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	23a0      	movs	r3, #160	; 0xa0
 800155e:	05db      	lsls	r3, r3, #23
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	438a      	bics	r2, r1
 8001564:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001566:	2075      	movs	r0, #117	; 0x75
 8001568:	f7ff fe94 	bl	8001294 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 800156c:	197b      	adds	r3, r7, r5
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff fe8f 	bl	8001294 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8001576:	230b      	movs	r3, #11
 8001578:	18fb      	adds	r3, r7, r3
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff fe89 	bl	8001294 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001582:	2015      	movs	r0, #21
 8001584:	f7ff fe86 	bl	8001294 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001588:	19bb      	adds	r3, r7, r6
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	085b      	lsrs	r3, r3, #1
 800158e:	b2db      	uxtb	r3, r3
 8001590:	0018      	movs	r0, r3
 8001592:	f7ff fe7f 	bl	8001294 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 8001596:	220a      	movs	r2, #10
 8001598:	18bb      	adds	r3, r7, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	085b      	lsrs	r3, r3, #1
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7ff fe77 	bl	8001294 <USART_AS_SPI_sendCMD>
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(contrast);
			GPIOA->ODR |= 1 << 7;	//set dc
 80015a6:	23a0      	movs	r3, #160	; 0xa0
 80015a8:	05db      	lsls	r3, r3, #23
 80015aa:	695a      	ldr	r2, [r3, #20]
 80015ac:	23a0      	movs	r3, #160	; 0xa0
 80015ae:	05db      	lsls	r3, r3, #23
 80015b0:	2180      	movs	r1, #128	; 0x80
 80015b2:	430a      	orrs	r2, r1
 80015b4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80015b6:	23a0      	movs	r3, #160	; 0xa0
 80015b8:	05db      	lsls	r3, r3, #23
 80015ba:	695a      	ldr	r2, [r3, #20]
 80015bc:	23a0      	movs	r3, #160	; 0xa0
 80015be:	05db      	lsls	r3, r3, #23
 80015c0:	2140      	movs	r1, #64	; 0x40
 80015c2:	430a      	orrs	r2, r1
 80015c4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80015c6:	23a0      	movs	r3, #160	; 0xa0
 80015c8:	05db      	lsls	r3, r3, #23
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	23a0      	movs	r3, #160	; 0xa0
 80015ce:	05db      	lsls	r3, r3, #23
 80015d0:	2140      	movs	r1, #64	; 0x40
 80015d2:	438a      	bics	r2, r1
 80015d4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80015d6:	23a0      	movs	r3, #160	; 0xa0
 80015d8:	05db      	lsls	r3, r3, #23
 80015da:	695a      	ldr	r2, [r3, #20]
 80015dc:	23a0      	movs	r3, #160	; 0xa0
 80015de:	05db      	lsls	r3, r3, #23
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	430a      	orrs	r2, r1
 80015e4:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 80015e6:	193b      	adds	r3, r7, r4
 80015e8:	2200      	movs	r2, #0
 80015ea:	801a      	strh	r2, [r3, #0]
 80015ec:	e012      	b.n	8001614 <weoDrawRectangleFilled+0x15c>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <weoDrawRectangleFilled+0x1c8>)
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	4013      	ands	r3, r2
 80015f8:	d0fa      	beq.n	80015f0 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 80015fa:	210e      	movs	r1, #14
 80015fc:	187b      	adds	r3, r7, r1
 80015fe:	881b      	ldrh	r3, [r3, #0]
 8001600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001602:	18d3      	adds	r3, r2, r3
 8001604:	781a      	ldrb	r2, [r3, #0]
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <weoDrawRectangleFilled+0x1c8>)
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800160a:	187b      	adds	r3, r7, r1
 800160c:	881a      	ldrh	r2, [r3, #0]
 800160e:	187b      	adds	r3, r7, r1
 8001610:	3201      	adds	r2, #1
 8001612:	801a      	strh	r2, [r3, #0]
 8001614:	230e      	movs	r3, #14
 8001616:	18fb      	adds	r3, r7, r3
 8001618:	881a      	ldrh	r2, [r3, #0]
 800161a:	230b      	movs	r3, #11
 800161c:	18fb      	adds	r3, r7, r3
 800161e:	7819      	ldrb	r1, [r3, #0]
 8001620:	230d      	movs	r3, #13
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	1acb      	subs	r3, r1, r3
 8001628:	3301      	adds	r3, #1
 800162a:	210a      	movs	r1, #10
 800162c:	1879      	adds	r1, r7, r1
 800162e:	7809      	ldrb	r1, [r1, #0]
 8001630:	0849      	lsrs	r1, r1, #1
 8001632:	b2c9      	uxtb	r1, r1
 8001634:	0008      	movs	r0, r1
 8001636:	210c      	movs	r1, #12
 8001638:	1879      	adds	r1, r7, r1
 800163a:	7809      	ldrb	r1, [r1, #0]
 800163c:	0849      	lsrs	r1, r1, #1
 800163e:	b2c9      	uxtb	r1, r1
 8001640:	1a41      	subs	r1, r0, r1
 8001642:	3101      	adds	r1, #1
 8001644:	434b      	muls	r3, r1
 8001646:	429a      	cmp	r2, r3
 8001648:	dbd1      	blt.n	80015ee <weoDrawRectangleFilled+0x136>
			}
			while(!(USART3->ISR & USART_ISR_TXE)){};
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <weoDrawRectangleFilled+0x1c8>)
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	2280      	movs	r2, #128	; 0x80
 8001652:	4013      	ands	r3, r2
 8001654:	d0fa      	beq.n	800164c <weoDrawRectangleFilled+0x194>
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001656:	23a0      	movs	r3, #160	; 0xa0
 8001658:	05db      	lsls	r3, r3, #23
 800165a:	695a      	ldr	r2, [r3, #20]
 800165c:	23a0      	movs	r3, #160	; 0xa0
 800165e:	05db      	lsls	r3, r3, #23
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	438a      	bics	r2, r1
 8001664:	615a      	str	r2, [r3, #20]
//			USART_AS_SPI_sendCMD(0xBB);	// command for NOP
//			USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//			USART_AS_SPI_sendCMD(0xFF);
//			HAL_Delay(1);
//			GPIOA->ODR &= ~(1 << 7);	//reset dc
			GPIOA->ODR |= 1 << 6;	//set cs
 8001666:	23a0      	movs	r3, #160	; 0xa0
 8001668:	05db      	lsls	r3, r3, #23
 800166a:	695a      	ldr	r2, [r3, #20]
 800166c:	23a0      	movs	r3, #160	; 0xa0
 800166e:	05db      	lsls	r3, r3, #23
 8001670:	2140      	movs	r1, #64	; 0x40
 8001672:	430a      	orrs	r2, r1
 8001674:	615a      	str	r2, [r3, #20]
 8001676:	e000      	b.n	800167a <weoDrawRectangleFilled+0x1c2>
				return;
 8001678:	46c0      	nop			; (mov r8, r8)
		}
 800167a:	46bd      	mov	sp, r7
 800167c:	b005      	add	sp, #20
 800167e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001680:	40004800 	.word	0x40004800

08001684 <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af02      	add	r7, sp, #8
 800168a:	0002      	movs	r2, r0
 800168c:	1dfb      	adds	r3, r7, #7
 800168e:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 8001690:	210c      	movs	r1, #12
 8001692:	187b      	adds	r3, r7, r1
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
 8001698:	187b      	adds	r3, r7, r1
 800169a:	1dfa      	adds	r2, r7, #7
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 80016a0:	187a      	adds	r2, r7, r1
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <I2C_SOUND_ChangePage+0x38>)
 80016a4:	23fa      	movs	r3, #250	; 0xfa
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2302      	movs	r3, #2
 80016ac:	2130      	movs	r1, #48	; 0x30
 80016ae:	f004 ff0f 	bl	80064d0 <HAL_I2C_Master_Transmit>
	}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b004      	add	sp, #16
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	2000008c 	.word	0x2000008c

080016c0 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	0002      	movs	r2, r0
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	1dbb      	adds	r3, r7, #6
 80016ce:	1c0a      	adds	r2, r1, #0
 80016d0:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 80016d2:	210c      	movs	r1, #12
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	1dfa      	adds	r2, r7, #7
 80016d8:	7812      	ldrb	r2, [r2, #0]
 80016da:	701a      	strb	r2, [r3, #0]
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	1dba      	adds	r2, r7, #6
 80016e0:	7812      	ldrb	r2, [r2, #0]
 80016e2:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 80016e4:	187a      	adds	r2, r7, r1
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <WriteReg_I2C_SOUND+0x40>)
 80016e8:	23fa      	movs	r3, #250	; 0xfa
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2302      	movs	r3, #2
 80016f0:	2130      	movs	r1, #48	; 0x30
 80016f2:	f004 feed 	bl	80064d0 <HAL_I2C_Master_Transmit>
	}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b004      	add	sp, #16
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	2000008c 	.word	0x2000008c

08001704 <soundSetup>:
	void soundSetup(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff ffbb 	bl	8001684 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 800170e:	2101      	movs	r1, #1
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff ffd5 	bl	80016c0 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff ffb4 	bl	8001684 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 800171c:	2100      	movs	r1, #0
 800171e:	2002      	movs	r0, #2
 8001720:	f7ff ffce 	bl	80016c0 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 8001724:	200f      	movs	r0, #15
 8001726:	f003 fe99 	bl	800545c <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff ffaa 	bl	8001684 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 8001730:	2103      	movs	r1, #3
 8001732:	2004      	movs	r0, #4
 8001734:	f7ff ffc4 	bl	80016c0 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 8001738:	2191      	movs	r1, #145	; 0x91
 800173a:	2005      	movs	r0, #5
 800173c:	f7ff ffc0 	bl	80016c0 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 8001740:	2104      	movs	r1, #4
 8001742:	2006      	movs	r0, #6
 8001744:	f7ff ffbc 	bl	80016c0 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 8001748:	2100      	movs	r1, #0
 800174a:	2007      	movs	r0, #7
 800174c:	f7ff ffb8 	bl	80016c0 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 8001750:	2100      	movs	r1, #0
 8001752:	2008      	movs	r0, #8
 8001754:	f7ff ffb4 	bl	80016c0 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 8001758:	200f      	movs	r0, #15
 800175a:	f003 fe7f 	bl	800545c <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 800175e:	2184      	movs	r1, #132	; 0x84
 8001760:	200b      	movs	r0, #11
 8001762:	f7ff ffad 	bl	80016c0 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 8001766:	2182      	movs	r1, #130	; 0x82
 8001768:	200c      	movs	r0, #12
 800176a:	f7ff ffa9 	bl	80016c0 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 800176e:	2100      	movs	r1, #0
 8001770:	200d      	movs	r0, #13
 8001772:	f7ff ffa5 	bl	80016c0 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	200e      	movs	r0, #14
 800177a:	f7ff ffa1 	bl	80016c0 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 800177e:	2100      	movs	r1, #0
 8001780:	201b      	movs	r0, #27
 8001782:	f7ff ff9d 	bl	80016c0 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 8001786:	2100      	movs	r1, #0
 8001788:	201c      	movs	r0, #28
 800178a:	f7ff ff99 	bl	80016c0 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 800178e:	2102      	movs	r1, #2
 8001790:	203c      	movs	r0, #60	; 0x3c
 8001792:	f7ff ff95 	bl	80016c0 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 8001796:	2001      	movs	r0, #1
 8001798:	f7ff ff74 	bl	8001684 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 800179c:	2110      	movs	r1, #16
 800179e:	2001      	movs	r0, #1
 80017a0:	f7ff ff8e 	bl	80016c0 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 80017a4:	2100      	movs	r1, #0
 80017a6:	200a      	movs	r0, #10
 80017a8:	f7ff ff8a 	bl	80016c0 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 80017ac:	2100      	movs	r1, #0
 80017ae:	200c      	movs	r0, #12
 80017b0:	f7ff ff86 	bl	80016c0 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 80017b4:	2100      	movs	r1, #0
 80017b6:	2016      	movs	r0, #22
 80017b8:	f7ff ff82 	bl	80016c0 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 80017bc:	2100      	movs	r1, #0
 80017be:	2018      	movs	r0, #24
 80017c0:	f7ff ff7e 	bl	80016c0 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 80017c4:	2100      	movs	r1, #0
 80017c6:	2019      	movs	r0, #25
 80017c8:	f7ff ff7a 	bl	80016c0 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 80017cc:	2100      	movs	r1, #0
 80017ce:	2009      	movs	r0, #9
 80017d0:	f7ff ff76 	bl	80016c0 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80017d4:	2100      	movs	r1, #0
 80017d6:	2010      	movs	r0, #16
 80017d8:	f7ff ff72 	bl	80016c0 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 80017dc:	2100      	movs	r1, #0
 80017de:	202e      	movs	r0, #46	; 0x2e
 80017e0:	f7ff ff6e 	bl	80016c0 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 80017e4:	2110      	movs	r1, #16
 80017e6:	2030      	movs	r0, #48	; 0x30
 80017e8:	f7ff ff6a 	bl	80016c0 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 80017ec:	2102      	movs	r1, #2
 80017ee:	202d      	movs	r0, #45	; 0x2d
 80017f0:	f7ff ff66 	bl	80016c0 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff ff45 	bl	8001684 <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 80017fa:	2190      	movs	r1, #144	; 0x90
 80017fc:	203f      	movs	r0, #63	; 0x3f
 80017fe:	f7ff ff5f 	bl	80016c0 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 8001802:	2100      	movs	r1, #0
 8001804:	2041      	movs	r0, #65	; 0x41
 8001806:	f7ff ff5b 	bl	80016c0 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 800180a:	2104      	movs	r1, #4
 800180c:	2040      	movs	r0, #64	; 0x40
 800180e:	f7ff ff57 	bl	80016c0 <WriteReg_I2C_SOUND>
	}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 8001820:	230f      	movs	r3, #15
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	22ff      	movs	r2, #255	; 0xff
 8001826:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 8001828:	230d      	movs	r3, #13
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		isReceiverDisabled=1;
 8001830:	4bd9      	ldr	r3, [pc, #868]	; (8001b98 <answer2CPU+0x380>)
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]

		cmd2Execute=0;
 8001836:	4bd9      	ldr	r3, [pc, #868]	; (8001b9c <answer2CPU+0x384>)
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
		cmd[0]&=~0x100;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b11      	cmp	r3, #17
 800184a:	d00f      	beq.n	800186c <answer2CPU+0x54>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b12      	cmp	r3, #18
 8001852:	d00b      	beq.n	800186c <answer2CPU+0x54>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b13      	cmp	r3, #19
 800185a:	d007      	beq.n	800186c <answer2CPU+0x54>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b14      	cmp	r3, #20
 8001862:	d003      	beq.n	800186c <answer2CPU+0x54>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b15      	cmp	r3, #21
 800186a:	d105      	bne.n	8001878 <answer2CPU+0x60>
 800186c:	4bcc      	ldr	r3, [pc, #816]	; (8001ba0 <answer2CPU+0x388>)
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	4bcb      	ldr	r3, [pc, #812]	; (8001ba0 <answer2CPU+0x388>)
 8001872:	2140      	movs	r1, #64	; 0x40
 8001874:	438a      	bics	r2, r1
 8001876:	615a      	str	r2, [r3, #20]
		if (cmd[0] == 0x11) {
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b11      	cmp	r3, #17
 800187e:	d105      	bne.n	800188c <answer2CPU+0x74>
//			GPIOC->ODR &= ~(1 << 6);
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8001880:	4bc7      	ldr	r3, [pc, #796]	; (8001ba0 <answer2CPU+0x388>)
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	4bc6      	ldr	r3, [pc, #792]	; (8001ba0 <answer2CPU+0x388>)
 8001886:	2140      	movs	r1, #64	; 0x40
 8001888:	438a      	bics	r2, r1
 800188a:	615a      	str	r2, [r3, #20]
		}//reset BF
		ans[0] = cmd[0]|0x80;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	4252      	negs	r2, r2
 8001894:	4313      	orrs	r3, r2
 8001896:	b2db      	uxtb	r3, r3
 8001898:	b29a      	uxth	r2, r3
 800189a:	4bc2      	ldr	r3, [pc, #776]	; (8001ba4 <answer2CPU+0x38c>)
 800189c:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b0f      	cmp	r3, #15
 80018a4:	d800      	bhi.n	80018a8 <answer2CPU+0x90>
 80018a6:	e162      	b.n	8001b6e <answer2CPU+0x356>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b15      	cmp	r3, #21
 80018ae:	d900      	bls.n	80018b2 <answer2CPU+0x9a>
 80018b0:	e15d      	b.n	8001b6e <answer2CPU+0x356>
//		if (cmd[0] != 0x10) {
//			GPIOC->ODR &= ~(1 << 6);
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 80018b2:	23a0      	movs	r3, #160	; 0xa0
 80018b4:	05db      	lsls	r3, r3, #23
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	2210      	movs	r2, #16
 80018ba:	4013      	ands	r3, r2
 80018bc:	d106      	bne.n	80018cc <answer2CPU+0xb4>
					keyboard &= 0b11111110;
 80018be:	220f      	movs	r2, #15
 80018c0:	18bb      	adds	r3, r7, r2
 80018c2:	18ba      	adds	r2, r7, r2
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	2101      	movs	r1, #1
 80018c8:	438a      	bics	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 80018cc:	23a0      	movs	r3, #160	; 0xa0
 80018ce:	05db      	lsls	r3, r3, #23
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	2202      	movs	r2, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	d106      	bne.n	80018e6 <answer2CPU+0xce>
					keyboard &= 0b11111101;
 80018d8:	220f      	movs	r2, #15
 80018da:	18bb      	adds	r3, r7, r2
 80018dc:	18ba      	adds	r2, r7, r2
 80018de:	7812      	ldrb	r2, [r2, #0]
 80018e0:	2102      	movs	r1, #2
 80018e2:	438a      	bics	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 80018e6:	23a0      	movs	r3, #160	; 0xa0
 80018e8:	05db      	lsls	r3, r3, #23
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	2201      	movs	r2, #1
 80018ee:	4013      	ands	r3, r2
 80018f0:	d106      	bne.n	8001900 <answer2CPU+0xe8>
					keyboard &= 0b11111011;
 80018f2:	220f      	movs	r2, #15
 80018f4:	18bb      	adds	r3, r7, r2
 80018f6:	18ba      	adds	r2, r7, r2
 80018f8:	7812      	ldrb	r2, [r2, #0]
 80018fa:	2104      	movs	r1, #4
 80018fc:	438a      	bics	r2, r1
 80018fe:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001900:	23a0      	movs	r3, #160	; 0xa0
 8001902:	05db      	lsls	r3, r3, #23
 8001904:	691a      	ldr	r2, [r3, #16]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	019b      	lsls	r3, r3, #6
 800190a:	4013      	ands	r3, r2
 800190c:	d106      	bne.n	800191c <answer2CPU+0x104>
					keyboard &= 0b11110111;
 800190e:	220f      	movs	r2, #15
 8001910:	18bb      	adds	r3, r7, r2
 8001912:	18ba      	adds	r2, r7, r2
 8001914:	7812      	ldrb	r2, [r2, #0]
 8001916:	2108      	movs	r1, #8
 8001918:	438a      	bics	r2, r1
 800191a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 800191c:	23a0      	movs	r3, #160	; 0xa0
 800191e:	05db      	lsls	r3, r3, #23
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	01db      	lsls	r3, r3, #7
 8001926:	4013      	ands	r3, r2
 8001928:	d106      	bne.n	8001938 <answer2CPU+0x120>
					keyboard &= 0b11101111;
 800192a:	220f      	movs	r2, #15
 800192c:	18bb      	adds	r3, r7, r2
 800192e:	18ba      	adds	r2, r7, r2
 8001930:	7812      	ldrb	r2, [r2, #0]
 8001932:	2110      	movs	r1, #16
 8001934:	438a      	bics	r2, r1
 8001936:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8001938:	210f      	movs	r1, #15
 800193a:	187b      	adds	r3, r7, r1
 800193c:	187a      	adds	r2, r7, r1
 800193e:	7812      	ldrb	r2, [r2, #0]
 8001940:	43d2      	mvns	r2, r2
 8001942:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 8001944:	200c      	movs	r0, #12
 8001946:	183b      	adds	r3, r7, r0
 8001948:	2204      	movs	r2, #4
 800194a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 800194c:	183b      	adds	r3, r7, r0
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	b29b      	uxth	r3, r3
 8001952:	3b02      	subs	r3, #2
 8001954:	b29a      	uxth	r2, r3
 8001956:	4b93      	ldr	r3, [pc, #588]	; (8001ba4 <answer2CPU+0x38c>)
 8001958:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 800195a:	187b      	adds	r3, r7, r1
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b90      	ldr	r3, [pc, #576]	; (8001ba4 <answer2CPU+0x38c>)
 8001962:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 8001964:	230e      	movs	r3, #14
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
 800196c:	e011      	b.n	8001992 <answer2CPU+0x17a>
					myCS = myCS + ans[i];
 800196e:	200e      	movs	r0, #14
 8001970:	183b      	adds	r3, r7, r0
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	4b8b      	ldr	r3, [pc, #556]	; (8001ba4 <answer2CPU+0x38c>)
 8001976:	0052      	lsls	r2, r2, #1
 8001978:	5ad3      	ldrh	r3, [r2, r3]
 800197a:	b2d9      	uxtb	r1, r3
 800197c:	220d      	movs	r2, #13
 800197e:	18bb      	adds	r3, r7, r2
 8001980:	18ba      	adds	r2, r7, r2
 8001982:	7812      	ldrb	r2, [r2, #0]
 8001984:	188a      	adds	r2, r1, r2
 8001986:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001988:	183b      	adds	r3, r7, r0
 800198a:	781a      	ldrb	r2, [r3, #0]
 800198c:	183b      	adds	r3, r7, r0
 800198e:	3201      	adds	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
 8001992:	200e      	movs	r0, #14
 8001994:	183b      	adds	r3, r7, r0
 8001996:	781a      	ldrb	r2, [r3, #0]
 8001998:	230c      	movs	r3, #12
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	3b01      	subs	r3, #1
 80019a0:	429a      	cmp	r2, r3
 80019a2:	dbe4      	blt.n	800196e <answer2CPU+0x156>
				}
				myCS = 0 - myCS;
 80019a4:	210d      	movs	r1, #13
 80019a6:	187b      	adds	r3, r7, r1
 80019a8:	187a      	adds	r2, r7, r1
 80019aa:	7812      	ldrb	r2, [r2, #0]
 80019ac:	4252      	negs	r2, r2
 80019ae:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 80019b0:	187b      	adds	r3, r7, r1
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	4b7b      	ldr	r3, [pc, #492]	; (8001ba4 <answer2CPU+0x38c>)
 80019b8:	80da      	strh	r2, [r3, #6]
				i=0;
 80019ba:	183b      	adds	r3, r7, r0
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================

				while(!(USART2->ISR & USART_ISR_TXE)){};
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	4b79      	ldr	r3, [pc, #484]	; (8001ba8 <answer2CPU+0x390>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	2280      	movs	r2, #128	; 0x80
 80019c8:	4013      	ands	r3, r2
 80019ca:	d0fa      	beq.n	80019c2 <answer2CPU+0x1aa>
				USART2->TDR = ans[0]|0x0100;
 80019cc:	4b75      	ldr	r3, [pc, #468]	; (8001ba4 <answer2CPU+0x38c>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	2280      	movs	r2, #128	; 0x80
 80019d2:	0052      	lsls	r2, r2, #1
 80019d4:	4313      	orrs	r3, r2
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	4b73      	ldr	r3, [pc, #460]	; (8001ba8 <answer2CPU+0x390>)
 80019da:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80019dc:	230e      	movs	r3, #14
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	e013      	b.n	8001a0e <answer2CPU+0x1f6>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	4b6f      	ldr	r3, [pc, #444]	; (8001ba8 <answer2CPU+0x390>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	4013      	ands	r3, r2
 80019f0:	d0fa      	beq.n	80019e8 <answer2CPU+0x1d0>
				    USART2->TDR = (uint8_t)ans[i];
 80019f2:	210e      	movs	r1, #14
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	4b6a      	ldr	r3, [pc, #424]	; (8001ba4 <answer2CPU+0x38c>)
 80019fa:	0052      	lsls	r2, r2, #1
 80019fc:	5ad3      	ldrh	r3, [r2, r3]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	4b69      	ldr	r3, [pc, #420]	; (8001ba8 <answer2CPU+0x390>)
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	781a      	ldrb	r2, [r3, #0]
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	3201      	adds	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	230e      	movs	r3, #14
 8001a10:	18fa      	adds	r2, r7, r3
 8001a12:	230c      	movs	r3, #12
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	7812      	ldrb	r2, [r2, #0]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d3e3      	bcc.n	80019e6 <answer2CPU+0x1ce>
				  }
//				HAL_Delay(1);
				USART2->CR1 |= USART_CR1_RE;
 8001a1e:	4b62      	ldr	r3, [pc, #392]	; (8001ba8 <answer2CPU+0x390>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	4b61      	ldr	r3, [pc, #388]	; (8001ba8 <answer2CPU+0x390>)
 8001a24:	2104      	movs	r1, #4
 8001a26:	430a      	orrs	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]
				isReceiverDisabled=0;
 8001a2a:	4b5b      	ldr	r3, [pc, #364]	; (8001b98 <answer2CPU+0x380>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
//				BFEN=1;
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b11      	cmp	r3, #17
 8001a36:	d109      	bne.n	8001a4c <answer2CPU+0x234>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	789a      	ldrb	r2, [r3, #2]
 8001a3c:	4b5b      	ldr	r3, [pc, #364]	; (8001bac <answer2CPU+0x394>)
 8001a3e:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001a40:	4b56      	ldr	r3, [pc, #344]	; (8001b9c <answer2CPU+0x384>)
 8001a42:	2211      	movs	r2, #17
 8001a44:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001a46:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <answer2CPU+0x398>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b12      	cmp	r3, #18
 8001a52:	d115      	bne.n	8001a80 <answer2CPU+0x268>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3302      	adds	r3, #2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <answer2CPU+0x39c>)
 8001a5e:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3303      	adds	r3, #3
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	001a      	movs	r2, r3
 8001a68:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <answer2CPU+0x3a0>)
 8001a6a:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	791a      	ldrb	r2, [r3, #4]
 8001a70:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <answer2CPU+0x394>)
 8001a72:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8001a74:	4b49      	ldr	r3, [pc, #292]	; (8001b9c <answer2CPU+0x384>)
 8001a76:	2212      	movs	r2, #18
 8001a78:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001a7a:	4b4d      	ldr	r3, [pc, #308]	; (8001bb0 <answer2CPU+0x398>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b13      	cmp	r3, #19
 8001a86:	d140      	bne.n	8001b0a <answer2CPU+0x2f2>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	001a      	movs	r2, r3
 8001a90:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <answer2CPU+0x39c>)
 8001a92:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3303      	adds	r3, #3
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	001a      	movs	r2, r3
 8001a9c:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <answer2CPU+0x3a0>)
 8001a9e:	601a      	str	r2, [r3, #0]
					fontInfo= cmd[4];
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	791a      	ldrb	r2, [r3, #4]
 8001aa4:	4b45      	ldr	r3, [pc, #276]	; (8001bbc <answer2CPU+0x3a4>)
 8001aa6:	701a      	strb	r2, [r3, #0]
					color=fontInfo|0xF0;
 8001aa8:	4b44      	ldr	r3, [pc, #272]	; (8001bbc <answer2CPU+0x3a4>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2210      	movs	r2, #16
 8001aae:	4252      	negs	r2, r2
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	4b42      	ldr	r3, [pc, #264]	; (8001bc0 <answer2CPU+0x3a8>)
 8001ab6:	701a      	strb	r2, [r3, #0]
					strLen = cmd[1] - 0x04;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3301      	adds	r3, #1
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	3b04      	subs	r3, #4
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b40      	ldr	r3, [pc, #256]	; (8001bc4 <answer2CPU+0x3ac>)
 8001ac4:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001ac6:	230e      	movs	r3, #14
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	e00f      	b.n	8001af0 <answer2CPU+0x2d8>
					dataASCII[i] = cmd[i+5];
 8001ad0:	200e      	movs	r0, #14
 8001ad2:	183b      	adds	r3, r7, r0
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	3305      	adds	r3, #5
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	18d2      	adds	r2, r2, r3
 8001adc:	183b      	adds	r3, r7, r0
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	7811      	ldrb	r1, [r2, #0]
 8001ae2:	4a39      	ldr	r2, [pc, #228]	; (8001bc8 <answer2CPU+0x3b0>)
 8001ae4:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001ae6:	183b      	adds	r3, r7, r0
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	183b      	adds	r3, r7, r0
 8001aec:	3201      	adds	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <answer2CPU+0x3ac>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	220e      	movs	r2, #14
 8001af6:	18ba      	adds	r2, r7, r2
 8001af8:	7812      	ldrb	r2, [r2, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d3e8      	bcc.n	8001ad0 <answer2CPU+0x2b8>
				}
					cmd2Execute=0x13;
 8001afe:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <answer2CPU+0x384>)
 8001b00:	2213      	movs	r2, #19
 8001b02:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b04:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <answer2CPU+0x398>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b14      	cmp	r3, #20
 8001b10:	d109      	bne.n	8001b26 <answer2CPU+0x30e>
					numSound = cmd[2];
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	789a      	ldrb	r2, [r3, #2]
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <answer2CPU+0x3b4>)
 8001b18:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <answer2CPU+0x384>)
 8001b1c:	2214      	movs	r2, #20
 8001b1e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b20:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <answer2CPU+0x398>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b15      	cmp	r3, #21
 8001b2c:	d10d      	bne.n	8001b4a <answer2CPU+0x332>
					volume = cmd[2];
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	789a      	ldrb	r2, [r3, #2]
 8001b32:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <answer2CPU+0x3b8>)
 8001b34:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	78da      	ldrb	r2, [r3, #3]
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <answer2CPU+0x3bc>)
 8001b3c:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <answer2CPU+0x384>)
 8001b40:	2215      	movs	r2, #21
 8001b42:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <answer2CPU+0x398>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b16      	cmp	r3, #22
 8001b50:	d10d      	bne.n	8001b6e <answer2CPU+0x356>
					volume = cmd[3];
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	78da      	ldrb	r2, [r3, #3]
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <answer2CPU+0x3b8>)
 8001b58:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	791a      	ldrb	r2, [r3, #4]
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <answer2CPU+0x3bc>)
 8001b60:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <answer2CPU+0x384>)
 8001b64:	2216      	movs	r2, #22
 8001b66:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <answer2CPU+0x398>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d000      	beq.n	8001b78 <answer2CPU+0x360>
 8001b76:	e09f      	b.n	8001cb8 <answer2CPU+0x4a0>
				myLength = 0x14; //20 bytes length answer
 8001b78:	210c      	movs	r1, #12
 8001b7a:	187b      	adds	r3, r7, r1
 8001b7c:	2214      	movs	r2, #20
 8001b7e:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b80:	187b      	adds	r3, r7, r1
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	3b02      	subs	r3, #2
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <answer2CPU+0x38c>)
 8001b8c:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001b8e:	230e      	movs	r3, #14
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	e030      	b.n	8001bfa <answer2CPU+0x3e2>
 8001b98:	20000288 	.word	0x20000288
 8001b9c:	200002ea 	.word	0x200002ea
 8001ba0:	50000800 	.word	0x50000800
 8001ba4:	200002d0 	.word	0x200002d0
 8001ba8:	40004400 	.word	0x40004400
 8001bac:	20000289 	.word	0x20000289
 8001bb0:	200002eb 	.word	0x200002eb
 8001bb4:	20000290 	.word	0x20000290
 8001bb8:	20000294 	.word	0x20000294
 8001bbc:	200002f1 	.word	0x200002f1
 8001bc0:	200002f2 	.word	0x200002f2
 8001bc4:	2000028e 	.word	0x2000028e
 8001bc8:	2000029c 	.word	0x2000029c
 8001bcc:	2000028a 	.word	0x2000028a
 8001bd0:	2000028b 	.word	0x2000028b
 8001bd4:	2000028c 	.word	0x2000028c
					ans[i + 2] = PCB_type[i];
 8001bd8:	200e      	movs	r0, #14
 8001bda:	183b      	adds	r3, r7, r0
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4acb      	ldr	r2, [pc, #812]	; (8001f0c <answer2CPU+0x6f4>)
 8001be0:	5cd1      	ldrb	r1, [r2, r3]
 8001be2:	183b      	adds	r3, r7, r0
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	1c9a      	adds	r2, r3, #2
 8001be8:	b289      	uxth	r1, r1
 8001bea:	4bc9      	ldr	r3, [pc, #804]	; (8001f10 <answer2CPU+0x6f8>)
 8001bec:	0052      	lsls	r2, r2, #1
 8001bee:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001bf0:	183b      	adds	r3, r7, r0
 8001bf2:	781a      	ldrb	r2, [r3, #0]
 8001bf4:	183b      	adds	r3, r7, r0
 8001bf6:	3201      	adds	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]
 8001bfa:	220e      	movs	r2, #14
 8001bfc:	18bb      	adds	r3, r7, r2
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b10      	cmp	r3, #16
 8001c02:	d9e9      	bls.n	8001bd8 <answer2CPU+0x3c0>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001c04:	18bb      	adds	r3, r7, r2
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
 8001c0a:	e011      	b.n	8001c30 <answer2CPU+0x418>
					myCS = myCS + ans[i];
 8001c0c:	200e      	movs	r0, #14
 8001c0e:	183b      	adds	r3, r7, r0
 8001c10:	781a      	ldrb	r2, [r3, #0]
 8001c12:	4bbf      	ldr	r3, [pc, #764]	; (8001f10 <answer2CPU+0x6f8>)
 8001c14:	0052      	lsls	r2, r2, #1
 8001c16:	5ad3      	ldrh	r3, [r2, r3]
 8001c18:	b2d9      	uxtb	r1, r3
 8001c1a:	220d      	movs	r2, #13
 8001c1c:	18bb      	adds	r3, r7, r2
 8001c1e:	18ba      	adds	r2, r7, r2
 8001c20:	7812      	ldrb	r2, [r2, #0]
 8001c22:	188a      	adds	r2, r1, r2
 8001c24:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001c26:	183b      	adds	r3, r7, r0
 8001c28:	781a      	ldrb	r2, [r3, #0]
 8001c2a:	183b      	adds	r3, r7, r0
 8001c2c:	3201      	adds	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
 8001c30:	230e      	movs	r3, #14
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	781a      	ldrb	r2, [r3, #0]
 8001c36:	200c      	movs	r0, #12
 8001c38:	183b      	adds	r3, r7, r0
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	dbe4      	blt.n	8001c0c <answer2CPU+0x3f4>
				}
				myCS = 0 - myCS;
 8001c42:	210d      	movs	r1, #13
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	187a      	adds	r2, r7, r1
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	4252      	negs	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c4e:	183b      	adds	r3, r7, r0
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	1e5a      	subs	r2, r3, #1
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b299      	uxth	r1, r3
 8001c5a:	4bad      	ldr	r3, [pc, #692]	; (8001f10 <answer2CPU+0x6f8>)
 8001c5c:	0052      	lsls	r2, r2, #1
 8001c5e:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	4bac      	ldr	r3, [pc, #688]	; (8001f14 <answer2CPU+0x6fc>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d0fa      	beq.n	8001c62 <answer2CPU+0x44a>
				USART2->TDR = ans[0]|0x0100;
 8001c6c:	4ba8      	ldr	r3, [pc, #672]	; (8001f10 <answer2CPU+0x6f8>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	2280      	movs	r2, #128	; 0x80
 8001c72:	0052      	lsls	r2, r2, #1
 8001c74:	4313      	orrs	r3, r2
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	4ba6      	ldr	r3, [pc, #664]	; (8001f14 <answer2CPU+0x6fc>)
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001c7c:	e014      	b.n	8001ca8 <answer2CPU+0x490>
				  {
				    i++;
 8001c7e:	210e      	movs	r1, #14
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	187b      	adds	r3, r7, r1
 8001c86:	3201      	adds	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	4ba1      	ldr	r3, [pc, #644]	; (8001f14 <answer2CPU+0x6fc>)
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	4013      	ands	r3, r2
 8001c94:	d0fa      	beq.n	8001c8c <answer2CPU+0x474>
				    USART2->TDR = (uint8_t)ans[i];
 8001c96:	230e      	movs	r3, #14
 8001c98:	18fb      	adds	r3, r7, r3
 8001c9a:	781a      	ldrb	r2, [r3, #0]
 8001c9c:	4b9c      	ldr	r3, [pc, #624]	; (8001f10 <answer2CPU+0x6f8>)
 8001c9e:	0052      	lsls	r2, r2, #1
 8001ca0:	5ad3      	ldrh	r3, [r2, r3]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	4b9b      	ldr	r3, [pc, #620]	; (8001f14 <answer2CPU+0x6fc>)
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001ca8:	230e      	movs	r3, #14
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	781a      	ldrb	r2, [r3, #0]
 8001cae:	4b98      	ldr	r3, [pc, #608]	; (8001f10 <answer2CPU+0x6f8>)
 8001cb0:	0052      	lsls	r2, r2, #1
 8001cb2:	5ad3      	ldrh	r3, [r2, r3]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1e2      	bne.n	8001c7e <answer2CPU+0x466>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d000      	beq.n	8001cc2 <answer2CPU+0x4aa>
 8001cc0:	e07f      	b.n	8001dc2 <answer2CPU+0x5aa>
				myLength = 0x0B; //19 bytes length answer
 8001cc2:	210c      	movs	r1, #12
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	220b      	movs	r2, #11
 8001cc8:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b02      	subs	r3, #2
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	4b8e      	ldr	r3, [pc, #568]	; (8001f10 <answer2CPU+0x6f8>)
 8001cd6:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001cd8:	230e      	movs	r3, #14
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	e010      	b.n	8001d04 <answer2CPU+0x4ec>
					ans[i + 2] = PCB_rev[i];
 8001ce2:	200e      	movs	r0, #14
 8001ce4:	183b      	adds	r3, r7, r0
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4a8b      	ldr	r2, [pc, #556]	; (8001f18 <answer2CPU+0x700>)
 8001cea:	5cd1      	ldrb	r1, [r2, r3]
 8001cec:	183b      	adds	r3, r7, r0
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	1c9a      	adds	r2, r3, #2
 8001cf2:	b289      	uxth	r1, r1
 8001cf4:	4b86      	ldr	r3, [pc, #536]	; (8001f10 <answer2CPU+0x6f8>)
 8001cf6:	0052      	lsls	r2, r2, #1
 8001cf8:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001cfa:	183b      	adds	r3, r7, r0
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	183b      	adds	r3, r7, r0
 8001d00:	3201      	adds	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	220e      	movs	r2, #14
 8001d06:	18bb      	adds	r3, r7, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b10      	cmp	r3, #16
 8001d0c:	d9e9      	bls.n	8001ce2 <answer2CPU+0x4ca>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001d0e:	18bb      	adds	r3, r7, r2
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
 8001d14:	e011      	b.n	8001d3a <answer2CPU+0x522>
					myCS = myCS + ans[i];
 8001d16:	200e      	movs	r0, #14
 8001d18:	183b      	adds	r3, r7, r0
 8001d1a:	781a      	ldrb	r2, [r3, #0]
 8001d1c:	4b7c      	ldr	r3, [pc, #496]	; (8001f10 <answer2CPU+0x6f8>)
 8001d1e:	0052      	lsls	r2, r2, #1
 8001d20:	5ad3      	ldrh	r3, [r2, r3]
 8001d22:	b2d9      	uxtb	r1, r3
 8001d24:	220d      	movs	r2, #13
 8001d26:	18bb      	adds	r3, r7, r2
 8001d28:	18ba      	adds	r2, r7, r2
 8001d2a:	7812      	ldrb	r2, [r2, #0]
 8001d2c:	188a      	adds	r2, r1, r2
 8001d2e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001d30:	183b      	adds	r3, r7, r0
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	183b      	adds	r3, r7, r0
 8001d36:	3201      	adds	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
 8001d3a:	230e      	movs	r3, #14
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	781a      	ldrb	r2, [r3, #0]
 8001d40:	200c      	movs	r0, #12
 8001d42:	183b      	adds	r3, r7, r0
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	dbe4      	blt.n	8001d16 <answer2CPU+0x4fe>
				}
				myCS = 0 - myCS;
 8001d4c:	210d      	movs	r1, #13
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	187a      	adds	r2, r7, r1
 8001d52:	7812      	ldrb	r2, [r2, #0]
 8001d54:	4252      	negs	r2, r2
 8001d56:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001d58:	183b      	adds	r3, r7, r0
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	1e5a      	subs	r2, r3, #1
 8001d5e:	187b      	adds	r3, r7, r1
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	b299      	uxth	r1, r3
 8001d64:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <answer2CPU+0x6f8>)
 8001d66:	0052      	lsls	r2, r2, #1
 8001d68:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	4b69      	ldr	r3, [pc, #420]	; (8001f14 <answer2CPU+0x6fc>)
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2280      	movs	r2, #128	; 0x80
 8001d72:	4013      	ands	r3, r2
 8001d74:	d0fa      	beq.n	8001d6c <answer2CPU+0x554>
				USART2->TDR = ans[0]|0x0100;
 8001d76:	4b66      	ldr	r3, [pc, #408]	; (8001f10 <answer2CPU+0x6f8>)
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	2280      	movs	r2, #128	; 0x80
 8001d7c:	0052      	lsls	r2, r2, #1
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	4b64      	ldr	r3, [pc, #400]	; (8001f14 <answer2CPU+0x6fc>)
 8001d84:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001d86:	e014      	b.n	8001db2 <answer2CPU+0x59a>
					  {
					    i++;
 8001d88:	210e      	movs	r1, #14
 8001d8a:	187b      	adds	r3, r7, r1
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	187b      	adds	r3, r7, r1
 8001d90:	3201      	adds	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d94:	46c0      	nop			; (mov r8, r8)
 8001d96:	4b5f      	ldr	r3, [pc, #380]	; (8001f14 <answer2CPU+0x6fc>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	2280      	movs	r2, #128	; 0x80
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d0fa      	beq.n	8001d96 <answer2CPU+0x57e>
					    USART2->TDR = (uint8_t)ans[i];
 8001da0:	230e      	movs	r3, #14
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	4b5a      	ldr	r3, [pc, #360]	; (8001f10 <answer2CPU+0x6f8>)
 8001da8:	0052      	lsls	r2, r2, #1
 8001daa:	5ad3      	ldrh	r3, [r2, r3]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <answer2CPU+0x6fc>)
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001db2:	230e      	movs	r3, #14
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	781a      	ldrb	r2, [r3, #0]
 8001db8:	4b55      	ldr	r3, [pc, #340]	; (8001f10 <answer2CPU+0x6f8>)
 8001dba:	0052      	lsls	r2, r2, #1
 8001dbc:	5ad3      	ldrh	r3, [r2, r3]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1e2      	bne.n	8001d88 <answer2CPU+0x570>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d000      	beq.n	8001dcc <answer2CPU+0x5b4>
 8001dca:	e07f      	b.n	8001ecc <answer2CPU+0x6b4>
				myLength = 0x13; //19 bytes length answer
 8001dcc:	210c      	movs	r1, #12
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	2213      	movs	r2, #19
 8001dd2:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001dd4:	187b      	adds	r3, r7, r1
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3b02      	subs	r3, #2
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	4b4c      	ldr	r3, [pc, #304]	; (8001f10 <answer2CPU+0x6f8>)
 8001de0:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001de2:	230e      	movs	r3, #14
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e010      	b.n	8001e0e <answer2CPU+0x5f6>
					ans[i + 2] = EmitterSN[i];
 8001dec:	200e      	movs	r0, #14
 8001dee:	183b      	adds	r3, r7, r0
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	4a4a      	ldr	r2, [pc, #296]	; (8001f1c <answer2CPU+0x704>)
 8001df4:	5cd1      	ldrb	r1, [r2, r3]
 8001df6:	183b      	adds	r3, r7, r0
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	1c9a      	adds	r2, r3, #2
 8001dfc:	b289      	uxth	r1, r1
 8001dfe:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <answer2CPU+0x6f8>)
 8001e00:	0052      	lsls	r2, r2, #1
 8001e02:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001e04:	183b      	adds	r3, r7, r0
 8001e06:	781a      	ldrb	r2, [r3, #0]
 8001e08:	183b      	adds	r3, r7, r0
 8001e0a:	3201      	adds	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	220e      	movs	r2, #14
 8001e10:	18bb      	adds	r3, r7, r2
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b10      	cmp	r3, #16
 8001e16:	d9e9      	bls.n	8001dec <answer2CPU+0x5d4>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001e18:	18bb      	adds	r3, r7, r2
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	e011      	b.n	8001e44 <answer2CPU+0x62c>
					myCS = myCS + ans[i];
 8001e20:	200e      	movs	r0, #14
 8001e22:	183b      	adds	r3, r7, r0
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <answer2CPU+0x6f8>)
 8001e28:	0052      	lsls	r2, r2, #1
 8001e2a:	5ad3      	ldrh	r3, [r2, r3]
 8001e2c:	b2d9      	uxtb	r1, r3
 8001e2e:	220d      	movs	r2, #13
 8001e30:	18bb      	adds	r3, r7, r2
 8001e32:	18ba      	adds	r2, r7, r2
 8001e34:	7812      	ldrb	r2, [r2, #0]
 8001e36:	188a      	adds	r2, r1, r2
 8001e38:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001e3a:	183b      	adds	r3, r7, r0
 8001e3c:	781a      	ldrb	r2, [r3, #0]
 8001e3e:	183b      	adds	r3, r7, r0
 8001e40:	3201      	adds	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	230e      	movs	r3, #14
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	200c      	movs	r0, #12
 8001e4c:	183b      	adds	r3, r7, r0
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	429a      	cmp	r2, r3
 8001e54:	dbe4      	blt.n	8001e20 <answer2CPU+0x608>
				}
				myCS = 0 - myCS;
 8001e56:	210d      	movs	r1, #13
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	187a      	adds	r2, r7, r1
 8001e5c:	7812      	ldrb	r2, [r2, #0]
 8001e5e:	4252      	negs	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001e62:	183b      	adds	r3, r7, r0
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	1e5a      	subs	r2, r3, #1
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b299      	uxth	r1, r3
 8001e6e:	4b28      	ldr	r3, [pc, #160]	; (8001f10 <answer2CPU+0x6f8>)
 8001e70:	0052      	lsls	r2, r2, #1
 8001e72:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <answer2CPU+0x6fc>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	2280      	movs	r2, #128	; 0x80
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d0fa      	beq.n	8001e76 <answer2CPU+0x65e>
				USART2->TDR = ans[0]|0x0100;
 8001e80:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <answer2CPU+0x6f8>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	0052      	lsls	r2, r2, #1
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <answer2CPU+0x6fc>)
 8001e8e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001e90:	e014      	b.n	8001ebc <answer2CPU+0x6a4>
				  {
				    i++;
 8001e92:	210e      	movs	r1, #14
 8001e94:	187b      	adds	r3, r7, r1
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	3201      	adds	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <answer2CPU+0x6fc>)
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d0fa      	beq.n	8001ea0 <answer2CPU+0x688>
				    	USART2->TDR = (uint8_t)ans[i];
 8001eaa:	230e      	movs	r3, #14
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	781a      	ldrb	r2, [r3, #0]
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <answer2CPU+0x6f8>)
 8001eb2:	0052      	lsls	r2, r2, #1
 8001eb4:	5ad3      	ldrh	r3, [r2, r3]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <answer2CPU+0x6fc>)
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001ebc:	230e      	movs	r3, #14
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	781a      	ldrb	r2, [r3, #0]
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <answer2CPU+0x6f8>)
 8001ec4:	0052      	lsls	r2, r2, #1
 8001ec6:	5ad3      	ldrh	r3, [r2, r3]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1e2      	bne.n	8001e92 <answer2CPU+0x67a>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d000      	beq.n	8001ed6 <answer2CPU+0x6be>
 8001ed4:	e07c      	b.n	8001fd0 <answer2CPU+0x7b8>
				myLength = 0x04; //4 bytes length answer
 8001ed6:	210c      	movs	r1, #12
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	2204      	movs	r2, #4
 8001edc:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	3b02      	subs	r3, #2
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <answer2CPU+0x6f8>)
 8001eea:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <answer2CPU+0x708>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <answer2CPU+0x6f8>)
 8001ef4:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001ef6:	230d      	movs	r3, #13
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <answer2CPU+0x6f8>)
 8001f00:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001f02:	230e      	movs	r3, #14
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
 8001f0a:	e01d      	b.n	8001f48 <answer2CPU+0x730>
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	200002d0 	.word	0x200002d0
 8001f14:	40004400 	.word	0x40004400
 8001f18:	20000014 	.word	0x20000014
 8001f1c:	20000020 	.word	0x20000020
 8001f20:	2000001c 	.word	0x2000001c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001f24:	200e      	movs	r0, #14
 8001f26:	183b      	adds	r3, r7, r0
 8001f28:	781a      	ldrb	r2, [r3, #0]
 8001f2a:	4b6d      	ldr	r3, [pc, #436]	; (80020e0 <answer2CPU+0x8c8>)
 8001f2c:	0052      	lsls	r2, r2, #1
 8001f2e:	5ad3      	ldrh	r3, [r2, r3]
 8001f30:	b2d9      	uxtb	r1, r3
 8001f32:	220d      	movs	r2, #13
 8001f34:	18bb      	adds	r3, r7, r2
 8001f36:	18ba      	adds	r2, r7, r2
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	188a      	adds	r2, r1, r2
 8001f3c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001f3e:	183b      	adds	r3, r7, r0
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	183b      	adds	r3, r7, r0
 8001f44:	3201      	adds	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	230e      	movs	r3, #14
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	781a      	ldrb	r2, [r3, #0]
 8001f4e:	200c      	movs	r0, #12
 8001f50:	183b      	adds	r3, r7, r0
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	429a      	cmp	r2, r3
 8001f58:	dbe4      	blt.n	8001f24 <answer2CPU+0x70c>
				}
				myCS = 0 - myCS;
 8001f5a:	210d      	movs	r1, #13
 8001f5c:	187b      	adds	r3, r7, r1
 8001f5e:	187a      	adds	r2, r7, r1
 8001f60:	7812      	ldrb	r2, [r2, #0]
 8001f62:	4252      	negs	r2, r2
 8001f64:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001f66:	183b      	adds	r3, r7, r0
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	1e5a      	subs	r2, r3, #1
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b299      	uxth	r1, r3
 8001f72:	4b5b      	ldr	r3, [pc, #364]	; (80020e0 <answer2CPU+0x8c8>)
 8001f74:	0052      	lsls	r2, r2, #1
 8001f76:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	4b5a      	ldr	r3, [pc, #360]	; (80020e4 <answer2CPU+0x8cc>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	2280      	movs	r2, #128	; 0x80
 8001f80:	4013      	ands	r3, r2
 8001f82:	d0fa      	beq.n	8001f7a <answer2CPU+0x762>
					USART2->TDR = ans[0]|0x0100;
 8001f84:	4b56      	ldr	r3, [pc, #344]	; (80020e0 <answer2CPU+0x8c8>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	0052      	lsls	r2, r2, #1
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	4b54      	ldr	r3, [pc, #336]	; (80020e4 <answer2CPU+0x8cc>)
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001f94:	e014      	b.n	8001fc0 <answer2CPU+0x7a8>
						{
						  i++;
 8001f96:	210e      	movs	r1, #14
 8001f98:	187b      	adds	r3, r7, r1
 8001f9a:	781a      	ldrb	r2, [r3, #0]
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	3201      	adds	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	4b4f      	ldr	r3, [pc, #316]	; (80020e4 <answer2CPU+0x8cc>)
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	4013      	ands	r3, r2
 8001fac:	d0fa      	beq.n	8001fa4 <answer2CPU+0x78c>
						     USART2->TDR = (uint8_t)ans[i];
 8001fae:	230e      	movs	r3, #14
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	781a      	ldrb	r2, [r3, #0]
 8001fb4:	4b4a      	ldr	r3, [pc, #296]	; (80020e0 <answer2CPU+0x8c8>)
 8001fb6:	0052      	lsls	r2, r2, #1
 8001fb8:	5ad3      	ldrh	r3, [r2, r3]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b49      	ldr	r3, [pc, #292]	; (80020e4 <answer2CPU+0x8cc>)
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001fc0:	230e      	movs	r3, #14
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	4b46      	ldr	r3, [pc, #280]	; (80020e0 <answer2CPU+0x8c8>)
 8001fc8:	0052      	lsls	r2, r2, #1
 8001fca:	5ad3      	ldrh	r3, [r2, r3]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1e2      	bne.n	8001f96 <answer2CPU+0x77e>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d000      	beq.n	8001fda <answer2CPU+0x7c2>
 8001fd8:	e076      	b.n	80020c8 <answer2CPU+0x8b0>
				myLength = 0x04; //4 bytes length answer
 8001fda:	210c      	movs	r1, #12
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	2204      	movs	r2, #4
 8001fe0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001fe2:	187b      	adds	r3, r7, r1
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b02      	subs	r3, #2
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	4b3c      	ldr	r3, [pc, #240]	; (80020e0 <answer2CPU+0x8c8>)
 8001fee:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	001a      	movs	r2, r3
 8001ff8:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <answer2CPU+0x8d0>)
 8001ffa:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001ffc:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <answer2CPU+0x8d4>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b29a      	uxth	r2, r3
 8002002:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <answer2CPU+0x8c8>)
 8002004:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8002006:	230d      	movs	r3, #13
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b29a      	uxth	r2, r3
 800200e:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <answer2CPU+0x8c8>)
 8002010:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8002012:	230e      	movs	r3, #14
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	e011      	b.n	8002040 <answer2CPU+0x828>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 800201c:	200e      	movs	r0, #14
 800201e:	183b      	adds	r3, r7, r0
 8002020:	781a      	ldrb	r2, [r3, #0]
 8002022:	4b2f      	ldr	r3, [pc, #188]	; (80020e0 <answer2CPU+0x8c8>)
 8002024:	0052      	lsls	r2, r2, #1
 8002026:	5ad3      	ldrh	r3, [r2, r3]
 8002028:	b2d9      	uxtb	r1, r3
 800202a:	220d      	movs	r2, #13
 800202c:	18bb      	adds	r3, r7, r2
 800202e:	18ba      	adds	r2, r7, r2
 8002030:	7812      	ldrb	r2, [r2, #0]
 8002032:	188a      	adds	r2, r1, r2
 8002034:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8002036:	183b      	adds	r3, r7, r0
 8002038:	781a      	ldrb	r2, [r3, #0]
 800203a:	183b      	adds	r3, r7, r0
 800203c:	3201      	adds	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	230e      	movs	r3, #14
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	200c      	movs	r0, #12
 8002048:	183b      	adds	r3, r7, r0
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	3b01      	subs	r3, #1
 800204e:	429a      	cmp	r2, r3
 8002050:	dbe4      	blt.n	800201c <answer2CPU+0x804>
				}
				myCS = 0 - myCS;
 8002052:	210d      	movs	r1, #13
 8002054:	187b      	adds	r3, r7, r1
 8002056:	187a      	adds	r2, r7, r1
 8002058:	7812      	ldrb	r2, [r2, #0]
 800205a:	4252      	negs	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 800205e:	183b      	adds	r3, r7, r0
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	1e5a      	subs	r2, r3, #1
 8002064:	187b      	adds	r3, r7, r1
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	b299      	uxth	r1, r3
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <answer2CPU+0x8c8>)
 800206c:	0052      	lsls	r2, r2, #1
 800206e:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8002070:	46c0      	nop			; (mov r8, r8)
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <answer2CPU+0x8cc>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	2280      	movs	r2, #128	; 0x80
 8002078:	4013      	ands	r3, r2
 800207a:	d0fa      	beq.n	8002072 <answer2CPU+0x85a>
				USART2->TDR = ans[0]|0x0100;
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <answer2CPU+0x8c8>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	0052      	lsls	r2, r2, #1
 8002084:	4313      	orrs	r3, r2
 8002086:	b29a      	uxth	r2, r3
 8002088:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <answer2CPU+0x8cc>)
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 800208c:	e014      	b.n	80020b8 <answer2CPU+0x8a0>
				{
				  i++;
 800208e:	210e      	movs	r1, #14
 8002090:	187b      	adds	r3, r7, r1
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	187b      	adds	r3, r7, r1
 8002096:	3201      	adds	r2, #1
 8002098:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <answer2CPU+0x8cc>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	2280      	movs	r2, #128	; 0x80
 80020a2:	4013      	ands	r3, r2
 80020a4:	d0fa      	beq.n	800209c <answer2CPU+0x884>
				  USART2->TDR = (uint8_t)ans[i];
 80020a6:	230e      	movs	r3, #14
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	781a      	ldrb	r2, [r3, #0]
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <answer2CPU+0x8c8>)
 80020ae:	0052      	lsls	r2, r2, #1
 80020b0:	5ad3      	ldrh	r3, [r2, r3]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <answer2CPU+0x8cc>)
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 80020b8:	230e      	movs	r3, #14
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <answer2CPU+0x8c8>)
 80020c0:	0052      	lsls	r2, r2, #1
 80020c2:	5ad3      	ldrh	r3, [r2, r3]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e2      	bne.n	800208e <answer2CPU+0x876>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <answer2CPU+0x8cc>)
 80020ca:	6a1a      	ldr	r2, [r3, #32]
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <answer2CPU+0x8cc>)
 80020ce:	2108      	movs	r1, #8
 80020d0:	430a      	orrs	r2, r1
 80020d2:	621a      	str	r2, [r3, #32]
}
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b004      	add	sp, #16
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	200002d0 	.word	0x200002d0
 80020e4:	40004400 	.word	0x40004400
 80020e8:	20000298 	.word	0x20000298
 80020ec:	2000028d 	.word	0x2000028d

080020f0 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 80020f6:	2001      	movs	r0, #1
 80020f8:	f003 f9b0 	bl	800545c <HAL_Delay>
		GPIOB->ODR &= ~(1 << 9); //reset cs
 80020fc:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <MEM_Reset+0xb0>)
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <MEM_Reset+0xb0>)
 8002102:	4928      	ldr	r1, [pc, #160]	; (80021a4 <MEM_Reset+0xb4>)
 8002104:	400a      	ands	r2, r1
 8002106:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8002108:	1dfb      	adds	r3, r7, #7
 800210a:	2266      	movs	r2, #102	; 0x66
 800210c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 800210e:	1df9      	adds	r1, r7, #7
 8002110:	4825      	ldr	r0, [pc, #148]	; (80021a8 <MEM_Reset+0xb8>)
 8002112:	2305      	movs	r3, #5
 8002114:	2201      	movs	r2, #1
 8002116:	f007 f90b 	bl	8009330 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 800211a:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <MEM_Reset+0xb0>)
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <MEM_Reset+0xb0>)
 8002120:	2180      	movs	r1, #128	; 0x80
 8002122:	0089      	lsls	r1, r1, #2
 8002124:	430a      	orrs	r2, r1
 8002126:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8002128:	46c0      	nop			; (mov r8, r8)
		__NOP();
 800212a:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 800212c:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 800212e:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8002130:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8002132:	46c0      	nop			; (mov r8, r8)
		GPIOB->ODR &= ~(1 << 9);			//reset cs
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <MEM_Reset+0xb0>)
 8002136:	695a      	ldr	r2, [r3, #20]
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <MEM_Reset+0xb0>)
 800213a:	491a      	ldr	r1, [pc, #104]	; (80021a4 <MEM_Reset+0xb4>)
 800213c:	400a      	ands	r2, r1
 800213e:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8002140:	1dfb      	adds	r3, r7, #7
 8002142:	2299      	movs	r2, #153	; 0x99
 8002144:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8002146:	1df9      	adds	r1, r7, #7
 8002148:	4817      	ldr	r0, [pc, #92]	; (80021a8 <MEM_Reset+0xb8>)
 800214a:	2305      	movs	r3, #5
 800214c:	2201      	movs	r2, #1
 800214e:	f007 f8ef 	bl	8009330 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8002152:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <MEM_Reset+0xb0>)
 8002154:	695a      	ldr	r2, [r3, #20]
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <MEM_Reset+0xb0>)
 8002158:	2180      	movs	r1, #128	; 0x80
 800215a:	0089      	lsls	r1, r1, #2
 800215c:	430a      	orrs	r2, r1
 800215e:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8002160:	2001      	movs	r0, #1
 8002162:	f003 f97b 	bl	800545c <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8002166:	1dfb      	adds	r3, r7, #7
 8002168:	22b7      	movs	r2, #183	; 0xb7
 800216a:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 << 9); //reset cs
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <MEM_Reset+0xb0>)
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <MEM_Reset+0xb0>)
 8002172:	490c      	ldr	r1, [pc, #48]	; (80021a4 <MEM_Reset+0xb4>)
 8002174:	400a      	ands	r2, r1
 8002176:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8002178:	1df9      	adds	r1, r7, #7
 800217a:	480b      	ldr	r0, [pc, #44]	; (80021a8 <MEM_Reset+0xb8>)
 800217c:	2305      	movs	r3, #5
 800217e:	2201      	movs	r2, #1
 8002180:	f007 f8d6 	bl	8009330 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MEM_Reset+0xb0>)
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <MEM_Reset+0xb0>)
 800218a:	2180      	movs	r1, #128	; 0x80
 800218c:	0089      	lsls	r1, r1, #2
 800218e:	430a      	orrs	r2, r1
 8002190:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8002192:	2001      	movs	r0, #1
 8002194:	f003 f962 	bl	800545c <HAL_Delay>
	}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b002      	add	sp, #8
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	50000400 	.word	0x50000400
 80021a4:	fffffdff 	.word	0xfffffdff
 80021a8:	20000178 	.word	0x20000178

080021ac <weoShowFullScreen>:
//==================================================================================================================================
	uint8_t weoShowFullScreen(uint8_t picNum) {
 80021ac:	b5b0      	push	{r4, r5, r7, lr}
 80021ae:	4c42      	ldr	r4, [pc, #264]	; (80022b8 <weoShowFullScreen+0x10c>)
 80021b0:	44a5      	add	sp, r4
 80021b2:	af02      	add	r7, sp, #8
 80021b4:	0002      	movs	r2, r0
 80021b6:	4b41      	ldr	r3, [pc, #260]	; (80022bc <weoShowFullScreen+0x110>)
 80021b8:	4941      	ldr	r1, [pc, #260]	; (80022c0 <weoShowFullScreen+0x114>)
 80021ba:	185b      	adds	r3, r3, r1
 80021bc:	19db      	adds	r3, r3, r7
 80021be:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 80021c0:	4c40      	ldr	r4, [pc, #256]	; (80022c4 <weoShowFullScreen+0x118>)
 80021c2:	193b      	adds	r3, r7, r4
 80021c4:	2213      	movs	r2, #19
 80021c6:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 80021c8:	4b3c      	ldr	r3, [pc, #240]	; (80022bc <weoShowFullScreen+0x110>)
 80021ca:	185b      	adds	r3, r3, r1
 80021cc:	19db      	adds	r3, r3, r7
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	035b      	lsls	r3, r3, #13
 80021d2:	483d      	ldr	r0, [pc, #244]	; (80022c8 <weoShowFullScreen+0x11c>)
 80021d4:	183a      	adds	r2, r7, r0
 80021d6:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 80021d8:	183b      	adds	r3, r7, r0
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <weoShowFullScreen+0x120>)
 80021e0:	185b      	adds	r3, r3, r1
 80021e2:	19db      	adds	r3, r3, r7
 80021e4:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80021e6:	183b      	adds	r3, r7, r0
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4b37      	ldr	r3, [pc, #220]	; (80022cc <weoShowFullScreen+0x120>)
 80021f0:	185b      	adds	r3, r3, r1
 80021f2:	19db      	adds	r3, r3, r7
 80021f4:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80021f6:	183b      	adds	r3, r7, r0
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	0c1b      	lsrs	r3, r3, #16
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4b33      	ldr	r3, [pc, #204]	; (80022cc <weoShowFullScreen+0x120>)
 8002200:	185b      	adds	r3, r3, r1
 8002202:	19db      	adds	r3, r3, r7
 8002204:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8002206:	183b      	adds	r3, r7, r0
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0e1b      	lsrs	r3, r3, #24
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <weoShowFullScreen+0x120>)
 8002210:	185b      	adds	r3, r3, r1
 8002212:	19db      	adds	r3, r3, r7
 8002214:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002216:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <weoShowFullScreen+0x124>)
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	4b2d      	ldr	r3, [pc, #180]	; (80022d0 <weoShowFullScreen+0x124>)
 800221c:	492d      	ldr	r1, [pc, #180]	; (80022d4 <weoShowFullScreen+0x128>)
 800221e:	400a      	ands	r2, r1
 8002220:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002222:	1939      	adds	r1, r7, r4
 8002224:	482c      	ldr	r0, [pc, #176]	; (80022d8 <weoShowFullScreen+0x12c>)
 8002226:	2332      	movs	r3, #50	; 0x32
 8002228:	2201      	movs	r2, #1
 800222a:	f007 f881 	bl	8009330 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 800222e:	2408      	movs	r4, #8
 8002230:	193b      	adds	r3, r7, r4
 8002232:	1cd9      	adds	r1, r3, #3
 8002234:	4828      	ldr	r0, [pc, #160]	; (80022d8 <weoShowFullScreen+0x12c>)
 8002236:	2332      	movs	r3, #50	; 0x32
 8002238:	2201      	movs	r2, #1
 800223a:	f007 f879 	bl	8009330 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 800223e:	193b      	adds	r3, r7, r4
 8002240:	1c99      	adds	r1, r3, #2
 8002242:	4825      	ldr	r0, [pc, #148]	; (80022d8 <weoShowFullScreen+0x12c>)
 8002244:	2332      	movs	r3, #50	; 0x32
 8002246:	2201      	movs	r2, #1
 8002248:	f007 f872 	bl	8009330 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 800224c:	193b      	adds	r3, r7, r4
 800224e:	1c59      	adds	r1, r3, #1
 8002250:	4821      	ldr	r0, [pc, #132]	; (80022d8 <weoShowFullScreen+0x12c>)
 8002252:	2332      	movs	r3, #50	; 0x32
 8002254:	2201      	movs	r2, #1
 8002256:	f007 f86b 	bl	8009330 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 800225a:	1939      	adds	r1, r7, r4
 800225c:	481e      	ldr	r0, [pc, #120]	; (80022d8 <weoShowFullScreen+0x12c>)
 800225e:	2332      	movs	r3, #50	; 0x32
 8002260:	2201      	movs	r2, #1
 8002262:	f007 f865 	bl	8009330 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 8002266:	4c1d      	ldr	r4, [pc, #116]	; (80022dc <weoShowFullScreen+0x130>)
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	019a      	lsls	r2, r3, #6
 800226c:	2510      	movs	r5, #16
 800226e:	1979      	adds	r1, r7, r5
 8002270:	4819      	ldr	r0, [pc, #100]	; (80022d8 <weoShowFullScreen+0x12c>)
 8002272:	0023      	movs	r3, r4
 8002274:	f007 f9b4 	bl	80095e0 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <weoShowFullScreen+0x124>)
 800227a:	695a      	ldr	r2, [r3, #20]
 800227c:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <weoShowFullScreen+0x124>)
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	0089      	lsls	r1, r1, #2
 8002282:	430a      	orrs	r2, r1
 8002284:	615a      	str	r2, [r3, #20]

		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 8002286:	197b      	adds	r3, r7, r5
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	23ff      	movs	r3, #255	; 0xff
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	237f      	movs	r3, #127	; 0x7f
 8002290:	227f      	movs	r2, #127	; 0x7f
 8002292:	2100      	movs	r1, #0
 8002294:	2000      	movs	r0, #0
 8002296:	f7ff f90f 	bl	80014b8 <weoDrawRectangleFilled>
		cmd2Execute=0;
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <weoShowFullScreen+0x134>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <weoShowFullScreen+0x138>)
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <weoShowFullScreen+0x138>)
 80022a6:	2140      	movs	r1, #64	; 0x40
 80022a8:	430a      	orrs	r2, r1
 80022aa:	615a      	str	r2, [r3, #20]
	}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	0018      	movs	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <weoShowFullScreen+0x114>)
 80022b4:	449d      	add	sp, r3
 80022b6:	bdb0      	pop	{r4, r5, r7, pc}
 80022b8:	ffffdfe0 	.word	0xffffdfe0
 80022bc:	ffffdfef 	.word	0xffffdfef
 80022c0:	00002018 	.word	0x00002018
 80022c4:	00002013 	.word	0x00002013
 80022c8:	00002014 	.word	0x00002014
 80022cc:	ffffdff0 	.word	0xffffdff0
 80022d0:	50000400 	.word	0x50000400
 80022d4:	fffffdff 	.word	0xfffffdff
 80022d8:	20000178 	.word	0x20000178
 80022dc:	00001388 	.word	0x00001388
 80022e0:	200002ea 	.word	0x200002ea
 80022e4:	50000800 	.word	0x50000800

080022e8 <weoShowSmallImage>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 80022e8:	b5b0      	push	{r4, r5, r7, lr}
 80022ea:	4ca7      	ldr	r4, [pc, #668]	; (8002588 <weoShowSmallImage+0x2a0>)
 80022ec:	44a5      	add	sp, r4
 80022ee:	af02      	add	r7, sp, #8
 80022f0:	0004      	movs	r4, r0
 80022f2:	0008      	movs	r0, r1
 80022f4:	0011      	movs	r1, r2
 80022f6:	4ba5      	ldr	r3, [pc, #660]	; (800258c <weoShowSmallImage+0x2a4>)
 80022f8:	4da5      	ldr	r5, [pc, #660]	; (8002590 <weoShowSmallImage+0x2a8>)
 80022fa:	195b      	adds	r3, r3, r5
 80022fc:	19db      	adds	r3, r3, r7
 80022fe:	1c22      	adds	r2, r4, #0
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	4ba4      	ldr	r3, [pc, #656]	; (8002594 <weoShowSmallImage+0x2ac>)
 8002304:	002c      	movs	r4, r5
 8002306:	191b      	adds	r3, r3, r4
 8002308:	19db      	adds	r3, r3, r7
 800230a:	1c02      	adds	r2, r0, #0
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	4ba2      	ldr	r3, [pc, #648]	; (8002598 <weoShowSmallImage+0x2b0>)
 8002310:	0020      	movs	r0, r4
 8002312:	181b      	adds	r3, r3, r0
 8002314:	19db      	adds	r3, r3, r7
 8002316:	1c0a      	adds	r2, r1, #0
 8002318:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 800231a:	2300      	movs	r3, #0
 800231c:	4c9f      	ldr	r4, [pc, #636]	; (800259c <weoShowSmallImage+0x2b4>)
 800231e:	193a      	adds	r2, r7, r4
 8002320:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002322:	4d9f      	ldr	r5, [pc, #636]	; (80025a0 <weoShowSmallImage+0x2b8>)
 8002324:	197b      	adds	r3, r7, r5
 8002326:	2213      	movs	r2, #19
 8002328:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 800232a:	4b98      	ldr	r3, [pc, #608]	; (800258c <weoShowSmallImage+0x2a4>)
 800232c:	0001      	movs	r1, r0
 800232e:	185b      	adds	r3, r3, r1
 8002330:	19db      	adds	r3, r3, r7
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	3301      	adds	r3, #1
 8002336:	33ff      	adds	r3, #255	; 0xff
 8002338:	035b      	lsls	r3, r3, #13
 800233a:	0020      	movs	r0, r4
 800233c:	183a      	adds	r2, r7, r0
 800233e:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 8002340:	183b      	adds	r3, r7, r0
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b97      	ldr	r3, [pc, #604]	; (80025a4 <weoShowSmallImage+0x2bc>)
 8002348:	000c      	movs	r4, r1
 800234a:	191b      	adds	r3, r3, r4
 800234c:	19db      	adds	r3, r3, r7
 800234e:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002350:	0001      	movs	r1, r0
 8002352:	187b      	adds	r3, r7, r1
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4b92      	ldr	r3, [pc, #584]	; (80025a4 <weoShowSmallImage+0x2bc>)
 800235c:	191b      	adds	r3, r3, r4
 800235e:	19db      	adds	r3, r3, r7
 8002360:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002362:	187b      	adds	r3, r7, r1
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0c1b      	lsrs	r3, r3, #16
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b8e      	ldr	r3, [pc, #568]	; (80025a4 <weoShowSmallImage+0x2bc>)
 800236c:	191b      	adds	r3, r3, r4
 800236e:	19db      	adds	r3, r3, r7
 8002370:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8002372:	187b      	adds	r3, r7, r1
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	0e1b      	lsrs	r3, r3, #24
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4b8a      	ldr	r3, [pc, #552]	; (80025a4 <weoShowSmallImage+0x2bc>)
 800237c:	191b      	adds	r3, r3, r4
 800237e:	19db      	adds	r3, r3, r7
 8002380:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002382:	4b89      	ldr	r3, [pc, #548]	; (80025a8 <weoShowSmallImage+0x2c0>)
 8002384:	695a      	ldr	r2, [r3, #20]
 8002386:	4b88      	ldr	r3, [pc, #544]	; (80025a8 <weoShowSmallImage+0x2c0>)
 8002388:	4988      	ldr	r1, [pc, #544]	; (80025ac <weoShowSmallImage+0x2c4>)
 800238a:	400a      	ands	r2, r1
 800238c:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 800238e:	1979      	adds	r1, r7, r5
 8002390:	4887      	ldr	r0, [pc, #540]	; (80025b0 <weoShowSmallImage+0x2c8>)
 8002392:	2332      	movs	r3, #50	; 0x32
 8002394:	2201      	movs	r2, #1
 8002396:	f006 ffcb 	bl	8009330 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 800239a:	2508      	movs	r5, #8
 800239c:	197b      	adds	r3, r7, r5
 800239e:	1cd9      	adds	r1, r3, #3
 80023a0:	4883      	ldr	r0, [pc, #524]	; (80025b0 <weoShowSmallImage+0x2c8>)
 80023a2:	2332      	movs	r3, #50	; 0x32
 80023a4:	2201      	movs	r2, #1
 80023a6:	f006 ffc3 	bl	8009330 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80023aa:	197b      	adds	r3, r7, r5
 80023ac:	1c99      	adds	r1, r3, #2
 80023ae:	4880      	ldr	r0, [pc, #512]	; (80025b0 <weoShowSmallImage+0x2c8>)
 80023b0:	2332      	movs	r3, #50	; 0x32
 80023b2:	2201      	movs	r2, #1
 80023b4:	f006 ffbc 	bl	8009330 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80023b8:	197b      	adds	r3, r7, r5
 80023ba:	1c59      	adds	r1, r3, #1
 80023bc:	487c      	ldr	r0, [pc, #496]	; (80025b0 <weoShowSmallImage+0x2c8>)
 80023be:	2332      	movs	r3, #50	; 0x32
 80023c0:	2201      	movs	r2, #1
 80023c2:	f006 ffb5 	bl	8009330 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80023c6:	1979      	adds	r1, r7, r5
 80023c8:	4879      	ldr	r0, [pc, #484]	; (80025b0 <weoShowSmallImage+0x2c8>)
 80023ca:	2332      	movs	r3, #50	; 0x32
 80023cc:	2201      	movs	r2, #1
 80023ce:	f006 ffaf 	bl	8009330 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 80023d2:	4b78      	ldr	r3, [pc, #480]	; (80025b4 <weoShowSmallImage+0x2cc>)
 80023d4:	220c      	movs	r2, #12
 80023d6:	18b9      	adds	r1, r7, r2
 80023d8:	4875      	ldr	r0, [pc, #468]	; (80025b0 <weoShowSmallImage+0x2c8>)
 80023da:	2202      	movs	r2, #2
 80023dc:	f007 f900 	bl	80095e0 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 80023e0:	4b71      	ldr	r3, [pc, #452]	; (80025a8 <weoShowSmallImage+0x2c0>)
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	4b70      	ldr	r3, [pc, #448]	; (80025a8 <weoShowSmallImage+0x2c0>)
 80023e6:	2180      	movs	r1, #128	; 0x80
 80023e8:	0089      	lsls	r1, r1, #2
 80023ea:	430a      	orrs	r2, r1
 80023ec:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 80023ee:	4972      	ldr	r1, [pc, #456]	; (80025b8 <weoShowSmallImage+0x2d0>)
 80023f0:	187b      	adds	r3, r7, r1
 80023f2:	4a72      	ldr	r2, [pc, #456]	; (80025bc <weoShowSmallImage+0x2d4>)
 80023f4:	1912      	adds	r2, r2, r4
 80023f6:	19d2      	adds	r2, r2, r7
 80023f8:	7812      	ldrb	r2, [r2, #0]
 80023fa:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 80023fc:	4870      	ldr	r0, [pc, #448]	; (80025c0 <weoShowSmallImage+0x2d8>)
 80023fe:	183b      	adds	r3, r7, r0
 8002400:	4a6e      	ldr	r2, [pc, #440]	; (80025bc <weoShowSmallImage+0x2d4>)
 8002402:	1912      	adds	r2, r2, r4
 8002404:	19d2      	adds	r2, r2, r7
 8002406:	7852      	ldrb	r2, [r2, #1]
 8002408:	701a      	strb	r2, [r3, #0]

		len=width*height/2+2;
 800240a:	187b      	adds	r3, r7, r1
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	183a      	adds	r2, r7, r0
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	4353      	muls	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	da00      	bge.n	800241a <weoShowSmallImage+0x132>
 8002418:	3301      	adds	r3, #1
 800241a:	105b      	asrs	r3, r3, #1
 800241c:	b29b      	uxth	r3, r3
 800241e:	3302      	adds	r3, #2
 8002420:	b29a      	uxth	r2, r3
 8002422:	4b68      	ldr	r3, [pc, #416]	; (80025c4 <weoShowSmallImage+0x2dc>)
 8002424:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 8002426:	4b5d      	ldr	r3, [pc, #372]	; (800259c <weoShowSmallImage+0x2b4>)
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	3302      	adds	r3, #2
 800242e:	4966      	ldr	r1, [pc, #408]	; (80025c8 <weoShowSmallImage+0x2e0>)
 8002430:	187a      	adds	r2, r7, r1
 8002432:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 8002434:	187b      	adds	r3, r7, r1
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4b5a      	ldr	r3, [pc, #360]	; (80025a4 <weoShowSmallImage+0x2bc>)
 800243c:	4c54      	ldr	r4, [pc, #336]	; (8002590 <weoShowSmallImage+0x2a8>)
 800243e:	191b      	adds	r3, r3, r4
 8002440:	19db      	adds	r3, r3, r7
 8002442:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 8002444:	187b      	adds	r3, r7, r1
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b55      	ldr	r3, [pc, #340]	; (80025a4 <weoShowSmallImage+0x2bc>)
 800244e:	191b      	adds	r3, r3, r4
 8002450:	19db      	adds	r3, r3, r7
 8002452:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 8002454:	187b      	adds	r3, r7, r1
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	b2da      	uxtb	r2, r3
 800245c:	4b51      	ldr	r3, [pc, #324]	; (80025a4 <weoShowSmallImage+0x2bc>)
 800245e:	191b      	adds	r3, r3, r4
 8002460:	19db      	adds	r3, r3, r7
 8002462:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 8002464:	187b      	adds	r3, r7, r1
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	0e1b      	lsrs	r3, r3, #24
 800246a:	b2da      	uxtb	r2, r3
 800246c:	4b4d      	ldr	r3, [pc, #308]	; (80025a4 <weoShowSmallImage+0x2bc>)
 800246e:	191b      	adds	r3, r3, r4
 8002470:	19db      	adds	r3, r3, r7
 8002472:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 8002474:	4b55      	ldr	r3, [pc, #340]	; (80025cc <weoShowSmallImage+0x2e4>)
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	4b54      	ldr	r3, [pc, #336]	; (80025cc <weoShowSmallImage+0x2e4>)
 800247a:	2108      	movs	r1, #8
 800247c:	430a      	orrs	r2, r1
 800247e:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8002480:	4847      	ldr	r0, [pc, #284]	; (80025a0 <weoShowSmallImage+0x2b8>)
 8002482:	183b      	adds	r3, r7, r0
 8002484:	2213      	movs	r2, #19
 8002486:	701a      	strb	r2, [r3, #0]

		GPIOB->ODR &= ~(1 <<9);	//reset cs
 8002488:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <weoShowSmallImage+0x2c0>)
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	4b46      	ldr	r3, [pc, #280]	; (80025a8 <weoShowSmallImage+0x2c0>)
 800248e:	4947      	ldr	r1, [pc, #284]	; (80025ac <weoShowSmallImage+0x2c4>)
 8002490:	400a      	ands	r2, r1
 8002492:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 8002494:	1839      	adds	r1, r7, r0
 8002496:	4846      	ldr	r0, [pc, #280]	; (80025b0 <weoShowSmallImage+0x2c8>)
 8002498:	2332      	movs	r3, #50	; 0x32
 800249a:	2201      	movs	r2, #1
 800249c:	f006 ff48 	bl	8009330 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 80024a0:	2508      	movs	r5, #8
 80024a2:	197b      	adds	r3, r7, r5
 80024a4:	1cd9      	adds	r1, r3, #3
 80024a6:	4842      	ldr	r0, [pc, #264]	; (80025b0 <weoShowSmallImage+0x2c8>)
 80024a8:	2332      	movs	r3, #50	; 0x32
 80024aa:	2201      	movs	r2, #1
 80024ac:	f006 ff40 	bl	8009330 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80024b0:	197b      	adds	r3, r7, r5
 80024b2:	1c99      	adds	r1, r3, #2
 80024b4:	483e      	ldr	r0, [pc, #248]	; (80025b0 <weoShowSmallImage+0x2c8>)
 80024b6:	2332      	movs	r3, #50	; 0x32
 80024b8:	2201      	movs	r2, #1
 80024ba:	f006 ff39 	bl	8009330 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 80024be:	197b      	adds	r3, r7, r5
 80024c0:	1c59      	adds	r1, r3, #1
 80024c2:	483b      	ldr	r0, [pc, #236]	; (80025b0 <weoShowSmallImage+0x2c8>)
 80024c4:	2332      	movs	r3, #50	; 0x32
 80024c6:	2201      	movs	r2, #1
 80024c8:	f006 ff32 	bl	8009330 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80024cc:	1979      	adds	r1, r7, r5
 80024ce:	4838      	ldr	r0, [pc, #224]	; (80025b0 <weoShowSmallImage+0x2c8>)
 80024d0:	2332      	movs	r3, #50	; 0x32
 80024d2:	2201      	movs	r2, #1
 80024d4:	f006 ff2c 	bl	8009330 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80024d8:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <weoShowSmallImage+0x2dc>)
 80024da:	881a      	ldrh	r2, [r3, #0]
 80024dc:	4b35      	ldr	r3, [pc, #212]	; (80025b4 <weoShowSmallImage+0x2cc>)
 80024de:	2110      	movs	r1, #16
 80024e0:	1879      	adds	r1, r7, r1
 80024e2:	4833      	ldr	r0, [pc, #204]	; (80025b0 <weoShowSmallImage+0x2c8>)
 80024e4:	f007 f87c 	bl	80095e0 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9;	// set cs
 80024e8:	4b2f      	ldr	r3, [pc, #188]	; (80025a8 <weoShowSmallImage+0x2c0>)
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <weoShowSmallImage+0x2c0>)
 80024ee:	2180      	movs	r1, #128	; 0x80
 80024f0:	0089      	lsls	r1, r1, #2
 80024f2:	430a      	orrs	r2, r1
 80024f4:	615a      	str	r2, [r3, #20]

		decY=0x01;
 80024f6:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <weoShowSmallImage+0x2e8>)
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
		if(imY % 2 !=0){
 80024fc:	4b26      	ldr	r3, [pc, #152]	; (8002598 <weoShowSmallImage+0x2b0>)
 80024fe:	191b      	adds	r3, r3, r4
 8002500:	19db      	adds	r3, r3, r7
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2201      	movs	r2, #1
 8002506:	4013      	ands	r3, r2
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <weoShowSmallImage+0x22c>
			decY=0x02;
 800250e:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <weoShowSmallImage+0x2e8>)
 8002510:	2202      	movs	r2, #2
 8002512:	701a      	strb	r2, [r3, #0]
		}
		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8002514:	4b1f      	ldr	r3, [pc, #124]	; (8002594 <weoShowSmallImage+0x2ac>)
 8002516:	491e      	ldr	r1, [pc, #120]	; (8002590 <weoShowSmallImage+0x2a8>)
 8002518:	185b      	adds	r3, r3, r1
 800251a:	19da      	adds	r2, r3, r7
 800251c:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <weoShowSmallImage+0x2d0>)
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	7812      	ldrb	r2, [r2, #0]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	18d3      	adds	r3, r2, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	b2dc      	uxtb	r4, r3
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <weoShowSmallImage+0x2b0>)
 800252e:	185b      	adds	r3, r3, r1
 8002530:	19da      	adds	r2, r3, r7
 8002532:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <weoShowSmallImage+0x2d8>)
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	7812      	ldrb	r2, [r2, #0]
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	18d3      	adds	r3, r2, r3
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <weoShowSmallImage+0x2e8>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4b14      	ldr	r3, [pc, #80]	; (8002598 <weoShowSmallImage+0x2b0>)
 8002548:	0008      	movs	r0, r1
 800254a:	185b      	adds	r3, r3, r1
 800254c:	19db      	adds	r3, r3, r7
 800254e:	7819      	ldrb	r1, [r3, #0]
 8002550:	4b10      	ldr	r3, [pc, #64]	; (8002594 <weoShowSmallImage+0x2ac>)
 8002552:	181b      	adds	r3, r3, r0
 8002554:	19db      	adds	r3, r3, r7
 8002556:	7818      	ldrb	r0, [r3, #0]
 8002558:	2310      	movs	r3, #16
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	23ff      	movs	r3, #255	; 0xff
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	0013      	movs	r3, r2
 8002564:	0022      	movs	r2, r4
 8002566:	f7fe ffa7 	bl	80014b8 <weoDrawRectangleFilled>
		cmd2Execute=0;
 800256a:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <weoShowSmallImage+0x2ec>)
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <weoShowSmallImage+0x2f0>)
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <weoShowSmallImage+0x2f0>)
 8002576:	2140      	movs	r1, #64	; 0x40
 8002578:	430a      	orrs	r2, r1
 800257a:	615a      	str	r2, [r3, #20]
	}
 800257c:	46c0      	nop			; (mov r8, r8)
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	4b03      	ldr	r3, [pc, #12]	; (8002590 <weoShowSmallImage+0x2a8>)
 8002584:	449d      	add	sp, r3
 8002586:	bdb0      	pop	{r4, r5, r7, pc}
 8002588:	ffffdfd8 	.word	0xffffdfd8
 800258c:	ffffdfe7 	.word	0xffffdfe7
 8002590:	00002020 	.word	0x00002020
 8002594:	ffffdfe6 	.word	0xffffdfe6
 8002598:	ffffdfe5 	.word	0xffffdfe5
 800259c:	0000201c 	.word	0x0000201c
 80025a0:	00002013 	.word	0x00002013
 80025a4:	ffffdfe8 	.word	0xffffdfe8
 80025a8:	50000400 	.word	0x50000400
 80025ac:	fffffdff 	.word	0xfffffdff
 80025b0:	20000178 	.word	0x20000178
 80025b4:	00001388 	.word	0x00001388
 80025b8:	0000201b 	.word	0x0000201b
 80025bc:	ffffdfec 	.word	0xffffdfec
 80025c0:	0000201a 	.word	0x0000201a
 80025c4:	200002ee 	.word	0x200002ee
 80025c8:	00002014 	.word	0x00002014
 80025cc:	40004400 	.word	0x40004400
 80025d0:	200002f0 	.word	0x200002f0
 80025d4:	200002ea 	.word	0x200002ea
 80025d8:	50000800 	.word	0x50000800

080025dc <soundPlay>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		uint8_t soundPlay(uint8_t soundNum) {
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b08d      	sub	sp, #52	; 0x34
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	0002      	movs	r2, r0
 80025e4:	1dfb      	adds	r3, r7, #7
 80025e6:	701a      	strb	r2, [r3, #0]
			uint8_t memCMD = 0x13; //read command with 4-byte address
 80025e8:	232b      	movs	r3, #43	; 0x2b
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	2213      	movs	r2, #19
 80025ee:	701a      	strb	r2, [r3, #0]
			uint8_t soundInfo[9],addrINFO[4],addr[4],length[4];
			volatile uint32_t addrSound, address;
			uint32_t i;

			setVolume(0x10, 0x30, 10);	// it was setVolume(0x10, 0x30, 0x00);
 80025f0:	220a      	movs	r2, #10
 80025f2:	2130      	movs	r1, #48	; 0x30
 80025f4:	2010      	movs	r0, #16
 80025f6:	f000 fa5b 	bl	8002ab0 <setVolume>
//			soundNum = 0;
			address = 4194304 + (soundNum * 9);
 80025fa:	1dfb      	adds	r3, r7, #7
 80025fc:	781a      	ldrb	r2, [r3, #0]
 80025fe:	0013      	movs	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	189b      	adds	r3, r3, r2
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	03d2      	lsls	r2, r2, #15
 8002608:	4694      	mov	ip, r2
 800260a:	4463      	add	r3, ip
 800260c:	60fb      	str	r3, [r7, #12]
//			address = 0 + (soundNum * 9);

			curBuf = 0;
 800260e:	4b8e      	ldr	r3, [pc, #568]	; (8002848 <soundPlay+0x26c>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
			uint32_t lenOfsound = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
			isSoundOver = 0;
 8002618:	4b8c      	ldr	r3, [pc, #560]	; (800284c <soundPlay+0x270>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
			addrSound = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]

			if(isSoundOver == 1)
 8002622:	4b8a      	ldr	r3, [pc, #552]	; (800284c <soundPlay+0x270>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d109      	bne.n	800263e <soundPlay+0x62>
			{
				GPIOC->ODR &= ~(1 << 6);	//reset BF
 800262a:	4b89      	ldr	r3, [pc, #548]	; (8002850 <soundPlay+0x274>)
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	4b88      	ldr	r3, [pc, #544]	; (8002850 <soundPlay+0x274>)
 8002630:	2140      	movs	r1, #64	; 0x40
 8002632:	438a      	bics	r2, r1
 8002634:	615a      	str	r2, [r3, #20]
				curBuf = 0;
 8002636:	4b84      	ldr	r3, [pc, #528]	; (8002848 <soundPlay+0x26c>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
				return;
 800263c:	e1e6      	b.n	8002a0c <soundPlay+0x430>
			}

			if (curBuf == 0){
 800263e:	4b82      	ldr	r3, [pc, #520]	; (8002848 <soundPlay+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d000      	beq.n	8002648 <soundPlay+0x6c>
 8002646:	e0af      	b.n	80027a8 <soundPlay+0x1cc>



				addrINFO[0] = address & 0xFF;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	241c      	movs	r4, #28
 800264e:	193b      	adds	r3, r7, r4
 8002650:	701a      	strb	r2, [r3, #0]
				addrINFO[1] = (address >> 8) & 0xFF;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	0a1b      	lsrs	r3, r3, #8
 8002656:	b2da      	uxtb	r2, r3
 8002658:	193b      	adds	r3, r7, r4
 800265a:	705a      	strb	r2, [r3, #1]
				addrINFO[2] = (address >> 16) & 0xFF;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	0c1b      	lsrs	r3, r3, #16
 8002660:	b2da      	uxtb	r2, r3
 8002662:	193b      	adds	r3, r7, r4
 8002664:	709a      	strb	r2, [r3, #2]
				addrINFO[3] = (address >> 24) & 0xFF;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	0e1b      	lsrs	r3, r3, #24
 800266a:	b2da      	uxtb	r2, r3
 800266c:	193b      	adds	r3, r7, r4
 800266e:	70da      	strb	r2, [r3, #3]

				GPIOB->ODR &= ~(1 << 9); //reset cs
 8002670:	4b78      	ldr	r3, [pc, #480]	; (8002854 <soundPlay+0x278>)
 8002672:	695a      	ldr	r2, [r3, #20]
 8002674:	4b77      	ldr	r3, [pc, #476]	; (8002854 <soundPlay+0x278>)
 8002676:	4978      	ldr	r1, [pc, #480]	; (8002858 <soundPlay+0x27c>)
 8002678:	400a      	ands	r2, r1
 800267a:	615a      	str	r2, [r3, #20]
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 800267c:	232b      	movs	r3, #43	; 0x2b
 800267e:	18f9      	adds	r1, r7, r3
 8002680:	4876      	ldr	r0, [pc, #472]	; (800285c <soundPlay+0x280>)
 8002682:	2332      	movs	r3, #50	; 0x32
 8002684:	2201      	movs	r2, #1
 8002686:	f006 fe53 	bl	8009330 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[3], 1, 50); //send address
 800268a:	193b      	adds	r3, r7, r4
 800268c:	1cd9      	adds	r1, r3, #3
 800268e:	4873      	ldr	r0, [pc, #460]	; (800285c <soundPlay+0x280>)
 8002690:	2332      	movs	r3, #50	; 0x32
 8002692:	2201      	movs	r2, #1
 8002694:	f006 fe4c 	bl	8009330 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[2], 1, 50); //send address
 8002698:	193b      	adds	r3, r7, r4
 800269a:	1c99      	adds	r1, r3, #2
 800269c:	486f      	ldr	r0, [pc, #444]	; (800285c <soundPlay+0x280>)
 800269e:	2332      	movs	r3, #50	; 0x32
 80026a0:	2201      	movs	r2, #1
 80026a2:	f006 fe45 	bl	8009330 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[1], 1, 50); //send address
 80026a6:	193b      	adds	r3, r7, r4
 80026a8:	1c59      	adds	r1, r3, #1
 80026aa:	486c      	ldr	r0, [pc, #432]	; (800285c <soundPlay+0x280>)
 80026ac:	2332      	movs	r3, #50	; 0x32
 80026ae:	2201      	movs	r2, #1
 80026b0:	f006 fe3e 	bl	8009330 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[0], 1, 50); //send address
 80026b4:	1939      	adds	r1, r7, r4
 80026b6:	4869      	ldr	r0, [pc, #420]	; (800285c <soundPlay+0x280>)
 80026b8:	2332      	movs	r3, #50	; 0x32
 80026ba:	2201      	movs	r2, #1
 80026bc:	f006 fe38 	bl	8009330 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi2, (uint8_t*) & soundInfo, 9, 5000);//9 bytes of soundInfo
 80026c0:	4b67      	ldr	r3, [pc, #412]	; (8002860 <soundPlay+0x284>)
 80026c2:	2420      	movs	r4, #32
 80026c4:	1939      	adds	r1, r7, r4
 80026c6:	4865      	ldr	r0, [pc, #404]	; (800285c <soundPlay+0x280>)
 80026c8:	2209      	movs	r2, #9
 80026ca:	f006 ff89 	bl	80095e0 <HAL_SPI_Receive>
				GPIOB->ODR |= 1 << 9; // set cs
 80026ce:	4b61      	ldr	r3, [pc, #388]	; (8002854 <soundPlay+0x278>)
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	4b60      	ldr	r3, [pc, #384]	; (8002854 <soundPlay+0x278>)
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	0089      	lsls	r1, r1, #2
 80026d8:	430a      	orrs	r2, r1
 80026da:	615a      	str	r2, [r3, #20]

				addr[0] = soundInfo[4];
 80026dc:	0021      	movs	r1, r4
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	791a      	ldrb	r2, [r3, #4]
 80026e2:	2018      	movs	r0, #24
 80026e4:	183b      	adds	r3, r7, r0
 80026e6:	701a      	strb	r2, [r3, #0]
				addr[1] = soundInfo[3];
 80026e8:	187b      	adds	r3, r7, r1
 80026ea:	78da      	ldrb	r2, [r3, #3]
 80026ec:	183b      	adds	r3, r7, r0
 80026ee:	705a      	strb	r2, [r3, #1]
				addr[2] = soundInfo[2];
 80026f0:	187b      	adds	r3, r7, r1
 80026f2:	789a      	ldrb	r2, [r3, #2]
 80026f4:	183b      	adds	r3, r7, r0
 80026f6:	709a      	strb	r2, [r3, #2]
				addr[3] = soundInfo[1];
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	785a      	ldrb	r2, [r3, #1]
 80026fc:	183b      	adds	r3, r7, r0
 80026fe:	70da      	strb	r2, [r3, #3]

//				address = 0;
	//			address = 0x29f170;

				address |= addr[3];
 8002700:	183b      	adds	r3, r7, r0
 8002702:	78db      	ldrb	r3, [r3, #3]
 8002704:	001a      	movs	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	60fb      	str	r3, [r7, #12]
				address |= addr[2];
 8002712:	183b      	adds	r3, r7, r0
 8002714:	789b      	ldrb	r3, [r3, #2]
 8002716:	001a      	movs	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	60fb      	str	r3, [r7, #12]
				address |= addr[1];
 8002724:	183b      	adds	r3, r7, r0
 8002726:	785b      	ldrb	r3, [r3, #1]
 8002728:	001a      	movs	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	60fb      	str	r3, [r7, #12]
				address |= addr[0];
 8002736:	183b      	adds	r3, r7, r0
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	001a      	movs	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
	//									address <<= 8;
	//									address |= addr[1];
	//									address <<= 8;
	//									address |= addr[0];

				length[0] = soundInfo[8];	//Commented 4 test
 8002742:	187b      	adds	r3, r7, r1
 8002744:	7a1a      	ldrb	r2, [r3, #8]
 8002746:	2014      	movs	r0, #20
 8002748:	183b      	adds	r3, r7, r0
 800274a:	701a      	strb	r2, [r3, #0]
				length[1] = soundInfo[7];	//Commented 4 test
 800274c:	187b      	adds	r3, r7, r1
 800274e:	79da      	ldrb	r2, [r3, #7]
 8002750:	183b      	adds	r3, r7, r0
 8002752:	705a      	strb	r2, [r3, #1]
				length[2] = soundInfo[6];	//Commented 4 test
 8002754:	187b      	adds	r3, r7, r1
 8002756:	799a      	ldrb	r2, [r3, #6]
 8002758:	183b      	adds	r3, r7, r0
 800275a:	709a      	strb	r2, [r3, #2]
				length[3] = soundInfo[5];	//Commented 4 test
 800275c:	187b      	adds	r3, r7, r1
 800275e:	795a      	ldrb	r2, [r3, #5]
 8002760:	0001      	movs	r1, r0
 8002762:	187b      	adds	r3, r7, r1
 8002764:	70da      	strb	r2, [r3, #3]

				lenOfsound |= length[3];
 8002766:	187b      	adds	r3, r7, r1
 8002768:	78db      	ldrb	r3, [r3, #3]
 800276a:	001a      	movs	r2, r3
 800276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276e:	4313      	orrs	r3, r2
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 8002772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[2];
 8002778:	187b      	adds	r3, r7, r1
 800277a:	789b      	ldrb	r3, [r3, #2]
 800277c:	001a      	movs	r2, r3
 800277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002780:	4313      	orrs	r3, r2
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[1];
 800278a:	187b      	adds	r3, r7, r1
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	001a      	movs	r2, r3
 8002790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002792:	4313      	orrs	r3, r2
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[0];
 800279c:	187b      	adds	r3, r7, r1
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	001a      	movs	r2, r3
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	4313      	orrs	r3, r2
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

	//			lenOfsound = 0xe7a4;	//len1
	////			lenOfsound = 1374248;	//len0
				bufCount = lenOfsound / bufLen;
 80027a8:	4b2e      	ldr	r3, [pc, #184]	; (8002864 <soundPlay+0x288>)
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	0019      	movs	r1, r3
 80027ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027b0:	f7fd fca8 	bl	8000104 <__udivsi3>
 80027b4:	0003      	movs	r3, r0
 80027b6:	001a      	movs	r2, r3
 80027b8:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <soundPlay+0x28c>)
 80027ba:	601a      	str	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////////////////// IF before is correct, after is correct //////////
				GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 80027bc:	4b25      	ldr	r3, [pc, #148]	; (8002854 <soundPlay+0x278>)
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	4b24      	ldr	r3, [pc, #144]	; (8002854 <soundPlay+0x278>)
 80027c2:	4925      	ldr	r1, [pc, #148]	; (8002858 <soundPlay+0x27c>)
 80027c4:	400a      	ands	r2, r1
 80027c6:	615a      	str	r2, [r3, #20]
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 80027c8:	232b      	movs	r3, #43	; 0x2b
 80027ca:	18f9      	adds	r1, r7, r3
 80027cc:	4823      	ldr	r0, [pc, #140]	; (800285c <soundPlay+0x280>)
 80027ce:	2332      	movs	r3, #50	; 0x32
 80027d0:	2201      	movs	r2, #1
 80027d2:	f006 fdad 	bl	8009330 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 80027d6:	2418      	movs	r4, #24
 80027d8:	193b      	adds	r3, r7, r4
 80027da:	1cd9      	adds	r1, r3, #3
 80027dc:	481f      	ldr	r0, [pc, #124]	; (800285c <soundPlay+0x280>)
 80027de:	2332      	movs	r3, #50	; 0x32
 80027e0:	2201      	movs	r2, #1
 80027e2:	f006 fda5 	bl	8009330 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	1c99      	adds	r1, r3, #2
 80027ea:	481c      	ldr	r0, [pc, #112]	; (800285c <soundPlay+0x280>)
 80027ec:	2332      	movs	r3, #50	; 0x32
 80027ee:	2201      	movs	r2, #1
 80027f0:	f006 fd9e 	bl	8009330 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 80027f4:	193b      	adds	r3, r7, r4
 80027f6:	1c59      	adds	r1, r3, #1
 80027f8:	4818      	ldr	r0, [pc, #96]	; (800285c <soundPlay+0x280>)
 80027fa:	2332      	movs	r3, #50	; 0x32
 80027fc:	2201      	movs	r2, #1
 80027fe:	f006 fd97 	bl	8009330 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 8002802:	1939      	adds	r1, r7, r4
 8002804:	4815      	ldr	r0, [pc, #84]	; (800285c <soundPlay+0x280>)
 8002806:	2332      	movs	r3, #50	; 0x32
 8002808:	2201      	movs	r2, #1
 800280a:	f006 fd91 	bl	8009330 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi2, (uint8_t*)  & soundBuf[0], bufLen, 5000);
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <soundPlay+0x288>)
 8002810:	881a      	ldrh	r2, [r3, #0]
 8002812:	4b13      	ldr	r3, [pc, #76]	; (8002860 <soundPlay+0x284>)
 8002814:	4915      	ldr	r1, [pc, #84]	; (800286c <soundPlay+0x290>)
 8002816:	4811      	ldr	r0, [pc, #68]	; (800285c <soundPlay+0x280>)
 8002818:	f006 fee2 	bl	80095e0 <HAL_SPI_Receive>
				GPIOB->ODR |= 1 << 9;	//set FLASH CS
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <soundPlay+0x278>)
 800281e:	695a      	ldr	r2, [r3, #20]
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <soundPlay+0x278>)
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	0089      	lsls	r1, r1, #2
 8002826:	430a      	orrs	r2, r1
 8002828:	615a      	str	r2, [r3, #20]



	//			addrSound = 9;	// 4 test only!
				addrSound = address;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	613b      	str	r3, [r7, #16]

				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], (bufLen >> 1));
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <soundPlay+0x288>)
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	490d      	ldr	r1, [pc, #52]	; (800286c <soundPlay+0x290>)
 8002838:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <soundPlay+0x294>)
 800283a:	0018      	movs	r0, r3
 800283c:	f005 f8d2 	bl	80079e4 <HAL_I2S_Transmit_DMA>
				half_of_buf = 1;
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <soundPlay+0x298>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
	//==================================================1st time play buffer =========================================================
	//			GPIOC->ODR |= 1 << 6;	//set BF
	//			GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
				while(curBuf <= bufCount)
 8002846:	e0d9      	b.n	80029fc <soundPlay+0x420>
 8002848:	200002f4 	.word	0x200002f4
 800284c:	200012fd 	.word	0x200012fd
 8002850:	50000800 	.word	0x50000800
 8002854:	50000400 	.word	0x50000400
 8002858:	fffffdff 	.word	0xfffffdff
 800285c:	20000178 	.word	0x20000178
 8002860:	00001388 	.word	0x00001388
 8002864:	20000030 	.word	0x20000030
 8002868:	200002f8 	.word	0x200002f8
 800286c:	200002fc 	.word	0x200002fc
 8002870:	200000e0 	.word	0x200000e0
 8002874:	200012fc 	.word	0x200012fc
				{
	//							GPIOC->ODR |= 1 << 6;	//set BF
	//							GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
					if(half_of_buf == 2)
 8002878:	4b66      	ldr	r3, [pc, #408]	; (8002a14 <soundPlay+0x438>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d15c      	bne.n	800293a <soundPlay+0x35e>
					{
						GPIOC->ODR |= 1 << 6;	//set BF
 8002880:	4b65      	ldr	r3, [pc, #404]	; (8002a18 <soundPlay+0x43c>)
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	4b64      	ldr	r3, [pc, #400]	; (8002a18 <soundPlay+0x43c>)
 8002886:	2140      	movs	r1, #64	; 0x40
 8002888:	430a      	orrs	r2, r1
 800288a:	615a      	str	r2, [r3, #20]
	//					GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
						addrSound = (addrSound + (bufLen >> 1));
 800288c:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <soundPlay+0x440>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	b29b      	uxth	r3, r3
 8002894:	001a      	movs	r2, r3
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	18d3      	adds	r3, r2, r3
 800289a:	613b      	str	r3, [r7, #16]

						addr[0] = addrSound & 0xFF;
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	2418      	movs	r4, #24
 80028a2:	193b      	adds	r3, r7, r4
 80028a4:	701a      	strb	r2, [r3, #0]
						addr[1] = (addrSound >> 8) & 0xFF;
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	193b      	adds	r3, r7, r4
 80028ae:	705a      	strb	r2, [r3, #1]
						addr[2] = (addrSound >> 16) & 0xFF;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	0c1b      	lsrs	r3, r3, #16
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	193b      	adds	r3, r7, r4
 80028b8:	709a      	strb	r2, [r3, #2]
						addr[3] = (addrSound >> 24) & 0xFF;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	0e1b      	lsrs	r3, r3, #24
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	193b      	adds	r3, r7, r4
 80028c2:	70da      	strb	r2, [r3, #3]

						GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 80028c4:	4b56      	ldr	r3, [pc, #344]	; (8002a20 <soundPlay+0x444>)
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	4b55      	ldr	r3, [pc, #340]	; (8002a20 <soundPlay+0x444>)
 80028ca:	4956      	ldr	r1, [pc, #344]	; (8002a24 <soundPlay+0x448>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	615a      	str	r2, [r3, #20]
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 80028d0:	232b      	movs	r3, #43	; 0x2b
 80028d2:	18f9      	adds	r1, r7, r3
 80028d4:	4854      	ldr	r0, [pc, #336]	; (8002a28 <soundPlay+0x44c>)
 80028d6:	2332      	movs	r3, #50	; 0x32
 80028d8:	2201      	movs	r2, #1
 80028da:	f006 fd29 	bl	8009330 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	1cd9      	adds	r1, r3, #3
 80028e2:	4851      	ldr	r0, [pc, #324]	; (8002a28 <soundPlay+0x44c>)
 80028e4:	2332      	movs	r3, #50	; 0x32
 80028e6:	2201      	movs	r2, #1
 80028e8:	f006 fd22 	bl	8009330 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 80028ec:	193b      	adds	r3, r7, r4
 80028ee:	1c99      	adds	r1, r3, #2
 80028f0:	484d      	ldr	r0, [pc, #308]	; (8002a28 <soundPlay+0x44c>)
 80028f2:	2332      	movs	r3, #50	; 0x32
 80028f4:	2201      	movs	r2, #1
 80028f6:	f006 fd1b 	bl	8009330 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 80028fa:	193b      	adds	r3, r7, r4
 80028fc:	1c59      	adds	r1, r3, #1
 80028fe:	484a      	ldr	r0, [pc, #296]	; (8002a28 <soundPlay+0x44c>)
 8002900:	2332      	movs	r3, #50	; 0x32
 8002902:	2201      	movs	r2, #1
 8002904:	f006 fd14 	bl	8009330 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 8002908:	1939      	adds	r1, r7, r4
 800290a:	4847      	ldr	r0, [pc, #284]	; (8002a28 <soundPlay+0x44c>)
 800290c:	2332      	movs	r3, #50	; 0x32
 800290e:	2201      	movs	r2, #1
 8002910:	f006 fd0e 	bl	8009330 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[0], (bufLen >> 1), 5000);
 8002914:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <soundPlay+0x440>)
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	085b      	lsrs	r3, r3, #1
 800291a:	b29a      	uxth	r2, r3
 800291c:	4b43      	ldr	r3, [pc, #268]	; (8002a2c <soundPlay+0x450>)
 800291e:	4944      	ldr	r1, [pc, #272]	; (8002a30 <soundPlay+0x454>)
 8002920:	4841      	ldr	r0, [pc, #260]	; (8002a28 <soundPlay+0x44c>)
 8002922:	f006 fe5d 	bl	80095e0 <HAL_SPI_Receive>
						GPIOB->ODR |= 1 << 9;	//set FLASH CS
 8002926:	4b3e      	ldr	r3, [pc, #248]	; (8002a20 <soundPlay+0x444>)
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	4b3d      	ldr	r3, [pc, #244]	; (8002a20 <soundPlay+0x444>)
 800292c:	2180      	movs	r1, #128	; 0x80
 800292e:	0089      	lsls	r1, r1, #2
 8002930:	430a      	orrs	r2, r1
 8002932:	615a      	str	r2, [r3, #20]
						half_of_buf = 1;
 8002934:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <soundPlay+0x438>)
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
					}
					if(half_of_buf == 0)
 800293a:	4b36      	ldr	r3, [pc, #216]	; (8002a14 <soundPlay+0x438>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d15c      	bne.n	80029fc <soundPlay+0x420>
					{
	//					GPIOC->ODR |= 1 << 6;	//set BF
						GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
 8002942:	4b35      	ldr	r3, [pc, #212]	; (8002a18 <soundPlay+0x43c>)
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	4b34      	ldr	r3, [pc, #208]	; (8002a18 <soundPlay+0x43c>)
 8002948:	2140      	movs	r1, #64	; 0x40
 800294a:	438a      	bics	r2, r1
 800294c:	615a      	str	r2, [r3, #20]
						addrSound = (addrSound + (bufLen >> 1));
 800294e:	4b33      	ldr	r3, [pc, #204]	; (8002a1c <soundPlay+0x440>)
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	b29b      	uxth	r3, r3
 8002956:	001a      	movs	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	18d3      	adds	r3, r2, r3
 800295c:	613b      	str	r3, [r7, #16]

						addr[0] = addrSound & 0xFF;
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	2418      	movs	r4, #24
 8002964:	193b      	adds	r3, r7, r4
 8002966:	701a      	strb	r2, [r3, #0]
						addr[1] = (addrSound >> 8) & 0xFF;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	b2da      	uxtb	r2, r3
 800296e:	193b      	adds	r3, r7, r4
 8002970:	705a      	strb	r2, [r3, #1]
						addr[2] = (addrSound >> 16) & 0xFF;
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	b2da      	uxtb	r2, r3
 8002978:	193b      	adds	r3, r7, r4
 800297a:	709a      	strb	r2, [r3, #2]
						addr[3] = (addrSound >> 24) & 0xFF;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	0e1b      	lsrs	r3, r3, #24
 8002980:	b2da      	uxtb	r2, r3
 8002982:	193b      	adds	r3, r7, r4
 8002984:	70da      	strb	r2, [r3, #3]

						GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 8002986:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <soundPlay+0x444>)
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <soundPlay+0x444>)
 800298c:	4925      	ldr	r1, [pc, #148]	; (8002a24 <soundPlay+0x448>)
 800298e:	400a      	ands	r2, r1
 8002990:	615a      	str	r2, [r3, #20]
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 8002992:	232b      	movs	r3, #43	; 0x2b
 8002994:	18f9      	adds	r1, r7, r3
 8002996:	4824      	ldr	r0, [pc, #144]	; (8002a28 <soundPlay+0x44c>)
 8002998:	2332      	movs	r3, #50	; 0x32
 800299a:	2201      	movs	r2, #1
 800299c:	f006 fcc8 	bl	8009330 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	1cd9      	adds	r1, r3, #3
 80029a4:	4820      	ldr	r0, [pc, #128]	; (8002a28 <soundPlay+0x44c>)
 80029a6:	2332      	movs	r3, #50	; 0x32
 80029a8:	2201      	movs	r2, #1
 80029aa:	f006 fcc1 	bl	8009330 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 80029ae:	193b      	adds	r3, r7, r4
 80029b0:	1c99      	adds	r1, r3, #2
 80029b2:	481d      	ldr	r0, [pc, #116]	; (8002a28 <soundPlay+0x44c>)
 80029b4:	2332      	movs	r3, #50	; 0x32
 80029b6:	2201      	movs	r2, #1
 80029b8:	f006 fcba 	bl	8009330 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 80029bc:	193b      	adds	r3, r7, r4
 80029be:	1c59      	adds	r1, r3, #1
 80029c0:	4819      	ldr	r0, [pc, #100]	; (8002a28 <soundPlay+0x44c>)
 80029c2:	2332      	movs	r3, #50	; 0x32
 80029c4:	2201      	movs	r2, #1
 80029c6:	f006 fcb3 	bl	8009330 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 80029ca:	1939      	adds	r1, r7, r4
 80029cc:	4816      	ldr	r0, [pc, #88]	; (8002a28 <soundPlay+0x44c>)
 80029ce:	2332      	movs	r3, #50	; 0x32
 80029d0:	2201      	movs	r2, #1
 80029d2:	f006 fcad 	bl	8009330 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[2048], (bufLen >> 1), 5000);
 80029d6:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <soundPlay+0x440>)
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	085b      	lsrs	r3, r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <soundPlay+0x450>)
 80029e0:	4914      	ldr	r1, [pc, #80]	; (8002a34 <soundPlay+0x458>)
 80029e2:	4811      	ldr	r0, [pc, #68]	; (8002a28 <soundPlay+0x44c>)
 80029e4:	f006 fdfc 	bl	80095e0 <HAL_SPI_Receive>
						GPIOB->ODR |= 1 << 9;	//set FLASH CS
 80029e8:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <soundPlay+0x444>)
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <soundPlay+0x444>)
 80029ee:	2180      	movs	r1, #128	; 0x80
 80029f0:	0089      	lsls	r1, r1, #2
 80029f2:	430a      	orrs	r2, r1
 80029f4:	615a      	str	r2, [r3, #20]
						half_of_buf = 1;
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <soundPlay+0x438>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
				while(curBuf <= bufCount)
 80029fc:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <soundPlay+0x45c>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <soundPlay+0x460>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d800      	bhi.n	8002a0a <soundPlay+0x42e>
 8002a08:	e736      	b.n	8002878 <soundPlay+0x29c>
					}
				}
				return;
 8002a0a:	46c0      	nop			; (mov r8, r8)
			}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b00d      	add	sp, #52	; 0x34
 8002a12:	bd90      	pop	{r4, r7, pc}
 8002a14:	200012fc 	.word	0x200012fc
 8002a18:	50000800 	.word	0x50000800
 8002a1c:	20000030 	.word	0x20000030
 8002a20:	50000400 	.word	0x50000400
 8002a24:	fffffdff 	.word	0xfffffdff
 8002a28:	20000178 	.word	0x20000178
 8002a2c:	00001388 	.word	0x00001388
 8002a30:	200002fc 	.word	0x200002fc
 8002a34:	20000afc 	.word	0x20000afc
 8002a38:	200002f4 	.word	0x200002f4
 8002a3c:	200002f8 	.word	0x200002f8

08002a40 <sound_half_transfer_callback>:
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void sound_half_transfer_callback()
		{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
			half_of_buf = 2;
 8002a44:	4b02      	ldr	r3, [pc, #8]	; (8002a50 <sound_half_transfer_callback+0x10>)
 8002a46:	2202      	movs	r2, #2
 8002a48:	701a      	strb	r2, [r3, #0]
		}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	200012fc 	.word	0x200012fc

08002a54 <sound_full_transfer_callback>:
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void sound_full_transfer_callback()
		{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
			curBuf += 1;
 8002a58:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <sound_full_transfer_callback+0x40>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <sound_full_transfer_callback+0x40>)
 8002a60:	601a      	str	r2, [r3, #0]
			if(curBuf <= bufCount)
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <sound_full_transfer_callback+0x40>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <sound_full_transfer_callback+0x44>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d80c      	bhi.n	8002a88 <sound_full_transfer_callback+0x34>
			{
				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], (bufLen >> 1));
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <sound_full_transfer_callback+0x48>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	085b      	lsrs	r3, r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	490a      	ldr	r1, [pc, #40]	; (8002aa0 <sound_full_transfer_callback+0x4c>)
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <sound_full_transfer_callback+0x50>)
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f004 ffb2 	bl	80079e4 <HAL_I2S_Transmit_DMA>
				half_of_buf = 0;
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <sound_full_transfer_callback+0x54>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				isSoundOver = 1;
			}
		}
 8002a86:	e002      	b.n	8002a8e <sound_full_transfer_callback+0x3a>
				isSoundOver = 1;
 8002a88:	4b08      	ldr	r3, [pc, #32]	; (8002aac <sound_full_transfer_callback+0x58>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
		}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	200002f4 	.word	0x200002f4
 8002a98:	200002f8 	.word	0x200002f8
 8002a9c:	20000030 	.word	0x20000030
 8002aa0:	200002fc 	.word	0x200002fc
 8002aa4:	200000e0 	.word	0x200000e0
 8002aa8:	200012fc 	.word	0x200012fc
 8002aac:	200012fd 	.word	0x200012fd

08002ab0 <setVolume>:
		//=============================================================================================
			void setVolume(uint8_t drvGain, uint8_t digGain, uint8_t spkAttn)
			{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	0004      	movs	r4, r0
 8002ab8:	0008      	movs	r0, r1
 8002aba:	0011      	movs	r1, r2
 8002abc:	1dfb      	adds	r3, r7, #7
 8002abe:	1c22      	adds	r2, r4, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	1dbb      	adds	r3, r7, #6
 8002ac4:	1c02      	adds	r2, r0, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	1d7b      	adds	r3, r7, #5
 8002aca:	1c0a      	adds	r2, r1, #0
 8002acc:	701a      	strb	r2, [r3, #0]
				I2C_SOUND_ChangePage(0x00);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7fe fdd8 	bl	8001684 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x41, digGain);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 8002ad4:	1dbb      	adds	r3, r7, #6
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	0019      	movs	r1, r3
 8002ada:	2041      	movs	r0, #65	; 0x41
 8002adc:	f7fe fdf0 	bl	80016c0 <WriteReg_I2C_SOUND>
					I2C_SOUND_ChangePage(0x01);
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f7fe fdcf 	bl	8001684 <I2C_SOUND_ChangePage>
					WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2010      	movs	r0, #16
 8002aea:	f7fe fde9 	bl	80016c0 <WriteReg_I2C_SOUND>
					WriteReg_I2C_SOUND(0x2E, spkAttn);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 8002aee:	1d7b      	adds	r3, r7, #5
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	0019      	movs	r1, r3
 8002af4:	202e      	movs	r0, #46	; 0x2e
 8002af6:	f7fe fde3 	bl	80016c0 <WriteReg_I2C_SOUND>
					WriteReg_I2C_SOUND(0x30, drvGain);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 8002afa:	1dfb      	adds	r3, r7, #7
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	0019      	movs	r1, r3
 8002b00:	2030      	movs	r0, #48	; 0x30
 8002b02:	f7fe fddd 	bl	80016c0 <WriteReg_I2C_SOUND>
			}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b003      	add	sp, #12
 8002b0c:	bd90      	pop	{r4, r7, pc}
	...

08002b10 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOB->ODR |= 1 << 9;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	4a29      	ldr	r2, [pc, #164]	; (8002bc0 <MEM_GetID+0xb0>)
 8002b1a:	7812      	ldrb	r2, [r2, #0]
 8002b1c:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002b1e:	1dfb      	adds	r3, r7, #7
 8002b20:	229e      	movs	r2, #158	; 0x9e
 8002b22:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 <<9);	//reset cs
 8002b24:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <MEM_GetID+0xb4>)
 8002b26:	695a      	ldr	r2, [r3, #20]
 8002b28:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <MEM_GetID+0xb4>)
 8002b2a:	4927      	ldr	r1, [pc, #156]	; (8002bc8 <MEM_GetID+0xb8>)
 8002b2c:	400a      	ands	r2, r1
 8002b2e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002b30:	1df9      	adds	r1, r7, #7
 8002b32:	4826      	ldr	r0, [pc, #152]	; (8002bcc <MEM_GetID+0xbc>)
 8002b34:	2332      	movs	r3, #50	; 0x32
 8002b36:	2201      	movs	r2, #1
 8002b38:	f006 fbfa 	bl	8009330 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002b3c:	23fa      	movs	r3, #250	; 0xfa
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	1d39      	adds	r1, r7, #4
 8002b42:	4822      	ldr	r0, [pc, #136]	; (8002bcc <MEM_GetID+0xbc>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	f006 fd4b 	bl	80095e0 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	001a      	movs	r2, r3
 8002b50:	4b1f      	ldr	r3, [pc, #124]	; (8002bd0 <MEM_GetID+0xc0>)
 8002b52:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002b54:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <MEM_GetID+0xc0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	021a      	lsls	r2, r3, #8
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <MEM_GetID+0xc0>)
 8002b5c:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002b5e:	23fa      	movs	r3, #250	; 0xfa
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	1d39      	adds	r1, r7, #4
 8002b64:	4819      	ldr	r0, [pc, #100]	; (8002bcc <MEM_GetID+0xbc>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	f006 fd3a 	bl	80095e0 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	001a      	movs	r2, r3
 8002b72:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <MEM_GetID+0xc0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	18d2      	adds	r2, r2, r3
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <MEM_GetID+0xc0>)
 8002b7a:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <MEM_GetID+0xc0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	021a      	lsls	r2, r3, #8
 8002b82:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <MEM_GetID+0xc0>)
 8002b84:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002b86:	23fa      	movs	r3, #250	; 0xfa
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	1d39      	adds	r1, r7, #4
 8002b8c:	480f      	ldr	r0, [pc, #60]	; (8002bcc <MEM_GetID+0xbc>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f006 fd26 	bl	80095e0 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	001a      	movs	r2, r3
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <MEM_GetID+0xc0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	18d2      	adds	r2, r2, r3
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <MEM_GetID+0xc0>)
 8002ba2:	601a      	str	r2, [r3, #0]
		GPIOB->ODR |= 1 << 9;                    			// set cs
 8002ba4:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <MEM_GetID+0xb4>)
 8002ba6:	695a      	ldr	r2, [r3, #20]
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <MEM_GetID+0xb4>)
 8002baa:	2180      	movs	r1, #128	; 0x80
 8002bac:	0089      	lsls	r1, r1, #2
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002bb2:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <MEM_GetID+0xc0>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
	}
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b002      	add	sp, #8
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	0800c98c 	.word	0x0800c98c
 8002bc4:	50000400 	.word	0x50000400
 8002bc8:	fffffdff 	.word	0xfffffdff
 8002bcc:	20000178 	.word	0x20000178
 8002bd0:	200002b0 	.word	0x200002b0

08002bd4 <cmdExecute>:
	uint16_t Scount(void){
		LIS3DHreadData();

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8002bd4:	b590      	push	{r4, r7, lr}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	0002      	movs	r2, r0
 8002bdc:	1dfb      	adds	r3, r7, #7
 8002bde:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002be0:	4b6c      	ldr	r3, [pc, #432]	; (8002d94 <cmdExecute+0x1c0>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d100      	bne.n	8002bea <cmdExecute+0x16>
 8002be8:	e0ca      	b.n	8002d80 <cmdExecute+0x1ac>
		if(soundReady==0){return;}
 8002bea:	4b6b      	ldr	r3, [pc, #428]	; (8002d98 <cmdExecute+0x1c4>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d100      	bne.n	8002bf4 <cmdExecute+0x20>
 8002bf2:	e0c7      	b.n	8002d84 <cmdExecute+0x1b0>
//		if(cmd[0]==00){return;}
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002bf4:	4b69      	ldr	r3, [pc, #420]	; (8002d9c <cmdExecute+0x1c8>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d000      	beq.n	8002bfe <cmdExecute+0x2a>
 8002bfc:	e0c4      	b.n	8002d88 <cmdExecute+0x1b4>
		USART2->ICR|=USART_ICR_ORECF;
 8002bfe:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <cmdExecute+0x1cc>)
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	4b67      	ldr	r3, [pc, #412]	; (8002da0 <cmdExecute+0x1cc>)
 8002c04:	2108      	movs	r1, #8
 8002c06:	430a      	orrs	r2, r1
 8002c08:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 8002c0a:	1dfb      	adds	r3, r7, #7
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b11      	cmp	r3, #17
 8002c10:	d113      	bne.n	8002c3a <cmdExecute+0x66>
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8002c12:	4b64      	ldr	r3, [pc, #400]	; (8002da4 <cmdExecute+0x1d0>)
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	4b63      	ldr	r3, [pc, #396]	; (8002da4 <cmdExecute+0x1d0>)
 8002c18:	2140      	movs	r1, #64	; 0x40
 8002c1a:	438a      	bics	r2, r1
 8002c1c:	615a      	str	r2, [r3, #20]
			bf4me=0x11;	//set BF flag 4 me
 8002c1e:	4b5f      	ldr	r3, [pc, #380]	; (8002d9c <cmdExecute+0x1c8>)
 8002c20:	2211      	movs	r2, #17
 8002c22:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
			weoShowFullScreen(picNum);
 8002c24:	4b60      	ldr	r3, [pc, #384]	; (8002da8 <cmdExecute+0x1d4>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7ff fabf 	bl	80021ac <weoShowFullScreen>
//			weoShowFullScreenDMA(picNum);
			USART2->ICR|=USART_ICR_ORECF;
 8002c2e:	4b5c      	ldr	r3, [pc, #368]	; (8002da0 <cmdExecute+0x1cc>)
 8002c30:	6a1a      	ldr	r2, [r3, #32]
 8002c32:	4b5b      	ldr	r3, [pc, #364]	; (8002da0 <cmdExecute+0x1cc>)
 8002c34:	2108      	movs	r1, #8
 8002c36:	430a      	orrs	r2, r1
 8002c38:	621a      	str	r2, [r3, #32]
				}
		if(cmd2Execute==0x12){
 8002c3a:	1dfb      	adds	r3, r7, #7
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b12      	cmp	r3, #18
 8002c40:	d10d      	bne.n	8002c5e <cmdExecute+0x8a>
			bf4me=0x12;	//set BF flag 4 me
 8002c42:	4b56      	ldr	r3, [pc, #344]	; (8002d9c <cmdExecute+0x1c8>)
 8002c44:	2212      	movs	r2, #18
 8002c46:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 8002c48:	4b57      	ldr	r3, [pc, #348]	; (8002da8 <cmdExecute+0x1d4>)
 8002c4a:	7818      	ldrb	r0, [r3, #0]
 8002c4c:	4b57      	ldr	r3, [pc, #348]	; (8002dac <cmdExecute+0x1d8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	b2d9      	uxtb	r1, r3
 8002c52:	4b57      	ldr	r3, [pc, #348]	; (8002db0 <cmdExecute+0x1dc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	001a      	movs	r2, r3
 8002c5a:	f7ff fb45 	bl	80022e8 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 8002c5e:	1dfb      	adds	r3, r7, #7
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b13      	cmp	r3, #19
 8002c64:	d111      	bne.n	8002c8a <cmdExecute+0xb6>
			bf4me=0x13;	//set BF flag 4 me
 8002c66:	4b4d      	ldr	r3, [pc, #308]	; (8002d9c <cmdExecute+0x1c8>)
 8002c68:	2213      	movs	r2, #19
 8002c6a:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY,strLen,fontInfo,dataASCII);
 8002c6c:	4b4f      	ldr	r3, [pc, #316]	; (8002dac <cmdExecute+0x1d8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	b2d8      	uxtb	r0, r3
 8002c72:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <cmdExecute+0x1dc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	b2d9      	uxtb	r1, r3
 8002c78:	4b4e      	ldr	r3, [pc, #312]	; (8002db4 <cmdExecute+0x1e0>)
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	4b4e      	ldr	r3, [pc, #312]	; (8002db8 <cmdExecute+0x1e4>)
 8002c7e:	781c      	ldrb	r4, [r3, #0]
 8002c80:	4b4e      	ldr	r3, [pc, #312]	; (8002dbc <cmdExecute+0x1e8>)
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	0023      	movs	r3, r4
 8002c86:	f000 f8a1 	bl	8002dcc <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b14      	cmp	r3, #20
 8002c90:	d10d      	bne.n	8002cae <cmdExecute+0xda>
//			if(soundReady!=1){return;}
			bf4me=0x14;	//set BF flag 4 me
 8002c92:	4b42      	ldr	r3, [pc, #264]	; (8002d9c <cmdExecute+0x1c8>)
 8002c94:	2214      	movs	r2, #20
 8002c96:	701a      	strb	r2, [r3, #0]
			soundPlay(soundNum);
 8002c98:	4b49      	ldr	r3, [pc, #292]	; (8002dc0 <cmdExecute+0x1ec>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff fc9d 	bl	80025dc <soundPlay>
			GPIOC->ODR |= 1 << 6;	//set BF
 8002ca2:	4b40      	ldr	r3, [pc, #256]	; (8002da4 <cmdExecute+0x1d0>)
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	4b3f      	ldr	r3, [pc, #252]	; (8002da4 <cmdExecute+0x1d0>)
 8002ca8:	2140      	movs	r1, #64	; 0x40
 8002caa:	430a      	orrs	r2, r1
 8002cac:	615a      	str	r2, [r3, #20]

		}
		if(cmd2Execute==0x15){
 8002cae:	1dfb      	adds	r3, r7, #7
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b15      	cmp	r3, #21
 8002cb4:	d153      	bne.n	8002d5e <cmdExecute+0x18a>
			bf4me=0x15;	//set BF flag 4 me
 8002cb6:	4b39      	ldr	r3, [pc, #228]	; (8002d9c <cmdExecute+0x1c8>)
 8002cb8:	2215      	movs	r2, #21
 8002cba:	701a      	strb	r2, [r3, #0]
			I2C_SOUND_ChangePage(0x01);
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	f7fe fce1 	bl	8001684 <I2C_SOUND_ChangePage>
//			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
			if(volume==0x00){
 8002cc2:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <cmdExecute+0x1f0>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <cmdExecute+0x104>
				I2C_SOUND_ChangePage(0x01);
 8002cca:	2001      	movs	r0, #1
 8002ccc:	f7fe fcda 	bl	8001684 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2E,0xFF);// mute
 8002cd0:	21ff      	movs	r1, #255	; 0xff
 8002cd2:	202e      	movs	r0, #46	; 0x2e
 8002cd4:	f7fe fcf4 	bl	80016c0 <WriteReg_I2C_SOUND>
			}
			I2C_SOUND_ChangePage(0x01);
 8002cd8:	2001      	movs	r0, #1
 8002cda:	f7fe fcd3 	bl	8001684 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x2E, volume);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8002cde:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <cmdExecute+0x1f0>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	202e      	movs	r0, #46	; 0x2e
 8002ce6:	f7fe fceb 	bl	80016c0 <WriteReg_I2C_SOUND>

			if(contrast==0x00){
 8002cea:	4b37      	ldr	r3, [pc, #220]	; (8002dc8 <cmdExecute+0x1f4>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d102      	bne.n	8002cf8 <cmdExecute+0x124>
				weoClear();
 8002cf2:	f7fe fb7d 	bl	80013f0 <weoClear>
 8002cf6:	e029      	b.n	8002d4c <cmdExecute+0x178>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 8002cf8:	23a0      	movs	r3, #160	; 0xa0
 8002cfa:	05db      	lsls	r3, r3, #23
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	23a0      	movs	r3, #160	; 0xa0
 8002d00:	05db      	lsls	r3, r3, #23
 8002d02:	2140      	movs	r1, #64	; 0x40
 8002d04:	438a      	bics	r2, r1
 8002d06:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 8002d08:	23a0      	movs	r3, #160	; 0xa0
 8002d0a:	05db      	lsls	r3, r3, #23
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	23a0      	movs	r3, #160	; 0xa0
 8002d10:	05db      	lsls	r3, r3, #23
 8002d12:	2180      	movs	r1, #128	; 0x80
 8002d14:	438a      	bics	r2, r1
 8002d16:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8002d18:	2081      	movs	r0, #129	; 0x81
 8002d1a:	f7fe fabb 	bl	8001294 <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast*0x10);
 8002d1e:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <cmdExecute+0x1f4>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7fe fab4 	bl	8001294 <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 8002d2c:	23a0      	movs	r3, #160	; 0xa0
 8002d2e:	05db      	lsls	r3, r3, #23
 8002d30:	695a      	ldr	r2, [r3, #20]
 8002d32:	23a0      	movs	r3, #160	; 0xa0
 8002d34:	05db      	lsls	r3, r3, #23
 8002d36:	2180      	movs	r1, #128	; 0x80
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8002d3c:	23a0      	movs	r3, #160	; 0xa0
 8002d3e:	05db      	lsls	r3, r3, #23
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	23a0      	movs	r3, #160	; 0xa0
 8002d44:	05db      	lsls	r3, r3, #23
 8002d46:	2140      	movs	r1, #64	; 0x40
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	615a      	str	r2, [r3, #20]
			}
//			bf4me=0x15;	//set BF flag 4 me
			cmd2Execute=0;
 8002d4c:	1dfb      	adds	r3, r7, #7
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8002d52:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <cmdExecute+0x1d0>)
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <cmdExecute+0x1d0>)
 8002d58:	2140      	movs	r1, #64	; 0x40
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	615a      	str	r2, [r3, #20]
		}
		if(cmd2Execute==0x16){
 8002d5e:	1dfb      	adds	r3, r7, #7
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b16      	cmp	r3, #22
 8002d64:	d102      	bne.n	8002d6c <cmdExecute+0x198>
			bf4me=0x16;	//set BF flag 4 me
 8002d66:	4b0d      	ldr	r3, [pc, #52]	; (8002d9c <cmdExecute+0x1c8>)
 8002d68:	2216      	movs	r2, #22
 8002d6a:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8002d6c:	1dfb      	adds	r3, r7, #7
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8002d72:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <cmdExecute+0x1cc>)
 8002d74:	6a1a      	ldr	r2, [r3, #32]
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <cmdExecute+0x1cc>)
 8002d78:	2108      	movs	r1, #8
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	621a      	str	r2, [r3, #32]
 8002d7e:	e004      	b.n	8002d8a <cmdExecute+0x1b6>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	e002      	b.n	8002d8a <cmdExecute+0x1b6>
		if(soundReady==0){return;}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	e000      	b.n	8002d8a <cmdExecute+0x1b6>
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002d88:	46c0      	nop			; (mov r8, r8)
	}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b003      	add	sp, #12
 8002d90:	bd90      	pop	{r4, r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	200002b4 	.word	0x200002b4
 8002d98:	20000032 	.word	0x20000032
 8002d9c:	200002eb 	.word	0x200002eb
 8002da0:	40004400 	.word	0x40004400
 8002da4:	50000800 	.word	0x50000800
 8002da8:	20000289 	.word	0x20000289
 8002dac:	20000290 	.word	0x20000290
 8002db0:	20000294 	.word	0x20000294
 8002db4:	2000028e 	.word	0x2000028e
 8002db8:	200002f1 	.word	0x200002f1
 8002dbc:	2000029c 	.word	0x2000029c
 8002dc0:	200002f3 	.word	0x200002f3
 8002dc4:	2000028b 	.word	0x2000028b
 8002dc8:	2000028c 	.word	0x2000028c

08002dcc <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t fontInfo,uint8_t dataASCII[]){
 8002dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dce:	46ce      	mov	lr, r9
 8002dd0:	4647      	mov	r7, r8
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b0e5      	sub	sp, #404	; 0x194
 8002dd6:	af02      	add	r7, sp, #8
 8002dd8:	0016      	movs	r6, r2
 8002dda:	469c      	mov	ip, r3
 8002ddc:	2320      	movs	r3, #32
 8002dde:	33ff      	adds	r3, #255	; 0xff
 8002de0:	2208      	movs	r2, #8
 8002de2:	189b      	adds	r3, r3, r2
 8002de4:	19da      	adds	r2, r3, r7
 8002de6:	1c03      	adds	r3, r0, #0
 8002de8:	7013      	strb	r3, [r2, #0]
 8002dea:	238f      	movs	r3, #143	; 0x8f
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2208      	movs	r2, #8
 8002df0:	189b      	adds	r3, r3, r2
 8002df2:	19da      	adds	r2, r3, r7
 8002df4:	1c0b      	adds	r3, r1, #0
 8002df6:	7013      	strb	r3, [r2, #0]
 8002df8:	221e      	movs	r2, #30
 8002dfa:	32ff      	adds	r2, #255	; 0xff
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	18d3      	adds	r3, r2, r3
 8002e00:	19da      	adds	r2, r3, r7
 8002e02:	1c33      	adds	r3, r6, #0
 8002e04:	7013      	strb	r3, [r2, #0]
 8002e06:	268e      	movs	r6, #142	; 0x8e
 8002e08:	0076      	lsls	r6, r6, #1
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	18f3      	adds	r3, r6, r3
 8002e0e:	19da      	adds	r2, r3, r7
 8002e10:	4663      	mov	r3, ip
 8002e12:	7013      	strb	r3, [r2, #0]
			uint8_t X_increment,ASCII_height,X_width,ASCII_X,decY,fontCur,contrast,contrastH,contrastL;
//			uint8_t weoBuffer1[49],weoBuffer2[49],weoBuffer[49];
			uint16_t i,j,k, symLen;
			ASCII_X=imX;
 8002e14:	235f      	movs	r3, #95	; 0x5f
 8002e16:	218c      	movs	r1, #140	; 0x8c
 8002e18:	0049      	lsls	r1, r1, #1
 8002e1a:	185a      	adds	r2, r3, r1
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	469c      	mov	ip, r3
 8002e20:	44bc      	add	ip, r7
 8002e22:	4462      	add	r2, ip
 8002e24:	2020      	movs	r0, #32
 8002e26:	30ff      	adds	r0, #255	; 0xff
 8002e28:	2308      	movs	r3, #8
 8002e2a:	18c3      	adds	r3, r0, r3
 8002e2c:	19db      	adds	r3, r3, r7
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	7013      	strb	r3, [r2, #0]

			contrastL = (fontInfo & 0xF0)>>4;
 8002e32:	205e      	movs	r0, #94	; 0x5e
 8002e34:	1842      	adds	r2, r0, r1
 8002e36:	2308      	movs	r3, #8
 8002e38:	469c      	mov	ip, r3
 8002e3a:	44bc      	add	ip, r7
 8002e3c:	4462      	add	r2, ip
 8002e3e:	2308      	movs	r3, #8
 8002e40:	18f3      	adds	r3, r6, r3
 8002e42:	19db      	adds	r3, r3, r7
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	7013      	strb	r3, [r2, #0]
			contrastH = (contrastL)<<4;
 8002e4a:	265d      	movs	r6, #93	; 0x5d
 8002e4c:	1872      	adds	r2, r6, r1
 8002e4e:	2308      	movs	r3, #8
 8002e50:	469c      	mov	ip, r3
 8002e52:	44bc      	add	ip, r7
 8002e54:	4462      	add	r2, ip
 8002e56:	1843      	adds	r3, r0, r1
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	469c      	mov	ip, r3
 8002e5e:	44bc      	add	ip, r7
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	4463      	add	r3, ip
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	7013      	strb	r3, [r2, #0]
			contrast = contrastH|contrastL;
 8002e6a:	235c      	movs	r3, #92	; 0x5c
 8002e6c:	000a      	movs	r2, r1
 8002e6e:	1859      	adds	r1, r3, r1
 8002e70:	2308      	movs	r3, #8
 8002e72:	469c      	mov	ip, r3
 8002e74:	44bc      	add	ip, r7
 8002e76:	4461      	add	r1, ip
 8002e78:	0013      	movs	r3, r2
 8002e7a:	18f2      	adds	r2, r6, r3
 8002e7c:	2608      	movs	r6, #8
 8002e7e:	46b4      	mov	ip, r6
 8002e80:	44bc      	add	ip, r7
 8002e82:	4462      	add	r2, ip
 8002e84:	001e      	movs	r6, r3
 8002e86:	18c0      	adds	r0, r0, r3
 8002e88:	2308      	movs	r3, #8
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	18c3      	adds	r3, r0, r3
 8002e8e:	7812      	ldrb	r2, [r2, #0]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	700b      	strb	r3, [r1, #0]
//			contrast = (fontInfo & 0xF0)>>4;
//			contrast=0x33;

			decY=0x01;
 8002e96:	2160      	movs	r1, #96	; 0x60
 8002e98:	0030      	movs	r0, r6
 8002e9a:	180a      	adds	r2, r1, r0
 8002e9c:	2308      	movs	r3, #8
 8002e9e:	469c      	mov	ip, r3
 8002ea0:	44bc      	add	ip, r7
 8002ea2:	4462      	add	r2, ip
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	7013      	strb	r3, [r2, #0]
			if(imY % 2 !=0){
 8002ea8:	238f      	movs	r3, #143	; 0x8f
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2208      	movs	r2, #8
 8002eae:	189b      	adds	r3, r3, r2
 8002eb0:	19db      	adds	r3, r3, r7
 8002eb2:	781a      	ldrb	r2, [r3, #0]
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <printASCIIarray+0xfe>
				decY=0x02;
 8002ebe:	180b      	adds	r3, r1, r0
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	18ba      	adds	r2, r7, r2
 8002ec4:	189a      	adds	r2, r3, r2
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x00)==0){
				fontCur=0;
 8002eca:	2161      	movs	r1, #97	; 0x61
 8002ecc:	208c      	movs	r0, #140	; 0x8c
 8002ece:	0040      	lsls	r0, r0, #1
 8002ed0:	180b      	adds	r3, r1, r0
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	18ba      	adds	r2, r7, r2
 8002ed6:	189a      	adds	r2, r3, r2
 8002ed8:	2300      	movs	r3, #0
 8002eda:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x01)==1){
 8002edc:	238e      	movs	r3, #142	; 0x8e
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	189b      	adds	r3, r3, r2
 8002ee4:	19db      	adds	r3, r3, r7
 8002ee6:	781a      	ldrb	r2, [r3, #0]
 8002ee8:	2301      	movs	r3, #1
 8002eea:	4013      	ands	r3, r2
 8002eec:	d005      	beq.n	8002efa <printASCIIarray+0x12e>
				fontCur=1;
 8002eee:	180b      	adds	r3, r1, r0
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	18ba      	adds	r2, r7, r2
 8002ef4:	189a      	adds	r2, r3, r2
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x02)==2){
 8002efa:	238e      	movs	r3, #142	; 0x8e
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	2208      	movs	r2, #8
 8002f00:	189b      	adds	r3, r3, r2
 8002f02:	19db      	adds	r3, r3, r7
 8002f04:	781a      	ldrb	r2, [r3, #0]
 8002f06:	2302      	movs	r3, #2
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d008      	beq.n	8002f1e <printASCIIarray+0x152>
				fontCur=2;
 8002f0c:	2361      	movs	r3, #97	; 0x61
 8002f0e:	228c      	movs	r2, #140	; 0x8c
 8002f10:	0052      	lsls	r2, r2, #1
 8002f12:	189b      	adds	r3, r3, r2
 8002f14:	2208      	movs	r2, #8
 8002f16:	18ba      	adds	r2, r7, r2
 8002f18:	189a      	adds	r2, r3, r2
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	7013      	strb	r3, [r2, #0]
			}
//			fontCur=2;
			if(fontCur==0){
 8002f1e:	2361      	movs	r3, #97	; 0x61
 8002f20:	268c      	movs	r6, #140	; 0x8c
 8002f22:	0076      	lsls	r6, r6, #1
 8002f24:	199b      	adds	r3, r3, r6
 8002f26:	2208      	movs	r2, #8
 8002f28:	4694      	mov	ip, r2
 8002f2a:	44bc      	add	ip, r7
 8002f2c:	4463      	add	r3, ip
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d000      	beq.n	8002f36 <printASCIIarray+0x16a>
 8002f34:	e2a7      	b.n	8003486 <printASCIIarray+0x6ba>
 8002f36:	466b      	mov	r3, sp
 8002f38:	4698      	mov	r8, r3
				symLen=49;
 8002f3a:	215a      	movs	r1, #90	; 0x5a
 8002f3c:	198b      	adds	r3, r1, r6
 8002f3e:	2208      	movs	r2, #8
 8002f40:	18ba      	adds	r2, r7, r2
 8002f42:	189a      	adds	r2, r3, r2
 8002f44:	2331      	movs	r3, #49	; 0x31
 8002f46:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8002f48:	198b      	adds	r3, r1, r6
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	4694      	mov	ip, r2
 8002f4e:	44bc      	add	ip, r7
 8002f50:	4463      	add	r3, ip
 8002f52:	881a      	ldrh	r2, [r3, #0]
 8002f54:	0013      	movs	r3, r2
 8002f56:	3b01      	subs	r3, #1
 8002f58:	21b6      	movs	r1, #182	; 0xb6
 8002f5a:	0049      	lsls	r1, r1, #1
 8002f5c:	2008      	movs	r0, #8
 8002f5e:	1809      	adds	r1, r1, r0
 8002f60:	19c9      	adds	r1, r1, r7
 8002f62:	600b      	str	r3, [r1, #0]
 8002f64:	2188      	movs	r1, #136	; 0x88
 8002f66:	2308      	movs	r3, #8
 8002f68:	18cb      	adds	r3, r1, r3
 8002f6a:	19db      	adds	r3, r3, r7
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	208c      	movs	r0, #140	; 0x8c
 8002f72:	2608      	movs	r6, #8
 8002f74:	1980      	adds	r0, r0, r6
 8002f76:	19c0      	adds	r0, r0, r7
 8002f78:	6003      	str	r3, [r0, #0]
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	18cb      	adds	r3, r1, r3
 8002f7e:	19db      	adds	r3, r3, r7
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	0003      	movs	r3, r0
 8002f86:	0f5b      	lsrs	r3, r3, #29
 8002f88:	000e      	movs	r6, r1
 8002f8a:	00f5      	lsls	r5, r6, #3
 8002f8c:	431d      	orrs	r5, r3
 8002f8e:	0003      	movs	r3, r0
 8002f90:	00dc      	lsls	r4, r3, #3
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	2308      	movs	r3, #8
 8002f96:	18cb      	adds	r3, r1, r3
 8002f98:	19db      	adds	r3, r3, r7
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	2084      	movs	r0, #132	; 0x84
 8002fa0:	2408      	movs	r4, #8
 8002fa2:	1900      	adds	r0, r0, r4
 8002fa4:	19c0      	adds	r0, r0, r7
 8002fa6:	6003      	str	r3, [r0, #0]
 8002fa8:	2308      	movs	r3, #8
 8002faa:	18cb      	adds	r3, r1, r3
 8002fac:	19db      	adds	r3, r3, r7
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	6859      	ldr	r1, [r3, #4]
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	0f5b      	lsrs	r3, r3, #29
 8002fb6:	000d      	movs	r5, r1
 8002fb8:	00ed      	lsls	r5, r5, #3
 8002fba:	248a      	movs	r4, #138	; 0x8a
 8002fbc:	0064      	lsls	r4, r4, #1
 8002fbe:	2608      	movs	r6, #8
 8002fc0:	19a6      	adds	r6, r4, r6
 8002fc2:	19f6      	adds	r6, r6, r7
 8002fc4:	6035      	str	r5, [r6, #0]
 8002fc6:	2508      	movs	r5, #8
 8002fc8:	1965      	adds	r5, r4, r5
 8002fca:	19ed      	adds	r5, r5, r7
 8002fcc:	682d      	ldr	r5, [r5, #0]
 8002fce:	431d      	orrs	r5, r3
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	18e3      	adds	r3, r4, r3
 8002fd4:	19db      	adds	r3, r3, r7
 8002fd6:	601d      	str	r5, [r3, #0]
 8002fd8:	0003      	movs	r3, r0
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	2188      	movs	r1, #136	; 0x88
 8002fde:	0049      	lsls	r1, r1, #1
 8002fe0:	2008      	movs	r0, #8
 8002fe2:	1809      	adds	r1, r1, r0
 8002fe4:	19c9      	adds	r1, r1, r7
 8002fe6:	600b      	str	r3, [r1, #0]
 8002fe8:	0013      	movs	r3, r2
 8002fea:	3307      	adds	r3, #7
 8002fec:	08db      	lsrs	r3, r3, #3
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	466a      	mov	r2, sp
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	469d      	mov	sp, r3
 8002ff6:	ab02      	add	r3, sp, #8
 8002ff8:	3300      	adds	r3, #0
 8002ffa:	22b4      	movs	r2, #180	; 0xb4
 8002ffc:	0052      	lsls	r2, r2, #1
 8002ffe:	2108      	movs	r1, #8
 8003000:	1852      	adds	r2, r2, r1
 8003002:	19d2      	adds	r2, r2, r7
 8003004:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8003006:	245a      	movs	r4, #90	; 0x5a
 8003008:	2390      	movs	r3, #144	; 0x90
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	601c      	str	r4, [r3, #0]
 8003010:	268c      	movs	r6, #140	; 0x8c
 8003012:	0076      	lsls	r6, r6, #1
 8003014:	19a3      	adds	r3, r4, r6
 8003016:	2208      	movs	r2, #8
 8003018:	4694      	mov	ip, r2
 800301a:	44bc      	add	ip, r7
 800301c:	4463      	add	r3, ip
 800301e:	881a      	ldrh	r2, [r3, #0]
 8003020:	0013      	movs	r3, r2
 8003022:	3b01      	subs	r3, #1
 8003024:	21b2      	movs	r1, #178	; 0xb2
 8003026:	0049      	lsls	r1, r1, #1
 8003028:	2008      	movs	r0, #8
 800302a:	1809      	adds	r1, r1, r0
 800302c:	19c9      	adds	r1, r1, r7
 800302e:	600b      	str	r3, [r1, #0]
 8003030:	2380      	movs	r3, #128	; 0x80
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	2300      	movs	r3, #0
 8003038:	2184      	movs	r1, #132	; 0x84
 800303a:	1879      	adds	r1, r7, r1
 800303c:	600b      	str	r3, [r1, #0]
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	6859      	ldr	r1, [r3, #4]
 8003046:	0003      	movs	r3, r0
 8003048:	0f5b      	lsrs	r3, r3, #29
 800304a:	469c      	mov	ip, r3
 800304c:	000d      	movs	r5, r1
 800304e:	00ed      	lsls	r5, r5, #3
 8003050:	2486      	movs	r4, #134	; 0x86
 8003052:	0064      	lsls	r4, r4, #1
 8003054:	2308      	movs	r3, #8
 8003056:	18e4      	adds	r4, r4, r3
 8003058:	19e4      	adds	r4, r4, r7
 800305a:	6025      	str	r5, [r4, #0]
 800305c:	2586      	movs	r5, #134	; 0x86
 800305e:	006d      	lsls	r5, r5, #1
 8003060:	2308      	movs	r3, #8
 8003062:	18eb      	adds	r3, r5, r3
 8003064:	19dc      	adds	r4, r3, r7
 8003066:	6825      	ldr	r5, [r4, #0]
 8003068:	4663      	mov	r3, ip
 800306a:	431d      	orrs	r5, r3
 800306c:	2386      	movs	r3, #134	; 0x86
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	2408      	movs	r4, #8
 8003072:	191b      	adds	r3, r3, r4
 8003074:	19db      	adds	r3, r3, r7
 8003076:	601d      	str	r5, [r3, #0]
 8003078:	0003      	movs	r3, r0
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	2184      	movs	r1, #132	; 0x84
 800307e:	0049      	lsls	r1, r1, #1
 8003080:	2008      	movs	r0, #8
 8003082:	1809      	adds	r1, r1, r0
 8003084:	19c9      	adds	r1, r1, r7
 8003086:	600b      	str	r3, [r1, #0]
 8003088:	67ba      	str	r2, [r7, #120]	; 0x78
 800308a:	2300      	movs	r3, #0
 800308c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800308e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8003090:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003092:	0003      	movs	r3, r0
 8003094:	0f5b      	lsrs	r3, r3, #29
 8003096:	000d      	movs	r5, r1
 8003098:	00ed      	lsls	r5, r5, #3
 800309a:	2486      	movs	r4, #134	; 0x86
 800309c:	0064      	lsls	r4, r4, #1
 800309e:	193c      	adds	r4, r7, r4
 80030a0:	6025      	str	r5, [r4, #0]
 80030a2:	2486      	movs	r4, #134	; 0x86
 80030a4:	0064      	lsls	r4, r4, #1
 80030a6:	193c      	adds	r4, r7, r4
 80030a8:	6825      	ldr	r5, [r4, #0]
 80030aa:	431d      	orrs	r5, r3
 80030ac:	2386      	movs	r3, #134	; 0x86
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	601d      	str	r5, [r3, #0]
 80030b4:	0003      	movs	r3, r0
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	2184      	movs	r1, #132	; 0x84
 80030ba:	0049      	lsls	r1, r1, #1
 80030bc:	1879      	adds	r1, r7, r1
 80030be:	600b      	str	r3, [r1, #0]
 80030c0:	0013      	movs	r3, r2
 80030c2:	3307      	adds	r3, #7
 80030c4:	08db      	lsrs	r3, r3, #3
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	466a      	mov	r2, sp
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	469d      	mov	sp, r3
 80030ce:	ab02      	add	r3, sp, #8
 80030d0:	3300      	adds	r3, #0
 80030d2:	22b0      	movs	r2, #176	; 0xb0
 80030d4:	0052      	lsls	r2, r2, #1
 80030d6:	2108      	movs	r1, #8
 80030d8:	1852      	adds	r2, r2, r1
 80030da:	19d2      	adds	r2, r2, r7
 80030dc:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 80030de:	2390      	movs	r3, #144	; 0x90
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	18fb      	adds	r3, r7, r3
 80030e4:	681c      	ldr	r4, [r3, #0]
 80030e6:	0035      	movs	r5, r6
 80030e8:	1963      	adds	r3, r4, r5
 80030ea:	2208      	movs	r2, #8
 80030ec:	4694      	mov	ip, r2
 80030ee:	44bc      	add	ip, r7
 80030f0:	4463      	add	r3, ip
 80030f2:	881a      	ldrh	r2, [r3, #0]
 80030f4:	0013      	movs	r3, r2
 80030f6:	3b01      	subs	r3, #1
 80030f8:	21ae      	movs	r1, #174	; 0xae
 80030fa:	0049      	lsls	r1, r1, #1
 80030fc:	2008      	movs	r0, #8
 80030fe:	1809      	adds	r1, r1, r0
 8003100:	19c9      	adds	r1, r1, r7
 8003102:	600b      	str	r3, [r1, #0]
 8003104:	673a      	str	r2, [r7, #112]	; 0x70
 8003106:	2300      	movs	r3, #0
 8003108:	677b      	str	r3, [r7, #116]	; 0x74
 800310a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800310c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800310e:	0003      	movs	r3, r0
 8003110:	0f5b      	lsrs	r3, r3, #29
 8003112:	000c      	movs	r4, r1
 8003114:	00e4      	lsls	r4, r4, #3
 8003116:	26fc      	movs	r6, #252	; 0xfc
 8003118:	2508      	movs	r5, #8
 800311a:	1975      	adds	r5, r6, r5
 800311c:	19ed      	adds	r5, r5, r7
 800311e:	602c      	str	r4, [r5, #0]
 8003120:	2408      	movs	r4, #8
 8003122:	1934      	adds	r4, r6, r4
 8003124:	19e4      	adds	r4, r4, r7
 8003126:	6824      	ldr	r4, [r4, #0]
 8003128:	431c      	orrs	r4, r3
 800312a:	2308      	movs	r3, #8
 800312c:	18f3      	adds	r3, r6, r3
 800312e:	19db      	adds	r3, r3, r7
 8003130:	601c      	str	r4, [r3, #0]
 8003132:	0003      	movs	r3, r0
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	21f8      	movs	r1, #248	; 0xf8
 8003138:	2008      	movs	r0, #8
 800313a:	1809      	adds	r1, r1, r0
 800313c:	19c9      	adds	r1, r1, r7
 800313e:	600b      	str	r3, [r1, #0]
 8003140:	66ba      	str	r2, [r7, #104]	; 0x68
 8003142:	2300      	movs	r3, #0
 8003144:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003146:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003148:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800314a:	0003      	movs	r3, r0
 800314c:	0f5b      	lsrs	r3, r3, #29
 800314e:	000c      	movs	r4, r1
 8003150:	00e4      	lsls	r4, r4, #3
 8003152:	26f4      	movs	r6, #244	; 0xf4
 8003154:	2508      	movs	r5, #8
 8003156:	1975      	adds	r5, r6, r5
 8003158:	19ed      	adds	r5, r5, r7
 800315a:	602c      	str	r4, [r5, #0]
 800315c:	2408      	movs	r4, #8
 800315e:	1934      	adds	r4, r6, r4
 8003160:	19e4      	adds	r4, r4, r7
 8003162:	6824      	ldr	r4, [r4, #0]
 8003164:	431c      	orrs	r4, r3
 8003166:	2308      	movs	r3, #8
 8003168:	18f3      	adds	r3, r6, r3
 800316a:	19db      	adds	r3, r3, r7
 800316c:	601c      	str	r4, [r3, #0]
 800316e:	0003      	movs	r3, r0
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	21f0      	movs	r1, #240	; 0xf0
 8003174:	2008      	movs	r0, #8
 8003176:	1809      	adds	r1, r1, r0
 8003178:	19c9      	adds	r1, r1, r7
 800317a:	600b      	str	r3, [r1, #0]
 800317c:	0013      	movs	r3, r2
 800317e:	3307      	adds	r3, #7
 8003180:	08db      	lsrs	r3, r3, #3
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	466a      	mov	r2, sp
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	469d      	mov	sp, r3
 800318a:	ab02      	add	r3, sp, #8
 800318c:	3300      	adds	r3, #0
 800318e:	22ac      	movs	r2, #172	; 0xac
 8003190:	0052      	lsls	r2, r2, #1
 8003192:	2108      	movs	r1, #8
 8003194:	1852      	adds	r2, r2, r1
 8003196:	19d2      	adds	r2, r2, r7
 8003198:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 800319a:	233f      	movs	r3, #63	; 0x3f
 800319c:	258c      	movs	r5, #140	; 0x8c
 800319e:	006d      	lsls	r5, r5, #1
 80031a0:	195b      	adds	r3, r3, r5
 80031a2:	2208      	movs	r2, #8
 80031a4:	18ba      	adds	r2, r7, r2
 80031a6:	189a      	adds	r2, r3, r2
 80031a8:	2307      	movs	r3, #7
 80031aa:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x0E;
 80031ac:	233e      	movs	r3, #62	; 0x3e
 80031ae:	195b      	adds	r3, r3, r5
 80031b0:	2208      	movs	r2, #8
 80031b2:	18ba      	adds	r2, r7, r2
 80031b4:	189a      	adds	r2, r3, r2
 80031b6:	230e      	movs	r3, #14
 80031b8:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 80031ba:	2362      	movs	r3, #98	; 0x62
 80031bc:	195b      	adds	r3, r3, r5
 80031be:	2208      	movs	r2, #8
 80031c0:	18ba      	adds	r2, r7, r2
 80031c2:	189a      	adds	r2, r3, r2
 80031c4:	2300      	movs	r3, #0
 80031c6:	8013      	strh	r3, [r2, #0]
 80031c8:	e110      	b.n	80033ec <printASCIIarray+0x620>
					for(j=0;j<symLen;j++){
 80031ca:	2364      	movs	r3, #100	; 0x64
 80031cc:	228c      	movs	r2, #140	; 0x8c
 80031ce:	0052      	lsls	r2, r2, #1
 80031d0:	189b      	adds	r3, r3, r2
 80031d2:	2208      	movs	r2, #8
 80031d4:	18ba      	adds	r2, r7, r2
 80031d6:	189a      	adds	r2, r3, r2
 80031d8:	2300      	movs	r3, #0
 80031da:	8013      	strh	r3, [r2, #0]
 80031dc:	e042      	b.n	8003264 <printASCIIarray+0x498>
						weoBuffer[j]=F1[dataASCII[i]][j];
 80031de:	2362      	movs	r3, #98	; 0x62
 80031e0:	218c      	movs	r1, #140	; 0x8c
 80031e2:	0049      	lsls	r1, r1, #1
 80031e4:	185b      	adds	r3, r3, r1
 80031e6:	2208      	movs	r2, #8
 80031e8:	4694      	mov	ip, r2
 80031ea:	44bc      	add	ip, r7
 80031ec:	4463      	add	r3, ip
 80031ee:	881a      	ldrh	r2, [r3, #0]
 80031f0:	2380      	movs	r3, #128	; 0x80
 80031f2:	185b      	adds	r3, r3, r1
 80031f4:	2008      	movs	r0, #8
 80031f6:	4684      	mov	ip, r0
 80031f8:	2008      	movs	r0, #8
 80031fa:	4681      	mov	r9, r0
 80031fc:	44b9      	add	r9, r7
 80031fe:	44cc      	add	ip, r9
 8003200:	4463      	add	r3, ip
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	189b      	adds	r3, r3, r2
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	001d      	movs	r5, r3
 800320a:	2264      	movs	r2, #100	; 0x64
 800320c:	1853      	adds	r3, r2, r1
 800320e:	2008      	movs	r0, #8
 8003210:	4684      	mov	ip, r0
 8003212:	44bc      	add	ip, r7
 8003214:	4463      	add	r3, ip
 8003216:	8818      	ldrh	r0, [r3, #0]
 8003218:	0016      	movs	r6, r2
 800321a:	1853      	adds	r3, r2, r1
 800321c:	2208      	movs	r2, #8
 800321e:	4694      	mov	ip, r2
 8003220:	44bc      	add	ip, r7
 8003222:	4463      	add	r3, ip
 8003224:	881c      	ldrh	r4, [r3, #0]
 8003226:	497e      	ldr	r1, [pc, #504]	; (8003420 <printASCIIarray+0x654>)
 8003228:	002a      	movs	r2, r5
 800322a:	00d2      	lsls	r2, r2, #3
 800322c:	1b52      	subs	r2, r2, r5
 800322e:	00d3      	lsls	r3, r2, #3
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	18cb      	adds	r3, r1, r3
 8003234:	5c1b      	ldrb	r3, [r3, r0]
 8003236:	22b4      	movs	r2, #180	; 0xb4
 8003238:	0052      	lsls	r2, r2, #1
 800323a:	2108      	movs	r1, #8
 800323c:	1852      	adds	r2, r2, r1
 800323e:	19d2      	adds	r2, r2, r7
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 8003244:	0032      	movs	r2, r6
 8003246:	218c      	movs	r1, #140	; 0x8c
 8003248:	0049      	lsls	r1, r1, #1
 800324a:	1853      	adds	r3, r2, r1
 800324c:	2008      	movs	r0, #8
 800324e:	4684      	mov	ip, r0
 8003250:	44bc      	add	ip, r7
 8003252:	4463      	add	r3, ip
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	1852      	adds	r2, r2, r1
 8003258:	2108      	movs	r1, #8
 800325a:	468c      	mov	ip, r1
 800325c:	44bc      	add	ip, r7
 800325e:	4462      	add	r2, ip
 8003260:	3301      	adds	r3, #1
 8003262:	8013      	strh	r3, [r2, #0]
 8003264:	2364      	movs	r3, #100	; 0x64
 8003266:	218c      	movs	r1, #140	; 0x8c
 8003268:	0049      	lsls	r1, r1, #1
 800326a:	185b      	adds	r3, r3, r1
 800326c:	2208      	movs	r2, #8
 800326e:	18ba      	adds	r2, r7, r2
 8003270:	189a      	adds	r2, r3, r2
 8003272:	235a      	movs	r3, #90	; 0x5a
 8003274:	185b      	adds	r3, r3, r1
 8003276:	2008      	movs	r0, #8
 8003278:	4684      	mov	ip, r0
 800327a:	44bc      	add	ip, r7
 800327c:	4463      	add	r3, ip
 800327e:	8812      	ldrh	r2, [r2, #0]
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d3ab      	bcc.n	80031de <printASCIIarray+0x412>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 8003286:	2366      	movs	r3, #102	; 0x66
 8003288:	185b      	adds	r3, r3, r1
 800328a:	2208      	movs	r2, #8
 800328c:	18ba      	adds	r2, r7, r2
 800328e:	189a      	adds	r2, r3, r2
 8003290:	2300      	movs	r3, #0
 8003292:	8013      	strh	r3, [r2, #0]
 8003294:	e030      	b.n	80032f8 <printASCIIarray+0x52c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 8003296:	2066      	movs	r0, #102	; 0x66
 8003298:	248c      	movs	r4, #140	; 0x8c
 800329a:	0064      	lsls	r4, r4, #1
 800329c:	1903      	adds	r3, r0, r4
 800329e:	2208      	movs	r2, #8
 80032a0:	4694      	mov	ip, r2
 80032a2:	44bc      	add	ip, r7
 80032a4:	4463      	add	r3, ip
 80032a6:	881a      	ldrh	r2, [r3, #0]
 80032a8:	25b4      	movs	r5, #180	; 0xb4
 80032aa:	006d      	lsls	r5, r5, #1
 80032ac:	2308      	movs	r3, #8
 80032ae:	18eb      	adds	r3, r5, r3
 80032b0:	19db      	adds	r3, r3, r7
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	5c9a      	ldrb	r2, [r3, r2]
 80032b6:	1903      	adds	r3, r0, r4
 80032b8:	2108      	movs	r1, #8
 80032ba:	468c      	mov	ip, r1
 80032bc:	44bc      	add	ip, r7
 80032be:	4463      	add	r3, ip
 80032c0:	8819      	ldrh	r1, [r3, #0]
 80032c2:	235c      	movs	r3, #92	; 0x5c
 80032c4:	191b      	adds	r3, r3, r4
 80032c6:	2608      	movs	r6, #8
 80032c8:	46b4      	mov	ip, r6
 80032ca:	44bc      	add	ip, r7
 80032cc:	4463      	add	r3, ip
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	4013      	ands	r3, r2
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2208      	movs	r2, #8
 80032d6:	18aa      	adds	r2, r5, r2
 80032d8:	19d2      	adds	r2, r2, r7
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 80032de:	1903      	adds	r3, r0, r4
 80032e0:	2208      	movs	r2, #8
 80032e2:	4694      	mov	ip, r2
 80032e4:	44bc      	add	ip, r7
 80032e6:	4463      	add	r3, ip
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	1902      	adds	r2, r0, r4
 80032ec:	2108      	movs	r1, #8
 80032ee:	468c      	mov	ip, r1
 80032f0:	44bc      	add	ip, r7
 80032f2:	4462      	add	r2, ip
 80032f4:	3301      	adds	r3, #1
 80032f6:	8013      	strh	r3, [r2, #0]
 80032f8:	2366      	movs	r3, #102	; 0x66
 80032fa:	258c      	movs	r5, #140	; 0x8c
 80032fc:	006d      	lsls	r5, r5, #1
 80032fe:	195b      	adds	r3, r3, r5
 8003300:	2208      	movs	r2, #8
 8003302:	18ba      	adds	r2, r7, r2
 8003304:	189a      	adds	r2, r3, r2
 8003306:	235a      	movs	r3, #90	; 0x5a
 8003308:	195b      	adds	r3, r3, r5
 800330a:	2108      	movs	r1, #8
 800330c:	468c      	mov	ip, r1
 800330e:	44bc      	add	ip, r7
 8003310:	4463      	add	r3, ip
 8003312:	8812      	ldrh	r2, [r2, #0]
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d3bd      	bcc.n	8003296 <printASCIIarray+0x4ca>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 800331a:	205f      	movs	r0, #95	; 0x5f
 800331c:	1943      	adds	r3, r0, r5
 800331e:	2208      	movs	r2, #8
 8003320:	18ba      	adds	r2, r7, r2
 8003322:	189a      	adds	r2, r3, r2
 8003324:	233f      	movs	r3, #63	; 0x3f
 8003326:	001e      	movs	r6, r3
 8003328:	195b      	adds	r3, r3, r5
 800332a:	2108      	movs	r1, #8
 800332c:	468c      	mov	ip, r1
 800332e:	44bc      	add	ip, r7
 8003330:	4463      	add	r3, ip
 8003332:	7812      	ldrb	r2, [r2, #0]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	18d3      	adds	r3, r2, r3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	3b01      	subs	r3, #1
 800333c:	b2dc      	uxtb	r4, r3
 800333e:	218f      	movs	r1, #143	; 0x8f
 8003340:	0049      	lsls	r1, r1, #1
 8003342:	2308      	movs	r3, #8
 8003344:	18cb      	adds	r3, r1, r3
 8003346:	19da      	adds	r2, r3, r7
 8003348:	213e      	movs	r1, #62	; 0x3e
 800334a:	194b      	adds	r3, r1, r5
 800334c:	2108      	movs	r1, #8
 800334e:	468c      	mov	ip, r1
 8003350:	44bc      	add	ip, r7
 8003352:	4463      	add	r3, ip
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	18d3      	adds	r3, r2, r3
 800335a:	b2da      	uxtb	r2, r3
 800335c:	2160      	movs	r1, #96	; 0x60
 800335e:	194b      	adds	r3, r1, r5
 8003360:	2108      	movs	r1, #8
 8003362:	468c      	mov	ip, r1
 8003364:	44bc      	add	ip, r7
 8003366:	4463      	add	r3, ip
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	4699      	mov	r9, r3
 8003370:	218f      	movs	r1, #143	; 0x8f
 8003372:	0049      	lsls	r1, r1, #1
 8003374:	2308      	movs	r3, #8
 8003376:	18cb      	adds	r3, r1, r3
 8003378:	19db      	adds	r3, r3, r7
 800337a:	7819      	ldrb	r1, [r3, #0]
 800337c:	0005      	movs	r5, r0
 800337e:	238c      	movs	r3, #140	; 0x8c
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	18c3      	adds	r3, r0, r3
 8003384:	2208      	movs	r2, #8
 8003386:	4694      	mov	ip, r2
 8003388:	44bc      	add	ip, r7
 800338a:	4463      	add	r3, ip
 800338c:	7818      	ldrb	r0, [r3, #0]
 800338e:	23b4      	movs	r3, #180	; 0xb4
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	2208      	movs	r2, #8
 8003394:	189b      	adds	r3, r3, r2
 8003396:	19db      	adds	r3, r3, r7
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	23ff      	movs	r3, #255	; 0xff
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	464b      	mov	r3, r9
 80033a2:	0022      	movs	r2, r4
 80033a4:	f7fe f888 	bl	80014b8 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 80033a8:	208c      	movs	r0, #140	; 0x8c
 80033aa:	0040      	lsls	r0, r0, #1
 80033ac:	182b      	adds	r3, r5, r0
 80033ae:	2208      	movs	r2, #8
 80033b0:	18ba      	adds	r2, r7, r2
 80033b2:	1899      	adds	r1, r3, r2
 80033b4:	182b      	adds	r3, r5, r0
 80033b6:	2208      	movs	r2, #8
 80033b8:	18ba      	adds	r2, r7, r2
 80033ba:	189a      	adds	r2, r3, r2
 80033bc:	0033      	movs	r3, r6
 80033be:	181b      	adds	r3, r3, r0
 80033c0:	2408      	movs	r4, #8
 80033c2:	46a4      	mov	ip, r4
 80033c4:	44bc      	add	ip, r7
 80033c6:	4463      	add	r3, ip
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	18d3      	adds	r3, r2, r3
 80033ce:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 80033d0:	2262      	movs	r2, #98	; 0x62
 80033d2:	1813      	adds	r3, r2, r0
 80033d4:	2108      	movs	r1, #8
 80033d6:	468c      	mov	ip, r1
 80033d8:	44bc      	add	ip, r7
 80033da:	4463      	add	r3, ip
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	1812      	adds	r2, r2, r0
 80033e0:	2108      	movs	r1, #8
 80033e2:	468c      	mov	ip, r1
 80033e4:	44bc      	add	ip, r7
 80033e6:	4462      	add	r2, ip
 80033e8:	3301      	adds	r3, #1
 80033ea:	8013      	strh	r3, [r2, #0]
 80033ec:	231e      	movs	r3, #30
 80033ee:	33ff      	adds	r3, #255	; 0xff
 80033f0:	2208      	movs	r2, #8
 80033f2:	189b      	adds	r3, r3, r2
 80033f4:	19db      	adds	r3, r3, r7
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	2162      	movs	r1, #98	; 0x62
 80033fc:	208c      	movs	r0, #140	; 0x8c
 80033fe:	0040      	lsls	r0, r0, #1
 8003400:	180b      	adds	r3, r1, r0
 8003402:	2408      	movs	r4, #8
 8003404:	46a4      	mov	ip, r4
 8003406:	44bc      	add	ip, r7
 8003408:	4463      	add	r3, ip
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	4293      	cmp	r3, r2
 800340e:	d200      	bcs.n	8003412 <printASCIIarray+0x646>
 8003410:	e6db      	b.n	80031ca <printASCIIarray+0x3fe>
				}
				for(i=0;i<symLen;i++){
 8003412:	180b      	adds	r3, r1, r0
 8003414:	2208      	movs	r2, #8
 8003416:	18ba      	adds	r2, r7, r2
 8003418:	189a      	adds	r2, r3, r2
 800341a:	2300      	movs	r3, #0
 800341c:	8013      	strh	r3, [r2, #0]
 800341e:	e020      	b.n	8003462 <printASCIIarray+0x696>
 8003420:	0800c990 	.word	0x0800c990
									weoBuffer[j]=0x00;
 8003424:	2364      	movs	r3, #100	; 0x64
 8003426:	208c      	movs	r0, #140	; 0x8c
 8003428:	0040      	lsls	r0, r0, #1
 800342a:	181b      	adds	r3, r3, r0
 800342c:	2208      	movs	r2, #8
 800342e:	4694      	mov	ip, r2
 8003430:	44bc      	add	ip, r7
 8003432:	4463      	add	r3, ip
 8003434:	8819      	ldrh	r1, [r3, #0]
 8003436:	23b4      	movs	r3, #180	; 0xb4
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	2208      	movs	r2, #8
 800343c:	189b      	adds	r3, r3, r2
 800343e:	19db      	adds	r3, r3, r7
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	2300      	movs	r3, #0
 8003444:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 8003446:	2262      	movs	r2, #98	; 0x62
 8003448:	1813      	adds	r3, r2, r0
 800344a:	2108      	movs	r1, #8
 800344c:	468c      	mov	ip, r1
 800344e:	44bc      	add	ip, r7
 8003450:	4463      	add	r3, ip
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	1812      	adds	r2, r2, r0
 8003456:	2108      	movs	r1, #8
 8003458:	468c      	mov	ip, r1
 800345a:	44bc      	add	ip, r7
 800345c:	4462      	add	r2, ip
 800345e:	3301      	adds	r3, #1
 8003460:	8013      	strh	r3, [r2, #0]
 8003462:	2362      	movs	r3, #98	; 0x62
 8003464:	218c      	movs	r1, #140	; 0x8c
 8003466:	0049      	lsls	r1, r1, #1
 8003468:	185b      	adds	r3, r3, r1
 800346a:	2208      	movs	r2, #8
 800346c:	18ba      	adds	r2, r7, r2
 800346e:	189a      	adds	r2, r3, r2
 8003470:	235a      	movs	r3, #90	; 0x5a
 8003472:	185b      	adds	r3, r3, r1
 8003474:	2108      	movs	r1, #8
 8003476:	468c      	mov	ip, r1
 8003478:	44bc      	add	ip, r7
 800347a:	4463      	add	r3, ip
 800347c:	8812      	ldrh	r2, [r2, #0]
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d3cf      	bcc.n	8003424 <printASCIIarray+0x658>
 8003484:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==1){
 8003486:	2361      	movs	r3, #97	; 0x61
 8003488:	228c      	movs	r2, #140	; 0x8c
 800348a:	0052      	lsls	r2, r2, #1
 800348c:	189b      	adds	r3, r3, r2
 800348e:	2108      	movs	r1, #8
 8003490:	468c      	mov	ip, r1
 8003492:	44bc      	add	ip, r7
 8003494:	4463      	add	r3, ip
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d000      	beq.n	800349e <printASCIIarray+0x6d2>
 800349c:	e29d      	b.n	80039da <printASCIIarray+0xc0e>
 800349e:	466b      	mov	r3, sp
 80034a0:	4698      	mov	r8, r3
				symLen=99;
 80034a2:	245a      	movs	r4, #90	; 0x5a
 80034a4:	0015      	movs	r5, r2
 80034a6:	18a3      	adds	r3, r4, r2
 80034a8:	2208      	movs	r2, #8
 80034aa:	18ba      	adds	r2, r7, r2
 80034ac:	189a      	adds	r2, r3, r2
 80034ae:	2363      	movs	r3, #99	; 0x63
 80034b0:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 80034b2:	2390      	movs	r3, #144	; 0x90
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	601c      	str	r4, [r3, #0]
 80034ba:	1963      	adds	r3, r4, r5
 80034bc:	2208      	movs	r2, #8
 80034be:	4694      	mov	ip, r2
 80034c0:	44bc      	add	ip, r7
 80034c2:	4463      	add	r3, ip
 80034c4:	881a      	ldrh	r2, [r3, #0]
 80034c6:	0013      	movs	r3, r2
 80034c8:	3b01      	subs	r3, #1
 80034ca:	21a8      	movs	r1, #168	; 0xa8
 80034cc:	0049      	lsls	r1, r1, #1
 80034ce:	2008      	movs	r0, #8
 80034d0:	1809      	adds	r1, r1, r0
 80034d2:	19c9      	adds	r1, r1, r7
 80034d4:	600b      	str	r3, [r1, #0]
 80034d6:	663a      	str	r2, [r7, #96]	; 0x60
 80034d8:	2300      	movs	r3, #0
 80034da:	667b      	str	r3, [r7, #100]	; 0x64
 80034dc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80034de:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80034e0:	0003      	movs	r3, r0
 80034e2:	0f5b      	lsrs	r3, r3, #29
 80034e4:	000d      	movs	r5, r1
 80034e6:	00ed      	lsls	r5, r5, #3
 80034e8:	26ec      	movs	r6, #236	; 0xec
 80034ea:	2408      	movs	r4, #8
 80034ec:	1934      	adds	r4, r6, r4
 80034ee:	19e4      	adds	r4, r4, r7
 80034f0:	6025      	str	r5, [r4, #0]
 80034f2:	2408      	movs	r4, #8
 80034f4:	1934      	adds	r4, r6, r4
 80034f6:	19e4      	adds	r4, r4, r7
 80034f8:	6825      	ldr	r5, [r4, #0]
 80034fa:	431d      	orrs	r5, r3
 80034fc:	2308      	movs	r3, #8
 80034fe:	18f3      	adds	r3, r6, r3
 8003500:	19db      	adds	r3, r3, r7
 8003502:	601d      	str	r5, [r3, #0]
 8003504:	0003      	movs	r3, r0
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	21e8      	movs	r1, #232	; 0xe8
 800350a:	2008      	movs	r0, #8
 800350c:	1809      	adds	r1, r1, r0
 800350e:	19c9      	adds	r1, r1, r7
 8003510:	600b      	str	r3, [r1, #0]
 8003512:	65ba      	str	r2, [r7, #88]	; 0x58
 8003514:	2300      	movs	r3, #0
 8003516:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003518:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800351a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800351c:	0003      	movs	r3, r0
 800351e:	0f5b      	lsrs	r3, r3, #29
 8003520:	000d      	movs	r5, r1
 8003522:	00ed      	lsls	r5, r5, #3
 8003524:	26e4      	movs	r6, #228	; 0xe4
 8003526:	2408      	movs	r4, #8
 8003528:	1934      	adds	r4, r6, r4
 800352a:	19e4      	adds	r4, r4, r7
 800352c:	6025      	str	r5, [r4, #0]
 800352e:	2408      	movs	r4, #8
 8003530:	1934      	adds	r4, r6, r4
 8003532:	19e5      	adds	r5, r4, r7
 8003534:	682d      	ldr	r5, [r5, #0]
 8003536:	431d      	orrs	r5, r3
 8003538:	2308      	movs	r3, #8
 800353a:	18f3      	adds	r3, r6, r3
 800353c:	19db      	adds	r3, r3, r7
 800353e:	601d      	str	r5, [r3, #0]
 8003540:	0003      	movs	r3, r0
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	21e0      	movs	r1, #224	; 0xe0
 8003546:	2008      	movs	r0, #8
 8003548:	1809      	adds	r1, r1, r0
 800354a:	19c9      	adds	r1, r1, r7
 800354c:	600b      	str	r3, [r1, #0]
 800354e:	0013      	movs	r3, r2
 8003550:	3307      	adds	r3, #7
 8003552:	08db      	lsrs	r3, r3, #3
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	466a      	mov	r2, sp
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	469d      	mov	sp, r3
 800355c:	ab02      	add	r3, sp, #8
 800355e:	3300      	adds	r3, #0
 8003560:	21a6      	movs	r1, #166	; 0xa6
 8003562:	0049      	lsls	r1, r1, #1
 8003564:	2208      	movs	r2, #8
 8003566:	188a      	adds	r2, r1, r2
 8003568:	19d1      	adds	r1, r2, r7
 800356a:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer1[symLen];
 800356c:	2390      	movs	r3, #144	; 0x90
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	681c      	ldr	r4, [r3, #0]
 8003574:	2390      	movs	r3, #144	; 0x90
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	601c      	str	r4, [r3, #0]
 800357c:	258c      	movs	r5, #140	; 0x8c
 800357e:	006d      	lsls	r5, r5, #1
 8003580:	1963      	adds	r3, r4, r5
 8003582:	2208      	movs	r2, #8
 8003584:	4694      	mov	ip, r2
 8003586:	44bc      	add	ip, r7
 8003588:	4463      	add	r3, ip
 800358a:	881a      	ldrh	r2, [r3, #0]
 800358c:	0013      	movs	r3, r2
 800358e:	3b01      	subs	r3, #1
 8003590:	21a4      	movs	r1, #164	; 0xa4
 8003592:	0049      	lsls	r1, r1, #1
 8003594:	2008      	movs	r0, #8
 8003596:	1809      	adds	r1, r1, r0
 8003598:	19c9      	adds	r1, r1, r7
 800359a:	600b      	str	r3, [r1, #0]
 800359c:	653a      	str	r2, [r7, #80]	; 0x50
 800359e:	2300      	movs	r3, #0
 80035a0:	657b      	str	r3, [r7, #84]	; 0x54
 80035a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80035a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035a6:	0003      	movs	r3, r0
 80035a8:	0f5b      	lsrs	r3, r3, #29
 80035aa:	000d      	movs	r5, r1
 80035ac:	00ed      	lsls	r5, r5, #3
 80035ae:	26dc      	movs	r6, #220	; 0xdc
 80035b0:	2408      	movs	r4, #8
 80035b2:	1934      	adds	r4, r6, r4
 80035b4:	19e4      	adds	r4, r4, r7
 80035b6:	6025      	str	r5, [r4, #0]
 80035b8:	2408      	movs	r4, #8
 80035ba:	1934      	adds	r4, r6, r4
 80035bc:	19e4      	adds	r4, r4, r7
 80035be:	6825      	ldr	r5, [r4, #0]
 80035c0:	431d      	orrs	r5, r3
 80035c2:	2308      	movs	r3, #8
 80035c4:	18f3      	adds	r3, r6, r3
 80035c6:	19db      	adds	r3, r3, r7
 80035c8:	601d      	str	r5, [r3, #0]
 80035ca:	0003      	movs	r3, r0
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	21d8      	movs	r1, #216	; 0xd8
 80035d0:	2008      	movs	r0, #8
 80035d2:	1809      	adds	r1, r1, r0
 80035d4:	19c9      	adds	r1, r1, r7
 80035d6:	600b      	str	r3, [r1, #0]
 80035d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80035da:	2300      	movs	r3, #0
 80035dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035de:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80035e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80035e2:	0003      	movs	r3, r0
 80035e4:	0f5b      	lsrs	r3, r3, #29
 80035e6:	000d      	movs	r5, r1
 80035e8:	00ed      	lsls	r5, r5, #3
 80035ea:	26d4      	movs	r6, #212	; 0xd4
 80035ec:	2408      	movs	r4, #8
 80035ee:	1934      	adds	r4, r6, r4
 80035f0:	19e4      	adds	r4, r4, r7
 80035f2:	6025      	str	r5, [r4, #0]
 80035f4:	2408      	movs	r4, #8
 80035f6:	1934      	adds	r4, r6, r4
 80035f8:	19e5      	adds	r5, r4, r7
 80035fa:	682d      	ldr	r5, [r5, #0]
 80035fc:	431d      	orrs	r5, r3
 80035fe:	2308      	movs	r3, #8
 8003600:	18f3      	adds	r3, r6, r3
 8003602:	19db      	adds	r3, r3, r7
 8003604:	601d      	str	r5, [r3, #0]
 8003606:	0003      	movs	r3, r0
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	21d0      	movs	r1, #208	; 0xd0
 800360c:	2008      	movs	r0, #8
 800360e:	1809      	adds	r1, r1, r0
 8003610:	19c9      	adds	r1, r1, r7
 8003612:	600b      	str	r3, [r1, #0]
 8003614:	0013      	movs	r3, r2
 8003616:	3307      	adds	r3, #7
 8003618:	08db      	lsrs	r3, r3, #3
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	466a      	mov	r2, sp
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	469d      	mov	sp, r3
 8003622:	ab02      	add	r3, sp, #8
 8003624:	3300      	adds	r3, #0
 8003626:	21a2      	movs	r1, #162	; 0xa2
 8003628:	0049      	lsls	r1, r1, #1
 800362a:	2208      	movs	r2, #8
 800362c:	188a      	adds	r2, r1, r2
 800362e:	19d1      	adds	r1, r2, r7
 8003630:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer2[symLen];
 8003632:	2390      	movs	r3, #144	; 0x90
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	681c      	ldr	r4, [r3, #0]
 800363a:	258c      	movs	r5, #140	; 0x8c
 800363c:	006d      	lsls	r5, r5, #1
 800363e:	1963      	adds	r3, r4, r5
 8003640:	2208      	movs	r2, #8
 8003642:	4694      	mov	ip, r2
 8003644:	44bc      	add	ip, r7
 8003646:	4463      	add	r3, ip
 8003648:	881a      	ldrh	r2, [r3, #0]
 800364a:	0013      	movs	r3, r2
 800364c:	3b01      	subs	r3, #1
 800364e:	21a0      	movs	r1, #160	; 0xa0
 8003650:	0049      	lsls	r1, r1, #1
 8003652:	2008      	movs	r0, #8
 8003654:	1809      	adds	r1, r1, r0
 8003656:	19c9      	adds	r1, r1, r7
 8003658:	600b      	str	r3, [r1, #0]
 800365a:	643a      	str	r2, [r7, #64]	; 0x40
 800365c:	2300      	movs	r3, #0
 800365e:	647b      	str	r3, [r7, #68]	; 0x44
 8003660:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003662:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003664:	0003      	movs	r3, r0
 8003666:	0f5b      	lsrs	r3, r3, #29
 8003668:	000c      	movs	r4, r1
 800366a:	00e4      	lsls	r4, r4, #3
 800366c:	26cc      	movs	r6, #204	; 0xcc
 800366e:	2508      	movs	r5, #8
 8003670:	1975      	adds	r5, r6, r5
 8003672:	19ed      	adds	r5, r5, r7
 8003674:	602c      	str	r4, [r5, #0]
 8003676:	2408      	movs	r4, #8
 8003678:	1934      	adds	r4, r6, r4
 800367a:	19e4      	adds	r4, r4, r7
 800367c:	6824      	ldr	r4, [r4, #0]
 800367e:	431c      	orrs	r4, r3
 8003680:	2308      	movs	r3, #8
 8003682:	18f3      	adds	r3, r6, r3
 8003684:	19db      	adds	r3, r3, r7
 8003686:	601c      	str	r4, [r3, #0]
 8003688:	0003      	movs	r3, r0
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	21c8      	movs	r1, #200	; 0xc8
 800368e:	2008      	movs	r0, #8
 8003690:	1809      	adds	r1, r1, r0
 8003692:	19c9      	adds	r1, r1, r7
 8003694:	600b      	str	r3, [r1, #0]
 8003696:	63ba      	str	r2, [r7, #56]	; 0x38
 8003698:	2300      	movs	r3, #0
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800369c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800369e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036a0:	0003      	movs	r3, r0
 80036a2:	0f5b      	lsrs	r3, r3, #29
 80036a4:	469c      	mov	ip, r3
 80036a6:	000c      	movs	r4, r1
 80036a8:	00e4      	lsls	r4, r4, #3
 80036aa:	26c4      	movs	r6, #196	; 0xc4
 80036ac:	0035      	movs	r5, r6
 80036ae:	2308      	movs	r3, #8
 80036b0:	18f6      	adds	r6, r6, r3
 80036b2:	19f6      	adds	r6, r6, r7
 80036b4:	6034      	str	r4, [r6, #0]
 80036b6:	002c      	movs	r4, r5
 80036b8:	0025      	movs	r5, r4
 80036ba:	2308      	movs	r3, #8
 80036bc:	18e3      	adds	r3, r4, r3
 80036be:	19de      	adds	r6, r3, r7
 80036c0:	6834      	ldr	r4, [r6, #0]
 80036c2:	4663      	mov	r3, ip
 80036c4:	431c      	orrs	r4, r3
 80036c6:	002b      	movs	r3, r5
 80036c8:	2508      	movs	r5, #8
 80036ca:	195b      	adds	r3, r3, r5
 80036cc:	19db      	adds	r3, r3, r7
 80036ce:	601c      	str	r4, [r3, #0]
 80036d0:	0003      	movs	r3, r0
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	21c0      	movs	r1, #192	; 0xc0
 80036d6:	2008      	movs	r0, #8
 80036d8:	1809      	adds	r1, r1, r0
 80036da:	19c9      	adds	r1, r1, r7
 80036dc:	600b      	str	r3, [r1, #0]
 80036de:	0013      	movs	r3, r2
 80036e0:	3307      	adds	r3, #7
 80036e2:	08db      	lsrs	r3, r3, #3
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	466a      	mov	r2, sp
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	469d      	mov	sp, r3
 80036ec:	ab02      	add	r3, sp, #8
 80036ee:	3300      	adds	r3, #0
 80036f0:	229e      	movs	r2, #158	; 0x9e
 80036f2:	0052      	lsls	r2, r2, #1
 80036f4:	2108      	movs	r1, #8
 80036f6:	1852      	adds	r2, r2, r1
 80036f8:	19d2      	adds	r2, r2, r7
 80036fa:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 80036fc:	233f      	movs	r3, #63	; 0x3f
 80036fe:	258c      	movs	r5, #140	; 0x8c
 8003700:	006d      	lsls	r5, r5, #1
 8003702:	195b      	adds	r3, r3, r5
 8003704:	2208      	movs	r2, #8
 8003706:	18ba      	adds	r2, r7, r2
 8003708:	189a      	adds	r2, r3, r2
 800370a:	2307      	movs	r3, #7
 800370c:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x12;
 800370e:	233e      	movs	r3, #62	; 0x3e
 8003710:	195b      	adds	r3, r3, r5
 8003712:	2208      	movs	r2, #8
 8003714:	18ba      	adds	r2, r7, r2
 8003716:	189a      	adds	r2, r3, r2
 8003718:	2312      	movs	r3, #18
 800371a:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 800371c:	2362      	movs	r3, #98	; 0x62
 800371e:	195b      	adds	r3, r3, r5
 8003720:	2208      	movs	r2, #8
 8003722:	18ba      	adds	r2, r7, r2
 8003724:	189a      	adds	r2, r3, r2
 8003726:	2300      	movs	r3, #0
 8003728:	8013      	strh	r3, [r2, #0]
 800372a:	e109      	b.n	8003940 <printASCIIarray+0xb74>
					for(j=0;j<symLen;j++){
 800372c:	2364      	movs	r3, #100	; 0x64
 800372e:	228c      	movs	r2, #140	; 0x8c
 8003730:	0052      	lsls	r2, r2, #1
 8003732:	189b      	adds	r3, r3, r2
 8003734:	2208      	movs	r2, #8
 8003736:	18ba      	adds	r2, r7, r2
 8003738:	189a      	adds	r2, r3, r2
 800373a:	2300      	movs	r3, #0
 800373c:	8013      	strh	r3, [r2, #0]
 800373e:	e041      	b.n	80037c4 <printASCIIarray+0x9f8>
						weoBuffer[j]=F2[dataASCII[i]][j];
 8003740:	2362      	movs	r3, #98	; 0x62
 8003742:	218c      	movs	r1, #140	; 0x8c
 8003744:	0049      	lsls	r1, r1, #1
 8003746:	185b      	adds	r3, r3, r1
 8003748:	2208      	movs	r2, #8
 800374a:	4694      	mov	ip, r2
 800374c:	44bc      	add	ip, r7
 800374e:	4463      	add	r3, ip
 8003750:	881a      	ldrh	r2, [r3, #0]
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	185b      	adds	r3, r3, r1
 8003756:	2008      	movs	r0, #8
 8003758:	4684      	mov	ip, r0
 800375a:	2008      	movs	r0, #8
 800375c:	4681      	mov	r9, r0
 800375e:	44b9      	add	r9, r7
 8003760:	44cc      	add	ip, r9
 8003762:	4463      	add	r3, ip
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	189b      	adds	r3, r3, r2
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	001d      	movs	r5, r3
 800376c:	2264      	movs	r2, #100	; 0x64
 800376e:	1853      	adds	r3, r2, r1
 8003770:	2008      	movs	r0, #8
 8003772:	4684      	mov	ip, r0
 8003774:	44bc      	add	ip, r7
 8003776:	4463      	add	r3, ip
 8003778:	8818      	ldrh	r0, [r3, #0]
 800377a:	000e      	movs	r6, r1
 800377c:	1853      	adds	r3, r2, r1
 800377e:	2208      	movs	r2, #8
 8003780:	4694      	mov	ip, r2
 8003782:	44bc      	add	ip, r7
 8003784:	4463      	add	r3, ip
 8003786:	881c      	ldrh	r4, [r3, #0]
 8003788:	497a      	ldr	r1, [pc, #488]	; (8003974 <printASCIIarray+0xba8>)
 800378a:	002a      	movs	r2, r5
 800378c:	0052      	lsls	r2, r2, #1
 800378e:	1952      	adds	r2, r2, r5
 8003790:	0153      	lsls	r3, r2, #5
 8003792:	18d2      	adds	r2, r2, r3
 8003794:	188b      	adds	r3, r1, r2
 8003796:	5c1b      	ldrb	r3, [r3, r0]
 8003798:	22a6      	movs	r2, #166	; 0xa6
 800379a:	0052      	lsls	r2, r2, #1
 800379c:	2108      	movs	r1, #8
 800379e:	1852      	adds	r2, r2, r1
 80037a0:	19d2      	adds	r2, r2, r7
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 80037a6:	2264      	movs	r2, #100	; 0x64
 80037a8:	0031      	movs	r1, r6
 80037aa:	1853      	adds	r3, r2, r1
 80037ac:	2008      	movs	r0, #8
 80037ae:	4684      	mov	ip, r0
 80037b0:	44bc      	add	ip, r7
 80037b2:	4463      	add	r3, ip
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	1852      	adds	r2, r2, r1
 80037b8:	2108      	movs	r1, #8
 80037ba:	468c      	mov	ip, r1
 80037bc:	44bc      	add	ip, r7
 80037be:	4462      	add	r2, ip
 80037c0:	3301      	adds	r3, #1
 80037c2:	8013      	strh	r3, [r2, #0]
 80037c4:	2364      	movs	r3, #100	; 0x64
 80037c6:	218c      	movs	r1, #140	; 0x8c
 80037c8:	0049      	lsls	r1, r1, #1
 80037ca:	185b      	adds	r3, r3, r1
 80037cc:	2208      	movs	r2, #8
 80037ce:	18ba      	adds	r2, r7, r2
 80037d0:	189a      	adds	r2, r3, r2
 80037d2:	235a      	movs	r3, #90	; 0x5a
 80037d4:	185b      	adds	r3, r3, r1
 80037d6:	2008      	movs	r0, #8
 80037d8:	4684      	mov	ip, r0
 80037da:	44bc      	add	ip, r7
 80037dc:	4463      	add	r3, ip
 80037de:	8812      	ldrh	r2, [r2, #0]
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d3ac      	bcc.n	8003740 <printASCIIarray+0x974>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 80037e6:	2366      	movs	r3, #102	; 0x66
 80037e8:	185b      	adds	r3, r3, r1
 80037ea:	2208      	movs	r2, #8
 80037ec:	18ba      	adds	r2, r7, r2
 80037ee:	189a      	adds	r2, r3, r2
 80037f0:	2300      	movs	r3, #0
 80037f2:	8013      	strh	r3, [r2, #0]
 80037f4:	e030      	b.n	8003858 <printASCIIarray+0xa8c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 80037f6:	2066      	movs	r0, #102	; 0x66
 80037f8:	248c      	movs	r4, #140	; 0x8c
 80037fa:	0064      	lsls	r4, r4, #1
 80037fc:	1903      	adds	r3, r0, r4
 80037fe:	2208      	movs	r2, #8
 8003800:	4694      	mov	ip, r2
 8003802:	44bc      	add	ip, r7
 8003804:	4463      	add	r3, ip
 8003806:	881a      	ldrh	r2, [r3, #0]
 8003808:	25a6      	movs	r5, #166	; 0xa6
 800380a:	006d      	lsls	r5, r5, #1
 800380c:	2308      	movs	r3, #8
 800380e:	18eb      	adds	r3, r5, r3
 8003810:	19db      	adds	r3, r3, r7
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	5c9a      	ldrb	r2, [r3, r2]
 8003816:	1903      	adds	r3, r0, r4
 8003818:	2108      	movs	r1, #8
 800381a:	468c      	mov	ip, r1
 800381c:	44bc      	add	ip, r7
 800381e:	4463      	add	r3, ip
 8003820:	8819      	ldrh	r1, [r3, #0]
 8003822:	235c      	movs	r3, #92	; 0x5c
 8003824:	191b      	adds	r3, r3, r4
 8003826:	2608      	movs	r6, #8
 8003828:	46b4      	mov	ip, r6
 800382a:	44bc      	add	ip, r7
 800382c:	4463      	add	r3, ip
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	4013      	ands	r3, r2
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2208      	movs	r2, #8
 8003836:	18aa      	adds	r2, r5, r2
 8003838:	19d2      	adds	r2, r2, r7
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 800383e:	1903      	adds	r3, r0, r4
 8003840:	2208      	movs	r2, #8
 8003842:	4694      	mov	ip, r2
 8003844:	44bc      	add	ip, r7
 8003846:	4463      	add	r3, ip
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	1902      	adds	r2, r0, r4
 800384c:	2108      	movs	r1, #8
 800384e:	468c      	mov	ip, r1
 8003850:	44bc      	add	ip, r7
 8003852:	4462      	add	r2, ip
 8003854:	3301      	adds	r3, #1
 8003856:	8013      	strh	r3, [r2, #0]
 8003858:	2366      	movs	r3, #102	; 0x66
 800385a:	258c      	movs	r5, #140	; 0x8c
 800385c:	006d      	lsls	r5, r5, #1
 800385e:	195b      	adds	r3, r3, r5
 8003860:	2208      	movs	r2, #8
 8003862:	18ba      	adds	r2, r7, r2
 8003864:	189a      	adds	r2, r3, r2
 8003866:	235a      	movs	r3, #90	; 0x5a
 8003868:	195b      	adds	r3, r3, r5
 800386a:	2108      	movs	r1, #8
 800386c:	468c      	mov	ip, r1
 800386e:	44bc      	add	ip, r7
 8003870:	4463      	add	r3, ip
 8003872:	8812      	ldrh	r2, [r2, #0]
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d3bd      	bcc.n	80037f6 <printASCIIarray+0xa2a>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 800387a:	205f      	movs	r0, #95	; 0x5f
 800387c:	1943      	adds	r3, r0, r5
 800387e:	2208      	movs	r2, #8
 8003880:	18ba      	adds	r2, r7, r2
 8003882:	189a      	adds	r2, r3, r2
 8003884:	233f      	movs	r3, #63	; 0x3f
 8003886:	195b      	adds	r3, r3, r5
 8003888:	2108      	movs	r1, #8
 800388a:	468c      	mov	ip, r1
 800388c:	44bc      	add	ip, r7
 800388e:	4463      	add	r3, ip
 8003890:	7812      	ldrb	r2, [r2, #0]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	18d3      	adds	r3, r2, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b2dc      	uxtb	r4, r3
 800389c:	268f      	movs	r6, #143	; 0x8f
 800389e:	0076      	lsls	r6, r6, #1
 80038a0:	2308      	movs	r3, #8
 80038a2:	18f3      	adds	r3, r6, r3
 80038a4:	19da      	adds	r2, r3, r7
 80038a6:	213e      	movs	r1, #62	; 0x3e
 80038a8:	194b      	adds	r3, r1, r5
 80038aa:	2108      	movs	r1, #8
 80038ac:	468c      	mov	ip, r1
 80038ae:	44bc      	add	ip, r7
 80038b0:	4463      	add	r3, ip
 80038b2:	7812      	ldrb	r2, [r2, #0]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	18d3      	adds	r3, r2, r3
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	2160      	movs	r1, #96	; 0x60
 80038bc:	1949      	adds	r1, r1, r5
 80038be:	2308      	movs	r3, #8
 80038c0:	18fb      	adds	r3, r7, r3
 80038c2:	18cb      	adds	r3, r1, r3
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	2308      	movs	r3, #8
 80038cc:	18f3      	adds	r3, r6, r3
 80038ce:	19db      	adds	r3, r3, r7
 80038d0:	7819      	ldrb	r1, [r3, #0]
 80038d2:	0005      	movs	r5, r0
 80038d4:	238c      	movs	r3, #140	; 0x8c
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	18c6      	adds	r6, r0, r3
 80038da:	2308      	movs	r3, #8
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	18f3      	adds	r3, r6, r3
 80038e0:	7818      	ldrb	r0, [r3, #0]
 80038e2:	26a6      	movs	r6, #166	; 0xa6
 80038e4:	0076      	lsls	r6, r6, #1
 80038e6:	2308      	movs	r3, #8
 80038e8:	18f3      	adds	r3, r6, r3
 80038ea:	19de      	adds	r6, r3, r7
 80038ec:	6833      	ldr	r3, [r6, #0]
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	23ff      	movs	r3, #255	; 0xff
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	0013      	movs	r3, r2
 80038f6:	0022      	movs	r2, r4
 80038f8:	f7fd fdde 	bl	80014b8 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 80038fc:	208c      	movs	r0, #140	; 0x8c
 80038fe:	0040      	lsls	r0, r0, #1
 8003900:	182b      	adds	r3, r5, r0
 8003902:	2208      	movs	r2, #8
 8003904:	18ba      	adds	r2, r7, r2
 8003906:	1899      	adds	r1, r3, r2
 8003908:	182b      	adds	r3, r5, r0
 800390a:	2208      	movs	r2, #8
 800390c:	18ba      	adds	r2, r7, r2
 800390e:	189a      	adds	r2, r3, r2
 8003910:	233f      	movs	r3, #63	; 0x3f
 8003912:	181b      	adds	r3, r3, r0
 8003914:	2408      	movs	r4, #8
 8003916:	46a4      	mov	ip, r4
 8003918:	44bc      	add	ip, r7
 800391a:	4463      	add	r3, ip
 800391c:	7812      	ldrb	r2, [r2, #0]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	18d3      	adds	r3, r2, r3
 8003922:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 8003924:	2262      	movs	r2, #98	; 0x62
 8003926:	1813      	adds	r3, r2, r0
 8003928:	2108      	movs	r1, #8
 800392a:	468c      	mov	ip, r1
 800392c:	44bc      	add	ip, r7
 800392e:	4463      	add	r3, ip
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	1812      	adds	r2, r2, r0
 8003934:	2108      	movs	r1, #8
 8003936:	468c      	mov	ip, r1
 8003938:	44bc      	add	ip, r7
 800393a:	4462      	add	r2, ip
 800393c:	3301      	adds	r3, #1
 800393e:	8013      	strh	r3, [r2, #0]
 8003940:	231e      	movs	r3, #30
 8003942:	33ff      	adds	r3, #255	; 0xff
 8003944:	2208      	movs	r2, #8
 8003946:	189b      	adds	r3, r3, r2
 8003948:	19db      	adds	r3, r3, r7
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b29a      	uxth	r2, r3
 800394e:	2162      	movs	r1, #98	; 0x62
 8003950:	208c      	movs	r0, #140	; 0x8c
 8003952:	0040      	lsls	r0, r0, #1
 8003954:	180b      	adds	r3, r1, r0
 8003956:	2408      	movs	r4, #8
 8003958:	46a4      	mov	ip, r4
 800395a:	44bc      	add	ip, r7
 800395c:	4463      	add	r3, ip
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	4293      	cmp	r3, r2
 8003962:	d200      	bcs.n	8003966 <printASCIIarray+0xb9a>
 8003964:	e6e2      	b.n	800372c <printASCIIarray+0x960>
				}
				for(i=0;i<symLen;i++){
 8003966:	180b      	adds	r3, r1, r0
 8003968:	2208      	movs	r2, #8
 800396a:	18ba      	adds	r2, r7, r2
 800396c:	189a      	adds	r2, r3, r2
 800396e:	2300      	movs	r3, #0
 8003970:	8013      	strh	r3, [r2, #0]
 8003972:	e020      	b.n	80039b6 <printASCIIarray+0xbea>
 8003974:	0800fa90 	.word	0x0800fa90
									weoBuffer[j]=0x00;
 8003978:	2364      	movs	r3, #100	; 0x64
 800397a:	208c      	movs	r0, #140	; 0x8c
 800397c:	0040      	lsls	r0, r0, #1
 800397e:	181b      	adds	r3, r3, r0
 8003980:	2208      	movs	r2, #8
 8003982:	4694      	mov	ip, r2
 8003984:	44bc      	add	ip, r7
 8003986:	4463      	add	r3, ip
 8003988:	8819      	ldrh	r1, [r3, #0]
 800398a:	23a6      	movs	r3, #166	; 0xa6
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2208      	movs	r2, #8
 8003990:	189b      	adds	r3, r3, r2
 8003992:	19db      	adds	r3, r3, r7
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	2300      	movs	r3, #0
 8003998:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 800399a:	2262      	movs	r2, #98	; 0x62
 800399c:	1813      	adds	r3, r2, r0
 800399e:	2108      	movs	r1, #8
 80039a0:	468c      	mov	ip, r1
 80039a2:	44bc      	add	ip, r7
 80039a4:	4463      	add	r3, ip
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	1812      	adds	r2, r2, r0
 80039aa:	2108      	movs	r1, #8
 80039ac:	468c      	mov	ip, r1
 80039ae:	44bc      	add	ip, r7
 80039b0:	4462      	add	r2, ip
 80039b2:	3301      	adds	r3, #1
 80039b4:	8013      	strh	r3, [r2, #0]
 80039b6:	2362      	movs	r3, #98	; 0x62
 80039b8:	218c      	movs	r1, #140	; 0x8c
 80039ba:	0049      	lsls	r1, r1, #1
 80039bc:	185b      	adds	r3, r3, r1
 80039be:	2208      	movs	r2, #8
 80039c0:	18ba      	adds	r2, r7, r2
 80039c2:	189a      	adds	r2, r3, r2
 80039c4:	235a      	movs	r3, #90	; 0x5a
 80039c6:	185b      	adds	r3, r3, r1
 80039c8:	2108      	movs	r1, #8
 80039ca:	468c      	mov	ip, r1
 80039cc:	44bc      	add	ip, r7
 80039ce:	4463      	add	r3, ip
 80039d0:	8812      	ldrh	r2, [r2, #0]
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d3cf      	bcc.n	8003978 <printASCIIarray+0xbac>
 80039d8:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==2){
 80039da:	2361      	movs	r3, #97	; 0x61
 80039dc:	268c      	movs	r6, #140	; 0x8c
 80039de:	0076      	lsls	r6, r6, #1
 80039e0:	199b      	adds	r3, r3, r6
 80039e2:	2208      	movs	r2, #8
 80039e4:	4694      	mov	ip, r2
 80039e6:	44bc      	add	ip, r7
 80039e8:	4463      	add	r3, ip
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d001      	beq.n	80039f4 <printASCIIarray+0xc28>
 80039f0:	f001 f82b 	bl	8004a4a <printASCIIarray+0x1c7e>
 80039f4:	466b      	mov	r3, sp
 80039f6:	001d      	movs	r5, r3
				symLen=304;
 80039f8:	245a      	movs	r4, #90	; 0x5a
 80039fa:	19a3      	adds	r3, r4, r6
 80039fc:	2208      	movs	r2, #8
 80039fe:	18ba      	adds	r2, r7, r2
 8003a00:	189a      	adds	r2, r3, r2
 8003a02:	2398      	movs	r3, #152	; 0x98
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8003a08:	607c      	str	r4, [r7, #4]
 8003a0a:	19a3      	adds	r3, r4, r6
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	4694      	mov	ip, r2
 8003a10:	44bc      	add	ip, r7
 8003a12:	4463      	add	r3, ip
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	2290      	movs	r2, #144	; 0x90
 8003a18:	0052      	lsls	r2, r2, #1
 8003a1a:	18ba      	adds	r2, r7, r2
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	2390      	movs	r3, #144	; 0x90
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	219c      	movs	r1, #156	; 0x9c
 8003a2a:	0049      	lsls	r1, r1, #1
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	188a      	adds	r2, r1, r2
 8003a30:	19d1      	adds	r1, r2, r7
 8003a32:	600b      	str	r3, [r1, #0]
 8003a34:	2390      	movs	r3, #144	; 0x90
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	18fb      	adds	r3, r7, r3
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a3e:	2300      	movs	r3, #0
 8003a40:	637b      	str	r3, [r7, #52]	; 0x34
 8003a42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a46:	0003      	movs	r3, r0
 8003a48:	0f5b      	lsrs	r3, r3, #29
 8003a4a:	000e      	movs	r6, r1
 8003a4c:	00f6      	lsls	r6, r6, #3
 8003a4e:	24bc      	movs	r4, #188	; 0xbc
 8003a50:	2208      	movs	r2, #8
 8003a52:	18a2      	adds	r2, r4, r2
 8003a54:	19d2      	adds	r2, r2, r7
 8003a56:	6016      	str	r6, [r2, #0]
 8003a58:	2208      	movs	r2, #8
 8003a5a:	18a2      	adds	r2, r4, r2
 8003a5c:	19d6      	adds	r6, r2, r7
 8003a5e:	6836      	ldr	r6, [r6, #0]
 8003a60:	431e      	orrs	r6, r3
 8003a62:	2308      	movs	r3, #8
 8003a64:	18e3      	adds	r3, r4, r3
 8003a66:	19db      	adds	r3, r3, r7
 8003a68:	601e      	str	r6, [r3, #0]
 8003a6a:	0003      	movs	r3, r0
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	21b8      	movs	r1, #184	; 0xb8
 8003a70:	2208      	movs	r2, #8
 8003a72:	188a      	adds	r2, r1, r2
 8003a74:	19d1      	adds	r1, r2, r7
 8003a76:	600b      	str	r3, [r1, #0]
 8003a78:	2390      	movs	r3, #144	; 0x90
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a82:	2300      	movs	r3, #0
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a8a:	0003      	movs	r3, r0
 8003a8c:	0f5b      	lsrs	r3, r3, #29
 8003a8e:	469c      	mov	ip, r3
 8003a90:	000e      	movs	r6, r1
 8003a92:	00f6      	lsls	r6, r6, #3
 8003a94:	24b4      	movs	r4, #180	; 0xb4
 8003a96:	0022      	movs	r2, r4
 8003a98:	2308      	movs	r3, #8
 8003a9a:	18e4      	adds	r4, r4, r3
 8003a9c:	19e4      	adds	r4, r4, r7
 8003a9e:	6026      	str	r6, [r4, #0]
 8003aa0:	0016      	movs	r6, r2
 8003aa2:	0032      	movs	r2, r6
 8003aa4:	2308      	movs	r3, #8
 8003aa6:	18f3      	adds	r3, r6, r3
 8003aa8:	19dc      	adds	r4, r3, r7
 8003aaa:	6826      	ldr	r6, [r4, #0]
 8003aac:	4663      	mov	r3, ip
 8003aae:	431e      	orrs	r6, r3
 8003ab0:	0013      	movs	r3, r2
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	189b      	adds	r3, r3, r2
 8003ab6:	19db      	adds	r3, r3, r7
 8003ab8:	601e      	str	r6, [r3, #0]
 8003aba:	0003      	movs	r3, r0
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	21b0      	movs	r1, #176	; 0xb0
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	188a      	adds	r2, r1, r2
 8003ac4:	19d1      	adds	r1, r2, r7
 8003ac6:	600b      	str	r3, [r1, #0]
 8003ac8:	2390      	movs	r3, #144	; 0x90
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3307      	adds	r3, #7
 8003ad2:	08db      	lsrs	r3, r3, #3
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	466a      	mov	r2, sp
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	469d      	mov	sp, r3
 8003adc:	ab02      	add	r3, sp, #8
 8003ade:	3300      	adds	r3, #0
 8003ae0:	229a      	movs	r2, #154	; 0x9a
 8003ae2:	0052      	lsls	r2, r2, #1
 8003ae4:	2108      	movs	r1, #8
 8003ae6:	1852      	adds	r2, r2, r1
 8003ae8:	19d2      	adds	r2, r2, r7
 8003aea:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8003aec:	687c      	ldr	r4, [r7, #4]
 8003aee:	607c      	str	r4, [r7, #4]
 8003af0:	268c      	movs	r6, #140	; 0x8c
 8003af2:	0076      	lsls	r6, r6, #1
 8003af4:	19a3      	adds	r3, r4, r6
 8003af6:	2208      	movs	r2, #8
 8003af8:	4694      	mov	ip, r2
 8003afa:	44bc      	add	ip, r7
 8003afc:	4463      	add	r3, ip
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	2290      	movs	r2, #144	; 0x90
 8003b02:	0052      	lsls	r2, r2, #1
 8003b04:	18ba      	adds	r2, r7, r2
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	2390      	movs	r3, #144	; 0x90
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	2198      	movs	r1, #152	; 0x98
 8003b14:	0049      	lsls	r1, r1, #1
 8003b16:	2208      	movs	r2, #8
 8003b18:	188a      	adds	r2, r1, r2
 8003b1a:	19d1      	adds	r1, r2, r7
 8003b1c:	600b      	str	r3, [r1, #0]
 8003b1e:	2390      	movs	r3, #144	; 0x90
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	623b      	str	r3, [r7, #32]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2c:	6a38      	ldr	r0, [r7, #32]
 8003b2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b30:	0003      	movs	r3, r0
 8003b32:	0f5b      	lsrs	r3, r3, #29
 8003b34:	000e      	movs	r6, r1
 8003b36:	00f6      	lsls	r6, r6, #3
 8003b38:	24ac      	movs	r4, #172	; 0xac
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	18a2      	adds	r2, r4, r2
 8003b3e:	19d2      	adds	r2, r2, r7
 8003b40:	6016      	str	r6, [r2, #0]
 8003b42:	2208      	movs	r2, #8
 8003b44:	18a2      	adds	r2, r4, r2
 8003b46:	19d6      	adds	r6, r2, r7
 8003b48:	6836      	ldr	r6, [r6, #0]
 8003b4a:	431e      	orrs	r6, r3
 8003b4c:	2308      	movs	r3, #8
 8003b4e:	18e3      	adds	r3, r4, r3
 8003b50:	19db      	adds	r3, r3, r7
 8003b52:	601e      	str	r6, [r3, #0]
 8003b54:	0003      	movs	r3, r0
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	21a8      	movs	r1, #168	; 0xa8
 8003b5a:	2208      	movs	r2, #8
 8003b5c:	188a      	adds	r2, r1, r2
 8003b5e:	19d1      	adds	r1, r2, r7
 8003b60:	600b      	str	r3, [r1, #0]
 8003b62:	2390      	movs	r3, #144	; 0x90
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	69b8      	ldr	r0, [r7, #24]
 8003b72:	69f9      	ldr	r1, [r7, #28]
 8003b74:	0003      	movs	r3, r0
 8003b76:	0f5b      	lsrs	r3, r3, #29
 8003b78:	469c      	mov	ip, r3
 8003b7a:	000e      	movs	r6, r1
 8003b7c:	00f6      	lsls	r6, r6, #3
 8003b7e:	24a4      	movs	r4, #164	; 0xa4
 8003b80:	0022      	movs	r2, r4
 8003b82:	2308      	movs	r3, #8
 8003b84:	18e4      	adds	r4, r4, r3
 8003b86:	19e4      	adds	r4, r4, r7
 8003b88:	6026      	str	r6, [r4, #0]
 8003b8a:	0016      	movs	r6, r2
 8003b8c:	0032      	movs	r2, r6
 8003b8e:	2308      	movs	r3, #8
 8003b90:	18f3      	adds	r3, r6, r3
 8003b92:	19dc      	adds	r4, r3, r7
 8003b94:	6826      	ldr	r6, [r4, #0]
 8003b96:	4663      	mov	r3, ip
 8003b98:	431e      	orrs	r6, r3
 8003b9a:	0013      	movs	r3, r2
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	19db      	adds	r3, r3, r7
 8003ba2:	601e      	str	r6, [r3, #0]
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	21a0      	movs	r1, #160	; 0xa0
 8003baa:	2208      	movs	r2, #8
 8003bac:	188a      	adds	r2, r1, r2
 8003bae:	19d1      	adds	r1, r2, r7
 8003bb0:	600b      	str	r3, [r1, #0]
 8003bb2:	2390      	movs	r3, #144	; 0x90
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3307      	adds	r3, #7
 8003bbc:	08db      	lsrs	r3, r3, #3
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	466a      	mov	r2, sp
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	469d      	mov	sp, r3
 8003bc6:	ab02      	add	r3, sp, #8
 8003bc8:	3300      	adds	r3, #0
 8003bca:	2296      	movs	r2, #150	; 0x96
 8003bcc:	0052      	lsls	r2, r2, #1
 8003bce:	2108      	movs	r1, #8
 8003bd0:	1852      	adds	r2, r2, r1
 8003bd2:	19d2      	adds	r2, r2, r7
 8003bd4:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8003bd6:	687c      	ldr	r4, [r7, #4]
 8003bd8:	268c      	movs	r6, #140	; 0x8c
 8003bda:	0076      	lsls	r6, r6, #1
 8003bdc:	19a3      	adds	r3, r4, r6
 8003bde:	2208      	movs	r2, #8
 8003be0:	4694      	mov	ip, r2
 8003be2:	44bc      	add	ip, r7
 8003be4:	4463      	add	r3, ip
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	2290      	movs	r2, #144	; 0x90
 8003bea:	0052      	lsls	r2, r2, #1
 8003bec:	18ba      	adds	r2, r7, r2
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	2390      	movs	r3, #144	; 0x90
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	3a01      	subs	r2, #1
 8003bfa:	2194      	movs	r1, #148	; 0x94
 8003bfc:	0049      	lsls	r1, r1, #1
 8003bfe:	2308      	movs	r3, #8
 8003c00:	18cb      	adds	r3, r1, r3
 8003c02:	19d9      	adds	r1, r3, r7
 8003c04:	600a      	str	r2, [r1, #0]
 8003c06:	2390      	movs	r3, #144	; 0x90
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	2200      	movs	r2, #0
 8003c12:	617a      	str	r2, [r7, #20]
 8003c14:	6938      	ldr	r0, [r7, #16]
 8003c16:	6979      	ldr	r1, [r7, #20]
 8003c18:	0002      	movs	r2, r0
 8003c1a:	0f52      	lsrs	r2, r2, #29
 8003c1c:	000c      	movs	r4, r1
 8003c1e:	00e4      	lsls	r4, r4, #3
 8003c20:	269c      	movs	r6, #156	; 0x9c
 8003c22:	2308      	movs	r3, #8
 8003c24:	18f3      	adds	r3, r6, r3
 8003c26:	19db      	adds	r3, r3, r7
 8003c28:	601c      	str	r4, [r3, #0]
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	18f3      	adds	r3, r6, r3
 8003c2e:	19dc      	adds	r4, r3, r7
 8003c30:	6824      	ldr	r4, [r4, #0]
 8003c32:	4314      	orrs	r4, r2
 8003c34:	2308      	movs	r3, #8
 8003c36:	18f3      	adds	r3, r6, r3
 8003c38:	19da      	adds	r2, r3, r7
 8003c3a:	6014      	str	r4, [r2, #0]
 8003c3c:	0002      	movs	r2, r0
 8003c3e:	00d2      	lsls	r2, r2, #3
 8003c40:	2198      	movs	r1, #152	; 0x98
 8003c42:	2308      	movs	r3, #8
 8003c44:	18cb      	adds	r3, r1, r3
 8003c46:	19d9      	adds	r1, r3, r7
 8003c48:	600a      	str	r2, [r1, #0]
 8003c4a:	2390      	movs	r3, #144	; 0x90
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	2200      	movs	r2, #0
 8003c56:	60fa      	str	r2, [r7, #12]
 8003c58:	68b8      	ldr	r0, [r7, #8]
 8003c5a:	68f9      	ldr	r1, [r7, #12]
 8003c5c:	0002      	movs	r2, r0
 8003c5e:	0f52      	lsrs	r2, r2, #29
 8003c60:	000c      	movs	r4, r1
 8003c62:	00e4      	lsls	r4, r4, #3
 8003c64:	2694      	movs	r6, #148	; 0x94
 8003c66:	603e      	str	r6, [r7, #0]
 8003c68:	2308      	movs	r3, #8
 8003c6a:	18f6      	adds	r6, r6, r3
 8003c6c:	19f6      	adds	r6, r6, r7
 8003c6e:	6034      	str	r4, [r6, #0]
 8003c70:	683c      	ldr	r4, [r7, #0]
 8003c72:	0023      	movs	r3, r4
 8003c74:	2608      	movs	r6, #8
 8003c76:	19a4      	adds	r4, r4, r6
 8003c78:	19e6      	adds	r6, r4, r7
 8003c7a:	6834      	ldr	r4, [r6, #0]
 8003c7c:	4314      	orrs	r4, r2
 8003c7e:	001a      	movs	r2, r3
 8003c80:	2308      	movs	r3, #8
 8003c82:	18d3      	adds	r3, r2, r3
 8003c84:	19da      	adds	r2, r3, r7
 8003c86:	6014      	str	r4, [r2, #0]
 8003c88:	0002      	movs	r2, r0
 8003c8a:	00d2      	lsls	r2, r2, #3
 8003c8c:	2190      	movs	r1, #144	; 0x90
 8003c8e:	2308      	movs	r3, #8
 8003c90:	18cb      	adds	r3, r1, r3
 8003c92:	19d9      	adds	r1, r3, r7
 8003c94:	600a      	str	r2, [r1, #0]
 8003c96:	2390      	movs	r3, #144	; 0x90
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3307      	adds	r3, #7
 8003ca0:	08db      	lsrs	r3, r3, #3
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	466a      	mov	r2, sp
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	469d      	mov	sp, r3
 8003caa:	ab02      	add	r3, sp, #8
 8003cac:	3300      	adds	r3, #0
 8003cae:	2292      	movs	r2, #146	; 0x92
 8003cb0:	0052      	lsls	r2, r2, #1
 8003cb2:	2108      	movs	r1, #8
 8003cb4:	1852      	adds	r2, r2, r1
 8003cb6:	19d2      	adds	r2, r2, r7
 8003cb8:	6013      	str	r3, [r2, #0]
				X_increment=0x10;
 8003cba:	233f      	movs	r3, #63	; 0x3f
 8003cbc:	268c      	movs	r6, #140	; 0x8c
 8003cbe:	0076      	lsls	r6, r6, #1
 8003cc0:	199b      	adds	r3, r3, r6
 8003cc2:	2208      	movs	r2, #8
 8003cc4:	4694      	mov	ip, r2
 8003cc6:	44bc      	add	ip, r7
 8003cc8:	4463      	add	r3, ip
 8003cca:	2210      	movs	r2, #16
 8003ccc:	701a      	strb	r2, [r3, #0]
				ASCII_height=0x26;
 8003cce:	233e      	movs	r3, #62	; 0x3e
 8003cd0:	199b      	adds	r3, r3, r6
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	4694      	mov	ip, r2
 8003cd6:	44bc      	add	ip, r7
 8003cd8:	4463      	add	r3, ip
 8003cda:	2226      	movs	r2, #38	; 0x26
 8003cdc:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8003cde:	2362      	movs	r3, #98	; 0x62
 8003ce0:	199b      	adds	r3, r3, r6
 8003ce2:	2208      	movs	r2, #8
 8003ce4:	4694      	mov	ip, r2
 8003ce6:	44bc      	add	ip, r7
 8003ce8:	4463      	add	r3, ip
 8003cea:	2200      	movs	r2, #0
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	f000 fd30 	bl	8004752 <printASCIIarray+0x1986>
					if(dataASCII[i]==0x20){dataASCII[i]=0x00;}
 8003cf2:	2162      	movs	r1, #98	; 0x62
 8003cf4:	248c      	movs	r4, #140	; 0x8c
 8003cf6:	0064      	lsls	r4, r4, #1
 8003cf8:	190b      	adds	r3, r1, r4
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	4694      	mov	ip, r2
 8003cfe:	44bc      	add	ip, r7
 8003d00:	4463      	add	r3, ip
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	2080      	movs	r0, #128	; 0x80
 8003d06:	1902      	adds	r2, r0, r4
 8003d08:	2608      	movs	r6, #8
 8003d0a:	46b4      	mov	ip, r6
 8003d0c:	2608      	movs	r6, #8
 8003d0e:	46b0      	mov	r8, r6
 8003d10:	44b8      	add	r8, r7
 8003d12:	44c4      	add	ip, r8
 8003d14:	4462      	add	r2, ip
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	18d3      	adds	r3, r2, r3
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d111      	bne.n	8003d44 <printASCIIarray+0xf78>
 8003d20:	190b      	adds	r3, r1, r4
 8003d22:	2208      	movs	r2, #8
 8003d24:	4694      	mov	ip, r2
 8003d26:	44bc      	add	ip, r7
 8003d28:	4463      	add	r3, ip
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	1902      	adds	r2, r0, r4
 8003d2e:	2108      	movs	r1, #8
 8003d30:	468c      	mov	ip, r1
 8003d32:	2108      	movs	r1, #8
 8003d34:	4688      	mov	r8, r1
 8003d36:	44b8      	add	r8, r7
 8003d38:	44c4      	add	ip, r8
 8003d3a:	4462      	add	r2, ip
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	18d3      	adds	r3, r2, r3
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x21){dataASCII[i]=0x01;}
 8003d44:	2162      	movs	r1, #98	; 0x62
 8003d46:	248c      	movs	r4, #140	; 0x8c
 8003d48:	0064      	lsls	r4, r4, #1
 8003d4a:	190b      	adds	r3, r1, r4
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	4694      	mov	ip, r2
 8003d50:	44bc      	add	ip, r7
 8003d52:	4463      	add	r3, ip
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	2080      	movs	r0, #128	; 0x80
 8003d58:	1902      	adds	r2, r0, r4
 8003d5a:	2608      	movs	r6, #8
 8003d5c:	46b4      	mov	ip, r6
 8003d5e:	2608      	movs	r6, #8
 8003d60:	46b0      	mov	r8, r6
 8003d62:	44b8      	add	r8, r7
 8003d64:	44c4      	add	ip, r8
 8003d66:	4462      	add	r2, ip
 8003d68:	6812      	ldr	r2, [r2, #0]
 8003d6a:	18d3      	adds	r3, r2, r3
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b21      	cmp	r3, #33	; 0x21
 8003d70:	d111      	bne.n	8003d96 <printASCIIarray+0xfca>
 8003d72:	190b      	adds	r3, r1, r4
 8003d74:	2208      	movs	r2, #8
 8003d76:	4694      	mov	ip, r2
 8003d78:	44bc      	add	ip, r7
 8003d7a:	4463      	add	r3, ip
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	1902      	adds	r2, r0, r4
 8003d80:	2108      	movs	r1, #8
 8003d82:	468c      	mov	ip, r1
 8003d84:	2108      	movs	r1, #8
 8003d86:	4688      	mov	r8, r1
 8003d88:	44b8      	add	r8, r7
 8003d8a:	44c4      	add	ip, r8
 8003d8c:	4462      	add	r2, ip
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	18d3      	adds	r3, r2, r3
 8003d92:	2201      	movs	r2, #1
 8003d94:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x25){dataASCII[i]=0x02;}
 8003d96:	2162      	movs	r1, #98	; 0x62
 8003d98:	248c      	movs	r4, #140	; 0x8c
 8003d9a:	0064      	lsls	r4, r4, #1
 8003d9c:	190b      	adds	r3, r1, r4
 8003d9e:	2208      	movs	r2, #8
 8003da0:	4694      	mov	ip, r2
 8003da2:	44bc      	add	ip, r7
 8003da4:	4463      	add	r3, ip
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	2080      	movs	r0, #128	; 0x80
 8003daa:	1902      	adds	r2, r0, r4
 8003dac:	2608      	movs	r6, #8
 8003dae:	46b4      	mov	ip, r6
 8003db0:	2608      	movs	r6, #8
 8003db2:	46b0      	mov	r8, r6
 8003db4:	44b8      	add	r8, r7
 8003db6:	44c4      	add	ip, r8
 8003db8:	4462      	add	r2, ip
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	18d3      	adds	r3, r2, r3
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b25      	cmp	r3, #37	; 0x25
 8003dc2:	d111      	bne.n	8003de8 <printASCIIarray+0x101c>
 8003dc4:	190b      	adds	r3, r1, r4
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	4694      	mov	ip, r2
 8003dca:	44bc      	add	ip, r7
 8003dcc:	4463      	add	r3, ip
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	1902      	adds	r2, r0, r4
 8003dd2:	2108      	movs	r1, #8
 8003dd4:	468c      	mov	ip, r1
 8003dd6:	2108      	movs	r1, #8
 8003dd8:	4688      	mov	r8, r1
 8003dda:	44b8      	add	r8, r7
 8003ddc:	44c4      	add	ip, r8
 8003dde:	4462      	add	r2, ip
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	18d3      	adds	r3, r2, r3
 8003de4:	2202      	movs	r2, #2
 8003de6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x28){dataASCII[i]=0x03;}
 8003de8:	2162      	movs	r1, #98	; 0x62
 8003dea:	248c      	movs	r4, #140	; 0x8c
 8003dec:	0064      	lsls	r4, r4, #1
 8003dee:	190b      	adds	r3, r1, r4
 8003df0:	2208      	movs	r2, #8
 8003df2:	4694      	mov	ip, r2
 8003df4:	44bc      	add	ip, r7
 8003df6:	4463      	add	r3, ip
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	2080      	movs	r0, #128	; 0x80
 8003dfc:	1902      	adds	r2, r0, r4
 8003dfe:	2608      	movs	r6, #8
 8003e00:	46b4      	mov	ip, r6
 8003e02:	2608      	movs	r6, #8
 8003e04:	46b0      	mov	r8, r6
 8003e06:	44b8      	add	r8, r7
 8003e08:	44c4      	add	ip, r8
 8003e0a:	4462      	add	r2, ip
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	18d3      	adds	r3, r2, r3
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b28      	cmp	r3, #40	; 0x28
 8003e14:	d111      	bne.n	8003e3a <printASCIIarray+0x106e>
 8003e16:	190b      	adds	r3, r1, r4
 8003e18:	2208      	movs	r2, #8
 8003e1a:	4694      	mov	ip, r2
 8003e1c:	44bc      	add	ip, r7
 8003e1e:	4463      	add	r3, ip
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	1902      	adds	r2, r0, r4
 8003e24:	2108      	movs	r1, #8
 8003e26:	468c      	mov	ip, r1
 8003e28:	2108      	movs	r1, #8
 8003e2a:	4688      	mov	r8, r1
 8003e2c:	44b8      	add	r8, r7
 8003e2e:	44c4      	add	ip, r8
 8003e30:	4462      	add	r2, ip
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	18d3      	adds	r3, r2, r3
 8003e36:	2203      	movs	r2, #3
 8003e38:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x29){dataASCII[i]=0x04;}
 8003e3a:	2162      	movs	r1, #98	; 0x62
 8003e3c:	248c      	movs	r4, #140	; 0x8c
 8003e3e:	0064      	lsls	r4, r4, #1
 8003e40:	190b      	adds	r3, r1, r4
 8003e42:	2208      	movs	r2, #8
 8003e44:	4694      	mov	ip, r2
 8003e46:	44bc      	add	ip, r7
 8003e48:	4463      	add	r3, ip
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	2080      	movs	r0, #128	; 0x80
 8003e4e:	1902      	adds	r2, r0, r4
 8003e50:	2608      	movs	r6, #8
 8003e52:	46b4      	mov	ip, r6
 8003e54:	2608      	movs	r6, #8
 8003e56:	46b0      	mov	r8, r6
 8003e58:	44b8      	add	r8, r7
 8003e5a:	44c4      	add	ip, r8
 8003e5c:	4462      	add	r2, ip
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	18d3      	adds	r3, r2, r3
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b29      	cmp	r3, #41	; 0x29
 8003e66:	d111      	bne.n	8003e8c <printASCIIarray+0x10c0>
 8003e68:	190b      	adds	r3, r1, r4
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	4694      	mov	ip, r2
 8003e6e:	44bc      	add	ip, r7
 8003e70:	4463      	add	r3, ip
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	1902      	adds	r2, r0, r4
 8003e76:	2108      	movs	r1, #8
 8003e78:	468c      	mov	ip, r1
 8003e7a:	2108      	movs	r1, #8
 8003e7c:	4688      	mov	r8, r1
 8003e7e:	44b8      	add	r8, r7
 8003e80:	44c4      	add	ip, r8
 8003e82:	4462      	add	r2, ip
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	18d3      	adds	r3, r2, r3
 8003e88:	2204      	movs	r2, #4
 8003e8a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2a){dataASCII[i]=0x05;}
 8003e8c:	2162      	movs	r1, #98	; 0x62
 8003e8e:	248c      	movs	r4, #140	; 0x8c
 8003e90:	0064      	lsls	r4, r4, #1
 8003e92:	190b      	adds	r3, r1, r4
 8003e94:	2208      	movs	r2, #8
 8003e96:	4694      	mov	ip, r2
 8003e98:	44bc      	add	ip, r7
 8003e9a:	4463      	add	r3, ip
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	2080      	movs	r0, #128	; 0x80
 8003ea0:	1902      	adds	r2, r0, r4
 8003ea2:	2608      	movs	r6, #8
 8003ea4:	46b4      	mov	ip, r6
 8003ea6:	2608      	movs	r6, #8
 8003ea8:	46b0      	mov	r8, r6
 8003eaa:	44b8      	add	r8, r7
 8003eac:	44c4      	add	ip, r8
 8003eae:	4462      	add	r2, ip
 8003eb0:	6812      	ldr	r2, [r2, #0]
 8003eb2:	18d3      	adds	r3, r2, r3
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb8:	d111      	bne.n	8003ede <printASCIIarray+0x1112>
 8003eba:	190b      	adds	r3, r1, r4
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	4694      	mov	ip, r2
 8003ec0:	44bc      	add	ip, r7
 8003ec2:	4463      	add	r3, ip
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	1902      	adds	r2, r0, r4
 8003ec8:	2108      	movs	r1, #8
 8003eca:	468c      	mov	ip, r1
 8003ecc:	2108      	movs	r1, #8
 8003ece:	4688      	mov	r8, r1
 8003ed0:	44b8      	add	r8, r7
 8003ed2:	44c4      	add	ip, r8
 8003ed4:	4462      	add	r2, ip
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	18d3      	adds	r3, r2, r3
 8003eda:	2205      	movs	r2, #5
 8003edc:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2b){dataASCII[i]=0x06;}
 8003ede:	2162      	movs	r1, #98	; 0x62
 8003ee0:	248c      	movs	r4, #140	; 0x8c
 8003ee2:	0064      	lsls	r4, r4, #1
 8003ee4:	190b      	adds	r3, r1, r4
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	4694      	mov	ip, r2
 8003eea:	44bc      	add	ip, r7
 8003eec:	4463      	add	r3, ip
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	2080      	movs	r0, #128	; 0x80
 8003ef2:	1902      	adds	r2, r0, r4
 8003ef4:	2608      	movs	r6, #8
 8003ef6:	46b4      	mov	ip, r6
 8003ef8:	2608      	movs	r6, #8
 8003efa:	46b0      	mov	r8, r6
 8003efc:	44b8      	add	r8, r7
 8003efe:	44c4      	add	ip, r8
 8003f00:	4462      	add	r2, ip
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	18d3      	adds	r3, r2, r3
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b2b      	cmp	r3, #43	; 0x2b
 8003f0a:	d111      	bne.n	8003f30 <printASCIIarray+0x1164>
 8003f0c:	190b      	adds	r3, r1, r4
 8003f0e:	2208      	movs	r2, #8
 8003f10:	4694      	mov	ip, r2
 8003f12:	44bc      	add	ip, r7
 8003f14:	4463      	add	r3, ip
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	1902      	adds	r2, r0, r4
 8003f1a:	2108      	movs	r1, #8
 8003f1c:	468c      	mov	ip, r1
 8003f1e:	2108      	movs	r1, #8
 8003f20:	4688      	mov	r8, r1
 8003f22:	44b8      	add	r8, r7
 8003f24:	44c4      	add	ip, r8
 8003f26:	4462      	add	r2, ip
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	18d3      	adds	r3, r2, r3
 8003f2c:	2206      	movs	r2, #6
 8003f2e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2c){dataASCII[i]=0x07;}
 8003f30:	2162      	movs	r1, #98	; 0x62
 8003f32:	248c      	movs	r4, #140	; 0x8c
 8003f34:	0064      	lsls	r4, r4, #1
 8003f36:	190b      	adds	r3, r1, r4
 8003f38:	2208      	movs	r2, #8
 8003f3a:	4694      	mov	ip, r2
 8003f3c:	44bc      	add	ip, r7
 8003f3e:	4463      	add	r3, ip
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	2080      	movs	r0, #128	; 0x80
 8003f44:	1902      	adds	r2, r0, r4
 8003f46:	2608      	movs	r6, #8
 8003f48:	46b4      	mov	ip, r6
 8003f4a:	2608      	movs	r6, #8
 8003f4c:	46b0      	mov	r8, r6
 8003f4e:	44b8      	add	r8, r7
 8003f50:	44c4      	add	ip, r8
 8003f52:	4462      	add	r2, ip
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	18d3      	adds	r3, r2, r3
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b2c      	cmp	r3, #44	; 0x2c
 8003f5c:	d111      	bne.n	8003f82 <printASCIIarray+0x11b6>
 8003f5e:	190b      	adds	r3, r1, r4
 8003f60:	2208      	movs	r2, #8
 8003f62:	4694      	mov	ip, r2
 8003f64:	44bc      	add	ip, r7
 8003f66:	4463      	add	r3, ip
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	1902      	adds	r2, r0, r4
 8003f6c:	2108      	movs	r1, #8
 8003f6e:	468c      	mov	ip, r1
 8003f70:	2108      	movs	r1, #8
 8003f72:	4688      	mov	r8, r1
 8003f74:	44b8      	add	r8, r7
 8003f76:	44c4      	add	ip, r8
 8003f78:	4462      	add	r2, ip
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	18d3      	adds	r3, r2, r3
 8003f7e:	2207      	movs	r2, #7
 8003f80:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2d){dataASCII[i]=0x08;}
 8003f82:	2162      	movs	r1, #98	; 0x62
 8003f84:	248c      	movs	r4, #140	; 0x8c
 8003f86:	0064      	lsls	r4, r4, #1
 8003f88:	190b      	adds	r3, r1, r4
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	4694      	mov	ip, r2
 8003f8e:	44bc      	add	ip, r7
 8003f90:	4463      	add	r3, ip
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	2080      	movs	r0, #128	; 0x80
 8003f96:	1902      	adds	r2, r0, r4
 8003f98:	2608      	movs	r6, #8
 8003f9a:	46b4      	mov	ip, r6
 8003f9c:	2608      	movs	r6, #8
 8003f9e:	46b0      	mov	r8, r6
 8003fa0:	44b8      	add	r8, r7
 8003fa2:	44c4      	add	ip, r8
 8003fa4:	4462      	add	r2, ip
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	18d3      	adds	r3, r2, r3
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b2d      	cmp	r3, #45	; 0x2d
 8003fae:	d111      	bne.n	8003fd4 <printASCIIarray+0x1208>
 8003fb0:	190b      	adds	r3, r1, r4
 8003fb2:	2208      	movs	r2, #8
 8003fb4:	4694      	mov	ip, r2
 8003fb6:	44bc      	add	ip, r7
 8003fb8:	4463      	add	r3, ip
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	1902      	adds	r2, r0, r4
 8003fbe:	2108      	movs	r1, #8
 8003fc0:	468c      	mov	ip, r1
 8003fc2:	2108      	movs	r1, #8
 8003fc4:	4688      	mov	r8, r1
 8003fc6:	44b8      	add	r8, r7
 8003fc8:	44c4      	add	ip, r8
 8003fca:	4462      	add	r2, ip
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	18d3      	adds	r3, r2, r3
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2e){dataASCII[i]=0x09;}
 8003fd4:	2162      	movs	r1, #98	; 0x62
 8003fd6:	248c      	movs	r4, #140	; 0x8c
 8003fd8:	0064      	lsls	r4, r4, #1
 8003fda:	190b      	adds	r3, r1, r4
 8003fdc:	2208      	movs	r2, #8
 8003fde:	4694      	mov	ip, r2
 8003fe0:	44bc      	add	ip, r7
 8003fe2:	4463      	add	r3, ip
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	2080      	movs	r0, #128	; 0x80
 8003fe8:	1902      	adds	r2, r0, r4
 8003fea:	2608      	movs	r6, #8
 8003fec:	46b4      	mov	ip, r6
 8003fee:	2608      	movs	r6, #8
 8003ff0:	46b0      	mov	r8, r6
 8003ff2:	44b8      	add	r8, r7
 8003ff4:	44c4      	add	ip, r8
 8003ff6:	4462      	add	r2, ip
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	18d3      	adds	r3, r2, r3
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b2e      	cmp	r3, #46	; 0x2e
 8004000:	d111      	bne.n	8004026 <printASCIIarray+0x125a>
 8004002:	190b      	adds	r3, r1, r4
 8004004:	2208      	movs	r2, #8
 8004006:	4694      	mov	ip, r2
 8004008:	44bc      	add	ip, r7
 800400a:	4463      	add	r3, ip
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	1902      	adds	r2, r0, r4
 8004010:	2108      	movs	r1, #8
 8004012:	468c      	mov	ip, r1
 8004014:	2108      	movs	r1, #8
 8004016:	4688      	mov	r8, r1
 8004018:	44b8      	add	r8, r7
 800401a:	44c4      	add	ip, r8
 800401c:	4462      	add	r2, ip
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	18d3      	adds	r3, r2, r3
 8004022:	2209      	movs	r2, #9
 8004024:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2f){dataASCII[i]=0x0a;}
 8004026:	2162      	movs	r1, #98	; 0x62
 8004028:	248c      	movs	r4, #140	; 0x8c
 800402a:	0064      	lsls	r4, r4, #1
 800402c:	190b      	adds	r3, r1, r4
 800402e:	2208      	movs	r2, #8
 8004030:	4694      	mov	ip, r2
 8004032:	44bc      	add	ip, r7
 8004034:	4463      	add	r3, ip
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	2080      	movs	r0, #128	; 0x80
 800403a:	1902      	adds	r2, r0, r4
 800403c:	2608      	movs	r6, #8
 800403e:	46b4      	mov	ip, r6
 8004040:	2608      	movs	r6, #8
 8004042:	46b0      	mov	r8, r6
 8004044:	44b8      	add	r8, r7
 8004046:	44c4      	add	ip, r8
 8004048:	4462      	add	r2, ip
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	18d3      	adds	r3, r2, r3
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b2f      	cmp	r3, #47	; 0x2f
 8004052:	d111      	bne.n	8004078 <printASCIIarray+0x12ac>
 8004054:	190b      	adds	r3, r1, r4
 8004056:	2208      	movs	r2, #8
 8004058:	4694      	mov	ip, r2
 800405a:	44bc      	add	ip, r7
 800405c:	4463      	add	r3, ip
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	1902      	adds	r2, r0, r4
 8004062:	2108      	movs	r1, #8
 8004064:	468c      	mov	ip, r1
 8004066:	2108      	movs	r1, #8
 8004068:	4688      	mov	r8, r1
 800406a:	44b8      	add	r8, r7
 800406c:	44c4      	add	ip, r8
 800406e:	4462      	add	r2, ip
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	18d3      	adds	r3, r2, r3
 8004074:	220a      	movs	r2, #10
 8004076:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x30){dataASCII[i]=0x0b;}
 8004078:	2162      	movs	r1, #98	; 0x62
 800407a:	248c      	movs	r4, #140	; 0x8c
 800407c:	0064      	lsls	r4, r4, #1
 800407e:	190b      	adds	r3, r1, r4
 8004080:	2208      	movs	r2, #8
 8004082:	4694      	mov	ip, r2
 8004084:	44bc      	add	ip, r7
 8004086:	4463      	add	r3, ip
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	2080      	movs	r0, #128	; 0x80
 800408c:	1902      	adds	r2, r0, r4
 800408e:	2608      	movs	r6, #8
 8004090:	46b4      	mov	ip, r6
 8004092:	2608      	movs	r6, #8
 8004094:	46b0      	mov	r8, r6
 8004096:	44b8      	add	r8, r7
 8004098:	44c4      	add	ip, r8
 800409a:	4462      	add	r2, ip
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	18d3      	adds	r3, r2, r3
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b30      	cmp	r3, #48	; 0x30
 80040a4:	d111      	bne.n	80040ca <printASCIIarray+0x12fe>
 80040a6:	190b      	adds	r3, r1, r4
 80040a8:	2208      	movs	r2, #8
 80040aa:	4694      	mov	ip, r2
 80040ac:	44bc      	add	ip, r7
 80040ae:	4463      	add	r3, ip
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	1902      	adds	r2, r0, r4
 80040b4:	2108      	movs	r1, #8
 80040b6:	468c      	mov	ip, r1
 80040b8:	2108      	movs	r1, #8
 80040ba:	4688      	mov	r8, r1
 80040bc:	44b8      	add	r8, r7
 80040be:	44c4      	add	ip, r8
 80040c0:	4462      	add	r2, ip
 80040c2:	6812      	ldr	r2, [r2, #0]
 80040c4:	18d3      	adds	r3, r2, r3
 80040c6:	220b      	movs	r2, #11
 80040c8:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x31){dataASCII[i]=0x0c;}
 80040ca:	2162      	movs	r1, #98	; 0x62
 80040cc:	248c      	movs	r4, #140	; 0x8c
 80040ce:	0064      	lsls	r4, r4, #1
 80040d0:	190b      	adds	r3, r1, r4
 80040d2:	2208      	movs	r2, #8
 80040d4:	4694      	mov	ip, r2
 80040d6:	44bc      	add	ip, r7
 80040d8:	4463      	add	r3, ip
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	2080      	movs	r0, #128	; 0x80
 80040de:	1902      	adds	r2, r0, r4
 80040e0:	2608      	movs	r6, #8
 80040e2:	46b4      	mov	ip, r6
 80040e4:	2608      	movs	r6, #8
 80040e6:	46b0      	mov	r8, r6
 80040e8:	44b8      	add	r8, r7
 80040ea:	44c4      	add	ip, r8
 80040ec:	4462      	add	r2, ip
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	18d3      	adds	r3, r2, r3
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b31      	cmp	r3, #49	; 0x31
 80040f6:	d111      	bne.n	800411c <printASCIIarray+0x1350>
 80040f8:	190b      	adds	r3, r1, r4
 80040fa:	2208      	movs	r2, #8
 80040fc:	4694      	mov	ip, r2
 80040fe:	44bc      	add	ip, r7
 8004100:	4463      	add	r3, ip
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	1902      	adds	r2, r0, r4
 8004106:	2108      	movs	r1, #8
 8004108:	468c      	mov	ip, r1
 800410a:	2108      	movs	r1, #8
 800410c:	4688      	mov	r8, r1
 800410e:	44b8      	add	r8, r7
 8004110:	44c4      	add	ip, r8
 8004112:	4462      	add	r2, ip
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	18d3      	adds	r3, r2, r3
 8004118:	220c      	movs	r2, #12
 800411a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x32){dataASCII[i]=0x0d;}
 800411c:	2162      	movs	r1, #98	; 0x62
 800411e:	248c      	movs	r4, #140	; 0x8c
 8004120:	0064      	lsls	r4, r4, #1
 8004122:	190b      	adds	r3, r1, r4
 8004124:	2208      	movs	r2, #8
 8004126:	4694      	mov	ip, r2
 8004128:	44bc      	add	ip, r7
 800412a:	4463      	add	r3, ip
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	2080      	movs	r0, #128	; 0x80
 8004130:	1902      	adds	r2, r0, r4
 8004132:	2608      	movs	r6, #8
 8004134:	46b4      	mov	ip, r6
 8004136:	2608      	movs	r6, #8
 8004138:	46b0      	mov	r8, r6
 800413a:	44b8      	add	r8, r7
 800413c:	44c4      	add	ip, r8
 800413e:	4462      	add	r2, ip
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	18d3      	adds	r3, r2, r3
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b32      	cmp	r3, #50	; 0x32
 8004148:	d111      	bne.n	800416e <printASCIIarray+0x13a2>
 800414a:	190b      	adds	r3, r1, r4
 800414c:	2208      	movs	r2, #8
 800414e:	4694      	mov	ip, r2
 8004150:	44bc      	add	ip, r7
 8004152:	4463      	add	r3, ip
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	1902      	adds	r2, r0, r4
 8004158:	2108      	movs	r1, #8
 800415a:	468c      	mov	ip, r1
 800415c:	2108      	movs	r1, #8
 800415e:	4688      	mov	r8, r1
 8004160:	44b8      	add	r8, r7
 8004162:	44c4      	add	ip, r8
 8004164:	4462      	add	r2, ip
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	18d3      	adds	r3, r2, r3
 800416a:	220d      	movs	r2, #13
 800416c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x33){dataASCII[i]=0x0e;}
 800416e:	2162      	movs	r1, #98	; 0x62
 8004170:	248c      	movs	r4, #140	; 0x8c
 8004172:	0064      	lsls	r4, r4, #1
 8004174:	190b      	adds	r3, r1, r4
 8004176:	2208      	movs	r2, #8
 8004178:	4694      	mov	ip, r2
 800417a:	44bc      	add	ip, r7
 800417c:	4463      	add	r3, ip
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	2080      	movs	r0, #128	; 0x80
 8004182:	1902      	adds	r2, r0, r4
 8004184:	2608      	movs	r6, #8
 8004186:	46b4      	mov	ip, r6
 8004188:	2608      	movs	r6, #8
 800418a:	46b0      	mov	r8, r6
 800418c:	44b8      	add	r8, r7
 800418e:	44c4      	add	ip, r8
 8004190:	4462      	add	r2, ip
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	18d3      	adds	r3, r2, r3
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b33      	cmp	r3, #51	; 0x33
 800419a:	d111      	bne.n	80041c0 <printASCIIarray+0x13f4>
 800419c:	190b      	adds	r3, r1, r4
 800419e:	2208      	movs	r2, #8
 80041a0:	4694      	mov	ip, r2
 80041a2:	44bc      	add	ip, r7
 80041a4:	4463      	add	r3, ip
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	1902      	adds	r2, r0, r4
 80041aa:	2108      	movs	r1, #8
 80041ac:	468c      	mov	ip, r1
 80041ae:	2108      	movs	r1, #8
 80041b0:	4688      	mov	r8, r1
 80041b2:	44b8      	add	r8, r7
 80041b4:	44c4      	add	ip, r8
 80041b6:	4462      	add	r2, ip
 80041b8:	6812      	ldr	r2, [r2, #0]
 80041ba:	18d3      	adds	r3, r2, r3
 80041bc:	220e      	movs	r2, #14
 80041be:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x34){dataASCII[i]=0x0f;}
 80041c0:	2162      	movs	r1, #98	; 0x62
 80041c2:	248c      	movs	r4, #140	; 0x8c
 80041c4:	0064      	lsls	r4, r4, #1
 80041c6:	190b      	adds	r3, r1, r4
 80041c8:	2208      	movs	r2, #8
 80041ca:	4694      	mov	ip, r2
 80041cc:	44bc      	add	ip, r7
 80041ce:	4463      	add	r3, ip
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	2080      	movs	r0, #128	; 0x80
 80041d4:	1902      	adds	r2, r0, r4
 80041d6:	2608      	movs	r6, #8
 80041d8:	46b4      	mov	ip, r6
 80041da:	2608      	movs	r6, #8
 80041dc:	46b0      	mov	r8, r6
 80041de:	44b8      	add	r8, r7
 80041e0:	44c4      	add	ip, r8
 80041e2:	4462      	add	r2, ip
 80041e4:	6812      	ldr	r2, [r2, #0]
 80041e6:	18d3      	adds	r3, r2, r3
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b34      	cmp	r3, #52	; 0x34
 80041ec:	d111      	bne.n	8004212 <printASCIIarray+0x1446>
 80041ee:	190b      	adds	r3, r1, r4
 80041f0:	2208      	movs	r2, #8
 80041f2:	4694      	mov	ip, r2
 80041f4:	44bc      	add	ip, r7
 80041f6:	4463      	add	r3, ip
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	1902      	adds	r2, r0, r4
 80041fc:	2108      	movs	r1, #8
 80041fe:	468c      	mov	ip, r1
 8004200:	2108      	movs	r1, #8
 8004202:	4688      	mov	r8, r1
 8004204:	44b8      	add	r8, r7
 8004206:	44c4      	add	ip, r8
 8004208:	4462      	add	r2, ip
 800420a:	6812      	ldr	r2, [r2, #0]
 800420c:	18d3      	adds	r3, r2, r3
 800420e:	220f      	movs	r2, #15
 8004210:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x35){dataASCII[i]=0x10;}
 8004212:	2162      	movs	r1, #98	; 0x62
 8004214:	248c      	movs	r4, #140	; 0x8c
 8004216:	0064      	lsls	r4, r4, #1
 8004218:	190b      	adds	r3, r1, r4
 800421a:	2208      	movs	r2, #8
 800421c:	4694      	mov	ip, r2
 800421e:	44bc      	add	ip, r7
 8004220:	4463      	add	r3, ip
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	2080      	movs	r0, #128	; 0x80
 8004226:	1902      	adds	r2, r0, r4
 8004228:	2608      	movs	r6, #8
 800422a:	46b4      	mov	ip, r6
 800422c:	2608      	movs	r6, #8
 800422e:	46b0      	mov	r8, r6
 8004230:	44b8      	add	r8, r7
 8004232:	44c4      	add	ip, r8
 8004234:	4462      	add	r2, ip
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	18d3      	adds	r3, r2, r3
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b35      	cmp	r3, #53	; 0x35
 800423e:	d111      	bne.n	8004264 <printASCIIarray+0x1498>
 8004240:	190b      	adds	r3, r1, r4
 8004242:	2208      	movs	r2, #8
 8004244:	4694      	mov	ip, r2
 8004246:	44bc      	add	ip, r7
 8004248:	4463      	add	r3, ip
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	1902      	adds	r2, r0, r4
 800424e:	2108      	movs	r1, #8
 8004250:	468c      	mov	ip, r1
 8004252:	2108      	movs	r1, #8
 8004254:	4688      	mov	r8, r1
 8004256:	44b8      	add	r8, r7
 8004258:	44c4      	add	ip, r8
 800425a:	4462      	add	r2, ip
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	18d3      	adds	r3, r2, r3
 8004260:	2210      	movs	r2, #16
 8004262:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x36){dataASCII[i]=0x11;}
 8004264:	2162      	movs	r1, #98	; 0x62
 8004266:	248c      	movs	r4, #140	; 0x8c
 8004268:	0064      	lsls	r4, r4, #1
 800426a:	190b      	adds	r3, r1, r4
 800426c:	2208      	movs	r2, #8
 800426e:	4694      	mov	ip, r2
 8004270:	44bc      	add	ip, r7
 8004272:	4463      	add	r3, ip
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	2080      	movs	r0, #128	; 0x80
 8004278:	1902      	adds	r2, r0, r4
 800427a:	2608      	movs	r6, #8
 800427c:	46b4      	mov	ip, r6
 800427e:	2608      	movs	r6, #8
 8004280:	46b0      	mov	r8, r6
 8004282:	44b8      	add	r8, r7
 8004284:	44c4      	add	ip, r8
 8004286:	4462      	add	r2, ip
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	18d3      	adds	r3, r2, r3
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b36      	cmp	r3, #54	; 0x36
 8004290:	d111      	bne.n	80042b6 <printASCIIarray+0x14ea>
 8004292:	190b      	adds	r3, r1, r4
 8004294:	2208      	movs	r2, #8
 8004296:	4694      	mov	ip, r2
 8004298:	44bc      	add	ip, r7
 800429a:	4463      	add	r3, ip
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	1902      	adds	r2, r0, r4
 80042a0:	2108      	movs	r1, #8
 80042a2:	468c      	mov	ip, r1
 80042a4:	2108      	movs	r1, #8
 80042a6:	4688      	mov	r8, r1
 80042a8:	44b8      	add	r8, r7
 80042aa:	44c4      	add	ip, r8
 80042ac:	4462      	add	r2, ip
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	18d3      	adds	r3, r2, r3
 80042b2:	2211      	movs	r2, #17
 80042b4:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x37){dataASCII[i]=0x12;}
 80042b6:	2162      	movs	r1, #98	; 0x62
 80042b8:	248c      	movs	r4, #140	; 0x8c
 80042ba:	0064      	lsls	r4, r4, #1
 80042bc:	190b      	adds	r3, r1, r4
 80042be:	2208      	movs	r2, #8
 80042c0:	4694      	mov	ip, r2
 80042c2:	44bc      	add	ip, r7
 80042c4:	4463      	add	r3, ip
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	2080      	movs	r0, #128	; 0x80
 80042ca:	1902      	adds	r2, r0, r4
 80042cc:	2608      	movs	r6, #8
 80042ce:	46b4      	mov	ip, r6
 80042d0:	2608      	movs	r6, #8
 80042d2:	46b0      	mov	r8, r6
 80042d4:	44b8      	add	r8, r7
 80042d6:	44c4      	add	ip, r8
 80042d8:	4462      	add	r2, ip
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	18d3      	adds	r3, r2, r3
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b37      	cmp	r3, #55	; 0x37
 80042e2:	d111      	bne.n	8004308 <printASCIIarray+0x153c>
 80042e4:	190b      	adds	r3, r1, r4
 80042e6:	2208      	movs	r2, #8
 80042e8:	4694      	mov	ip, r2
 80042ea:	44bc      	add	ip, r7
 80042ec:	4463      	add	r3, ip
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	1902      	adds	r2, r0, r4
 80042f2:	2108      	movs	r1, #8
 80042f4:	468c      	mov	ip, r1
 80042f6:	2108      	movs	r1, #8
 80042f8:	4688      	mov	r8, r1
 80042fa:	44b8      	add	r8, r7
 80042fc:	44c4      	add	ip, r8
 80042fe:	4462      	add	r2, ip
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	18d3      	adds	r3, r2, r3
 8004304:	2212      	movs	r2, #18
 8004306:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x38){dataASCII[i]=0x13;}
 8004308:	2162      	movs	r1, #98	; 0x62
 800430a:	248c      	movs	r4, #140	; 0x8c
 800430c:	0064      	lsls	r4, r4, #1
 800430e:	190b      	adds	r3, r1, r4
 8004310:	2208      	movs	r2, #8
 8004312:	4694      	mov	ip, r2
 8004314:	44bc      	add	ip, r7
 8004316:	4463      	add	r3, ip
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	2080      	movs	r0, #128	; 0x80
 800431c:	1902      	adds	r2, r0, r4
 800431e:	2608      	movs	r6, #8
 8004320:	46b4      	mov	ip, r6
 8004322:	2608      	movs	r6, #8
 8004324:	46b0      	mov	r8, r6
 8004326:	44b8      	add	r8, r7
 8004328:	44c4      	add	ip, r8
 800432a:	4462      	add	r2, ip
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	18d3      	adds	r3, r2, r3
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b38      	cmp	r3, #56	; 0x38
 8004334:	d111      	bne.n	800435a <printASCIIarray+0x158e>
 8004336:	190b      	adds	r3, r1, r4
 8004338:	2208      	movs	r2, #8
 800433a:	4694      	mov	ip, r2
 800433c:	44bc      	add	ip, r7
 800433e:	4463      	add	r3, ip
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	1902      	adds	r2, r0, r4
 8004344:	2108      	movs	r1, #8
 8004346:	468c      	mov	ip, r1
 8004348:	2108      	movs	r1, #8
 800434a:	4688      	mov	r8, r1
 800434c:	44b8      	add	r8, r7
 800434e:	44c4      	add	ip, r8
 8004350:	4462      	add	r2, ip
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	18d3      	adds	r3, r2, r3
 8004356:	2213      	movs	r2, #19
 8004358:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x39){dataASCII[i]=0x14;}
 800435a:	2162      	movs	r1, #98	; 0x62
 800435c:	248c      	movs	r4, #140	; 0x8c
 800435e:	0064      	lsls	r4, r4, #1
 8004360:	190b      	adds	r3, r1, r4
 8004362:	2208      	movs	r2, #8
 8004364:	4694      	mov	ip, r2
 8004366:	44bc      	add	ip, r7
 8004368:	4463      	add	r3, ip
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	2080      	movs	r0, #128	; 0x80
 800436e:	1902      	adds	r2, r0, r4
 8004370:	2608      	movs	r6, #8
 8004372:	46b4      	mov	ip, r6
 8004374:	2608      	movs	r6, #8
 8004376:	46b0      	mov	r8, r6
 8004378:	44b8      	add	r8, r7
 800437a:	44c4      	add	ip, r8
 800437c:	4462      	add	r2, ip
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	18d3      	adds	r3, r2, r3
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b39      	cmp	r3, #57	; 0x39
 8004386:	d111      	bne.n	80043ac <printASCIIarray+0x15e0>
 8004388:	190b      	adds	r3, r1, r4
 800438a:	2208      	movs	r2, #8
 800438c:	4694      	mov	ip, r2
 800438e:	44bc      	add	ip, r7
 8004390:	4463      	add	r3, ip
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	1902      	adds	r2, r0, r4
 8004396:	2108      	movs	r1, #8
 8004398:	468c      	mov	ip, r1
 800439a:	2108      	movs	r1, #8
 800439c:	4688      	mov	r8, r1
 800439e:	44b8      	add	r8, r7
 80043a0:	44c4      	add	ip, r8
 80043a2:	4462      	add	r2, ip
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	18d3      	adds	r3, r2, r3
 80043a8:	2214      	movs	r2, #20
 80043aa:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3a){dataASCII[i]=0x15;}
 80043ac:	2162      	movs	r1, #98	; 0x62
 80043ae:	248c      	movs	r4, #140	; 0x8c
 80043b0:	0064      	lsls	r4, r4, #1
 80043b2:	190b      	adds	r3, r1, r4
 80043b4:	2208      	movs	r2, #8
 80043b6:	4694      	mov	ip, r2
 80043b8:	44bc      	add	ip, r7
 80043ba:	4463      	add	r3, ip
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	2080      	movs	r0, #128	; 0x80
 80043c0:	1902      	adds	r2, r0, r4
 80043c2:	2608      	movs	r6, #8
 80043c4:	46b4      	mov	ip, r6
 80043c6:	2608      	movs	r6, #8
 80043c8:	46b0      	mov	r8, r6
 80043ca:	44b8      	add	r8, r7
 80043cc:	44c4      	add	ip, r8
 80043ce:	4462      	add	r2, ip
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	18d3      	adds	r3, r2, r3
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b3a      	cmp	r3, #58	; 0x3a
 80043d8:	d111      	bne.n	80043fe <printASCIIarray+0x1632>
 80043da:	190b      	adds	r3, r1, r4
 80043dc:	2208      	movs	r2, #8
 80043de:	4694      	mov	ip, r2
 80043e0:	44bc      	add	ip, r7
 80043e2:	4463      	add	r3, ip
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	1902      	adds	r2, r0, r4
 80043e8:	2108      	movs	r1, #8
 80043ea:	468c      	mov	ip, r1
 80043ec:	2108      	movs	r1, #8
 80043ee:	4688      	mov	r8, r1
 80043f0:	44b8      	add	r8, r7
 80043f2:	44c4      	add	ip, r8
 80043f4:	4462      	add	r2, ip
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	18d3      	adds	r3, r2, r3
 80043fa:	2215      	movs	r2, #21
 80043fc:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3b){dataASCII[i]=0x16;}
 80043fe:	2162      	movs	r1, #98	; 0x62
 8004400:	248c      	movs	r4, #140	; 0x8c
 8004402:	0064      	lsls	r4, r4, #1
 8004404:	190b      	adds	r3, r1, r4
 8004406:	2208      	movs	r2, #8
 8004408:	4694      	mov	ip, r2
 800440a:	44bc      	add	ip, r7
 800440c:	4463      	add	r3, ip
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	2080      	movs	r0, #128	; 0x80
 8004412:	1902      	adds	r2, r0, r4
 8004414:	2608      	movs	r6, #8
 8004416:	46b4      	mov	ip, r6
 8004418:	2608      	movs	r6, #8
 800441a:	46b0      	mov	r8, r6
 800441c:	44b8      	add	r8, r7
 800441e:	44c4      	add	ip, r8
 8004420:	4462      	add	r2, ip
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	18d3      	adds	r3, r2, r3
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b3b      	cmp	r3, #59	; 0x3b
 800442a:	d111      	bne.n	8004450 <printASCIIarray+0x1684>
 800442c:	190b      	adds	r3, r1, r4
 800442e:	2208      	movs	r2, #8
 8004430:	4694      	mov	ip, r2
 8004432:	44bc      	add	ip, r7
 8004434:	4463      	add	r3, ip
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	1902      	adds	r2, r0, r4
 800443a:	2108      	movs	r1, #8
 800443c:	468c      	mov	ip, r1
 800443e:	2108      	movs	r1, #8
 8004440:	4688      	mov	r8, r1
 8004442:	44b8      	add	r8, r7
 8004444:	44c4      	add	ip, r8
 8004446:	4462      	add	r2, ip
 8004448:	6812      	ldr	r2, [r2, #0]
 800444a:	18d3      	adds	r3, r2, r3
 800444c:	2216      	movs	r2, #22
 800444e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3c){dataASCII[i]=0x17;}
 8004450:	2162      	movs	r1, #98	; 0x62
 8004452:	248c      	movs	r4, #140	; 0x8c
 8004454:	0064      	lsls	r4, r4, #1
 8004456:	190b      	adds	r3, r1, r4
 8004458:	2208      	movs	r2, #8
 800445a:	4694      	mov	ip, r2
 800445c:	44bc      	add	ip, r7
 800445e:	4463      	add	r3, ip
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	2080      	movs	r0, #128	; 0x80
 8004464:	1902      	adds	r2, r0, r4
 8004466:	2608      	movs	r6, #8
 8004468:	46b4      	mov	ip, r6
 800446a:	2608      	movs	r6, #8
 800446c:	46b0      	mov	r8, r6
 800446e:	44b8      	add	r8, r7
 8004470:	44c4      	add	ip, r8
 8004472:	4462      	add	r2, ip
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	18d3      	adds	r3, r2, r3
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b3c      	cmp	r3, #60	; 0x3c
 800447c:	d111      	bne.n	80044a2 <printASCIIarray+0x16d6>
 800447e:	190b      	adds	r3, r1, r4
 8004480:	2208      	movs	r2, #8
 8004482:	4694      	mov	ip, r2
 8004484:	44bc      	add	ip, r7
 8004486:	4463      	add	r3, ip
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	1902      	adds	r2, r0, r4
 800448c:	2108      	movs	r1, #8
 800448e:	468c      	mov	ip, r1
 8004490:	2108      	movs	r1, #8
 8004492:	4688      	mov	r8, r1
 8004494:	44b8      	add	r8, r7
 8004496:	44c4      	add	ip, r8
 8004498:	4462      	add	r2, ip
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	18d3      	adds	r3, r2, r3
 800449e:	2217      	movs	r2, #23
 80044a0:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3d){dataASCII[i]=0x18;}
 80044a2:	2162      	movs	r1, #98	; 0x62
 80044a4:	248c      	movs	r4, #140	; 0x8c
 80044a6:	0064      	lsls	r4, r4, #1
 80044a8:	190b      	adds	r3, r1, r4
 80044aa:	2208      	movs	r2, #8
 80044ac:	4694      	mov	ip, r2
 80044ae:	44bc      	add	ip, r7
 80044b0:	4463      	add	r3, ip
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	2080      	movs	r0, #128	; 0x80
 80044b6:	1902      	adds	r2, r0, r4
 80044b8:	2608      	movs	r6, #8
 80044ba:	46b4      	mov	ip, r6
 80044bc:	2608      	movs	r6, #8
 80044be:	46b0      	mov	r8, r6
 80044c0:	44b8      	add	r8, r7
 80044c2:	44c4      	add	ip, r8
 80044c4:	4462      	add	r2, ip
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	18d3      	adds	r3, r2, r3
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b3d      	cmp	r3, #61	; 0x3d
 80044ce:	d111      	bne.n	80044f4 <printASCIIarray+0x1728>
 80044d0:	190b      	adds	r3, r1, r4
 80044d2:	2208      	movs	r2, #8
 80044d4:	4694      	mov	ip, r2
 80044d6:	44bc      	add	ip, r7
 80044d8:	4463      	add	r3, ip
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	1902      	adds	r2, r0, r4
 80044de:	2108      	movs	r1, #8
 80044e0:	468c      	mov	ip, r1
 80044e2:	2108      	movs	r1, #8
 80044e4:	4688      	mov	r8, r1
 80044e6:	44b8      	add	r8, r7
 80044e8:	44c4      	add	ip, r8
 80044ea:	4462      	add	r2, ip
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	18d3      	adds	r3, r2, r3
 80044f0:	2218      	movs	r2, #24
 80044f2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3e){dataASCII[i]=0x19;}
 80044f4:	2162      	movs	r1, #98	; 0x62
 80044f6:	248c      	movs	r4, #140	; 0x8c
 80044f8:	0064      	lsls	r4, r4, #1
 80044fa:	190b      	adds	r3, r1, r4
 80044fc:	2208      	movs	r2, #8
 80044fe:	4694      	mov	ip, r2
 8004500:	44bc      	add	ip, r7
 8004502:	4463      	add	r3, ip
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	2080      	movs	r0, #128	; 0x80
 8004508:	1902      	adds	r2, r0, r4
 800450a:	2608      	movs	r6, #8
 800450c:	46b4      	mov	ip, r6
 800450e:	2608      	movs	r6, #8
 8004510:	46b0      	mov	r8, r6
 8004512:	44b8      	add	r8, r7
 8004514:	44c4      	add	ip, r8
 8004516:	4462      	add	r2, ip
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	18d3      	adds	r3, r2, r3
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b3e      	cmp	r3, #62	; 0x3e
 8004520:	d111      	bne.n	8004546 <printASCIIarray+0x177a>
 8004522:	190b      	adds	r3, r1, r4
 8004524:	2208      	movs	r2, #8
 8004526:	4694      	mov	ip, r2
 8004528:	44bc      	add	ip, r7
 800452a:	4463      	add	r3, ip
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	1902      	adds	r2, r0, r4
 8004530:	2108      	movs	r1, #8
 8004532:	468c      	mov	ip, r1
 8004534:	2108      	movs	r1, #8
 8004536:	4688      	mov	r8, r1
 8004538:	44b8      	add	r8, r7
 800453a:	44c4      	add	ip, r8
 800453c:	4462      	add	r2, ip
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	18d3      	adds	r3, r2, r3
 8004542:	2219      	movs	r2, #25
 8004544:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3f){dataASCII[i]=0x1a;}
 8004546:	2162      	movs	r1, #98	; 0x62
 8004548:	248c      	movs	r4, #140	; 0x8c
 800454a:	0064      	lsls	r4, r4, #1
 800454c:	190b      	adds	r3, r1, r4
 800454e:	2208      	movs	r2, #8
 8004550:	4694      	mov	ip, r2
 8004552:	44bc      	add	ip, r7
 8004554:	4463      	add	r3, ip
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	2080      	movs	r0, #128	; 0x80
 800455a:	1902      	adds	r2, r0, r4
 800455c:	2608      	movs	r6, #8
 800455e:	46b4      	mov	ip, r6
 8004560:	2608      	movs	r6, #8
 8004562:	46b0      	mov	r8, r6
 8004564:	44b8      	add	r8, r7
 8004566:	44c4      	add	ip, r8
 8004568:	4462      	add	r2, ip
 800456a:	6812      	ldr	r2, [r2, #0]
 800456c:	18d3      	adds	r3, r2, r3
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b3f      	cmp	r3, #63	; 0x3f
 8004572:	d111      	bne.n	8004598 <printASCIIarray+0x17cc>
 8004574:	190b      	adds	r3, r1, r4
 8004576:	2208      	movs	r2, #8
 8004578:	4694      	mov	ip, r2
 800457a:	44bc      	add	ip, r7
 800457c:	4463      	add	r3, ip
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	1902      	adds	r2, r0, r4
 8004582:	2108      	movs	r1, #8
 8004584:	468c      	mov	ip, r1
 8004586:	2108      	movs	r1, #8
 8004588:	4688      	mov	r8, r1
 800458a:	44b8      	add	r8, r7
 800458c:	44c4      	add	ip, r8
 800458e:	4462      	add	r2, ip
 8004590:	6812      	ldr	r2, [r2, #0]
 8004592:	18d3      	adds	r3, r2, r3
 8004594:	221a      	movs	r2, #26
 8004596:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5b){dataASCII[i]=0x1b;}
 8004598:	2162      	movs	r1, #98	; 0x62
 800459a:	248c      	movs	r4, #140	; 0x8c
 800459c:	0064      	lsls	r4, r4, #1
 800459e:	190b      	adds	r3, r1, r4
 80045a0:	2208      	movs	r2, #8
 80045a2:	4694      	mov	ip, r2
 80045a4:	44bc      	add	ip, r7
 80045a6:	4463      	add	r3, ip
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	2080      	movs	r0, #128	; 0x80
 80045ac:	1902      	adds	r2, r0, r4
 80045ae:	2608      	movs	r6, #8
 80045b0:	46b4      	mov	ip, r6
 80045b2:	2608      	movs	r6, #8
 80045b4:	46b0      	mov	r8, r6
 80045b6:	44b8      	add	r8, r7
 80045b8:	44c4      	add	ip, r8
 80045ba:	4462      	add	r2, ip
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	18d3      	adds	r3, r2, r3
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b5b      	cmp	r3, #91	; 0x5b
 80045c4:	d111      	bne.n	80045ea <printASCIIarray+0x181e>
 80045c6:	190b      	adds	r3, r1, r4
 80045c8:	2208      	movs	r2, #8
 80045ca:	4694      	mov	ip, r2
 80045cc:	44bc      	add	ip, r7
 80045ce:	4463      	add	r3, ip
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	1902      	adds	r2, r0, r4
 80045d4:	2108      	movs	r1, #8
 80045d6:	468c      	mov	ip, r1
 80045d8:	2108      	movs	r1, #8
 80045da:	4688      	mov	r8, r1
 80045dc:	44b8      	add	r8, r7
 80045de:	44c4      	add	ip, r8
 80045e0:	4462      	add	r2, ip
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	18d3      	adds	r3, r2, r3
 80045e6:	221b      	movs	r2, #27
 80045e8:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5c){dataASCII[i]=0x1c;}
 80045ea:	2162      	movs	r1, #98	; 0x62
 80045ec:	248c      	movs	r4, #140	; 0x8c
 80045ee:	0064      	lsls	r4, r4, #1
 80045f0:	190b      	adds	r3, r1, r4
 80045f2:	2208      	movs	r2, #8
 80045f4:	4694      	mov	ip, r2
 80045f6:	44bc      	add	ip, r7
 80045f8:	4463      	add	r3, ip
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	2080      	movs	r0, #128	; 0x80
 80045fe:	1902      	adds	r2, r0, r4
 8004600:	2608      	movs	r6, #8
 8004602:	46b4      	mov	ip, r6
 8004604:	2608      	movs	r6, #8
 8004606:	46b0      	mov	r8, r6
 8004608:	44b8      	add	r8, r7
 800460a:	44c4      	add	ip, r8
 800460c:	4462      	add	r2, ip
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	18d3      	adds	r3, r2, r3
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b5c      	cmp	r3, #92	; 0x5c
 8004616:	d111      	bne.n	800463c <printASCIIarray+0x1870>
 8004618:	190b      	adds	r3, r1, r4
 800461a:	2208      	movs	r2, #8
 800461c:	4694      	mov	ip, r2
 800461e:	44bc      	add	ip, r7
 8004620:	4463      	add	r3, ip
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	1902      	adds	r2, r0, r4
 8004626:	2108      	movs	r1, #8
 8004628:	468c      	mov	ip, r1
 800462a:	2108      	movs	r1, #8
 800462c:	4688      	mov	r8, r1
 800462e:	44b8      	add	r8, r7
 8004630:	44c4      	add	ip, r8
 8004632:	4462      	add	r2, ip
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	18d3      	adds	r3, r2, r3
 8004638:	221c      	movs	r2, #28
 800463a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5d){dataASCII[i]=0x1d;}
 800463c:	2162      	movs	r1, #98	; 0x62
 800463e:	248c      	movs	r4, #140	; 0x8c
 8004640:	0064      	lsls	r4, r4, #1
 8004642:	190b      	adds	r3, r1, r4
 8004644:	2208      	movs	r2, #8
 8004646:	4694      	mov	ip, r2
 8004648:	44bc      	add	ip, r7
 800464a:	4463      	add	r3, ip
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	2080      	movs	r0, #128	; 0x80
 8004650:	1902      	adds	r2, r0, r4
 8004652:	2608      	movs	r6, #8
 8004654:	46b4      	mov	ip, r6
 8004656:	2608      	movs	r6, #8
 8004658:	46b0      	mov	r8, r6
 800465a:	44b8      	add	r8, r7
 800465c:	44c4      	add	ip, r8
 800465e:	4462      	add	r2, ip
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	18d3      	adds	r3, r2, r3
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b5d      	cmp	r3, #93	; 0x5d
 8004668:	d111      	bne.n	800468e <printASCIIarray+0x18c2>
 800466a:	190b      	adds	r3, r1, r4
 800466c:	2208      	movs	r2, #8
 800466e:	4694      	mov	ip, r2
 8004670:	44bc      	add	ip, r7
 8004672:	4463      	add	r3, ip
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	1902      	adds	r2, r0, r4
 8004678:	2108      	movs	r1, #8
 800467a:	468c      	mov	ip, r1
 800467c:	2108      	movs	r1, #8
 800467e:	4688      	mov	r8, r1
 8004680:	44b8      	add	r8, r7
 8004682:	44c4      	add	ip, r8
 8004684:	4462      	add	r2, ip
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	18d3      	adds	r3, r2, r3
 800468a:	221d      	movs	r2, #29
 800468c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5f){dataASCII[i]=0x1e;}
 800468e:	2162      	movs	r1, #98	; 0x62
 8004690:	248c      	movs	r4, #140	; 0x8c
 8004692:	0064      	lsls	r4, r4, #1
 8004694:	190b      	adds	r3, r1, r4
 8004696:	2208      	movs	r2, #8
 8004698:	4694      	mov	ip, r2
 800469a:	44bc      	add	ip, r7
 800469c:	4463      	add	r3, ip
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	2080      	movs	r0, #128	; 0x80
 80046a2:	1902      	adds	r2, r0, r4
 80046a4:	2608      	movs	r6, #8
 80046a6:	46b4      	mov	ip, r6
 80046a8:	2608      	movs	r6, #8
 80046aa:	46b0      	mov	r8, r6
 80046ac:	44b8      	add	r8, r7
 80046ae:	44c4      	add	ip, r8
 80046b0:	4462      	add	r2, ip
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	18d3      	adds	r3, r2, r3
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b5f      	cmp	r3, #95	; 0x5f
 80046ba:	d111      	bne.n	80046e0 <printASCIIarray+0x1914>
 80046bc:	190b      	adds	r3, r1, r4
 80046be:	2208      	movs	r2, #8
 80046c0:	4694      	mov	ip, r2
 80046c2:	44bc      	add	ip, r7
 80046c4:	4463      	add	r3, ip
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	1902      	adds	r2, r0, r4
 80046ca:	2108      	movs	r1, #8
 80046cc:	468c      	mov	ip, r1
 80046ce:	2108      	movs	r1, #8
 80046d0:	4688      	mov	r8, r1
 80046d2:	44b8      	add	r8, r7
 80046d4:	44c4      	add	ip, r8
 80046d6:	4462      	add	r2, ip
 80046d8:	6812      	ldr	r2, [r2, #0]
 80046da:	18d3      	adds	r3, r2, r3
 80046dc:	221e      	movs	r2, #30
 80046de:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x7c){dataASCII[i]=0x1f;}
 80046e0:	2162      	movs	r1, #98	; 0x62
 80046e2:	248c      	movs	r4, #140	; 0x8c
 80046e4:	0064      	lsls	r4, r4, #1
 80046e6:	190b      	adds	r3, r1, r4
 80046e8:	2208      	movs	r2, #8
 80046ea:	4694      	mov	ip, r2
 80046ec:	44bc      	add	ip, r7
 80046ee:	4463      	add	r3, ip
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	2080      	movs	r0, #128	; 0x80
 80046f4:	1902      	adds	r2, r0, r4
 80046f6:	2608      	movs	r6, #8
 80046f8:	46b4      	mov	ip, r6
 80046fa:	2608      	movs	r6, #8
 80046fc:	46b0      	mov	r8, r6
 80046fe:	44b8      	add	r8, r7
 8004700:	44c4      	add	ip, r8
 8004702:	4462      	add	r2, ip
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	18d3      	adds	r3, r2, r3
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b7c      	cmp	r3, #124	; 0x7c
 800470c:	d111      	bne.n	8004732 <printASCIIarray+0x1966>
 800470e:	190b      	adds	r3, r1, r4
 8004710:	2208      	movs	r2, #8
 8004712:	4694      	mov	ip, r2
 8004714:	44bc      	add	ip, r7
 8004716:	4463      	add	r3, ip
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	1902      	adds	r2, r0, r4
 800471c:	2108      	movs	r1, #8
 800471e:	468c      	mov	ip, r1
 8004720:	2108      	movs	r1, #8
 8004722:	4688      	mov	r8, r1
 8004724:	44b8      	add	r8, r7
 8004726:	44c4      	add	ip, r8
 8004728:	4462      	add	r2, ip
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	18d3      	adds	r3, r2, r3
 800472e:	221f      	movs	r2, #31
 8004730:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8004732:	2162      	movs	r1, #98	; 0x62
 8004734:	208c      	movs	r0, #140	; 0x8c
 8004736:	0040      	lsls	r0, r0, #1
 8004738:	180b      	adds	r3, r1, r0
 800473a:	2208      	movs	r2, #8
 800473c:	4694      	mov	ip, r2
 800473e:	44bc      	add	ip, r7
 8004740:	4463      	add	r3, ip
 8004742:	881a      	ldrh	r2, [r3, #0]
 8004744:	180b      	adds	r3, r1, r0
 8004746:	2108      	movs	r1, #8
 8004748:	468c      	mov	ip, r1
 800474a:	44bc      	add	ip, r7
 800474c:	4463      	add	r3, ip
 800474e:	3201      	adds	r2, #1
 8004750:	801a      	strh	r2, [r3, #0]
 8004752:	231e      	movs	r3, #30
 8004754:	33ff      	adds	r3, #255	; 0xff
 8004756:	2208      	movs	r2, #8
 8004758:	189b      	adds	r3, r3, r2
 800475a:	19db      	adds	r3, r3, r7
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	b29b      	uxth	r3, r3
 8004760:	2162      	movs	r1, #98	; 0x62
 8004762:	208c      	movs	r0, #140	; 0x8c
 8004764:	0040      	lsls	r0, r0, #1
 8004766:	180a      	adds	r2, r1, r0
 8004768:	2408      	movs	r4, #8
 800476a:	46a4      	mov	ip, r4
 800476c:	44bc      	add	ip, r7
 800476e:	4462      	add	r2, ip
 8004770:	8812      	ldrh	r2, [r2, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d201      	bcs.n	800477a <printASCIIarray+0x19ae>
 8004776:	f7ff fabc 	bl	8003cf2 <printASCIIarray+0xf26>
				}
				for(i=0;i<strLen;i++){
 800477a:	180b      	adds	r3, r1, r0
 800477c:	2208      	movs	r2, #8
 800477e:	4694      	mov	ip, r2
 8004780:	44bc      	add	ip, r7
 8004782:	4463      	add	r3, ip
 8004784:	2200      	movs	r2, #0
 8004786:	801a      	strh	r2, [r3, #0]
 8004788:	e113      	b.n	80049b2 <printASCIIarray+0x1be6>
					for(j=0;j<symLen;j++){
 800478a:	2364      	movs	r3, #100	; 0x64
 800478c:	228c      	movs	r2, #140	; 0x8c
 800478e:	0052      	lsls	r2, r2, #1
 8004790:	189b      	adds	r3, r3, r2
 8004792:	2208      	movs	r2, #8
 8004794:	4694      	mov	ip, r2
 8004796:	44bc      	add	ip, r7
 8004798:	4463      	add	r3, ip
 800479a:	2200      	movs	r2, #0
 800479c:	801a      	strh	r2, [r3, #0]
 800479e:	e041      	b.n	8004824 <printASCIIarray+0x1a58>
						weoBuffer[j]=F3[dataASCII[i]][j];
 80047a0:	2362      	movs	r3, #98	; 0x62
 80047a2:	218c      	movs	r1, #140	; 0x8c
 80047a4:	0049      	lsls	r1, r1, #1
 80047a6:	185b      	adds	r3, r3, r1
 80047a8:	2208      	movs	r2, #8
 80047aa:	4694      	mov	ip, r2
 80047ac:	44bc      	add	ip, r7
 80047ae:	4463      	add	r3, ip
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	2280      	movs	r2, #128	; 0x80
 80047b4:	1852      	adds	r2, r2, r1
 80047b6:	2008      	movs	r0, #8
 80047b8:	4684      	mov	ip, r0
 80047ba:	2008      	movs	r0, #8
 80047bc:	4680      	mov	r8, r0
 80047be:	44b8      	add	r8, r7
 80047c0:	44c4      	add	ip, r8
 80047c2:	4462      	add	r2, ip
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	18d3      	adds	r3, r2, r3
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	001a      	movs	r2, r3
 80047cc:	2664      	movs	r6, #100	; 0x64
 80047ce:	1873      	adds	r3, r6, r1
 80047d0:	2008      	movs	r0, #8
 80047d2:	4684      	mov	ip, r0
 80047d4:	44bc      	add	ip, r7
 80047d6:	4463      	add	r3, ip
 80047d8:	8818      	ldrh	r0, [r3, #0]
 80047da:	1873      	adds	r3, r6, r1
 80047dc:	2108      	movs	r1, #8
 80047de:	468c      	mov	ip, r1
 80047e0:	44bc      	add	ip, r7
 80047e2:	4463      	add	r3, ip
 80047e4:	8819      	ldrh	r1, [r3, #0]
 80047e6:	4ca1      	ldr	r4, [pc, #644]	; (8004a6c <printASCIIarray+0x1ca0>)
 80047e8:	0013      	movs	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	189b      	adds	r3, r3, r2
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	189b      	adds	r3, r3, r2
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	18e3      	adds	r3, r4, r3
 80047f6:	5c1a      	ldrb	r2, [r3, r0]
 80047f8:	239a      	movs	r3, #154	; 0x9a
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	2008      	movs	r0, #8
 80047fe:	181b      	adds	r3, r3, r0
 8004800:	19db      	adds	r3, r3, r7
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	545a      	strb	r2, [r3, r1]
					for(j=0;j<symLen;j++){
 8004806:	218c      	movs	r1, #140	; 0x8c
 8004808:	0049      	lsls	r1, r1, #1
 800480a:	1873      	adds	r3, r6, r1
 800480c:	2208      	movs	r2, #8
 800480e:	4694      	mov	ip, r2
 8004810:	44bc      	add	ip, r7
 8004812:	4463      	add	r3, ip
 8004814:	881a      	ldrh	r2, [r3, #0]
 8004816:	1873      	adds	r3, r6, r1
 8004818:	2108      	movs	r1, #8
 800481a:	468c      	mov	ip, r1
 800481c:	44bc      	add	ip, r7
 800481e:	4463      	add	r3, ip
 8004820:	3201      	adds	r2, #1
 8004822:	801a      	strh	r2, [r3, #0]
 8004824:	2364      	movs	r3, #100	; 0x64
 8004826:	218c      	movs	r1, #140	; 0x8c
 8004828:	0049      	lsls	r1, r1, #1
 800482a:	185b      	adds	r3, r3, r1
 800482c:	2208      	movs	r2, #8
 800482e:	18ba      	adds	r2, r7, r2
 8004830:	189a      	adds	r2, r3, r2
 8004832:	235a      	movs	r3, #90	; 0x5a
 8004834:	185b      	adds	r3, r3, r1
 8004836:	2008      	movs	r0, #8
 8004838:	4684      	mov	ip, r0
 800483a:	44bc      	add	ip, r7
 800483c:	4463      	add	r3, ip
 800483e:	8812      	ldrh	r2, [r2, #0]
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d3ac      	bcc.n	80047a0 <printASCIIarray+0x19d4>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 8004846:	2366      	movs	r3, #102	; 0x66
 8004848:	185b      	adds	r3, r3, r1
 800484a:	2208      	movs	r2, #8
 800484c:	4694      	mov	ip, r2
 800484e:	44bc      	add	ip, r7
 8004850:	4463      	add	r3, ip
 8004852:	2200      	movs	r2, #0
 8004854:	801a      	strh	r2, [r3, #0]
 8004856:	e032      	b.n	80048be <printASCIIarray+0x1af2>
						weoBuffer[k]=weoBuffer[k] & contrast;
 8004858:	2066      	movs	r0, #102	; 0x66
 800485a:	248c      	movs	r4, #140	; 0x8c
 800485c:	0064      	lsls	r4, r4, #1
 800485e:	1903      	adds	r3, r0, r4
 8004860:	2208      	movs	r2, #8
 8004862:	4694      	mov	ip, r2
 8004864:	44bc      	add	ip, r7
 8004866:	4463      	add	r3, ip
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	269a      	movs	r6, #154	; 0x9a
 800486c:	0076      	lsls	r6, r6, #1
 800486e:	2208      	movs	r2, #8
 8004870:	18b2      	adds	r2, r6, r2
 8004872:	19d2      	adds	r2, r2, r7
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	5cd2      	ldrb	r2, [r2, r3]
 8004878:	1903      	adds	r3, r0, r4
 800487a:	2108      	movs	r1, #8
 800487c:	468c      	mov	ip, r1
 800487e:	44bc      	add	ip, r7
 8004880:	4463      	add	r3, ip
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	4698      	mov	r8, r3
 8004886:	215c      	movs	r1, #92	; 0x5c
 8004888:	1909      	adds	r1, r1, r4
 800488a:	2308      	movs	r3, #8
 800488c:	469c      	mov	ip, r3
 800488e:	44bc      	add	ip, r7
 8004890:	4461      	add	r1, ip
 8004892:	7809      	ldrb	r1, [r1, #0]
 8004894:	400a      	ands	r2, r1
 8004896:	b2d1      	uxtb	r1, r2
 8004898:	2208      	movs	r2, #8
 800489a:	18b2      	adds	r2, r6, r2
 800489c:	19d2      	adds	r2, r2, r7
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	4643      	mov	r3, r8
 80048a2:	54d1      	strb	r1, [r2, r3]
					for (k=0;k<symLen;k++){
 80048a4:	1903      	adds	r3, r0, r4
 80048a6:	2208      	movs	r2, #8
 80048a8:	4694      	mov	ip, r2
 80048aa:	44bc      	add	ip, r7
 80048ac:	4463      	add	r3, ip
 80048ae:	881a      	ldrh	r2, [r3, #0]
 80048b0:	1903      	adds	r3, r0, r4
 80048b2:	2108      	movs	r1, #8
 80048b4:	468c      	mov	ip, r1
 80048b6:	44bc      	add	ip, r7
 80048b8:	4463      	add	r3, ip
 80048ba:	3201      	adds	r2, #1
 80048bc:	801a      	strh	r2, [r3, #0]
 80048be:	2366      	movs	r3, #102	; 0x66
 80048c0:	268c      	movs	r6, #140	; 0x8c
 80048c2:	0076      	lsls	r6, r6, #1
 80048c4:	199b      	adds	r3, r3, r6
 80048c6:	2208      	movs	r2, #8
 80048c8:	18ba      	adds	r2, r7, r2
 80048ca:	189a      	adds	r2, r3, r2
 80048cc:	235a      	movs	r3, #90	; 0x5a
 80048ce:	199b      	adds	r3, r3, r6
 80048d0:	2108      	movs	r1, #8
 80048d2:	468c      	mov	ip, r1
 80048d4:	44bc      	add	ip, r7
 80048d6:	4463      	add	r3, ip
 80048d8:	8812      	ldrh	r2, [r2, #0]
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d3bb      	bcc.n	8004858 <printASCIIarray+0x1a8c>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 80048e0:	205f      	movs	r0, #95	; 0x5f
 80048e2:	1983      	adds	r3, r0, r6
 80048e4:	2208      	movs	r2, #8
 80048e6:	18ba      	adds	r2, r7, r2
 80048e8:	189a      	adds	r2, r3, r2
 80048ea:	233f      	movs	r3, #63	; 0x3f
 80048ec:	199b      	adds	r3, r3, r6
 80048ee:	2108      	movs	r1, #8
 80048f0:	468c      	mov	ip, r1
 80048f2:	44bc      	add	ip, r7
 80048f4:	4463      	add	r3, ip
 80048f6:	7812      	ldrb	r2, [r2, #0]
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	18d3      	adds	r3, r2, r3
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	3b01      	subs	r3, #1
 8004900:	b2dc      	uxtb	r4, r3
 8004902:	218f      	movs	r1, #143	; 0x8f
 8004904:	0049      	lsls	r1, r1, #1
 8004906:	2308      	movs	r3, #8
 8004908:	18cb      	adds	r3, r1, r3
 800490a:	19da      	adds	r2, r3, r7
 800490c:	213e      	movs	r1, #62	; 0x3e
 800490e:	198b      	adds	r3, r1, r6
 8004910:	2108      	movs	r1, #8
 8004912:	468c      	mov	ip, r1
 8004914:	44bc      	add	ip, r7
 8004916:	4463      	add	r3, ip
 8004918:	7812      	ldrb	r2, [r2, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	18d3      	adds	r3, r2, r3
 800491e:	b2da      	uxtb	r2, r3
 8004920:	2160      	movs	r1, #96	; 0x60
 8004922:	198b      	adds	r3, r1, r6
 8004924:	2108      	movs	r1, #8
 8004926:	468c      	mov	ip, r1
 8004928:	44bc      	add	ip, r7
 800492a:	4463      	add	r3, ip
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	b2db      	uxtb	r3, r3
 8004932:	4698      	mov	r8, r3
 8004934:	218f      	movs	r1, #143	; 0x8f
 8004936:	0049      	lsls	r1, r1, #1
 8004938:	2308      	movs	r3, #8
 800493a:	18cb      	adds	r3, r1, r3
 800493c:	19db      	adds	r3, r3, r7
 800493e:	7819      	ldrb	r1, [r3, #0]
 8004940:	0006      	movs	r6, r0
 8004942:	238c      	movs	r3, #140	; 0x8c
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	18c3      	adds	r3, r0, r3
 8004948:	2208      	movs	r2, #8
 800494a:	4694      	mov	ip, r2
 800494c:	44bc      	add	ip, r7
 800494e:	4463      	add	r3, ip
 8004950:	7818      	ldrb	r0, [r3, #0]
 8004952:	239a      	movs	r3, #154	; 0x9a
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	2208      	movs	r2, #8
 8004958:	189b      	adds	r3, r3, r2
 800495a:	19db      	adds	r3, r3, r7
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	23ff      	movs	r3, #255	; 0xff
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	4643      	mov	r3, r8
 8004966:	0022      	movs	r2, r4
 8004968:	f7fc fda6 	bl	80014b8 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 800496c:	208c      	movs	r0, #140	; 0x8c
 800496e:	0040      	lsls	r0, r0, #1
 8004970:	1833      	adds	r3, r6, r0
 8004972:	2208      	movs	r2, #8
 8004974:	4694      	mov	ip, r2
 8004976:	44bc      	add	ip, r7
 8004978:	4463      	add	r3, ip
 800497a:	1832      	adds	r2, r6, r0
 800497c:	2108      	movs	r1, #8
 800497e:	1879      	adds	r1, r7, r1
 8004980:	1851      	adds	r1, r2, r1
 8004982:	223f      	movs	r2, #63	; 0x3f
 8004984:	1812      	adds	r2, r2, r0
 8004986:	2408      	movs	r4, #8
 8004988:	46a4      	mov	ip, r4
 800498a:	44bc      	add	ip, r7
 800498c:	4462      	add	r2, ip
 800498e:	7809      	ldrb	r1, [r1, #0]
 8004990:	7812      	ldrb	r2, [r2, #0]
 8004992:	188a      	adds	r2, r1, r2
 8004994:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8004996:	2162      	movs	r1, #98	; 0x62
 8004998:	180b      	adds	r3, r1, r0
 800499a:	2208      	movs	r2, #8
 800499c:	4694      	mov	ip, r2
 800499e:	44bc      	add	ip, r7
 80049a0:	4463      	add	r3, ip
 80049a2:	881a      	ldrh	r2, [r3, #0]
 80049a4:	180b      	adds	r3, r1, r0
 80049a6:	2108      	movs	r1, #8
 80049a8:	468c      	mov	ip, r1
 80049aa:	44bc      	add	ip, r7
 80049ac:	4463      	add	r3, ip
 80049ae:	3201      	adds	r2, #1
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	231e      	movs	r3, #30
 80049b4:	33ff      	adds	r3, #255	; 0xff
 80049b6:	2208      	movs	r2, #8
 80049b8:	189b      	adds	r3, r3, r2
 80049ba:	19db      	adds	r3, r3, r7
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2162      	movs	r1, #98	; 0x62
 80049c2:	208c      	movs	r0, #140	; 0x8c
 80049c4:	0040      	lsls	r0, r0, #1
 80049c6:	180a      	adds	r2, r1, r0
 80049c8:	2408      	movs	r4, #8
 80049ca:	46a4      	mov	ip, r4
 80049cc:	44bc      	add	ip, r7
 80049ce:	4462      	add	r2, ip
 80049d0:	8812      	ldrh	r2, [r2, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d200      	bcs.n	80049d8 <printASCIIarray+0x1c0c>
 80049d6:	e6d8      	b.n	800478a <printASCIIarray+0x19be>
				}
				for(i=0;i<symLen;i++){
 80049d8:	180b      	adds	r3, r1, r0
 80049da:	2208      	movs	r2, #8
 80049dc:	4694      	mov	ip, r2
 80049de:	44bc      	add	ip, r7
 80049e0:	4463      	add	r3, ip
 80049e2:	2200      	movs	r2, #0
 80049e4:	801a      	strh	r2, [r3, #0]
 80049e6:	e01e      	b.n	8004a26 <printASCIIarray+0x1c5a>
									weoBuffer[j]=0x00;
 80049e8:	2364      	movs	r3, #100	; 0x64
 80049ea:	208c      	movs	r0, #140	; 0x8c
 80049ec:	0040      	lsls	r0, r0, #1
 80049ee:	181b      	adds	r3, r3, r0
 80049f0:	2208      	movs	r2, #8
 80049f2:	4694      	mov	ip, r2
 80049f4:	44bc      	add	ip, r7
 80049f6:	4463      	add	r3, ip
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	229a      	movs	r2, #154	; 0x9a
 80049fc:	0052      	lsls	r2, r2, #1
 80049fe:	2108      	movs	r1, #8
 8004a00:	1852      	adds	r2, r2, r1
 8004a02:	19d2      	adds	r2, r2, r7
 8004a04:	6812      	ldr	r2, [r2, #0]
 8004a06:	2100      	movs	r1, #0
 8004a08:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<symLen;i++){
 8004a0a:	2162      	movs	r1, #98	; 0x62
 8004a0c:	180b      	adds	r3, r1, r0
 8004a0e:	2208      	movs	r2, #8
 8004a10:	4694      	mov	ip, r2
 8004a12:	44bc      	add	ip, r7
 8004a14:	4463      	add	r3, ip
 8004a16:	881a      	ldrh	r2, [r3, #0]
 8004a18:	180b      	adds	r3, r1, r0
 8004a1a:	2108      	movs	r1, #8
 8004a1c:	468c      	mov	ip, r1
 8004a1e:	44bc      	add	ip, r7
 8004a20:	4463      	add	r3, ip
 8004a22:	3201      	adds	r2, #1
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	2362      	movs	r3, #98	; 0x62
 8004a28:	218c      	movs	r1, #140	; 0x8c
 8004a2a:	0049      	lsls	r1, r1, #1
 8004a2c:	185b      	adds	r3, r3, r1
 8004a2e:	2208      	movs	r2, #8
 8004a30:	18ba      	adds	r2, r7, r2
 8004a32:	189a      	adds	r2, r3, r2
 8004a34:	235a      	movs	r3, #90	; 0x5a
 8004a36:	185b      	adds	r3, r3, r1
 8004a38:	2108      	movs	r1, #8
 8004a3a:	468c      	mov	ip, r1
 8004a3c:	44bc      	add	ip, r7
 8004a3e:	4463      	add	r3, ip
 8004a40:	8812      	ldrh	r2, [r2, #0]
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d3cf      	bcc.n	80049e8 <printASCIIarray+0x1c1c>
 8004a48:	46ad      	mov	sp, r5
							}
			}
			cmd2Execute=0;
 8004a4a:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <printASCIIarray+0x1ca4>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8004a50:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <printASCIIarray+0x1ca8>)
 8004a52:	695a      	ldr	r2, [r3, #20]
 8004a54:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <printASCIIarray+0x1ca8>)
 8004a56:	2140      	movs	r1, #64	; 0x40
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	615a      	str	r2, [r3, #20]

	}
 8004a5c:	46c0      	nop			; (mov r8, r8)
 8004a5e:	0018      	movs	r0, r3
 8004a60:	46bd      	mov	sp, r7
 8004a62:	b063      	add	sp, #396	; 0x18c
 8004a64:	bcc0      	pop	{r6, r7}
 8004a66:	46b9      	mov	r9, r7
 8004a68:	46b0      	mov	r8, r6
 8004a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a6c:	08015d90 	.word	0x08015d90
 8004a70:	200002ea 	.word	0x200002ea
 8004a74:	50000800 	.word	0x50000800

08004a78 <LIS3DHsendCMD>:
//		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
//=============================================================================================================
	void LIS3DHsendCMD(uint8_t reg, uint8_t data) {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	0002      	movs	r2, r0
 8004a80:	1dfb      	adds	r3, r7, #7
 8004a82:	701a      	strb	r2, [r3, #0]
 8004a84:	1dbb      	adds	r3, r7, #6
 8004a86:	1c0a      	adds	r2, r1, #0
 8004a88:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8004a8a:	210c      	movs	r1, #12
 8004a8c:	187b      	adds	r3, r7, r1
 8004a8e:	1dfa      	adds	r2, r7, #7
 8004a90:	7812      	ldrb	r2, [r2, #0]
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	187b      	adds	r3, r7, r1
 8004a96:	1dba      	adds	r2, r7, #6
 8004a98:	7812      	ldrb	r2, [r2, #0]
 8004a9a:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x32, buf, 2, 1000);	//32h - address for writing
 8004a9c:	187a      	adds	r2, r7, r1
 8004a9e:	4806      	ldr	r0, [pc, #24]	; (8004ab8 <LIS3DHsendCMD+0x40>)
 8004aa0:	23fa      	movs	r3, #250	; 0xfa
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	2132      	movs	r1, #50	; 0x32
 8004aaa:	f001 fd11 	bl	80064d0 <HAL_I2C_Master_Transmit>
	}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	b004      	add	sp, #16
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	2000008c 	.word	0x2000008c

08004abc <LIS3DHsetup>:
//	  xVal = buffer[0];
//	  yVal = buffer[1];
//	  zVal = buffer[2];
//	}
//=============================================================================================================
	void LIS3DHsetup(void){
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
		uint8_t CTRL_REG1_val=0x00;
 8004ac2:	1dfb      	adds	r3, r7, #7
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG4_val=0x00;
 8004ac8:	1dbb      	adds	r3, r7, #6
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG5_val=0x00;
 8004ace:	1d7b      	adds	r3, r7, #5
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG6_val=0x00;
 8004ad4:	1d3b      	adds	r3, r7, #4
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_CTRL_REG_val=0x00;
 8004ada:	1cfb      	adds	r3, r7, #3
 8004adc:	2200      	movs	r2, #0
 8004ade:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_SRC_REG_val=0x00;
 8004ae0:	1cbb      	adds	r3, r7, #2
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_CFG_val=0x00;
 8004ae6:	1c7b      	adds	r3, r7, #1
 8004ae8:	2200      	movs	r2, #0
 8004aea:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_SRC_val=0x00;
 8004aec:	003b      	movs	r3, r7
 8004aee:	2200      	movs	r2, #0
 8004af0:	701a      	strb	r2, [r3, #0]

		LIS3DHsendCMD(CTRL_REG1,(CTRL_REG1_val|accelDataRate_25_Hz|Xen|Yen|Zen));//data rate selection
 8004af2:	1dfb      	adds	r3, r7, #7
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2237      	movs	r2, #55	; 0x37
 8004af8:	4313      	orrs	r3, r2
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	0019      	movs	r1, r3
 8004afe:	2020      	movs	r0, #32
 8004b00:	f7ff ffba 	bl	8004a78 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG2,);//HPFilter
//		LIS3DHsendCMD(CTRL_REG3,);
		LIS3DHsendCMD(CTRL_REG4,(CTRL_REG4_val|BDU|FULL_SCALE_2G|HR));
 8004b04:	1dbb      	adds	r3, r7, #6
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	227c      	movs	r2, #124	; 0x7c
 8004b0a:	4252      	negs	r2, r2
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	0019      	movs	r1, r3
 8004b12:	2023      	movs	r0, #35	; 0x23
 8004b14:	f7ff ffb0 	bl	8004a78 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG6,);
//		LIS3DHsendCMD(FIFO_CTRL_REG,FIFO_CTRL_REG_val);	//	2B configured
//		LIS3DHsendCMD(FIFO_SRC_REG,FIFO_SRC_REG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_CFG,INT_1_CFG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_SRC_val,INT_1_SRC_val);	//	2B configured
	}
 8004b18:	46c0      	nop			; (mov r8, r8)
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b002      	add	sp, #8
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004b24:	46c0      	nop			; (mov r8, r8)
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <HAL_MspInit+0x4c>)
 8004b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b36:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <HAL_MspInit+0x4c>)
 8004b38:	2101      	movs	r1, #1
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	641a      	str	r2, [r3, #64]	; 0x40
 8004b3e:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <HAL_MspInit+0x4c>)
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	2201      	movs	r2, #1
 8004b44:	4013      	ands	r3, r2
 8004b46:	607b      	str	r3, [r7, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_MspInit+0x4c>)
 8004b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <HAL_MspInit+0x4c>)
 8004b50:	2180      	movs	r1, #128	; 0x80
 8004b52:	0549      	lsls	r1, r1, #21
 8004b54:	430a      	orrs	r2, r1
 8004b56:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b58:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <HAL_MspInit+0x4c>)
 8004b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b5c:	2380      	movs	r3, #128	; 0x80
 8004b5e:	055b      	lsls	r3, r3, #21
 8004b60:	4013      	ands	r3, r2
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8004b66:	2380      	movs	r3, #128	; 0x80
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f000 fc9a 	bl	80054a4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b70:	46c0      	nop			; (mov r8, r8)
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b002      	add	sp, #8
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40021000 	.word	0x40021000

08004b7c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004b7c:	b590      	push	{r4, r7, lr}
 8004b7e:	b089      	sub	sp, #36	; 0x24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b84:	240c      	movs	r4, #12
 8004b86:	193b      	adds	r3, r7, r4
 8004b88:	0018      	movs	r0, r3
 8004b8a:	2314      	movs	r3, #20
 8004b8c:	001a      	movs	r2, r3
 8004b8e:	2100      	movs	r1, #0
 8004b90:	f007 fee8 	bl	800c964 <memset>
  if(hcomp->Instance==COMP1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a10      	ldr	r2, [pc, #64]	; (8004bdc <HAL_COMP_MspInit+0x60>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d11a      	bne.n	8004bd4 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b9e:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <HAL_COMP_MspInit+0x64>)
 8004ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ba2:	4b0f      	ldr	r3, [pc, #60]	; (8004be0 <HAL_COMP_MspInit+0x64>)
 8004ba4:	2102      	movs	r1, #2
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8004baa:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <HAL_COMP_MspInit+0x64>)
 8004bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bae:	2202      	movs	r2, #2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	60bb      	str	r3, [r7, #8]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004bb6:	193b      	adds	r3, r7, r4
 8004bb8:	2204      	movs	r2, #4
 8004bba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bbc:	193b      	adds	r3, r7, r4
 8004bbe:	2203      	movs	r2, #3
 8004bc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc2:	193b      	adds	r3, r7, r4
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bc8:	193b      	adds	r3, r7, r4
 8004bca:	4a06      	ldr	r2, [pc, #24]	; (8004be4 <HAL_COMP_MspInit+0x68>)
 8004bcc:	0019      	movs	r1, r3
 8004bce:	0010      	movs	r0, r2
 8004bd0:	f001 fa84 	bl	80060dc <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8004bd4:	46c0      	nop			; (mov r8, r8)
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b009      	add	sp, #36	; 0x24
 8004bda:	bd90      	pop	{r4, r7, pc}
 8004bdc:	40010200 	.word	0x40010200
 8004be0:	40021000 	.word	0x40021000
 8004be4:	50000400 	.word	0x50000400

08004be8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004be8:	b590      	push	{r4, r7, lr}
 8004bea:	b097      	sub	sp, #92	; 0x5c
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf0:	2344      	movs	r3, #68	; 0x44
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	2314      	movs	r3, #20
 8004bf8:	001a      	movs	r2, r3
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	f007 feb2 	bl	800c964 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c00:	2410      	movs	r4, #16
 8004c02:	193b      	adds	r3, r7, r4
 8004c04:	0018      	movs	r0, r3
 8004c06:	2334      	movs	r3, #52	; 0x34
 8004c08:	001a      	movs	r2, r3
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	f007 feaa 	bl	800c964 <memset>
  if(hi2c->Instance==I2C1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a27      	ldr	r2, [pc, #156]	; (8004cb4 <HAL_I2C_MspInit+0xcc>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d147      	bne.n	8004caa <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004c1a:	193b      	adds	r3, r7, r4
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004c20:	193b      	adds	r3, r7, r4
 8004c22:	2200      	movs	r2, #0
 8004c24:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c26:	193b      	adds	r3, r7, r4
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f003 fdc9 	bl	80087c0 <HAL_RCCEx_PeriphCLKConfig>
 8004c2e:	1e03      	subs	r3, r0, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004c32:	f7ff ff75 	bl	8004b20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c36:	4b20      	ldr	r3, [pc, #128]	; (8004cb8 <HAL_I2C_MspInit+0xd0>)
 8004c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3a:	4b1f      	ldr	r3, [pc, #124]	; (8004cb8 <HAL_I2C_MspInit+0xd0>)
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	635a      	str	r2, [r3, #52]	; 0x34
 8004c42:	4b1d      	ldr	r3, [pc, #116]	; (8004cb8 <HAL_I2C_MspInit+0xd0>)
 8004c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c46:	2201      	movs	r2, #1
 8004c48:	4013      	ands	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c4e:	2144      	movs	r1, #68	; 0x44
 8004c50:	187b      	adds	r3, r7, r1
 8004c52:	22c0      	movs	r2, #192	; 0xc0
 8004c54:	00d2      	lsls	r2, r2, #3
 8004c56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c58:	187b      	adds	r3, r7, r1
 8004c5a:	2212      	movs	r2, #18
 8004c5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c5e:	187b      	adds	r3, r7, r1
 8004c60:	2201      	movs	r2, #1
 8004c62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c64:	187b      	adds	r3, r7, r1
 8004c66:	2200      	movs	r2, #0
 8004c68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004c6a:	187b      	adds	r3, r7, r1
 8004c6c:	2206      	movs	r2, #6
 8004c6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c70:	187a      	adds	r2, r7, r1
 8004c72:	23a0      	movs	r3, #160	; 0xa0
 8004c74:	05db      	lsls	r3, r3, #23
 8004c76:	0011      	movs	r1, r2
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f001 fa2f 	bl	80060dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004c7e:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <HAL_I2C_MspInit+0xd0>)
 8004c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c82:	4b0d      	ldr	r3, [pc, #52]	; (8004cb8 <HAL_I2C_MspInit+0xd0>)
 8004c84:	2180      	movs	r1, #128	; 0x80
 8004c86:	0389      	lsls	r1, r1, #14
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <HAL_I2C_MspInit+0xd0>)
 8004c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c90:	2380      	movs	r3, #128	; 0x80
 8004c92:	039b      	lsls	r3, r3, #14
 8004c94:	4013      	ands	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
 8004c98:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	2017      	movs	r0, #23
 8004ca0:	f000 ff22 	bl	8005ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8004ca4:	2017      	movs	r0, #23
 8004ca6:	f000 ff34 	bl	8005b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	46bd      	mov	sp, r7
 8004cae:	b017      	add	sp, #92	; 0x5c
 8004cb0:	bd90      	pop	{r4, r7, pc}
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	40005400 	.word	0x40005400
 8004cb8:	40021000 	.word	0x40021000

08004cbc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b099      	sub	sp, #100	; 0x64
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc4:	234c      	movs	r3, #76	; 0x4c
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	0018      	movs	r0, r3
 8004cca:	2314      	movs	r3, #20
 8004ccc:	001a      	movs	r2, r3
 8004cce:	2100      	movs	r1, #0
 8004cd0:	f007 fe48 	bl	800c964 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cd4:	2418      	movs	r4, #24
 8004cd6:	193b      	adds	r3, r7, r4
 8004cd8:	0018      	movs	r0, r3
 8004cda:	2334      	movs	r3, #52	; 0x34
 8004cdc:	001a      	movs	r2, r3
 8004cde:	2100      	movs	r1, #0
 8004ce0:	f007 fe40 	bl	800c964 <memset>
  if(hi2s->Instance==SPI1)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a4f      	ldr	r2, [pc, #316]	; (8004e28 <HAL_I2S_MspInit+0x16c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d000      	beq.n	8004cf0 <HAL_I2S_MspInit+0x34>
 8004cee:	e097      	b.n	8004e20 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8004cf0:	193b      	adds	r3, r7, r4
 8004cf2:	2280      	movs	r2, #128	; 0x80
 8004cf4:	0112      	lsls	r2, r2, #4
 8004cf6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8004cf8:	193b      	adds	r3, r7, r4
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cfe:	193b      	adds	r3, r7, r4
 8004d00:	0018      	movs	r0, r3
 8004d02:	f003 fd5d 	bl	80087c0 <HAL_RCCEx_PeriphCLKConfig>
 8004d06:	1e03      	subs	r3, r0, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8004d0a:	f7ff ff09 	bl	8004b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d0e:	4b47      	ldr	r3, [pc, #284]	; (8004e2c <HAL_I2S_MspInit+0x170>)
 8004d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d12:	4b46      	ldr	r3, [pc, #280]	; (8004e2c <HAL_I2S_MspInit+0x170>)
 8004d14:	2180      	movs	r1, #128	; 0x80
 8004d16:	0149      	lsls	r1, r1, #5
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	641a      	str	r2, [r3, #64]	; 0x40
 8004d1c:	4b43      	ldr	r3, [pc, #268]	; (8004e2c <HAL_I2S_MspInit+0x170>)
 8004d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	015b      	lsls	r3, r3, #5
 8004d24:	4013      	ands	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d2a:	4b40      	ldr	r3, [pc, #256]	; (8004e2c <HAL_I2S_MspInit+0x170>)
 8004d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d2e:	4b3f      	ldr	r3, [pc, #252]	; (8004e2c <HAL_I2S_MspInit+0x170>)
 8004d30:	2101      	movs	r1, #1
 8004d32:	430a      	orrs	r2, r1
 8004d34:	635a      	str	r2, [r3, #52]	; 0x34
 8004d36:	4b3d      	ldr	r3, [pc, #244]	; (8004e2c <HAL_I2S_MspInit+0x170>)
 8004d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d42:	4b3a      	ldr	r3, [pc, #232]	; (8004e2c <HAL_I2S_MspInit+0x170>)
 8004d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d46:	4b39      	ldr	r3, [pc, #228]	; (8004e2c <HAL_I2S_MspInit+0x170>)
 8004d48:	2102      	movs	r1, #2
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	635a      	str	r2, [r3, #52]	; 0x34
 8004d4e:	4b37      	ldr	r3, [pc, #220]	; (8004e2c <HAL_I2S_MspInit+0x170>)
 8004d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d52:	2202      	movs	r2, #2
 8004d54:	4013      	ands	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004d5a:	214c      	movs	r1, #76	; 0x4c
 8004d5c:	187b      	adds	r3, r7, r1
 8004d5e:	2280      	movs	r2, #128	; 0x80
 8004d60:	0212      	lsls	r2, r2, #8
 8004d62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d64:	000c      	movs	r4, r1
 8004d66:	193b      	adds	r3, r7, r4
 8004d68:	2202      	movs	r2, #2
 8004d6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d6c:	193b      	adds	r3, r7, r4
 8004d6e:	2201      	movs	r2, #1
 8004d70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d72:	193b      	adds	r3, r7, r4
 8004d74:	2203      	movs	r2, #3
 8004d76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004d78:	193b      	adds	r3, r7, r4
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d7e:	193a      	adds	r2, r7, r4
 8004d80:	23a0      	movs	r3, #160	; 0xa0
 8004d82:	05db      	lsls	r3, r3, #23
 8004d84:	0011      	movs	r1, r2
 8004d86:	0018      	movs	r0, r3
 8004d88:	f001 f9a8 	bl	80060dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004d8c:	0021      	movs	r1, r4
 8004d8e:	187b      	adds	r3, r7, r1
 8004d90:	2238      	movs	r2, #56	; 0x38
 8004d92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d94:	187b      	adds	r3, r7, r1
 8004d96:	2202      	movs	r2, #2
 8004d98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d9a:	187b      	adds	r3, r7, r1
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004da0:	187b      	adds	r3, r7, r1
 8004da2:	2203      	movs	r2, #3
 8004da4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004da6:	187b      	adds	r3, r7, r1
 8004da8:	2200      	movs	r2, #0
 8004daa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dac:	187b      	adds	r3, r7, r1
 8004dae:	4a20      	ldr	r2, [pc, #128]	; (8004e30 <HAL_I2S_MspInit+0x174>)
 8004db0:	0019      	movs	r1, r3
 8004db2:	0010      	movs	r0, r2
 8004db4:	f001 f992 	bl	80060dc <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8004db8:	4b1e      	ldr	r3, [pc, #120]	; (8004e34 <HAL_I2S_MspInit+0x178>)
 8004dba:	4a1f      	ldr	r2, [pc, #124]	; (8004e38 <HAL_I2S_MspInit+0x17c>)
 8004dbc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_I2S_MspInit+0x178>)
 8004dc0:	2211      	movs	r2, #17
 8004dc2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004dc4:	4b1b      	ldr	r3, [pc, #108]	; (8004e34 <HAL_I2S_MspInit+0x178>)
 8004dc6:	2210      	movs	r2, #16
 8004dc8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dca:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <HAL_I2S_MspInit+0x178>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004dd0:	4b18      	ldr	r3, [pc, #96]	; (8004e34 <HAL_I2S_MspInit+0x178>)
 8004dd2:	2280      	movs	r2, #128	; 0x80
 8004dd4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004dd6:	4b17      	ldr	r3, [pc, #92]	; (8004e34 <HAL_I2S_MspInit+0x178>)
 8004dd8:	2280      	movs	r2, #128	; 0x80
 8004dda:	0052      	lsls	r2, r2, #1
 8004ddc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004dde:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <HAL_I2S_MspInit+0x178>)
 8004de0:	2280      	movs	r2, #128	; 0x80
 8004de2:	00d2      	lsls	r2, r2, #3
 8004de4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004de6:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <HAL_I2S_MspInit+0x178>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004dec:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <HAL_I2S_MspInit+0x178>)
 8004dee:	22c0      	movs	r2, #192	; 0xc0
 8004df0:	0192      	lsls	r2, r2, #6
 8004df2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004df4:	4b0f      	ldr	r3, [pc, #60]	; (8004e34 <HAL_I2S_MspInit+0x178>)
 8004df6:	0018      	movs	r0, r3
 8004df8:	f000 fea8 	bl	8005b4c <HAL_DMA_Init>
 8004dfc:	1e03      	subs	r3, r0, #0
 8004dfe:	d001      	beq.n	8004e04 <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 8004e00:	f7ff fe8e 	bl	8004b20 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a0b      	ldr	r2, [pc, #44]	; (8004e34 <HAL_I2S_MspInit+0x178>)
 8004e08:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <HAL_I2S_MspInit+0x178>)
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004e10:	2200      	movs	r2, #0
 8004e12:	2100      	movs	r1, #0
 8004e14:	2019      	movs	r0, #25
 8004e16:	f000 fe67 	bl	8005ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004e1a:	2019      	movs	r0, #25
 8004e1c:	f000 fe79 	bl	8005b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004e20:	46c0      	nop			; (mov r8, r8)
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b019      	add	sp, #100	; 0x64
 8004e26:	bd90      	pop	{r4, r7, pc}
 8004e28:	40013000 	.word	0x40013000
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	50000400 	.word	0x50000400
 8004e34:	2000011c 	.word	0x2000011c
 8004e38:	40020008 	.word	0x40020008

08004e3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b08b      	sub	sp, #44	; 0x2c
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e44:	2414      	movs	r4, #20
 8004e46:	193b      	adds	r3, r7, r4
 8004e48:	0018      	movs	r0, r3
 8004e4a:	2314      	movs	r3, #20
 8004e4c:	001a      	movs	r2, r3
 8004e4e:	2100      	movs	r1, #0
 8004e50:	f007 fd88 	bl	800c964 <memset>
  if(hspi->Instance==SPI2)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a2a      	ldr	r2, [pc, #168]	; (8004f04 <HAL_SPI_MspInit+0xc8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d14d      	bne.n	8004efa <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004e5e:	4b2a      	ldr	r3, [pc, #168]	; (8004f08 <HAL_SPI_MspInit+0xcc>)
 8004e60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e62:	4b29      	ldr	r3, [pc, #164]	; (8004f08 <HAL_SPI_MspInit+0xcc>)
 8004e64:	2180      	movs	r1, #128	; 0x80
 8004e66:	01c9      	lsls	r1, r1, #7
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e6c:	4b26      	ldr	r3, [pc, #152]	; (8004f08 <HAL_SPI_MspInit+0xcc>)
 8004e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e70:	2380      	movs	r3, #128	; 0x80
 8004e72:	01db      	lsls	r3, r3, #7
 8004e74:	4013      	ands	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e7a:	4b23      	ldr	r3, [pc, #140]	; (8004f08 <HAL_SPI_MspInit+0xcc>)
 8004e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e7e:	4b22      	ldr	r3, [pc, #136]	; (8004f08 <HAL_SPI_MspInit+0xcc>)
 8004e80:	2102      	movs	r1, #2
 8004e82:	430a      	orrs	r2, r1
 8004e84:	635a      	str	r2, [r3, #52]	; 0x34
 8004e86:	4b20      	ldr	r3, [pc, #128]	; (8004f08 <HAL_SPI_MspInit+0xcc>)
 8004e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004e92:	193b      	adds	r3, r7, r4
 8004e94:	2240      	movs	r2, #64	; 0x40
 8004e96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e98:	193b      	adds	r3, r7, r4
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e9e:	193b      	adds	r3, r7, r4
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea4:	193b      	adds	r3, r7, r4
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8004eaa:	193b      	adds	r3, r7, r4
 8004eac:	2204      	movs	r2, #4
 8004eae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb0:	193b      	adds	r3, r7, r4
 8004eb2:	4a16      	ldr	r2, [pc, #88]	; (8004f0c <HAL_SPI_MspInit+0xd0>)
 8004eb4:	0019      	movs	r1, r3
 8004eb6:	0010      	movs	r0, r2
 8004eb8:	f001 f910 	bl	80060dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004ebc:	0021      	movs	r1, r4
 8004ebe:	187b      	adds	r3, r7, r1
 8004ec0:	22c0      	movs	r2, #192	; 0xc0
 8004ec2:	0052      	lsls	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec6:	187b      	adds	r3, r7, r1
 8004ec8:	2202      	movs	r2, #2
 8004eca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ecc:	187b      	adds	r3, r7, r1
 8004ece:	2201      	movs	r2, #1
 8004ed0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ed2:	187b      	adds	r3, r7, r1
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004ed8:	187b      	adds	r3, r7, r1
 8004eda:	2201      	movs	r2, #1
 8004edc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ede:	187b      	adds	r3, r7, r1
 8004ee0:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <HAL_SPI_MspInit+0xd0>)
 8004ee2:	0019      	movs	r1, r3
 8004ee4:	0010      	movs	r0, r2
 8004ee6:	f001 f8f9 	bl	80060dc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004eea:	2200      	movs	r2, #0
 8004eec:	2100      	movs	r1, #0
 8004eee:	201a      	movs	r0, #26
 8004ef0:	f000 fdfa 	bl	8005ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004ef4:	201a      	movs	r0, #26
 8004ef6:	f000 fe0c 	bl	8005b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	46bd      	mov	sp, r7
 8004efe:	b00b      	add	sp, #44	; 0x2c
 8004f00:	bd90      	pop	{r4, r7, pc}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	40003800 	.word	0x40003800
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	50000400 	.word	0x50000400

08004f10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b091      	sub	sp, #68	; 0x44
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f18:	240c      	movs	r4, #12
 8004f1a:	193b      	adds	r3, r7, r4
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	2334      	movs	r3, #52	; 0x34
 8004f20:	001a      	movs	r2, r3
 8004f22:	2100      	movs	r1, #0
 8004f24:	f007 fd1e 	bl	800c964 <memset>
  if(htim_base->Instance==TIM1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a11      	ldr	r2, [pc, #68]	; (8004f74 <HAL_TIM_Base_MspInit+0x64>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d11c      	bne.n	8004f6c <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004f32:	193b      	adds	r3, r7, r4
 8004f34:	2280      	movs	r2, #128	; 0x80
 8004f36:	0392      	lsls	r2, r2, #14
 8004f38:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004f3a:	193b      	adds	r3, r7, r4
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f40:	193b      	adds	r3, r7, r4
 8004f42:	0018      	movs	r0, r3
 8004f44:	f003 fc3c 	bl	80087c0 <HAL_RCCEx_PeriphCLKConfig>
 8004f48:	1e03      	subs	r3, r0, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8004f4c:	f7ff fde8 	bl	8004b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f50:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <HAL_TIM_Base_MspInit+0x68>)
 8004f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f54:	4b08      	ldr	r3, [pc, #32]	; (8004f78 <HAL_TIM_Base_MspInit+0x68>)
 8004f56:	2180      	movs	r1, #128	; 0x80
 8004f58:	0109      	lsls	r1, r1, #4
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <HAL_TIM_Base_MspInit+0x68>)
 8004f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f62:	2380      	movs	r3, #128	; 0x80
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	4013      	ands	r3, r2
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004f6c:	46c0      	nop			; (mov r8, r8)
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b011      	add	sp, #68	; 0x44
 8004f72:	bd90      	pop	{r4, r7, pc}
 8004f74:	40012c00 	.word	0x40012c00
 8004f78:	40021000 	.word	0x40021000

08004f7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f7c:	b590      	push	{r4, r7, lr}
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f84:	240c      	movs	r4, #12
 8004f86:	193b      	adds	r3, r7, r4
 8004f88:	0018      	movs	r0, r3
 8004f8a:	2314      	movs	r3, #20
 8004f8c:	001a      	movs	r2, r3
 8004f8e:	2100      	movs	r1, #0
 8004f90:	f007 fce8 	bl	800c964 <memset>
  if(htim->Instance==TIM1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <HAL_TIM_MspPostInit+0x74>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d123      	bne.n	8004fe6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f9e:	4b15      	ldr	r3, [pc, #84]	; (8004ff4 <HAL_TIM_MspPostInit+0x78>)
 8004fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fa2:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <HAL_TIM_MspPostInit+0x78>)
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	635a      	str	r2, [r3, #52]	; 0x34
 8004faa:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <HAL_TIM_MspPostInit+0x78>)
 8004fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fae:	2201      	movs	r2, #1
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	60bb      	str	r3, [r7, #8]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fb6:	193b      	adds	r3, r7, r4
 8004fb8:	2280      	movs	r2, #128	; 0x80
 8004fba:	0052      	lsls	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fbe:	0021      	movs	r1, r4
 8004fc0:	187b      	adds	r3, r7, r1
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fc6:	187b      	adds	r3, r7, r1
 8004fc8:	2202      	movs	r2, #2
 8004fca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fcc:	187b      	adds	r3, r7, r1
 8004fce:	2203      	movs	r2, #3
 8004fd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004fd2:	187b      	adds	r3, r7, r1
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fd8:	187a      	adds	r2, r7, r1
 8004fda:	23a0      	movs	r3, #160	; 0xa0
 8004fdc:	05db      	lsls	r3, r3, #23
 8004fde:	0011      	movs	r1, r2
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f001 f87b 	bl	80060dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	b009      	add	sp, #36	; 0x24
 8004fec:	bd90      	pop	{r4, r7, pc}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	40012c00 	.word	0x40012c00
 8004ff4:	40021000 	.word	0x40021000

08004ff8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b08b      	sub	sp, #44	; 0x2c
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005000:	2414      	movs	r4, #20
 8005002:	193b      	adds	r3, r7, r4
 8005004:	0018      	movs	r0, r3
 8005006:	2314      	movs	r3, #20
 8005008:	001a      	movs	r2, r3
 800500a:	2100      	movs	r1, #0
 800500c:	f007 fcaa 	bl	800c964 <memset>
  if(husart->Instance==USART3)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a30      	ldr	r2, [pc, #192]	; (80050d8 <HAL_USART_MspInit+0xe0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d159      	bne.n	80050ce <HAL_USART_MspInit+0xd6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800501a:	4b30      	ldr	r3, [pc, #192]	; (80050dc <HAL_USART_MspInit+0xe4>)
 800501c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800501e:	4b2f      	ldr	r3, [pc, #188]	; (80050dc <HAL_USART_MspInit+0xe4>)
 8005020:	2180      	movs	r1, #128	; 0x80
 8005022:	02c9      	lsls	r1, r1, #11
 8005024:	430a      	orrs	r2, r1
 8005026:	63da      	str	r2, [r3, #60]	; 0x3c
 8005028:	4b2c      	ldr	r3, [pc, #176]	; (80050dc <HAL_USART_MspInit+0xe4>)
 800502a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800502c:	2380      	movs	r3, #128	; 0x80
 800502e:	02db      	lsls	r3, r3, #11
 8005030:	4013      	ands	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005036:	4b29      	ldr	r3, [pc, #164]	; (80050dc <HAL_USART_MspInit+0xe4>)
 8005038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800503a:	4b28      	ldr	r3, [pc, #160]	; (80050dc <HAL_USART_MspInit+0xe4>)
 800503c:	2101      	movs	r1, #1
 800503e:	430a      	orrs	r2, r1
 8005040:	635a      	str	r2, [r3, #52]	; 0x34
 8005042:	4b26      	ldr	r3, [pc, #152]	; (80050dc <HAL_USART_MspInit+0xe4>)
 8005044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005046:	2201      	movs	r2, #1
 8005048:	4013      	ands	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800504e:	4b23      	ldr	r3, [pc, #140]	; (80050dc <HAL_USART_MspInit+0xe4>)
 8005050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005052:	4b22      	ldr	r3, [pc, #136]	; (80050dc <HAL_USART_MspInit+0xe4>)
 8005054:	2102      	movs	r1, #2
 8005056:	430a      	orrs	r2, r1
 8005058:	635a      	str	r2, [r3, #52]	; 0x34
 800505a:	4b20      	ldr	r3, [pc, #128]	; (80050dc <HAL_USART_MspInit+0xe4>)
 800505c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505e:	2202      	movs	r2, #2
 8005060:	4013      	ands	r3, r2
 8005062:	60bb      	str	r3, [r7, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005066:	193b      	adds	r3, r7, r4
 8005068:	2220      	movs	r2, #32
 800506a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506c:	193b      	adds	r3, r7, r4
 800506e:	2202      	movs	r2, #2
 8005070:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005072:	193b      	adds	r3, r7, r4
 8005074:	2200      	movs	r2, #0
 8005076:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005078:	193b      	adds	r3, r7, r4
 800507a:	2203      	movs	r2, #3
 800507c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800507e:	193b      	adds	r3, r7, r4
 8005080:	2204      	movs	r2, #4
 8005082:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005084:	193a      	adds	r2, r7, r4
 8005086:	23a0      	movs	r3, #160	; 0xa0
 8005088:	05db      	lsls	r3, r3, #23
 800508a:	0011      	movs	r1, r2
 800508c:	0018      	movs	r0, r3
 800508e:	f001 f825 	bl	80060dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005092:	0021      	movs	r1, r4
 8005094:	187b      	adds	r3, r7, r1
 8005096:	2203      	movs	r2, #3
 8005098:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800509a:	187b      	adds	r3, r7, r1
 800509c:	2202      	movs	r2, #2
 800509e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a0:	187b      	adds	r3, r7, r1
 80050a2:	2200      	movs	r2, #0
 80050a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050a6:	187b      	adds	r3, r7, r1
 80050a8:	2203      	movs	r2, #3
 80050aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80050ac:	187b      	adds	r3, r7, r1
 80050ae:	2204      	movs	r2, #4
 80050b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b2:	187b      	adds	r3, r7, r1
 80050b4:	4a0a      	ldr	r2, [pc, #40]	; (80050e0 <HAL_USART_MspInit+0xe8>)
 80050b6:	0019      	movs	r1, r3
 80050b8:	0010      	movs	r0, r2
 80050ba:	f001 f80f 	bl	80060dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 80050be:	2200      	movs	r2, #0
 80050c0:	2100      	movs	r1, #0
 80050c2:	201d      	movs	r0, #29
 80050c4:	f000 fd10 	bl	8005ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 80050c8:	201d      	movs	r0, #29
 80050ca:	f000 fd22 	bl	8005b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b00b      	add	sp, #44	; 0x2c
 80050d4:	bd90      	pop	{r4, r7, pc}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	40004800 	.word	0x40004800
 80050dc:	40021000 	.word	0x40021000
 80050e0:	50000400 	.word	0x50000400

080050e4 <LL_USART_IsActiveFlag_FE>:
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	2202      	movs	r2, #2
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d101      	bne.n	80050fc <LL_USART_IsActiveFlag_FE+0x18>
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <LL_USART_IsActiveFlag_FE+0x1a>
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	0018      	movs	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	b002      	add	sp, #8
 8005104:	bd80      	pop	{r7, pc}

08005106 <LL_USART_IsActiveFlag_NE>:
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	2204      	movs	r2, #4
 8005114:	4013      	ands	r3, r2
 8005116:	2b04      	cmp	r3, #4
 8005118:	d101      	bne.n	800511e <LL_USART_IsActiveFlag_NE+0x18>
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <LL_USART_IsActiveFlag_NE+0x1a>
 800511e:	2300      	movs	r3, #0
}
 8005120:	0018      	movs	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	b002      	add	sp, #8
 8005126:	bd80      	pop	{r7, pc}

08005128 <LL_USART_IsActiveFlag_ORE>:
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	2208      	movs	r2, #8
 8005136:	4013      	ands	r3, r2
 8005138:	2b08      	cmp	r3, #8
 800513a:	d101      	bne.n	8005140 <LL_USART_IsActiveFlag_ORE+0x18>
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <LL_USART_IsActiveFlag_ORE+0x1a>
 8005140:	2300      	movs	r3, #0
}
 8005142:	0018      	movs	r0, r3
 8005144:	46bd      	mov	sp, r7
 8005146:	b002      	add	sp, #8
 8005148:	bd80      	pop	{r7, pc}

0800514a <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	2220      	movs	r2, #32
 8005158:	4013      	ands	r3, r2
 800515a:	2b20      	cmp	r3, #32
 800515c:	d101      	bne.n	8005162 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8005162:	2300      	movs	r3, #0
}
 8005164:	0018      	movs	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	b002      	add	sp, #8
 800516a:	bd80      	pop	{r7, pc}

0800516c <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2220      	movs	r2, #32
 800517a:	4013      	ands	r3, r2
 800517c:	2b20      	cmp	r3, #32
 800517e:	d101      	bne.n	8005184 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8005184:	2300      	movs	r3, #0
}
 8005186:	0018      	movs	r0, r3
 8005188:	46bd      	mov	sp, r7
 800518a:	b002      	add	sp, #8
 800518c:	bd80      	pop	{r7, pc}

0800518e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800519c:	e7fe      	b.n	800519c <HardFault_Handler+0x4>

0800519e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051ac:	46c0      	nop			; (mov r8, r8)
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051b6:	f000 f935 	bl	8005424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80051c4:	4b03      	ldr	r3, [pc, #12]	; (80051d4 <DMA1_Channel1_IRQHandler+0x14>)
 80051c6:	0018      	movs	r0, r3
 80051c8:	f000 fe3a 	bl	8005e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80051cc:	46c0      	nop			; (mov r8, r8)
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	46c0      	nop			; (mov r8, r8)
 80051d4:	2000011c 	.word	0x2000011c

080051d8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80051dc:	4b09      	ldr	r3, [pc, #36]	; (8005204 <I2C1_IRQHandler+0x2c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699a      	ldr	r2, [r3, #24]
 80051e2:	23e0      	movs	r3, #224	; 0xe0
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	4013      	ands	r3, r2
 80051e8:	d004      	beq.n	80051f4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <I2C1_IRQHandler+0x2c>)
 80051ec:	0018      	movs	r0, r3
 80051ee:	f001 fa91 	bl	8006714 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80051f2:	e003      	b.n	80051fc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80051f4:	4b03      	ldr	r3, [pc, #12]	; (8005204 <I2C1_IRQHandler+0x2c>)
 80051f6:	0018      	movs	r0, r3
 80051f8:	f001 fa72 	bl	80066e0 <HAL_I2C_EV_IRQHandler>
}
 80051fc:	46c0      	nop			; (mov r8, r8)
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	2000008c 	.word	0x2000008c

08005208 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 800520c:	4b03      	ldr	r3, [pc, #12]	; (800521c <SPI1_IRQHandler+0x14>)
 800520e:	0018      	movs	r0, r3
 8005210:	f002 fc94 	bl	8007b3c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005214:	46c0      	nop			; (mov r8, r8)
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	200000e0 	.word	0x200000e0

08005220 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005224:	4b03      	ldr	r3, [pc, #12]	; (8005234 <SPI2_IRQHandler+0x14>)
 8005226:	0018      	movs	r0, r3
 8005228:	f004 fcf8 	bl	8009c1c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800522c:	46c0      	nop			; (mov r8, r8)
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	46c0      	nop			; (mov r8, r8)
 8005234:	20000178 	.word	0x20000178

08005238 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 800523c:	4b25      	ldr	r3, [pc, #148]	; (80052d4 <USART2_IRQHandler+0x9c>)
 800523e:	6a1a      	ldr	r2, [r3, #32]
 8005240:	4b24      	ldr	r3, [pc, #144]	; (80052d4 <USART2_IRQHandler+0x9c>)
 8005242:	2108      	movs	r1, #8
 8005244:	430a      	orrs	r2, r1
 8005246:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8005248:	4b22      	ldr	r3, [pc, #136]	; (80052d4 <USART2_IRQHandler+0x9c>)
 800524a:	6a1a      	ldr	r2, [r3, #32]
 800524c:	4b21      	ldr	r3, [pc, #132]	; (80052d4 <USART2_IRQHandler+0x9c>)
 800524e:	2102      	movs	r1, #2
 8005250:	430a      	orrs	r2, r1
 8005252:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8005254:	4b1f      	ldr	r3, [pc, #124]	; (80052d4 <USART2_IRQHandler+0x9c>)
 8005256:	6a1a      	ldr	r2, [r3, #32]
 8005258:	4b1e      	ldr	r3, [pc, #120]	; (80052d4 <USART2_IRQHandler+0x9c>)
 800525a:	2104      	movs	r1, #4
 800525c:	430a      	orrs	r2, r1
 800525e:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8005260:	4b1c      	ldr	r3, [pc, #112]	; (80052d4 <USART2_IRQHandler+0x9c>)
 8005262:	0018      	movs	r0, r3
 8005264:	f7ff ff71 	bl	800514a <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8005268:	1e03      	subs	r3, r0, #0
 800526a:	d009      	beq.n	8005280 <USART2_IRQHandler+0x48>
 800526c:	4b19      	ldr	r3, [pc, #100]	; (80052d4 <USART2_IRQHandler+0x9c>)
 800526e:	0018      	movs	r0, r3
 8005270:	f7ff ff7c 	bl	800516c <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8005274:	1e03      	subs	r3, r0, #0
 8005276:	d003      	beq.n	8005280 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8005278:	f7fb ff10 	bl	800109c <USART2_RX_Callback>
	  {
 800527c:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800527e:	e025      	b.n	80052cc <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8005280:	4b14      	ldr	r3, [pc, #80]	; (80052d4 <USART2_IRQHandler+0x9c>)
 8005282:	6a1a      	ldr	r2, [r3, #32]
 8005284:	4b13      	ldr	r3, [pc, #76]	; (80052d4 <USART2_IRQHandler+0x9c>)
 8005286:	2108      	movs	r1, #8
 8005288:	430a      	orrs	r2, r1
 800528a:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 800528c:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <USART2_IRQHandler+0x9c>)
 800528e:	0018      	movs	r0, r3
 8005290:	f7ff ff4a 	bl	8005128 <LL_USART_IsActiveFlag_ORE>
 8005294:	1e03      	subs	r3, r0, #0
 8005296:	d008      	beq.n	80052aa <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8005298:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <USART2_IRQHandler+0x9c>)
 800529a:	6a1a      	ldr	r2, [r3, #32]
 800529c:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <USART2_IRQHandler+0x9c>)
 800529e:	2108      	movs	r1, #8
 80052a0:	430a      	orrs	r2, r1
 80052a2:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <USART2_IRQHandler+0x9c>)
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80052a8:	e010      	b.n	80052cc <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <USART2_IRQHandler+0x9c>)
 80052ac:	0018      	movs	r0, r3
 80052ae:	f7ff ff19 	bl	80050e4 <LL_USART_IsActiveFlag_FE>
 80052b2:	1e03      	subs	r3, r0, #0
 80052b4:	d002      	beq.n	80052bc <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 80052b6:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <USART2_IRQHandler+0x9c>)
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80052ba:	e007      	b.n	80052cc <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <USART2_IRQHandler+0x9c>)
 80052be:	0018      	movs	r0, r3
 80052c0:	f7ff ff21 	bl	8005106 <LL_USART_IsActiveFlag_NE>
 80052c4:	1e03      	subs	r3, r0, #0
 80052c6:	d001      	beq.n	80052cc <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 80052c8:	4b02      	ldr	r3, [pc, #8]	; (80052d4 <USART2_IRQHandler+0x9c>)
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80052cc:	46c0      	nop			; (mov r8, r8)
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	40004400 	.word	0x40004400

080052d8 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 80052dc:	4b03      	ldr	r3, [pc, #12]	; (80052ec <USART3_4_LPUART1_IRQHandler+0x14>)
 80052de:	0018      	movs	r0, r3
 80052e0:	f006 f9d6 	bl	800b690 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 80052e4:	46c0      	nop			; (mov r8, r8)
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	20000228 	.word	0x20000228

080052f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052f4:	46c0      	nop			; (mov r8, r8)
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80052fc:	480d      	ldr	r0, [pc, #52]	; (8005334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80052fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005300:	f7ff fff6 	bl	80052f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005304:	480c      	ldr	r0, [pc, #48]	; (8005338 <LoopForever+0x6>)
  ldr r1, =_edata
 8005306:	490d      	ldr	r1, [pc, #52]	; (800533c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005308:	4a0d      	ldr	r2, [pc, #52]	; (8005340 <LoopForever+0xe>)
  movs r3, #0
 800530a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800530c:	e002      	b.n	8005314 <LoopCopyDataInit>

0800530e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800530e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005312:	3304      	adds	r3, #4

08005314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005318:	d3f9      	bcc.n	800530e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800531a:	4a0a      	ldr	r2, [pc, #40]	; (8005344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800531c:	4c0a      	ldr	r4, [pc, #40]	; (8005348 <LoopForever+0x16>)
  movs r3, #0
 800531e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005320:	e001      	b.n	8005326 <LoopFillZerobss>

08005322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005324:	3204      	adds	r2, #4

08005326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005328:	d3fb      	bcc.n	8005322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800532a:	f007 faf7 	bl	800c91c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800532e:	f7fb f945 	bl	80005bc <main>

08005332 <LoopForever>:

LoopForever:
  b LoopForever
 8005332:	e7fe      	b.n	8005332 <LoopForever>
  ldr   r0, =_estack
 8005334:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800533c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8005340:	0801847c 	.word	0x0801847c
  ldr r2, =_sbss
 8005344:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8005348:	20001304 	.word	0x20001304

0800534c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800534c:	e7fe      	b.n	800534c <ADC1_COMP_IRQHandler>
	...

08005350 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005356:	1dfb      	adds	r3, r7, #7
 8005358:	2200      	movs	r2, #0
 800535a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800535c:	4b0b      	ldr	r3, [pc, #44]	; (800538c <HAL_Init+0x3c>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	4b0a      	ldr	r3, [pc, #40]	; (800538c <HAL_Init+0x3c>)
 8005362:	2180      	movs	r1, #128	; 0x80
 8005364:	0049      	lsls	r1, r1, #1
 8005366:	430a      	orrs	r2, r1
 8005368:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800536a:	2000      	movs	r0, #0
 800536c:	f000 f810 	bl	8005390 <HAL_InitTick>
 8005370:	1e03      	subs	r3, r0, #0
 8005372:	d003      	beq.n	800537c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005374:	1dfb      	adds	r3, r7, #7
 8005376:	2201      	movs	r2, #1
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	e001      	b.n	8005380 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800537c:	f7ff fbd6 	bl	8004b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005380:	1dfb      	adds	r3, r7, #7
 8005382:	781b      	ldrb	r3, [r3, #0]
}
 8005384:	0018      	movs	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	b002      	add	sp, #8
 800538a:	bd80      	pop	{r7, pc}
 800538c:	40022000 	.word	0x40022000

08005390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005390:	b590      	push	{r4, r7, lr}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005398:	230f      	movs	r3, #15
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80053a0:	4b1d      	ldr	r3, [pc, #116]	; (8005418 <HAL_InitTick+0x88>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d02b      	beq.n	8005400 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80053a8:	4b1c      	ldr	r3, [pc, #112]	; (800541c <HAL_InitTick+0x8c>)
 80053aa:	681c      	ldr	r4, [r3, #0]
 80053ac:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <HAL_InitTick+0x88>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	0019      	movs	r1, r3
 80053b2:	23fa      	movs	r3, #250	; 0xfa
 80053b4:	0098      	lsls	r0, r3, #2
 80053b6:	f7fa fea5 	bl	8000104 <__udivsi3>
 80053ba:	0003      	movs	r3, r0
 80053bc:	0019      	movs	r1, r3
 80053be:	0020      	movs	r0, r4
 80053c0:	f7fa fea0 	bl	8000104 <__udivsi3>
 80053c4:	0003      	movs	r3, r0
 80053c6:	0018      	movs	r0, r3
 80053c8:	f000 fbb3 	bl	8005b32 <HAL_SYSTICK_Config>
 80053cc:	1e03      	subs	r3, r0, #0
 80053ce:	d112      	bne.n	80053f6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d80a      	bhi.n	80053ec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	2301      	movs	r3, #1
 80053da:	425b      	negs	r3, r3
 80053dc:	2200      	movs	r2, #0
 80053de:	0018      	movs	r0, r3
 80053e0:	f000 fb82 	bl	8005ae8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053e4:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <HAL_InitTick+0x90>)
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e00d      	b.n	8005408 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80053ec:	230f      	movs	r3, #15
 80053ee:	18fb      	adds	r3, r7, r3
 80053f0:	2201      	movs	r2, #1
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	e008      	b.n	8005408 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80053f6:	230f      	movs	r3, #15
 80053f8:	18fb      	adds	r3, r7, r3
 80053fa:	2201      	movs	r2, #1
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	e003      	b.n	8005408 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005400:	230f      	movs	r3, #15
 8005402:	18fb      	adds	r3, r7, r3
 8005404:	2201      	movs	r2, #1
 8005406:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005408:	230f      	movs	r3, #15
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	781b      	ldrb	r3, [r3, #0]
}
 800540e:	0018      	movs	r0, r3
 8005410:	46bd      	mov	sp, r7
 8005412:	b005      	add	sp, #20
 8005414:	bd90      	pop	{r4, r7, pc}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	2000003c 	.word	0x2000003c
 800541c:	20000034 	.word	0x20000034
 8005420:	20000038 	.word	0x20000038

08005424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005428:	4b05      	ldr	r3, [pc, #20]	; (8005440 <HAL_IncTick+0x1c>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	001a      	movs	r2, r3
 800542e:	4b05      	ldr	r3, [pc, #20]	; (8005444 <HAL_IncTick+0x20>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	18d2      	adds	r2, r2, r3
 8005434:	4b03      	ldr	r3, [pc, #12]	; (8005444 <HAL_IncTick+0x20>)
 8005436:	601a      	str	r2, [r3, #0]
}
 8005438:	46c0      	nop			; (mov r8, r8)
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	2000003c 	.word	0x2000003c
 8005444:	20001300 	.word	0x20001300

08005448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  return uwTick;
 800544c:	4b02      	ldr	r3, [pc, #8]	; (8005458 <HAL_GetTick+0x10>)
 800544e:	681b      	ldr	r3, [r3, #0]
}
 8005450:	0018      	movs	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	46c0      	nop			; (mov r8, r8)
 8005458:	20001300 	.word	0x20001300

0800545c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005464:	f7ff fff0 	bl	8005448 <HAL_GetTick>
 8005468:	0003      	movs	r3, r0
 800546a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3301      	adds	r3, #1
 8005474:	d005      	beq.n	8005482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005476:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <HAL_Delay+0x44>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	001a      	movs	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	189b      	adds	r3, r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	f7ff ffe0 	bl	8005448 <HAL_GetTick>
 8005488:	0002      	movs	r2, r0
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	429a      	cmp	r2, r3
 8005492:	d8f7      	bhi.n	8005484 <HAL_Delay+0x28>
  {
  }
}
 8005494:	46c0      	nop			; (mov r8, r8)
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	46bd      	mov	sp, r7
 800549a:	b004      	add	sp, #16
 800549c:	bd80      	pop	{r7, pc}
 800549e:	46c0      	nop			; (mov r8, r8)
 80054a0:	2000003c 	.word	0x2000003c

080054a4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80054ac:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a06      	ldr	r2, [pc, #24]	; (80054cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80054b2:	4013      	ands	r3, r2
 80054b4:	0019      	movs	r1, r3
 80054b6:	4b04      	ldr	r3, [pc, #16]	; (80054c8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	601a      	str	r2, [r3, #0]
}
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	46bd      	mov	sp, r7
 80054c2:	b002      	add	sp, #8
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	40010000 	.word	0x40010000
 80054cc:	fffff9ff 	.word	0xfffff9ff

080054d0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80054d8:	4a05      	ldr	r2, [pc, #20]	; (80054f0 <LL_EXTI_EnableIT_0_31+0x20>)
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	58d2      	ldr	r2, [r2, r3]
 80054de:	4904      	ldr	r1, [pc, #16]	; (80054f0 <LL_EXTI_EnableIT_0_31+0x20>)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	2280      	movs	r2, #128	; 0x80
 80054e6:	508b      	str	r3, [r1, r2]
}
 80054e8:	46c0      	nop			; (mov r8, r8)
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b002      	add	sp, #8
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40021800 	.word	0x40021800

080054f4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80054fc:	4a06      	ldr	r2, [pc, #24]	; (8005518 <LL_EXTI_DisableIT_0_31+0x24>)
 80054fe:	2380      	movs	r3, #128	; 0x80
 8005500:	58d3      	ldr	r3, [r2, r3]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	43d2      	mvns	r2, r2
 8005506:	4904      	ldr	r1, [pc, #16]	; (8005518 <LL_EXTI_DisableIT_0_31+0x24>)
 8005508:	4013      	ands	r3, r2
 800550a:	2280      	movs	r2, #128	; 0x80
 800550c:	508b      	str	r3, [r1, r2]
}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	46bd      	mov	sp, r7
 8005512:	b002      	add	sp, #8
 8005514:	bd80      	pop	{r7, pc}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	40021800 	.word	0x40021800

0800551c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005524:	4a05      	ldr	r2, [pc, #20]	; (800553c <LL_EXTI_EnableEvent_0_31+0x20>)
 8005526:	2384      	movs	r3, #132	; 0x84
 8005528:	58d2      	ldr	r2, [r2, r3]
 800552a:	4904      	ldr	r1, [pc, #16]	; (800553c <LL_EXTI_EnableEvent_0_31+0x20>)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4313      	orrs	r3, r2
 8005530:	2284      	movs	r2, #132	; 0x84
 8005532:	508b      	str	r3, [r1, r2]

}
 8005534:	46c0      	nop			; (mov r8, r8)
 8005536:	46bd      	mov	sp, r7
 8005538:	b002      	add	sp, #8
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40021800 	.word	0x40021800

08005540 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005548:	4a06      	ldr	r2, [pc, #24]	; (8005564 <LL_EXTI_DisableEvent_0_31+0x24>)
 800554a:	2384      	movs	r3, #132	; 0x84
 800554c:	58d3      	ldr	r3, [r2, r3]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	43d2      	mvns	r2, r2
 8005552:	4904      	ldr	r1, [pc, #16]	; (8005564 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005554:	4013      	ands	r3, r2
 8005556:	2284      	movs	r2, #132	; 0x84
 8005558:	508b      	str	r3, [r1, r2]
}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	46bd      	mov	sp, r7
 800555e:	b002      	add	sp, #8
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	40021800 	.word	0x40021800

08005568 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005570:	4b04      	ldr	r3, [pc, #16]	; (8005584 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8005572:	6819      	ldr	r1, [r3, #0]
 8005574:	4b03      	ldr	r3, [pc, #12]	; (8005584 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	430a      	orrs	r2, r1
 800557a:	601a      	str	r2, [r3, #0]

}
 800557c:	46c0      	nop			; (mov r8, r8)
 800557e:	46bd      	mov	sp, r7
 8005580:	b002      	add	sp, #8
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40021800 	.word	0x40021800

08005588 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005590:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	43d9      	mvns	r1, r3
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800559a:	400a      	ands	r2, r1
 800559c:	601a      	str	r2, [r3, #0]

}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	46bd      	mov	sp, r7
 80055a2:	b002      	add	sp, #8
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	40021800 	.word	0x40021800

080055ac <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80055b4:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80055b6:	6859      	ldr	r1, [r3, #4]
 80055b8:	4b03      	ldr	r3, [pc, #12]	; (80055c8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	430a      	orrs	r2, r1
 80055be:	605a      	str	r2, [r3, #4]
}
 80055c0:	46c0      	nop			; (mov r8, r8)
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b002      	add	sp, #8
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40021800 	.word	0x40021800

080055cc <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80055d4:	4b05      	ldr	r3, [pc, #20]	; (80055ec <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	43d9      	mvns	r1, r3
 80055dc:	4b03      	ldr	r3, [pc, #12]	; (80055ec <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80055de:	400a      	ands	r2, r1
 80055e0:	605a      	str	r2, [r3, #4]
}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	46bd      	mov	sp, r7
 80055e6:	b002      	add	sp, #8
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	40021800 	.word	0x40021800

080055f0 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80055f8:	4b03      	ldr	r3, [pc, #12]	; (8005608 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]
}
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	46bd      	mov	sp, r7
 8005602:	b002      	add	sp, #8
 8005604:	bd80      	pop	{r7, pc}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	40021800 	.word	0x40021800

0800560c <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8005614:	4b03      	ldr	r3, [pc, #12]	; (8005624 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	60da      	str	r2, [r3, #12]
}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	b002      	add	sp, #8
 8005620:	bd80      	pop	{r7, pc}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	40021800 	.word	0x40021800

08005628 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005634:	211f      	movs	r1, #31
 8005636:	187b      	adds	r3, r7, r1
 8005638:	2200      	movs	r2, #0
 800563a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d103      	bne.n	800564a <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8005642:	187b      	adds	r3, r7, r1
 8005644:	2201      	movs	r2, #1
 8005646:	701a      	strb	r2, [r3, #0]
 8005648:	e13d      	b.n	80058c6 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	0fdb      	lsrs	r3, r3, #31
 8005652:	07da      	lsls	r2, r3, #31
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	061b      	lsls	r3, r3, #24
 8005658:	429a      	cmp	r2, r3
 800565a:	d104      	bne.n	8005666 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 800565c:	231f      	movs	r3, #31
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	2201      	movs	r2, #1
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	e12f      	b.n	80058c6 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2229      	movs	r2, #41	; 0x29
 800566a:	5c9b      	ldrb	r3, [r3, r2]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2228      	movs	r2, #40	; 0x28
 8005676:	2100      	movs	r1, #0
 8005678:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	0018      	movs	r0, r3
 8005684:	f7ff fa7a 	bl	8004b7c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2230      	movs	r2, #48	; 0x30
 8005690:	4013      	ands	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a85      	ldr	r2, [pc, #532]	; (80058d4 <HAL_COMP_Init+0x2ac>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	0019      	movs	r1, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	2380      	movs	r3, #128	; 0x80
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d10d      	bne.n	80056f6 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80056da:	4b7f      	ldr	r3, [pc, #508]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4b7e      	ldr	r3, [pc, #504]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 80056e0:	497e      	ldr	r1, [pc, #504]	; (80058dc <HAL_COMP_Init+0x2b4>)
 80056e2:	400a      	ands	r2, r1
 80056e4:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80056e6:	4b7c      	ldr	r3, [pc, #496]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	4b7b      	ldr	r3, [pc, #492]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 80056ec:	2180      	movs	r1, #128	; 0x80
 80056ee:	0109      	lsls	r1, r1, #4
 80056f0:	430a      	orrs	r2, r1
 80056f2:	605a      	str	r2, [r3, #4]
 80056f4:	e01f      	b.n	8005736 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	23c0      	movs	r3, #192	; 0xc0
 80056fc:	015b      	lsls	r3, r3, #5
 80056fe:	429a      	cmp	r2, r3
 8005700:	d10d      	bne.n	800571e <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005702:	4b75      	ldr	r3, [pc, #468]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4b74      	ldr	r3, [pc, #464]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005708:	2180      	movs	r1, #128	; 0x80
 800570a:	0109      	lsls	r1, r1, #4
 800570c:	430a      	orrs	r2, r1
 800570e:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8005710:	4b71      	ldr	r3, [pc, #452]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	4b70      	ldr	r3, [pc, #448]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005716:	4971      	ldr	r1, [pc, #452]	; (80058dc <HAL_COMP_Init+0x2b4>)
 8005718:	400a      	ands	r2, r1
 800571a:	605a      	str	r2, [r3, #4]
 800571c:	e00b      	b.n	8005736 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800571e:	4b6e      	ldr	r3, [pc, #440]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	4b6d      	ldr	r3, [pc, #436]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005724:	496d      	ldr	r1, [pc, #436]	; (80058dc <HAL_COMP_Init+0x2b4>)
 8005726:	400a      	ands	r2, r1
 8005728:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800572a:	4b6b      	ldr	r3, [pc, #428]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	4b6a      	ldr	r3, [pc, #424]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005730:	496a      	ldr	r1, [pc, #424]	; (80058dc <HAL_COMP_Init+0x2b4>)
 8005732:	400a      	ands	r2, r1
 8005734:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	22a0      	movs	r2, #160	; 0xa0
 800573c:	01d2      	lsls	r2, r2, #7
 800573e:	4293      	cmp	r3, r2
 8005740:	d017      	beq.n	8005772 <HAL_COMP_Init+0x14a>
 8005742:	22a0      	movs	r2, #160	; 0xa0
 8005744:	01d2      	lsls	r2, r2, #7
 8005746:	4293      	cmp	r3, r2
 8005748:	d830      	bhi.n	80057ac <HAL_COMP_Init+0x184>
 800574a:	2b01      	cmp	r3, #1
 800574c:	d01f      	beq.n	800578e <HAL_COMP_Init+0x166>
 800574e:	2280      	movs	r2, #128	; 0x80
 8005750:	01d2      	lsls	r2, r2, #7
 8005752:	4293      	cmp	r3, r2
 8005754:	d12a      	bne.n	80057ac <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005756:	4b60      	ldr	r3, [pc, #384]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4b5f      	ldr	r3, [pc, #380]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 800575c:	2180      	movs	r1, #128	; 0x80
 800575e:	01c9      	lsls	r1, r1, #7
 8005760:	430a      	orrs	r2, r1
 8005762:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005764:	4b5c      	ldr	r3, [pc, #368]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	4b5b      	ldr	r3, [pc, #364]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 800576a:	495d      	ldr	r1, [pc, #372]	; (80058e0 <HAL_COMP_Init+0x2b8>)
 800576c:	400a      	ands	r2, r1
 800576e:	605a      	str	r2, [r3, #4]
        break;
 8005770:	e029      	b.n	80057c6 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005772:	4b59      	ldr	r3, [pc, #356]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	4b58      	ldr	r3, [pc, #352]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005778:	4959      	ldr	r1, [pc, #356]	; (80058e0 <HAL_COMP_Init+0x2b8>)
 800577a:	400a      	ands	r2, r1
 800577c:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800577e:	4b56      	ldr	r3, [pc, #344]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	4b55      	ldr	r3, [pc, #340]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005784:	2180      	movs	r1, #128	; 0x80
 8005786:	01c9      	lsls	r1, r1, #7
 8005788:	430a      	orrs	r2, r1
 800578a:	605a      	str	r2, [r3, #4]
        break;
 800578c:	e01b      	b.n	80057c6 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800578e:	4b52      	ldr	r3, [pc, #328]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b51      	ldr	r3, [pc, #324]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005794:	2180      	movs	r1, #128	; 0x80
 8005796:	01c9      	lsls	r1, r1, #7
 8005798:	430a      	orrs	r2, r1
 800579a:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800579c:	4b4e      	ldr	r3, [pc, #312]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	4b4d      	ldr	r3, [pc, #308]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 80057a2:	2180      	movs	r1, #128	; 0x80
 80057a4:	01c9      	lsls	r1, r1, #7
 80057a6:	430a      	orrs	r2, r1
 80057a8:	605a      	str	r2, [r3, #4]
        break;
 80057aa:	e00c      	b.n	80057c6 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80057ac:	4b4a      	ldr	r3, [pc, #296]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	4b49      	ldr	r3, [pc, #292]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 80057b2:	494b      	ldr	r1, [pc, #300]	; (80058e0 <HAL_COMP_Init+0x2b8>)
 80057b4:	400a      	ands	r2, r1
 80057b6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80057b8:	4b47      	ldr	r3, [pc, #284]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	4b46      	ldr	r3, [pc, #280]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 80057be:	4948      	ldr	r1, [pc, #288]	; (80058e0 <HAL_COMP_Init+0x2b8>)
 80057c0:	400a      	ands	r2, r1
 80057c2:	605a      	str	r2, [r3, #4]
        break;
 80057c4:	46c0      	nop			; (mov r8, r8)
    }
#endif /* COMP3 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2230      	movs	r2, #48	; 0x30
 80057ce:	4013      	ands	r3, r2
 80057d0:	d016      	beq.n	8005800 <HAL_COMP_Init+0x1d8>
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d113      	bne.n	8005800 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057d8:	4b42      	ldr	r3, [pc, #264]	; (80058e4 <HAL_COMP_Init+0x2bc>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4942      	ldr	r1, [pc, #264]	; (80058e8 <HAL_COMP_Init+0x2c0>)
 80057de:	0018      	movs	r0, r3
 80057e0:	f7fa fc90 	bl	8000104 <__udivsi3>
 80057e4:	0003      	movs	r3, r0
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	0013      	movs	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	189b      	adds	r3, r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80057f2:	e002      	b.n	80057fa <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1f9      	bne.n	80057f4 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a34      	ldr	r2, [pc, #208]	; (80058d8 <HAL_COMP_Init+0x2b0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d102      	bne.n	8005810 <HAL_COMP_Init+0x1e8>
 800580a:	2380      	movs	r3, #128	; 0x80
 800580c:	029b      	lsls	r3, r3, #10
 800580e:	e001      	b.n	8005814 <HAL_COMP_Init+0x1ec>
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	02db      	lsls	r3, r3, #11
 8005814:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	2203      	movs	r2, #3
 800581c:	4013      	ands	r3, r2
 800581e:	d040      	beq.n	80058a2 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	2210      	movs	r2, #16
 8005826:	4013      	ands	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	0018      	movs	r0, r3
 800582e:	f7ff fe9b 	bl	8005568 <LL_EXTI_EnableRisingTrig_0_31>
 8005832:	e003      	b.n	800583c <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	0018      	movs	r0, r3
 8005838:	f7ff fea6 	bl	8005588 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	2220      	movs	r2, #32
 8005842:	4013      	ands	r3, r2
 8005844:	d004      	beq.n	8005850 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	0018      	movs	r0, r3
 800584a:	f7ff feaf 	bl	80055ac <LL_EXTI_EnableFallingTrig_0_31>
 800584e:	e003      	b.n	8005858 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	0018      	movs	r0, r3
 8005854:	f7ff feba 	bl	80055cc <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	0018      	movs	r0, r3
 800585c:	f7ff fed6 	bl	800560c <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	0018      	movs	r0, r3
 8005864:	f7ff fec4 	bl	80055f0 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	2202      	movs	r2, #2
 800586e:	4013      	ands	r3, r2
 8005870:	d004      	beq.n	800587c <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	0018      	movs	r0, r3
 8005876:	f7ff fe51 	bl	800551c <LL_EXTI_EnableEvent_0_31>
 800587a:	e003      	b.n	8005884 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	0018      	movs	r0, r3
 8005880:	f7ff fe5e 	bl	8005540 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	2201      	movs	r2, #1
 800588a:	4013      	ands	r3, r2
 800588c:	d004      	beq.n	8005898 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	0018      	movs	r0, r3
 8005892:	f7ff fe1d 	bl	80054d0 <LL_EXTI_EnableIT_0_31>
 8005896:	e00c      	b.n	80058b2 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	0018      	movs	r0, r3
 800589c:	f7ff fe2a 	bl	80054f4 <LL_EXTI_DisableIT_0_31>
 80058a0:	e007      	b.n	80058b2 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f7ff fe4b 	bl	8005540 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	0018      	movs	r0, r3
 80058ae:	f7ff fe21 	bl	80054f4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2229      	movs	r2, #41	; 0x29
 80058b6:	5c9b      	ldrb	r3, [r3, r2]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d103      	bne.n	80058c6 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2229      	movs	r2, #41	; 0x29
 80058c2:	2101      	movs	r1, #1
 80058c4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80058c6:	231f      	movs	r3, #31
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	781b      	ldrb	r3, [r3, #0]
}
 80058cc:	0018      	movs	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	b008      	add	sp, #32
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	fe00740f 	.word	0xfe00740f
 80058d8:	40010200 	.word	0x40010200
 80058dc:	fffff7ff 	.word	0xfffff7ff
 80058e0:	ffffbfff 	.word	0xffffbfff
 80058e4:	20000034 	.word	0x20000034
 80058e8:	00030d40 	.word	0x00030d40

080058ec <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80058f8:	210f      	movs	r1, #15
 80058fa:	187b      	adds	r3, r7, r1
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d103      	bne.n	800590e <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8005906:	187b      	adds	r3, r7, r1
 8005908:	2201      	movs	r2, #1
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	e035      	b.n	800597a <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	0fdb      	lsrs	r3, r3, #31
 8005916:	07da      	lsls	r2, r3, #31
 8005918:	2380      	movs	r3, #128	; 0x80
 800591a:	061b      	lsls	r3, r3, #24
 800591c:	429a      	cmp	r2, r3
 800591e:	d104      	bne.n	800592a <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8005920:	230f      	movs	r3, #15
 8005922:	18fb      	adds	r3, r7, r3
 8005924:	2201      	movs	r2, #1
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	e027      	b.n	800597a <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2229      	movs	r2, #41	; 0x29
 800592e:	5c9b      	ldrb	r3, [r3, r2]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b01      	cmp	r3, #1
 8005934:	d11d      	bne.n	8005972 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2101      	movs	r1, #1
 8005942:	430a      	orrs	r2, r1
 8005944:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2229      	movs	r2, #41	; 0x29
 800594a:	2102      	movs	r1, #2
 800594c:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800594e:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <HAL_COMP_Start+0x9c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	490e      	ldr	r1, [pc, #56]	; (800598c <HAL_COMP_Start+0xa0>)
 8005954:	0018      	movs	r0, r3
 8005956:	f7fa fbd5 	bl	8000104 <__udivsi3>
 800595a:	0003      	movs	r3, r0
 800595c:	3301      	adds	r3, #1
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005962:	e002      	b.n	800596a <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	3b01      	subs	r3, #1
 8005968:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f9      	bne.n	8005964 <HAL_COMP_Start+0x78>
 8005970:	e003      	b.n	800597a <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005972:	230f      	movs	r3, #15
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	2201      	movs	r2, #1
 8005978:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800597a:	230f      	movs	r3, #15
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	781b      	ldrb	r3, [r3, #0]
}
 8005980:	0018      	movs	r0, r3
 8005982:	46bd      	mov	sp, r7
 8005984:	b004      	add	sp, #16
 8005986:	bd80      	pop	{r7, pc}
 8005988:	20000034 	.word	0x20000034
 800598c:	00030d40 	.word	0x00030d40

08005990 <__NVIC_EnableIRQ>:
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	0002      	movs	r2, r0
 8005998:	1dfb      	adds	r3, r7, #7
 800599a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800599c:	1dfb      	adds	r3, r7, #7
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b7f      	cmp	r3, #127	; 0x7f
 80059a2:	d809      	bhi.n	80059b8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059a4:	1dfb      	adds	r3, r7, #7
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	001a      	movs	r2, r3
 80059aa:	231f      	movs	r3, #31
 80059ac:	401a      	ands	r2, r3
 80059ae:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <__NVIC_EnableIRQ+0x30>)
 80059b0:	2101      	movs	r1, #1
 80059b2:	4091      	lsls	r1, r2
 80059b4:	000a      	movs	r2, r1
 80059b6:	601a      	str	r2, [r3, #0]
}
 80059b8:	46c0      	nop			; (mov r8, r8)
 80059ba:	46bd      	mov	sp, r7
 80059bc:	b002      	add	sp, #8
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	e000e100 	.word	0xe000e100

080059c4 <__NVIC_SetPriority>:
{
 80059c4:	b590      	push	{r4, r7, lr}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	0002      	movs	r2, r0
 80059cc:	6039      	str	r1, [r7, #0]
 80059ce:	1dfb      	adds	r3, r7, #7
 80059d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80059d2:	1dfb      	adds	r3, r7, #7
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b7f      	cmp	r3, #127	; 0x7f
 80059d8:	d828      	bhi.n	8005a2c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80059da:	4a2f      	ldr	r2, [pc, #188]	; (8005a98 <__NVIC_SetPriority+0xd4>)
 80059dc:	1dfb      	adds	r3, r7, #7
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	b25b      	sxtb	r3, r3
 80059e2:	089b      	lsrs	r3, r3, #2
 80059e4:	33c0      	adds	r3, #192	; 0xc0
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	589b      	ldr	r3, [r3, r2]
 80059ea:	1dfa      	adds	r2, r7, #7
 80059ec:	7812      	ldrb	r2, [r2, #0]
 80059ee:	0011      	movs	r1, r2
 80059f0:	2203      	movs	r2, #3
 80059f2:	400a      	ands	r2, r1
 80059f4:	00d2      	lsls	r2, r2, #3
 80059f6:	21ff      	movs	r1, #255	; 0xff
 80059f8:	4091      	lsls	r1, r2
 80059fa:	000a      	movs	r2, r1
 80059fc:	43d2      	mvns	r2, r2
 80059fe:	401a      	ands	r2, r3
 8005a00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	019b      	lsls	r3, r3, #6
 8005a06:	22ff      	movs	r2, #255	; 0xff
 8005a08:	401a      	ands	r2, r3
 8005a0a:	1dfb      	adds	r3, r7, #7
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	0018      	movs	r0, r3
 8005a10:	2303      	movs	r3, #3
 8005a12:	4003      	ands	r3, r0
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a18:	481f      	ldr	r0, [pc, #124]	; (8005a98 <__NVIC_SetPriority+0xd4>)
 8005a1a:	1dfb      	adds	r3, r7, #7
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	b25b      	sxtb	r3, r3
 8005a20:	089b      	lsrs	r3, r3, #2
 8005a22:	430a      	orrs	r2, r1
 8005a24:	33c0      	adds	r3, #192	; 0xc0
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	501a      	str	r2, [r3, r0]
}
 8005a2a:	e031      	b.n	8005a90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a2c:	4a1b      	ldr	r2, [pc, #108]	; (8005a9c <__NVIC_SetPriority+0xd8>)
 8005a2e:	1dfb      	adds	r3, r7, #7
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	0019      	movs	r1, r3
 8005a34:	230f      	movs	r3, #15
 8005a36:	400b      	ands	r3, r1
 8005a38:	3b08      	subs	r3, #8
 8005a3a:	089b      	lsrs	r3, r3, #2
 8005a3c:	3306      	adds	r3, #6
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	18d3      	adds	r3, r2, r3
 8005a42:	3304      	adds	r3, #4
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	1dfa      	adds	r2, r7, #7
 8005a48:	7812      	ldrb	r2, [r2, #0]
 8005a4a:	0011      	movs	r1, r2
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	400a      	ands	r2, r1
 8005a50:	00d2      	lsls	r2, r2, #3
 8005a52:	21ff      	movs	r1, #255	; 0xff
 8005a54:	4091      	lsls	r1, r2
 8005a56:	000a      	movs	r2, r1
 8005a58:	43d2      	mvns	r2, r2
 8005a5a:	401a      	ands	r2, r3
 8005a5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	019b      	lsls	r3, r3, #6
 8005a62:	22ff      	movs	r2, #255	; 0xff
 8005a64:	401a      	ands	r2, r3
 8005a66:	1dfb      	adds	r3, r7, #7
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	4003      	ands	r3, r0
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a74:	4809      	ldr	r0, [pc, #36]	; (8005a9c <__NVIC_SetPriority+0xd8>)
 8005a76:	1dfb      	adds	r3, r7, #7
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	001c      	movs	r4, r3
 8005a7c:	230f      	movs	r3, #15
 8005a7e:	4023      	ands	r3, r4
 8005a80:	3b08      	subs	r3, #8
 8005a82:	089b      	lsrs	r3, r3, #2
 8005a84:	430a      	orrs	r2, r1
 8005a86:	3306      	adds	r3, #6
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	18c3      	adds	r3, r0, r3
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	601a      	str	r2, [r3, #0]
}
 8005a90:	46c0      	nop			; (mov r8, r8)
 8005a92:	46bd      	mov	sp, r7
 8005a94:	b003      	add	sp, #12
 8005a96:	bd90      	pop	{r4, r7, pc}
 8005a98:	e000e100 	.word	0xe000e100
 8005a9c:	e000ed00 	.word	0xe000ed00

08005aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	1e5a      	subs	r2, r3, #1
 8005aac:	2380      	movs	r3, #128	; 0x80
 8005aae:	045b      	lsls	r3, r3, #17
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d301      	bcc.n	8005ab8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e010      	b.n	8005ada <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ab8:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <SysTick_Config+0x44>)
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	3a01      	subs	r2, #1
 8005abe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	425b      	negs	r3, r3
 8005ac4:	2103      	movs	r1, #3
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f7ff ff7c 	bl	80059c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005acc:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <SysTick_Config+0x44>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ad2:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <SysTick_Config+0x44>)
 8005ad4:	2207      	movs	r2, #7
 8005ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	0018      	movs	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	b002      	add	sp, #8
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	e000e010 	.word	0xe000e010

08005ae8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	607a      	str	r2, [r7, #4]
 8005af2:	210f      	movs	r1, #15
 8005af4:	187b      	adds	r3, r7, r1
 8005af6:	1c02      	adds	r2, r0, #0
 8005af8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	187b      	adds	r3, r7, r1
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	b25b      	sxtb	r3, r3
 8005b02:	0011      	movs	r1, r2
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7ff ff5d 	bl	80059c4 <__NVIC_SetPriority>
}
 8005b0a:	46c0      	nop			; (mov r8, r8)
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	b004      	add	sp, #16
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	0002      	movs	r2, r0
 8005b1a:	1dfb      	adds	r3, r7, #7
 8005b1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b1e:	1dfb      	adds	r3, r7, #7
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	b25b      	sxtb	r3, r3
 8005b24:	0018      	movs	r0, r3
 8005b26:	f7ff ff33 	bl	8005990 <__NVIC_EnableIRQ>
}
 8005b2a:	46c0      	nop			; (mov r8, r8)
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	b002      	add	sp, #8
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b082      	sub	sp, #8
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f7ff ffaf 	bl	8005aa0 <SysTick_Config>
 8005b42:	0003      	movs	r3, r0
}
 8005b44:	0018      	movs	r0, r3
 8005b46:	46bd      	mov	sp, r7
 8005b48:	b002      	add	sp, #8
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e077      	b.n	8005c4e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a3d      	ldr	r2, [pc, #244]	; (8005c58 <HAL_DMA_Init+0x10c>)
 8005b64:	4694      	mov	ip, r2
 8005b66:	4463      	add	r3, ip
 8005b68:	2114      	movs	r1, #20
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f7fa faca 	bl	8000104 <__udivsi3>
 8005b70:	0003      	movs	r3, r0
 8005b72:	009a      	lsls	r2, r3, #2
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2225      	movs	r2, #37	; 0x25
 8005b7c:	2102      	movs	r1, #2
 8005b7e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4934      	ldr	r1, [pc, #208]	; (8005c5c <HAL_DMA_Init+0x110>)
 8005b8c:	400a      	ands	r2, r1
 8005b8e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6819      	ldr	r1, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	430a      	orrs	r2, r1
 8005bc4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f000 fa37 	bl	800603c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	2380      	movs	r3, #128	; 0x80
 8005bd4:	01db      	lsls	r3, r3, #7
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d102      	bne.n	8005be0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be8:	213f      	movs	r1, #63	; 0x3f
 8005bea:	400a      	ands	r2, r1
 8005bec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005bf6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d011      	beq.n	8005c24 <HAL_DMA_Init+0xd8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d80d      	bhi.n	8005c24 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	f000 fa42 	bl	8006094 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	e008      	b.n	8005c36 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2225      	movs	r2, #37	; 0x25
 8005c40:	2101      	movs	r1, #1
 8005c42:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2224      	movs	r2, #36	; 0x24
 8005c48:	2100      	movs	r1, #0
 8005c4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	0018      	movs	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b002      	add	sp, #8
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	bffdfff8 	.word	0xbffdfff8
 8005c5c:	ffff800f 	.word	0xffff800f

08005c60 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6e:	2317      	movs	r3, #23
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	2200      	movs	r2, #0
 8005c74:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2224      	movs	r2, #36	; 0x24
 8005c7a:	5c9b      	ldrb	r3, [r3, r2]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_DMA_Start_IT+0x24>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e06f      	b.n	8005d64 <HAL_DMA_Start_IT+0x104>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2224      	movs	r2, #36	; 0x24
 8005c88:	2101      	movs	r1, #1
 8005c8a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2225      	movs	r2, #37	; 0x25
 8005c90:	5c9b      	ldrb	r3, [r3, r2]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d157      	bne.n	8005d48 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2225      	movs	r2, #37	; 0x25
 8005c9c:	2102      	movs	r1, #2
 8005c9e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	438a      	bics	r2, r1
 8005cb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 f97d 	bl	8005fbc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d008      	beq.n	8005cdc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	210e      	movs	r1, #14
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	e00f      	b.n	8005cfc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2104      	movs	r1, #4
 8005ce8:	438a      	bics	r2, r1
 8005cea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	210a      	movs	r1, #10
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	2380      	movs	r3, #128	; 0x80
 8005d04:	025b      	lsls	r3, r3, #9
 8005d06:	4013      	ands	r3, r2
 8005d08:	d008      	beq.n	8005d1c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d14:	2180      	movs	r1, #128	; 0x80
 8005d16:	0049      	lsls	r1, r1, #1
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d008      	beq.n	8005d36 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2e:	2180      	movs	r1, #128	; 0x80
 8005d30:	0049      	lsls	r1, r1, #1
 8005d32:	430a      	orrs	r2, r1
 8005d34:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2101      	movs	r1, #1
 8005d42:	430a      	orrs	r2, r1
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	e00a      	b.n	8005d5e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2280      	movs	r2, #128	; 0x80
 8005d4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2224      	movs	r2, #36	; 0x24
 8005d52:	2100      	movs	r1, #0
 8005d54:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005d56:	2317      	movs	r3, #23
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005d5e:	2317      	movs	r3, #23
 8005d60:	18fb      	adds	r3, r7, r3
 8005d62:	781b      	ldrb	r3, [r3, #0]
}
 8005d64:	0018      	movs	r0, r3
 8005d66:	46bd      	mov	sp, r7
 8005d68:	b006      	add	sp, #24
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d74:	210f      	movs	r1, #15
 8005d76:	187b      	adds	r3, r7, r1
 8005d78:	2200      	movs	r2, #0
 8005d7a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2225      	movs	r2, #37	; 0x25
 8005d80:	5c9b      	ldrb	r3, [r3, r2]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d006      	beq.n	8005d96 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005d8e:	187b      	adds	r3, r7, r1
 8005d90:	2201      	movs	r2, #1
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	e049      	b.n	8005e2a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	210e      	movs	r1, #14
 8005da2:	438a      	bics	r2, r1
 8005da4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2101      	movs	r1, #1
 8005db2:	438a      	bics	r2, r1
 8005db4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc0:	491d      	ldr	r1, [pc, #116]	; (8005e38 <HAL_DMA_Abort_IT+0xcc>)
 8005dc2:	400a      	ands	r2, r1
 8005dc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005dc6:	4b1d      	ldr	r3, [pc, #116]	; (8005e3c <HAL_DMA_Abort_IT+0xd0>)
 8005dc8:	6859      	ldr	r1, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	221c      	movs	r2, #28
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	409a      	lsls	r2, r3
 8005dd6:	4b19      	ldr	r3, [pc, #100]	; (8005e3c <HAL_DMA_Abort_IT+0xd0>)
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005de4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00c      	beq.n	8005e08 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df8:	490f      	ldr	r1, [pc, #60]	; (8005e38 <HAL_DMA_Abort_IT+0xcc>)
 8005dfa:	400a      	ands	r2, r1
 8005dfc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005e06:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2225      	movs	r2, #37	; 0x25
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2224      	movs	r2, #36	; 0x24
 8005e14:	2100      	movs	r1, #0
 8005e16:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d004      	beq.n	8005e2a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	0010      	movs	r0, r2
 8005e28:	4798      	blx	r3
    }
  }
  return status;
 8005e2a:	230f      	movs	r3, #15
 8005e2c:	18fb      	adds	r3, r7, r3
 8005e2e:	781b      	ldrb	r3, [r3, #0]
}
 8005e30:	0018      	movs	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	b004      	add	sp, #16
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	fffffeff 	.word	0xfffffeff
 8005e3c:	40020000 	.word	0x40020000

08005e40 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005e48:	4b55      	ldr	r3, [pc, #340]	; (8005fa0 <HAL_DMA_IRQHandler+0x160>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	221c      	movs	r2, #28
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2204      	movs	r2, #4
 8005e60:	409a      	lsls	r2, r3
 8005e62:	0013      	movs	r3, r2
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4013      	ands	r3, r2
 8005e68:	d027      	beq.n	8005eba <HAL_DMA_IRQHandler+0x7a>
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	4013      	ands	r3, r2
 8005e70:	d023      	beq.n	8005eba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d107      	bne.n	8005e8e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2104      	movs	r1, #4
 8005e8a:	438a      	bics	r2, r1
 8005e8c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005e8e:	4b44      	ldr	r3, [pc, #272]	; (8005fa0 <HAL_DMA_IRQHandler+0x160>)
 8005e90:	6859      	ldr	r1, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	221c      	movs	r2, #28
 8005e98:	4013      	ands	r3, r2
 8005e9a:	2204      	movs	r2, #4
 8005e9c:	409a      	lsls	r2, r3
 8005e9e:	4b40      	ldr	r3, [pc, #256]	; (8005fa0 <HAL_DMA_IRQHandler+0x160>)
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d100      	bne.n	8005eae <HAL_DMA_IRQHandler+0x6e>
 8005eac:	e073      	b.n	8005f96 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	0010      	movs	r0, r2
 8005eb6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005eb8:	e06d      	b.n	8005f96 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	221c      	movs	r2, #28
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	409a      	lsls	r2, r3
 8005ec6:	0013      	movs	r3, r2
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d02e      	beq.n	8005f2c <HAL_DMA_IRQHandler+0xec>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	d02a      	beq.n	8005f2c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2220      	movs	r2, #32
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d10b      	bne.n	8005efa <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	210a      	movs	r1, #10
 8005eee:	438a      	bics	r2, r1
 8005ef0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2225      	movs	r2, #37	; 0x25
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005efa:	4b29      	ldr	r3, [pc, #164]	; (8005fa0 <HAL_DMA_IRQHandler+0x160>)
 8005efc:	6859      	ldr	r1, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	221c      	movs	r2, #28
 8005f04:	4013      	ands	r3, r2
 8005f06:	2202      	movs	r2, #2
 8005f08:	409a      	lsls	r2, r3
 8005f0a:	4b25      	ldr	r3, [pc, #148]	; (8005fa0 <HAL_DMA_IRQHandler+0x160>)
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2224      	movs	r2, #36	; 0x24
 8005f14:	2100      	movs	r1, #0
 8005f16:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d03a      	beq.n	8005f96 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	0010      	movs	r0, r2
 8005f28:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005f2a:	e034      	b.n	8005f96 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	221c      	movs	r2, #28
 8005f32:	4013      	ands	r3, r2
 8005f34:	2208      	movs	r2, #8
 8005f36:	409a      	lsls	r2, r3
 8005f38:	0013      	movs	r3, r2
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d02b      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x158>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2208      	movs	r2, #8
 8005f44:	4013      	ands	r3, r2
 8005f46:	d027      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	210e      	movs	r1, #14
 8005f54:	438a      	bics	r2, r1
 8005f56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005f58:	4b11      	ldr	r3, [pc, #68]	; (8005fa0 <HAL_DMA_IRQHandler+0x160>)
 8005f5a:	6859      	ldr	r1, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	221c      	movs	r2, #28
 8005f62:	4013      	ands	r3, r2
 8005f64:	2201      	movs	r2, #1
 8005f66:	409a      	lsls	r2, r3
 8005f68:	4b0d      	ldr	r3, [pc, #52]	; (8005fa0 <HAL_DMA_IRQHandler+0x160>)
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2225      	movs	r2, #37	; 0x25
 8005f78:	2101      	movs	r1, #1
 8005f7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2224      	movs	r2, #36	; 0x24
 8005f80:	2100      	movs	r1, #0
 8005f82:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	0010      	movs	r0, r2
 8005f94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005f96:	46c0      	nop			; (mov r8, r8)
 8005f98:	46c0      	nop			; (mov r8, r8)
}
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	b004      	add	sp, #16
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40020000 	.word	0x40020000

08005fa4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2225      	movs	r2, #37	; 0x25
 8005fb0:	5c9b      	ldrb	r3, [r3, r2]
 8005fb2:	b2db      	uxtb	r3, r3
}
 8005fb4:	0018      	movs	r0, r3
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	b002      	add	sp, #8
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005fd2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d004      	beq.n	8005fe6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005fe4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005fe6:	4b14      	ldr	r3, [pc, #80]	; (8006038 <DMA_SetConfig+0x7c>)
 8005fe8:	6859      	ldr	r1, [r3, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	221c      	movs	r2, #28
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	409a      	lsls	r2, r3
 8005ff6:	4b10      	ldr	r3, [pc, #64]	; (8006038 <DMA_SetConfig+0x7c>)
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	2b10      	cmp	r3, #16
 800600a:	d108      	bne.n	800601e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800601c:	e007      	b.n	800602e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	60da      	str	r2, [r3, #12]
}
 800602e:	46c0      	nop			; (mov r8, r8)
 8006030:	46bd      	mov	sp, r7
 8006032:	b004      	add	sp, #16
 8006034:	bd80      	pop	{r7, pc}
 8006036:	46c0      	nop			; (mov r8, r8)
 8006038:	40020000 	.word	0x40020000

0800603c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006048:	089b      	lsrs	r3, r3, #2
 800604a:	4a10      	ldr	r2, [pc, #64]	; (800608c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800604c:	4694      	mov	ip, r2
 800604e:	4463      	add	r3, ip
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	001a      	movs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	001a      	movs	r2, r3
 800605e:	23ff      	movs	r3, #255	; 0xff
 8006060:	4013      	ands	r3, r2
 8006062:	3b08      	subs	r3, #8
 8006064:	2114      	movs	r1, #20
 8006066:	0018      	movs	r0, r3
 8006068:	f7fa f84c 	bl	8000104 <__udivsi3>
 800606c:	0003      	movs	r3, r0
 800606e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a07      	ldr	r2, [pc, #28]	; (8006090 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8006074:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	221f      	movs	r2, #31
 800607a:	4013      	ands	r3, r2
 800607c:	2201      	movs	r2, #1
 800607e:	409a      	lsls	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8006084:	46c0      	nop			; (mov r8, r8)
 8006086:	46bd      	mov	sp, r7
 8006088:	b004      	add	sp, #16
 800608a:	bd80      	pop	{r7, pc}
 800608c:	10008200 	.word	0x10008200
 8006090:	40020880 	.word	0x40020880

08006094 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	223f      	movs	r2, #63	; 0x3f
 80060a2:	4013      	ands	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4a0a      	ldr	r2, [pc, #40]	; (80060d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80060aa:	4694      	mov	ip, r2
 80060ac:	4463      	add	r3, ip
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	001a      	movs	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a07      	ldr	r2, [pc, #28]	; (80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80060ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3b01      	subs	r3, #1
 80060c0:	2203      	movs	r2, #3
 80060c2:	4013      	ands	r3, r2
 80060c4:	2201      	movs	r2, #1
 80060c6:	409a      	lsls	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	659a      	str	r2, [r3, #88]	; 0x58
}
 80060cc:	46c0      	nop			; (mov r8, r8)
 80060ce:	46bd      	mov	sp, r7
 80060d0:	b004      	add	sp, #16
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	1000823f 	.word	0x1000823f
 80060d8:	40020940 	.word	0x40020940

080060dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060ea:	e147      	b.n	800637c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2101      	movs	r1, #1
 80060f2:	697a      	ldr	r2, [r7, #20]
 80060f4:	4091      	lsls	r1, r2
 80060f6:	000a      	movs	r2, r1
 80060f8:	4013      	ands	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d100      	bne.n	8006104 <HAL_GPIO_Init+0x28>
 8006102:	e138      	b.n	8006376 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2203      	movs	r2, #3
 800610a:	4013      	ands	r3, r2
 800610c:	2b01      	cmp	r3, #1
 800610e:	d005      	beq.n	800611c <HAL_GPIO_Init+0x40>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2203      	movs	r2, #3
 8006116:	4013      	ands	r3, r2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d130      	bne.n	800617e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	2203      	movs	r2, #3
 8006128:	409a      	lsls	r2, r3
 800612a:	0013      	movs	r3, r2
 800612c:	43da      	mvns	r2, r3
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	4013      	ands	r3, r2
 8006132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	409a      	lsls	r2, r3
 800613e:	0013      	movs	r3, r2
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006152:	2201      	movs	r2, #1
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	409a      	lsls	r2, r3
 8006158:	0013      	movs	r3, r2
 800615a:	43da      	mvns	r2, r3
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	4013      	ands	r3, r2
 8006160:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	091b      	lsrs	r3, r3, #4
 8006168:	2201      	movs	r2, #1
 800616a:	401a      	ands	r2, r3
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	409a      	lsls	r2, r3
 8006170:	0013      	movs	r3, r2
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2203      	movs	r2, #3
 8006184:	4013      	ands	r3, r2
 8006186:	2b03      	cmp	r3, #3
 8006188:	d017      	beq.n	80061ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	2203      	movs	r2, #3
 8006196:	409a      	lsls	r2, r3
 8006198:	0013      	movs	r3, r2
 800619a:	43da      	mvns	r2, r3
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	4013      	ands	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	689a      	ldr	r2, [r3, #8]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	409a      	lsls	r2, r3
 80061ac:	0013      	movs	r3, r2
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2203      	movs	r2, #3
 80061c0:	4013      	ands	r3, r2
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d123      	bne.n	800620e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	08da      	lsrs	r2, r3, #3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3208      	adds	r2, #8
 80061ce:	0092      	lsls	r2, r2, #2
 80061d0:	58d3      	ldr	r3, [r2, r3]
 80061d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2207      	movs	r2, #7
 80061d8:	4013      	ands	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	220f      	movs	r2, #15
 80061de:	409a      	lsls	r2, r3
 80061e0:	0013      	movs	r3, r2
 80061e2:	43da      	mvns	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4013      	ands	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	691a      	ldr	r2, [r3, #16]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2107      	movs	r1, #7
 80061f2:	400b      	ands	r3, r1
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	409a      	lsls	r2, r3
 80061f8:	0013      	movs	r3, r2
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	08da      	lsrs	r2, r3, #3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	3208      	adds	r2, #8
 8006208:	0092      	lsls	r2, r2, #2
 800620a:	6939      	ldr	r1, [r7, #16]
 800620c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	2203      	movs	r2, #3
 800621a:	409a      	lsls	r2, r3
 800621c:	0013      	movs	r3, r2
 800621e:	43da      	mvns	r2, r3
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4013      	ands	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2203      	movs	r2, #3
 800622c:	401a      	ands	r2, r3
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	409a      	lsls	r2, r3
 8006234:	0013      	movs	r3, r2
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	23c0      	movs	r3, #192	; 0xc0
 8006248:	029b      	lsls	r3, r3, #10
 800624a:	4013      	ands	r3, r2
 800624c:	d100      	bne.n	8006250 <HAL_GPIO_Init+0x174>
 800624e:	e092      	b.n	8006376 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006250:	4a50      	ldr	r2, [pc, #320]	; (8006394 <HAL_GPIO_Init+0x2b8>)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	089b      	lsrs	r3, r3, #2
 8006256:	3318      	adds	r3, #24
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	589b      	ldr	r3, [r3, r2]
 800625c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2203      	movs	r2, #3
 8006262:	4013      	ands	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	220f      	movs	r2, #15
 8006268:	409a      	lsls	r2, r3
 800626a:	0013      	movs	r3, r2
 800626c:	43da      	mvns	r2, r3
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	4013      	ands	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	23a0      	movs	r3, #160	; 0xa0
 8006278:	05db      	lsls	r3, r3, #23
 800627a:	429a      	cmp	r2, r3
 800627c:	d013      	beq.n	80062a6 <HAL_GPIO_Init+0x1ca>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a45      	ldr	r2, [pc, #276]	; (8006398 <HAL_GPIO_Init+0x2bc>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00d      	beq.n	80062a2 <HAL_GPIO_Init+0x1c6>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a44      	ldr	r2, [pc, #272]	; (800639c <HAL_GPIO_Init+0x2c0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d007      	beq.n	800629e <HAL_GPIO_Init+0x1c2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a43      	ldr	r2, [pc, #268]	; (80063a0 <HAL_GPIO_Init+0x2c4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d101      	bne.n	800629a <HAL_GPIO_Init+0x1be>
 8006296:	2303      	movs	r3, #3
 8006298:	e006      	b.n	80062a8 <HAL_GPIO_Init+0x1cc>
 800629a:	2305      	movs	r3, #5
 800629c:	e004      	b.n	80062a8 <HAL_GPIO_Init+0x1cc>
 800629e:	2302      	movs	r3, #2
 80062a0:	e002      	b.n	80062a8 <HAL_GPIO_Init+0x1cc>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <HAL_GPIO_Init+0x1cc>
 80062a6:	2300      	movs	r3, #0
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	2103      	movs	r1, #3
 80062ac:	400a      	ands	r2, r1
 80062ae:	00d2      	lsls	r2, r2, #3
 80062b0:	4093      	lsls	r3, r2
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80062b8:	4936      	ldr	r1, [pc, #216]	; (8006394 <HAL_GPIO_Init+0x2b8>)
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	089b      	lsrs	r3, r3, #2
 80062be:	3318      	adds	r3, #24
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062c6:	4b33      	ldr	r3, [pc, #204]	; (8006394 <HAL_GPIO_Init+0x2b8>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	43da      	mvns	r2, r3
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	4013      	ands	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	2380      	movs	r3, #128	; 0x80
 80062dc:	035b      	lsls	r3, r3, #13
 80062de:	4013      	ands	r3, r2
 80062e0:	d003      	beq.n	80062ea <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80062ea:	4b2a      	ldr	r3, [pc, #168]	; (8006394 <HAL_GPIO_Init+0x2b8>)
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80062f0:	4b28      	ldr	r3, [pc, #160]	; (8006394 <HAL_GPIO_Init+0x2b8>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	43da      	mvns	r2, r3
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4013      	ands	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	2380      	movs	r3, #128	; 0x80
 8006306:	039b      	lsls	r3, r3, #14
 8006308:	4013      	ands	r3, r2
 800630a:	d003      	beq.n	8006314 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4313      	orrs	r3, r2
 8006312:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006314:	4b1f      	ldr	r3, [pc, #124]	; (8006394 <HAL_GPIO_Init+0x2b8>)
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800631a:	4a1e      	ldr	r2, [pc, #120]	; (8006394 <HAL_GPIO_Init+0x2b8>)
 800631c:	2384      	movs	r3, #132	; 0x84
 800631e:	58d3      	ldr	r3, [r2, r3]
 8006320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	43da      	mvns	r2, r3
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	4013      	ands	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	2380      	movs	r3, #128	; 0x80
 8006332:	029b      	lsls	r3, r3, #10
 8006334:	4013      	ands	r3, r2
 8006336:	d003      	beq.n	8006340 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006340:	4914      	ldr	r1, [pc, #80]	; (8006394 <HAL_GPIO_Init+0x2b8>)
 8006342:	2284      	movs	r2, #132	; 0x84
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006348:	4a12      	ldr	r2, [pc, #72]	; (8006394 <HAL_GPIO_Init+0x2b8>)
 800634a:	2380      	movs	r3, #128	; 0x80
 800634c:	58d3      	ldr	r3, [r2, r3]
 800634e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	43da      	mvns	r2, r3
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4013      	ands	r3, r2
 8006358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	2380      	movs	r3, #128	; 0x80
 8006360:	025b      	lsls	r3, r3, #9
 8006362:	4013      	ands	r3, r2
 8006364:	d003      	beq.n	800636e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800636e:	4909      	ldr	r1, [pc, #36]	; (8006394 <HAL_GPIO_Init+0x2b8>)
 8006370:	2280      	movs	r2, #128	; 0x80
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	3301      	adds	r3, #1
 800637a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	40da      	lsrs	r2, r3
 8006384:	1e13      	subs	r3, r2, #0
 8006386:	d000      	beq.n	800638a <HAL_GPIO_Init+0x2ae>
 8006388:	e6b0      	b.n	80060ec <HAL_GPIO_Init+0x10>
  }
}
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	46c0      	nop			; (mov r8, r8)
 800638e:	46bd      	mov	sp, r7
 8006390:	b006      	add	sp, #24
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40021800 	.word	0x40021800
 8006398:	50000400 	.word	0x50000400
 800639c:	50000800 	.word	0x50000800
 80063a0:	50000c00 	.word	0x50000c00

080063a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e082      	b.n	80064bc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2241      	movs	r2, #65	; 0x41
 80063ba:	5c9b      	ldrb	r3, [r3, r2]
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d107      	bne.n	80063d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2240      	movs	r2, #64	; 0x40
 80063c6:	2100      	movs	r1, #0
 80063c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	0018      	movs	r0, r3
 80063ce:	f7fe fc0b 	bl	8004be8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2241      	movs	r2, #65	; 0x41
 80063d6:	2124      	movs	r1, #36	; 0x24
 80063d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2101      	movs	r1, #1
 80063e6:	438a      	bics	r2, r1
 80063e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4934      	ldr	r1, [pc, #208]	; (80064c4 <HAL_I2C_Init+0x120>)
 80063f4:	400a      	ands	r2, r1
 80063f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4931      	ldr	r1, [pc, #196]	; (80064c8 <HAL_I2C_Init+0x124>)
 8006404:	400a      	ands	r2, r1
 8006406:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d108      	bne.n	8006422 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689a      	ldr	r2, [r3, #8]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2180      	movs	r1, #128	; 0x80
 800641a:	0209      	lsls	r1, r1, #8
 800641c:	430a      	orrs	r2, r1
 800641e:	609a      	str	r2, [r3, #8]
 8006420:	e007      	b.n	8006432 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2184      	movs	r1, #132	; 0x84
 800642c:	0209      	lsls	r1, r1, #8
 800642e:	430a      	orrs	r2, r1
 8006430:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	2b02      	cmp	r3, #2
 8006438:	d104      	bne.n	8006444 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2280      	movs	r2, #128	; 0x80
 8006440:	0112      	lsls	r2, r2, #4
 8006442:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	491f      	ldr	r1, [pc, #124]	; (80064cc <HAL_I2C_Init+0x128>)
 8006450:	430a      	orrs	r2, r1
 8006452:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	491a      	ldr	r1, [pc, #104]	; (80064c8 <HAL_I2C_Init+0x124>)
 8006460:	400a      	ands	r2, r1
 8006462:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	431a      	orrs	r2, r3
 800646e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69d9      	ldr	r1, [r3, #28]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1a      	ldr	r2, [r3, #32]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2101      	movs	r1, #1
 800649a:	430a      	orrs	r2, r1
 800649c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2241      	movs	r2, #65	; 0x41
 80064a8:	2120      	movs	r1, #32
 80064aa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2242      	movs	r2, #66	; 0x42
 80064b6:	2100      	movs	r1, #0
 80064b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	0018      	movs	r0, r3
 80064be:	46bd      	mov	sp, r7
 80064c0:	b002      	add	sp, #8
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	f0ffffff 	.word	0xf0ffffff
 80064c8:	ffff7fff 	.word	0xffff7fff
 80064cc:	02008000 	.word	0x02008000

080064d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80064d0:	b590      	push	{r4, r7, lr}
 80064d2:	b089      	sub	sp, #36	; 0x24
 80064d4:	af02      	add	r7, sp, #8
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	0008      	movs	r0, r1
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	0019      	movs	r1, r3
 80064de:	230a      	movs	r3, #10
 80064e0:	18fb      	adds	r3, r7, r3
 80064e2:	1c02      	adds	r2, r0, #0
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	2308      	movs	r3, #8
 80064e8:	18fb      	adds	r3, r7, r3
 80064ea:	1c0a      	adds	r2, r1, #0
 80064ec:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2241      	movs	r2, #65	; 0x41
 80064f2:	5c9b      	ldrb	r3, [r3, r2]
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	d000      	beq.n	80064fc <HAL_I2C_Master_Transmit+0x2c>
 80064fa:	e0e7      	b.n	80066cc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2240      	movs	r2, #64	; 0x40
 8006500:	5c9b      	ldrb	r3, [r3, r2]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d101      	bne.n	800650a <HAL_I2C_Master_Transmit+0x3a>
 8006506:	2302      	movs	r3, #2
 8006508:	e0e1      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1fe>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2240      	movs	r2, #64	; 0x40
 800650e:	2101      	movs	r1, #1
 8006510:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006512:	f7fe ff99 	bl	8005448 <HAL_GetTick>
 8006516:	0003      	movs	r3, r0
 8006518:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800651a:	2380      	movs	r3, #128	; 0x80
 800651c:	0219      	lsls	r1, r3, #8
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	2319      	movs	r3, #25
 8006526:	2201      	movs	r2, #1
 8006528:	f000 fe76 	bl	8007218 <I2C_WaitOnFlagUntilTimeout>
 800652c:	1e03      	subs	r3, r0, #0
 800652e:	d001      	beq.n	8006534 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e0cc      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2241      	movs	r2, #65	; 0x41
 8006538:	2121      	movs	r1, #33	; 0x21
 800653a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2242      	movs	r2, #66	; 0x42
 8006540:	2110      	movs	r1, #16
 8006542:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2208      	movs	r2, #8
 8006554:	18ba      	adds	r2, r7, r2
 8006556:	8812      	ldrh	r2, [r2, #0]
 8006558:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006564:	b29b      	uxth	r3, r3
 8006566:	2bff      	cmp	r3, #255	; 0xff
 8006568:	d911      	bls.n	800658e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	22ff      	movs	r2, #255	; 0xff
 800656e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006574:	b2da      	uxtb	r2, r3
 8006576:	2380      	movs	r3, #128	; 0x80
 8006578:	045c      	lsls	r4, r3, #17
 800657a:	230a      	movs	r3, #10
 800657c:	18fb      	adds	r3, r7, r3
 800657e:	8819      	ldrh	r1, [r3, #0]
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	4b55      	ldr	r3, [pc, #340]	; (80066d8 <HAL_I2C_Master_Transmit+0x208>)
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	0023      	movs	r3, r4
 8006588:	f001 f800 	bl	800758c <I2C_TransferConfig>
 800658c:	e075      	b.n	800667a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800659c:	b2da      	uxtb	r2, r3
 800659e:	2380      	movs	r3, #128	; 0x80
 80065a0:	049c      	lsls	r4, r3, #18
 80065a2:	230a      	movs	r3, #10
 80065a4:	18fb      	adds	r3, r7, r3
 80065a6:	8819      	ldrh	r1, [r3, #0]
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	4b4b      	ldr	r3, [pc, #300]	; (80066d8 <HAL_I2C_Master_Transmit+0x208>)
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	0023      	movs	r3, r4
 80065b0:	f000 ffec 	bl	800758c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80065b4:	e061      	b.n	800667a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	0018      	movs	r0, r3
 80065be:	f000 fe6a 	bl	8007296 <I2C_WaitOnTXISFlagUntilTimeout>
 80065c2:	1e03      	subs	r3, r0, #0
 80065c4:	d001      	beq.n	80065ca <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e081      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	781a      	ldrb	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fe:	b29b      	uxth	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d03a      	beq.n	800667a <HAL_I2C_Master_Transmit+0x1aa>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006608:	2b00      	cmp	r3, #0
 800660a:	d136      	bne.n	800667a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800660c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	0013      	movs	r3, r2
 8006616:	2200      	movs	r2, #0
 8006618:	2180      	movs	r1, #128	; 0x80
 800661a:	f000 fdfd 	bl	8007218 <I2C_WaitOnFlagUntilTimeout>
 800661e:	1e03      	subs	r3, r0, #0
 8006620:	d001      	beq.n	8006626 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e053      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662a:	b29b      	uxth	r3, r3
 800662c:	2bff      	cmp	r3, #255	; 0xff
 800662e:	d911      	bls.n	8006654 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	22ff      	movs	r2, #255	; 0xff
 8006634:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800663a:	b2da      	uxtb	r2, r3
 800663c:	2380      	movs	r3, #128	; 0x80
 800663e:	045c      	lsls	r4, r3, #17
 8006640:	230a      	movs	r3, #10
 8006642:	18fb      	adds	r3, r7, r3
 8006644:	8819      	ldrh	r1, [r3, #0]
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	2300      	movs	r3, #0
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	0023      	movs	r3, r4
 800664e:	f000 ff9d 	bl	800758c <I2C_TransferConfig>
 8006652:	e012      	b.n	800667a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006658:	b29a      	uxth	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006662:	b2da      	uxtb	r2, r3
 8006664:	2380      	movs	r3, #128	; 0x80
 8006666:	049c      	lsls	r4, r3, #18
 8006668:	230a      	movs	r3, #10
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	8819      	ldrh	r1, [r3, #0]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	2300      	movs	r3, #0
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	0023      	movs	r3, r4
 8006676:	f000 ff89 	bl	800758c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667e:	b29b      	uxth	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	d198      	bne.n	80065b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	0018      	movs	r0, r3
 800668c:	f000 fe42 	bl	8007314 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006690:	1e03      	subs	r3, r0, #0
 8006692:	d001      	beq.n	8006698 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e01a      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2220      	movs	r2, #32
 800669e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	490c      	ldr	r1, [pc, #48]	; (80066dc <HAL_I2C_Master_Transmit+0x20c>)
 80066ac:	400a      	ands	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2241      	movs	r2, #65	; 0x41
 80066b4:	2120      	movs	r1, #32
 80066b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2242      	movs	r2, #66	; 0x42
 80066bc:	2100      	movs	r1, #0
 80066be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2240      	movs	r2, #64	; 0x40
 80066c4:	2100      	movs	r1, #0
 80066c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	e000      	b.n	80066ce <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80066cc:	2302      	movs	r3, #2
  }
}
 80066ce:	0018      	movs	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	b007      	add	sp, #28
 80066d4:	bd90      	pop	{r4, r7, pc}
 80066d6:	46c0      	nop			; (mov r8, r8)
 80066d8:	80002000 	.word	0x80002000
 80066dc:	fe00e800 	.word	0xfe00e800

080066e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	68f9      	ldr	r1, [r7, #12]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	4798      	blx	r3
  }
}
 800670c:	46c0      	nop			; (mov r8, r8)
 800670e:	46bd      	mov	sp, r7
 8006710:	b004      	add	sp, #16
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	0a1b      	lsrs	r3, r3, #8
 8006730:	001a      	movs	r2, r3
 8006732:	2301      	movs	r3, #1
 8006734:	4013      	ands	r3, r2
 8006736:	d010      	beq.n	800675a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	09db      	lsrs	r3, r3, #7
 800673c:	001a      	movs	r2, r3
 800673e:	2301      	movs	r3, #1
 8006740:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006742:	d00a      	beq.n	800675a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006748:	2201      	movs	r2, #1
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2280      	movs	r2, #128	; 0x80
 8006756:	0052      	lsls	r2, r2, #1
 8006758:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	0a9b      	lsrs	r3, r3, #10
 800675e:	001a      	movs	r2, r3
 8006760:	2301      	movs	r3, #1
 8006762:	4013      	ands	r3, r2
 8006764:	d010      	beq.n	8006788 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	09db      	lsrs	r3, r3, #7
 800676a:	001a      	movs	r2, r3
 800676c:	2301      	movs	r3, #1
 800676e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006770:	d00a      	beq.n	8006788 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006776:	2208      	movs	r2, #8
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2280      	movs	r2, #128	; 0x80
 8006784:	00d2      	lsls	r2, r2, #3
 8006786:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	0a5b      	lsrs	r3, r3, #9
 800678c:	001a      	movs	r2, r3
 800678e:	2301      	movs	r3, #1
 8006790:	4013      	ands	r3, r2
 8006792:	d010      	beq.n	80067b6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	09db      	lsrs	r3, r3, #7
 8006798:	001a      	movs	r2, r3
 800679a:	2301      	movs	r3, #1
 800679c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800679e:	d00a      	beq.n	80067b6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a4:	2202      	movs	r2, #2
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2280      	movs	r2, #128	; 0x80
 80067b2:	0092      	lsls	r2, r2, #2
 80067b4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	220b      	movs	r2, #11
 80067c0:	4013      	ands	r3, r2
 80067c2:	d005      	beq.n	80067d0 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	0011      	movs	r1, r2
 80067ca:	0018      	movs	r0, r3
 80067cc:	f000 fbd8 	bl	8006f80 <I2C_ITError>
  }
}
 80067d0:	46c0      	nop			; (mov r8, r8)
 80067d2:	46bd      	mov	sp, r7
 80067d4:	b006      	add	sp, #24
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80067e0:	46c0      	nop			; (mov r8, r8)
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b002      	add	sp, #8
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80067f0:	46c0      	nop			; (mov r8, r8)
 80067f2:	46bd      	mov	sp, r7
 80067f4:	b002      	add	sp, #8
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	0008      	movs	r0, r1
 8006802:	0011      	movs	r1, r2
 8006804:	1cfb      	adds	r3, r7, #3
 8006806:	1c02      	adds	r2, r0, #0
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	003b      	movs	r3, r7
 800680c:	1c0a      	adds	r2, r1, #0
 800680e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006810:	46c0      	nop			; (mov r8, r8)
 8006812:	46bd      	mov	sp, r7
 8006814:	b002      	add	sp, #8
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006820:	46c0      	nop			; (mov r8, r8)
 8006822:	46bd      	mov	sp, r7
 8006824:	b002      	add	sp, #8
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006830:	46c0      	nop			; (mov r8, r8)
 8006832:	46bd      	mov	sp, r7
 8006834:	b002      	add	sp, #8
 8006836:	bd80      	pop	{r7, pc}

08006838 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006840:	46c0      	nop			; (mov r8, r8)
 8006842:	46bd      	mov	sp, r7
 8006844:	b002      	add	sp, #8
 8006846:	bd80      	pop	{r7, pc}

08006848 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2240      	movs	r2, #64	; 0x40
 8006862:	5c9b      	ldrb	r3, [r3, r2]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <I2C_Slave_ISR_IT+0x24>
 8006868:	2302      	movs	r3, #2
 800686a:	e0fa      	b.n	8006a62 <I2C_Slave_ISR_IT+0x21a>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2240      	movs	r2, #64	; 0x40
 8006870:	2101      	movs	r1, #1
 8006872:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	001a      	movs	r2, r3
 800687a:	2301      	movs	r3, #1
 800687c:	4013      	ands	r3, r2
 800687e:	d00b      	beq.n	8006898 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	095b      	lsrs	r3, r3, #5
 8006884:	001a      	movs	r2, r3
 8006886:	2301      	movs	r3, #1
 8006888:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800688a:	d005      	beq.n	8006898 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	0011      	movs	r1, r2
 8006892:	0018      	movs	r0, r3
 8006894:	f000 f9f6 	bl	8006c84 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	091b      	lsrs	r3, r3, #4
 800689c:	001a      	movs	r2, r3
 800689e:	2301      	movs	r3, #1
 80068a0:	4013      	ands	r3, r2
 80068a2:	d054      	beq.n	800694e <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	091b      	lsrs	r3, r3, #4
 80068a8:	001a      	movs	r2, r3
 80068aa:	2301      	movs	r3, #1
 80068ac:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068ae:	d04e      	beq.n	800694e <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d12d      	bne.n	8006916 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2241      	movs	r2, #65	; 0x41
 80068be:	5c9b      	ldrb	r3, [r3, r2]
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b28      	cmp	r3, #40	; 0x28
 80068c4:	d10b      	bne.n	80068de <I2C_Slave_ISR_IT+0x96>
 80068c6:	697a      	ldr	r2, [r7, #20]
 80068c8:	2380      	movs	r3, #128	; 0x80
 80068ca:	049b      	lsls	r3, r3, #18
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d106      	bne.n	80068de <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	0011      	movs	r1, r2
 80068d6:	0018      	movs	r0, r3
 80068d8:	f000 faf8 	bl	8006ecc <I2C_ITListenCplt>
 80068dc:	e036      	b.n	800694c <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2241      	movs	r2, #65	; 0x41
 80068e2:	5c9b      	ldrb	r3, [r3, r2]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b29      	cmp	r3, #41	; 0x29
 80068e8:	d110      	bne.n	800690c <I2C_Slave_ISR_IT+0xc4>
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	4a5f      	ldr	r2, [pc, #380]	; (8006a6c <I2C_Slave_ISR_IT+0x224>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00c      	beq.n	800690c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2210      	movs	r2, #16
 80068f8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	0018      	movs	r0, r3
 80068fe:	f000 fc4a 	bl	8007196 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	0018      	movs	r0, r3
 8006906:	f000 f957 	bl	8006bb8 <I2C_ITSlaveSeqCplt>
 800690a:	e01f      	b.n	800694c <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2210      	movs	r2, #16
 8006912:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006914:	e09d      	b.n	8006a52 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2210      	movs	r2, #16
 800691c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006922:	2204      	movs	r2, #4
 8006924:	431a      	orrs	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d005      	beq.n	800693c <I2C_Slave_ISR_IT+0xf4>
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	2380      	movs	r3, #128	; 0x80
 8006934:	045b      	lsls	r3, r3, #17
 8006936:	429a      	cmp	r2, r3
 8006938:	d000      	beq.n	800693c <I2C_Slave_ISR_IT+0xf4>
 800693a:	e08a      	b.n	8006a52 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	0011      	movs	r1, r2
 8006944:	0018      	movs	r0, r3
 8006946:	f000 fb1b 	bl	8006f80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800694a:	e082      	b.n	8006a52 <I2C_Slave_ISR_IT+0x20a>
 800694c:	e081      	b.n	8006a52 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	089b      	lsrs	r3, r3, #2
 8006952:	001a      	movs	r2, r3
 8006954:	2301      	movs	r3, #1
 8006956:	4013      	ands	r3, r2
 8006958:	d031      	beq.n	80069be <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	089b      	lsrs	r3, r3, #2
 800695e:	001a      	movs	r2, r3
 8006960:	2301      	movs	r3, #1
 8006962:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006964:	d02b      	beq.n	80069be <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696a:	b29b      	uxth	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d018      	beq.n	80069a2 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006998:	b29b      	uxth	r3, r3
 800699a:	3b01      	subs	r3, #1
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d154      	bne.n	8006a56 <I2C_Slave_ISR_IT+0x20e>
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	4a2f      	ldr	r2, [pc, #188]	; (8006a6c <I2C_Slave_ISR_IT+0x224>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d050      	beq.n	8006a56 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	0018      	movs	r0, r3
 80069b8:	f000 f8fe 	bl	8006bb8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80069bc:	e04b      	b.n	8006a56 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	08db      	lsrs	r3, r3, #3
 80069c2:	001a      	movs	r2, r3
 80069c4:	2301      	movs	r3, #1
 80069c6:	4013      	ands	r3, r2
 80069c8:	d00c      	beq.n	80069e4 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	08db      	lsrs	r3, r3, #3
 80069ce:	001a      	movs	r2, r3
 80069d0:	2301      	movs	r3, #1
 80069d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069d4:	d006      	beq.n	80069e4 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	0011      	movs	r1, r2
 80069dc:	0018      	movs	r0, r3
 80069de:	f000 f847 	bl	8006a70 <I2C_ITAddrCplt>
 80069e2:	e039      	b.n	8006a58 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	085b      	lsrs	r3, r3, #1
 80069e8:	001a      	movs	r2, r3
 80069ea:	2301      	movs	r3, #1
 80069ec:	4013      	ands	r3, r2
 80069ee:	d033      	beq.n	8006a58 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	085b      	lsrs	r3, r3, #1
 80069f4:	001a      	movs	r2, r3
 80069f6:	2301      	movs	r3, #1
 80069f8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80069fa:	d02d      	beq.n	8006a58 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d018      	beq.n	8006a38 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	781a      	ldrb	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	3b01      	subs	r3, #1
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a36:	e00f      	b.n	8006a58 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	2380      	movs	r3, #128	; 0x80
 8006a3c:	045b      	lsls	r3, r3, #17
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d002      	beq.n	8006a48 <I2C_Slave_ISR_IT+0x200>
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d107      	bne.n	8006a58 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f000 f8b4 	bl	8006bb8 <I2C_ITSlaveSeqCplt>
 8006a50:	e002      	b.n	8006a58 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8006a52:	46c0      	nop			; (mov r8, r8)
 8006a54:	e000      	b.n	8006a58 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8006a56:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2240      	movs	r2, #64	; 0x40
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	0018      	movs	r0, r3
 8006a64:	46bd      	mov	sp, r7
 8006a66:	b006      	add	sp, #24
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	46c0      	nop			; (mov r8, r8)
 8006a6c:	ffff0000 	.word	0xffff0000

08006a70 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006a70:	b5b0      	push	{r4, r5, r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2241      	movs	r2, #65	; 0x41
 8006a7e:	5c9b      	ldrb	r3, [r3, r2]
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	001a      	movs	r2, r3
 8006a84:	2328      	movs	r3, #40	; 0x28
 8006a86:	4013      	ands	r3, r2
 8006a88:	2b28      	cmp	r3, #40	; 0x28
 8006a8a:	d000      	beq.n	8006a8e <I2C_ITAddrCplt+0x1e>
 8006a8c:	e088      	b.n	8006ba0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	0c1b      	lsrs	r3, r3, #16
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	250f      	movs	r5, #15
 8006a9a:	197b      	adds	r3, r7, r5
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	400a      	ands	r2, r1
 8006aa0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	0c1b      	lsrs	r3, r3, #16
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	200c      	movs	r0, #12
 8006aae:	183b      	adds	r3, r7, r0
 8006ab0:	21fe      	movs	r1, #254	; 0xfe
 8006ab2:	400a      	ands	r2, r1
 8006ab4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	240a      	movs	r4, #10
 8006ac0:	193b      	adds	r3, r7, r4
 8006ac2:	0592      	lsls	r2, r2, #22
 8006ac4:	0d92      	lsrs	r2, r2, #22
 8006ac6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	18fb      	adds	r3, r7, r3
 8006ad4:	21fe      	movs	r1, #254	; 0xfe
 8006ad6:	400a      	ands	r2, r1
 8006ad8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d148      	bne.n	8006b74 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006ae2:	0021      	movs	r1, r4
 8006ae4:	187b      	adds	r3, r7, r1
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	09db      	lsrs	r3, r3, #7
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	183b      	adds	r3, r7, r0
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	4053      	eors	r3, r2
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	001a      	movs	r2, r3
 8006af6:	2306      	movs	r3, #6
 8006af8:	4013      	ands	r3, r2
 8006afa:	d120      	bne.n	8006b3e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006afc:	183b      	adds	r3, r7, r0
 8006afe:	187a      	adds	r2, r7, r1
 8006b00:	8812      	ldrh	r2, [r2, #0]
 8006b02:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d14c      	bne.n	8006bb0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2208      	movs	r2, #8
 8006b22:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2240      	movs	r2, #64	; 0x40
 8006b28:	2100      	movs	r1, #0
 8006b2a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b2c:	183b      	adds	r3, r7, r0
 8006b2e:	881a      	ldrh	r2, [r3, #0]
 8006b30:	197b      	adds	r3, r7, r5
 8006b32:	7819      	ldrb	r1, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	0018      	movs	r0, r3
 8006b38:	f7ff fe5e 	bl	80067f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006b3c:	e038      	b.n	8006bb0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006b3e:	240c      	movs	r4, #12
 8006b40:	193b      	adds	r3, r7, r4
 8006b42:	2208      	movs	r2, #8
 8006b44:	18ba      	adds	r2, r7, r2
 8006b46:	8812      	ldrh	r2, [r2, #0]
 8006b48:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006b4a:	2380      	movs	r3, #128	; 0x80
 8006b4c:	021a      	lsls	r2, r3, #8
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	0011      	movs	r1, r2
 8006b52:	0018      	movs	r0, r3
 8006b54:	f000 fd54 	bl	8007600 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2240      	movs	r2, #64	; 0x40
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b60:	193b      	adds	r3, r7, r4
 8006b62:	881a      	ldrh	r2, [r3, #0]
 8006b64:	230f      	movs	r3, #15
 8006b66:	18fb      	adds	r3, r7, r3
 8006b68:	7819      	ldrb	r1, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f7ff fe43 	bl	80067f8 <HAL_I2C_AddrCallback>
}
 8006b72:	e01d      	b.n	8006bb0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006b74:	2380      	movs	r3, #128	; 0x80
 8006b76:	021a      	lsls	r2, r3, #8
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	0011      	movs	r1, r2
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	f000 fd3f 	bl	8007600 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2240      	movs	r2, #64	; 0x40
 8006b86:	2100      	movs	r1, #0
 8006b88:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	881a      	ldrh	r2, [r3, #0]
 8006b90:	230f      	movs	r3, #15
 8006b92:	18fb      	adds	r3, r7, r3
 8006b94:	7819      	ldrb	r1, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f7ff fe2d 	bl	80067f8 <HAL_I2C_AddrCallback>
}
 8006b9e:	e007      	b.n	8006bb0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2208      	movs	r2, #8
 8006ba6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2240      	movs	r2, #64	; 0x40
 8006bac:	2100      	movs	r1, #0
 8006bae:	5499      	strb	r1, [r3, r2]
}
 8006bb0:	46c0      	nop			; (mov r8, r8)
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b004      	add	sp, #16
 8006bb6:	bdb0      	pop	{r4, r5, r7, pc}

08006bb8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2242      	movs	r2, #66	; 0x42
 8006bcc:	2100      	movs	r1, #0
 8006bce:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	0b9b      	lsrs	r3, r3, #14
 8006bd4:	001a      	movs	r2, r3
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	4013      	ands	r3, r2
 8006bda:	d008      	beq.n	8006bee <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4925      	ldr	r1, [pc, #148]	; (8006c7c <I2C_ITSlaveSeqCplt+0xc4>)
 8006be8:	400a      	ands	r2, r1
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	e00d      	b.n	8006c0a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	0bdb      	lsrs	r3, r3, #15
 8006bf2:	001a      	movs	r2, r3
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	d007      	beq.n	8006c0a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	491e      	ldr	r1, [pc, #120]	; (8006c80 <I2C_ITSlaveSeqCplt+0xc8>)
 8006c06:	400a      	ands	r2, r1
 8006c08:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2241      	movs	r2, #65	; 0x41
 8006c0e:	5c9b      	ldrb	r3, [r3, r2]
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b29      	cmp	r3, #41	; 0x29
 8006c14:	d114      	bne.n	8006c40 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2241      	movs	r2, #65	; 0x41
 8006c1a:	2128      	movs	r1, #40	; 0x28
 8006c1c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2221      	movs	r2, #33	; 0x21
 8006c22:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2101      	movs	r1, #1
 8006c28:	0018      	movs	r0, r3
 8006c2a:	f000 fce9 	bl	8007600 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2240      	movs	r2, #64	; 0x40
 8006c32:	2100      	movs	r1, #0
 8006c34:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f7ff fdcd 	bl	80067d8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c3e:	e019      	b.n	8006c74 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2241      	movs	r2, #65	; 0x41
 8006c44:	5c9b      	ldrb	r3, [r3, r2]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b2a      	cmp	r3, #42	; 0x2a
 8006c4a:	d113      	bne.n	8006c74 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2241      	movs	r2, #65	; 0x41
 8006c50:	2128      	movs	r1, #40	; 0x28
 8006c52:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2222      	movs	r2, #34	; 0x22
 8006c58:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2102      	movs	r1, #2
 8006c5e:	0018      	movs	r0, r3
 8006c60:	f000 fcce 	bl	8007600 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2240      	movs	r2, #64	; 0x40
 8006c68:	2100      	movs	r1, #0
 8006c6a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f7ff fdba 	bl	80067e8 <HAL_I2C_SlaveRxCpltCallback>
}
 8006c74:	46c0      	nop			; (mov r8, r8)
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b004      	add	sp, #16
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	ffffbfff 	.word	0xffffbfff
 8006c80:	ffff7fff 	.word	0xffff7fff

08006c84 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c9a:	200f      	movs	r0, #15
 8006c9c:	183b      	adds	r3, r7, r0
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	2141      	movs	r1, #65	; 0x41
 8006ca2:	5c52      	ldrb	r2, [r2, r1]
 8006ca4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2220      	movs	r2, #32
 8006cac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cae:	183b      	adds	r3, r7, r0
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b21      	cmp	r3, #33	; 0x21
 8006cb4:	d003      	beq.n	8006cbe <I2C_ITSlaveCplt+0x3a>
 8006cb6:	183b      	adds	r3, r7, r0
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b29      	cmp	r3, #41	; 0x29
 8006cbc:	d109      	bne.n	8006cd2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006cbe:	4a7d      	ldr	r2, [pc, #500]	; (8006eb4 <I2C_ITSlaveCplt+0x230>)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	0011      	movs	r1, r2
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f000 fc9b 	bl	8007600 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2221      	movs	r2, #33	; 0x21
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
 8006cd0:	e011      	b.n	8006cf6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cd2:	220f      	movs	r2, #15
 8006cd4:	18bb      	adds	r3, r7, r2
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2b22      	cmp	r3, #34	; 0x22
 8006cda:	d003      	beq.n	8006ce4 <I2C_ITSlaveCplt+0x60>
 8006cdc:	18bb      	adds	r3, r7, r2
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce2:	d108      	bne.n	8006cf6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006ce4:	4a74      	ldr	r2, [pc, #464]	; (8006eb8 <I2C_ITSlaveCplt+0x234>)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	0011      	movs	r1, r2
 8006cea:	0018      	movs	r0, r3
 8006cec:	f000 fc88 	bl	8007600 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2222      	movs	r2, #34	; 0x22
 8006cf4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2180      	movs	r1, #128	; 0x80
 8006d02:	0209      	lsls	r1, r1, #8
 8006d04:	430a      	orrs	r2, r1
 8006d06:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685a      	ldr	r2, [r3, #4]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	496a      	ldr	r1, [pc, #424]	; (8006ebc <I2C_ITSlaveCplt+0x238>)
 8006d14:	400a      	ands	r2, r1
 8006d16:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f000 fa3b 	bl	8007196 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	0b9b      	lsrs	r3, r3, #14
 8006d24:	001a      	movs	r2, r3
 8006d26:	2301      	movs	r3, #1
 8006d28:	4013      	ands	r3, r2
 8006d2a:	d013      	beq.n	8006d54 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4962      	ldr	r1, [pc, #392]	; (8006ec0 <I2C_ITSlaveCplt+0x23c>)
 8006d38:	400a      	ands	r2, r1
 8006d3a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d020      	beq.n	8006d86 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d52:	e018      	b.n	8006d86 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	0bdb      	lsrs	r3, r3, #15
 8006d58:	001a      	movs	r2, r3
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	d012      	beq.n	8006d86 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4956      	ldr	r1, [pc, #344]	; (8006ec4 <I2C_ITSlaveCplt+0x240>)
 8006d6c:	400a      	ands	r2, r1
 8006d6e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d006      	beq.n	8006d86 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	089b      	lsrs	r3, r3, #2
 8006d8a:	001a      	movs	r2, r3
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4013      	ands	r3, r2
 8006d90:	d020      	beq.n	8006dd4 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2204      	movs	r2, #4
 8006d96:	4393      	bics	r3, r2
 8006d98:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	b2d2      	uxtb	r2, r2
 8006da6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00c      	beq.n	8006dd4 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d005      	beq.n	8006dea <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de2:	2204      	movs	r2, #4
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2242      	movs	r2, #66	; 0x42
 8006dee:	2100      	movs	r1, #0
 8006df0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d013      	beq.n	8006e28 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	0011      	movs	r1, r2
 8006e08:	0018      	movs	r0, r3
 8006e0a:	f000 f8b9 	bl	8006f80 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2241      	movs	r2, #65	; 0x41
 8006e12:	5c9b      	ldrb	r3, [r3, r2]
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b28      	cmp	r3, #40	; 0x28
 8006e18:	d147      	bne.n	8006eaa <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	0011      	movs	r1, r2
 8006e20:	0018      	movs	r0, r3
 8006e22:	f000 f853 	bl	8006ecc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e26:	e040      	b.n	8006eaa <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	4a26      	ldr	r2, [pc, #152]	; (8006ec8 <I2C_ITSlaveCplt+0x244>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d016      	beq.n	8006e60 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	0018      	movs	r0, r3
 8006e36:	f7ff febf 	bl	8006bb8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a22      	ldr	r2, [pc, #136]	; (8006ec8 <I2C_ITSlaveCplt+0x244>)
 8006e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2241      	movs	r2, #65	; 0x41
 8006e44:	2120      	movs	r1, #32
 8006e46:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2240      	movs	r2, #64	; 0x40
 8006e52:	2100      	movs	r1, #0
 8006e54:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f7ff fcdd 	bl	8006818 <HAL_I2C_ListenCpltCallback>
}
 8006e5e:	e024      	b.n	8006eaa <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2241      	movs	r2, #65	; 0x41
 8006e64:	5c9b      	ldrb	r3, [r3, r2]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b22      	cmp	r3, #34	; 0x22
 8006e6a:	d10f      	bne.n	8006e8c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2241      	movs	r2, #65	; 0x41
 8006e70:	2120      	movs	r1, #32
 8006e72:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2240      	movs	r2, #64	; 0x40
 8006e7e:	2100      	movs	r1, #0
 8006e80:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	0018      	movs	r0, r3
 8006e86:	f7ff fcaf 	bl	80067e8 <HAL_I2C_SlaveRxCpltCallback>
}
 8006e8a:	e00e      	b.n	8006eaa <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2241      	movs	r2, #65	; 0x41
 8006e90:	2120      	movs	r1, #32
 8006e92:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2240      	movs	r2, #64	; 0x40
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	f7ff fc97 	bl	80067d8 <HAL_I2C_SlaveTxCpltCallback>
}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	46bd      	mov	sp, r7
 8006eae:	b006      	add	sp, #24
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	46c0      	nop			; (mov r8, r8)
 8006eb4:	00008001 	.word	0x00008001
 8006eb8:	00008002 	.word	0x00008002
 8006ebc:	fe00e800 	.word	0xfe00e800
 8006ec0:	ffffbfff 	.word	0xffffbfff
 8006ec4:	ffff7fff 	.word	0xffff7fff
 8006ec8:	ffff0000 	.word	0xffff0000

08006ecc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a27      	ldr	r2, [pc, #156]	; (8006f78 <I2C_ITListenCplt+0xac>)
 8006eda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2241      	movs	r2, #65	; 0x41
 8006ee6:	2120      	movs	r1, #32
 8006ee8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2242      	movs	r2, #66	; 0x42
 8006eee:	2100      	movs	r1, #0
 8006ef0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	089b      	lsrs	r3, r3, #2
 8006efc:	001a      	movs	r2, r3
 8006efe:	2301      	movs	r3, #1
 8006f00:	4013      	ands	r3, r2
 8006f02:	d022      	beq.n	8006f4a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d012      	beq.n	8006f4a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f42:	2204      	movs	r2, #4
 8006f44:	431a      	orrs	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f4a:	4a0c      	ldr	r2, [pc, #48]	; (8006f7c <I2C_ITListenCplt+0xb0>)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	0011      	movs	r1, r2
 8006f50:	0018      	movs	r0, r3
 8006f52:	f000 fb55 	bl	8007600 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2210      	movs	r2, #16
 8006f5c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2240      	movs	r2, #64	; 0x40
 8006f62:	2100      	movs	r1, #0
 8006f64:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	0018      	movs	r0, r3
 8006f6a:	f7ff fc55 	bl	8006818 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006f6e:	46c0      	nop			; (mov r8, r8)
 8006f70:	46bd      	mov	sp, r7
 8006f72:	b002      	add	sp, #8
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	46c0      	nop			; (mov r8, r8)
 8006f78:	ffff0000 	.word	0xffff0000
 8006f7c:	00008003 	.word	0x00008003

08006f80 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006f8a:	200f      	movs	r0, #15
 8006f8c:	183b      	adds	r3, r7, r0
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	2141      	movs	r1, #65	; 0x41
 8006f92:	5c52      	ldrb	r2, [r2, r1]
 8006f94:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2242      	movs	r2, #66	; 0x42
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a62      	ldr	r2, [pc, #392]	; (800712c <I2C_ITError+0x1ac>)
 8006fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006fb6:	183b      	adds	r3, r7, r0
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b28      	cmp	r3, #40	; 0x28
 8006fbc:	d007      	beq.n	8006fce <I2C_ITError+0x4e>
 8006fbe:	183b      	adds	r3, r7, r0
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	2b29      	cmp	r3, #41	; 0x29
 8006fc4:	d003      	beq.n	8006fce <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006fc6:	183b      	adds	r3, r7, r0
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2b2a      	cmp	r3, #42	; 0x2a
 8006fcc:	d10c      	bne.n	8006fe8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2103      	movs	r1, #3
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	f000 fb14 	bl	8007600 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2241      	movs	r2, #65	; 0x41
 8006fdc:	2128      	movs	r1, #40	; 0x28
 8006fde:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a53      	ldr	r2, [pc, #332]	; (8007130 <I2C_ITError+0x1b0>)
 8006fe4:	635a      	str	r2, [r3, #52]	; 0x34
 8006fe6:	e012      	b.n	800700e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fe8:	4a52      	ldr	r2, [pc, #328]	; (8007134 <I2C_ITError+0x1b4>)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	0011      	movs	r1, r2
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f000 fb06 	bl	8007600 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2241      	movs	r2, #65	; 0x41
 8006ff8:	5c9b      	ldrb	r3, [r3, r2]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b60      	cmp	r3, #96	; 0x60
 8006ffe:	d003      	beq.n	8007008 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2241      	movs	r2, #65	; 0x41
 8007004:	2120      	movs	r1, #32
 8007006:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007012:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007018:	2b00      	cmp	r3, #0
 800701a:	d03b      	beq.n	8007094 <I2C_ITError+0x114>
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b11      	cmp	r3, #17
 8007020:	d002      	beq.n	8007028 <I2C_ITError+0xa8>
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b21      	cmp	r3, #33	; 0x21
 8007026:	d135      	bne.n	8007094 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	2380      	movs	r3, #128	; 0x80
 8007030:	01db      	lsls	r3, r3, #7
 8007032:	401a      	ands	r2, r3
 8007034:	2380      	movs	r3, #128	; 0x80
 8007036:	01db      	lsls	r3, r3, #7
 8007038:	429a      	cmp	r2, r3
 800703a:	d107      	bne.n	800704c <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	493c      	ldr	r1, [pc, #240]	; (8007138 <I2C_ITError+0x1b8>)
 8007048:	400a      	ands	r2, r1
 800704a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	0018      	movs	r0, r3
 8007052:	f7fe ffa7 	bl	8005fa4 <HAL_DMA_GetState>
 8007056:	0003      	movs	r3, r0
 8007058:	2b01      	cmp	r3, #1
 800705a:	d016      	beq.n	800708a <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	4a36      	ldr	r2, [pc, #216]	; (800713c <I2C_ITError+0x1bc>)
 8007062:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2240      	movs	r2, #64	; 0x40
 8007068:	2100      	movs	r1, #0
 800706a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007070:	0018      	movs	r0, r3
 8007072:	f7fe fe7b 	bl	8005d6c <HAL_DMA_Abort_IT>
 8007076:	1e03      	subs	r3, r0, #0
 8007078:	d051      	beq.n	800711e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	0018      	movs	r0, r3
 8007086:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007088:	e049      	b.n	800711e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	0018      	movs	r0, r3
 800708e:	f000 f859 	bl	8007144 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007092:	e044      	b.n	800711e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007098:	2b00      	cmp	r3, #0
 800709a:	d03b      	beq.n	8007114 <I2C_ITError+0x194>
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b12      	cmp	r3, #18
 80070a0:	d002      	beq.n	80070a8 <I2C_ITError+0x128>
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b22      	cmp	r3, #34	; 0x22
 80070a6:	d135      	bne.n	8007114 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	2380      	movs	r3, #128	; 0x80
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	401a      	ands	r2, r3
 80070b4:	2380      	movs	r3, #128	; 0x80
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d107      	bne.n	80070cc <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	491e      	ldr	r1, [pc, #120]	; (8007140 <I2C_ITError+0x1c0>)
 80070c8:	400a      	ands	r2, r1
 80070ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d0:	0018      	movs	r0, r3
 80070d2:	f7fe ff67 	bl	8005fa4 <HAL_DMA_GetState>
 80070d6:	0003      	movs	r3, r0
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d016      	beq.n	800710a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e0:	4a16      	ldr	r2, [pc, #88]	; (800713c <I2C_ITError+0x1bc>)
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2240      	movs	r2, #64	; 0x40
 80070e8:	2100      	movs	r1, #0
 80070ea:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f0:	0018      	movs	r0, r3
 80070f2:	f7fe fe3b 	bl	8005d6c <HAL_DMA_Abort_IT>
 80070f6:	1e03      	subs	r3, r0, #0
 80070f8:	d013      	beq.n	8007122 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007104:	0018      	movs	r0, r3
 8007106:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007108:	e00b      	b.n	8007122 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	0018      	movs	r0, r3
 800710e:	f000 f819 	bl	8007144 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007112:	e006      	b.n	8007122 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	0018      	movs	r0, r3
 8007118:	f000 f814 	bl	8007144 <I2C_TreatErrorCallback>
  }
}
 800711c:	e002      	b.n	8007124 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800711e:	46c0      	nop			; (mov r8, r8)
 8007120:	e000      	b.n	8007124 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007122:	46c0      	nop			; (mov r8, r8)
}
 8007124:	46c0      	nop			; (mov r8, r8)
 8007126:	46bd      	mov	sp, r7
 8007128:	b004      	add	sp, #16
 800712a:	bd80      	pop	{r7, pc}
 800712c:	ffff0000 	.word	0xffff0000
 8007130:	08006849 	.word	0x08006849
 8007134:	00008003 	.word	0x00008003
 8007138:	ffffbfff 	.word	0xffffbfff
 800713c:	080071db 	.word	0x080071db
 8007140:	ffff7fff 	.word	0xffff7fff

08007144 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2241      	movs	r2, #65	; 0x41
 8007150:	5c9b      	ldrb	r3, [r3, r2]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b60      	cmp	r3, #96	; 0x60
 8007156:	d10f      	bne.n	8007178 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2241      	movs	r2, #65	; 0x41
 800715c:	2120      	movs	r1, #32
 800715e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2240      	movs	r2, #64	; 0x40
 800716a:	2100      	movs	r1, #0
 800716c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	0018      	movs	r0, r3
 8007172:	f7ff fb61 	bl	8006838 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007176:	e00a      	b.n	800718e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2240      	movs	r2, #64	; 0x40
 8007182:	2100      	movs	r1, #0
 8007184:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	0018      	movs	r0, r3
 800718a:	f7ff fb4d 	bl	8006828 <HAL_I2C_ErrorCallback>
}
 800718e:	46c0      	nop			; (mov r8, r8)
 8007190:	46bd      	mov	sp, r7
 8007192:	b002      	add	sp, #8
 8007194:	bd80      	pop	{r7, pc}

08007196 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	2202      	movs	r2, #2
 80071a6:	4013      	ands	r3, r2
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d103      	bne.n	80071b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2200      	movs	r2, #0
 80071b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	2201      	movs	r2, #1
 80071bc:	4013      	ands	r3, r2
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d007      	beq.n	80071d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	699a      	ldr	r2, [r3, #24]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2101      	movs	r1, #1
 80071ce:	430a      	orrs	r2, r1
 80071d0:	619a      	str	r2, [r3, #24]
  }
}
 80071d2:	46c0      	nop			; (mov r8, r8)
 80071d4:	46bd      	mov	sp, r7
 80071d6:	b002      	add	sp, #8
 80071d8:	bd80      	pop	{r7, pc}

080071da <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f4:	2200      	movs	r2, #0
 80071f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007204:	2200      	movs	r2, #0
 8007206:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	0018      	movs	r0, r3
 800720c:	f7ff ff9a 	bl	8007144 <I2C_TreatErrorCallback>
}
 8007210:	46c0      	nop			; (mov r8, r8)
 8007212:	46bd      	mov	sp, r7
 8007214:	b004      	add	sp, #16
 8007216:	bd80      	pop	{r7, pc}

08007218 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	1dfb      	adds	r3, r7, #7
 8007226:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007228:	e021      	b.n	800726e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	3301      	adds	r3, #1
 800722e:	d01e      	beq.n	800726e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007230:	f7fe f90a 	bl	8005448 <HAL_GetTick>
 8007234:	0002      	movs	r2, r0
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	429a      	cmp	r2, r3
 800723e:	d302      	bcc.n	8007246 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d113      	bne.n	800726e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724a:	2220      	movs	r2, #32
 800724c:	431a      	orrs	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2241      	movs	r2, #65	; 0x41
 8007256:	2120      	movs	r1, #32
 8007258:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2242      	movs	r2, #66	; 0x42
 800725e:	2100      	movs	r1, #0
 8007260:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2240      	movs	r2, #64	; 0x40
 8007266:	2100      	movs	r1, #0
 8007268:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e00f      	b.n	800728e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	4013      	ands	r3, r2
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	425a      	negs	r2, r3
 800727e:	4153      	adcs	r3, r2
 8007280:	b2db      	uxtb	r3, r3
 8007282:	001a      	movs	r2, r3
 8007284:	1dfb      	adds	r3, r7, #7
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	429a      	cmp	r2, r3
 800728a:	d0ce      	beq.n	800722a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	0018      	movs	r0, r3
 8007290:	46bd      	mov	sp, r7
 8007292:	b004      	add	sp, #16
 8007294:	bd80      	pop	{r7, pc}

08007296 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072a2:	e02b      	b.n	80072fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	68b9      	ldr	r1, [r7, #8]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	0018      	movs	r0, r3
 80072ac:	f000 f86e 	bl	800738c <I2C_IsErrorOccurred>
 80072b0:	1e03      	subs	r3, r0, #0
 80072b2:	d001      	beq.n	80072b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e029      	b.n	800730c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	3301      	adds	r3, #1
 80072bc:	d01e      	beq.n	80072fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072be:	f7fe f8c3 	bl	8005448 <HAL_GetTick>
 80072c2:	0002      	movs	r2, r0
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d302      	bcc.n	80072d4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d113      	bne.n	80072fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d8:	2220      	movs	r2, #32
 80072da:	431a      	orrs	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2241      	movs	r2, #65	; 0x41
 80072e4:	2120      	movs	r1, #32
 80072e6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2242      	movs	r2, #66	; 0x42
 80072ec:	2100      	movs	r1, #0
 80072ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2240      	movs	r2, #64	; 0x40
 80072f4:	2100      	movs	r1, #0
 80072f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e007      	b.n	800730c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	2202      	movs	r2, #2
 8007304:	4013      	ands	r3, r2
 8007306:	2b02      	cmp	r3, #2
 8007308:	d1cc      	bne.n	80072a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	0018      	movs	r0, r3
 800730e:	46bd      	mov	sp, r7
 8007310:	b004      	add	sp, #16
 8007312:	bd80      	pop	{r7, pc}

08007314 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007320:	e028      	b.n	8007374 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	68b9      	ldr	r1, [r7, #8]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	0018      	movs	r0, r3
 800732a:	f000 f82f 	bl	800738c <I2C_IsErrorOccurred>
 800732e:	1e03      	subs	r3, r0, #0
 8007330:	d001      	beq.n	8007336 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e026      	b.n	8007384 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007336:	f7fe f887 	bl	8005448 <HAL_GetTick>
 800733a:	0002      	movs	r2, r0
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	429a      	cmp	r2, r3
 8007344:	d302      	bcc.n	800734c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d113      	bne.n	8007374 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007350:	2220      	movs	r2, #32
 8007352:	431a      	orrs	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2241      	movs	r2, #65	; 0x41
 800735c:	2120      	movs	r1, #32
 800735e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2242      	movs	r2, #66	; 0x42
 8007364:	2100      	movs	r1, #0
 8007366:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2240      	movs	r2, #64	; 0x40
 800736c:	2100      	movs	r1, #0
 800736e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	e007      	b.n	8007384 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	2220      	movs	r2, #32
 800737c:	4013      	ands	r3, r2
 800737e:	2b20      	cmp	r3, #32
 8007380:	d1cf      	bne.n	8007322 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	0018      	movs	r0, r3
 8007386:	46bd      	mov	sp, r7
 8007388:	b004      	add	sp, #16
 800738a:	bd80      	pop	{r7, pc}

0800738c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800738c:	b590      	push	{r4, r7, lr}
 800738e:	b08b      	sub	sp, #44	; 0x2c
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007398:	2327      	movs	r3, #39	; 0x27
 800739a:	18fb      	adds	r3, r7, r3
 800739c:	2200      	movs	r2, #0
 800739e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	2210      	movs	r2, #16
 80073b4:	4013      	ands	r3, r2
 80073b6:	d100      	bne.n	80073ba <I2C_IsErrorOccurred+0x2e>
 80073b8:	e082      	b.n	80074c0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2210      	movs	r2, #16
 80073c0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80073c2:	e060      	b.n	8007486 <I2C_IsErrorOccurred+0xfa>
 80073c4:	2427      	movs	r4, #39	; 0x27
 80073c6:	193b      	adds	r3, r7, r4
 80073c8:	193a      	adds	r2, r7, r4
 80073ca:	7812      	ldrb	r2, [r2, #0]
 80073cc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	3301      	adds	r3, #1
 80073d2:	d058      	beq.n	8007486 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80073d4:	f7fe f838 	bl	8005448 <HAL_GetTick>
 80073d8:	0002      	movs	r2, r0
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d306      	bcc.n	80073f2 <I2C_IsErrorOccurred+0x66>
 80073e4:	193b      	adds	r3, r7, r4
 80073e6:	193a      	adds	r2, r7, r4
 80073e8:	7812      	ldrb	r2, [r2, #0]
 80073ea:	701a      	strb	r2, [r3, #0]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d149      	bne.n	8007486 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	2380      	movs	r3, #128	; 0x80
 80073fa:	01db      	lsls	r3, r3, #7
 80073fc:	4013      	ands	r3, r2
 80073fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007400:	2013      	movs	r0, #19
 8007402:	183b      	adds	r3, r7, r0
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	2142      	movs	r1, #66	; 0x42
 8007408:	5c52      	ldrb	r2, [r2, r1]
 800740a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	699a      	ldr	r2, [r3, #24]
 8007412:	2380      	movs	r3, #128	; 0x80
 8007414:	021b      	lsls	r3, r3, #8
 8007416:	401a      	ands	r2, r3
 8007418:	2380      	movs	r3, #128	; 0x80
 800741a:	021b      	lsls	r3, r3, #8
 800741c:	429a      	cmp	r2, r3
 800741e:	d126      	bne.n	800746e <I2C_IsErrorOccurred+0xe2>
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	2380      	movs	r3, #128	; 0x80
 8007424:	01db      	lsls	r3, r3, #7
 8007426:	429a      	cmp	r2, r3
 8007428:	d021      	beq.n	800746e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800742a:	183b      	adds	r3, r7, r0
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2b20      	cmp	r3, #32
 8007430:	d01d      	beq.n	800746e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2180      	movs	r1, #128	; 0x80
 800743e:	01c9      	lsls	r1, r1, #7
 8007440:	430a      	orrs	r2, r1
 8007442:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007444:	f7fe f800 	bl	8005448 <HAL_GetTick>
 8007448:	0003      	movs	r3, r0
 800744a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800744c:	e00f      	b.n	800746e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800744e:	f7fd fffb 	bl	8005448 <HAL_GetTick>
 8007452:	0002      	movs	r2, r0
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	2b19      	cmp	r3, #25
 800745a:	d908      	bls.n	800746e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	2220      	movs	r2, #32
 8007460:	4313      	orrs	r3, r2
 8007462:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007464:	2327      	movs	r3, #39	; 0x27
 8007466:	18fb      	adds	r3, r7, r3
 8007468:	2201      	movs	r2, #1
 800746a:	701a      	strb	r2, [r3, #0]

              break;
 800746c:	e00b      	b.n	8007486 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	2220      	movs	r2, #32
 8007476:	4013      	ands	r3, r2
 8007478:	2127      	movs	r1, #39	; 0x27
 800747a:	187a      	adds	r2, r7, r1
 800747c:	1879      	adds	r1, r7, r1
 800747e:	7809      	ldrb	r1, [r1, #0]
 8007480:	7011      	strb	r1, [r2, #0]
 8007482:	2b20      	cmp	r3, #32
 8007484:	d1e3      	bne.n	800744e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	2220      	movs	r2, #32
 800748e:	4013      	ands	r3, r2
 8007490:	2b20      	cmp	r3, #32
 8007492:	d004      	beq.n	800749e <I2C_IsErrorOccurred+0x112>
 8007494:	2327      	movs	r3, #39	; 0x27
 8007496:	18fb      	adds	r3, r7, r3
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d092      	beq.n	80073c4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800749e:	2327      	movs	r3, #39	; 0x27
 80074a0:	18fb      	adds	r3, r7, r3
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d103      	bne.n	80074b0 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2220      	movs	r2, #32
 80074ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	2204      	movs	r2, #4
 80074b4:	4313      	orrs	r3, r2
 80074b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80074b8:	2327      	movs	r3, #39	; 0x27
 80074ba:	18fb      	adds	r3, r7, r3
 80074bc:	2201      	movs	r2, #1
 80074be:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80074c8:	69ba      	ldr	r2, [r7, #24]
 80074ca:	2380      	movs	r3, #128	; 0x80
 80074cc:	005b      	lsls	r3, r3, #1
 80074ce:	4013      	ands	r3, r2
 80074d0:	d00c      	beq.n	80074ec <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	2201      	movs	r2, #1
 80074d6:	4313      	orrs	r3, r2
 80074d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2280      	movs	r2, #128	; 0x80
 80074e0:	0052      	lsls	r2, r2, #1
 80074e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074e4:	2327      	movs	r3, #39	; 0x27
 80074e6:	18fb      	adds	r3, r7, r3
 80074e8:	2201      	movs	r2, #1
 80074ea:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	2380      	movs	r3, #128	; 0x80
 80074f0:	00db      	lsls	r3, r3, #3
 80074f2:	4013      	ands	r3, r2
 80074f4:	d00c      	beq.n	8007510 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	2208      	movs	r2, #8
 80074fa:	4313      	orrs	r3, r2
 80074fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2280      	movs	r2, #128	; 0x80
 8007504:	00d2      	lsls	r2, r2, #3
 8007506:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007508:	2327      	movs	r3, #39	; 0x27
 800750a:	18fb      	adds	r3, r7, r3
 800750c:	2201      	movs	r2, #1
 800750e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	2380      	movs	r3, #128	; 0x80
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4013      	ands	r3, r2
 8007518:	d00c      	beq.n	8007534 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	2202      	movs	r2, #2
 800751e:	4313      	orrs	r3, r2
 8007520:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2280      	movs	r2, #128	; 0x80
 8007528:	0092      	lsls	r2, r2, #2
 800752a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800752c:	2327      	movs	r3, #39	; 0x27
 800752e:	18fb      	adds	r3, r7, r3
 8007530:	2201      	movs	r2, #1
 8007532:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007534:	2327      	movs	r3, #39	; 0x27
 8007536:	18fb      	adds	r3, r7, r3
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d01d      	beq.n	800757a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	0018      	movs	r0, r3
 8007542:	f7ff fe28 	bl	8007196 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	490d      	ldr	r1, [pc, #52]	; (8007588 <I2C_IsErrorOccurred+0x1fc>)
 8007552:	400a      	ands	r2, r1
 8007554:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	431a      	orrs	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2241      	movs	r2, #65	; 0x41
 8007566:	2120      	movs	r1, #32
 8007568:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2242      	movs	r2, #66	; 0x42
 800756e:	2100      	movs	r1, #0
 8007570:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2240      	movs	r2, #64	; 0x40
 8007576:	2100      	movs	r1, #0
 8007578:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800757a:	2327      	movs	r3, #39	; 0x27
 800757c:	18fb      	adds	r3, r7, r3
 800757e:	781b      	ldrb	r3, [r3, #0]
}
 8007580:	0018      	movs	r0, r3
 8007582:	46bd      	mov	sp, r7
 8007584:	b00b      	add	sp, #44	; 0x2c
 8007586:	bd90      	pop	{r4, r7, pc}
 8007588:	fe00e800 	.word	0xfe00e800

0800758c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800758c:	b590      	push	{r4, r7, lr}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	0008      	movs	r0, r1
 8007596:	0011      	movs	r1, r2
 8007598:	607b      	str	r3, [r7, #4]
 800759a:	240a      	movs	r4, #10
 800759c:	193b      	adds	r3, r7, r4
 800759e:	1c02      	adds	r2, r0, #0
 80075a0:	801a      	strh	r2, [r3, #0]
 80075a2:	2009      	movs	r0, #9
 80075a4:	183b      	adds	r3, r7, r0
 80075a6:	1c0a      	adds	r2, r1, #0
 80075a8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075aa:	193b      	adds	r3, r7, r4
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	059b      	lsls	r3, r3, #22
 80075b0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075b2:	183b      	adds	r3, r7, r0
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	0419      	lsls	r1, r3, #16
 80075b8:	23ff      	movs	r3, #255	; 0xff
 80075ba:	041b      	lsls	r3, r3, #16
 80075bc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075be:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c6:	4313      	orrs	r3, r2
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	085b      	lsrs	r3, r3, #1
 80075cc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075d6:	0d51      	lsrs	r1, r2, #21
 80075d8:	2280      	movs	r2, #128	; 0x80
 80075da:	00d2      	lsls	r2, r2, #3
 80075dc:	400a      	ands	r2, r1
 80075de:	4907      	ldr	r1, [pc, #28]	; (80075fc <I2C_TransferConfig+0x70>)
 80075e0:	430a      	orrs	r2, r1
 80075e2:	43d2      	mvns	r2, r2
 80075e4:	401a      	ands	r2, r3
 80075e6:	0011      	movs	r1, r2
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	46bd      	mov	sp, r7
 80075f6:	b007      	add	sp, #28
 80075f8:	bd90      	pop	{r4, r7, pc}
 80075fa:	46c0      	nop			; (mov r8, r8)
 80075fc:	03ff63ff 	.word	0x03ff63ff

08007600 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	000a      	movs	r2, r1
 800760a:	1cbb      	adds	r3, r7, #2
 800760c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007612:	1cbb      	adds	r3, r7, #2
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	2201      	movs	r2, #1
 8007618:	4013      	ands	r3, r2
 800761a:	d010      	beq.n	800763e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2242      	movs	r2, #66	; 0x42
 8007620:	4313      	orrs	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2241      	movs	r2, #65	; 0x41
 8007628:	5c9b      	ldrb	r3, [r3, r2]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	001a      	movs	r2, r3
 800762e:	2328      	movs	r3, #40	; 0x28
 8007630:	4013      	ands	r3, r2
 8007632:	2b28      	cmp	r3, #40	; 0x28
 8007634:	d003      	beq.n	800763e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	22b0      	movs	r2, #176	; 0xb0
 800763a:	4313      	orrs	r3, r2
 800763c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800763e:	1cbb      	adds	r3, r7, #2
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	2202      	movs	r2, #2
 8007644:	4013      	ands	r3, r2
 8007646:	d010      	beq.n	800766a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2244      	movs	r2, #68	; 0x44
 800764c:	4313      	orrs	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2241      	movs	r2, #65	; 0x41
 8007654:	5c9b      	ldrb	r3, [r3, r2]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	001a      	movs	r2, r3
 800765a:	2328      	movs	r3, #40	; 0x28
 800765c:	4013      	ands	r3, r2
 800765e:	2b28      	cmp	r3, #40	; 0x28
 8007660:	d003      	beq.n	800766a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	22b0      	movs	r2, #176	; 0xb0
 8007666:	4313      	orrs	r3, r2
 8007668:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800766a:	1cbb      	adds	r3, r7, #2
 800766c:	2200      	movs	r2, #0
 800766e:	5e9b      	ldrsh	r3, [r3, r2]
 8007670:	2b00      	cmp	r3, #0
 8007672:	da03      	bge.n	800767c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	22b8      	movs	r2, #184	; 0xb8
 8007678:	4313      	orrs	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800767c:	1cbb      	adds	r3, r7, #2
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	2b10      	cmp	r3, #16
 8007682:	d103      	bne.n	800768c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2290      	movs	r2, #144	; 0x90
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800768c:	1cbb      	adds	r3, r7, #2
 800768e:	881b      	ldrh	r3, [r3, #0]
 8007690:	2b20      	cmp	r3, #32
 8007692:	d103      	bne.n	800769c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2220      	movs	r2, #32
 8007698:	4313      	orrs	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800769c:	1cbb      	adds	r3, r7, #2
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	2b40      	cmp	r3, #64	; 0x40
 80076a2:	d103      	bne.n	80076ac <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2240      	movs	r2, #64	; 0x40
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	43d9      	mvns	r1, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	400a      	ands	r2, r1
 80076bc:	601a      	str	r2, [r3, #0]
}
 80076be:	46c0      	nop			; (mov r8, r8)
 80076c0:	46bd      	mov	sp, r7
 80076c2:	b004      	add	sp, #16
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2241      	movs	r2, #65	; 0x41
 80076d6:	5c9b      	ldrb	r3, [r3, r2]
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b20      	cmp	r3, #32
 80076dc:	d138      	bne.n	8007750 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2240      	movs	r2, #64	; 0x40
 80076e2:	5c9b      	ldrb	r3, [r3, r2]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d101      	bne.n	80076ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076e8:	2302      	movs	r3, #2
 80076ea:	e032      	b.n	8007752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2240      	movs	r2, #64	; 0x40
 80076f0:	2101      	movs	r1, #1
 80076f2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2241      	movs	r2, #65	; 0x41
 80076f8:	2124      	movs	r1, #36	; 0x24
 80076fa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2101      	movs	r1, #1
 8007708:	438a      	bics	r2, r1
 800770a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4911      	ldr	r1, [pc, #68]	; (800775c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007718:	400a      	ands	r2, r1
 800771a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6819      	ldr	r1, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	430a      	orrs	r2, r1
 800772a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2101      	movs	r1, #1
 8007738:	430a      	orrs	r2, r1
 800773a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2241      	movs	r2, #65	; 0x41
 8007740:	2120      	movs	r1, #32
 8007742:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2240      	movs	r2, #64	; 0x40
 8007748:	2100      	movs	r1, #0
 800774a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	e000      	b.n	8007752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007750:	2302      	movs	r3, #2
  }
}
 8007752:	0018      	movs	r0, r3
 8007754:	46bd      	mov	sp, r7
 8007756:	b002      	add	sp, #8
 8007758:	bd80      	pop	{r7, pc}
 800775a:	46c0      	nop			; (mov r8, r8)
 800775c:	ffffefff 	.word	0xffffefff

08007760 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2241      	movs	r2, #65	; 0x41
 800776e:	5c9b      	ldrb	r3, [r3, r2]
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b20      	cmp	r3, #32
 8007774:	d139      	bne.n	80077ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2240      	movs	r2, #64	; 0x40
 800777a:	5c9b      	ldrb	r3, [r3, r2]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d101      	bne.n	8007784 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007780:	2302      	movs	r3, #2
 8007782:	e033      	b.n	80077ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2240      	movs	r2, #64	; 0x40
 8007788:	2101      	movs	r1, #1
 800778a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2241      	movs	r2, #65	; 0x41
 8007790:	2124      	movs	r1, #36	; 0x24
 8007792:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2101      	movs	r1, #1
 80077a0:	438a      	bics	r2, r1
 80077a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4a11      	ldr	r2, [pc, #68]	; (80077f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	021b      	lsls	r3, r3, #8
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2101      	movs	r1, #1
 80077d2:	430a      	orrs	r2, r1
 80077d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2241      	movs	r2, #65	; 0x41
 80077da:	2120      	movs	r1, #32
 80077dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2240      	movs	r2, #64	; 0x40
 80077e2:	2100      	movs	r1, #0
 80077e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	e000      	b.n	80077ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077ea:	2302      	movs	r3, #2
  }
}
 80077ec:	0018      	movs	r0, r3
 80077ee:	46bd      	mov	sp, r7
 80077f0:	b004      	add	sp, #16
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	fffff0ff 	.word	0xfffff0ff

080077f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e0e5      	b.n	80079d6 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2235      	movs	r2, #53	; 0x35
 800780e:	5c9b      	ldrb	r3, [r3, r2]
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d107      	bne.n	8007826 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2234      	movs	r2, #52	; 0x34
 800781a:	2100      	movs	r1, #0
 800781c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	0018      	movs	r0, r3
 8007822:	f7fd fa4b 	bl	8004cbc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2235      	movs	r2, #53	; 0x35
 800782a:	2102      	movs	r1, #2
 800782c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69da      	ldr	r2, [r3, #28]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4969      	ldr	r1, [pc, #420]	; (80079e0 <HAL_I2S_Init+0x1e8>)
 800783a:	400a      	ands	r2, r1
 800783c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2202      	movs	r2, #2
 8007844:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d100      	bne.n	8007850 <HAL_I2S_Init+0x58>
 800784e:	e076      	b.n	800793e <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d102      	bne.n	800785e <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007858:	2310      	movs	r3, #16
 800785a:	617b      	str	r3, [r7, #20]
 800785c:	e001      	b.n	8007862 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800785e:	2320      	movs	r3, #32
 8007860:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b20      	cmp	r3, #32
 8007868:	d802      	bhi.n	8007870 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8007870:	2380      	movs	r3, #128	; 0x80
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	0018      	movs	r0, r3
 8007876:	f001 f95b 	bl	8008b30 <HAL_RCCEx_GetPeriphCLKFreq>
 800787a:	0003      	movs	r3, r0
 800787c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691a      	ldr	r2, [r3, #16]
 8007882:	2380      	movs	r3, #128	; 0x80
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	429a      	cmp	r2, r3
 8007888:	d131      	bne.n	80078ee <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d016      	beq.n	80078c0 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	0019      	movs	r1, r3
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f7f8 fc33 	bl	8000104 <__udivsi3>
 800789e:	0003      	movs	r3, r0
 80078a0:	001a      	movs	r2, r3
 80078a2:	0013      	movs	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	189b      	adds	r3, r3, r2
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	001a      	movs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	0019      	movs	r1, r3
 80078b2:	0010      	movs	r0, r2
 80078b4:	f7f8 fc26 	bl	8000104 <__udivsi3>
 80078b8:	0003      	movs	r3, r0
 80078ba:	3305      	adds	r3, #5
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	e02a      	b.n	8007916 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	0019      	movs	r1, r3
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f7f8 fc1c 	bl	8000104 <__udivsi3>
 80078cc:	0003      	movs	r3, r0
 80078ce:	001a      	movs	r2, r3
 80078d0:	0013      	movs	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	189b      	adds	r3, r3, r2
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	001a      	movs	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	0019      	movs	r1, r3
 80078e0:	0010      	movs	r0, r2
 80078e2:	f7f8 fc0f 	bl	8000104 <__udivsi3>
 80078e6:	0003      	movs	r3, r0
 80078e8:	3305      	adds	r3, #5
 80078ea:	613b      	str	r3, [r7, #16]
 80078ec:	e013      	b.n	8007916 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80078ee:	6979      	ldr	r1, [r7, #20]
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f7f8 fc07 	bl	8000104 <__udivsi3>
 80078f6:	0003      	movs	r3, r0
 80078f8:	001a      	movs	r2, r3
 80078fa:	0013      	movs	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	189b      	adds	r3, r3, r2
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	001a      	movs	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	0019      	movs	r1, r3
 800790a:	0010      	movs	r0, r2
 800790c:	f7f8 fbfa 	bl	8000104 <__udivsi3>
 8007910:	0003      	movs	r3, r0
 8007912:	3305      	adds	r3, #5
 8007914:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	210a      	movs	r1, #10
 800791a:	0018      	movs	r0, r3
 800791c:	f7f8 fbf2 	bl	8000104 <__udivsi3>
 8007920:	0003      	movs	r3, r0
 8007922:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	2201      	movs	r2, #1
 8007928:	4013      	ands	r3, r2
 800792a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	085b      	lsrs	r3, r3, #1
 8007934:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	021b      	lsls	r3, r3, #8
 800793a:	61bb      	str	r3, [r7, #24]
 800793c:	e003      	b.n	8007946 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800793e:	2302      	movs	r3, #2
 8007940:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007942:	2300      	movs	r3, #0
 8007944:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d902      	bls.n	8007952 <HAL_I2S_Init+0x15a>
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	2bff      	cmp	r3, #255	; 0xff
 8007950:	d907      	bls.n	8007962 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007956:	2210      	movs	r2, #16
 8007958:	431a      	orrs	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e039      	b.n	80079d6 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691a      	ldr	r2, [r3, #16]
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	431a      	orrs	r2, r3
 800796a:	0011      	movs	r1, r2
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	69fa      	ldr	r2, [r7, #28]
 8007972:	430a      	orrs	r2, r1
 8007974:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	4a18      	ldr	r2, [pc, #96]	; (80079e0 <HAL_I2S_Init+0x1e8>)
 800797e:	401a      	ands	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6859      	ldr	r1, [r3, #4]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	4319      	orrs	r1, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	4319      	orrs	r1, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	430b      	orrs	r3, r1
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2180      	movs	r1, #128	; 0x80
 800799e:	0109      	lsls	r1, r1, #4
 80079a0:	430a      	orrs	r2, r1
 80079a2:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	2b30      	cmp	r3, #48	; 0x30
 80079aa:	d003      	beq.n	80079b4 <HAL_I2S_Init+0x1bc>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	2bb0      	cmp	r3, #176	; 0xb0
 80079b2:	d108      	bne.n	80079c6 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	69da      	ldr	r2, [r3, #28]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2180      	movs	r1, #128	; 0x80
 80079c0:	0149      	lsls	r1, r1, #5
 80079c2:	430a      	orrs	r2, r1
 80079c4:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2235      	movs	r2, #53	; 0x35
 80079d0:	2101      	movs	r1, #1
 80079d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	0018      	movs	r0, r3
 80079d8:	46bd      	mov	sp, r7
 80079da:	b008      	add	sp, #32
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	fffff040 	.word	0xfffff040

080079e4 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	1dbb      	adds	r3, r7, #6
 80079f0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <HAL_I2S_Transmit_DMA+0x1c>
 80079f8:	1dbb      	adds	r3, r7, #6
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e091      	b.n	8007b28 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2234      	movs	r2, #52	; 0x34
 8007a08:	5c9b      	ldrb	r3, [r3, r2]
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d101      	bne.n	8007a14 <HAL_I2S_Transmit_DMA+0x30>
 8007a10:	2302      	movs	r3, #2
 8007a12:	e089      	b.n	8007b28 <HAL_I2S_Transmit_DMA+0x144>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2234      	movs	r2, #52	; 0x34
 8007a18:	2101      	movs	r1, #1
 8007a1a:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2235      	movs	r2, #53	; 0x35
 8007a20:	5c9b      	ldrb	r3, [r3, r2]
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d005      	beq.n	8007a34 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2234      	movs	r2, #52	; 0x34
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8007a30:	2302      	movs	r3, #2
 8007a32:	e079      	b.n	8007b28 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2235      	movs	r2, #53	; 0x35
 8007a38:	2103      	movs	r1, #3
 8007a3a:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	2207      	movs	r2, #7
 8007a50:	4013      	ands	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d002      	beq.n	8007a60 <HAL_I2S_Transmit_DMA+0x7c>
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b05      	cmp	r3, #5
 8007a5e:	d10c      	bne.n	8007a7a <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007a60:	1dbb      	adds	r3, r7, #6
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	18db      	adds	r3, r3, r3
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8007a6c:	1dbb      	adds	r3, r7, #6
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	18db      	adds	r3, r3, r3
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	845a      	strh	r2, [r3, #34]	; 0x22
 8007a78:	e007      	b.n	8007a8a <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	1dba      	adds	r2, r7, #6
 8007a7e:	8812      	ldrh	r2, [r2, #0]
 8007a80:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	1dba      	adds	r2, r7, #6
 8007a86:	8812      	ldrh	r2, [r2, #0]
 8007a88:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8e:	4a28      	ldr	r2, [pc, #160]	; (8007b30 <HAL_I2S_Transmit_DMA+0x14c>)
 8007a90:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a96:	4a27      	ldr	r2, [pc, #156]	; (8007b34 <HAL_I2S_Transmit_DMA+0x150>)
 8007a98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9e:	4a26      	ldr	r2, [pc, #152]	; (8007b38 <HAL_I2S_Transmit_DMA+0x154>)
 8007aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007aaa:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007ab2:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8c1b      	ldrh	r3, [r3, #32]
 8007ab8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007aba:	f7fe f8d1 	bl	8005c60 <HAL_DMA_Start_IT>
 8007abe:	1e03      	subs	r3, r0, #0
 8007ac0:	d00f      	beq.n	8007ae2 <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac6:	2208      	movs	r2, #8
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2235      	movs	r2, #53	; 0x35
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2234      	movs	r2, #52	; 0x34
 8007ada:	2100      	movs	r1, #0
 8007adc:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e022      	b.n	8007b28 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	2380      	movs	r3, #128	; 0x80
 8007aea:	00db      	lsls	r3, r3, #3
 8007aec:	4013      	ands	r3, r2
 8007aee:	d108      	bne.n	8007b02 <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	69da      	ldr	r2, [r3, #28]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2180      	movs	r1, #128	; 0x80
 8007afc:	00c9      	lsls	r1, r1, #3
 8007afe:	430a      	orrs	r2, r1
 8007b00:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	d107      	bne.n	8007b1e <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2102      	movs	r1, #2
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2234      	movs	r2, #52	; 0x34
 8007b22:	2100      	movs	r1, #0
 8007b24:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	0018      	movs	r0, r3
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	b006      	add	sp, #24
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	08007c77 	.word	0x08007c77
 8007b34:	08007c33 	.word	0x08007c33
 8007b38:	08007c95 	.word	0x08007c95

08007b3c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	099b      	lsrs	r3, r3, #6
 8007b58:	001a      	movs	r2, r3
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	d10e      	bne.n	8007b7e <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2201      	movs	r2, #1
 8007b64:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007b66:	d00a      	beq.n	8007b7e <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	099b      	lsrs	r3, r3, #6
 8007b6c:	001a      	movs	r2, r3
 8007b6e:	2301      	movs	r3, #1
 8007b70:	4013      	ands	r3, r2
 8007b72:	d004      	beq.n	8007b7e <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	0018      	movs	r0, r3
 8007b78:	f000 f8e2 	bl	8007d40 <I2S_Receive_IT>
    return;
 8007b7c:	e046      	b.n	8007c0c <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	085b      	lsrs	r3, r3, #1
 8007b82:	001a      	movs	r2, r3
 8007b84:	2301      	movs	r3, #1
 8007b86:	4013      	ands	r3, r2
 8007b88:	d00a      	beq.n	8007ba0 <HAL_I2S_IRQHandler+0x64>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	09db      	lsrs	r3, r3, #7
 8007b8e:	001a      	movs	r2, r3
 8007b90:	2301      	movs	r3, #1
 8007b92:	4013      	ands	r3, r2
 8007b94:	d004      	beq.n	8007ba0 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	0018      	movs	r0, r3
 8007b9a:	f000 f8a2 	bl	8007ce2 <I2S_Transmit_IT>
    return;
 8007b9e:	e035      	b.n	8007c0c <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	001a      	movs	r2, r3
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4013      	ands	r3, r2
 8007baa:	d02f      	beq.n	8007c0c <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	099b      	lsrs	r3, r3, #6
 8007bb0:	001a      	movs	r2, r3
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	d00d      	beq.n	8007bd4 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2160      	movs	r1, #96	; 0x60
 8007bc4:	438a      	bics	r2, r1
 8007bc6:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bcc:	2202      	movs	r2, #2
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	08db      	lsrs	r3, r3, #3
 8007bd8:	001a      	movs	r2, r3
 8007bda:	2301      	movs	r3, #1
 8007bdc:	4013      	ands	r3, r2
 8007bde:	d00d      	beq.n	8007bfc <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	21a0      	movs	r1, #160	; 0xa0
 8007bec:	438a      	bics	r2, r1
 8007bee:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	2204      	movs	r2, #4
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2235      	movs	r2, #53	; 0x35
 8007c00:	2101      	movs	r1, #1
 8007c02:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	0018      	movs	r0, r3
 8007c08:	f000 f80b 	bl	8007c22 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	b004      	add	sp, #16
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b082      	sub	sp, #8
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007c1a:	46c0      	nop			; (mov r8, r8)
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	b002      	add	sp, #8
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b082      	sub	sp, #8
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007c2a:	46c0      	nop			; (mov r8, r8)
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	b002      	add	sp, #8
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10e      	bne.n	8007c66 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2102      	movs	r1, #2
 8007c54:	438a      	bics	r2, r1
 8007c56:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2235      	movs	r2, #53	; 0x35
 8007c62:	2101      	movs	r1, #1
 8007c64:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	0018      	movs	r0, r3
 8007c6a:	f7f9 fa7f 	bl	800116c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007c6e:	46c0      	nop			; (mov r8, r8)
 8007c70:	46bd      	mov	sp, r7
 8007c72:	b004      	add	sp, #16
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	0018      	movs	r0, r3
 8007c88:	f7f9 fa66 	bl	8001158 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007c8c:	46c0      	nop			; (mov r8, r8)
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	b004      	add	sp, #16
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca0:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2103      	movs	r1, #3
 8007cae:	438a      	bics	r2, r1
 8007cb0:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2235      	movs	r2, #53	; 0x35
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cca:	2208      	movs	r2, #8
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	0018      	movs	r0, r3
 8007cd6:	f7ff ffa4 	bl	8007c22 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	b004      	add	sp, #16
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	881a      	ldrh	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	1c9a      	adds	r2, r3, #2
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	3b01      	subs	r3, #1
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10f      	bne.n	8007d38 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	21a0      	movs	r1, #160	; 0xa0
 8007d24:	438a      	bics	r2, r1
 8007d26:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2235      	movs	r2, #53	; 0x35
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	0018      	movs	r0, r3
 8007d34:	f7f9 fa1a 	bl	800116c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007d38:	46c0      	nop			; (mov r8, r8)
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	b002      	add	sp, #8
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	b292      	uxth	r2, r2
 8007d54:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5a:	1c9a      	adds	r2, r3, #2
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	3b01      	subs	r3, #1
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10f      	bne.n	8007d98 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2160      	movs	r1, #96	; 0x60
 8007d84:	438a      	bics	r2, r1
 8007d86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2235      	movs	r2, #53	; 0x35
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	0018      	movs	r0, r3
 8007d94:	f7ff ff3d 	bl	8007c12 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007d98:	46c0      	nop			; (mov r8, r8)
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	b002      	add	sp, #8
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007da8:	4b19      	ldr	r3, [pc, #100]	; (8007e10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a19      	ldr	r2, [pc, #100]	; (8007e14 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007dae:	4013      	ands	r3, r2
 8007db0:	0019      	movs	r1, r3
 8007db2:	4b17      	ldr	r3, [pc, #92]	; (8007e10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	2380      	movs	r3, #128	; 0x80
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d11f      	bne.n	8007e04 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007dc4:	4b14      	ldr	r3, [pc, #80]	; (8007e18 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	0013      	movs	r3, r2
 8007dca:	005b      	lsls	r3, r3, #1
 8007dcc:	189b      	adds	r3, r3, r2
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	4912      	ldr	r1, [pc, #72]	; (8007e1c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007dd2:	0018      	movs	r0, r3
 8007dd4:	f7f8 f996 	bl	8000104 <__udivsi3>
 8007dd8:	0003      	movs	r3, r0
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007dde:	e008      	b.n	8007df2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	e001      	b.n	8007df2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e009      	b.n	8007e06 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007df2:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007df4:	695a      	ldr	r2, [r3, #20]
 8007df6:	2380      	movs	r3, #128	; 0x80
 8007df8:	00db      	lsls	r3, r3, #3
 8007dfa:	401a      	ands	r2, r3
 8007dfc:	2380      	movs	r3, #128	; 0x80
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d0ed      	beq.n	8007de0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	0018      	movs	r0, r3
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	b004      	add	sp, #16
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	46c0      	nop			; (mov r8, r8)
 8007e10:	40007000 	.word	0x40007000
 8007e14:	fffff9ff 	.word	0xfffff9ff
 8007e18:	20000034 	.word	0x20000034
 8007e1c:	000f4240 	.word	0x000f4240

08007e20 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007e24:	4b03      	ldr	r3, [pc, #12]	; (8007e34 <LL_RCC_GetAPB1Prescaler+0x14>)
 8007e26:	689a      	ldr	r2, [r3, #8]
 8007e28:	23e0      	movs	r3, #224	; 0xe0
 8007e2a:	01db      	lsls	r3, r3, #7
 8007e2c:	4013      	ands	r3, r2
}
 8007e2e:	0018      	movs	r0, r3
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	40021000 	.word	0x40021000

08007e38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e2fe      	b.n	8008448 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	4013      	ands	r3, r2
 8007e52:	d100      	bne.n	8007e56 <HAL_RCC_OscConfig+0x1e>
 8007e54:	e07c      	b.n	8007f50 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e56:	4bc3      	ldr	r3, [pc, #780]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	2238      	movs	r2, #56	; 0x38
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e60:	4bc0      	ldr	r3, [pc, #768]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	2203      	movs	r2, #3
 8007e66:	4013      	ands	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	2b10      	cmp	r3, #16
 8007e6e:	d102      	bne.n	8007e76 <HAL_RCC_OscConfig+0x3e>
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d002      	beq.n	8007e7c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	d10b      	bne.n	8007e94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e7c:	4bb9      	ldr	r3, [pc, #740]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	2380      	movs	r3, #128	; 0x80
 8007e82:	029b      	lsls	r3, r3, #10
 8007e84:	4013      	ands	r3, r2
 8007e86:	d062      	beq.n	8007f4e <HAL_RCC_OscConfig+0x116>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d15e      	bne.n	8007f4e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e2d9      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	2380      	movs	r3, #128	; 0x80
 8007e9a:	025b      	lsls	r3, r3, #9
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d107      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x78>
 8007ea0:	4bb0      	ldr	r3, [pc, #704]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	4baf      	ldr	r3, [pc, #700]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007ea6:	2180      	movs	r1, #128	; 0x80
 8007ea8:	0249      	lsls	r1, r1, #9
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	e020      	b.n	8007ef2 <HAL_RCC_OscConfig+0xba>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	23a0      	movs	r3, #160	; 0xa0
 8007eb6:	02db      	lsls	r3, r3, #11
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d10e      	bne.n	8007eda <HAL_RCC_OscConfig+0xa2>
 8007ebc:	4ba9      	ldr	r3, [pc, #676]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	4ba8      	ldr	r3, [pc, #672]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007ec2:	2180      	movs	r1, #128	; 0x80
 8007ec4:	02c9      	lsls	r1, r1, #11
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	4ba6      	ldr	r3, [pc, #664]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	4ba5      	ldr	r3, [pc, #660]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007ed0:	2180      	movs	r1, #128	; 0x80
 8007ed2:	0249      	lsls	r1, r1, #9
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	e00b      	b.n	8007ef2 <HAL_RCC_OscConfig+0xba>
 8007eda:	4ba2      	ldr	r3, [pc, #648]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	4ba1      	ldr	r3, [pc, #644]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007ee0:	49a1      	ldr	r1, [pc, #644]	; (8008168 <HAL_RCC_OscConfig+0x330>)
 8007ee2:	400a      	ands	r2, r1
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	4b9f      	ldr	r3, [pc, #636]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	4b9e      	ldr	r3, [pc, #632]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007eec:	499f      	ldr	r1, [pc, #636]	; (800816c <HAL_RCC_OscConfig+0x334>)
 8007eee:	400a      	ands	r2, r1
 8007ef0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d014      	beq.n	8007f24 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007efa:	f7fd faa5 	bl	8005448 <HAL_GetTick>
 8007efe:	0003      	movs	r3, r0
 8007f00:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f02:	e008      	b.n	8007f16 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f04:	f7fd faa0 	bl	8005448 <HAL_GetTick>
 8007f08:	0002      	movs	r2, r0
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b64      	cmp	r3, #100	; 0x64
 8007f10:	d901      	bls.n	8007f16 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e298      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f16:	4b93      	ldr	r3, [pc, #588]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	2380      	movs	r3, #128	; 0x80
 8007f1c:	029b      	lsls	r3, r3, #10
 8007f1e:	4013      	ands	r3, r2
 8007f20:	d0f0      	beq.n	8007f04 <HAL_RCC_OscConfig+0xcc>
 8007f22:	e015      	b.n	8007f50 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f24:	f7fd fa90 	bl	8005448 <HAL_GetTick>
 8007f28:	0003      	movs	r3, r0
 8007f2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f2c:	e008      	b.n	8007f40 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f2e:	f7fd fa8b 	bl	8005448 <HAL_GetTick>
 8007f32:	0002      	movs	r2, r0
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b64      	cmp	r3, #100	; 0x64
 8007f3a:	d901      	bls.n	8007f40 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e283      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f40:	4b88      	ldr	r3, [pc, #544]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	2380      	movs	r3, #128	; 0x80
 8007f46:	029b      	lsls	r3, r3, #10
 8007f48:	4013      	ands	r3, r2
 8007f4a:	d1f0      	bne.n	8007f2e <HAL_RCC_OscConfig+0xf6>
 8007f4c:	e000      	b.n	8007f50 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f4e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2202      	movs	r2, #2
 8007f56:	4013      	ands	r3, r2
 8007f58:	d100      	bne.n	8007f5c <HAL_RCC_OscConfig+0x124>
 8007f5a:	e099      	b.n	8008090 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f5c:	4b81      	ldr	r3, [pc, #516]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	2238      	movs	r2, #56	; 0x38
 8007f62:	4013      	ands	r3, r2
 8007f64:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f66:	4b7f      	ldr	r3, [pc, #508]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	2203      	movs	r2, #3
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	2b10      	cmp	r3, #16
 8007f74:	d102      	bne.n	8007f7c <HAL_RCC_OscConfig+0x144>
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d002      	beq.n	8007f82 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d135      	bne.n	8007fee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f82:	4b78      	ldr	r3, [pc, #480]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	2380      	movs	r3, #128	; 0x80
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	d005      	beq.n	8007f9a <HAL_RCC_OscConfig+0x162>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e256      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f9a:	4b72      	ldr	r3, [pc, #456]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	4a74      	ldr	r2, [pc, #464]	; (8008170 <HAL_RCC_OscConfig+0x338>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	0019      	movs	r1, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	695b      	ldr	r3, [r3, #20]
 8007fa8:	021a      	lsls	r2, r3, #8
 8007faa:	4b6e      	ldr	r3, [pc, #440]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007fac:	430a      	orrs	r2, r1
 8007fae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d112      	bne.n	8007fdc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007fb6:	4b6b      	ldr	r3, [pc, #428]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a6e      	ldr	r2, [pc, #440]	; (8008174 <HAL_RCC_OscConfig+0x33c>)
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	0019      	movs	r1, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	691a      	ldr	r2, [r3, #16]
 8007fc4:	4b67      	ldr	r3, [pc, #412]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007fca:	4b66      	ldr	r3, [pc, #408]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	0adb      	lsrs	r3, r3, #11
 8007fd0:	2207      	movs	r2, #7
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	4a68      	ldr	r2, [pc, #416]	; (8008178 <HAL_RCC_OscConfig+0x340>)
 8007fd6:	40da      	lsrs	r2, r3
 8007fd8:	4b68      	ldr	r3, [pc, #416]	; (800817c <HAL_RCC_OscConfig+0x344>)
 8007fda:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007fdc:	4b68      	ldr	r3, [pc, #416]	; (8008180 <HAL_RCC_OscConfig+0x348>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	0018      	movs	r0, r3
 8007fe2:	f7fd f9d5 	bl	8005390 <HAL_InitTick>
 8007fe6:	1e03      	subs	r3, r0, #0
 8007fe8:	d051      	beq.n	800808e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e22c      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d030      	beq.n	8008058 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007ff6:	4b5b      	ldr	r3, [pc, #364]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a5e      	ldr	r2, [pc, #376]	; (8008174 <HAL_RCC_OscConfig+0x33c>)
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	0019      	movs	r1, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691a      	ldr	r2, [r3, #16]
 8008004:	4b57      	ldr	r3, [pc, #348]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8008006:	430a      	orrs	r2, r1
 8008008:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800800a:	4b56      	ldr	r3, [pc, #344]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4b55      	ldr	r3, [pc, #340]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8008010:	2180      	movs	r1, #128	; 0x80
 8008012:	0049      	lsls	r1, r1, #1
 8008014:	430a      	orrs	r2, r1
 8008016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008018:	f7fd fa16 	bl	8005448 <HAL_GetTick>
 800801c:	0003      	movs	r3, r0
 800801e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008020:	e008      	b.n	8008034 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008022:	f7fd fa11 	bl	8005448 <HAL_GetTick>
 8008026:	0002      	movs	r2, r0
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	2b02      	cmp	r3, #2
 800802e:	d901      	bls.n	8008034 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e209      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008034:	4b4b      	ldr	r3, [pc, #300]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	2380      	movs	r3, #128	; 0x80
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	4013      	ands	r3, r2
 800803e:	d0f0      	beq.n	8008022 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008040:	4b48      	ldr	r3, [pc, #288]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	4a4a      	ldr	r2, [pc, #296]	; (8008170 <HAL_RCC_OscConfig+0x338>)
 8008046:	4013      	ands	r3, r2
 8008048:	0019      	movs	r1, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	021a      	lsls	r2, r3, #8
 8008050:	4b44      	ldr	r3, [pc, #272]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8008052:	430a      	orrs	r2, r1
 8008054:	605a      	str	r2, [r3, #4]
 8008056:	e01b      	b.n	8008090 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008058:	4b42      	ldr	r3, [pc, #264]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	4b41      	ldr	r3, [pc, #260]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 800805e:	4949      	ldr	r1, [pc, #292]	; (8008184 <HAL_RCC_OscConfig+0x34c>)
 8008060:	400a      	ands	r2, r1
 8008062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008064:	f7fd f9f0 	bl	8005448 <HAL_GetTick>
 8008068:	0003      	movs	r3, r0
 800806a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800806c:	e008      	b.n	8008080 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800806e:	f7fd f9eb 	bl	8005448 <HAL_GetTick>
 8008072:	0002      	movs	r2, r0
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d901      	bls.n	8008080 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e1e3      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008080:	4b38      	ldr	r3, [pc, #224]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	2380      	movs	r3, #128	; 0x80
 8008086:	00db      	lsls	r3, r3, #3
 8008088:	4013      	ands	r3, r2
 800808a:	d1f0      	bne.n	800806e <HAL_RCC_OscConfig+0x236>
 800808c:	e000      	b.n	8008090 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800808e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2208      	movs	r2, #8
 8008096:	4013      	ands	r3, r2
 8008098:	d047      	beq.n	800812a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800809a:	4b32      	ldr	r3, [pc, #200]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	2238      	movs	r2, #56	; 0x38
 80080a0:	4013      	ands	r3, r2
 80080a2:	2b18      	cmp	r3, #24
 80080a4:	d10a      	bne.n	80080bc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80080a6:	4b2f      	ldr	r3, [pc, #188]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 80080a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080aa:	2202      	movs	r2, #2
 80080ac:	4013      	ands	r3, r2
 80080ae:	d03c      	beq.n	800812a <HAL_RCC_OscConfig+0x2f2>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d138      	bne.n	800812a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e1c5      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d019      	beq.n	80080f8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80080c4:	4b27      	ldr	r3, [pc, #156]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 80080c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080c8:	4b26      	ldr	r3, [pc, #152]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 80080ca:	2101      	movs	r1, #1
 80080cc:	430a      	orrs	r2, r1
 80080ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d0:	f7fd f9ba 	bl	8005448 <HAL_GetTick>
 80080d4:	0003      	movs	r3, r0
 80080d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080d8:	e008      	b.n	80080ec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080da:	f7fd f9b5 	bl	8005448 <HAL_GetTick>
 80080de:	0002      	movs	r2, r0
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d901      	bls.n	80080ec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e1ad      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080ec:	4b1d      	ldr	r3, [pc, #116]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 80080ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080f0:	2202      	movs	r2, #2
 80080f2:	4013      	ands	r3, r2
 80080f4:	d0f1      	beq.n	80080da <HAL_RCC_OscConfig+0x2a2>
 80080f6:	e018      	b.n	800812a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80080f8:	4b1a      	ldr	r3, [pc, #104]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 80080fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080fc:	4b19      	ldr	r3, [pc, #100]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 80080fe:	2101      	movs	r1, #1
 8008100:	438a      	bics	r2, r1
 8008102:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008104:	f7fd f9a0 	bl	8005448 <HAL_GetTick>
 8008108:	0003      	movs	r3, r0
 800810a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800810c:	e008      	b.n	8008120 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800810e:	f7fd f99b 	bl	8005448 <HAL_GetTick>
 8008112:	0002      	movs	r2, r0
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d901      	bls.n	8008120 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e193      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008120:	4b10      	ldr	r3, [pc, #64]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8008122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008124:	2202      	movs	r2, #2
 8008126:	4013      	ands	r3, r2
 8008128:	d1f1      	bne.n	800810e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2204      	movs	r2, #4
 8008130:	4013      	ands	r3, r2
 8008132:	d100      	bne.n	8008136 <HAL_RCC_OscConfig+0x2fe>
 8008134:	e0c6      	b.n	80082c4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008136:	231f      	movs	r3, #31
 8008138:	18fb      	adds	r3, r7, r3
 800813a:	2200      	movs	r2, #0
 800813c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800813e:	4b09      	ldr	r3, [pc, #36]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	2238      	movs	r2, #56	; 0x38
 8008144:	4013      	ands	r3, r2
 8008146:	2b20      	cmp	r3, #32
 8008148:	d11e      	bne.n	8008188 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800814a:	4b06      	ldr	r3, [pc, #24]	; (8008164 <HAL_RCC_OscConfig+0x32c>)
 800814c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800814e:	2202      	movs	r2, #2
 8008150:	4013      	ands	r3, r2
 8008152:	d100      	bne.n	8008156 <HAL_RCC_OscConfig+0x31e>
 8008154:	e0b6      	b.n	80082c4 <HAL_RCC_OscConfig+0x48c>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d000      	beq.n	8008160 <HAL_RCC_OscConfig+0x328>
 800815e:	e0b1      	b.n	80082c4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e171      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
 8008164:	40021000 	.word	0x40021000
 8008168:	fffeffff 	.word	0xfffeffff
 800816c:	fffbffff 	.word	0xfffbffff
 8008170:	ffff80ff 	.word	0xffff80ff
 8008174:	ffffc7ff 	.word	0xffffc7ff
 8008178:	00f42400 	.word	0x00f42400
 800817c:	20000034 	.word	0x20000034
 8008180:	20000038 	.word	0x20000038
 8008184:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008188:	4bb1      	ldr	r3, [pc, #708]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 800818a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800818c:	2380      	movs	r3, #128	; 0x80
 800818e:	055b      	lsls	r3, r3, #21
 8008190:	4013      	ands	r3, r2
 8008192:	d101      	bne.n	8008198 <HAL_RCC_OscConfig+0x360>
 8008194:	2301      	movs	r3, #1
 8008196:	e000      	b.n	800819a <HAL_RCC_OscConfig+0x362>
 8008198:	2300      	movs	r3, #0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d011      	beq.n	80081c2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800819e:	4bac      	ldr	r3, [pc, #688]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 80081a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081a2:	4bab      	ldr	r3, [pc, #684]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 80081a4:	2180      	movs	r1, #128	; 0x80
 80081a6:	0549      	lsls	r1, r1, #21
 80081a8:	430a      	orrs	r2, r1
 80081aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80081ac:	4ba8      	ldr	r3, [pc, #672]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 80081ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081b0:	2380      	movs	r3, #128	; 0x80
 80081b2:	055b      	lsls	r3, r3, #21
 80081b4:	4013      	ands	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80081ba:	231f      	movs	r3, #31
 80081bc:	18fb      	adds	r3, r7, r3
 80081be:	2201      	movs	r2, #1
 80081c0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081c2:	4ba4      	ldr	r3, [pc, #656]	; (8008454 <HAL_RCC_OscConfig+0x61c>)
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	2380      	movs	r3, #128	; 0x80
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	4013      	ands	r3, r2
 80081cc:	d11a      	bne.n	8008204 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081ce:	4ba1      	ldr	r3, [pc, #644]	; (8008454 <HAL_RCC_OscConfig+0x61c>)
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	4ba0      	ldr	r3, [pc, #640]	; (8008454 <HAL_RCC_OscConfig+0x61c>)
 80081d4:	2180      	movs	r1, #128	; 0x80
 80081d6:	0049      	lsls	r1, r1, #1
 80081d8:	430a      	orrs	r2, r1
 80081da:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80081dc:	f7fd f934 	bl	8005448 <HAL_GetTick>
 80081e0:	0003      	movs	r3, r0
 80081e2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081e4:	e008      	b.n	80081f8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081e6:	f7fd f92f 	bl	8005448 <HAL_GetTick>
 80081ea:	0002      	movs	r2, r0
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d901      	bls.n	80081f8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e127      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081f8:	4b96      	ldr	r3, [pc, #600]	; (8008454 <HAL_RCC_OscConfig+0x61c>)
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	2380      	movs	r3, #128	; 0x80
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	4013      	ands	r3, r2
 8008202:	d0f0      	beq.n	80081e6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d106      	bne.n	800821a <HAL_RCC_OscConfig+0x3e2>
 800820c:	4b90      	ldr	r3, [pc, #576]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 800820e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008210:	4b8f      	ldr	r3, [pc, #572]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 8008212:	2101      	movs	r1, #1
 8008214:	430a      	orrs	r2, r1
 8008216:	65da      	str	r2, [r3, #92]	; 0x5c
 8008218:	e01c      	b.n	8008254 <HAL_RCC_OscConfig+0x41c>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	2b05      	cmp	r3, #5
 8008220:	d10c      	bne.n	800823c <HAL_RCC_OscConfig+0x404>
 8008222:	4b8b      	ldr	r3, [pc, #556]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 8008224:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008226:	4b8a      	ldr	r3, [pc, #552]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 8008228:	2104      	movs	r1, #4
 800822a:	430a      	orrs	r2, r1
 800822c:	65da      	str	r2, [r3, #92]	; 0x5c
 800822e:	4b88      	ldr	r3, [pc, #544]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 8008230:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008232:	4b87      	ldr	r3, [pc, #540]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 8008234:	2101      	movs	r1, #1
 8008236:	430a      	orrs	r2, r1
 8008238:	65da      	str	r2, [r3, #92]	; 0x5c
 800823a:	e00b      	b.n	8008254 <HAL_RCC_OscConfig+0x41c>
 800823c:	4b84      	ldr	r3, [pc, #528]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 800823e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008240:	4b83      	ldr	r3, [pc, #524]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 8008242:	2101      	movs	r1, #1
 8008244:	438a      	bics	r2, r1
 8008246:	65da      	str	r2, [r3, #92]	; 0x5c
 8008248:	4b81      	ldr	r3, [pc, #516]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 800824a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800824c:	4b80      	ldr	r3, [pc, #512]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 800824e:	2104      	movs	r1, #4
 8008250:	438a      	bics	r2, r1
 8008252:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d014      	beq.n	8008286 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800825c:	f7fd f8f4 	bl	8005448 <HAL_GetTick>
 8008260:	0003      	movs	r3, r0
 8008262:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008264:	e009      	b.n	800827a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008266:	f7fd f8ef 	bl	8005448 <HAL_GetTick>
 800826a:	0002      	movs	r2, r0
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	4a79      	ldr	r2, [pc, #484]	; (8008458 <HAL_RCC_OscConfig+0x620>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d901      	bls.n	800827a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e0e6      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800827a:	4b75      	ldr	r3, [pc, #468]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 800827c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800827e:	2202      	movs	r2, #2
 8008280:	4013      	ands	r3, r2
 8008282:	d0f0      	beq.n	8008266 <HAL_RCC_OscConfig+0x42e>
 8008284:	e013      	b.n	80082ae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008286:	f7fd f8df 	bl	8005448 <HAL_GetTick>
 800828a:	0003      	movs	r3, r0
 800828c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800828e:	e009      	b.n	80082a4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008290:	f7fd f8da 	bl	8005448 <HAL_GetTick>
 8008294:	0002      	movs	r2, r0
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	4a6f      	ldr	r2, [pc, #444]	; (8008458 <HAL_RCC_OscConfig+0x620>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d901      	bls.n	80082a4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e0d1      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80082a4:	4b6a      	ldr	r3, [pc, #424]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 80082a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a8:	2202      	movs	r2, #2
 80082aa:	4013      	ands	r3, r2
 80082ac:	d1f0      	bne.n	8008290 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80082ae:	231f      	movs	r3, #31
 80082b0:	18fb      	adds	r3, r7, r3
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d105      	bne.n	80082c4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80082b8:	4b65      	ldr	r3, [pc, #404]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 80082ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082bc:	4b64      	ldr	r3, [pc, #400]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 80082be:	4967      	ldr	r1, [pc, #412]	; (800845c <HAL_RCC_OscConfig+0x624>)
 80082c0:	400a      	ands	r2, r1
 80082c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d100      	bne.n	80082ce <HAL_RCC_OscConfig+0x496>
 80082cc:	e0bb      	b.n	8008446 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082ce:	4b60      	ldr	r3, [pc, #384]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	2238      	movs	r2, #56	; 0x38
 80082d4:	4013      	ands	r3, r2
 80082d6:	2b10      	cmp	r3, #16
 80082d8:	d100      	bne.n	80082dc <HAL_RCC_OscConfig+0x4a4>
 80082da:	e07b      	b.n	80083d4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d156      	bne.n	8008392 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082e4:	4b5a      	ldr	r3, [pc, #360]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	4b59      	ldr	r3, [pc, #356]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 80082ea:	495d      	ldr	r1, [pc, #372]	; (8008460 <HAL_RCC_OscConfig+0x628>)
 80082ec:	400a      	ands	r2, r1
 80082ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f0:	f7fd f8aa 	bl	8005448 <HAL_GetTick>
 80082f4:	0003      	movs	r3, r0
 80082f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082f8:	e008      	b.n	800830c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082fa:	f7fd f8a5 	bl	8005448 <HAL_GetTick>
 80082fe:	0002      	movs	r2, r0
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	2b02      	cmp	r3, #2
 8008306:	d901      	bls.n	800830c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e09d      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800830c:	4b50      	ldr	r3, [pc, #320]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	2380      	movs	r3, #128	; 0x80
 8008312:	049b      	lsls	r3, r3, #18
 8008314:	4013      	ands	r3, r2
 8008316:	d1f0      	bne.n	80082fa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008318:	4b4d      	ldr	r3, [pc, #308]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	4a51      	ldr	r2, [pc, #324]	; (8008464 <HAL_RCC_OscConfig+0x62c>)
 800831e:	4013      	ands	r3, r2
 8008320:	0019      	movs	r1, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1a      	ldr	r2, [r3, #32]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008330:	021b      	lsls	r3, r3, #8
 8008332:	431a      	orrs	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008338:	431a      	orrs	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833e:	431a      	orrs	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008344:	431a      	orrs	r2, r3
 8008346:	4b42      	ldr	r3, [pc, #264]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 8008348:	430a      	orrs	r2, r1
 800834a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800834c:	4b40      	ldr	r3, [pc, #256]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	4b3f      	ldr	r3, [pc, #252]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 8008352:	2180      	movs	r1, #128	; 0x80
 8008354:	0449      	lsls	r1, r1, #17
 8008356:	430a      	orrs	r2, r1
 8008358:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800835a:	4b3d      	ldr	r3, [pc, #244]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 800835c:	68da      	ldr	r2, [r3, #12]
 800835e:	4b3c      	ldr	r3, [pc, #240]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 8008360:	2180      	movs	r1, #128	; 0x80
 8008362:	0549      	lsls	r1, r1, #21
 8008364:	430a      	orrs	r2, r1
 8008366:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008368:	f7fd f86e 	bl	8005448 <HAL_GetTick>
 800836c:	0003      	movs	r3, r0
 800836e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008370:	e008      	b.n	8008384 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008372:	f7fd f869 	bl	8005448 <HAL_GetTick>
 8008376:	0002      	movs	r2, r0
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b02      	cmp	r3, #2
 800837e:	d901      	bls.n	8008384 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e061      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008384:	4b32      	ldr	r3, [pc, #200]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	2380      	movs	r3, #128	; 0x80
 800838a:	049b      	lsls	r3, r3, #18
 800838c:	4013      	ands	r3, r2
 800838e:	d0f0      	beq.n	8008372 <HAL_RCC_OscConfig+0x53a>
 8008390:	e059      	b.n	8008446 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008392:	4b2f      	ldr	r3, [pc, #188]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	4b2e      	ldr	r3, [pc, #184]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 8008398:	4931      	ldr	r1, [pc, #196]	; (8008460 <HAL_RCC_OscConfig+0x628>)
 800839a:	400a      	ands	r2, r1
 800839c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839e:	f7fd f853 	bl	8005448 <HAL_GetTick>
 80083a2:	0003      	movs	r3, r0
 80083a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083a6:	e008      	b.n	80083ba <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083a8:	f7fd f84e 	bl	8005448 <HAL_GetTick>
 80083ac:	0002      	movs	r2, r0
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d901      	bls.n	80083ba <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e046      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083ba:	4b25      	ldr	r3, [pc, #148]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	2380      	movs	r3, #128	; 0x80
 80083c0:	049b      	lsls	r3, r3, #18
 80083c2:	4013      	ands	r3, r2
 80083c4:	d1f0      	bne.n	80083a8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80083c6:	4b22      	ldr	r3, [pc, #136]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 80083c8:	68da      	ldr	r2, [r3, #12]
 80083ca:	4b21      	ldr	r3, [pc, #132]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 80083cc:	4926      	ldr	r1, [pc, #152]	; (8008468 <HAL_RCC_OscConfig+0x630>)
 80083ce:	400a      	ands	r2, r1
 80083d0:	60da      	str	r2, [r3, #12]
 80083d2:	e038      	b.n	8008446 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d101      	bne.n	80083e0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e033      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80083e0:	4b1b      	ldr	r3, [pc, #108]	; (8008450 <HAL_RCC_OscConfig+0x618>)
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2203      	movs	r2, #3
 80083ea:	401a      	ands	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d126      	bne.n	8008442 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	2270      	movs	r2, #112	; 0x70
 80083f8:	401a      	ands	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083fe:	429a      	cmp	r2, r3
 8008400:	d11f      	bne.n	8008442 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	23fe      	movs	r3, #254	; 0xfe
 8008406:	01db      	lsls	r3, r3, #7
 8008408:	401a      	ands	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008410:	429a      	cmp	r2, r3
 8008412:	d116      	bne.n	8008442 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	23f8      	movs	r3, #248	; 0xf8
 8008418:	039b      	lsls	r3, r3, #14
 800841a:	401a      	ands	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008420:	429a      	cmp	r2, r3
 8008422:	d10e      	bne.n	8008442 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	23e0      	movs	r3, #224	; 0xe0
 8008428:	051b      	lsls	r3, r3, #20
 800842a:	401a      	ands	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008430:	429a      	cmp	r2, r3
 8008432:	d106      	bne.n	8008442 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	0f5b      	lsrs	r3, r3, #29
 8008438:	075a      	lsls	r2, r3, #29
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800843e:	429a      	cmp	r2, r3
 8008440:	d001      	beq.n	8008446 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e000      	b.n	8008448 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	0018      	movs	r0, r3
 800844a:	46bd      	mov	sp, r7
 800844c:	b008      	add	sp, #32
 800844e:	bd80      	pop	{r7, pc}
 8008450:	40021000 	.word	0x40021000
 8008454:	40007000 	.word	0x40007000
 8008458:	00001388 	.word	0x00001388
 800845c:	efffffff 	.word	0xefffffff
 8008460:	feffffff 	.word	0xfeffffff
 8008464:	11c1808c 	.word	0x11c1808c
 8008468:	eefefffc 	.word	0xeefefffc

0800846c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e0e9      	b.n	8008654 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008480:	4b76      	ldr	r3, [pc, #472]	; (800865c <HAL_RCC_ClockConfig+0x1f0>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2207      	movs	r2, #7
 8008486:	4013      	ands	r3, r2
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	429a      	cmp	r2, r3
 800848c:	d91e      	bls.n	80084cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800848e:	4b73      	ldr	r3, [pc, #460]	; (800865c <HAL_RCC_ClockConfig+0x1f0>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2207      	movs	r2, #7
 8008494:	4393      	bics	r3, r2
 8008496:	0019      	movs	r1, r3
 8008498:	4b70      	ldr	r3, [pc, #448]	; (800865c <HAL_RCC_ClockConfig+0x1f0>)
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	430a      	orrs	r2, r1
 800849e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80084a0:	f7fc ffd2 	bl	8005448 <HAL_GetTick>
 80084a4:	0003      	movs	r3, r0
 80084a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80084a8:	e009      	b.n	80084be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084aa:	f7fc ffcd 	bl	8005448 <HAL_GetTick>
 80084ae:	0002      	movs	r2, r0
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	4a6a      	ldr	r2, [pc, #424]	; (8008660 <HAL_RCC_ClockConfig+0x1f4>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d901      	bls.n	80084be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e0ca      	b.n	8008654 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80084be:	4b67      	ldr	r3, [pc, #412]	; (800865c <HAL_RCC_ClockConfig+0x1f0>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2207      	movs	r2, #7
 80084c4:	4013      	ands	r3, r2
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d1ee      	bne.n	80084aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2202      	movs	r2, #2
 80084d2:	4013      	ands	r3, r2
 80084d4:	d015      	beq.n	8008502 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2204      	movs	r2, #4
 80084dc:	4013      	ands	r3, r2
 80084de:	d006      	beq.n	80084ee <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80084e0:	4b60      	ldr	r3, [pc, #384]	; (8008664 <HAL_RCC_ClockConfig+0x1f8>)
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	4b5f      	ldr	r3, [pc, #380]	; (8008664 <HAL_RCC_ClockConfig+0x1f8>)
 80084e6:	21e0      	movs	r1, #224	; 0xe0
 80084e8:	01c9      	lsls	r1, r1, #7
 80084ea:	430a      	orrs	r2, r1
 80084ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084ee:	4b5d      	ldr	r3, [pc, #372]	; (8008664 <HAL_RCC_ClockConfig+0x1f8>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	4a5d      	ldr	r2, [pc, #372]	; (8008668 <HAL_RCC_ClockConfig+0x1fc>)
 80084f4:	4013      	ands	r3, r2
 80084f6:	0019      	movs	r1, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	4b59      	ldr	r3, [pc, #356]	; (8008664 <HAL_RCC_ClockConfig+0x1f8>)
 80084fe:	430a      	orrs	r2, r1
 8008500:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2201      	movs	r2, #1
 8008508:	4013      	ands	r3, r2
 800850a:	d057      	beq.n	80085bc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d107      	bne.n	8008524 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008514:	4b53      	ldr	r3, [pc, #332]	; (8008664 <HAL_RCC_ClockConfig+0x1f8>)
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	2380      	movs	r3, #128	; 0x80
 800851a:	029b      	lsls	r3, r3, #10
 800851c:	4013      	ands	r3, r2
 800851e:	d12b      	bne.n	8008578 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e097      	b.n	8008654 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	2b02      	cmp	r3, #2
 800852a:	d107      	bne.n	800853c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800852c:	4b4d      	ldr	r3, [pc, #308]	; (8008664 <HAL_RCC_ClockConfig+0x1f8>)
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	2380      	movs	r3, #128	; 0x80
 8008532:	049b      	lsls	r3, r3, #18
 8008534:	4013      	ands	r3, r2
 8008536:	d11f      	bne.n	8008578 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e08b      	b.n	8008654 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d107      	bne.n	8008554 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008544:	4b47      	ldr	r3, [pc, #284]	; (8008664 <HAL_RCC_ClockConfig+0x1f8>)
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	2380      	movs	r3, #128	; 0x80
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	4013      	ands	r3, r2
 800854e:	d113      	bne.n	8008578 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e07f      	b.n	8008654 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	2b03      	cmp	r3, #3
 800855a:	d106      	bne.n	800856a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800855c:	4b41      	ldr	r3, [pc, #260]	; (8008664 <HAL_RCC_ClockConfig+0x1f8>)
 800855e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008560:	2202      	movs	r2, #2
 8008562:	4013      	ands	r3, r2
 8008564:	d108      	bne.n	8008578 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e074      	b.n	8008654 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800856a:	4b3e      	ldr	r3, [pc, #248]	; (8008664 <HAL_RCC_ClockConfig+0x1f8>)
 800856c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800856e:	2202      	movs	r2, #2
 8008570:	4013      	ands	r3, r2
 8008572:	d101      	bne.n	8008578 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e06d      	b.n	8008654 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008578:	4b3a      	ldr	r3, [pc, #232]	; (8008664 <HAL_RCC_ClockConfig+0x1f8>)
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	2207      	movs	r2, #7
 800857e:	4393      	bics	r3, r2
 8008580:	0019      	movs	r1, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	4b37      	ldr	r3, [pc, #220]	; (8008664 <HAL_RCC_ClockConfig+0x1f8>)
 8008588:	430a      	orrs	r2, r1
 800858a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800858c:	f7fc ff5c 	bl	8005448 <HAL_GetTick>
 8008590:	0003      	movs	r3, r0
 8008592:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008594:	e009      	b.n	80085aa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008596:	f7fc ff57 	bl	8005448 <HAL_GetTick>
 800859a:	0002      	movs	r2, r0
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	4a2f      	ldr	r2, [pc, #188]	; (8008660 <HAL_RCC_ClockConfig+0x1f4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d901      	bls.n	80085aa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e054      	b.n	8008654 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085aa:	4b2e      	ldr	r3, [pc, #184]	; (8008664 <HAL_RCC_ClockConfig+0x1f8>)
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	2238      	movs	r2, #56	; 0x38
 80085b0:	401a      	ands	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	00db      	lsls	r3, r3, #3
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d1ec      	bne.n	8008596 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085bc:	4b27      	ldr	r3, [pc, #156]	; (800865c <HAL_RCC_ClockConfig+0x1f0>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2207      	movs	r2, #7
 80085c2:	4013      	ands	r3, r2
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d21e      	bcs.n	8008608 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ca:	4b24      	ldr	r3, [pc, #144]	; (800865c <HAL_RCC_ClockConfig+0x1f0>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2207      	movs	r2, #7
 80085d0:	4393      	bics	r3, r2
 80085d2:	0019      	movs	r1, r3
 80085d4:	4b21      	ldr	r3, [pc, #132]	; (800865c <HAL_RCC_ClockConfig+0x1f0>)
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	430a      	orrs	r2, r1
 80085da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80085dc:	f7fc ff34 	bl	8005448 <HAL_GetTick>
 80085e0:	0003      	movs	r3, r0
 80085e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085e4:	e009      	b.n	80085fa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085e6:	f7fc ff2f 	bl	8005448 <HAL_GetTick>
 80085ea:	0002      	movs	r2, r0
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	4a1b      	ldr	r2, [pc, #108]	; (8008660 <HAL_RCC_ClockConfig+0x1f4>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d901      	bls.n	80085fa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e02c      	b.n	8008654 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085fa:	4b18      	ldr	r3, [pc, #96]	; (800865c <HAL_RCC_ClockConfig+0x1f0>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2207      	movs	r2, #7
 8008600:	4013      	ands	r3, r2
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	429a      	cmp	r2, r3
 8008606:	d1ee      	bne.n	80085e6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2204      	movs	r2, #4
 800860e:	4013      	ands	r3, r2
 8008610:	d009      	beq.n	8008626 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008612:	4b14      	ldr	r3, [pc, #80]	; (8008664 <HAL_RCC_ClockConfig+0x1f8>)
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	4a15      	ldr	r2, [pc, #84]	; (800866c <HAL_RCC_ClockConfig+0x200>)
 8008618:	4013      	ands	r3, r2
 800861a:	0019      	movs	r1, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68da      	ldr	r2, [r3, #12]
 8008620:	4b10      	ldr	r3, [pc, #64]	; (8008664 <HAL_RCC_ClockConfig+0x1f8>)
 8008622:	430a      	orrs	r2, r1
 8008624:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008626:	f000 f829 	bl	800867c <HAL_RCC_GetSysClockFreq>
 800862a:	0001      	movs	r1, r0
 800862c:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <HAL_RCC_ClockConfig+0x1f8>)
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	0a1b      	lsrs	r3, r3, #8
 8008632:	220f      	movs	r2, #15
 8008634:	401a      	ands	r2, r3
 8008636:	4b0e      	ldr	r3, [pc, #56]	; (8008670 <HAL_RCC_ClockConfig+0x204>)
 8008638:	0092      	lsls	r2, r2, #2
 800863a:	58d3      	ldr	r3, [r2, r3]
 800863c:	221f      	movs	r2, #31
 800863e:	4013      	ands	r3, r2
 8008640:	000a      	movs	r2, r1
 8008642:	40da      	lsrs	r2, r3
 8008644:	4b0b      	ldr	r3, [pc, #44]	; (8008674 <HAL_RCC_ClockConfig+0x208>)
 8008646:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008648:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <HAL_RCC_ClockConfig+0x20c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	0018      	movs	r0, r3
 800864e:	f7fc fe9f 	bl	8005390 <HAL_InitTick>
 8008652:	0003      	movs	r3, r0
}
 8008654:	0018      	movs	r0, r3
 8008656:	46bd      	mov	sp, r7
 8008658:	b004      	add	sp, #16
 800865a:	bd80      	pop	{r7, pc}
 800865c:	40022000 	.word	0x40022000
 8008660:	00001388 	.word	0x00001388
 8008664:	40021000 	.word	0x40021000
 8008668:	fffff0ff 	.word	0xfffff0ff
 800866c:	ffff8fff 	.word	0xffff8fff
 8008670:	08018390 	.word	0x08018390
 8008674:	20000034 	.word	0x20000034
 8008678:	20000038 	.word	0x20000038

0800867c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008682:	4b3c      	ldr	r3, [pc, #240]	; (8008774 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	2238      	movs	r2, #56	; 0x38
 8008688:	4013      	ands	r3, r2
 800868a:	d10f      	bne.n	80086ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800868c:	4b39      	ldr	r3, [pc, #228]	; (8008774 <HAL_RCC_GetSysClockFreq+0xf8>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	0adb      	lsrs	r3, r3, #11
 8008692:	2207      	movs	r2, #7
 8008694:	4013      	ands	r3, r2
 8008696:	2201      	movs	r2, #1
 8008698:	409a      	lsls	r2, r3
 800869a:	0013      	movs	r3, r2
 800869c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	4835      	ldr	r0, [pc, #212]	; (8008778 <HAL_RCC_GetSysClockFreq+0xfc>)
 80086a2:	f7f7 fd2f 	bl	8000104 <__udivsi3>
 80086a6:	0003      	movs	r3, r0
 80086a8:	613b      	str	r3, [r7, #16]
 80086aa:	e05d      	b.n	8008768 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80086ac:	4b31      	ldr	r3, [pc, #196]	; (8008774 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	2238      	movs	r2, #56	; 0x38
 80086b2:	4013      	ands	r3, r2
 80086b4:	2b08      	cmp	r3, #8
 80086b6:	d102      	bne.n	80086be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80086b8:	4b30      	ldr	r3, [pc, #192]	; (800877c <HAL_RCC_GetSysClockFreq+0x100>)
 80086ba:	613b      	str	r3, [r7, #16]
 80086bc:	e054      	b.n	8008768 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086be:	4b2d      	ldr	r3, [pc, #180]	; (8008774 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2238      	movs	r2, #56	; 0x38
 80086c4:	4013      	ands	r3, r2
 80086c6:	2b10      	cmp	r3, #16
 80086c8:	d138      	bne.n	800873c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80086ca:	4b2a      	ldr	r3, [pc, #168]	; (8008774 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	2203      	movs	r2, #3
 80086d0:	4013      	ands	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086d4:	4b27      	ldr	r3, [pc, #156]	; (8008774 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	091b      	lsrs	r3, r3, #4
 80086da:	2207      	movs	r2, #7
 80086dc:	4013      	ands	r3, r2
 80086de:	3301      	adds	r3, #1
 80086e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b03      	cmp	r3, #3
 80086e6:	d10d      	bne.n	8008704 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086e8:	68b9      	ldr	r1, [r7, #8]
 80086ea:	4824      	ldr	r0, [pc, #144]	; (800877c <HAL_RCC_GetSysClockFreq+0x100>)
 80086ec:	f7f7 fd0a 	bl	8000104 <__udivsi3>
 80086f0:	0003      	movs	r3, r0
 80086f2:	0019      	movs	r1, r3
 80086f4:	4b1f      	ldr	r3, [pc, #124]	; (8008774 <HAL_RCC_GetSysClockFreq+0xf8>)
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	0a1b      	lsrs	r3, r3, #8
 80086fa:	227f      	movs	r2, #127	; 0x7f
 80086fc:	4013      	ands	r3, r2
 80086fe:	434b      	muls	r3, r1
 8008700:	617b      	str	r3, [r7, #20]
        break;
 8008702:	e00d      	b.n	8008720 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008704:	68b9      	ldr	r1, [r7, #8]
 8008706:	481c      	ldr	r0, [pc, #112]	; (8008778 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008708:	f7f7 fcfc 	bl	8000104 <__udivsi3>
 800870c:	0003      	movs	r3, r0
 800870e:	0019      	movs	r1, r3
 8008710:	4b18      	ldr	r3, [pc, #96]	; (8008774 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	0a1b      	lsrs	r3, r3, #8
 8008716:	227f      	movs	r2, #127	; 0x7f
 8008718:	4013      	ands	r3, r2
 800871a:	434b      	muls	r3, r1
 800871c:	617b      	str	r3, [r7, #20]
        break;
 800871e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008720:	4b14      	ldr	r3, [pc, #80]	; (8008774 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	0f5b      	lsrs	r3, r3, #29
 8008726:	2207      	movs	r2, #7
 8008728:	4013      	ands	r3, r2
 800872a:	3301      	adds	r3, #1
 800872c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	6978      	ldr	r0, [r7, #20]
 8008732:	f7f7 fce7 	bl	8000104 <__udivsi3>
 8008736:	0003      	movs	r3, r0
 8008738:	613b      	str	r3, [r7, #16]
 800873a:	e015      	b.n	8008768 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800873c:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <HAL_RCC_GetSysClockFreq+0xf8>)
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	2238      	movs	r2, #56	; 0x38
 8008742:	4013      	ands	r3, r2
 8008744:	2b20      	cmp	r3, #32
 8008746:	d103      	bne.n	8008750 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008748:	2380      	movs	r3, #128	; 0x80
 800874a:	021b      	lsls	r3, r3, #8
 800874c:	613b      	str	r3, [r7, #16]
 800874e:	e00b      	b.n	8008768 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008750:	4b08      	ldr	r3, [pc, #32]	; (8008774 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	2238      	movs	r2, #56	; 0x38
 8008756:	4013      	ands	r3, r2
 8008758:	2b18      	cmp	r3, #24
 800875a:	d103      	bne.n	8008764 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800875c:	23fa      	movs	r3, #250	; 0xfa
 800875e:	01db      	lsls	r3, r3, #7
 8008760:	613b      	str	r3, [r7, #16]
 8008762:	e001      	b.n	8008768 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008768:	693b      	ldr	r3, [r7, #16]
}
 800876a:	0018      	movs	r0, r3
 800876c:	46bd      	mov	sp, r7
 800876e:	b006      	add	sp, #24
 8008770:	bd80      	pop	{r7, pc}
 8008772:	46c0      	nop			; (mov r8, r8)
 8008774:	40021000 	.word	0x40021000
 8008778:	00f42400 	.word	0x00f42400
 800877c:	007a1200 	.word	0x007a1200

08008780 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008784:	4b02      	ldr	r3, [pc, #8]	; (8008790 <HAL_RCC_GetHCLKFreq+0x10>)
 8008786:	681b      	ldr	r3, [r3, #0]
}
 8008788:	0018      	movs	r0, r3
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	46c0      	nop			; (mov r8, r8)
 8008790:	20000034 	.word	0x20000034

08008794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008794:	b5b0      	push	{r4, r5, r7, lr}
 8008796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008798:	f7ff fff2 	bl	8008780 <HAL_RCC_GetHCLKFreq>
 800879c:	0004      	movs	r4, r0
 800879e:	f7ff fb3f 	bl	8007e20 <LL_RCC_GetAPB1Prescaler>
 80087a2:	0003      	movs	r3, r0
 80087a4:	0b1a      	lsrs	r2, r3, #12
 80087a6:	4b05      	ldr	r3, [pc, #20]	; (80087bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80087a8:	0092      	lsls	r2, r2, #2
 80087aa:	58d3      	ldr	r3, [r2, r3]
 80087ac:	221f      	movs	r2, #31
 80087ae:	4013      	ands	r3, r2
 80087b0:	40dc      	lsrs	r4, r3
 80087b2:	0023      	movs	r3, r4
}
 80087b4:	0018      	movs	r0, r3
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bdb0      	pop	{r4, r5, r7, pc}
 80087ba:	46c0      	nop			; (mov r8, r8)
 80087bc:	080183d0 	.word	0x080183d0

080087c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80087c8:	2313      	movs	r3, #19
 80087ca:	18fb      	adds	r3, r7, r3
 80087cc:	2200      	movs	r2, #0
 80087ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80087d0:	2312      	movs	r3, #18
 80087d2:	18fb      	adds	r3, r7, r3
 80087d4:	2200      	movs	r2, #0
 80087d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	2380      	movs	r3, #128	; 0x80
 80087de:	029b      	lsls	r3, r3, #10
 80087e0:	4013      	ands	r3, r2
 80087e2:	d100      	bne.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80087e4:	e0a3      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087e6:	2011      	movs	r0, #17
 80087e8:	183b      	adds	r3, r7, r0
 80087ea:	2200      	movs	r2, #0
 80087ec:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087ee:	4bc3      	ldr	r3, [pc, #780]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087f2:	2380      	movs	r3, #128	; 0x80
 80087f4:	055b      	lsls	r3, r3, #21
 80087f6:	4013      	ands	r3, r2
 80087f8:	d110      	bne.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087fa:	4bc0      	ldr	r3, [pc, #768]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087fe:	4bbf      	ldr	r3, [pc, #764]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008800:	2180      	movs	r1, #128	; 0x80
 8008802:	0549      	lsls	r1, r1, #21
 8008804:	430a      	orrs	r2, r1
 8008806:	63da      	str	r2, [r3, #60]	; 0x3c
 8008808:	4bbc      	ldr	r3, [pc, #752]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800880a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800880c:	2380      	movs	r3, #128	; 0x80
 800880e:	055b      	lsls	r3, r3, #21
 8008810:	4013      	ands	r3, r2
 8008812:	60bb      	str	r3, [r7, #8]
 8008814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008816:	183b      	adds	r3, r7, r0
 8008818:	2201      	movs	r2, #1
 800881a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800881c:	4bb8      	ldr	r3, [pc, #736]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	4bb7      	ldr	r3, [pc, #732]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008822:	2180      	movs	r1, #128	; 0x80
 8008824:	0049      	lsls	r1, r1, #1
 8008826:	430a      	orrs	r2, r1
 8008828:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800882a:	f7fc fe0d 	bl	8005448 <HAL_GetTick>
 800882e:	0003      	movs	r3, r0
 8008830:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008832:	e00b      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008834:	f7fc fe08 	bl	8005448 <HAL_GetTick>
 8008838:	0002      	movs	r2, r0
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b02      	cmp	r3, #2
 8008840:	d904      	bls.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008842:	2313      	movs	r3, #19
 8008844:	18fb      	adds	r3, r7, r3
 8008846:	2203      	movs	r2, #3
 8008848:	701a      	strb	r2, [r3, #0]
        break;
 800884a:	e005      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800884c:	4bac      	ldr	r3, [pc, #688]	; (8008b00 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	2380      	movs	r3, #128	; 0x80
 8008852:	005b      	lsls	r3, r3, #1
 8008854:	4013      	ands	r3, r2
 8008856:	d0ed      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008858:	2313      	movs	r3, #19
 800885a:	18fb      	adds	r3, r7, r3
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d154      	bne.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008862:	4ba6      	ldr	r3, [pc, #664]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008864:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008866:	23c0      	movs	r3, #192	; 0xc0
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4013      	ands	r3, r2
 800886c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d019      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	429a      	cmp	r2, r3
 800887c:	d014      	beq.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800887e:	4b9f      	ldr	r3, [pc, #636]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008882:	4aa0      	ldr	r2, [pc, #640]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008884:	4013      	ands	r3, r2
 8008886:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008888:	4b9c      	ldr	r3, [pc, #624]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800888a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800888c:	4b9b      	ldr	r3, [pc, #620]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800888e:	2180      	movs	r1, #128	; 0x80
 8008890:	0249      	lsls	r1, r1, #9
 8008892:	430a      	orrs	r2, r1
 8008894:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008896:	4b99      	ldr	r3, [pc, #612]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008898:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800889a:	4b98      	ldr	r3, [pc, #608]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800889c:	499a      	ldr	r1, [pc, #616]	; (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800889e:	400a      	ands	r2, r1
 80088a0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80088a2:	4b96      	ldr	r3, [pc, #600]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2201      	movs	r2, #1
 80088ac:	4013      	ands	r3, r2
 80088ae:	d016      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b0:	f7fc fdca 	bl	8005448 <HAL_GetTick>
 80088b4:	0003      	movs	r3, r0
 80088b6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088b8:	e00c      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088ba:	f7fc fdc5 	bl	8005448 <HAL_GetTick>
 80088be:	0002      	movs	r2, r0
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	4a91      	ldr	r2, [pc, #580]	; (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d904      	bls.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80088ca:	2313      	movs	r3, #19
 80088cc:	18fb      	adds	r3, r7, r3
 80088ce:	2203      	movs	r2, #3
 80088d0:	701a      	strb	r2, [r3, #0]
            break;
 80088d2:	e004      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088d4:	4b89      	ldr	r3, [pc, #548]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d8:	2202      	movs	r2, #2
 80088da:	4013      	ands	r3, r2
 80088dc:	d0ed      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80088de:	2313      	movs	r3, #19
 80088e0:	18fb      	adds	r3, r7, r3
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10a      	bne.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088e8:	4b84      	ldr	r3, [pc, #528]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ec:	4a85      	ldr	r2, [pc, #532]	; (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80088ee:	4013      	ands	r3, r2
 80088f0:	0019      	movs	r1, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088f6:	4b81      	ldr	r3, [pc, #516]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088f8:	430a      	orrs	r2, r1
 80088fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80088fc:	e00c      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80088fe:	2312      	movs	r3, #18
 8008900:	18fb      	adds	r3, r7, r3
 8008902:	2213      	movs	r2, #19
 8008904:	18ba      	adds	r2, r7, r2
 8008906:	7812      	ldrb	r2, [r2, #0]
 8008908:	701a      	strb	r2, [r3, #0]
 800890a:	e005      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800890c:	2312      	movs	r3, #18
 800890e:	18fb      	adds	r3, r7, r3
 8008910:	2213      	movs	r2, #19
 8008912:	18ba      	adds	r2, r7, r2
 8008914:	7812      	ldrb	r2, [r2, #0]
 8008916:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008918:	2311      	movs	r3, #17
 800891a:	18fb      	adds	r3, r7, r3
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d105      	bne.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008922:	4b76      	ldr	r3, [pc, #472]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008926:	4b75      	ldr	r3, [pc, #468]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008928:	4979      	ldr	r1, [pc, #484]	; (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800892a:	400a      	ands	r2, r1
 800892c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2201      	movs	r2, #1
 8008934:	4013      	ands	r3, r2
 8008936:	d009      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008938:	4b70      	ldr	r3, [pc, #448]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800893a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893c:	2203      	movs	r2, #3
 800893e:	4393      	bics	r3, r2
 8008940:	0019      	movs	r1, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	4b6d      	ldr	r3, [pc, #436]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008948:	430a      	orrs	r2, r1
 800894a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2202      	movs	r2, #2
 8008952:	4013      	ands	r3, r2
 8008954:	d009      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008956:	4b69      	ldr	r3, [pc, #420]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895a:	220c      	movs	r2, #12
 800895c:	4393      	bics	r3, r2
 800895e:	0019      	movs	r1, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	4b65      	ldr	r3, [pc, #404]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008966:	430a      	orrs	r2, r1
 8008968:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2210      	movs	r2, #16
 8008970:	4013      	ands	r3, r2
 8008972:	d009      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008974:	4b61      	ldr	r3, [pc, #388]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008978:	4a66      	ldr	r2, [pc, #408]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800897a:	4013      	ands	r3, r2
 800897c:	0019      	movs	r1, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68da      	ldr	r2, [r3, #12]
 8008982:	4b5e      	ldr	r3, [pc, #376]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008984:	430a      	orrs	r2, r1
 8008986:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	2380      	movs	r3, #128	; 0x80
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4013      	ands	r3, r2
 8008992:	d009      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008994:	4b59      	ldr	r3, [pc, #356]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008998:	4a5f      	ldr	r2, [pc, #380]	; (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800899a:	4013      	ands	r3, r2
 800899c:	0019      	movs	r1, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	699a      	ldr	r2, [r3, #24]
 80089a2:	4b56      	ldr	r3, [pc, #344]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089a4:	430a      	orrs	r2, r1
 80089a6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	2380      	movs	r3, #128	; 0x80
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	4013      	ands	r3, r2
 80089b2:	d009      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089b4:	4b51      	ldr	r3, [pc, #324]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b8:	4a58      	ldr	r2, [pc, #352]	; (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089ba:	4013      	ands	r3, r2
 80089bc:	0019      	movs	r1, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	69da      	ldr	r2, [r3, #28]
 80089c2:	4b4e      	ldr	r3, [pc, #312]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089c4:	430a      	orrs	r2, r1
 80089c6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2220      	movs	r2, #32
 80089ce:	4013      	ands	r3, r2
 80089d0:	d009      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80089d2:	4b4a      	ldr	r3, [pc, #296]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d6:	4a52      	ldr	r2, [pc, #328]	; (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80089d8:	4013      	ands	r3, r2
 80089da:	0019      	movs	r1, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	691a      	ldr	r2, [r3, #16]
 80089e0:	4b46      	ldr	r3, [pc, #280]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089e2:	430a      	orrs	r2, r1
 80089e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	2380      	movs	r3, #128	; 0x80
 80089ec:	01db      	lsls	r3, r3, #7
 80089ee:	4013      	ands	r3, r2
 80089f0:	d015      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089f2:	4b42      	ldr	r3, [pc, #264]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	0899      	lsrs	r1, r3, #2
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1a      	ldr	r2, [r3, #32]
 80089fe:	4b3f      	ldr	r3, [pc, #252]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a00:	430a      	orrs	r2, r1
 8008a02:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a1a      	ldr	r2, [r3, #32]
 8008a08:	2380      	movs	r3, #128	; 0x80
 8008a0a:	05db      	lsls	r3, r3, #23
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d106      	bne.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008a10:	4b3a      	ldr	r3, [pc, #232]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a12:	68da      	ldr	r2, [r3, #12]
 8008a14:	4b39      	ldr	r3, [pc, #228]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a16:	2180      	movs	r1, #128	; 0x80
 8008a18:	0249      	lsls	r1, r1, #9
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	2380      	movs	r3, #128	; 0x80
 8008a24:	031b      	lsls	r3, r3, #12
 8008a26:	4013      	ands	r3, r2
 8008a28:	d009      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a2a:	4b34      	ldr	r3, [pc, #208]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2e:	2240      	movs	r2, #64	; 0x40
 8008a30:	4393      	bics	r3, r2
 8008a32:	0019      	movs	r1, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a38:	4b30      	ldr	r3, [pc, #192]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	2380      	movs	r3, #128	; 0x80
 8008a44:	039b      	lsls	r3, r3, #14
 8008a46:	4013      	ands	r3, r2
 8008a48:	d016      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008a4a:	4b2c      	ldr	r3, [pc, #176]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a4e:	4a35      	ldr	r2, [pc, #212]	; (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008a50:	4013      	ands	r3, r2
 8008a52:	0019      	movs	r1, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a58:	4b28      	ldr	r3, [pc, #160]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a62:	2380      	movs	r3, #128	; 0x80
 8008a64:	03db      	lsls	r3, r3, #15
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d106      	bne.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008a6a:	4b24      	ldr	r3, [pc, #144]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a6c:	68da      	ldr	r2, [r3, #12]
 8008a6e:	4b23      	ldr	r3, [pc, #140]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a70:	2180      	movs	r1, #128	; 0x80
 8008a72:	0449      	lsls	r1, r1, #17
 8008a74:	430a      	orrs	r2, r1
 8008a76:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	2380      	movs	r3, #128	; 0x80
 8008a7e:	03db      	lsls	r3, r3, #15
 8008a80:	4013      	ands	r3, r2
 8008a82:	d016      	beq.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008a84:	4b1d      	ldr	r3, [pc, #116]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a88:	4a27      	ldr	r2, [pc, #156]	; (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	0019      	movs	r1, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a92:	4b1a      	ldr	r3, [pc, #104]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a94:	430a      	orrs	r2, r1
 8008a96:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9c:	2380      	movs	r3, #128	; 0x80
 8008a9e:	045b      	lsls	r3, r3, #17
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d106      	bne.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008aa4:	4b15      	ldr	r3, [pc, #84]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aa6:	68da      	ldr	r2, [r3, #12]
 8008aa8:	4b14      	ldr	r3, [pc, #80]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aaa:	2180      	movs	r1, #128	; 0x80
 8008aac:	0449      	lsls	r1, r1, #17
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	2380      	movs	r3, #128	; 0x80
 8008ab8:	011b      	lsls	r3, r3, #4
 8008aba:	4013      	ands	r3, r2
 8008abc:	d016      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008abe:	4b0f      	ldr	r3, [pc, #60]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac2:	4a1a      	ldr	r2, [pc, #104]	; (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	0019      	movs	r1, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	695a      	ldr	r2, [r3, #20]
 8008acc:	4b0b      	ldr	r3, [pc, #44]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	695a      	ldr	r2, [r3, #20]
 8008ad6:	2380      	movs	r3, #128	; 0x80
 8008ad8:	01db      	lsls	r3, r3, #7
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d106      	bne.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008ade:	4b07      	ldr	r3, [pc, #28]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ae0:	68da      	ldr	r2, [r3, #12]
 8008ae2:	4b06      	ldr	r3, [pc, #24]	; (8008afc <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ae4:	2180      	movs	r1, #128	; 0x80
 8008ae6:	0249      	lsls	r1, r1, #9
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008aec:	2312      	movs	r3, #18
 8008aee:	18fb      	adds	r3, r7, r3
 8008af0:	781b      	ldrb	r3, [r3, #0]
}
 8008af2:	0018      	movs	r0, r3
 8008af4:	46bd      	mov	sp, r7
 8008af6:	b006      	add	sp, #24
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	46c0      	nop			; (mov r8, r8)
 8008afc:	40021000 	.word	0x40021000
 8008b00:	40007000 	.word	0x40007000
 8008b04:	fffffcff 	.word	0xfffffcff
 8008b08:	fffeffff 	.word	0xfffeffff
 8008b0c:	00001388 	.word	0x00001388
 8008b10:	efffffff 	.word	0xefffffff
 8008b14:	fffff3ff 	.word	0xfffff3ff
 8008b18:	fff3ffff 	.word	0xfff3ffff
 8008b1c:	ffcfffff 	.word	0xffcfffff
 8008b20:	ffffcfff 	.word	0xffffcfff
 8008b24:	ffbfffff 	.word	0xffbfffff
 8008b28:	feffffff 	.word	0xfeffffff
 8008b2c:	ffff3fff 	.word	0xffff3fff

08008b30 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	2380      	movs	r3, #128	; 0x80
 8008b40:	029b      	lsls	r3, r3, #10
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d136      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008b46:	4bcd      	ldr	r3, [pc, #820]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b4a:	23c0      	movs	r3, #192	; 0xc0
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4013      	ands	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008b52:	4bca      	ldr	r3, [pc, #808]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b56:	2202      	movs	r2, #2
 8008b58:	4013      	ands	r3, r2
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d108      	bne.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	2380      	movs	r3, #128	; 0x80
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d103      	bne.n	8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8008b68:	2380      	movs	r3, #128	; 0x80
 8008b6a:	021b      	lsls	r3, r3, #8
 8008b6c:	617b      	str	r3, [r7, #20]
 8008b6e:	e31c      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008b70:	4bc2      	ldr	r3, [pc, #776]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b74:	2202      	movs	r2, #2
 8008b76:	4013      	ands	r3, r2
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d108      	bne.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	2380      	movs	r3, #128	; 0x80
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d103      	bne.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8008b86:	23fa      	movs	r3, #250	; 0xfa
 8008b88:	01db      	lsls	r3, r3, #7
 8008b8a:	617b      	str	r3, [r7, #20]
 8008b8c:	e30d      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008b8e:	4bbb      	ldr	r3, [pc, #748]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	2380      	movs	r3, #128	; 0x80
 8008b94:	029b      	lsls	r3, r3, #10
 8008b96:	401a      	ands	r2, r3
 8008b98:	2380      	movs	r3, #128	; 0x80
 8008b9a:	029b      	lsls	r3, r3, #10
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d000      	beq.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8008ba0:	e303      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	23c0      	movs	r3, #192	; 0xc0
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d000      	beq.n	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8008bac:	e2fd      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8008bae:	4bb4      	ldr	r3, [pc, #720]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	e2fa      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8008bb4:	4bb1      	ldr	r3, [pc, #708]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	2203      	movs	r2, #3
 8008bba:	4013      	ands	r3, r2
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d102      	bne.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8008bc0:	4bb0      	ldr	r3, [pc, #704]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008bc2:	613b      	str	r3, [r7, #16]
 8008bc4:	e00a      	b.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8008bc6:	4bad      	ldr	r3, [pc, #692]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	2203      	movs	r2, #3
 8008bcc:	4013      	ands	r3, r2
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d102      	bne.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8008bd2:	4bad      	ldr	r3, [pc, #692]	; (8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8008bd4:	613b      	str	r3, [r7, #16]
 8008bd6:	e001      	b.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008bdc:	4ba7      	ldr	r3, [pc, #668]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	091b      	lsrs	r3, r3, #4
 8008be2:	2207      	movs	r2, #7
 8008be4:	4013      	ands	r3, r2
 8008be6:	3301      	adds	r3, #1
 8008be8:	0019      	movs	r1, r3
 8008bea:	6938      	ldr	r0, [r7, #16]
 8008bec:	f7f7 fa8a 	bl	8000104 <__udivsi3>
 8008bf0:	0003      	movs	r3, r0
 8008bf2:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	2380      	movs	r3, #128	; 0x80
 8008bf8:	03db      	lsls	r3, r3, #15
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d100      	bne.n	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8008bfe:	e28e      	b.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	2380      	movs	r3, #128	; 0x80
 8008c04:	03db      	lsls	r3, r3, #15
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d900      	bls.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008c0a:	e2b7      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	2380      	movs	r3, #128	; 0x80
 8008c10:	039b      	lsls	r3, r3, #14
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d100      	bne.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008c16:	e253      	b.n	80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	2380      	movs	r3, #128	; 0x80
 8008c1c:	039b      	lsls	r3, r3, #14
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d900      	bls.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008c22:	e2ab      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	2380      	movs	r3, #128	; 0x80
 8008c28:	031b      	lsls	r3, r3, #12
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d100      	bne.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008c2e:	e0b2      	b.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	2380      	movs	r3, #128	; 0x80
 8008c34:	031b      	lsls	r3, r3, #12
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d900      	bls.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008c3a:	e29f      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	2380      	movs	r3, #128	; 0x80
 8008c40:	01db      	lsls	r3, r3, #7
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d100      	bne.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8008c46:	e103      	b.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	2380      	movs	r3, #128	; 0x80
 8008c4c:	01db      	lsls	r3, r3, #7
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d900      	bls.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008c52:	e293      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	2380      	movs	r3, #128	; 0x80
 8008c58:	011b      	lsls	r3, r3, #4
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d100      	bne.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8008c5e:	e165      	b.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	2380      	movs	r3, #128	; 0x80
 8008c64:	011b      	lsls	r3, r3, #4
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d900      	bls.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8008c6a:	e287      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	2380      	movs	r3, #128	; 0x80
 8008c70:	00db      	lsls	r3, r3, #3
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d100      	bne.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8008c76:	e1e3      	b.n	8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	2380      	movs	r3, #128	; 0x80
 8008c7c:	00db      	lsls	r3, r3, #3
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d900      	bls.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008c82:	e27b      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	2380      	movs	r3, #128	; 0x80
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d100      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8008c8e:	e197      	b.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	2380      	movs	r3, #128	; 0x80
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d900      	bls.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8008c9a:	e26f      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b20      	cmp	r3, #32
 8008ca0:	d100      	bne.n	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8008ca2:	e118      	b.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b20      	cmp	r3, #32
 8008ca8:	d900      	bls.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8008caa:	e267      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b10      	cmp	r3, #16
 8008cb0:	d100      	bne.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8008cb2:	e093      	b.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b10      	cmp	r3, #16
 8008cb8:	d900      	bls.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008cba:	e25f      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d003      	beq.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d033      	beq.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8008cc8:	e258      	b.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008cca:	4b6c      	ldr	r3, [pc, #432]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cce:	2203      	movs	r2, #3
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d104      	bne.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008cda:	f7ff fd5b 	bl	8008794 <HAL_RCC_GetPCLK1Freq>
 8008cde:	0003      	movs	r3, r0
 8008ce0:	617b      	str	r3, [r7, #20]
        break;
 8008ce2:	e24d      	b.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d104      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008cea:	f7ff fcc7 	bl	800867c <HAL_RCC_GetSysClockFreq>
 8008cee:	0003      	movs	r3, r0
 8008cf0:	617b      	str	r3, [r7, #20]
        break;
 8008cf2:	e245      	b.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008cf4:	4b61      	ldr	r3, [pc, #388]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	2380      	movs	r3, #128	; 0x80
 8008cfa:	00db      	lsls	r3, r3, #3
 8008cfc:	401a      	ands	r2, r3
 8008cfe:	2380      	movs	r3, #128	; 0x80
 8008d00:	00db      	lsls	r3, r3, #3
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d105      	bne.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d102      	bne.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8008d0c:	4b5d      	ldr	r3, [pc, #372]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008d0e:	617b      	str	r3, [r7, #20]
        break;
 8008d10:	e236      	b.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008d12:	4b5a      	ldr	r3, [pc, #360]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d16:	2202      	movs	r2, #2
 8008d18:	4013      	ands	r3, r2
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d000      	beq.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8008d1e:	e22f      	b.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d000      	beq.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8008d26:	e22b      	b.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8008d28:	2380      	movs	r3, #128	; 0x80
 8008d2a:	021b      	lsls	r3, r3, #8
 8008d2c:	617b      	str	r3, [r7, #20]
        break;
 8008d2e:	e227      	b.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008d30:	4b52      	ldr	r3, [pc, #328]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d34:	220c      	movs	r2, #12
 8008d36:	4013      	ands	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d104      	bne.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d40:	f7ff fd28 	bl	8008794 <HAL_RCC_GetPCLK1Freq>
 8008d44:	0003      	movs	r3, r0
 8008d46:	617b      	str	r3, [r7, #20]
        break;
 8008d48:	e21c      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	d104      	bne.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d50:	f7ff fc94 	bl	800867c <HAL_RCC_GetSysClockFreq>
 8008d54:	0003      	movs	r3, r0
 8008d56:	617b      	str	r3, [r7, #20]
        break;
 8008d58:	e214      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008d5a:	4b48      	ldr	r3, [pc, #288]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	2380      	movs	r3, #128	; 0x80
 8008d60:	00db      	lsls	r3, r3, #3
 8008d62:	401a      	ands	r2, r3
 8008d64:	2380      	movs	r3, #128	; 0x80
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d105      	bne.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2b08      	cmp	r3, #8
 8008d70:	d102      	bne.n	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8008d72:	4b44      	ldr	r3, [pc, #272]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008d74:	617b      	str	r3, [r7, #20]
        break;
 8008d76:	e205      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008d78:	4b40      	ldr	r3, [pc, #256]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	4013      	ands	r3, r2
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d000      	beq.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008d84:	e1fe      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b0c      	cmp	r3, #12
 8008d8a:	d000      	beq.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008d8c:	e1fa      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8008d8e:	2380      	movs	r3, #128	; 0x80
 8008d90:	021b      	lsls	r3, r3, #8
 8008d92:	617b      	str	r3, [r7, #20]
        break;
 8008d94:	e1f6      	b.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008d96:	4b39      	ldr	r3, [pc, #228]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d9a:	2240      	movs	r2, #64	; 0x40
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8008da0:	4b36      	ldr	r3, [pc, #216]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	2380      	movs	r3, #128	; 0x80
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	401a      	ands	r2, r3
 8008daa:	2380      	movs	r3, #128	; 0x80
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d105      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d102      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8008db8:	4b34      	ldr	r3, [pc, #208]	; (8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8008dba:	617b      	str	r3, [r7, #20]
        break;
 8008dbc:	e1e4      	b.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008dbe:	4b2f      	ldr	r3, [pc, #188]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d000      	beq.n	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8008dca:	e1dd      	b.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2b40      	cmp	r3, #64	; 0x40
 8008dd0:	d000      	beq.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8008dd2:	e1d9      	b.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8008dd4:	2380      	movs	r3, #128	; 0x80
 8008dd6:	021b      	lsls	r3, r3, #8
 8008dd8:	617b      	str	r3, [r7, #20]
        break;
 8008dda:	e1d5      	b.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008ddc:	4b27      	ldr	r3, [pc, #156]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008dde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008de0:	23c0      	movs	r3, #192	; 0xc0
 8008de2:	011b      	lsls	r3, r3, #4
 8008de4:	4013      	ands	r3, r2
 8008de6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d104      	bne.n	8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008dee:	f7ff fcd1 	bl	8008794 <HAL_RCC_GetPCLK1Freq>
 8008df2:	0003      	movs	r3, r0
 8008df4:	617b      	str	r3, [r7, #20]
        break;
 8008df6:	e1c9      	b.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	2380      	movs	r3, #128	; 0x80
 8008dfc:	00db      	lsls	r3, r3, #3
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d104      	bne.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e02:	f7ff fc3b 	bl	800867c <HAL_RCC_GetSysClockFreq>
 8008e06:	0003      	movs	r3, r0
 8008e08:	617b      	str	r3, [r7, #20]
        break;
 8008e0a:	e1bf      	b.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008e0c:	4b1b      	ldr	r3, [pc, #108]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	2380      	movs	r3, #128	; 0x80
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	401a      	ands	r2, r3
 8008e16:	2380      	movs	r3, #128	; 0x80
 8008e18:	00db      	lsls	r3, r3, #3
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d107      	bne.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	2380      	movs	r3, #128	; 0x80
 8008e22:	011b      	lsls	r3, r3, #4
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d102      	bne.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8008e28:	4b16      	ldr	r3, [pc, #88]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008e2a:	617b      	str	r3, [r7, #20]
        break;
 8008e2c:	e1ae      	b.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008e2e:	4b13      	ldr	r3, [pc, #76]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e32:	2202      	movs	r2, #2
 8008e34:	4013      	ands	r3, r2
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d000      	beq.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008e3a:	e1a7      	b.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	23c0      	movs	r3, #192	; 0xc0
 8008e40:	011b      	lsls	r3, r3, #4
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d000      	beq.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008e46:	e1a1      	b.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8008e48:	2380      	movs	r3, #128	; 0x80
 8008e4a:	021b      	lsls	r3, r3, #8
 8008e4c:	617b      	str	r3, [r7, #20]
        break;
 8008e4e:	e19d      	b.n	800918c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008e50:	4b0a      	ldr	r3, [pc, #40]	; (8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e54:	0f9b      	lsrs	r3, r3, #30
 8008e56:	079b      	lsls	r3, r3, #30
 8008e58:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d104      	bne.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e60:	f7ff fc0c 	bl	800867c <HAL_RCC_GetSysClockFreq>
 8008e64:	0003      	movs	r3, r0
 8008e66:	617b      	str	r3, [r7, #20]
        break;
 8008e68:	e192      	b.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	2380      	movs	r3, #128	; 0x80
 8008e6e:	061b      	lsls	r3, r3, #24
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d10d      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8008e74:	4b03      	ldr	r3, [pc, #12]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008e76:	617b      	str	r3, [r7, #20]
        break;
 8008e78:	e18a      	b.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008e7a:	46c0      	nop			; (mov r8, r8)
 8008e7c:	40021000 	.word	0x40021000
 8008e80:	0003d090 	.word	0x0003d090
 8008e84:	00f42400 	.word	0x00f42400
 8008e88:	007a1200 	.word	0x007a1200
 8008e8c:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	2380      	movs	r3, #128	; 0x80
 8008e94:	05db      	lsls	r3, r3, #23
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d000      	beq.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8008e9a:	e179      	b.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008e9c:	4bc5      	ldr	r3, [pc, #788]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	2380      	movs	r3, #128	; 0x80
 8008ea2:	025b      	lsls	r3, r3, #9
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	d100      	bne.n	8008eaa <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008ea8:	e172      	b.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008eaa:	4bc2      	ldr	r3, [pc, #776]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	0a1b      	lsrs	r3, r3, #8
 8008eb0:	227f      	movs	r2, #127	; 0x7f
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	435a      	muls	r2, r3
 8008ebc:	4bbd      	ldr	r3, [pc, #756]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	0c5b      	lsrs	r3, r3, #17
 8008ec2:	211f      	movs	r1, #31
 8008ec4:	400b      	ands	r3, r1
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	0019      	movs	r1, r3
 8008eca:	0010      	movs	r0, r2
 8008ecc:	f7f7 f91a 	bl	8000104 <__udivsi3>
 8008ed0:	0003      	movs	r3, r0
 8008ed2:	617b      	str	r3, [r7, #20]
        break;
 8008ed4:	e15c      	b.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008ed6:	4bb7      	ldr	r3, [pc, #732]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008eda:	23c0      	movs	r3, #192	; 0xc0
 8008edc:	019b      	lsls	r3, r3, #6
 8008ede:	4013      	ands	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d104      	bne.n	8008ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ee8:	f7ff fc54 	bl	8008794 <HAL_RCC_GetPCLK1Freq>
 8008eec:	0003      	movs	r3, r0
 8008eee:	617b      	str	r3, [r7, #20]
        break;
 8008ef0:	e150      	b.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	2380      	movs	r3, #128	; 0x80
 8008ef6:	015b      	lsls	r3, r3, #5
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d104      	bne.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8008efc:	f7ff fbbe 	bl	800867c <HAL_RCC_GetSysClockFreq>
 8008f00:	0003      	movs	r3, r0
 8008f02:	617b      	str	r3, [r7, #20]
        break;
 8008f04:	e146      	b.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008f06:	4bab      	ldr	r3, [pc, #684]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	2380      	movs	r3, #128	; 0x80
 8008f0c:	00db      	lsls	r3, r3, #3
 8008f0e:	401a      	ands	r2, r3
 8008f10:	2380      	movs	r3, #128	; 0x80
 8008f12:	00db      	lsls	r3, r3, #3
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d000      	beq.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8008f18:	e13c      	b.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	2380      	movs	r3, #128	; 0x80
 8008f1e:	019b      	lsls	r3, r3, #6
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d000      	beq.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8008f24:	e136      	b.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8008f26:	4ba4      	ldr	r3, [pc, #656]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008f28:	617b      	str	r3, [r7, #20]
        break;
 8008f2a:	e133      	b.n	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8008f2c:	4ba1      	ldr	r3, [pc, #644]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f30:	23c0      	movs	r3, #192	; 0xc0
 8008f32:	021b      	lsls	r3, r3, #8
 8008f34:	4013      	ands	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	2380      	movs	r3, #128	; 0x80
 8008f3c:	01db      	lsls	r3, r3, #7
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d11c      	bne.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008f42:	4b9c      	ldr	r3, [pc, #624]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f44:	68da      	ldr	r2, [r3, #12]
 8008f46:	2380      	movs	r3, #128	; 0x80
 8008f48:	025b      	lsls	r3, r3, #9
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	d100      	bne.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8008f4e:	e123      	b.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008f50:	4b98      	ldr	r3, [pc, #608]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	0a1b      	lsrs	r3, r3, #8
 8008f56:	227f      	movs	r2, #127	; 0x7f
 8008f58:	4013      	ands	r3, r2
 8008f5a:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	435a      	muls	r2, r3
 8008f62:	4b94      	ldr	r3, [pc, #592]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	0c5b      	lsrs	r3, r3, #17
 8008f68:	211f      	movs	r1, #31
 8008f6a:	400b      	ands	r3, r1
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	0019      	movs	r1, r3
 8008f70:	0010      	movs	r0, r2
 8008f72:	f7f7 f8c7 	bl	8000104 <__udivsi3>
 8008f76:	0003      	movs	r3, r0
 8008f78:	617b      	str	r3, [r7, #20]
        break;
 8008f7a:	e10d      	b.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d104      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f82:	f7ff fb7b 	bl	800867c <HAL_RCC_GetSysClockFreq>
 8008f86:	0003      	movs	r3, r0
 8008f88:	617b      	str	r3, [r7, #20]
        break;
 8008f8a:	e105      	b.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8008f8c:	4b89      	ldr	r3, [pc, #548]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	2380      	movs	r3, #128	; 0x80
 8008f92:	00db      	lsls	r3, r3, #3
 8008f94:	401a      	ands	r2, r3
 8008f96:	2380      	movs	r3, #128	; 0x80
 8008f98:	00db      	lsls	r3, r3, #3
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d107      	bne.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	2380      	movs	r3, #128	; 0x80
 8008fa2:	021b      	lsls	r3, r3, #8
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d102      	bne.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8008fa8:	4b83      	ldr	r3, [pc, #524]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008faa:	617b      	str	r3, [r7, #20]
        break;
 8008fac:	e0f4      	b.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	23c0      	movs	r3, #192	; 0xc0
 8008fb2:	021b      	lsls	r3, r3, #8
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d000      	beq.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008fb8:	e0ee      	b.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8008fba:	4b80      	ldr	r3, [pc, #512]	; (80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8008fbc:	617b      	str	r3, [r7, #20]
        break;
 8008fbe:	e0eb      	b.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008fc0:	4b7c      	ldr	r3, [pc, #496]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fc4:	23c0      	movs	r3, #192	; 0xc0
 8008fc6:	031b      	lsls	r3, r3, #12
 8008fc8:	4013      	ands	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d104      	bne.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008fd2:	f7ff fbdf 	bl	8008794 <HAL_RCC_GetPCLK1Freq>
 8008fd6:	0003      	movs	r3, r0
 8008fd8:	617b      	str	r3, [r7, #20]
        break;
 8008fda:	e0df      	b.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008fdc:	4b75      	ldr	r3, [pc, #468]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fe0:	2202      	movs	r2, #2
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d108      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	2380      	movs	r3, #128	; 0x80
 8008fec:	02db      	lsls	r3, r3, #11
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d103      	bne.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 8008ff2:	23fa      	movs	r3, #250	; 0xfa
 8008ff4:	01db      	lsls	r3, r3, #7
 8008ff6:	617b      	str	r3, [r7, #20]
 8008ff8:	e021      	b.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008ffa:	4b6e      	ldr	r3, [pc, #440]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	2380      	movs	r3, #128	; 0x80
 8009000:	00db      	lsls	r3, r3, #3
 8009002:	401a      	ands	r2, r3
 8009004:	2380      	movs	r3, #128	; 0x80
 8009006:	00db      	lsls	r3, r3, #3
 8009008:	429a      	cmp	r2, r3
 800900a:	d107      	bne.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	2380      	movs	r3, #128	; 0x80
 8009010:	031b      	lsls	r3, r3, #12
 8009012:	429a      	cmp	r2, r3
 8009014:	d102      	bne.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 8009016:	4b68      	ldr	r3, [pc, #416]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8009018:	617b      	str	r3, [r7, #20]
 800901a:	e010      	b.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800901c:	4b65      	ldr	r3, [pc, #404]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800901e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009020:	2202      	movs	r2, #2
 8009022:	4013      	ands	r3, r2
 8009024:	2b02      	cmp	r3, #2
 8009026:	d000      	beq.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009028:	e0b8      	b.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	23c0      	movs	r3, #192	; 0xc0
 800902e:	031b      	lsls	r3, r3, #12
 8009030:	429a      	cmp	r2, r3
 8009032:	d000      	beq.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009034:	e0b2      	b.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 8009036:	2380      	movs	r3, #128	; 0x80
 8009038:	021b      	lsls	r3, r3, #8
 800903a:	617b      	str	r3, [r7, #20]
        break;
 800903c:	e0ae      	b.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800903e:	e0ad      	b.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009040:	4b5c      	ldr	r3, [pc, #368]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009042:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009044:	23c0      	movs	r3, #192	; 0xc0
 8009046:	039b      	lsls	r3, r3, #14
 8009048:	4013      	ands	r3, r2
 800904a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d104      	bne.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009052:	f7ff fb9f 	bl	8008794 <HAL_RCC_GetPCLK1Freq>
 8009056:	0003      	movs	r3, r0
 8009058:	617b      	str	r3, [r7, #20]
        break;
 800905a:	e0a1      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800905c:	4b55      	ldr	r3, [pc, #340]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800905e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009060:	2202      	movs	r2, #2
 8009062:	4013      	ands	r3, r2
 8009064:	2b02      	cmp	r3, #2
 8009066:	d108      	bne.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	2380      	movs	r3, #128	; 0x80
 800906c:	035b      	lsls	r3, r3, #13
 800906e:	429a      	cmp	r2, r3
 8009070:	d103      	bne.n	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 8009072:	23fa      	movs	r3, #250	; 0xfa
 8009074:	01db      	lsls	r3, r3, #7
 8009076:	617b      	str	r3, [r7, #20]
 8009078:	e021      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800907a:	4b4e      	ldr	r3, [pc, #312]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	2380      	movs	r3, #128	; 0x80
 8009080:	00db      	lsls	r3, r3, #3
 8009082:	401a      	ands	r2, r3
 8009084:	2380      	movs	r3, #128	; 0x80
 8009086:	00db      	lsls	r3, r3, #3
 8009088:	429a      	cmp	r2, r3
 800908a:	d107      	bne.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	2380      	movs	r3, #128	; 0x80
 8009090:	039b      	lsls	r3, r3, #14
 8009092:	429a      	cmp	r2, r3
 8009094:	d102      	bne.n	800909c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 8009096:	4b48      	ldr	r3, [pc, #288]	; (80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8009098:	617b      	str	r3, [r7, #20]
 800909a:	e010      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800909c:	4b45      	ldr	r3, [pc, #276]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800909e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090a0:	2202      	movs	r2, #2
 80090a2:	4013      	ands	r3, r2
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d000      	beq.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80090a8:	e07a      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	23c0      	movs	r3, #192	; 0xc0
 80090ae:	039b      	lsls	r3, r3, #14
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d000      	beq.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 80090b4:	e074      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 80090b6:	2380      	movs	r3, #128	; 0x80
 80090b8:	021b      	lsls	r3, r3, #8
 80090ba:	617b      	str	r3, [r7, #20]
        break;
 80090bc:	e070      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80090be:	e06f      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80090c0:	4b3c      	ldr	r3, [pc, #240]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090c4:	2380      	movs	r3, #128	; 0x80
 80090c6:	03db      	lsls	r3, r3, #15
 80090c8:	4013      	ands	r3, r2
 80090ca:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	2380      	movs	r3, #128	; 0x80
 80090d0:	03db      	lsls	r3, r3, #15
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d11b      	bne.n	800910e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80090d6:	4b37      	ldr	r3, [pc, #220]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090d8:	68da      	ldr	r2, [r3, #12]
 80090da:	2380      	movs	r3, #128	; 0x80
 80090dc:	045b      	lsls	r3, r3, #17
 80090de:	4013      	ands	r3, r2
 80090e0:	d060      	beq.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80090e2:	4b34      	ldr	r3, [pc, #208]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	0a1b      	lsrs	r3, r3, #8
 80090e8:	227f      	movs	r2, #127	; 0x7f
 80090ea:	4013      	ands	r3, r2
 80090ec:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	435a      	muls	r2, r3
 80090f4:	4b2f      	ldr	r3, [pc, #188]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	0e5b      	lsrs	r3, r3, #25
 80090fa:	2107      	movs	r1, #7
 80090fc:	400b      	ands	r3, r1
 80090fe:	3301      	adds	r3, #1
 8009100:	0019      	movs	r1, r3
 8009102:	0010      	movs	r0, r2
 8009104:	f7f6 fffe 	bl	8000104 <__udivsi3>
 8009108:	0003      	movs	r3, r0
 800910a:	617b      	str	r3, [r7, #20]
        break;
 800910c:	e04a      	b.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d147      	bne.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009114:	f7ff fb3e 	bl	8008794 <HAL_RCC_GetPCLK1Freq>
 8009118:	0003      	movs	r3, r0
 800911a:	617b      	str	r3, [r7, #20]
        break;
 800911c:	e042      	b.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 800911e:	4b25      	ldr	r3, [pc, #148]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009122:	2380      	movs	r3, #128	; 0x80
 8009124:	045b      	lsls	r3, r3, #17
 8009126:	4013      	ands	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	2380      	movs	r3, #128	; 0x80
 800912e:	045b      	lsls	r3, r3, #17
 8009130:	429a      	cmp	r2, r3
 8009132:	d11b      	bne.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8009134:	4b1f      	ldr	r3, [pc, #124]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009136:	68da      	ldr	r2, [r3, #12]
 8009138:	2380      	movs	r3, #128	; 0x80
 800913a:	045b      	lsls	r3, r3, #17
 800913c:	4013      	ands	r3, r2
 800913e:	d033      	beq.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009140:	4b1c      	ldr	r3, [pc, #112]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	0a1b      	lsrs	r3, r3, #8
 8009146:	227f      	movs	r2, #127	; 0x7f
 8009148:	4013      	ands	r3, r2
 800914a:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	435a      	muls	r2, r3
 8009152:	4b18      	ldr	r3, [pc, #96]	; (80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	0e5b      	lsrs	r3, r3, #25
 8009158:	2107      	movs	r1, #7
 800915a:	400b      	ands	r3, r1
 800915c:	3301      	adds	r3, #1
 800915e:	0019      	movs	r1, r3
 8009160:	0010      	movs	r0, r2
 8009162:	f7f6 ffcf 	bl	8000104 <__udivsi3>
 8009166:	0003      	movs	r3, r0
 8009168:	617b      	str	r3, [r7, #20]
        break;
 800916a:	e01d      	b.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d11a      	bne.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009172:	f7ff fb0f 	bl	8008794 <HAL_RCC_GetPCLK1Freq>
 8009176:	0003      	movs	r3, r0
 8009178:	617b      	str	r3, [r7, #20]
        break;
 800917a:	e015      	b.n	80091a8 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 800917c:	46c0      	nop			; (mov r8, r8)
 800917e:	e014      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009180:	46c0      	nop			; (mov r8, r8)
 8009182:	e012      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009184:	46c0      	nop			; (mov r8, r8)
 8009186:	e010      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009188:	46c0      	nop			; (mov r8, r8)
 800918a:	e00e      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800918c:	46c0      	nop			; (mov r8, r8)
 800918e:	e00c      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009190:	46c0      	nop			; (mov r8, r8)
 8009192:	e00a      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009194:	46c0      	nop			; (mov r8, r8)
 8009196:	e008      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8009198:	46c0      	nop			; (mov r8, r8)
 800919a:	e006      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800919c:	46c0      	nop			; (mov r8, r8)
 800919e:	e004      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091a0:	46c0      	nop			; (mov r8, r8)
 80091a2:	e002      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091a4:	46c0      	nop			; (mov r8, r8)
 80091a6:	e000      	b.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091a8:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 80091aa:	697b      	ldr	r3, [r7, #20]
}
 80091ac:	0018      	movs	r0, r3
 80091ae:	46bd      	mov	sp, r7
 80091b0:	b006      	add	sp, #24
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	40021000 	.word	0x40021000
 80091b8:	00f42400 	.word	0x00f42400
 80091bc:	0000bb80 	.word	0x0000bb80

080091c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e0a8      	b.n	8009324 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d109      	bne.n	80091ee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	2382      	movs	r3, #130	; 0x82
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d009      	beq.n	80091fa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	61da      	str	r2, [r3, #28]
 80091ec:	e005      	b.n	80091fa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	225d      	movs	r2, #93	; 0x5d
 8009204:	5c9b      	ldrb	r3, [r3, r2]
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b00      	cmp	r3, #0
 800920a:	d107      	bne.n	800921c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	225c      	movs	r2, #92	; 0x5c
 8009210:	2100      	movs	r1, #0
 8009212:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	0018      	movs	r0, r3
 8009218:	f7fb fe10 	bl	8004e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	225d      	movs	r2, #93	; 0x5d
 8009220:	2102      	movs	r1, #2
 8009222:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2140      	movs	r1, #64	; 0x40
 8009230:	438a      	bics	r2, r1
 8009232:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68da      	ldr	r2, [r3, #12]
 8009238:	23e0      	movs	r3, #224	; 0xe0
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	429a      	cmp	r2, r3
 800923e:	d902      	bls.n	8009246 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009240:	2300      	movs	r3, #0
 8009242:	60fb      	str	r3, [r7, #12]
 8009244:	e002      	b.n	800924c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009246:	2380      	movs	r3, #128	; 0x80
 8009248:	015b      	lsls	r3, r3, #5
 800924a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	68da      	ldr	r2, [r3, #12]
 8009250:	23f0      	movs	r3, #240	; 0xf0
 8009252:	011b      	lsls	r3, r3, #4
 8009254:	429a      	cmp	r2, r3
 8009256:	d008      	beq.n	800926a <HAL_SPI_Init+0xaa>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	68da      	ldr	r2, [r3, #12]
 800925c:	23e0      	movs	r3, #224	; 0xe0
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	429a      	cmp	r2, r3
 8009262:	d002      	beq.n	800926a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	2382      	movs	r3, #130	; 0x82
 8009270:	005b      	lsls	r3, r3, #1
 8009272:	401a      	ands	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6899      	ldr	r1, [r3, #8]
 8009278:	2384      	movs	r3, #132	; 0x84
 800927a:	021b      	lsls	r3, r3, #8
 800927c:	400b      	ands	r3, r1
 800927e:	431a      	orrs	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	2102      	movs	r1, #2
 8009286:	400b      	ands	r3, r1
 8009288:	431a      	orrs	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	2101      	movs	r1, #1
 8009290:	400b      	ands	r3, r1
 8009292:	431a      	orrs	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6999      	ldr	r1, [r3, #24]
 8009298:	2380      	movs	r3, #128	; 0x80
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	400b      	ands	r3, r1
 800929e:	431a      	orrs	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	2138      	movs	r1, #56	; 0x38
 80092a6:	400b      	ands	r3, r1
 80092a8:	431a      	orrs	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	2180      	movs	r1, #128	; 0x80
 80092b0:	400b      	ands	r3, r1
 80092b2:	431a      	orrs	r2, r3
 80092b4:	0011      	movs	r1, r2
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092ba:	2380      	movs	r3, #128	; 0x80
 80092bc:	019b      	lsls	r3, r3, #6
 80092be:	401a      	ands	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	430a      	orrs	r2, r1
 80092c6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	0c1b      	lsrs	r3, r3, #16
 80092ce:	2204      	movs	r2, #4
 80092d0:	401a      	ands	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	2110      	movs	r1, #16
 80092d8:	400b      	ands	r3, r1
 80092da:	431a      	orrs	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e0:	2108      	movs	r1, #8
 80092e2:	400b      	ands	r3, r1
 80092e4:	431a      	orrs	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	68d9      	ldr	r1, [r3, #12]
 80092ea:	23f0      	movs	r3, #240	; 0xf0
 80092ec:	011b      	lsls	r3, r3, #4
 80092ee:	400b      	ands	r3, r1
 80092f0:	431a      	orrs	r2, r3
 80092f2:	0011      	movs	r1, r2
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	2380      	movs	r3, #128	; 0x80
 80092f8:	015b      	lsls	r3, r3, #5
 80092fa:	401a      	ands	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	430a      	orrs	r2, r1
 8009302:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	69da      	ldr	r2, [r3, #28]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4907      	ldr	r1, [pc, #28]	; (800932c <HAL_SPI_Init+0x16c>)
 8009310:	400a      	ands	r2, r1
 8009312:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	225d      	movs	r2, #93	; 0x5d
 800931e:	2101      	movs	r1, #1
 8009320:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	0018      	movs	r0, r3
 8009326:	46bd      	mov	sp, r7
 8009328:	b004      	add	sp, #16
 800932a:	bd80      	pop	{r7, pc}
 800932c:	fffff7ff 	.word	0xfffff7ff

08009330 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b088      	sub	sp, #32
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	603b      	str	r3, [r7, #0]
 800933c:	1dbb      	adds	r3, r7, #6
 800933e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009340:	231f      	movs	r3, #31
 8009342:	18fb      	adds	r3, r7, r3
 8009344:	2200      	movs	r2, #0
 8009346:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	225c      	movs	r2, #92	; 0x5c
 800934c:	5c9b      	ldrb	r3, [r3, r2]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d101      	bne.n	8009356 <HAL_SPI_Transmit+0x26>
 8009352:	2302      	movs	r3, #2
 8009354:	e140      	b.n	80095d8 <HAL_SPI_Transmit+0x2a8>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	225c      	movs	r2, #92	; 0x5c
 800935a:	2101      	movs	r1, #1
 800935c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800935e:	f7fc f873 	bl	8005448 <HAL_GetTick>
 8009362:	0003      	movs	r3, r0
 8009364:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009366:	2316      	movs	r3, #22
 8009368:	18fb      	adds	r3, r7, r3
 800936a:	1dba      	adds	r2, r7, #6
 800936c:	8812      	ldrh	r2, [r2, #0]
 800936e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	225d      	movs	r2, #93	; 0x5d
 8009374:	5c9b      	ldrb	r3, [r3, r2]
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b01      	cmp	r3, #1
 800937a:	d004      	beq.n	8009386 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800937c:	231f      	movs	r3, #31
 800937e:	18fb      	adds	r3, r7, r3
 8009380:	2202      	movs	r2, #2
 8009382:	701a      	strb	r2, [r3, #0]
    goto error;
 8009384:	e11d      	b.n	80095c2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d003      	beq.n	8009394 <HAL_SPI_Transmit+0x64>
 800938c:	1dbb      	adds	r3, r7, #6
 800938e:	881b      	ldrh	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d104      	bne.n	800939e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009394:	231f      	movs	r3, #31
 8009396:	18fb      	adds	r3, r7, r3
 8009398:	2201      	movs	r2, #1
 800939a:	701a      	strb	r2, [r3, #0]
    goto error;
 800939c:	e111      	b.n	80095c2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	225d      	movs	r2, #93	; 0x5d
 80093a2:	2103      	movs	r1, #3
 80093a4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	1dba      	adds	r2, r7, #6
 80093b6:	8812      	ldrh	r2, [r2, #0]
 80093b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	1dba      	adds	r2, r7, #6
 80093be:	8812      	ldrh	r2, [r2, #0]
 80093c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2244      	movs	r2, #68	; 0x44
 80093cc:	2100      	movs	r1, #0
 80093ce:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2246      	movs	r2, #70	; 0x46
 80093d4:	2100      	movs	r1, #0
 80093d6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	2380      	movs	r3, #128	; 0x80
 80093ea:	021b      	lsls	r3, r3, #8
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d110      	bne.n	8009412 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2140      	movs	r1, #64	; 0x40
 80093fc:	438a      	bics	r2, r1
 80093fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2180      	movs	r1, #128	; 0x80
 800940c:	01c9      	lsls	r1, r1, #7
 800940e:	430a      	orrs	r2, r1
 8009410:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2240      	movs	r2, #64	; 0x40
 800941a:	4013      	ands	r3, r2
 800941c:	2b40      	cmp	r3, #64	; 0x40
 800941e:	d007      	beq.n	8009430 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2140      	movs	r1, #64	; 0x40
 800942c:	430a      	orrs	r2, r1
 800942e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	68da      	ldr	r2, [r3, #12]
 8009434:	23e0      	movs	r3, #224	; 0xe0
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	429a      	cmp	r2, r3
 800943a:	d94e      	bls.n	80094da <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d004      	beq.n	800944e <HAL_SPI_Transmit+0x11e>
 8009444:	2316      	movs	r3, #22
 8009446:	18fb      	adds	r3, r7, r3
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d13f      	bne.n	80094ce <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009452:	881a      	ldrh	r2, [r3, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945e:	1c9a      	adds	r2, r3, #2
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009468:	b29b      	uxth	r3, r3
 800946a:	3b01      	subs	r3, #1
 800946c:	b29a      	uxth	r2, r3
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009472:	e02c      	b.n	80094ce <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	2202      	movs	r2, #2
 800947c:	4013      	ands	r3, r2
 800947e:	2b02      	cmp	r3, #2
 8009480:	d112      	bne.n	80094a8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009486:	881a      	ldrh	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009492:	1c9a      	adds	r2, r3, #2
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800949c:	b29b      	uxth	r3, r3
 800949e:	3b01      	subs	r3, #1
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094a6:	e012      	b.n	80094ce <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094a8:	f7fb ffce 	bl	8005448 <HAL_GetTick>
 80094ac:	0002      	movs	r2, r0
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d802      	bhi.n	80094be <HAL_SPI_Transmit+0x18e>
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	3301      	adds	r3, #1
 80094bc:	d102      	bne.n	80094c4 <HAL_SPI_Transmit+0x194>
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d104      	bne.n	80094ce <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80094c4:	231f      	movs	r3, #31
 80094c6:	18fb      	adds	r3, r7, r3
 80094c8:	2203      	movs	r2, #3
 80094ca:	701a      	strb	r2, [r3, #0]
          goto error;
 80094cc:	e079      	b.n	80095c2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1cd      	bne.n	8009474 <HAL_SPI_Transmit+0x144>
 80094d8:	e04f      	b.n	800957a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d004      	beq.n	80094ec <HAL_SPI_Transmit+0x1bc>
 80094e2:	2316      	movs	r3, #22
 80094e4:	18fb      	adds	r3, r7, r3
 80094e6:	881b      	ldrh	r3, [r3, #0]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d141      	bne.n	8009570 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	330c      	adds	r3, #12
 80094f6:	7812      	ldrb	r2, [r2, #0]
 80094f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009508:	b29b      	uxth	r3, r3
 800950a:	3b01      	subs	r3, #1
 800950c:	b29a      	uxth	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8009512:	e02d      	b.n	8009570 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	2202      	movs	r2, #2
 800951c:	4013      	ands	r3, r2
 800951e:	2b02      	cmp	r3, #2
 8009520:	d113      	bne.n	800954a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	330c      	adds	r3, #12
 800952c:	7812      	ldrb	r2, [r2, #0]
 800952e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800953e:	b29b      	uxth	r3, r3
 8009540:	3b01      	subs	r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009548:	e012      	b.n	8009570 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800954a:	f7fb ff7d 	bl	8005448 <HAL_GetTick>
 800954e:	0002      	movs	r2, r0
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	683a      	ldr	r2, [r7, #0]
 8009556:	429a      	cmp	r2, r3
 8009558:	d802      	bhi.n	8009560 <HAL_SPI_Transmit+0x230>
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	3301      	adds	r3, #1
 800955e:	d102      	bne.n	8009566 <HAL_SPI_Transmit+0x236>
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d104      	bne.n	8009570 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8009566:	231f      	movs	r3, #31
 8009568:	18fb      	adds	r3, r7, r3
 800956a:	2203      	movs	r2, #3
 800956c:	701a      	strb	r2, [r3, #0]
          goto error;
 800956e:	e028      	b.n	80095c2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009574:	b29b      	uxth	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1cc      	bne.n	8009514 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800957a:	69ba      	ldr	r2, [r7, #24]
 800957c:	6839      	ldr	r1, [r7, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	0018      	movs	r0, r3
 8009582:	f000 fdf5 	bl	800a170 <SPI_EndRxTxTransaction>
 8009586:	1e03      	subs	r3, r0, #0
 8009588:	d002      	beq.n	8009590 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2220      	movs	r2, #32
 800958e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10a      	bne.n	80095ae <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009598:	2300      	movs	r3, #0
 800959a:	613b      	str	r3, [r7, #16]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	613b      	str	r3, [r7, #16]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	613b      	str	r3, [r7, #16]
 80095ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d004      	beq.n	80095c0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80095b6:	231f      	movs	r3, #31
 80095b8:	18fb      	adds	r3, r7, r3
 80095ba:	2201      	movs	r2, #1
 80095bc:	701a      	strb	r2, [r3, #0]
 80095be:	e000      	b.n	80095c2 <HAL_SPI_Transmit+0x292>
  }

error:
 80095c0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	225d      	movs	r2, #93	; 0x5d
 80095c6:	2101      	movs	r1, #1
 80095c8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	225c      	movs	r2, #92	; 0x5c
 80095ce:	2100      	movs	r1, #0
 80095d0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80095d2:	231f      	movs	r3, #31
 80095d4:	18fb      	adds	r3, r7, r3
 80095d6:	781b      	ldrb	r3, [r3, #0]
}
 80095d8:	0018      	movs	r0, r3
 80095da:	46bd      	mov	sp, r7
 80095dc:	b008      	add	sp, #32
 80095de:	bd80      	pop	{r7, pc}

080095e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095e0:	b590      	push	{r4, r7, lr}
 80095e2:	b089      	sub	sp, #36	; 0x24
 80095e4:	af02      	add	r7, sp, #8
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	603b      	str	r3, [r7, #0]
 80095ec:	1dbb      	adds	r3, r7, #6
 80095ee:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095f0:	2317      	movs	r3, #23
 80095f2:	18fb      	adds	r3, r7, r3
 80095f4:	2200      	movs	r2, #0
 80095f6:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	2382      	movs	r3, #130	; 0x82
 80095fe:	005b      	lsls	r3, r3, #1
 8009600:	429a      	cmp	r2, r3
 8009602:	d113      	bne.n	800962c <HAL_SPI_Receive+0x4c>
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10f      	bne.n	800962c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	225d      	movs	r2, #93	; 0x5d
 8009610:	2104      	movs	r1, #4
 8009612:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009614:	1dbb      	adds	r3, r7, #6
 8009616:	881c      	ldrh	r4, [r3, #0]
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	68b9      	ldr	r1, [r7, #8]
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	0023      	movs	r3, r4
 8009624:	f000 f928 	bl	8009878 <HAL_SPI_TransmitReceive>
 8009628:	0003      	movs	r3, r0
 800962a:	e11c      	b.n	8009866 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	225c      	movs	r2, #92	; 0x5c
 8009630:	5c9b      	ldrb	r3, [r3, r2]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d101      	bne.n	800963a <HAL_SPI_Receive+0x5a>
 8009636:	2302      	movs	r3, #2
 8009638:	e115      	b.n	8009866 <HAL_SPI_Receive+0x286>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	225c      	movs	r2, #92	; 0x5c
 800963e:	2101      	movs	r1, #1
 8009640:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009642:	f7fb ff01 	bl	8005448 <HAL_GetTick>
 8009646:	0003      	movs	r3, r0
 8009648:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	225d      	movs	r2, #93	; 0x5d
 800964e:	5c9b      	ldrb	r3, [r3, r2]
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b01      	cmp	r3, #1
 8009654:	d004      	beq.n	8009660 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8009656:	2317      	movs	r3, #23
 8009658:	18fb      	adds	r3, r7, r3
 800965a:	2202      	movs	r2, #2
 800965c:	701a      	strb	r2, [r3, #0]
    goto error;
 800965e:	e0f7      	b.n	8009850 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <HAL_SPI_Receive+0x8e>
 8009666:	1dbb      	adds	r3, r7, #6
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d104      	bne.n	8009678 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800966e:	2317      	movs	r3, #23
 8009670:	18fb      	adds	r3, r7, r3
 8009672:	2201      	movs	r2, #1
 8009674:	701a      	strb	r2, [r3, #0]
    goto error;
 8009676:	e0eb      	b.n	8009850 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	225d      	movs	r2, #93	; 0x5d
 800967c:	2104      	movs	r1, #4
 800967e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	1dba      	adds	r2, r7, #6
 8009690:	2144      	movs	r1, #68	; 0x44
 8009692:	8812      	ldrh	r2, [r2, #0]
 8009694:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	1dba      	adds	r2, r7, #6
 800969a:	2146      	movs	r1, #70	; 0x46
 800969c:	8812      	ldrh	r2, [r2, #0]
 800969e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	23e0      	movs	r3, #224	; 0xe0
 80096c4:	00db      	lsls	r3, r3, #3
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d908      	bls.n	80096dc <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4966      	ldr	r1, [pc, #408]	; (8009870 <HAL_SPI_Receive+0x290>)
 80096d6:	400a      	ands	r2, r1
 80096d8:	605a      	str	r2, [r3, #4]
 80096da:	e008      	b.n	80096ee <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	685a      	ldr	r2, [r3, #4]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2180      	movs	r1, #128	; 0x80
 80096e8:	0149      	lsls	r1, r1, #5
 80096ea:	430a      	orrs	r2, r1
 80096ec:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	689a      	ldr	r2, [r3, #8]
 80096f2:	2380      	movs	r3, #128	; 0x80
 80096f4:	021b      	lsls	r3, r3, #8
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d10f      	bne.n	800971a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2140      	movs	r1, #64	; 0x40
 8009706:	438a      	bics	r2, r1
 8009708:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4957      	ldr	r1, [pc, #348]	; (8009874 <HAL_SPI_Receive+0x294>)
 8009716:	400a      	ands	r2, r1
 8009718:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2240      	movs	r2, #64	; 0x40
 8009722:	4013      	ands	r3, r2
 8009724:	2b40      	cmp	r3, #64	; 0x40
 8009726:	d007      	beq.n	8009738 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2140      	movs	r1, #64	; 0x40
 8009734:	430a      	orrs	r2, r1
 8009736:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	68da      	ldr	r2, [r3, #12]
 800973c:	23e0      	movs	r3, #224	; 0xe0
 800973e:	00db      	lsls	r3, r3, #3
 8009740:	429a      	cmp	r2, r3
 8009742:	d900      	bls.n	8009746 <HAL_SPI_Receive+0x166>
 8009744:	e069      	b.n	800981a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009746:	e031      	b.n	80097ac <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	2201      	movs	r2, #1
 8009750:	4013      	ands	r3, r2
 8009752:	2b01      	cmp	r3, #1
 8009754:	d117      	bne.n	8009786 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	330c      	adds	r3, #12
 800975c:	001a      	movs	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009762:	7812      	ldrb	r2, [r2, #0]
 8009764:	b2d2      	uxtb	r2, r2
 8009766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2246      	movs	r2, #70	; 0x46
 8009776:	5a9b      	ldrh	r3, [r3, r2]
 8009778:	b29b      	uxth	r3, r3
 800977a:	3b01      	subs	r3, #1
 800977c:	b299      	uxth	r1, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2246      	movs	r2, #70	; 0x46
 8009782:	5299      	strh	r1, [r3, r2]
 8009784:	e012      	b.n	80097ac <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009786:	f7fb fe5f 	bl	8005448 <HAL_GetTick>
 800978a:	0002      	movs	r2, r0
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	429a      	cmp	r2, r3
 8009794:	d802      	bhi.n	800979c <HAL_SPI_Receive+0x1bc>
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	3301      	adds	r3, #1
 800979a:	d102      	bne.n	80097a2 <HAL_SPI_Receive+0x1c2>
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d104      	bne.n	80097ac <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80097a2:	2317      	movs	r3, #23
 80097a4:	18fb      	adds	r3, r7, r3
 80097a6:	2203      	movs	r2, #3
 80097a8:	701a      	strb	r2, [r3, #0]
          goto error;
 80097aa:	e051      	b.n	8009850 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2246      	movs	r2, #70	; 0x46
 80097b0:	5a9b      	ldrh	r3, [r3, r2]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1c7      	bne.n	8009748 <HAL_SPI_Receive+0x168>
 80097b8:	e035      	b.n	8009826 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	2201      	movs	r2, #1
 80097c2:	4013      	ands	r3, r2
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d115      	bne.n	80097f4 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68da      	ldr	r2, [r3, #12]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d2:	b292      	uxth	r2, r2
 80097d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097da:	1c9a      	adds	r2, r3, #2
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2246      	movs	r2, #70	; 0x46
 80097e4:	5a9b      	ldrh	r3, [r3, r2]
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	3b01      	subs	r3, #1
 80097ea:	b299      	uxth	r1, r3
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2246      	movs	r2, #70	; 0x46
 80097f0:	5299      	strh	r1, [r3, r2]
 80097f2:	e012      	b.n	800981a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097f4:	f7fb fe28 	bl	8005448 <HAL_GetTick>
 80097f8:	0002      	movs	r2, r0
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	683a      	ldr	r2, [r7, #0]
 8009800:	429a      	cmp	r2, r3
 8009802:	d802      	bhi.n	800980a <HAL_SPI_Receive+0x22a>
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	3301      	adds	r3, #1
 8009808:	d102      	bne.n	8009810 <HAL_SPI_Receive+0x230>
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d104      	bne.n	800981a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8009810:	2317      	movs	r3, #23
 8009812:	18fb      	adds	r3, r7, r3
 8009814:	2203      	movs	r2, #3
 8009816:	701a      	strb	r2, [r3, #0]
          goto error;
 8009818:	e01a      	b.n	8009850 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2246      	movs	r2, #70	; 0x46
 800981e:	5a9b      	ldrh	r3, [r3, r2]
 8009820:	b29b      	uxth	r3, r3
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1c9      	bne.n	80097ba <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009826:	693a      	ldr	r2, [r7, #16]
 8009828:	6839      	ldr	r1, [r7, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	0018      	movs	r0, r3
 800982e:	f000 fc41 	bl	800a0b4 <SPI_EndRxTransaction>
 8009832:	1e03      	subs	r3, r0, #0
 8009834:	d002      	beq.n	800983c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2220      	movs	r2, #32
 800983a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009840:	2b00      	cmp	r3, #0
 8009842:	d004      	beq.n	800984e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8009844:	2317      	movs	r3, #23
 8009846:	18fb      	adds	r3, r7, r3
 8009848:	2201      	movs	r2, #1
 800984a:	701a      	strb	r2, [r3, #0]
 800984c:	e000      	b.n	8009850 <HAL_SPI_Receive+0x270>
  }

error :
 800984e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	225d      	movs	r2, #93	; 0x5d
 8009854:	2101      	movs	r1, #1
 8009856:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	225c      	movs	r2, #92	; 0x5c
 800985c:	2100      	movs	r1, #0
 800985e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009860:	2317      	movs	r3, #23
 8009862:	18fb      	adds	r3, r7, r3
 8009864:	781b      	ldrb	r3, [r3, #0]
}
 8009866:	0018      	movs	r0, r3
 8009868:	46bd      	mov	sp, r7
 800986a:	b007      	add	sp, #28
 800986c:	bd90      	pop	{r4, r7, pc}
 800986e:	46c0      	nop			; (mov r8, r8)
 8009870:	ffffefff 	.word	0xffffefff
 8009874:	ffffbfff 	.word	0xffffbfff

08009878 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08a      	sub	sp, #40	; 0x28
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
 8009884:	001a      	movs	r2, r3
 8009886:	1cbb      	adds	r3, r7, #2
 8009888:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800988a:	2301      	movs	r3, #1
 800988c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800988e:	2323      	movs	r3, #35	; 0x23
 8009890:	18fb      	adds	r3, r7, r3
 8009892:	2200      	movs	r2, #0
 8009894:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	225c      	movs	r2, #92	; 0x5c
 800989a:	5c9b      	ldrb	r3, [r3, r2]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d101      	bne.n	80098a4 <HAL_SPI_TransmitReceive+0x2c>
 80098a0:	2302      	movs	r3, #2
 80098a2:	e1b5      	b.n	8009c10 <HAL_SPI_TransmitReceive+0x398>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	225c      	movs	r2, #92	; 0x5c
 80098a8:	2101      	movs	r1, #1
 80098aa:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098ac:	f7fb fdcc 	bl	8005448 <HAL_GetTick>
 80098b0:	0003      	movs	r3, r0
 80098b2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098b4:	201b      	movs	r0, #27
 80098b6:	183b      	adds	r3, r7, r0
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	215d      	movs	r1, #93	; 0x5d
 80098bc:	5c52      	ldrb	r2, [r2, r1]
 80098be:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80098c6:	2312      	movs	r3, #18
 80098c8:	18fb      	adds	r3, r7, r3
 80098ca:	1cba      	adds	r2, r7, #2
 80098cc:	8812      	ldrh	r2, [r2, #0]
 80098ce:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80098d0:	183b      	adds	r3, r7, r0
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d011      	beq.n	80098fc <HAL_SPI_TransmitReceive+0x84>
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	2382      	movs	r3, #130	; 0x82
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	429a      	cmp	r2, r3
 80098e0:	d107      	bne.n	80098f2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d103      	bne.n	80098f2 <HAL_SPI_TransmitReceive+0x7a>
 80098ea:	183b      	adds	r3, r7, r0
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	d004      	beq.n	80098fc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80098f2:	2323      	movs	r3, #35	; 0x23
 80098f4:	18fb      	adds	r3, r7, r3
 80098f6:	2202      	movs	r2, #2
 80098f8:	701a      	strb	r2, [r3, #0]
    goto error;
 80098fa:	e17e      	b.n	8009bfa <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d006      	beq.n	8009910 <HAL_SPI_TransmitReceive+0x98>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <HAL_SPI_TransmitReceive+0x98>
 8009908:	1cbb      	adds	r3, r7, #2
 800990a:	881b      	ldrh	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d104      	bne.n	800991a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8009910:	2323      	movs	r3, #35	; 0x23
 8009912:	18fb      	adds	r3, r7, r3
 8009914:	2201      	movs	r2, #1
 8009916:	701a      	strb	r2, [r3, #0]
    goto error;
 8009918:	e16f      	b.n	8009bfa <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	225d      	movs	r2, #93	; 0x5d
 800991e:	5c9b      	ldrb	r3, [r3, r2]
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b04      	cmp	r3, #4
 8009924:	d003      	beq.n	800992e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	225d      	movs	r2, #93	; 0x5d
 800992a:	2105      	movs	r1, #5
 800992c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	1cba      	adds	r2, r7, #2
 800993e:	2146      	movs	r1, #70	; 0x46
 8009940:	8812      	ldrh	r2, [r2, #0]
 8009942:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	1cba      	adds	r2, r7, #2
 8009948:	2144      	movs	r1, #68	; 0x44
 800994a:	8812      	ldrh	r2, [r2, #0]
 800994c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	1cba      	adds	r2, r7, #2
 8009958:	8812      	ldrh	r2, [r2, #0]
 800995a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	1cba      	adds	r2, r7, #2
 8009960:	8812      	ldrh	r2, [r2, #0]
 8009962:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	68da      	ldr	r2, [r3, #12]
 8009974:	23e0      	movs	r3, #224	; 0xe0
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	429a      	cmp	r2, r3
 800997a:	d908      	bls.n	800998e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	49a4      	ldr	r1, [pc, #656]	; (8009c18 <HAL_SPI_TransmitReceive+0x3a0>)
 8009988:	400a      	ands	r2, r1
 800998a:	605a      	str	r2, [r3, #4]
 800998c:	e008      	b.n	80099a0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	685a      	ldr	r2, [r3, #4]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2180      	movs	r1, #128	; 0x80
 800999a:	0149      	lsls	r1, r1, #5
 800999c:	430a      	orrs	r2, r1
 800999e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2240      	movs	r2, #64	; 0x40
 80099a8:	4013      	ands	r3, r2
 80099aa:	2b40      	cmp	r3, #64	; 0x40
 80099ac:	d007      	beq.n	80099be <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2140      	movs	r1, #64	; 0x40
 80099ba:	430a      	orrs	r2, r1
 80099bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	23e0      	movs	r3, #224	; 0xe0
 80099c4:	00db      	lsls	r3, r3, #3
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d800      	bhi.n	80099cc <HAL_SPI_TransmitReceive+0x154>
 80099ca:	e07f      	b.n	8009acc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d005      	beq.n	80099e0 <HAL_SPI_TransmitReceive+0x168>
 80099d4:	2312      	movs	r3, #18
 80099d6:	18fb      	adds	r3, r7, r3
 80099d8:	881b      	ldrh	r3, [r3, #0]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d000      	beq.n	80099e0 <HAL_SPI_TransmitReceive+0x168>
 80099de:	e069      	b.n	8009ab4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e4:	881a      	ldrh	r2, [r3, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f0:	1c9a      	adds	r2, r3, #2
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	3b01      	subs	r3, #1
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a04:	e056      	b.n	8009ab4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	2202      	movs	r2, #2
 8009a0e:	4013      	ands	r3, r2
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d11b      	bne.n	8009a4c <HAL_SPI_TransmitReceive+0x1d4>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d016      	beq.n	8009a4c <HAL_SPI_TransmitReceive+0x1d4>
 8009a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d113      	bne.n	8009a4c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a28:	881a      	ldrh	r2, [r3, #0]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a34:	1c9a      	adds	r2, r3, #2
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	3b01      	subs	r3, #1
 8009a42:	b29a      	uxth	r2, r3
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	2201      	movs	r2, #1
 8009a54:	4013      	ands	r3, r2
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d11c      	bne.n	8009a94 <HAL_SPI_TransmitReceive+0x21c>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2246      	movs	r2, #70	; 0x46
 8009a5e:	5a9b      	ldrh	r3, [r3, r2]
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d016      	beq.n	8009a94 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68da      	ldr	r2, [r3, #12]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a70:	b292      	uxth	r2, r2
 8009a72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a78:	1c9a      	adds	r2, r3, #2
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2246      	movs	r2, #70	; 0x46
 8009a82:	5a9b      	ldrh	r3, [r3, r2]
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	3b01      	subs	r3, #1
 8009a88:	b299      	uxth	r1, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2246      	movs	r2, #70	; 0x46
 8009a8e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a90:	2301      	movs	r3, #1
 8009a92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009a94:	f7fb fcd8 	bl	8005448 <HAL_GetTick>
 8009a98:	0002      	movs	r2, r0
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d807      	bhi.n	8009ab4 <HAL_SPI_TransmitReceive+0x23c>
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	d004      	beq.n	8009ab4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8009aaa:	2323      	movs	r3, #35	; 0x23
 8009aac:	18fb      	adds	r3, r7, r3
 8009aae:	2203      	movs	r2, #3
 8009ab0:	701a      	strb	r2, [r3, #0]
        goto error;
 8009ab2:	e0a2      	b.n	8009bfa <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1a3      	bne.n	8009a06 <HAL_SPI_TransmitReceive+0x18e>
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2246      	movs	r2, #70	; 0x46
 8009ac2:	5a9b      	ldrh	r3, [r3, r2]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d19d      	bne.n	8009a06 <HAL_SPI_TransmitReceive+0x18e>
 8009aca:	e085      	b.n	8009bd8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d005      	beq.n	8009ae0 <HAL_SPI_TransmitReceive+0x268>
 8009ad4:	2312      	movs	r3, #18
 8009ad6:	18fb      	adds	r3, r7, r3
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d000      	beq.n	8009ae0 <HAL_SPI_TransmitReceive+0x268>
 8009ade:	e070      	b.n	8009bc2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	330c      	adds	r3, #12
 8009aea:	7812      	ldrb	r2, [r2, #0]
 8009aec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	3b01      	subs	r3, #1
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b06:	e05c      	b.n	8009bc2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	2202      	movs	r2, #2
 8009b10:	4013      	ands	r3, r2
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d11c      	bne.n	8009b50 <HAL_SPI_TransmitReceive+0x2d8>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d017      	beq.n	8009b50 <HAL_SPI_TransmitReceive+0x2d8>
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d114      	bne.n	8009b50 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	330c      	adds	r3, #12
 8009b30:	7812      	ldrb	r2, [r2, #0]
 8009b32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	3b01      	subs	r3, #1
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	2201      	movs	r2, #1
 8009b58:	4013      	ands	r3, r2
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d11e      	bne.n	8009b9c <HAL_SPI_TransmitReceive+0x324>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2246      	movs	r2, #70	; 0x46
 8009b62:	5a9b      	ldrh	r3, [r3, r2]
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d018      	beq.n	8009b9c <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	330c      	adds	r3, #12
 8009b70:	001a      	movs	r2, r3
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b76:	7812      	ldrb	r2, [r2, #0]
 8009b78:	b2d2      	uxtb	r2, r2
 8009b7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b80:	1c5a      	adds	r2, r3, #1
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2246      	movs	r2, #70	; 0x46
 8009b8a:	5a9b      	ldrh	r3, [r3, r2]
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	b299      	uxth	r1, r3
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2246      	movs	r2, #70	; 0x46
 8009b96:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009b9c:	f7fb fc54 	bl	8005448 <HAL_GetTick>
 8009ba0:	0002      	movs	r2, r0
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d802      	bhi.n	8009bb2 <HAL_SPI_TransmitReceive+0x33a>
 8009bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bae:	3301      	adds	r3, #1
 8009bb0:	d102      	bne.n	8009bb8 <HAL_SPI_TransmitReceive+0x340>
 8009bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d104      	bne.n	8009bc2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8009bb8:	2323      	movs	r3, #35	; 0x23
 8009bba:	18fb      	adds	r3, r7, r3
 8009bbc:	2203      	movs	r2, #3
 8009bbe:	701a      	strb	r2, [r3, #0]
        goto error;
 8009bc0:	e01b      	b.n	8009bfa <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d19d      	bne.n	8009b08 <HAL_SPI_TransmitReceive+0x290>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2246      	movs	r2, #70	; 0x46
 8009bd0:	5a9b      	ldrh	r3, [r3, r2]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d197      	bne.n	8009b08 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009bd8:	69fa      	ldr	r2, [r7, #28]
 8009bda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	0018      	movs	r0, r3
 8009be0:	f000 fac6 	bl	800a170 <SPI_EndRxTxTransaction>
 8009be4:	1e03      	subs	r3, r0, #0
 8009be6:	d007      	beq.n	8009bf8 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8009be8:	2323      	movs	r3, #35	; 0x23
 8009bea:	18fb      	adds	r3, r7, r3
 8009bec:	2201      	movs	r2, #1
 8009bee:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	661a      	str	r2, [r3, #96]	; 0x60
 8009bf6:	e000      	b.n	8009bfa <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8009bf8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	225d      	movs	r2, #93	; 0x5d
 8009bfe:	2101      	movs	r1, #1
 8009c00:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	225c      	movs	r2, #92	; 0x5c
 8009c06:	2100      	movs	r1, #0
 8009c08:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009c0a:	2323      	movs	r3, #35	; 0x23
 8009c0c:	18fb      	adds	r3, r7, r3
 8009c0e:	781b      	ldrb	r3, [r3, #0]
}
 8009c10:	0018      	movs	r0, r3
 8009c12:	46bd      	mov	sp, r7
 8009c14:	b00a      	add	sp, #40	; 0x28
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	ffffefff 	.word	0xffffefff

08009c1c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b088      	sub	sp, #32
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	099b      	lsrs	r3, r3, #6
 8009c38:	001a      	movs	r2, r3
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	d10f      	bne.n	8009c60 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	2201      	movs	r2, #1
 8009c44:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009c46:	d00b      	beq.n	8009c60 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	099b      	lsrs	r3, r3, #6
 8009c4c:	001a      	movs	r2, r3
 8009c4e:	2301      	movs	r3, #1
 8009c50:	4013      	ands	r3, r2
 8009c52:	d005      	beq.n	8009c60 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	0010      	movs	r0, r2
 8009c5c:	4798      	blx	r3
    return;
 8009c5e:	e0d5      	b.n	8009e0c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	085b      	lsrs	r3, r3, #1
 8009c64:	001a      	movs	r2, r3
 8009c66:	2301      	movs	r3, #1
 8009c68:	4013      	ands	r3, r2
 8009c6a:	d00b      	beq.n	8009c84 <HAL_SPI_IRQHandler+0x68>
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	09db      	lsrs	r3, r3, #7
 8009c70:	001a      	movs	r2, r3
 8009c72:	2301      	movs	r3, #1
 8009c74:	4013      	ands	r3, r2
 8009c76:	d005      	beq.n	8009c84 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	0010      	movs	r0, r2
 8009c80:	4798      	blx	r3
    return;
 8009c82:	e0c3      	b.n	8009e0c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	095b      	lsrs	r3, r3, #5
 8009c88:	001a      	movs	r2, r3
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	d10c      	bne.n	8009caa <HAL_SPI_IRQHandler+0x8e>
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	099b      	lsrs	r3, r3, #6
 8009c94:	001a      	movs	r2, r3
 8009c96:	2301      	movs	r3, #1
 8009c98:	4013      	ands	r3, r2
 8009c9a:	d106      	bne.n	8009caa <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	0a1b      	lsrs	r3, r3, #8
 8009ca0:	001a      	movs	r2, r3
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	d100      	bne.n	8009caa <HAL_SPI_IRQHandler+0x8e>
 8009ca8:	e0b0      	b.n	8009e0c <HAL_SPI_IRQHandler+0x1f0>
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	095b      	lsrs	r3, r3, #5
 8009cae:	001a      	movs	r2, r3
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	d100      	bne.n	8009cb8 <HAL_SPI_IRQHandler+0x9c>
 8009cb6:	e0a9      	b.n	8009e0c <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	099b      	lsrs	r3, r3, #6
 8009cbc:	001a      	movs	r2, r3
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	d023      	beq.n	8009d0c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	225d      	movs	r2, #93	; 0x5d
 8009cc8:	5c9b      	ldrb	r3, [r3, r2]
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	d011      	beq.n	8009cf4 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cd4:	2204      	movs	r2, #4
 8009cd6:	431a      	orrs	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cdc:	2300      	movs	r3, #0
 8009cde:	617b      	str	r3, [r7, #20]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	617b      	str	r3, [r7, #20]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	617b      	str	r3, [r7, #20]
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	e00b      	b.n	8009d0c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	613b      	str	r3, [r7, #16]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	613b      	str	r3, [r7, #16]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	613b      	str	r3, [r7, #16]
 8009d08:	693b      	ldr	r3, [r7, #16]
        return;
 8009d0a:	e07f      	b.n	8009e0c <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	095b      	lsrs	r3, r3, #5
 8009d10:	001a      	movs	r2, r3
 8009d12:	2301      	movs	r3, #1
 8009d14:	4013      	ands	r3, r2
 8009d16:	d014      	beq.n	8009d42 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	431a      	orrs	r2, r3
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009d24:	2300      	movs	r3, #0
 8009d26:	60fb      	str	r3, [r7, #12]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	60fb      	str	r3, [r7, #12]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2140      	movs	r1, #64	; 0x40
 8009d3c:	438a      	bics	r2, r1
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	0a1b      	lsrs	r3, r3, #8
 8009d46:	001a      	movs	r2, r3
 8009d48:	2301      	movs	r3, #1
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	d00c      	beq.n	8009d68 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d52:	2208      	movs	r2, #8
 8009d54:	431a      	orrs	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60bb      	str	r3, [r7, #8]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	60bb      	str	r3, [r7, #8]
 8009d66:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d04c      	beq.n	8009e0a <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	21e0      	movs	r1, #224	; 0xe0
 8009d7c:	438a      	bics	r2, r1
 8009d7e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	225d      	movs	r2, #93	; 0x5d
 8009d84:	2101      	movs	r1, #1
 8009d86:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	2202      	movs	r2, #2
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	d103      	bne.n	8009d98 <HAL_SPI_IRQHandler+0x17c>
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	2201      	movs	r2, #1
 8009d94:	4013      	ands	r3, r2
 8009d96:	d032      	beq.n	8009dfe <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2103      	movs	r1, #3
 8009da4:	438a      	bics	r2, r1
 8009da6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d010      	beq.n	8009dd2 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db4:	4a17      	ldr	r2, [pc, #92]	; (8009e14 <HAL_SPI_IRQHandler+0x1f8>)
 8009db6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	f7fb ffd5 	bl	8005d6c <HAL_DMA_Abort_IT>
 8009dc2:	1e03      	subs	r3, r0, #0
 8009dc4:	d005      	beq.n	8009dd2 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dca:	2240      	movs	r2, #64	; 0x40
 8009dcc:	431a      	orrs	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d016      	beq.n	8009e08 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dde:	4a0d      	ldr	r2, [pc, #52]	; (8009e14 <HAL_SPI_IRQHandler+0x1f8>)
 8009de0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de6:	0018      	movs	r0, r3
 8009de8:	f7fb ffc0 	bl	8005d6c <HAL_DMA_Abort_IT>
 8009dec:	1e03      	subs	r3, r0, #0
 8009dee:	d00b      	beq.n	8009e08 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009df4:	2240      	movs	r2, #64	; 0x40
 8009df6:	431a      	orrs	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009dfc:	e004      	b.n	8009e08 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	0018      	movs	r0, r3
 8009e02:	f000 f809 	bl	8009e18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009e06:	e000      	b.n	8009e0a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8009e08:	46c0      	nop			; (mov r8, r8)
    return;
 8009e0a:	46c0      	nop			; (mov r8, r8)
  }
}
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	b008      	add	sp, #32
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	46c0      	nop			; (mov r8, r8)
 8009e14:	08009e29 	.word	0x08009e29

08009e18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009e20:	46c0      	nop			; (mov r8, r8)
 8009e22:	46bd      	mov	sp, r7
 8009e24:	b002      	add	sp, #8
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e34:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2246      	movs	r2, #70	; 0x46
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	0018      	movs	r0, r3
 8009e48:	f7ff ffe6 	bl	8009e18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009e4c:	46c0      	nop			; (mov r8, r8)
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	b004      	add	sp, #16
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b088      	sub	sp, #32
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	603b      	str	r3, [r7, #0]
 8009e60:	1dfb      	adds	r3, r7, #7
 8009e62:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009e64:	f7fb faf0 	bl	8005448 <HAL_GetTick>
 8009e68:	0002      	movs	r2, r0
 8009e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6c:	1a9b      	subs	r3, r3, r2
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	18d3      	adds	r3, r2, r3
 8009e72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009e74:	f7fb fae8 	bl	8005448 <HAL_GetTick>
 8009e78:	0003      	movs	r3, r0
 8009e7a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009e7c:	4b3a      	ldr	r3, [pc, #232]	; (8009f68 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	015b      	lsls	r3, r3, #5
 8009e82:	0d1b      	lsrs	r3, r3, #20
 8009e84:	69fa      	ldr	r2, [r7, #28]
 8009e86:	4353      	muls	r3, r2
 8009e88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e8a:	e058      	b.n	8009f3e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	d055      	beq.n	8009f3e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e92:	f7fb fad9 	bl	8005448 <HAL_GetTick>
 8009e96:	0002      	movs	r2, r0
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	69fa      	ldr	r2, [r7, #28]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d902      	bls.n	8009ea8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d142      	bne.n	8009f2e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	685a      	ldr	r2, [r3, #4]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	21e0      	movs	r1, #224	; 0xe0
 8009eb4:	438a      	bics	r2, r1
 8009eb6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	2382      	movs	r3, #130	; 0x82
 8009ebe:	005b      	lsls	r3, r3, #1
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d113      	bne.n	8009eec <SPI_WaitFlagStateUntilTimeout+0x98>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	689a      	ldr	r2, [r3, #8]
 8009ec8:	2380      	movs	r3, #128	; 0x80
 8009eca:	021b      	lsls	r3, r3, #8
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d005      	beq.n	8009edc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	689a      	ldr	r2, [r3, #8]
 8009ed4:	2380      	movs	r3, #128	; 0x80
 8009ed6:	00db      	lsls	r3, r3, #3
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d107      	bne.n	8009eec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2140      	movs	r1, #64	; 0x40
 8009ee8:	438a      	bics	r2, r1
 8009eea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ef0:	2380      	movs	r3, #128	; 0x80
 8009ef2:	019b      	lsls	r3, r3, #6
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d110      	bne.n	8009f1a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	491a      	ldr	r1, [pc, #104]	; (8009f6c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009f04:	400a      	ands	r2, r1
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2180      	movs	r1, #128	; 0x80
 8009f14:	0189      	lsls	r1, r1, #6
 8009f16:	430a      	orrs	r2, r1
 8009f18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	225d      	movs	r2, #93	; 0x5d
 8009f1e:	2101      	movs	r1, #1
 8009f20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	225c      	movs	r2, #92	; 0x5c
 8009f26:	2100      	movs	r1, #0
 8009f28:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e017      	b.n	8009f5e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d101      	bne.n	8009f38 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009f34:	2300      	movs	r3, #0
 8009f36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	4013      	ands	r3, r2
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	425a      	negs	r2, r3
 8009f4e:	4153      	adcs	r3, r2
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	001a      	movs	r2, r3
 8009f54:	1dfb      	adds	r3, r7, #7
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d197      	bne.n	8009e8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	0018      	movs	r0, r3
 8009f60:	46bd      	mov	sp, r7
 8009f62:	b008      	add	sp, #32
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	46c0      	nop			; (mov r8, r8)
 8009f68:	20000034 	.word	0x20000034
 8009f6c:	ffffdfff 	.word	0xffffdfff

08009f70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b08a      	sub	sp, #40	; 0x28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
 8009f7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009f7e:	2317      	movs	r3, #23
 8009f80:	18fb      	adds	r3, r7, r3
 8009f82:	2200      	movs	r2, #0
 8009f84:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009f86:	f7fb fa5f 	bl	8005448 <HAL_GetTick>
 8009f8a:	0002      	movs	r2, r0
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8e:	1a9b      	subs	r3, r3, r2
 8009f90:	683a      	ldr	r2, [r7, #0]
 8009f92:	18d3      	adds	r3, r2, r3
 8009f94:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009f96:	f7fb fa57 	bl	8005448 <HAL_GetTick>
 8009f9a:	0003      	movs	r3, r0
 8009f9c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	330c      	adds	r3, #12
 8009fa4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009fa6:	4b41      	ldr	r3, [pc, #260]	; (800a0ac <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	0013      	movs	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	189b      	adds	r3, r3, r2
 8009fb0:	00da      	lsls	r2, r3, #3
 8009fb2:	1ad3      	subs	r3, r2, r3
 8009fb4:	0d1b      	lsrs	r3, r3, #20
 8009fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb8:	4353      	muls	r3, r2
 8009fba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009fbc:	e068      	b.n	800a090 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	23c0      	movs	r3, #192	; 0xc0
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d10a      	bne.n	8009fde <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d107      	bne.n	8009fde <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	2117      	movs	r1, #23
 8009fd6:	187b      	adds	r3, r7, r1
 8009fd8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009fda:	187b      	adds	r3, r7, r1
 8009fdc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	d055      	beq.n	800a090 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fe4:	f7fb fa30 	bl	8005448 <HAL_GetTick>
 8009fe8:	0002      	movs	r2, r0
 8009fea:	6a3b      	ldr	r3, [r7, #32]
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d902      	bls.n	8009ffa <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d142      	bne.n	800a080 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	21e0      	movs	r1, #224	; 0xe0
 800a006:	438a      	bics	r2, r1
 800a008:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	2382      	movs	r3, #130	; 0x82
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	429a      	cmp	r2, r3
 800a014:	d113      	bne.n	800a03e <SPI_WaitFifoStateUntilTimeout+0xce>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	689a      	ldr	r2, [r3, #8]
 800a01a:	2380      	movs	r3, #128	; 0x80
 800a01c:	021b      	lsls	r3, r3, #8
 800a01e:	429a      	cmp	r2, r3
 800a020:	d005      	beq.n	800a02e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	689a      	ldr	r2, [r3, #8]
 800a026:	2380      	movs	r3, #128	; 0x80
 800a028:	00db      	lsls	r3, r3, #3
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d107      	bne.n	800a03e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2140      	movs	r1, #64	; 0x40
 800a03a:	438a      	bics	r2, r1
 800a03c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a042:	2380      	movs	r3, #128	; 0x80
 800a044:	019b      	lsls	r3, r3, #6
 800a046:	429a      	cmp	r2, r3
 800a048:	d110      	bne.n	800a06c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4916      	ldr	r1, [pc, #88]	; (800a0b0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800a056:	400a      	ands	r2, r1
 800a058:	601a      	str	r2, [r3, #0]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2180      	movs	r1, #128	; 0x80
 800a066:	0189      	lsls	r1, r1, #6
 800a068:	430a      	orrs	r2, r1
 800a06a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	225d      	movs	r2, #93	; 0x5d
 800a070:	2101      	movs	r1, #1
 800a072:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	225c      	movs	r2, #92	; 0x5c
 800a078:	2100      	movs	r1, #0
 800a07a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a07c:	2303      	movs	r3, #3
 800a07e:	e010      	b.n	800a0a2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d101      	bne.n	800a08a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800a086:	2300      	movs	r3, #0
 800a088:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	3b01      	subs	r3, #1
 800a08e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	4013      	ands	r3, r2
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d18e      	bne.n	8009fbe <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	0018      	movs	r0, r3
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	b00a      	add	sp, #40	; 0x28
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	46c0      	nop			; (mov r8, r8)
 800a0ac:	20000034 	.word	0x20000034
 800a0b0:	ffffdfff 	.word	0xffffdfff

0800a0b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af02      	add	r7, sp, #8
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	685a      	ldr	r2, [r3, #4]
 800a0c4:	2382      	movs	r3, #130	; 0x82
 800a0c6:	005b      	lsls	r3, r3, #1
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d113      	bne.n	800a0f4 <SPI_EndRxTransaction+0x40>
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	689a      	ldr	r2, [r3, #8]
 800a0d0:	2380      	movs	r3, #128	; 0x80
 800a0d2:	021b      	lsls	r3, r3, #8
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d005      	beq.n	800a0e4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	689a      	ldr	r2, [r3, #8]
 800a0dc:	2380      	movs	r3, #128	; 0x80
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d107      	bne.n	800a0f4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2140      	movs	r1, #64	; 0x40
 800a0f0:	438a      	bics	r2, r1
 800a0f2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0f4:	68ba      	ldr	r2, [r7, #8]
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	0013      	movs	r3, r2
 800a0fe:	2200      	movs	r2, #0
 800a100:	2180      	movs	r1, #128	; 0x80
 800a102:	f7ff fea7 	bl	8009e54 <SPI_WaitFlagStateUntilTimeout>
 800a106:	1e03      	subs	r3, r0, #0
 800a108:	d007      	beq.n	800a11a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a10e:	2220      	movs	r2, #32
 800a110:	431a      	orrs	r2, r3
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a116:	2303      	movs	r3, #3
 800a118:	e026      	b.n	800a168 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	685a      	ldr	r2, [r3, #4]
 800a11e:	2382      	movs	r3, #130	; 0x82
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	429a      	cmp	r2, r3
 800a124:	d11f      	bne.n	800a166 <SPI_EndRxTransaction+0xb2>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	689a      	ldr	r2, [r3, #8]
 800a12a:	2380      	movs	r3, #128	; 0x80
 800a12c:	021b      	lsls	r3, r3, #8
 800a12e:	429a      	cmp	r2, r3
 800a130:	d005      	beq.n	800a13e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	689a      	ldr	r2, [r3, #8]
 800a136:	2380      	movs	r3, #128	; 0x80
 800a138:	00db      	lsls	r3, r3, #3
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d113      	bne.n	800a166 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	23c0      	movs	r3, #192	; 0xc0
 800a142:	00d9      	lsls	r1, r3, #3
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	0013      	movs	r3, r2
 800a14c:	2200      	movs	r2, #0
 800a14e:	f7ff ff0f 	bl	8009f70 <SPI_WaitFifoStateUntilTimeout>
 800a152:	1e03      	subs	r3, r0, #0
 800a154:	d007      	beq.n	800a166 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a15a:	2220      	movs	r2, #32
 800a15c:	431a      	orrs	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e000      	b.n	800a168 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	0018      	movs	r0, r3
 800a16a:	46bd      	mov	sp, r7
 800a16c:	b004      	add	sp, #16
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af02      	add	r7, sp, #8
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	23c0      	movs	r3, #192	; 0xc0
 800a180:	0159      	lsls	r1, r3, #5
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	0013      	movs	r3, r2
 800a18a:	2200      	movs	r2, #0
 800a18c:	f7ff fef0 	bl	8009f70 <SPI_WaitFifoStateUntilTimeout>
 800a190:	1e03      	subs	r3, r0, #0
 800a192:	d007      	beq.n	800a1a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a198:	2220      	movs	r2, #32
 800a19a:	431a      	orrs	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e027      	b.n	800a1f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	0013      	movs	r3, r2
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2180      	movs	r1, #128	; 0x80
 800a1b2:	f7ff fe4f 	bl	8009e54 <SPI_WaitFlagStateUntilTimeout>
 800a1b6:	1e03      	subs	r3, r0, #0
 800a1b8:	d007      	beq.n	800a1ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1be:	2220      	movs	r2, #32
 800a1c0:	431a      	orrs	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	e014      	b.n	800a1f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	23c0      	movs	r3, #192	; 0xc0
 800a1ce:	00d9      	lsls	r1, r3, #3
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	0013      	movs	r3, r2
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f7ff fec9 	bl	8009f70 <SPI_WaitFifoStateUntilTimeout>
 800a1de:	1e03      	subs	r3, r0, #0
 800a1e0:	d007      	beq.n	800a1f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	431a      	orrs	r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e000      	b.n	800a1f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	0018      	movs	r0, r3
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	b004      	add	sp, #16
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d101      	bne.n	800a20e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a20a:	2301      	movs	r3, #1
 800a20c:	e04a      	b.n	800a2a4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	223d      	movs	r2, #61	; 0x3d
 800a212:	5c9b      	ldrb	r3, [r3, r2]
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b00      	cmp	r3, #0
 800a218:	d107      	bne.n	800a22a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	223c      	movs	r2, #60	; 0x3c
 800a21e:	2100      	movs	r1, #0
 800a220:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	0018      	movs	r0, r3
 800a226:	f7fa fe73 	bl	8004f10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	223d      	movs	r2, #61	; 0x3d
 800a22e:	2102      	movs	r1, #2
 800a230:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	3304      	adds	r3, #4
 800a23a:	0019      	movs	r1, r3
 800a23c:	0010      	movs	r0, r2
 800a23e:	f000 fb55 	bl	800a8ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2248      	movs	r2, #72	; 0x48
 800a246:	2101      	movs	r1, #1
 800a248:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	223e      	movs	r2, #62	; 0x3e
 800a24e:	2101      	movs	r1, #1
 800a250:	5499      	strb	r1, [r3, r2]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	223f      	movs	r2, #63	; 0x3f
 800a256:	2101      	movs	r1, #1
 800a258:	5499      	strb	r1, [r3, r2]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2240      	movs	r2, #64	; 0x40
 800a25e:	2101      	movs	r1, #1
 800a260:	5499      	strb	r1, [r3, r2]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2241      	movs	r2, #65	; 0x41
 800a266:	2101      	movs	r1, #1
 800a268:	5499      	strb	r1, [r3, r2]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2242      	movs	r2, #66	; 0x42
 800a26e:	2101      	movs	r1, #1
 800a270:	5499      	strb	r1, [r3, r2]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2243      	movs	r2, #67	; 0x43
 800a276:	2101      	movs	r1, #1
 800a278:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2244      	movs	r2, #68	; 0x44
 800a27e:	2101      	movs	r1, #1
 800a280:	5499      	strb	r1, [r3, r2]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2245      	movs	r2, #69	; 0x45
 800a286:	2101      	movs	r1, #1
 800a288:	5499      	strb	r1, [r3, r2]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2246      	movs	r2, #70	; 0x46
 800a28e:	2101      	movs	r1, #1
 800a290:	5499      	strb	r1, [r3, r2]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2247      	movs	r2, #71	; 0x47
 800a296:	2101      	movs	r1, #1
 800a298:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	223d      	movs	r2, #61	; 0x3d
 800a29e:	2101      	movs	r1, #1
 800a2a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	0018      	movs	r0, r3
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	b002      	add	sp, #8
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e04a      	b.n	800a354 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	223d      	movs	r2, #61	; 0x3d
 800a2c2:	5c9b      	ldrb	r3, [r3, r2]
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d107      	bne.n	800a2da <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	223c      	movs	r2, #60	; 0x3c
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	0018      	movs	r0, r3
 800a2d6:	f000 f841 	bl	800a35c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	223d      	movs	r2, #61	; 0x3d
 800a2de:	2102      	movs	r1, #2
 800a2e0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	0019      	movs	r1, r3
 800a2ec:	0010      	movs	r0, r2
 800a2ee:	f000 fafd 	bl	800a8ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2248      	movs	r2, #72	; 0x48
 800a2f6:	2101      	movs	r1, #1
 800a2f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	223e      	movs	r2, #62	; 0x3e
 800a2fe:	2101      	movs	r1, #1
 800a300:	5499      	strb	r1, [r3, r2]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	223f      	movs	r2, #63	; 0x3f
 800a306:	2101      	movs	r1, #1
 800a308:	5499      	strb	r1, [r3, r2]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2240      	movs	r2, #64	; 0x40
 800a30e:	2101      	movs	r1, #1
 800a310:	5499      	strb	r1, [r3, r2]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2241      	movs	r2, #65	; 0x41
 800a316:	2101      	movs	r1, #1
 800a318:	5499      	strb	r1, [r3, r2]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2242      	movs	r2, #66	; 0x42
 800a31e:	2101      	movs	r1, #1
 800a320:	5499      	strb	r1, [r3, r2]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2243      	movs	r2, #67	; 0x43
 800a326:	2101      	movs	r1, #1
 800a328:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2244      	movs	r2, #68	; 0x44
 800a32e:	2101      	movs	r1, #1
 800a330:	5499      	strb	r1, [r3, r2]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2245      	movs	r2, #69	; 0x45
 800a336:	2101      	movs	r1, #1
 800a338:	5499      	strb	r1, [r3, r2]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2246      	movs	r2, #70	; 0x46
 800a33e:	2101      	movs	r1, #1
 800a340:	5499      	strb	r1, [r3, r2]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2247      	movs	r2, #71	; 0x47
 800a346:	2101      	movs	r1, #1
 800a348:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	223d      	movs	r2, #61	; 0x3d
 800a34e:	2101      	movs	r1, #1
 800a350:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	0018      	movs	r0, r3
 800a356:	46bd      	mov	sp, r7
 800a358:	b002      	add	sp, #8
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a364:	46c0      	nop			; (mov r8, r8)
 800a366:	46bd      	mov	sp, r7
 800a368:	b002      	add	sp, #8
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d108      	bne.n	800a38e <HAL_TIM_PWM_Start+0x22>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	223e      	movs	r2, #62	; 0x3e
 800a380:	5c9b      	ldrb	r3, [r3, r2]
 800a382:	b2db      	uxtb	r3, r3
 800a384:	3b01      	subs	r3, #1
 800a386:	1e5a      	subs	r2, r3, #1
 800a388:	4193      	sbcs	r3, r2
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	e037      	b.n	800a3fe <HAL_TIM_PWM_Start+0x92>
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	2b04      	cmp	r3, #4
 800a392:	d108      	bne.n	800a3a6 <HAL_TIM_PWM_Start+0x3a>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	223f      	movs	r2, #63	; 0x3f
 800a398:	5c9b      	ldrb	r3, [r3, r2]
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	3b01      	subs	r3, #1
 800a39e:	1e5a      	subs	r2, r3, #1
 800a3a0:	4193      	sbcs	r3, r2
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	e02b      	b.n	800a3fe <HAL_TIM_PWM_Start+0x92>
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	2b08      	cmp	r3, #8
 800a3aa:	d108      	bne.n	800a3be <HAL_TIM_PWM_Start+0x52>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2240      	movs	r2, #64	; 0x40
 800a3b0:	5c9b      	ldrb	r3, [r3, r2]
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	1e5a      	subs	r2, r3, #1
 800a3b8:	4193      	sbcs	r3, r2
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	e01f      	b.n	800a3fe <HAL_TIM_PWM_Start+0x92>
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	2b0c      	cmp	r3, #12
 800a3c2:	d108      	bne.n	800a3d6 <HAL_TIM_PWM_Start+0x6a>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2241      	movs	r2, #65	; 0x41
 800a3c8:	5c9b      	ldrb	r3, [r3, r2]
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	1e5a      	subs	r2, r3, #1
 800a3d0:	4193      	sbcs	r3, r2
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	e013      	b.n	800a3fe <HAL_TIM_PWM_Start+0x92>
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b10      	cmp	r3, #16
 800a3da:	d108      	bne.n	800a3ee <HAL_TIM_PWM_Start+0x82>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2242      	movs	r2, #66	; 0x42
 800a3e0:	5c9b      	ldrb	r3, [r3, r2]
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	1e5a      	subs	r2, r3, #1
 800a3e8:	4193      	sbcs	r3, r2
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	e007      	b.n	800a3fe <HAL_TIM_PWM_Start+0x92>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2243      	movs	r2, #67	; 0x43
 800a3f2:	5c9b      	ldrb	r3, [r3, r2]
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	1e5a      	subs	r2, r3, #1
 800a3fa:	4193      	sbcs	r3, r2
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d001      	beq.n	800a406 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e08b      	b.n	800a51e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d104      	bne.n	800a416 <HAL_TIM_PWM_Start+0xaa>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	223e      	movs	r2, #62	; 0x3e
 800a410:	2102      	movs	r1, #2
 800a412:	5499      	strb	r1, [r3, r2]
 800a414:	e023      	b.n	800a45e <HAL_TIM_PWM_Start+0xf2>
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	2b04      	cmp	r3, #4
 800a41a:	d104      	bne.n	800a426 <HAL_TIM_PWM_Start+0xba>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	223f      	movs	r2, #63	; 0x3f
 800a420:	2102      	movs	r1, #2
 800a422:	5499      	strb	r1, [r3, r2]
 800a424:	e01b      	b.n	800a45e <HAL_TIM_PWM_Start+0xf2>
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	2b08      	cmp	r3, #8
 800a42a:	d104      	bne.n	800a436 <HAL_TIM_PWM_Start+0xca>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2240      	movs	r2, #64	; 0x40
 800a430:	2102      	movs	r1, #2
 800a432:	5499      	strb	r1, [r3, r2]
 800a434:	e013      	b.n	800a45e <HAL_TIM_PWM_Start+0xf2>
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	2b0c      	cmp	r3, #12
 800a43a:	d104      	bne.n	800a446 <HAL_TIM_PWM_Start+0xda>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2241      	movs	r2, #65	; 0x41
 800a440:	2102      	movs	r1, #2
 800a442:	5499      	strb	r1, [r3, r2]
 800a444:	e00b      	b.n	800a45e <HAL_TIM_PWM_Start+0xf2>
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	2b10      	cmp	r3, #16
 800a44a:	d104      	bne.n	800a456 <HAL_TIM_PWM_Start+0xea>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2242      	movs	r2, #66	; 0x42
 800a450:	2102      	movs	r1, #2
 800a452:	5499      	strb	r1, [r3, r2]
 800a454:	e003      	b.n	800a45e <HAL_TIM_PWM_Start+0xf2>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2243      	movs	r2, #67	; 0x43
 800a45a:	2102      	movs	r1, #2
 800a45c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	2201      	movs	r2, #1
 800a466:	0018      	movs	r0, r3
 800a468:	f000 fe20 	bl	800b0ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a2d      	ldr	r2, [pc, #180]	; (800a528 <HAL_TIM_PWM_Start+0x1bc>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d00e      	beq.n	800a494 <HAL_TIM_PWM_Start+0x128>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a2c      	ldr	r2, [pc, #176]	; (800a52c <HAL_TIM_PWM_Start+0x1c0>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d009      	beq.n	800a494 <HAL_TIM_PWM_Start+0x128>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a2a      	ldr	r2, [pc, #168]	; (800a530 <HAL_TIM_PWM_Start+0x1c4>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d004      	beq.n	800a494 <HAL_TIM_PWM_Start+0x128>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a29      	ldr	r2, [pc, #164]	; (800a534 <HAL_TIM_PWM_Start+0x1c8>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d101      	bne.n	800a498 <HAL_TIM_PWM_Start+0x12c>
 800a494:	2301      	movs	r3, #1
 800a496:	e000      	b.n	800a49a <HAL_TIM_PWM_Start+0x12e>
 800a498:	2300      	movs	r3, #0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d008      	beq.n	800a4b0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2180      	movs	r1, #128	; 0x80
 800a4aa:	0209      	lsls	r1, r1, #8
 800a4ac:	430a      	orrs	r2, r1
 800a4ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a1c      	ldr	r2, [pc, #112]	; (800a528 <HAL_TIM_PWM_Start+0x1bc>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d00f      	beq.n	800a4da <HAL_TIM_PWM_Start+0x16e>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	2380      	movs	r3, #128	; 0x80
 800a4c0:	05db      	lsls	r3, r3, #23
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d009      	beq.n	800a4da <HAL_TIM_PWM_Start+0x16e>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a1b      	ldr	r2, [pc, #108]	; (800a538 <HAL_TIM_PWM_Start+0x1cc>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d004      	beq.n	800a4da <HAL_TIM_PWM_Start+0x16e>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a15      	ldr	r2, [pc, #84]	; (800a52c <HAL_TIM_PWM_Start+0x1c0>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d116      	bne.n	800a508 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	689b      	ldr	r3, [r3, #8]
 800a4e0:	4a16      	ldr	r2, [pc, #88]	; (800a53c <HAL_TIM_PWM_Start+0x1d0>)
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2b06      	cmp	r3, #6
 800a4ea:	d016      	beq.n	800a51a <HAL_TIM_PWM_Start+0x1ae>
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	2380      	movs	r3, #128	; 0x80
 800a4f0:	025b      	lsls	r3, r3, #9
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d011      	beq.n	800a51a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2101      	movs	r1, #1
 800a502:	430a      	orrs	r2, r1
 800a504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a506:	e008      	b.n	800a51a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2101      	movs	r1, #1
 800a514:	430a      	orrs	r2, r1
 800a516:	601a      	str	r2, [r3, #0]
 800a518:	e000      	b.n	800a51c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a51a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	0018      	movs	r0, r3
 800a520:	46bd      	mov	sp, r7
 800a522:	b004      	add	sp, #16
 800a524:	bd80      	pop	{r7, pc}
 800a526:	46c0      	nop			; (mov r8, r8)
 800a528:	40012c00 	.word	0x40012c00
 800a52c:	40014000 	.word	0x40014000
 800a530:	40014400 	.word	0x40014400
 800a534:	40014800 	.word	0x40014800
 800a538:	40000400 	.word	0x40000400
 800a53c:	00010007 	.word	0x00010007

0800a540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a54c:	2317      	movs	r3, #23
 800a54e:	18fb      	adds	r3, r7, r3
 800a550:	2200      	movs	r2, #0
 800a552:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	223c      	movs	r2, #60	; 0x3c
 800a558:	5c9b      	ldrb	r3, [r3, r2]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d101      	bne.n	800a562 <HAL_TIM_PWM_ConfigChannel+0x22>
 800a55e:	2302      	movs	r3, #2
 800a560:	e0e5      	b.n	800a72e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	223c      	movs	r2, #60	; 0x3c
 800a566:	2101      	movs	r1, #1
 800a568:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2b14      	cmp	r3, #20
 800a56e:	d900      	bls.n	800a572 <HAL_TIM_PWM_ConfigChannel+0x32>
 800a570:	e0d1      	b.n	800a716 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	009a      	lsls	r2, r3, #2
 800a576:	4b70      	ldr	r3, [pc, #448]	; (800a738 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a578:	18d3      	adds	r3, r2, r3
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	0011      	movs	r1, r2
 800a586:	0018      	movs	r0, r3
 800a588:	f000 fa30 	bl	800a9ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	699a      	ldr	r2, [r3, #24]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2108      	movs	r1, #8
 800a598:	430a      	orrs	r2, r1
 800a59a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	699a      	ldr	r2, [r3, #24]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2104      	movs	r1, #4
 800a5a8:	438a      	bics	r2, r1
 800a5aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6999      	ldr	r1, [r3, #24]
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	691a      	ldr	r2, [r3, #16]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	619a      	str	r2, [r3, #24]
      break;
 800a5be:	e0af      	b.n	800a720 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	0011      	movs	r1, r2
 800a5c8:	0018      	movs	r0, r3
 800a5ca:	f000 fa99 	bl	800ab00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	699a      	ldr	r2, [r3, #24]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2180      	movs	r1, #128	; 0x80
 800a5da:	0109      	lsls	r1, r1, #4
 800a5dc:	430a      	orrs	r2, r1
 800a5de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	699a      	ldr	r2, [r3, #24]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4954      	ldr	r1, [pc, #336]	; (800a73c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a5ec:	400a      	ands	r2, r1
 800a5ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	6999      	ldr	r1, [r3, #24]
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	691b      	ldr	r3, [r3, #16]
 800a5fa:	021a      	lsls	r2, r3, #8
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	430a      	orrs	r2, r1
 800a602:	619a      	str	r2, [r3, #24]
      break;
 800a604:	e08c      	b.n	800a720 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	0011      	movs	r1, r2
 800a60e:	0018      	movs	r0, r3
 800a610:	f000 fafa 	bl	800ac08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	69da      	ldr	r2, [r3, #28]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2108      	movs	r1, #8
 800a620:	430a      	orrs	r2, r1
 800a622:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	69da      	ldr	r2, [r3, #28]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2104      	movs	r1, #4
 800a630:	438a      	bics	r2, r1
 800a632:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	69d9      	ldr	r1, [r3, #28]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	691a      	ldr	r2, [r3, #16]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	61da      	str	r2, [r3, #28]
      break;
 800a646:	e06b      	b.n	800a720 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	0011      	movs	r1, r2
 800a650:	0018      	movs	r0, r3
 800a652:	f000 fb61 	bl	800ad18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	69da      	ldr	r2, [r3, #28]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2180      	movs	r1, #128	; 0x80
 800a662:	0109      	lsls	r1, r1, #4
 800a664:	430a      	orrs	r2, r1
 800a666:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	69da      	ldr	r2, [r3, #28]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4932      	ldr	r1, [pc, #200]	; (800a73c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a674:	400a      	ands	r2, r1
 800a676:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	69d9      	ldr	r1, [r3, #28]
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	021a      	lsls	r2, r3, #8
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	430a      	orrs	r2, r1
 800a68a:	61da      	str	r2, [r3, #28]
      break;
 800a68c:	e048      	b.n	800a720 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	0011      	movs	r1, r2
 800a696:	0018      	movs	r0, r3
 800a698:	f000 fba8 	bl	800adec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2108      	movs	r1, #8
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2104      	movs	r1, #4
 800a6b8:	438a      	bics	r2, r1
 800a6ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	691a      	ldr	r2, [r3, #16]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	430a      	orrs	r2, r1
 800a6cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a6ce:	e027      	b.n	800a720 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	0011      	movs	r1, r2
 800a6d8:	0018      	movs	r0, r3
 800a6da:	f000 fbe7 	bl	800aeac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2180      	movs	r1, #128	; 0x80
 800a6ea:	0109      	lsls	r1, r1, #4
 800a6ec:	430a      	orrs	r2, r1
 800a6ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4910      	ldr	r1, [pc, #64]	; (800a73c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a6fc:	400a      	ands	r2, r1
 800a6fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	021a      	lsls	r2, r3, #8
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	430a      	orrs	r2, r1
 800a712:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a714:	e004      	b.n	800a720 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a716:	2317      	movs	r3, #23
 800a718:	18fb      	adds	r3, r7, r3
 800a71a:	2201      	movs	r2, #1
 800a71c:	701a      	strb	r2, [r3, #0]
      break;
 800a71e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	223c      	movs	r2, #60	; 0x3c
 800a724:	2100      	movs	r1, #0
 800a726:	5499      	strb	r1, [r3, r2]

  return status;
 800a728:	2317      	movs	r3, #23
 800a72a:	18fb      	adds	r3, r7, r3
 800a72c:	781b      	ldrb	r3, [r3, #0]
}
 800a72e:	0018      	movs	r0, r3
 800a730:	46bd      	mov	sp, r7
 800a732:	b006      	add	sp, #24
 800a734:	bd80      	pop	{r7, pc}
 800a736:	46c0      	nop			; (mov r8, r8)
 800a738:	080183f0 	.word	0x080183f0
 800a73c:	fffffbff 	.word	0xfffffbff

0800a740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a74a:	230f      	movs	r3, #15
 800a74c:	18fb      	adds	r3, r7, r3
 800a74e:	2200      	movs	r2, #0
 800a750:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	223c      	movs	r2, #60	; 0x3c
 800a756:	5c9b      	ldrb	r3, [r3, r2]
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d101      	bne.n	800a760 <HAL_TIM_ConfigClockSource+0x20>
 800a75c:	2302      	movs	r3, #2
 800a75e:	e0bc      	b.n	800a8da <HAL_TIM_ConfigClockSource+0x19a>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	223c      	movs	r2, #60	; 0x3c
 800a764:	2101      	movs	r1, #1
 800a766:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	223d      	movs	r2, #61	; 0x3d
 800a76c:	2102      	movs	r1, #2
 800a76e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4a5a      	ldr	r2, [pc, #360]	; (800a8e4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800a77c:	4013      	ands	r3, r2
 800a77e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	4a59      	ldr	r2, [pc, #356]	; (800a8e8 <HAL_TIM_ConfigClockSource+0x1a8>)
 800a784:	4013      	ands	r3, r2
 800a786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2280      	movs	r2, #128	; 0x80
 800a796:	0192      	lsls	r2, r2, #6
 800a798:	4293      	cmp	r3, r2
 800a79a:	d040      	beq.n	800a81e <HAL_TIM_ConfigClockSource+0xde>
 800a79c:	2280      	movs	r2, #128	; 0x80
 800a79e:	0192      	lsls	r2, r2, #6
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d900      	bls.n	800a7a6 <HAL_TIM_ConfigClockSource+0x66>
 800a7a4:	e088      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x178>
 800a7a6:	2280      	movs	r2, #128	; 0x80
 800a7a8:	0152      	lsls	r2, r2, #5
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d100      	bne.n	800a7b0 <HAL_TIM_ConfigClockSource+0x70>
 800a7ae:	e088      	b.n	800a8c2 <HAL_TIM_ConfigClockSource+0x182>
 800a7b0:	2280      	movs	r2, #128	; 0x80
 800a7b2:	0152      	lsls	r2, r2, #5
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d900      	bls.n	800a7ba <HAL_TIM_ConfigClockSource+0x7a>
 800a7b8:	e07e      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x178>
 800a7ba:	2b70      	cmp	r3, #112	; 0x70
 800a7bc:	d018      	beq.n	800a7f0 <HAL_TIM_ConfigClockSource+0xb0>
 800a7be:	d900      	bls.n	800a7c2 <HAL_TIM_ConfigClockSource+0x82>
 800a7c0:	e07a      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x178>
 800a7c2:	2b60      	cmp	r3, #96	; 0x60
 800a7c4:	d04f      	beq.n	800a866 <HAL_TIM_ConfigClockSource+0x126>
 800a7c6:	d900      	bls.n	800a7ca <HAL_TIM_ConfigClockSource+0x8a>
 800a7c8:	e076      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x178>
 800a7ca:	2b50      	cmp	r3, #80	; 0x50
 800a7cc:	d03b      	beq.n	800a846 <HAL_TIM_ConfigClockSource+0x106>
 800a7ce:	d900      	bls.n	800a7d2 <HAL_TIM_ConfigClockSource+0x92>
 800a7d0:	e072      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x178>
 800a7d2:	2b40      	cmp	r3, #64	; 0x40
 800a7d4:	d057      	beq.n	800a886 <HAL_TIM_ConfigClockSource+0x146>
 800a7d6:	d900      	bls.n	800a7da <HAL_TIM_ConfigClockSource+0x9a>
 800a7d8:	e06e      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x178>
 800a7da:	2b30      	cmp	r3, #48	; 0x30
 800a7dc:	d063      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x166>
 800a7de:	d86b      	bhi.n	800a8b8 <HAL_TIM_ConfigClockSource+0x178>
 800a7e0:	2b20      	cmp	r3, #32
 800a7e2:	d060      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x166>
 800a7e4:	d868      	bhi.n	800a8b8 <HAL_TIM_ConfigClockSource+0x178>
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d05d      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x166>
 800a7ea:	2b10      	cmp	r3, #16
 800a7ec:	d05b      	beq.n	800a8a6 <HAL_TIM_ConfigClockSource+0x166>
 800a7ee:	e063      	b.n	800a8b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6818      	ldr	r0, [r3, #0]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	6899      	ldr	r1, [r3, #8]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f000 fc34 	bl	800b06c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	2277      	movs	r2, #119	; 0x77
 800a810:	4313      	orrs	r3, r2
 800a812:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	609a      	str	r2, [r3, #8]
      break;
 800a81c:	e052      	b.n	800a8c4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6818      	ldr	r0, [r3, #0]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	6899      	ldr	r1, [r3, #8]
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	685a      	ldr	r2, [r3, #4]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	f000 fc1d 	bl	800b06c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	689a      	ldr	r2, [r3, #8]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	2180      	movs	r1, #128	; 0x80
 800a83e:	01c9      	lsls	r1, r1, #7
 800a840:	430a      	orrs	r2, r1
 800a842:	609a      	str	r2, [r3, #8]
      break;
 800a844:	e03e      	b.n	800a8c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6818      	ldr	r0, [r3, #0]
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	6859      	ldr	r1, [r3, #4]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	001a      	movs	r2, r3
 800a854:	f000 fb8e 	bl	800af74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2150      	movs	r1, #80	; 0x50
 800a85e:	0018      	movs	r0, r3
 800a860:	f000 fbe8 	bl	800b034 <TIM_ITRx_SetConfig>
      break;
 800a864:	e02e      	b.n	800a8c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6818      	ldr	r0, [r3, #0]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	6859      	ldr	r1, [r3, #4]
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	001a      	movs	r2, r3
 800a874:	f000 fbac 	bl	800afd0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2160      	movs	r1, #96	; 0x60
 800a87e:	0018      	movs	r0, r3
 800a880:	f000 fbd8 	bl	800b034 <TIM_ITRx_SetConfig>
      break;
 800a884:	e01e      	b.n	800a8c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6818      	ldr	r0, [r3, #0]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	6859      	ldr	r1, [r3, #4]
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	001a      	movs	r2, r3
 800a894:	f000 fb6e 	bl	800af74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2140      	movs	r1, #64	; 0x40
 800a89e:	0018      	movs	r0, r3
 800a8a0:	f000 fbc8 	bl	800b034 <TIM_ITRx_SetConfig>
      break;
 800a8a4:	e00e      	b.n	800a8c4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	0019      	movs	r1, r3
 800a8b0:	0010      	movs	r0, r2
 800a8b2:	f000 fbbf 	bl	800b034 <TIM_ITRx_SetConfig>
      break;
 800a8b6:	e005      	b.n	800a8c4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a8b8:	230f      	movs	r3, #15
 800a8ba:	18fb      	adds	r3, r7, r3
 800a8bc:	2201      	movs	r2, #1
 800a8be:	701a      	strb	r2, [r3, #0]
      break;
 800a8c0:	e000      	b.n	800a8c4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a8c2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	223d      	movs	r2, #61	; 0x3d
 800a8c8:	2101      	movs	r1, #1
 800a8ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	223c      	movs	r2, #60	; 0x3c
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	5499      	strb	r1, [r3, r2]

  return status;
 800a8d4:	230f      	movs	r3, #15
 800a8d6:	18fb      	adds	r3, r7, r3
 800a8d8:	781b      	ldrb	r3, [r3, #0]
}
 800a8da:	0018      	movs	r0, r3
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	b004      	add	sp, #16
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	46c0      	nop			; (mov r8, r8)
 800a8e4:	ffceff88 	.word	0xffceff88
 800a8e8:	ffff00ff 	.word	0xffff00ff

0800a8ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a34      	ldr	r2, [pc, #208]	; (800a9d0 <TIM_Base_SetConfig+0xe4>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d008      	beq.n	800a916 <TIM_Base_SetConfig+0x2a>
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	2380      	movs	r3, #128	; 0x80
 800a908:	05db      	lsls	r3, r3, #23
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d003      	beq.n	800a916 <TIM_Base_SetConfig+0x2a>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a30      	ldr	r2, [pc, #192]	; (800a9d4 <TIM_Base_SetConfig+0xe8>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d108      	bne.n	800a928 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2270      	movs	r2, #112	; 0x70
 800a91a:	4393      	bics	r3, r2
 800a91c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	4313      	orrs	r3, r2
 800a926:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a29      	ldr	r2, [pc, #164]	; (800a9d0 <TIM_Base_SetConfig+0xe4>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d018      	beq.n	800a962 <TIM_Base_SetConfig+0x76>
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	2380      	movs	r3, #128	; 0x80
 800a934:	05db      	lsls	r3, r3, #23
 800a936:	429a      	cmp	r2, r3
 800a938:	d013      	beq.n	800a962 <TIM_Base_SetConfig+0x76>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a25      	ldr	r2, [pc, #148]	; (800a9d4 <TIM_Base_SetConfig+0xe8>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d00f      	beq.n	800a962 <TIM_Base_SetConfig+0x76>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a24      	ldr	r2, [pc, #144]	; (800a9d8 <TIM_Base_SetConfig+0xec>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d00b      	beq.n	800a962 <TIM_Base_SetConfig+0x76>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a23      	ldr	r2, [pc, #140]	; (800a9dc <TIM_Base_SetConfig+0xf0>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d007      	beq.n	800a962 <TIM_Base_SetConfig+0x76>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a22      	ldr	r2, [pc, #136]	; (800a9e0 <TIM_Base_SetConfig+0xf4>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d003      	beq.n	800a962 <TIM_Base_SetConfig+0x76>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a21      	ldr	r2, [pc, #132]	; (800a9e4 <TIM_Base_SetConfig+0xf8>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d108      	bne.n	800a974 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	4a20      	ldr	r2, [pc, #128]	; (800a9e8 <TIM_Base_SetConfig+0xfc>)
 800a966:	4013      	ands	r3, r2
 800a968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	68fa      	ldr	r2, [r7, #12]
 800a970:	4313      	orrs	r3, r2
 800a972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2280      	movs	r2, #128	; 0x80
 800a978:	4393      	bics	r3, r2
 800a97a:	001a      	movs	r2, r3
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	4313      	orrs	r3, r2
 800a982:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	689a      	ldr	r2, [r3, #8]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4a0c      	ldr	r2, [pc, #48]	; (800a9d0 <TIM_Base_SetConfig+0xe4>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d00b      	beq.n	800a9ba <TIM_Base_SetConfig+0xce>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4a0d      	ldr	r2, [pc, #52]	; (800a9dc <TIM_Base_SetConfig+0xf0>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d007      	beq.n	800a9ba <TIM_Base_SetConfig+0xce>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a0c      	ldr	r2, [pc, #48]	; (800a9e0 <TIM_Base_SetConfig+0xf4>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d003      	beq.n	800a9ba <TIM_Base_SetConfig+0xce>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a0b      	ldr	r2, [pc, #44]	; (800a9e4 <TIM_Base_SetConfig+0xf8>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d103      	bne.n	800a9c2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	691a      	ldr	r2, [r3, #16]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	615a      	str	r2, [r3, #20]
}
 800a9c8:	46c0      	nop			; (mov r8, r8)
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	b004      	add	sp, #16
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	40012c00 	.word	0x40012c00
 800a9d4:	40000400 	.word	0x40000400
 800a9d8:	40002000 	.word	0x40002000
 800a9dc:	40014000 	.word	0x40014000
 800a9e0:	40014400 	.word	0x40014400
 800a9e4:	40014800 	.word	0x40014800
 800a9e8:	fffffcff 	.word	0xfffffcff

0800a9ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	4393      	bics	r3, r2
 800a9fe:	001a      	movs	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a1b      	ldr	r3, [r3, #32]
 800aa08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	699b      	ldr	r3, [r3, #24]
 800aa14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	4a32      	ldr	r2, [pc, #200]	; (800aae4 <TIM_OC1_SetConfig+0xf8>)
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2203      	movs	r2, #3
 800aa22:	4393      	bics	r3, r2
 800aa24:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	2202      	movs	r2, #2
 800aa34:	4393      	bics	r3, r2
 800aa36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a28      	ldr	r2, [pc, #160]	; (800aae8 <TIM_OC1_SetConfig+0xfc>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d00b      	beq.n	800aa62 <TIM_OC1_SetConfig+0x76>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a27      	ldr	r2, [pc, #156]	; (800aaec <TIM_OC1_SetConfig+0x100>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d007      	beq.n	800aa62 <TIM_OC1_SetConfig+0x76>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a26      	ldr	r2, [pc, #152]	; (800aaf0 <TIM_OC1_SetConfig+0x104>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d003      	beq.n	800aa62 <TIM_OC1_SetConfig+0x76>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a25      	ldr	r2, [pc, #148]	; (800aaf4 <TIM_OC1_SetConfig+0x108>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d10c      	bne.n	800aa7c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	2208      	movs	r2, #8
 800aa66:	4393      	bics	r3, r2
 800aa68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	2204      	movs	r2, #4
 800aa78:	4393      	bics	r3, r2
 800aa7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a1a      	ldr	r2, [pc, #104]	; (800aae8 <TIM_OC1_SetConfig+0xfc>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d00b      	beq.n	800aa9c <TIM_OC1_SetConfig+0xb0>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a19      	ldr	r2, [pc, #100]	; (800aaec <TIM_OC1_SetConfig+0x100>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d007      	beq.n	800aa9c <TIM_OC1_SetConfig+0xb0>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a18      	ldr	r2, [pc, #96]	; (800aaf0 <TIM_OC1_SetConfig+0x104>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d003      	beq.n	800aa9c <TIM_OC1_SetConfig+0xb0>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a17      	ldr	r2, [pc, #92]	; (800aaf4 <TIM_OC1_SetConfig+0x108>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d111      	bne.n	800aac0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	4a16      	ldr	r2, [pc, #88]	; (800aaf8 <TIM_OC1_SetConfig+0x10c>)
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	4a15      	ldr	r2, [pc, #84]	; (800aafc <TIM_OC1_SetConfig+0x110>)
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	695b      	ldr	r3, [r3, #20]
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	699b      	ldr	r3, [r3, #24]
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	693a      	ldr	r2, [r7, #16]
 800aac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	697a      	ldr	r2, [r7, #20]
 800aad8:	621a      	str	r2, [r3, #32]
}
 800aada:	46c0      	nop			; (mov r8, r8)
 800aadc:	46bd      	mov	sp, r7
 800aade:	b006      	add	sp, #24
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	46c0      	nop			; (mov r8, r8)
 800aae4:	fffeff8f 	.word	0xfffeff8f
 800aae8:	40012c00 	.word	0x40012c00
 800aaec:	40014000 	.word	0x40014000
 800aaf0:	40014400 	.word	0x40014400
 800aaf4:	40014800 	.word	0x40014800
 800aaf8:	fffffeff 	.word	0xfffffeff
 800aafc:	fffffdff 	.word	0xfffffdff

0800ab00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	2210      	movs	r2, #16
 800ab10:	4393      	bics	r3, r2
 800ab12:	001a      	movs	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a1b      	ldr	r3, [r3, #32]
 800ab1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	4a2e      	ldr	r2, [pc, #184]	; (800abe8 <TIM_OC2_SetConfig+0xe8>)
 800ab2e:	4013      	ands	r3, r2
 800ab30:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	4a2d      	ldr	r2, [pc, #180]	; (800abec <TIM_OC2_SetConfig+0xec>)
 800ab36:	4013      	ands	r3, r2
 800ab38:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	021b      	lsls	r3, r3, #8
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2220      	movs	r2, #32
 800ab4a:	4393      	bics	r3, r2
 800ab4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	011b      	lsls	r3, r3, #4
 800ab54:	697a      	ldr	r2, [r7, #20]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a24      	ldr	r2, [pc, #144]	; (800abf0 <TIM_OC2_SetConfig+0xf0>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d10d      	bne.n	800ab7e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2280      	movs	r2, #128	; 0x80
 800ab66:	4393      	bics	r3, r2
 800ab68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	011b      	lsls	r3, r3, #4
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	2240      	movs	r2, #64	; 0x40
 800ab7a:	4393      	bics	r3, r2
 800ab7c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a1b      	ldr	r2, [pc, #108]	; (800abf0 <TIM_OC2_SetConfig+0xf0>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d00b      	beq.n	800ab9e <TIM_OC2_SetConfig+0x9e>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a1a      	ldr	r2, [pc, #104]	; (800abf4 <TIM_OC2_SetConfig+0xf4>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d007      	beq.n	800ab9e <TIM_OC2_SetConfig+0x9e>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a19      	ldr	r2, [pc, #100]	; (800abf8 <TIM_OC2_SetConfig+0xf8>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d003      	beq.n	800ab9e <TIM_OC2_SetConfig+0x9e>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a18      	ldr	r2, [pc, #96]	; (800abfc <TIM_OC2_SetConfig+0xfc>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d113      	bne.n	800abc6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	4a17      	ldr	r2, [pc, #92]	; (800ac00 <TIM_OC2_SetConfig+0x100>)
 800aba2:	4013      	ands	r3, r2
 800aba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	4a16      	ldr	r2, [pc, #88]	; (800ac04 <TIM_OC2_SetConfig+0x104>)
 800abaa:	4013      	ands	r3, r2
 800abac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	699b      	ldr	r3, [r3, #24]
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	68fa      	ldr	r2, [r7, #12]
 800abd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	697a      	ldr	r2, [r7, #20]
 800abde:	621a      	str	r2, [r3, #32]
}
 800abe0:	46c0      	nop			; (mov r8, r8)
 800abe2:	46bd      	mov	sp, r7
 800abe4:	b006      	add	sp, #24
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	feff8fff 	.word	0xfeff8fff
 800abec:	fffffcff 	.word	0xfffffcff
 800abf0:	40012c00 	.word	0x40012c00
 800abf4:	40014000 	.word	0x40014000
 800abf8:	40014400 	.word	0x40014400
 800abfc:	40014800 	.word	0x40014800
 800ac00:	fffffbff 	.word	0xfffffbff
 800ac04:	fffff7ff 	.word	0xfffff7ff

0800ac08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b086      	sub	sp, #24
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	4a35      	ldr	r2, [pc, #212]	; (800acec <TIM_OC3_SetConfig+0xe4>)
 800ac18:	401a      	ands	r2, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	4a2f      	ldr	r2, [pc, #188]	; (800acf0 <TIM_OC3_SetConfig+0xe8>)
 800ac34:	4013      	ands	r3, r2
 800ac36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2203      	movs	r2, #3
 800ac3c:	4393      	bics	r3, r2
 800ac3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	4a29      	ldr	r2, [pc, #164]	; (800acf4 <TIM_OC3_SetConfig+0xec>)
 800ac4e:	4013      	ands	r3, r2
 800ac50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	021b      	lsls	r3, r3, #8
 800ac58:	697a      	ldr	r2, [r7, #20]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a25      	ldr	r2, [pc, #148]	; (800acf8 <TIM_OC3_SetConfig+0xf0>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d10d      	bne.n	800ac82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	4a24      	ldr	r2, [pc, #144]	; (800acfc <TIM_OC3_SetConfig+0xf4>)
 800ac6a:	4013      	ands	r3, r2
 800ac6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	021b      	lsls	r3, r3, #8
 800ac74:	697a      	ldr	r2, [r7, #20]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	4a20      	ldr	r2, [pc, #128]	; (800ad00 <TIM_OC3_SetConfig+0xf8>)
 800ac7e:	4013      	ands	r3, r2
 800ac80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4a1c      	ldr	r2, [pc, #112]	; (800acf8 <TIM_OC3_SetConfig+0xf0>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d00b      	beq.n	800aca2 <TIM_OC3_SetConfig+0x9a>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a1d      	ldr	r2, [pc, #116]	; (800ad04 <TIM_OC3_SetConfig+0xfc>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d007      	beq.n	800aca2 <TIM_OC3_SetConfig+0x9a>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a1c      	ldr	r2, [pc, #112]	; (800ad08 <TIM_OC3_SetConfig+0x100>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d003      	beq.n	800aca2 <TIM_OC3_SetConfig+0x9a>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a1b      	ldr	r2, [pc, #108]	; (800ad0c <TIM_OC3_SetConfig+0x104>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d113      	bne.n	800acca <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	4a1a      	ldr	r2, [pc, #104]	; (800ad10 <TIM_OC3_SetConfig+0x108>)
 800aca6:	4013      	ands	r3, r2
 800aca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	4a19      	ldr	r2, [pc, #100]	; (800ad14 <TIM_OC3_SetConfig+0x10c>)
 800acae:	4013      	ands	r3, r2
 800acb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	695b      	ldr	r3, [r3, #20]
 800acb6:	011b      	lsls	r3, r3, #4
 800acb8:	693a      	ldr	r2, [r7, #16]
 800acba:	4313      	orrs	r3, r2
 800acbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	011b      	lsls	r3, r3, #4
 800acc4:	693a      	ldr	r2, [r7, #16]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	693a      	ldr	r2, [r7, #16]
 800acce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	685a      	ldr	r2, [r3, #4]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	697a      	ldr	r2, [r7, #20]
 800ace2:	621a      	str	r2, [r3, #32]
}
 800ace4:	46c0      	nop			; (mov r8, r8)
 800ace6:	46bd      	mov	sp, r7
 800ace8:	b006      	add	sp, #24
 800acea:	bd80      	pop	{r7, pc}
 800acec:	fffffeff 	.word	0xfffffeff
 800acf0:	fffeff8f 	.word	0xfffeff8f
 800acf4:	fffffdff 	.word	0xfffffdff
 800acf8:	40012c00 	.word	0x40012c00
 800acfc:	fffff7ff 	.word	0xfffff7ff
 800ad00:	fffffbff 	.word	0xfffffbff
 800ad04:	40014000 	.word	0x40014000
 800ad08:	40014400 	.word	0x40014400
 800ad0c:	40014800 	.word	0x40014800
 800ad10:	ffffefff 	.word	0xffffefff
 800ad14:	ffffdfff 	.word	0xffffdfff

0800ad18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b086      	sub	sp, #24
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	4a28      	ldr	r2, [pc, #160]	; (800adc8 <TIM_OC4_SetConfig+0xb0>)
 800ad28:	401a      	ands	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	69db      	ldr	r3, [r3, #28]
 800ad3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4a22      	ldr	r2, [pc, #136]	; (800adcc <TIM_OC4_SetConfig+0xb4>)
 800ad44:	4013      	ands	r3, r2
 800ad46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	4a21      	ldr	r2, [pc, #132]	; (800add0 <TIM_OC4_SetConfig+0xb8>)
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	021b      	lsls	r3, r3, #8
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	4a1d      	ldr	r2, [pc, #116]	; (800add4 <TIM_OC4_SetConfig+0xbc>)
 800ad60:	4013      	ands	r3, r2
 800ad62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	031b      	lsls	r3, r3, #12
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a19      	ldr	r2, [pc, #100]	; (800add8 <TIM_OC4_SetConfig+0xc0>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d00b      	beq.n	800ad90 <TIM_OC4_SetConfig+0x78>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a18      	ldr	r2, [pc, #96]	; (800addc <TIM_OC4_SetConfig+0xc4>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d007      	beq.n	800ad90 <TIM_OC4_SetConfig+0x78>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a17      	ldr	r2, [pc, #92]	; (800ade0 <TIM_OC4_SetConfig+0xc8>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d003      	beq.n	800ad90 <TIM_OC4_SetConfig+0x78>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a16      	ldr	r2, [pc, #88]	; (800ade4 <TIM_OC4_SetConfig+0xcc>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d109      	bne.n	800ada4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	4a15      	ldr	r2, [pc, #84]	; (800ade8 <TIM_OC4_SetConfig+0xd0>)
 800ad94:	4013      	ands	r3, r2
 800ad96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	695b      	ldr	r3, [r3, #20]
 800ad9c:	019b      	lsls	r3, r3, #6
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	685a      	ldr	r2, [r3, #4]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	693a      	ldr	r2, [r7, #16]
 800adbc:	621a      	str	r2, [r3, #32]
}
 800adbe:	46c0      	nop			; (mov r8, r8)
 800adc0:	46bd      	mov	sp, r7
 800adc2:	b006      	add	sp, #24
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	46c0      	nop			; (mov r8, r8)
 800adc8:	ffffefff 	.word	0xffffefff
 800adcc:	feff8fff 	.word	0xfeff8fff
 800add0:	fffffcff 	.word	0xfffffcff
 800add4:	ffffdfff 	.word	0xffffdfff
 800add8:	40012c00 	.word	0x40012c00
 800addc:	40014000 	.word	0x40014000
 800ade0:	40014400 	.word	0x40014400
 800ade4:	40014800 	.word	0x40014800
 800ade8:	ffffbfff 	.word	0xffffbfff

0800adec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b086      	sub	sp, #24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6a1b      	ldr	r3, [r3, #32]
 800adfa:	4a25      	ldr	r2, [pc, #148]	; (800ae90 <TIM_OC5_SetConfig+0xa4>)
 800adfc:	401a      	ands	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a1b      	ldr	r3, [r3, #32]
 800ae06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	4a1f      	ldr	r2, [pc, #124]	; (800ae94 <TIM_OC5_SetConfig+0xa8>)
 800ae18:	4013      	ands	r3, r2
 800ae1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	4a1b      	ldr	r2, [pc, #108]	; (800ae98 <TIM_OC5_SetConfig+0xac>)
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	041b      	lsls	r3, r3, #16
 800ae34:	693a      	ldr	r2, [r7, #16]
 800ae36:	4313      	orrs	r3, r2
 800ae38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4a17      	ldr	r2, [pc, #92]	; (800ae9c <TIM_OC5_SetConfig+0xb0>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d00b      	beq.n	800ae5a <TIM_OC5_SetConfig+0x6e>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4a16      	ldr	r2, [pc, #88]	; (800aea0 <TIM_OC5_SetConfig+0xb4>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d007      	beq.n	800ae5a <TIM_OC5_SetConfig+0x6e>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4a15      	ldr	r2, [pc, #84]	; (800aea4 <TIM_OC5_SetConfig+0xb8>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d003      	beq.n	800ae5a <TIM_OC5_SetConfig+0x6e>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4a14      	ldr	r2, [pc, #80]	; (800aea8 <TIM_OC5_SetConfig+0xbc>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d109      	bne.n	800ae6e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	4a0c      	ldr	r2, [pc, #48]	; (800ae90 <TIM_OC5_SetConfig+0xa4>)
 800ae5e:	4013      	ands	r3, r2
 800ae60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	695b      	ldr	r3, [r3, #20]
 800ae66:	021b      	lsls	r3, r3, #8
 800ae68:	697a      	ldr	r2, [r7, #20]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	697a      	ldr	r2, [r7, #20]
 800ae72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	685a      	ldr	r2, [r3, #4]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	693a      	ldr	r2, [r7, #16]
 800ae86:	621a      	str	r2, [r3, #32]
}
 800ae88:	46c0      	nop			; (mov r8, r8)
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	b006      	add	sp, #24
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	fffeffff 	.word	0xfffeffff
 800ae94:	fffeff8f 	.word	0xfffeff8f
 800ae98:	fffdffff 	.word	0xfffdffff
 800ae9c:	40012c00 	.word	0x40012c00
 800aea0:	40014000 	.word	0x40014000
 800aea4:	40014400 	.word	0x40014400
 800aea8:	40014800 	.word	0x40014800

0800aeac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	4a26      	ldr	r2, [pc, #152]	; (800af54 <TIM_OC6_SetConfig+0xa8>)
 800aebc:	401a      	ands	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4a20      	ldr	r2, [pc, #128]	; (800af58 <TIM_OC6_SetConfig+0xac>)
 800aed8:	4013      	ands	r3, r2
 800aeda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	021b      	lsls	r3, r3, #8
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	4313      	orrs	r3, r2
 800aee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	4a1c      	ldr	r2, [pc, #112]	; (800af5c <TIM_OC6_SetConfig+0xb0>)
 800aeec:	4013      	ands	r3, r2
 800aeee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	051b      	lsls	r3, r3, #20
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a18      	ldr	r2, [pc, #96]	; (800af60 <TIM_OC6_SetConfig+0xb4>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d00b      	beq.n	800af1c <TIM_OC6_SetConfig+0x70>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a17      	ldr	r2, [pc, #92]	; (800af64 <TIM_OC6_SetConfig+0xb8>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d007      	beq.n	800af1c <TIM_OC6_SetConfig+0x70>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a16      	ldr	r2, [pc, #88]	; (800af68 <TIM_OC6_SetConfig+0xbc>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d003      	beq.n	800af1c <TIM_OC6_SetConfig+0x70>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a15      	ldr	r2, [pc, #84]	; (800af6c <TIM_OC6_SetConfig+0xc0>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d109      	bne.n	800af30 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	4a14      	ldr	r2, [pc, #80]	; (800af70 <TIM_OC6_SetConfig+0xc4>)
 800af20:	4013      	ands	r3, r2
 800af22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	029b      	lsls	r3, r3, #10
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	4313      	orrs	r3, r2
 800af2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	685a      	ldr	r2, [r3, #4]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	621a      	str	r2, [r3, #32]
}
 800af4a:	46c0      	nop			; (mov r8, r8)
 800af4c:	46bd      	mov	sp, r7
 800af4e:	b006      	add	sp, #24
 800af50:	bd80      	pop	{r7, pc}
 800af52:	46c0      	nop			; (mov r8, r8)
 800af54:	ffefffff 	.word	0xffefffff
 800af58:	feff8fff 	.word	0xfeff8fff
 800af5c:	ffdfffff 	.word	0xffdfffff
 800af60:	40012c00 	.word	0x40012c00
 800af64:	40014000 	.word	0x40014000
 800af68:	40014400 	.word	0x40014400
 800af6c:	40014800 	.word	0x40014800
 800af70:	fffbffff 	.word	0xfffbffff

0800af74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6a1b      	ldr	r3, [r3, #32]
 800af84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	2201      	movs	r2, #1
 800af8c:	4393      	bics	r3, r2
 800af8e:	001a      	movs	r2, r3
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	22f0      	movs	r2, #240	; 0xf0
 800af9e:	4393      	bics	r3, r2
 800afa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	011b      	lsls	r3, r3, #4
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	220a      	movs	r2, #10
 800afb0:	4393      	bics	r3, r2
 800afb2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800afb4:	697a      	ldr	r2, [r7, #20]
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	4313      	orrs	r3, r2
 800afba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	621a      	str	r2, [r3, #32]
}
 800afc8:	46c0      	nop			; (mov r8, r8)
 800afca:	46bd      	mov	sp, r7
 800afcc:	b006      	add	sp, #24
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6a1b      	ldr	r3, [r3, #32]
 800afe0:	2210      	movs	r2, #16
 800afe2:	4393      	bics	r3, r2
 800afe4:	001a      	movs	r2, r3
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	699b      	ldr	r3, [r3, #24]
 800afee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6a1b      	ldr	r3, [r3, #32]
 800aff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	4a0d      	ldr	r2, [pc, #52]	; (800b030 <TIM_TI2_ConfigInputStage+0x60>)
 800affa:	4013      	ands	r3, r2
 800affc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	031b      	lsls	r3, r3, #12
 800b002:	697a      	ldr	r2, [r7, #20]
 800b004:	4313      	orrs	r3, r2
 800b006:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	22a0      	movs	r2, #160	; 0xa0
 800b00c:	4393      	bics	r3, r2
 800b00e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	011b      	lsls	r3, r3, #4
 800b014:	693a      	ldr	r2, [r7, #16]
 800b016:	4313      	orrs	r3, r2
 800b018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	697a      	ldr	r2, [r7, #20]
 800b01e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	693a      	ldr	r2, [r7, #16]
 800b024:	621a      	str	r2, [r3, #32]
}
 800b026:	46c0      	nop			; (mov r8, r8)
 800b028:	46bd      	mov	sp, r7
 800b02a:	b006      	add	sp, #24
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	46c0      	nop			; (mov r8, r8)
 800b030:	ffff0fff 	.word	0xffff0fff

0800b034 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	4a08      	ldr	r2, [pc, #32]	; (800b068 <TIM_ITRx_SetConfig+0x34>)
 800b048:	4013      	ands	r3, r2
 800b04a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b04c:	683a      	ldr	r2, [r7, #0]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	4313      	orrs	r3, r2
 800b052:	2207      	movs	r2, #7
 800b054:	4313      	orrs	r3, r2
 800b056:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	609a      	str	r2, [r3, #8]
}
 800b05e:	46c0      	nop			; (mov r8, r8)
 800b060:	46bd      	mov	sp, r7
 800b062:	b004      	add	sp, #16
 800b064:	bd80      	pop	{r7, pc}
 800b066:	46c0      	nop			; (mov r8, r8)
 800b068:	ffcfff8f 	.word	0xffcfff8f

0800b06c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b086      	sub	sp, #24
 800b070:	af00      	add	r7, sp, #0
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
 800b078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	4a09      	ldr	r2, [pc, #36]	; (800b0a8 <TIM_ETR_SetConfig+0x3c>)
 800b084:	4013      	ands	r3, r2
 800b086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	021a      	lsls	r2, r3, #8
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	431a      	orrs	r2, r3
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	4313      	orrs	r3, r2
 800b094:	697a      	ldr	r2, [r7, #20]
 800b096:	4313      	orrs	r3, r2
 800b098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	609a      	str	r2, [r3, #8]
}
 800b0a0:	46c0      	nop			; (mov r8, r8)
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	b006      	add	sp, #24
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	ffff00ff 	.word	0xffff00ff

0800b0ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	221f      	movs	r2, #31
 800b0bc:	4013      	ands	r3, r2
 800b0be:	2201      	movs	r2, #1
 800b0c0:	409a      	lsls	r2, r3
 800b0c2:	0013      	movs	r3, r2
 800b0c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	43d2      	mvns	r2, r2
 800b0ce:	401a      	ands	r2, r3
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6a1a      	ldr	r2, [r3, #32]
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	211f      	movs	r1, #31
 800b0dc:	400b      	ands	r3, r1
 800b0de:	6879      	ldr	r1, [r7, #4]
 800b0e0:	4099      	lsls	r1, r3
 800b0e2:	000b      	movs	r3, r1
 800b0e4:	431a      	orrs	r2, r3
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	621a      	str	r2, [r3, #32]
}
 800b0ea:	46c0      	nop			; (mov r8, r8)
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	b006      	add	sp, #24
 800b0f0:	bd80      	pop	{r7, pc}
	...

0800b0f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	223c      	movs	r2, #60	; 0x3c
 800b102:	5c9b      	ldrb	r3, [r3, r2]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d101      	bne.n	800b10c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b108:	2302      	movs	r3, #2
 800b10a:	e055      	b.n	800b1b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	223c      	movs	r2, #60	; 0x3c
 800b110:	2101      	movs	r1, #1
 800b112:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	223d      	movs	r2, #61	; 0x3d
 800b118:	2102      	movs	r1, #2
 800b11a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a23      	ldr	r2, [pc, #140]	; (800b1c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d108      	bne.n	800b148 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	4a22      	ldr	r2, [pc, #136]	; (800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b13a:	4013      	ands	r3, r2
 800b13c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	4313      	orrs	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2270      	movs	r2, #112	; 0x70
 800b14c:	4393      	bics	r3, r2
 800b14e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	4313      	orrs	r3, r2
 800b158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a16      	ldr	r2, [pc, #88]	; (800b1c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d00f      	beq.n	800b18c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	2380      	movs	r3, #128	; 0x80
 800b172:	05db      	lsls	r3, r3, #23
 800b174:	429a      	cmp	r2, r3
 800b176:	d009      	beq.n	800b18c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a12      	ldr	r2, [pc, #72]	; (800b1c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d004      	beq.n	800b18c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a11      	ldr	r2, [pc, #68]	; (800b1cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d10c      	bne.n	800b1a6 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	2280      	movs	r2, #128	; 0x80
 800b190:	4393      	bics	r3, r2
 800b192:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	223d      	movs	r2, #61	; 0x3d
 800b1aa:	2101      	movs	r1, #1
 800b1ac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	223c      	movs	r2, #60	; 0x3c
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	0018      	movs	r0, r3
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	b004      	add	sp, #16
 800b1be:	bd80      	pop	{r7, pc}
 800b1c0:	40012c00 	.word	0x40012c00
 800b1c4:	ff0fffff 	.word	0xff0fffff
 800b1c8:	40000400 	.word	0x40000400
 800b1cc:	40014000 	.word	0x40014000

0800b1d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	223c      	movs	r2, #60	; 0x3c
 800b1e2:	5c9b      	ldrb	r3, [r3, r2]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d101      	bne.n	800b1ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b1e8:	2302      	movs	r3, #2
 800b1ea:	e079      	b.n	800b2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	223c      	movs	r2, #60	; 0x3c
 800b1f0:	2101      	movs	r1, #1
 800b1f2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	22ff      	movs	r2, #255	; 0xff
 800b1f8:	4393      	bics	r3, r2
 800b1fa:	001a      	movs	r2, r3
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	4313      	orrs	r3, r2
 800b202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	4a38      	ldr	r2, [pc, #224]	; (800b2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b208:	401a      	ands	r2, r3
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	4313      	orrs	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	4a35      	ldr	r2, [pc, #212]	; (800b2ec <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b216:	401a      	ands	r2, r3
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	4313      	orrs	r3, r2
 800b21e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4a33      	ldr	r2, [pc, #204]	; (800b2f0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b224:	401a      	ands	r2, r3
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	4a30      	ldr	r2, [pc, #192]	; (800b2f4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b232:	401a      	ands	r2, r3
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	691b      	ldr	r3, [r3, #16]
 800b238:	4313      	orrs	r3, r2
 800b23a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4a2e      	ldr	r2, [pc, #184]	; (800b2f8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b240:	401a      	ands	r2, r3
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	4313      	orrs	r3, r2
 800b248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	4a2b      	ldr	r2, [pc, #172]	; (800b2fc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b24e:	401a      	ands	r2, r3
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b254:	4313      	orrs	r3, r2
 800b256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	4a29      	ldr	r2, [pc, #164]	; (800b300 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b25c:	401a      	ands	r2, r3
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	699b      	ldr	r3, [r3, #24]
 800b262:	041b      	lsls	r3, r3, #16
 800b264:	4313      	orrs	r3, r2
 800b266:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a25      	ldr	r2, [pc, #148]	; (800b304 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d106      	bne.n	800b280 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	4a24      	ldr	r2, [pc, #144]	; (800b308 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b276:	401a      	ands	r2, r3
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	69db      	ldr	r3, [r3, #28]
 800b27c:	4313      	orrs	r3, r2
 800b27e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a1f      	ldr	r2, [pc, #124]	; (800b304 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d121      	bne.n	800b2ce <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	4a1f      	ldr	r2, [pc, #124]	; (800b30c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b28e:	401a      	ands	r2, r3
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b294:	051b      	lsls	r3, r3, #20
 800b296:	4313      	orrs	r3, r2
 800b298:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	4a1c      	ldr	r2, [pc, #112]	; (800b310 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800b29e:	401a      	ands	r2, r3
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	6a1b      	ldr	r3, [r3, #32]
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	4a1a      	ldr	r2, [pc, #104]	; (800b314 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800b2ac:	401a      	ands	r2, r3
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a12      	ldr	r2, [pc, #72]	; (800b304 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d106      	bne.n	800b2ce <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	4a15      	ldr	r2, [pc, #84]	; (800b318 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800b2c4:	401a      	ands	r2, r3
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	223c      	movs	r2, #60	; 0x3c
 800b2da:	2100      	movs	r1, #0
 800b2dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b2de:	2300      	movs	r3, #0
}
 800b2e0:	0018      	movs	r0, r3
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	b004      	add	sp, #16
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	fffffcff 	.word	0xfffffcff
 800b2ec:	fffffbff 	.word	0xfffffbff
 800b2f0:	fffff7ff 	.word	0xfffff7ff
 800b2f4:	ffffefff 	.word	0xffffefff
 800b2f8:	ffffdfff 	.word	0xffffdfff
 800b2fc:	ffffbfff 	.word	0xffffbfff
 800b300:	fff0ffff 	.word	0xfff0ffff
 800b304:	40012c00 	.word	0x40012c00
 800b308:	efffffff 	.word	0xefffffff
 800b30c:	ff0fffff 	.word	0xff0fffff
 800b310:	feffffff 	.word	0xfeffffff
 800b314:	fdffffff 	.word	0xfdffffff
 800b318:	dfffffff 	.word	0xdfffffff

0800b31c <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b08a      	sub	sp, #40	; 0x28
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b328:	2327      	movs	r3, #39	; 0x27
 800b32a:	18fb      	adds	r3, r7, r3
 800b32c:	2200      	movs	r2, #0
 800b32e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	223c      	movs	r2, #60	; 0x3c
 800b334:	5c9b      	ldrb	r3, [r3, r2]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d101      	bne.n	800b33e <HAL_TIMEx_ConfigBreakInput+0x22>
 800b33a:	2302      	movs	r3, #2
 800b33c:	e095      	b.n	800b46a <HAL_TIMEx_ConfigBreakInput+0x14e>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	223c      	movs	r2, #60	; 0x3c
 800b342:	2101      	movs	r1, #1
 800b344:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b04      	cmp	r3, #4
 800b34c:	d019      	beq.n	800b382 <HAL_TIMEx_ConfigBreakInput+0x66>
 800b34e:	d822      	bhi.n	800b396 <HAL_TIMEx_ConfigBreakInput+0x7a>
 800b350:	2b01      	cmp	r3, #1
 800b352:	d002      	beq.n	800b35a <HAL_TIMEx_ConfigBreakInput+0x3e>
 800b354:	2b02      	cmp	r3, #2
 800b356:	d00a      	beq.n	800b36e <HAL_TIMEx_ConfigBreakInput+0x52>
 800b358:	e01d      	b.n	800b396 <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800b35a:	2301      	movs	r3, #1
 800b35c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800b35e:	2300      	movs	r3, #0
 800b360:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800b362:	2380      	movs	r3, #128	; 0x80
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800b368:	2309      	movs	r3, #9
 800b36a:	617b      	str	r3, [r7, #20]
      break;
 800b36c:	e01c      	b.n	800b3a8 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800b36e:	2302      	movs	r3, #2
 800b370:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800b372:	2301      	movs	r3, #1
 800b374:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800b376:	2380      	movs	r3, #128	; 0x80
 800b378:	00db      	lsls	r3, r3, #3
 800b37a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800b37c:	230a      	movs	r3, #10
 800b37e:	617b      	str	r3, [r7, #20]
      break;
 800b380:	e012      	b.n	800b3a8 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800b382:	2304      	movs	r3, #4
 800b384:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800b386:	2302      	movs	r3, #2
 800b388:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800b38a:	2380      	movs	r3, #128	; 0x80
 800b38c:	011b      	lsls	r3, r3, #4
 800b38e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800b390:	230b      	movs	r3, #11
 800b392:	617b      	str	r3, [r7, #20]
      break;
 800b394:	e008      	b.n	800b3a8 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800b396:	2300      	movs	r3, #0
 800b398:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800b39a:	2300      	movs	r3, #0
 800b39c:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	617b      	str	r3, [r7, #20]
      break;
 800b3a6:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d003      	beq.n	800b3b6 <HAL_TIMEx_ConfigBreakInput+0x9a>
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d027      	beq.n	800b404 <HAL_TIMEx_ConfigBreakInput+0xe8>
 800b3b4:	e04d      	b.n	800b452 <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3bc:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b3be:	6a3b      	ldr	r3, [r7, #32]
 800b3c0:	43da      	mvns	r2, r3
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	409a      	lsls	r2, r3
 800b3d0:	0013      	movs	r3, r2
 800b3d2:	6a3a      	ldr	r2, [r7, #32]
 800b3d4:	4013      	ands	r3, r2
 800b3d6:	693a      	ldr	r2, [r7, #16]
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	43da      	mvns	r2, r3
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	689a      	ldr	r2, [r3, #8]
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	409a      	lsls	r2, r3
 800b3ee:	0013      	movs	r3, r2
 800b3f0:	69fa      	ldr	r2, [r7, #28]
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	693a      	ldr	r2, [r7, #16]
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	693a      	ldr	r2, [r7, #16]
 800b400:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800b402:	e02b      	b.n	800b45c <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b40a:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b40c:	6a3b      	ldr	r3, [r7, #32]
 800b40e:	43da      	mvns	r2, r3
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	4013      	ands	r3, r2
 800b414:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	685a      	ldr	r2, [r3, #4]
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	409a      	lsls	r2, r3
 800b41e:	0013      	movs	r3, r2
 800b420:	6a3a      	ldr	r2, [r7, #32]
 800b422:	4013      	ands	r3, r2
 800b424:	693a      	ldr	r2, [r7, #16]
 800b426:	4313      	orrs	r3, r2
 800b428:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	43da      	mvns	r2, r3
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	4013      	ands	r3, r2
 800b432:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689a      	ldr	r2, [r3, #8]
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	409a      	lsls	r2, r3
 800b43c:	0013      	movs	r3, r2
 800b43e:	69fa      	ldr	r2, [r7, #28]
 800b440:	4013      	ands	r3, r2
 800b442:	693a      	ldr	r2, [r7, #16]
 800b444:	4313      	orrs	r3, r2
 800b446:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	693a      	ldr	r2, [r7, #16]
 800b44e:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800b450:	e004      	b.n	800b45c <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 800b452:	2327      	movs	r3, #39	; 0x27
 800b454:	18fb      	adds	r3, r7, r3
 800b456:	2201      	movs	r2, #1
 800b458:	701a      	strb	r2, [r3, #0]
      break;
 800b45a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	223c      	movs	r2, #60	; 0x3c
 800b460:	2100      	movs	r1, #0
 800b462:	5499      	strb	r1, [r3, r2]

  return status;
 800b464:	2327      	movs	r3, #39	; 0x27
 800b466:	18fb      	adds	r3, r7, r3
 800b468:	781b      	ldrb	r3, [r3, #0]
}
 800b46a:	0018      	movs	r0, r3
 800b46c:	46bd      	mov	sp, r7
 800b46e:	b00a      	add	sp, #40	; 0x28
 800b470:	bd80      	pop	{r7, pc}
	...

0800b474 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d101      	bne.n	800b486 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	e03f      	b.n	800b506 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2259      	movs	r2, #89	; 0x59
 800b48a:	5c9b      	ldrb	r3, [r3, r2]
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d107      	bne.n	800b4a2 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2258      	movs	r2, #88	; 0x58
 800b496:	2100      	movs	r1, #0
 800b498:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	0018      	movs	r0, r3
 800b49e:	f7f9 fdab 	bl	8004ff8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2259      	movs	r2, #89	; 0x59
 800b4a6:	2102      	movs	r1, #2
 800b4a8:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2101      	movs	r1, #1
 800b4b6:	438a      	bics	r2, r1
 800b4b8:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	0018      	movs	r0, r3
 800b4be:	f000 fae3 	bl	800ba88 <USART_SetConfig>
 800b4c2:	0003      	movs	r3, r0
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d101      	bne.n	800b4cc <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e01c      	b.n	800b506 <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	685a      	ldr	r2, [r3, #4]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	490e      	ldr	r1, [pc, #56]	; (800b510 <HAL_USART_Init+0x9c>)
 800b4d8:	400a      	ands	r2, r1
 800b4da:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	689a      	ldr	r2, [r3, #8]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	212a      	movs	r1, #42	; 0x2a
 800b4e8:	438a      	bics	r2, r1
 800b4ea:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2101      	movs	r1, #1
 800b4f8:	430a      	orrs	r2, r1
 800b4fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	0018      	movs	r0, r3
 800b500:	f000 fd5e 	bl	800bfc0 <USART_CheckIdleState>
 800b504:	0003      	movs	r3, r0
}
 800b506:	0018      	movs	r0, r3
 800b508:	46bd      	mov	sp, r7
 800b50a:	b002      	add	sp, #8
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	46c0      	nop			; (mov r8, r8)
 800b510:	ffffbfff 	.word	0xffffbfff

0800b514 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b08a      	sub	sp, #40	; 0x28
 800b518:	af02      	add	r7, sp, #8
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	603b      	str	r3, [r7, #0]
 800b520:	1dbb      	adds	r3, r7, #6
 800b522:	801a      	strh	r2, [r3, #0]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2259      	movs	r2, #89	; 0x59
 800b528:	5c9b      	ldrb	r3, [r3, r2]
 800b52a:	b2db      	uxtb	r3, r3
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d000      	beq.n	800b532 <HAL_USART_Transmit+0x1e>
 800b530:	e0a9      	b.n	800b686 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d003      	beq.n	800b540 <HAL_USART_Transmit+0x2c>
 800b538:	1dbb      	adds	r3, r7, #6
 800b53a:	881b      	ldrh	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d101      	bne.n	800b544 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	e0a1      	b.n	800b688 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	689a      	ldr	r2, [r3, #8]
 800b548:	2380      	movs	r3, #128	; 0x80
 800b54a:	015b      	lsls	r3, r3, #5
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d109      	bne.n	800b564 <HAL_USART_Transmit+0x50>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d105      	bne.n	800b564 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	2201      	movs	r2, #1
 800b55c:	4013      	ands	r3, r2
 800b55e:	d001      	beq.n	800b564 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800b560:	2301      	movs	r3, #1
 800b562:	e091      	b.n	800b688 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2258      	movs	r2, #88	; 0x58
 800b568:	5c9b      	ldrb	r3, [r3, r2]
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d101      	bne.n	800b572 <HAL_USART_Transmit+0x5e>
 800b56e:	2302      	movs	r3, #2
 800b570:	e08a      	b.n	800b688 <HAL_USART_Transmit+0x174>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2258      	movs	r2, #88	; 0x58
 800b576:	2101      	movs	r1, #1
 800b578:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2259      	movs	r2, #89	; 0x59
 800b584:	2112      	movs	r1, #18
 800b586:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b588:	f7f9 ff5e 	bl	8005448 <HAL_GetTick>
 800b58c:	0003      	movs	r3, r0
 800b58e:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	1dba      	adds	r2, r7, #6
 800b594:	8812      	ldrh	r2, [r2, #0]
 800b596:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	1dba      	adds	r2, r7, #6
 800b59c:	8812      	ldrh	r2, [r2, #0]
 800b59e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	689a      	ldr	r2, [r3, #8]
 800b5a4:	2380      	movs	r3, #128	; 0x80
 800b5a6:	015b      	lsls	r3, r3, #5
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d108      	bne.n	800b5be <HAL_USART_Transmit+0xaa>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	691b      	ldr	r3, [r3, #16]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d104      	bne.n	800b5be <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	61bb      	str	r3, [r7, #24]
 800b5bc:	e003      	b.n	800b5c6 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800b5c6:	e02a      	b.n	800b61e <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b5c8:	697a      	ldr	r2, [r7, #20]
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	0013      	movs	r3, r2
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	2180      	movs	r1, #128	; 0x80
 800b5d6:	f000 fa22 	bl	800ba1e <USART_WaitOnFlagUntilTimeout>
 800b5da:	1e03      	subs	r3, r0, #0
 800b5dc:	d001      	beq.n	800b5e2 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	e052      	b.n	800b688 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10b      	bne.n	800b600 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	881b      	ldrh	r3, [r3, #0]
 800b5ec:	001a      	movs	r2, r3
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	05d2      	lsls	r2, r2, #23
 800b5f4:	0dd2      	lsrs	r2, r2, #23
 800b5f6:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800b5f8:	69bb      	ldr	r3, [r7, #24]
 800b5fa:	3302      	adds	r3, #2
 800b5fc:	61bb      	str	r3, [r7, #24]
 800b5fe:	e007      	b.n	800b610 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	781a      	ldrb	r2, [r3, #0]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	3301      	adds	r3, #1
 800b60e:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b614:	b29b      	uxth	r3, r3
 800b616:	3b01      	subs	r3, #1
 800b618:	b29a      	uxth	r2, r3
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b622:	b29b      	uxth	r3, r3
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1cf      	bne.n	800b5c8 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b628:	697a      	ldr	r2, [r7, #20]
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	0013      	movs	r3, r2
 800b632:	2200      	movs	r2, #0
 800b634:	2140      	movs	r1, #64	; 0x40
 800b636:	f000 f9f2 	bl	800ba1e <USART_WaitOnFlagUntilTimeout>
 800b63a:	1e03      	subs	r3, r0, #0
 800b63c:	d001      	beq.n	800b642 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800b63e:	2303      	movs	r3, #3
 800b640:	e022      	b.n	800b688 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2240      	movs	r2, #64	; 0x40
 800b648:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2208      	movs	r2, #8
 800b650:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	699a      	ldr	r2, [r3, #24]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2108      	movs	r1, #8
 800b65e:	430a      	orrs	r2, r1
 800b660:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	699a      	ldr	r2, [r3, #24]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2110      	movs	r1, #16
 800b66e:	430a      	orrs	r2, r1
 800b670:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2259      	movs	r2, #89	; 0x59
 800b676:	2101      	movs	r1, #1
 800b678:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2258      	movs	r2, #88	; 0x58
 800b67e:	2100      	movs	r1, #0
 800b680:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	e000      	b.n	800b688 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b686:	2302      	movs	r3, #2
  }
}
 800b688:	0018      	movs	r0, r3
 800b68a:	46bd      	mov	sp, r7
 800b68c:	b008      	add	sp, #32
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b088      	sub	sp, #32
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	69db      	ldr	r3, [r3, #28]
 800b69e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	4ab3      	ldr	r2, [pc, #716]	; (800b980 <HAL_USART_IRQHandler+0x2f0>)
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d117      	bne.n	800b6ee <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	2220      	movs	r2, #32
 800b6c2:	4013      	ands	r3, r2
 800b6c4:	d013      	beq.n	800b6ee <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	2220      	movs	r2, #32
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	d104      	bne.n	800b6d8 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b6ce:	697a      	ldr	r2, [r7, #20]
 800b6d0:	2380      	movs	r3, #128	; 0x80
 800b6d2:	055b      	lsls	r3, r3, #21
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	d00a      	beq.n	800b6ee <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d100      	bne.n	800b6e2 <HAL_USART_IRQHandler+0x52>
 800b6e0:	e14a      	b.n	800b978 <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	0010      	movs	r0, r2
 800b6ea:	4798      	blx	r3
      }
      return;
 800b6ec:	e144      	b.n	800b978 <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d100      	bne.n	800b6f6 <HAL_USART_IRQHandler+0x66>
 800b6f4:	e100      	b.n	800b8f8 <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	4aa2      	ldr	r2, [pc, #648]	; (800b984 <HAL_USART_IRQHandler+0x2f4>)
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	d105      	bne.n	800b70a <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800b6fe:	69ba      	ldr	r2, [r7, #24]
 800b700:	2390      	movs	r3, #144	; 0x90
 800b702:	005b      	lsls	r3, r3, #1
 800b704:	4013      	ands	r3, r2
 800b706:	d100      	bne.n	800b70a <HAL_USART_IRQHandler+0x7a>
 800b708:	e0f6      	b.n	800b8f8 <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	2201      	movs	r2, #1
 800b70e:	4013      	ands	r3, r2
 800b710:	d00e      	beq.n	800b730 <HAL_USART_IRQHandler+0xa0>
 800b712:	69ba      	ldr	r2, [r7, #24]
 800b714:	2380      	movs	r3, #128	; 0x80
 800b716:	005b      	lsls	r3, r3, #1
 800b718:	4013      	ands	r3, r2
 800b71a:	d009      	beq.n	800b730 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2201      	movs	r2, #1
 800b722:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b728:	2201      	movs	r2, #1
 800b72a:	431a      	orrs	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	2202      	movs	r2, #2
 800b734:	4013      	ands	r3, r2
 800b736:	d00d      	beq.n	800b754 <HAL_USART_IRQHandler+0xc4>
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	2201      	movs	r2, #1
 800b73c:	4013      	ands	r3, r2
 800b73e:	d009      	beq.n	800b754 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2202      	movs	r2, #2
 800b746:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b74c:	2204      	movs	r2, #4
 800b74e:	431a      	orrs	r2, r3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	2204      	movs	r2, #4
 800b758:	4013      	ands	r3, r2
 800b75a:	d00d      	beq.n	800b778 <HAL_USART_IRQHandler+0xe8>
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	2201      	movs	r2, #1
 800b760:	4013      	ands	r3, r2
 800b762:	d009      	beq.n	800b778 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2204      	movs	r2, #4
 800b76a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b770:	2202      	movs	r2, #2
 800b772:	431a      	orrs	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	2208      	movs	r2, #8
 800b77c:	4013      	ands	r3, r2
 800b77e:	d011      	beq.n	800b7a4 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	2220      	movs	r2, #32
 800b784:	4013      	ands	r3, r2
 800b786:	d103      	bne.n	800b790 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	4a7e      	ldr	r2, [pc, #504]	; (800b984 <HAL_USART_IRQHandler+0x2f4>)
 800b78c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b78e:	d009      	beq.n	800b7a4 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2208      	movs	r2, #8
 800b796:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b79c:	2208      	movs	r2, #8
 800b79e:	431a      	orrs	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b7a4:	69fa      	ldr	r2, [r7, #28]
 800b7a6:	2380      	movs	r3, #128	; 0x80
 800b7a8:	011b      	lsls	r3, r3, #4
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	d00f      	beq.n	800b7ce <HAL_USART_IRQHandler+0x13e>
 800b7ae:	69ba      	ldr	r2, [r7, #24]
 800b7b0:	2380      	movs	r3, #128	; 0x80
 800b7b2:	04db      	lsls	r3, r3, #19
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	d00a      	beq.n	800b7ce <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2280      	movs	r2, #128	; 0x80
 800b7be:	0112      	lsls	r2, r2, #4
 800b7c0:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7c6:	2280      	movs	r2, #128	; 0x80
 800b7c8:	431a      	orrs	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7ce:	69fa      	ldr	r2, [r7, #28]
 800b7d0:	2380      	movs	r3, #128	; 0x80
 800b7d2:	019b      	lsls	r3, r3, #6
 800b7d4:	4013      	ands	r3, r2
 800b7d6:	d01a      	beq.n	800b80e <HAL_USART_IRQHandler+0x17e>
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	4013      	ands	r3, r2
 800b7de:	d016      	beq.n	800b80e <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2259      	movs	r2, #89	; 0x59
 800b7e4:	5c9b      	ldrb	r3, [r3, r2]
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	2b22      	cmp	r3, #34	; 0x22
 800b7ea:	d105      	bne.n	800b7f8 <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2280      	movs	r2, #128	; 0x80
 800b7f2:	0192      	lsls	r2, r2, #6
 800b7f4:	621a      	str	r2, [r3, #32]
        return;
 800b7f6:	e0ca      	b.n	800b98e <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2280      	movs	r2, #128	; 0x80
 800b7fe:	0192      	lsls	r2, r2, #6
 800b800:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b806:	2220      	movs	r2, #32
 800b808:	431a      	orrs	r2, r3
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b812:	2b00      	cmp	r3, #0
 800b814:	d100      	bne.n	800b818 <HAL_USART_IRQHandler+0x188>
 800b816:	e0b1      	b.n	800b97c <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	2220      	movs	r2, #32
 800b81c:	4013      	ands	r3, r2
 800b81e:	d011      	beq.n	800b844 <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	2220      	movs	r2, #32
 800b824:	4013      	ands	r3, r2
 800b826:	d104      	bne.n	800b832 <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	2380      	movs	r3, #128	; 0x80
 800b82c:	055b      	lsls	r3, r3, #21
 800b82e:	4013      	ands	r3, r2
 800b830:	d008      	beq.n	800b844 <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b836:	2b00      	cmp	r3, #0
 800b838:	d004      	beq.n	800b844 <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	0010      	movs	r0, r2
 800b842:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b848:	2208      	movs	r2, #8
 800b84a:	4013      	ands	r3, r2
 800b84c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	2240      	movs	r2, #64	; 0x40
 800b856:	4013      	ands	r3, r2
 800b858:	2b40      	cmp	r3, #64	; 0x40
 800b85a:	d002      	beq.n	800b862 <HAL_USART_IRQHandler+0x1d2>
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d040      	beq.n	800b8e4 <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	0018      	movs	r0, r3
 800b866:	f000 f8a5 	bl	800b9b4 <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	2240      	movs	r2, #64	; 0x40
 800b872:	4013      	ands	r3, r2
 800b874:	2b40      	cmp	r3, #64	; 0x40
 800b876:	d130      	bne.n	800b8da <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	689a      	ldr	r2, [r3, #8]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2140      	movs	r1, #64	; 0x40
 800b884:	438a      	bics	r2, r1
 800b886:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d008      	beq.n	800b8a2 <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b894:	2200      	movs	r2, #0
 800b896:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b89c:	0018      	movs	r0, r3
 800b89e:	f7fa fa65 	bl	8005d6c <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d012      	beq.n	800b8d0 <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ae:	4a36      	ldr	r2, [pc, #216]	; (800b988 <HAL_USART_IRQHandler+0x2f8>)
 800b8b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8b6:	0018      	movs	r0, r3
 800b8b8:	f7fa fa58 	bl	8005d6c <HAL_DMA_Abort_IT>
 800b8bc:	1e03      	subs	r3, r0, #0
 800b8be:	d019      	beq.n	800b8f4 <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ca:	0018      	movs	r0, r3
 800b8cc:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b8ce:	e011      	b.n	800b8f4 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	0018      	movs	r0, r3
 800b8d4:	f000 f866 	bl	800b9a4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b8d8:	e00c      	b.n	800b8f4 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	0018      	movs	r0, r3
 800b8de:	f000 f861 	bl	800b9a4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b8e2:	e007      	b.n	800b8f4 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	0018      	movs	r0, r3
 800b8e8:	f000 f85c 	bl	800b9a4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800b8f2:	e043      	b.n	800b97c <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b8f4:	46c0      	nop			; (mov r8, r8)
    return;
 800b8f6:	e041      	b.n	800b97c <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	2280      	movs	r2, #128	; 0x80
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	d012      	beq.n	800b926 <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	2280      	movs	r2, #128	; 0x80
 800b904:	4013      	ands	r3, r2
 800b906:	d104      	bne.n	800b912 <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b908:	697a      	ldr	r2, [r7, #20]
 800b90a:	2380      	movs	r3, #128	; 0x80
 800b90c:	041b      	lsls	r3, r3, #16
 800b90e:	4013      	ands	r3, r2
 800b910:	d009      	beq.n	800b926 <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b916:	2b00      	cmp	r3, #0
 800b918:	d038      	beq.n	800b98c <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	0010      	movs	r0, r2
 800b922:	4798      	blx	r3
    }
    return;
 800b924:	e032      	b.n	800b98c <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	2240      	movs	r2, #64	; 0x40
 800b92a:	4013      	ands	r3, r2
 800b92c:	d008      	beq.n	800b940 <HAL_USART_IRQHandler+0x2b0>
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	2240      	movs	r2, #64	; 0x40
 800b932:	4013      	ands	r3, r2
 800b934:	d004      	beq.n	800b940 <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	0018      	movs	r0, r3
 800b93a:	f000 fb85 	bl	800c048 <USART_EndTransmit_IT>
    return;
 800b93e:	e026      	b.n	800b98e <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b940:	69fa      	ldr	r2, [r7, #28]
 800b942:	2380      	movs	r3, #128	; 0x80
 800b944:	041b      	lsls	r3, r3, #16
 800b946:	4013      	ands	r3, r2
 800b948:	d009      	beq.n	800b95e <HAL_USART_IRQHandler+0x2ce>
 800b94a:	69ba      	ldr	r2, [r7, #24]
 800b94c:	2380      	movs	r3, #128	; 0x80
 800b94e:	05db      	lsls	r3, r3, #23
 800b950:	4013      	ands	r3, r2
 800b952:	d004      	beq.n	800b95e <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	0018      	movs	r0, r3
 800b958:	f000 fbc1 	bl	800c0de <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b95c:	e017      	b.n	800b98e <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b95e:	69fa      	ldr	r2, [r7, #28]
 800b960:	2380      	movs	r3, #128	; 0x80
 800b962:	045b      	lsls	r3, r3, #17
 800b964:	4013      	ands	r3, r2
 800b966:	d012      	beq.n	800b98e <HAL_USART_IRQHandler+0x2fe>
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	da0f      	bge.n	800b98e <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	0018      	movs	r0, r3
 800b972:	f000 fbac 	bl	800c0ce <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b976:	e00a      	b.n	800b98e <HAL_USART_IRQHandler+0x2fe>
      return;
 800b978:	46c0      	nop			; (mov r8, r8)
 800b97a:	e008      	b.n	800b98e <HAL_USART_IRQHandler+0x2fe>
    return;
 800b97c:	46c0      	nop			; (mov r8, r8)
 800b97e:	e006      	b.n	800b98e <HAL_USART_IRQHandler+0x2fe>
 800b980:	0000280f 	.word	0x0000280f
 800b984:	10000001 	.word	0x10000001
 800b988:	0800b9f5 	.word	0x0800b9f5
    return;
 800b98c:	46c0      	nop			; (mov r8, r8)
  }
}
 800b98e:	46bd      	mov	sp, r7
 800b990:	b008      	add	sp, #32
 800b992:	bd80      	pop	{r7, pc}

0800b994 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800b99c:	46c0      	nop			; (mov r8, r8)
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	b002      	add	sp, #8
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800b9ac:	46c0      	nop			; (mov r8, r8)
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	b002      	add	sp, #8
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4909      	ldr	r1, [pc, #36]	; (800b9ec <USART_EndTransfer+0x38>)
 800b9c8:	400a      	ands	r2, r1
 800b9ca:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	689a      	ldr	r2, [r3, #8]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4906      	ldr	r1, [pc, #24]	; (800b9f0 <USART_EndTransfer+0x3c>)
 800b9d8:	400a      	ands	r2, r1
 800b9da:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2259      	movs	r2, #89	; 0x59
 800b9e0:	2101      	movs	r1, #1
 800b9e2:	5499      	strb	r1, [r3, r2]
}
 800b9e4:	46c0      	nop			; (mov r8, r8)
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	b002      	add	sp, #8
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	fffffe1f 	.word	0xfffffe1f
 800b9f0:	ef7ffffe 	.word	0xef7ffffe

0800b9f4 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba00:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2200      	movs	r2, #0
 800ba06:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	0018      	movs	r0, r3
 800ba12:	f7ff ffc7 	bl	800b9a4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800ba16:	46c0      	nop			; (mov r8, r8)
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	b004      	add	sp, #16
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b084      	sub	sp, #16
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	60f8      	str	r0, [r7, #12]
 800ba26:	60b9      	str	r1, [r7, #8]
 800ba28:	603b      	str	r3, [r7, #0]
 800ba2a:	1dfb      	adds	r3, r7, #7
 800ba2c:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800ba2e:	e017      	b.n	800ba60 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	3301      	adds	r3, #1
 800ba34:	d014      	beq.n	800ba60 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba36:	f7f9 fd07 	bl	8005448 <HAL_GetTick>
 800ba3a:	0002      	movs	r2, r0
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	69ba      	ldr	r2, [r7, #24]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d302      	bcc.n	800ba4c <USART_WaitOnFlagUntilTimeout+0x2e>
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d109      	bne.n	800ba60 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2259      	movs	r2, #89	; 0x59
 800ba50:	2101      	movs	r1, #1
 800ba52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2258      	movs	r2, #88	; 0x58
 800ba58:	2100      	movs	r1, #0
 800ba5a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	e00f      	b.n	800ba80 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	69db      	ldr	r3, [r3, #28]
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	4013      	ands	r3, r2
 800ba6a:	68ba      	ldr	r2, [r7, #8]
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	425a      	negs	r2, r3
 800ba70:	4153      	adcs	r3, r2
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	001a      	movs	r2, r3
 800ba76:	1dfb      	adds	r3, r7, #7
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d0d8      	beq.n	800ba30 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	0018      	movs	r0, r3
 800ba82:	46bd      	mov	sp, r7
 800ba84:	b004      	add	sp, #16
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b088      	sub	sp, #32
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800ba90:	231e      	movs	r3, #30
 800ba92:	18fb      	adds	r3, r7, r3
 800ba94:	2200      	movs	r2, #0
 800ba96:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	689a      	ldr	r2, [r3, #8]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	431a      	orrs	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	4313      	orrs	r3, r2
 800baac:	2280      	movs	r2, #128	; 0x80
 800baae:	0212      	lsls	r2, r2, #8
 800bab0:	4313      	orrs	r3, r2
 800bab2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4ab1      	ldr	r2, [pc, #708]	; (800bd80 <USART_SetConfig+0x2f8>)
 800babc:	4013      	ands	r3, r2
 800babe:	0019      	movs	r1, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	697a      	ldr	r2, [r7, #20]
 800bac6:	430a      	orrs	r2, r1
 800bac8:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800baca:	2380      	movs	r3, #128	; 0x80
 800bacc:	011b      	lsls	r3, r3, #4
 800bace:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6a1b      	ldr	r3, [r3, #32]
 800bad4:	697a      	ldr	r2, [r7, #20]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	699a      	ldr	r2, [r3, #24]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	69db      	ldr	r3, [r3, #28]
 800bae2:	4313      	orrs	r3, r2
 800bae4:	697a      	ldr	r2, [r7, #20]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	697a      	ldr	r2, [r7, #20]
 800baf0:	4313      	orrs	r3, r2
 800baf2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	4aa2      	ldr	r2, [pc, #648]	; (800bd84 <USART_SetConfig+0x2fc>)
 800bafc:	4013      	ands	r3, r2
 800bafe:	0019      	movs	r1, r3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	697a      	ldr	r2, [r7, #20]
 800bb06:	430a      	orrs	r2, r1
 800bb08:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb10:	220f      	movs	r2, #15
 800bb12:	4393      	bics	r3, r2
 800bb14:	0019      	movs	r1, r3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	430a      	orrs	r2, r1
 800bb20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a98      	ldr	r2, [pc, #608]	; (800bd88 <USART_SetConfig+0x300>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d127      	bne.n	800bb7c <USART_SetConfig+0xf4>
 800bb2c:	4b97      	ldr	r3, [pc, #604]	; (800bd8c <USART_SetConfig+0x304>)
 800bb2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb30:	2203      	movs	r2, #3
 800bb32:	4013      	ands	r3, r2
 800bb34:	2b03      	cmp	r3, #3
 800bb36:	d017      	beq.n	800bb68 <USART_SetConfig+0xe0>
 800bb38:	d81b      	bhi.n	800bb72 <USART_SetConfig+0xea>
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d00a      	beq.n	800bb54 <USART_SetConfig+0xcc>
 800bb3e:	d818      	bhi.n	800bb72 <USART_SetConfig+0xea>
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d002      	beq.n	800bb4a <USART_SetConfig+0xc2>
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d00a      	beq.n	800bb5e <USART_SetConfig+0xd6>
 800bb48:	e013      	b.n	800bb72 <USART_SetConfig+0xea>
 800bb4a:	231f      	movs	r3, #31
 800bb4c:	18fb      	adds	r3, r7, r3
 800bb4e:	2200      	movs	r2, #0
 800bb50:	701a      	strb	r2, [r3, #0]
 800bb52:	e058      	b.n	800bc06 <USART_SetConfig+0x17e>
 800bb54:	231f      	movs	r3, #31
 800bb56:	18fb      	adds	r3, r7, r3
 800bb58:	2202      	movs	r2, #2
 800bb5a:	701a      	strb	r2, [r3, #0]
 800bb5c:	e053      	b.n	800bc06 <USART_SetConfig+0x17e>
 800bb5e:	231f      	movs	r3, #31
 800bb60:	18fb      	adds	r3, r7, r3
 800bb62:	2204      	movs	r2, #4
 800bb64:	701a      	strb	r2, [r3, #0]
 800bb66:	e04e      	b.n	800bc06 <USART_SetConfig+0x17e>
 800bb68:	231f      	movs	r3, #31
 800bb6a:	18fb      	adds	r3, r7, r3
 800bb6c:	2208      	movs	r2, #8
 800bb6e:	701a      	strb	r2, [r3, #0]
 800bb70:	e049      	b.n	800bc06 <USART_SetConfig+0x17e>
 800bb72:	231f      	movs	r3, #31
 800bb74:	18fb      	adds	r3, r7, r3
 800bb76:	2210      	movs	r2, #16
 800bb78:	701a      	strb	r2, [r3, #0]
 800bb7a:	e044      	b.n	800bc06 <USART_SetConfig+0x17e>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a83      	ldr	r2, [pc, #524]	; (800bd90 <USART_SetConfig+0x308>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d127      	bne.n	800bbd6 <USART_SetConfig+0x14e>
 800bb86:	4b81      	ldr	r3, [pc, #516]	; (800bd8c <USART_SetConfig+0x304>)
 800bb88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb8a:	220c      	movs	r2, #12
 800bb8c:	4013      	ands	r3, r2
 800bb8e:	2b0c      	cmp	r3, #12
 800bb90:	d017      	beq.n	800bbc2 <USART_SetConfig+0x13a>
 800bb92:	d81b      	bhi.n	800bbcc <USART_SetConfig+0x144>
 800bb94:	2b08      	cmp	r3, #8
 800bb96:	d00a      	beq.n	800bbae <USART_SetConfig+0x126>
 800bb98:	d818      	bhi.n	800bbcc <USART_SetConfig+0x144>
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d002      	beq.n	800bba4 <USART_SetConfig+0x11c>
 800bb9e:	2b04      	cmp	r3, #4
 800bba0:	d00a      	beq.n	800bbb8 <USART_SetConfig+0x130>
 800bba2:	e013      	b.n	800bbcc <USART_SetConfig+0x144>
 800bba4:	231f      	movs	r3, #31
 800bba6:	18fb      	adds	r3, r7, r3
 800bba8:	2200      	movs	r2, #0
 800bbaa:	701a      	strb	r2, [r3, #0]
 800bbac:	e02b      	b.n	800bc06 <USART_SetConfig+0x17e>
 800bbae:	231f      	movs	r3, #31
 800bbb0:	18fb      	adds	r3, r7, r3
 800bbb2:	2202      	movs	r2, #2
 800bbb4:	701a      	strb	r2, [r3, #0]
 800bbb6:	e026      	b.n	800bc06 <USART_SetConfig+0x17e>
 800bbb8:	231f      	movs	r3, #31
 800bbba:	18fb      	adds	r3, r7, r3
 800bbbc:	2204      	movs	r2, #4
 800bbbe:	701a      	strb	r2, [r3, #0]
 800bbc0:	e021      	b.n	800bc06 <USART_SetConfig+0x17e>
 800bbc2:	231f      	movs	r3, #31
 800bbc4:	18fb      	adds	r3, r7, r3
 800bbc6:	2208      	movs	r2, #8
 800bbc8:	701a      	strb	r2, [r3, #0]
 800bbca:	e01c      	b.n	800bc06 <USART_SetConfig+0x17e>
 800bbcc:	231f      	movs	r3, #31
 800bbce:	18fb      	adds	r3, r7, r3
 800bbd0:	2210      	movs	r2, #16
 800bbd2:	701a      	strb	r2, [r3, #0]
 800bbd4:	e017      	b.n	800bc06 <USART_SetConfig+0x17e>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a6e      	ldr	r2, [pc, #440]	; (800bd94 <USART_SetConfig+0x30c>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d104      	bne.n	800bbea <USART_SetConfig+0x162>
 800bbe0:	231f      	movs	r3, #31
 800bbe2:	18fb      	adds	r3, r7, r3
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	701a      	strb	r2, [r3, #0]
 800bbe8:	e00d      	b.n	800bc06 <USART_SetConfig+0x17e>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a6a      	ldr	r2, [pc, #424]	; (800bd98 <USART_SetConfig+0x310>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d104      	bne.n	800bbfe <USART_SetConfig+0x176>
 800bbf4:	231f      	movs	r3, #31
 800bbf6:	18fb      	adds	r3, r7, r3
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	701a      	strb	r2, [r3, #0]
 800bbfc:	e003      	b.n	800bc06 <USART_SetConfig+0x17e>
 800bbfe:	231f      	movs	r3, #31
 800bc00:	18fb      	adds	r3, r7, r3
 800bc02:	2210      	movs	r2, #16
 800bc04:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800bc06:	231f      	movs	r3, #31
 800bc08:	18fb      	adds	r3, r7, r3
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	2b08      	cmp	r3, #8
 800bc0e:	d100      	bne.n	800bc12 <USART_SetConfig+0x18a>
 800bc10:	e139      	b.n	800be86 <USART_SetConfig+0x3fe>
 800bc12:	dd00      	ble.n	800bc16 <USART_SetConfig+0x18e>
 800bc14:	e195      	b.n	800bf42 <USART_SetConfig+0x4ba>
 800bc16:	2b04      	cmp	r3, #4
 800bc18:	d100      	bne.n	800bc1c <USART_SetConfig+0x194>
 800bc1a:	e0d3      	b.n	800bdc4 <USART_SetConfig+0x33c>
 800bc1c:	dd00      	ble.n	800bc20 <USART_SetConfig+0x198>
 800bc1e:	e190      	b.n	800bf42 <USART_SetConfig+0x4ba>
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d003      	beq.n	800bc2c <USART_SetConfig+0x1a4>
 800bc24:	2b02      	cmp	r3, #2
 800bc26:	d100      	bne.n	800bc2a <USART_SetConfig+0x1a2>
 800bc28:	e061      	b.n	800bcee <USART_SetConfig+0x266>
 800bc2a:	e18a      	b.n	800bf42 <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc2c:	f7fc fdb2 	bl	8008794 <HAL_RCC_GetPCLK1Freq>
 800bc30:	0003      	movs	r3, r0
 800bc32:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d044      	beq.n	800bcc6 <USART_SetConfig+0x23e>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d03e      	beq.n	800bcc2 <USART_SetConfig+0x23a>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d038      	beq.n	800bcbe <USART_SetConfig+0x236>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	2b03      	cmp	r3, #3
 800bc52:	d032      	beq.n	800bcba <USART_SetConfig+0x232>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc58:	2b04      	cmp	r3, #4
 800bc5a:	d02c      	beq.n	800bcb6 <USART_SetConfig+0x22e>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc60:	2b05      	cmp	r3, #5
 800bc62:	d026      	beq.n	800bcb2 <USART_SetConfig+0x22a>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc68:	2b06      	cmp	r3, #6
 800bc6a:	d020      	beq.n	800bcae <USART_SetConfig+0x226>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc70:	2b07      	cmp	r3, #7
 800bc72:	d01a      	beq.n	800bcaa <USART_SetConfig+0x222>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc78:	2b08      	cmp	r3, #8
 800bc7a:	d014      	beq.n	800bca6 <USART_SetConfig+0x21e>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc80:	2b09      	cmp	r3, #9
 800bc82:	d00e      	beq.n	800bca2 <USART_SetConfig+0x21a>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc88:	2b0a      	cmp	r3, #10
 800bc8a:	d008      	beq.n	800bc9e <USART_SetConfig+0x216>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc90:	2b0b      	cmp	r3, #11
 800bc92:	d102      	bne.n	800bc9a <USART_SetConfig+0x212>
 800bc94:	2380      	movs	r3, #128	; 0x80
 800bc96:	005b      	lsls	r3, r3, #1
 800bc98:	e016      	b.n	800bcc8 <USART_SetConfig+0x240>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e014      	b.n	800bcc8 <USART_SetConfig+0x240>
 800bc9e:	2380      	movs	r3, #128	; 0x80
 800bca0:	e012      	b.n	800bcc8 <USART_SetConfig+0x240>
 800bca2:	2340      	movs	r3, #64	; 0x40
 800bca4:	e010      	b.n	800bcc8 <USART_SetConfig+0x240>
 800bca6:	2320      	movs	r3, #32
 800bca8:	e00e      	b.n	800bcc8 <USART_SetConfig+0x240>
 800bcaa:	2310      	movs	r3, #16
 800bcac:	e00c      	b.n	800bcc8 <USART_SetConfig+0x240>
 800bcae:	230c      	movs	r3, #12
 800bcb0:	e00a      	b.n	800bcc8 <USART_SetConfig+0x240>
 800bcb2:	230a      	movs	r3, #10
 800bcb4:	e008      	b.n	800bcc8 <USART_SetConfig+0x240>
 800bcb6:	2308      	movs	r3, #8
 800bcb8:	e006      	b.n	800bcc8 <USART_SetConfig+0x240>
 800bcba:	2306      	movs	r3, #6
 800bcbc:	e004      	b.n	800bcc8 <USART_SetConfig+0x240>
 800bcbe:	2304      	movs	r3, #4
 800bcc0:	e002      	b.n	800bcc8 <USART_SetConfig+0x240>
 800bcc2:	2302      	movs	r3, #2
 800bcc4:	e000      	b.n	800bcc8 <USART_SetConfig+0x240>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	0019      	movs	r1, r3
 800bcca:	6938      	ldr	r0, [r7, #16]
 800bccc:	f7f4 fa1a 	bl	8000104 <__udivsi3>
 800bcd0:	0003      	movs	r3, r0
 800bcd2:	005a      	lsls	r2, r3, #1
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	085b      	lsrs	r3, r3, #1
 800bcda:	18d2      	adds	r2, r2, r3
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	0019      	movs	r1, r3
 800bce2:	0010      	movs	r0, r2
 800bce4:	f7f4 fa0e 	bl	8000104 <__udivsi3>
 800bce8:	0003      	movs	r3, r0
 800bcea:	61bb      	str	r3, [r7, #24]
      break;
 800bcec:	e12e      	b.n	800bf4c <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d052      	beq.n	800bd9c <USART_SetConfig+0x314>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d03e      	beq.n	800bd7c <USART_SetConfig+0x2f4>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	d038      	beq.n	800bd78 <USART_SetConfig+0x2f0>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	d032      	beq.n	800bd74 <USART_SetConfig+0x2ec>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd12:	2b04      	cmp	r3, #4
 800bd14:	d02c      	beq.n	800bd70 <USART_SetConfig+0x2e8>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd1a:	2b05      	cmp	r3, #5
 800bd1c:	d026      	beq.n	800bd6c <USART_SetConfig+0x2e4>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd22:	2b06      	cmp	r3, #6
 800bd24:	d020      	beq.n	800bd68 <USART_SetConfig+0x2e0>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2a:	2b07      	cmp	r3, #7
 800bd2c:	d01a      	beq.n	800bd64 <USART_SetConfig+0x2dc>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd32:	2b08      	cmp	r3, #8
 800bd34:	d014      	beq.n	800bd60 <USART_SetConfig+0x2d8>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3a:	2b09      	cmp	r3, #9
 800bd3c:	d00e      	beq.n	800bd5c <USART_SetConfig+0x2d4>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd42:	2b0a      	cmp	r3, #10
 800bd44:	d008      	beq.n	800bd58 <USART_SetConfig+0x2d0>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4a:	2b0b      	cmp	r3, #11
 800bd4c:	d102      	bne.n	800bd54 <USART_SetConfig+0x2cc>
 800bd4e:	2380      	movs	r3, #128	; 0x80
 800bd50:	005b      	lsls	r3, r3, #1
 800bd52:	e024      	b.n	800bd9e <USART_SetConfig+0x316>
 800bd54:	2301      	movs	r3, #1
 800bd56:	e022      	b.n	800bd9e <USART_SetConfig+0x316>
 800bd58:	2380      	movs	r3, #128	; 0x80
 800bd5a:	e020      	b.n	800bd9e <USART_SetConfig+0x316>
 800bd5c:	2340      	movs	r3, #64	; 0x40
 800bd5e:	e01e      	b.n	800bd9e <USART_SetConfig+0x316>
 800bd60:	2320      	movs	r3, #32
 800bd62:	e01c      	b.n	800bd9e <USART_SetConfig+0x316>
 800bd64:	2310      	movs	r3, #16
 800bd66:	e01a      	b.n	800bd9e <USART_SetConfig+0x316>
 800bd68:	230c      	movs	r3, #12
 800bd6a:	e018      	b.n	800bd9e <USART_SetConfig+0x316>
 800bd6c:	230a      	movs	r3, #10
 800bd6e:	e016      	b.n	800bd9e <USART_SetConfig+0x316>
 800bd70:	2308      	movs	r3, #8
 800bd72:	e014      	b.n	800bd9e <USART_SetConfig+0x316>
 800bd74:	2306      	movs	r3, #6
 800bd76:	e012      	b.n	800bd9e <USART_SetConfig+0x316>
 800bd78:	2304      	movs	r3, #4
 800bd7a:	e010      	b.n	800bd9e <USART_SetConfig+0x316>
 800bd7c:	2302      	movs	r3, #2
 800bd7e:	e00e      	b.n	800bd9e <USART_SetConfig+0x316>
 800bd80:	cfff69f3 	.word	0xcfff69f3
 800bd84:	ffffc0f6 	.word	0xffffc0f6
 800bd88:	40013800 	.word	0x40013800
 800bd8c:	40021000 	.word	0x40021000
 800bd90:	40004400 	.word	0x40004400
 800bd94:	40004800 	.word	0x40004800
 800bd98:	40004c00 	.word	0x40004c00
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	0019      	movs	r1, r3
 800bda0:	4886      	ldr	r0, [pc, #536]	; (800bfbc <USART_SetConfig+0x534>)
 800bda2:	f7f4 f9af 	bl	8000104 <__udivsi3>
 800bda6:	0003      	movs	r3, r0
 800bda8:	005a      	lsls	r2, r3, #1
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	085b      	lsrs	r3, r3, #1
 800bdb0:	18d2      	adds	r2, r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	0019      	movs	r1, r3
 800bdb8:	0010      	movs	r0, r2
 800bdba:	f7f4 f9a3 	bl	8000104 <__udivsi3>
 800bdbe:	0003      	movs	r3, r0
 800bdc0:	61bb      	str	r3, [r7, #24]
      break;
 800bdc2:	e0c3      	b.n	800bf4c <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800bdc4:	f7fc fc5a 	bl	800867c <HAL_RCC_GetSysClockFreq>
 800bdc8:	0003      	movs	r3, r0
 800bdca:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d044      	beq.n	800be5e <USART_SetConfig+0x3d6>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d03e      	beq.n	800be5a <USART_SetConfig+0x3d2>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	d038      	beq.n	800be56 <USART_SetConfig+0x3ce>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d032      	beq.n	800be52 <USART_SetConfig+0x3ca>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf0:	2b04      	cmp	r3, #4
 800bdf2:	d02c      	beq.n	800be4e <USART_SetConfig+0x3c6>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf8:	2b05      	cmp	r3, #5
 800bdfa:	d026      	beq.n	800be4a <USART_SetConfig+0x3c2>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be00:	2b06      	cmp	r3, #6
 800be02:	d020      	beq.n	800be46 <USART_SetConfig+0x3be>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	2b07      	cmp	r3, #7
 800be0a:	d01a      	beq.n	800be42 <USART_SetConfig+0x3ba>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	2b08      	cmp	r3, #8
 800be12:	d014      	beq.n	800be3e <USART_SetConfig+0x3b6>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be18:	2b09      	cmp	r3, #9
 800be1a:	d00e      	beq.n	800be3a <USART_SetConfig+0x3b2>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be20:	2b0a      	cmp	r3, #10
 800be22:	d008      	beq.n	800be36 <USART_SetConfig+0x3ae>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be28:	2b0b      	cmp	r3, #11
 800be2a:	d102      	bne.n	800be32 <USART_SetConfig+0x3aa>
 800be2c:	2380      	movs	r3, #128	; 0x80
 800be2e:	005b      	lsls	r3, r3, #1
 800be30:	e016      	b.n	800be60 <USART_SetConfig+0x3d8>
 800be32:	2301      	movs	r3, #1
 800be34:	e014      	b.n	800be60 <USART_SetConfig+0x3d8>
 800be36:	2380      	movs	r3, #128	; 0x80
 800be38:	e012      	b.n	800be60 <USART_SetConfig+0x3d8>
 800be3a:	2340      	movs	r3, #64	; 0x40
 800be3c:	e010      	b.n	800be60 <USART_SetConfig+0x3d8>
 800be3e:	2320      	movs	r3, #32
 800be40:	e00e      	b.n	800be60 <USART_SetConfig+0x3d8>
 800be42:	2310      	movs	r3, #16
 800be44:	e00c      	b.n	800be60 <USART_SetConfig+0x3d8>
 800be46:	230c      	movs	r3, #12
 800be48:	e00a      	b.n	800be60 <USART_SetConfig+0x3d8>
 800be4a:	230a      	movs	r3, #10
 800be4c:	e008      	b.n	800be60 <USART_SetConfig+0x3d8>
 800be4e:	2308      	movs	r3, #8
 800be50:	e006      	b.n	800be60 <USART_SetConfig+0x3d8>
 800be52:	2306      	movs	r3, #6
 800be54:	e004      	b.n	800be60 <USART_SetConfig+0x3d8>
 800be56:	2304      	movs	r3, #4
 800be58:	e002      	b.n	800be60 <USART_SetConfig+0x3d8>
 800be5a:	2302      	movs	r3, #2
 800be5c:	e000      	b.n	800be60 <USART_SetConfig+0x3d8>
 800be5e:	2301      	movs	r3, #1
 800be60:	0019      	movs	r1, r3
 800be62:	6938      	ldr	r0, [r7, #16]
 800be64:	f7f4 f94e 	bl	8000104 <__udivsi3>
 800be68:	0003      	movs	r3, r0
 800be6a:	005a      	lsls	r2, r3, #1
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	085b      	lsrs	r3, r3, #1
 800be72:	18d2      	adds	r2, r2, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	0019      	movs	r1, r3
 800be7a:	0010      	movs	r0, r2
 800be7c:	f7f4 f942 	bl	8000104 <__udivsi3>
 800be80:	0003      	movs	r3, r0
 800be82:	61bb      	str	r3, [r7, #24]
      break;
 800be84:	e062      	b.n	800bf4c <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d044      	beq.n	800bf18 <USART_SetConfig+0x490>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be92:	2b01      	cmp	r3, #1
 800be94:	d03e      	beq.n	800bf14 <USART_SetConfig+0x48c>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d038      	beq.n	800bf10 <USART_SetConfig+0x488>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea2:	2b03      	cmp	r3, #3
 800bea4:	d032      	beq.n	800bf0c <USART_SetConfig+0x484>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beaa:	2b04      	cmp	r3, #4
 800beac:	d02c      	beq.n	800bf08 <USART_SetConfig+0x480>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb2:	2b05      	cmp	r3, #5
 800beb4:	d026      	beq.n	800bf04 <USART_SetConfig+0x47c>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beba:	2b06      	cmp	r3, #6
 800bebc:	d020      	beq.n	800bf00 <USART_SetConfig+0x478>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec2:	2b07      	cmp	r3, #7
 800bec4:	d01a      	beq.n	800befc <USART_SetConfig+0x474>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beca:	2b08      	cmp	r3, #8
 800becc:	d014      	beq.n	800bef8 <USART_SetConfig+0x470>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed2:	2b09      	cmp	r3, #9
 800bed4:	d00e      	beq.n	800bef4 <USART_SetConfig+0x46c>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beda:	2b0a      	cmp	r3, #10
 800bedc:	d008      	beq.n	800bef0 <USART_SetConfig+0x468>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee2:	2b0b      	cmp	r3, #11
 800bee4:	d102      	bne.n	800beec <USART_SetConfig+0x464>
 800bee6:	2380      	movs	r3, #128	; 0x80
 800bee8:	005b      	lsls	r3, r3, #1
 800beea:	e016      	b.n	800bf1a <USART_SetConfig+0x492>
 800beec:	2301      	movs	r3, #1
 800beee:	e014      	b.n	800bf1a <USART_SetConfig+0x492>
 800bef0:	2380      	movs	r3, #128	; 0x80
 800bef2:	e012      	b.n	800bf1a <USART_SetConfig+0x492>
 800bef4:	2340      	movs	r3, #64	; 0x40
 800bef6:	e010      	b.n	800bf1a <USART_SetConfig+0x492>
 800bef8:	2320      	movs	r3, #32
 800befa:	e00e      	b.n	800bf1a <USART_SetConfig+0x492>
 800befc:	2310      	movs	r3, #16
 800befe:	e00c      	b.n	800bf1a <USART_SetConfig+0x492>
 800bf00:	230c      	movs	r3, #12
 800bf02:	e00a      	b.n	800bf1a <USART_SetConfig+0x492>
 800bf04:	230a      	movs	r3, #10
 800bf06:	e008      	b.n	800bf1a <USART_SetConfig+0x492>
 800bf08:	2308      	movs	r3, #8
 800bf0a:	e006      	b.n	800bf1a <USART_SetConfig+0x492>
 800bf0c:	2306      	movs	r3, #6
 800bf0e:	e004      	b.n	800bf1a <USART_SetConfig+0x492>
 800bf10:	2304      	movs	r3, #4
 800bf12:	e002      	b.n	800bf1a <USART_SetConfig+0x492>
 800bf14:	2302      	movs	r3, #2
 800bf16:	e000      	b.n	800bf1a <USART_SetConfig+0x492>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	0019      	movs	r1, r3
 800bf1c:	2380      	movs	r3, #128	; 0x80
 800bf1e:	0218      	lsls	r0, r3, #8
 800bf20:	f7f4 f8f0 	bl	8000104 <__udivsi3>
 800bf24:	0003      	movs	r3, r0
 800bf26:	005a      	lsls	r2, r3, #1
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	085b      	lsrs	r3, r3, #1
 800bf2e:	18d2      	adds	r2, r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	0019      	movs	r1, r3
 800bf36:	0010      	movs	r0, r2
 800bf38:	f7f4 f8e4 	bl	8000104 <__udivsi3>
 800bf3c:	0003      	movs	r3, r0
 800bf3e:	61bb      	str	r3, [r7, #24]
      break;
 800bf40:	e004      	b.n	800bf4c <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800bf42:	231e      	movs	r3, #30
 800bf44:	18fb      	adds	r3, r7, r3
 800bf46:	2201      	movs	r2, #1
 800bf48:	701a      	strb	r2, [r3, #0]
      break;
 800bf4a:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	2b0f      	cmp	r3, #15
 800bf50:	d91c      	bls.n	800bf8c <USART_SetConfig+0x504>
 800bf52:	69ba      	ldr	r2, [r7, #24]
 800bf54:	2380      	movs	r3, #128	; 0x80
 800bf56:	025b      	lsls	r3, r3, #9
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d217      	bcs.n	800bf8c <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	b29a      	uxth	r2, r3
 800bf60:	200e      	movs	r0, #14
 800bf62:	183b      	adds	r3, r7, r0
 800bf64:	210f      	movs	r1, #15
 800bf66:	438a      	bics	r2, r1
 800bf68:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	085b      	lsrs	r3, r3, #1
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	2207      	movs	r2, #7
 800bf72:	4013      	ands	r3, r2
 800bf74:	b299      	uxth	r1, r3
 800bf76:	183b      	adds	r3, r7, r0
 800bf78:	183a      	adds	r2, r7, r0
 800bf7a:	8812      	ldrh	r2, [r2, #0]
 800bf7c:	430a      	orrs	r2, r1
 800bf7e:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	183a      	adds	r2, r7, r0
 800bf86:	8812      	ldrh	r2, [r2, #0]
 800bf88:	60da      	str	r2, [r3, #12]
 800bf8a:	e003      	b.n	800bf94 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800bf8c:	231e      	movs	r3, #30
 800bf8e:	18fb      	adds	r3, r7, r3
 800bf90:	2201      	movs	r2, #1
 800bf92:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800bfac:	231e      	movs	r3, #30
 800bfae:	18fb      	adds	r3, r7, r3
 800bfb0:	781b      	ldrb	r3, [r3, #0]
}
 800bfb2:	0018      	movs	r0, r3
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	b008      	add	sp, #32
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	46c0      	nop			; (mov r8, r8)
 800bfbc:	00f42400 	.word	0x00f42400

0800bfc0 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af02      	add	r7, sp, #8
 800bfc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfce:	f7f9 fa3b 	bl	8005448 <HAL_GetTick>
 800bfd2:	0003      	movs	r3, r0
 800bfd4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2208      	movs	r2, #8
 800bfde:	4013      	ands	r3, r2
 800bfe0:	2b08      	cmp	r3, #8
 800bfe2:	d10e      	bne.n	800c002 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800bfe4:	68fa      	ldr	r2, [r7, #12]
 800bfe6:	2380      	movs	r3, #128	; 0x80
 800bfe8:	0399      	lsls	r1, r3, #14
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	23fa      	movs	r3, #250	; 0xfa
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	0013      	movs	r3, r2
 800bff4:	2200      	movs	r2, #0
 800bff6:	f7ff fd12 	bl	800ba1e <USART_WaitOnFlagUntilTimeout>
 800bffa:	1e03      	subs	r3, r0, #0
 800bffc:	d001      	beq.n	800c002 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bffe:	2303      	movs	r3, #3
 800c000:	e01e      	b.n	800c040 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2204      	movs	r2, #4
 800c00a:	4013      	ands	r3, r2
 800c00c:	2b04      	cmp	r3, #4
 800c00e:	d10e      	bne.n	800c02e <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	2380      	movs	r3, #128	; 0x80
 800c014:	03d9      	lsls	r1, r3, #15
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	23fa      	movs	r3, #250	; 0xfa
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	0013      	movs	r3, r2
 800c020:	2200      	movs	r2, #0
 800c022:	f7ff fcfc 	bl	800ba1e <USART_WaitOnFlagUntilTimeout>
 800c026:	1e03      	subs	r3, r0, #0
 800c028:	d001      	beq.n	800c02e <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c02a:	2303      	movs	r3, #3
 800c02c:	e008      	b.n	800c040 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2259      	movs	r2, #89	; 0x59
 800c032:	2101      	movs	r1, #1
 800c034:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2258      	movs	r2, #88	; 0x58
 800c03a:	2100      	movs	r1, #0
 800c03c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	0018      	movs	r0, r3
 800c042:	46bd      	mov	sp, r7
 800c044:	b004      	add	sp, #16
 800c046:	bd80      	pop	{r7, pc}

0800c048 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2140      	movs	r1, #64	; 0x40
 800c05c:	438a      	bics	r2, r1
 800c05e:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	689a      	ldr	r2, [r3, #8]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2101      	movs	r1, #1
 800c06c:	438a      	bics	r2, r1
 800c06e:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2259      	movs	r2, #89	; 0x59
 800c07a:	5c9b      	ldrb	r3, [r3, r2]
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2b12      	cmp	r3, #18
 800c080:	d114      	bne.n	800c0ac <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2208      	movs	r2, #8
 800c088:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	699a      	ldr	r2, [r3, #24]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2108      	movs	r1, #8
 800c096:	430a      	orrs	r2, r1
 800c098:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2259      	movs	r2, #89	; 0x59
 800c09e:	2101      	movs	r1, #1
 800c0a0:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	0018      	movs	r0, r3
 800c0a6:	f7f5 f831 	bl	800110c <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c0aa:	e00c      	b.n	800c0c6 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d107      	bne.n	800c0c6 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2259      	movs	r2, #89	; 0x59
 800c0ba:	2101      	movs	r1, #1
 800c0bc:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	0018      	movs	r0, r3
 800c0c2:	f7ff fc67 	bl	800b994 <HAL_USART_TxRxCpltCallback>
}
 800c0c6:	46c0      	nop			; (mov r8, r8)
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	b002      	add	sp, #8
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b082      	sub	sp, #8
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c0d6:	46c0      	nop			; (mov r8, r8)
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	b002      	add	sp, #8
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b082      	sub	sp, #8
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c0e6:	46c0      	nop			; (mov r8, r8)
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	b002      	add	sp, #8
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <LL_GPIO_SetPinMode>:
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	60f8      	str	r0, [r7, #12]
 800c0f6:	60b9      	str	r1, [r7, #8]
 800c0f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	6819      	ldr	r1, [r3, #0]
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	435b      	muls	r3, r3
 800c102:	001a      	movs	r2, r3
 800c104:	0013      	movs	r3, r2
 800c106:	005b      	lsls	r3, r3, #1
 800c108:	189b      	adds	r3, r3, r2
 800c10a:	43db      	mvns	r3, r3
 800c10c:	400b      	ands	r3, r1
 800c10e:	001a      	movs	r2, r3
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	435b      	muls	r3, r3
 800c114:	6879      	ldr	r1, [r7, #4]
 800c116:	434b      	muls	r3, r1
 800c118:	431a      	orrs	r2, r3
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	601a      	str	r2, [r3, #0]
}
 800c11e:	46c0      	nop			; (mov r8, r8)
 800c120:	46bd      	mov	sp, r7
 800c122:	b004      	add	sp, #16
 800c124:	bd80      	pop	{r7, pc}

0800c126 <LL_GPIO_SetPinOutputType>:
{
 800c126:	b580      	push	{r7, lr}
 800c128:	b084      	sub	sp, #16
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	60f8      	str	r0, [r7, #12]
 800c12e:	60b9      	str	r1, [r7, #8]
 800c130:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	43d2      	mvns	r2, r2
 800c13a:	401a      	ands	r2, r3
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	6879      	ldr	r1, [r7, #4]
 800c140:	434b      	muls	r3, r1
 800c142:	431a      	orrs	r2, r3
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	605a      	str	r2, [r3, #4]
}
 800c148:	46c0      	nop			; (mov r8, r8)
 800c14a:	46bd      	mov	sp, r7
 800c14c:	b004      	add	sp, #16
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <LL_GPIO_SetPinSpeed>:
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6899      	ldr	r1, [r3, #8]
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	435b      	muls	r3, r3
 800c164:	001a      	movs	r2, r3
 800c166:	0013      	movs	r3, r2
 800c168:	005b      	lsls	r3, r3, #1
 800c16a:	189b      	adds	r3, r3, r2
 800c16c:	43db      	mvns	r3, r3
 800c16e:	400b      	ands	r3, r1
 800c170:	001a      	movs	r2, r3
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	435b      	muls	r3, r3
 800c176:	6879      	ldr	r1, [r7, #4]
 800c178:	434b      	muls	r3, r1
 800c17a:	431a      	orrs	r2, r3
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	609a      	str	r2, [r3, #8]
}
 800c180:	46c0      	nop			; (mov r8, r8)
 800c182:	46bd      	mov	sp, r7
 800c184:	b004      	add	sp, #16
 800c186:	bd80      	pop	{r7, pc}

0800c188 <LL_GPIO_SetPinPull>:
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	68d9      	ldr	r1, [r3, #12]
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	435b      	muls	r3, r3
 800c19c:	001a      	movs	r2, r3
 800c19e:	0013      	movs	r3, r2
 800c1a0:	005b      	lsls	r3, r3, #1
 800c1a2:	189b      	adds	r3, r3, r2
 800c1a4:	43db      	mvns	r3, r3
 800c1a6:	400b      	ands	r3, r1
 800c1a8:	001a      	movs	r2, r3
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	435b      	muls	r3, r3
 800c1ae:	6879      	ldr	r1, [r7, #4]
 800c1b0:	434b      	muls	r3, r1
 800c1b2:	431a      	orrs	r2, r3
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	60da      	str	r2, [r3, #12]
}
 800c1b8:	46c0      	nop			; (mov r8, r8)
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	b004      	add	sp, #16
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <LL_GPIO_SetAFPin_0_7>:
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6a19      	ldr	r1, [r3, #32]
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	435b      	muls	r3, r3
 800c1d4:	68ba      	ldr	r2, [r7, #8]
 800c1d6:	4353      	muls	r3, r2
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	435a      	muls	r2, r3
 800c1dc:	0013      	movs	r3, r2
 800c1de:	011b      	lsls	r3, r3, #4
 800c1e0:	1a9b      	subs	r3, r3, r2
 800c1e2:	43db      	mvns	r3, r3
 800c1e4:	400b      	ands	r3, r1
 800c1e6:	001a      	movs	r2, r3
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	435b      	muls	r3, r3
 800c1ec:	68b9      	ldr	r1, [r7, #8]
 800c1ee:	434b      	muls	r3, r1
 800c1f0:	68b9      	ldr	r1, [r7, #8]
 800c1f2:	434b      	muls	r3, r1
 800c1f4:	6879      	ldr	r1, [r7, #4]
 800c1f6:	434b      	muls	r3, r1
 800c1f8:	431a      	orrs	r2, r3
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	621a      	str	r2, [r3, #32]
}
 800c1fe:	46c0      	nop			; (mov r8, r8)
 800c200:	46bd      	mov	sp, r7
 800c202:	b004      	add	sp, #16
 800c204:	bd80      	pop	{r7, pc}

0800c206 <LL_GPIO_SetAFPin_8_15>:
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b084      	sub	sp, #16
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	60f8      	str	r0, [r7, #12]
 800c20e:	60b9      	str	r1, [r7, #8]
 800c210:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	0a1b      	lsrs	r3, r3, #8
 800c21a:	68ba      	ldr	r2, [r7, #8]
 800c21c:	0a12      	lsrs	r2, r2, #8
 800c21e:	4353      	muls	r3, r2
 800c220:	68ba      	ldr	r2, [r7, #8]
 800c222:	0a12      	lsrs	r2, r2, #8
 800c224:	4353      	muls	r3, r2
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	0a12      	lsrs	r2, r2, #8
 800c22a:	435a      	muls	r2, r3
 800c22c:	0013      	movs	r3, r2
 800c22e:	011b      	lsls	r3, r3, #4
 800c230:	1a9b      	subs	r3, r3, r2
 800c232:	43db      	mvns	r3, r3
 800c234:	400b      	ands	r3, r1
 800c236:	001a      	movs	r2, r3
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	0a1b      	lsrs	r3, r3, #8
 800c23c:	68b9      	ldr	r1, [r7, #8]
 800c23e:	0a09      	lsrs	r1, r1, #8
 800c240:	434b      	muls	r3, r1
 800c242:	68b9      	ldr	r1, [r7, #8]
 800c244:	0a09      	lsrs	r1, r1, #8
 800c246:	434b      	muls	r3, r1
 800c248:	68b9      	ldr	r1, [r7, #8]
 800c24a:	0a09      	lsrs	r1, r1, #8
 800c24c:	434b      	muls	r3, r1
 800c24e:	6879      	ldr	r1, [r7, #4]
 800c250:	434b      	muls	r3, r1
 800c252:	431a      	orrs	r2, r3
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c258:	46c0      	nop			; (mov r8, r8)
 800c25a:	46bd      	mov	sp, r7
 800c25c:	b004      	add	sp, #16
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800c26a:	2300      	movs	r3, #0
 800c26c:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c26e:	e047      	b.n	800c300 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2101      	movs	r1, #1
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	4091      	lsls	r1, r2
 800c27a:	000a      	movs	r2, r1
 800c27c:	4013      	ands	r3, r2
 800c27e:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d039      	beq.n	800c2fa <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d003      	beq.n	800c296 <LL_GPIO_Init+0x36>
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	2b02      	cmp	r3, #2
 800c294:	d10d      	bne.n	800c2b2 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	689a      	ldr	r2, [r3, #8]
 800c29a:	68b9      	ldr	r1, [r7, #8]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	0018      	movs	r0, r3
 800c2a0:	f7ff ff56 	bl	800c150 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	68da      	ldr	r2, [r3, #12]
 800c2a8:	68b9      	ldr	r1, [r7, #8]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	0018      	movs	r0, r3
 800c2ae:	f7ff ff3a 	bl	800c126 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	691a      	ldr	r2, [r3, #16]
 800c2b6:	68b9      	ldr	r1, [r7, #8]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	0018      	movs	r0, r3
 800c2bc:	f7ff ff64 	bl	800c188 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	d111      	bne.n	800c2ec <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	2bff      	cmp	r3, #255	; 0xff
 800c2cc:	d807      	bhi.n	800c2de <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	695a      	ldr	r2, [r3, #20]
 800c2d2:	68b9      	ldr	r1, [r7, #8]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	0018      	movs	r0, r3
 800c2d8:	f7ff ff72 	bl	800c1c0 <LL_GPIO_SetAFPin_0_7>
 800c2dc:	e006      	b.n	800c2ec <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	695a      	ldr	r2, [r3, #20]
 800c2e2:	68b9      	ldr	r1, [r7, #8]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	0018      	movs	r0, r3
 800c2e8:	f7ff ff8d 	bl	800c206 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	685a      	ldr	r2, [r3, #4]
 800c2f0:	68b9      	ldr	r1, [r7, #8]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	0018      	movs	r0, r3
 800c2f6:	f7ff fefa 	bl	800c0ee <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	40da      	lsrs	r2, r3
 800c308:	1e13      	subs	r3, r2, #0
 800c30a:	d1b1      	bne.n	800c270 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800c30c:	2300      	movs	r3, #0
}
 800c30e:	0018      	movs	r0, r3
 800c310:	46bd      	mov	sp, r7
 800c312:	b004      	add	sp, #16
 800c314:	bd80      	pop	{r7, pc}
	...

0800c318 <LL_RCC_HSI_IsReady>:
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c31c:	4b07      	ldr	r3, [pc, #28]	; (800c33c <LL_RCC_HSI_IsReady+0x24>)
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	2380      	movs	r3, #128	; 0x80
 800c322:	00db      	lsls	r3, r3, #3
 800c324:	401a      	ands	r2, r3
 800c326:	2380      	movs	r3, #128	; 0x80
 800c328:	00db      	lsls	r3, r3, #3
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d101      	bne.n	800c332 <LL_RCC_HSI_IsReady+0x1a>
 800c32e:	2301      	movs	r3, #1
 800c330:	e000      	b.n	800c334 <LL_RCC_HSI_IsReady+0x1c>
 800c332:	2300      	movs	r3, #0
}
 800c334:	0018      	movs	r0, r3
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
 800c33a:	46c0      	nop			; (mov r8, r8)
 800c33c:	40021000 	.word	0x40021000

0800c340 <LL_RCC_LSE_IsReady>:
{
 800c340:	b580      	push	{r7, lr}
 800c342:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c344:	4b05      	ldr	r3, [pc, #20]	; (800c35c <LL_RCC_LSE_IsReady+0x1c>)
 800c346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c348:	2202      	movs	r2, #2
 800c34a:	4013      	ands	r3, r2
 800c34c:	2b02      	cmp	r3, #2
 800c34e:	d101      	bne.n	800c354 <LL_RCC_LSE_IsReady+0x14>
 800c350:	2301      	movs	r3, #1
 800c352:	e000      	b.n	800c356 <LL_RCC_LSE_IsReady+0x16>
 800c354:	2300      	movs	r3, #0
}
 800c356:	0018      	movs	r0, r3
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	40021000 	.word	0x40021000

0800c360 <LL_RCC_GetSysClkSource>:
{
 800c360:	b580      	push	{r7, lr}
 800c362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c364:	4b03      	ldr	r3, [pc, #12]	; (800c374 <LL_RCC_GetSysClkSource+0x14>)
 800c366:	689b      	ldr	r3, [r3, #8]
 800c368:	2238      	movs	r2, #56	; 0x38
 800c36a:	4013      	ands	r3, r2
}
 800c36c:	0018      	movs	r0, r3
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	46c0      	nop			; (mov r8, r8)
 800c374:	40021000 	.word	0x40021000

0800c378 <LL_RCC_GetAHBPrescaler>:
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c37c:	4b03      	ldr	r3, [pc, #12]	; (800c38c <LL_RCC_GetAHBPrescaler+0x14>)
 800c37e:	689a      	ldr	r2, [r3, #8]
 800c380:	23f0      	movs	r3, #240	; 0xf0
 800c382:	011b      	lsls	r3, r3, #4
 800c384:	4013      	ands	r3, r2
}
 800c386:	0018      	movs	r0, r3
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	40021000 	.word	0x40021000

0800c390 <LL_RCC_GetAPB1Prescaler>:
{
 800c390:	b580      	push	{r7, lr}
 800c392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800c394:	4b03      	ldr	r3, [pc, #12]	; (800c3a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 800c396:	689a      	ldr	r2, [r3, #8]
 800c398:	23e0      	movs	r3, #224	; 0xe0
 800c39a:	01db      	lsls	r3, r3, #7
 800c39c:	4013      	ands	r3, r2
}
 800c39e:	0018      	movs	r0, r3
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	40021000 	.word	0x40021000

0800c3a8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800c3b0:	4b05      	ldr	r3, [pc, #20]	; (800c3c8 <LL_RCC_GetUSARTClockSource+0x20>)
 800c3b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	401a      	ands	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	041b      	lsls	r3, r3, #16
 800c3bc:	4313      	orrs	r3, r2
}
 800c3be:	0018      	movs	r0, r3
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	b002      	add	sp, #8
 800c3c4:	bd80      	pop	{r7, pc}
 800c3c6:	46c0      	nop			; (mov r8, r8)
 800c3c8:	40021000 	.word	0x40021000

0800c3cc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c3d0:	4b03      	ldr	r3, [pc, #12]	; (800c3e0 <LL_RCC_PLL_GetN+0x14>)
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	0a1b      	lsrs	r3, r3, #8
 800c3d6:	227f      	movs	r2, #127	; 0x7f
 800c3d8:	4013      	ands	r3, r2
}
 800c3da:	0018      	movs	r0, r3
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	40021000 	.word	0x40021000

0800c3e4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c3e8:	4b03      	ldr	r3, [pc, #12]	; (800c3f8 <LL_RCC_PLL_GetR+0x14>)
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	0f5b      	lsrs	r3, r3, #29
 800c3ee:	075b      	lsls	r3, r3, #29
}
 800c3f0:	0018      	movs	r0, r3
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	46c0      	nop			; (mov r8, r8)
 800c3f8:	40021000 	.word	0x40021000

0800c3fc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c400:	4b03      	ldr	r3, [pc, #12]	; (800c410 <LL_RCC_PLL_GetMainSource+0x14>)
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	2203      	movs	r2, #3
 800c406:	4013      	ands	r3, r2
}
 800c408:	0018      	movs	r0, r3
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	46c0      	nop			; (mov r8, r8)
 800c410:	40021000 	.word	0x40021000

0800c414 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c418:	4b03      	ldr	r3, [pc, #12]	; (800c428 <LL_RCC_PLL_GetDivider+0x14>)
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	2270      	movs	r2, #112	; 0x70
 800c41e:	4013      	ands	r3, r2
}
 800c420:	0018      	movs	r0, r3
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	46c0      	nop			; (mov r8, r8)
 800c428:	40021000 	.word	0x40021000

0800c42c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800c434:	f000 f8a8 	bl	800c588 <RCC_GetSystemClockFreq>
 800c438:	0002      	movs	r2, r0
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	0018      	movs	r0, r3
 800c444:	f000 f8ce 	bl	800c5e4 <RCC_GetHCLKClockFreq>
 800c448:	0002      	movs	r2, r0
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	0018      	movs	r0, r3
 800c454:	f000 f8de 	bl	800c614 <RCC_GetPCLK1ClockFreq>
 800c458:	0002      	movs	r2, r0
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	609a      	str	r2, [r3, #8]
}
 800c45e:	46c0      	nop			; (mov r8, r8)
 800c460:	46bd      	mov	sp, r7
 800c462:	b002      	add	sp, #8
 800c464:	bd80      	pop	{r7, pc}
	...

0800c468 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800c470:	2300      	movs	r3, #0
 800c472:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2b03      	cmp	r3, #3
 800c478:	d134      	bne.n	800c4e4 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	0018      	movs	r0, r3
 800c47e:	f7ff ff93 	bl	800c3a8 <LL_RCC_GetUSARTClockSource>
 800c482:	0003      	movs	r3, r0
 800c484:	4a39      	ldr	r2, [pc, #228]	; (800c56c <LL_RCC_GetUSARTClockFreq+0x104>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d016      	beq.n	800c4b8 <LL_RCC_GetUSARTClockFreq+0x50>
 800c48a:	4a38      	ldr	r2, [pc, #224]	; (800c56c <LL_RCC_GetUSARTClockFreq+0x104>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d81c      	bhi.n	800c4ca <LL_RCC_GetUSARTClockFreq+0x62>
 800c490:	4a37      	ldr	r2, [pc, #220]	; (800c570 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d003      	beq.n	800c49e <LL_RCC_GetUSARTClockFreq+0x36>
 800c496:	4a37      	ldr	r2, [pc, #220]	; (800c574 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d005      	beq.n	800c4a8 <LL_RCC_GetUSARTClockFreq+0x40>
 800c49c:	e015      	b.n	800c4ca <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c49e:	f000 f873 	bl	800c588 <RCC_GetSystemClockFreq>
 800c4a2:	0003      	movs	r3, r0
 800c4a4:	60fb      	str	r3, [r7, #12]
        break;
 800c4a6:	e05c      	b.n	800c562 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c4a8:	f7ff ff36 	bl	800c318 <LL_RCC_HSI_IsReady>
 800c4ac:	0003      	movs	r3, r0
 800c4ae:	2b01      	cmp	r3, #1
 800c4b0:	d150      	bne.n	800c554 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800c4b2:	4b31      	ldr	r3, [pc, #196]	; (800c578 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c4b4:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c4b6:	e04d      	b.n	800c554 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c4b8:	f7ff ff42 	bl	800c340 <LL_RCC_LSE_IsReady>
 800c4bc:	0003      	movs	r3, r0
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d14a      	bne.n	800c558 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800c4c2:	2380      	movs	r3, #128	; 0x80
 800c4c4:	021b      	lsls	r3, r3, #8
 800c4c6:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c4c8:	e046      	b.n	800c558 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c4ca:	f000 f85d 	bl	800c588 <RCC_GetSystemClockFreq>
 800c4ce:	0003      	movs	r3, r0
 800c4d0:	0018      	movs	r0, r3
 800c4d2:	f000 f887 	bl	800c5e4 <RCC_GetHCLKClockFreq>
 800c4d6:	0003      	movs	r3, r0
 800c4d8:	0018      	movs	r0, r3
 800c4da:	f000 f89b 	bl	800c614 <RCC_GetPCLK1ClockFreq>
 800c4de:	0003      	movs	r3, r0
 800c4e0:	60fb      	str	r3, [r7, #12]
        break;
 800c4e2:	e03e      	b.n	800c562 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b0c      	cmp	r3, #12
 800c4e8:	d13b      	bne.n	800c562 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	0018      	movs	r0, r3
 800c4ee:	f7ff ff5b 	bl	800c3a8 <LL_RCC_GetUSARTClockSource>
 800c4f2:	0003      	movs	r3, r0
 800c4f4:	4a21      	ldr	r2, [pc, #132]	; (800c57c <LL_RCC_GetUSARTClockFreq+0x114>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d016      	beq.n	800c528 <LL_RCC_GetUSARTClockFreq+0xc0>
 800c4fa:	4a20      	ldr	r2, [pc, #128]	; (800c57c <LL_RCC_GetUSARTClockFreq+0x114>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d81c      	bhi.n	800c53a <LL_RCC_GetUSARTClockFreq+0xd2>
 800c500:	4a1f      	ldr	r2, [pc, #124]	; (800c580 <LL_RCC_GetUSARTClockFreq+0x118>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d003      	beq.n	800c50e <LL_RCC_GetUSARTClockFreq+0xa6>
 800c506:	4a1f      	ldr	r2, [pc, #124]	; (800c584 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d005      	beq.n	800c518 <LL_RCC_GetUSARTClockFreq+0xb0>
 800c50c:	e015      	b.n	800c53a <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c50e:	f000 f83b 	bl	800c588 <RCC_GetSystemClockFreq>
 800c512:	0003      	movs	r3, r0
 800c514:	60fb      	str	r3, [r7, #12]
        break;
 800c516:	e024      	b.n	800c562 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c518:	f7ff fefe 	bl	800c318 <LL_RCC_HSI_IsReady>
 800c51c:	0003      	movs	r3, r0
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d11c      	bne.n	800c55c <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800c522:	4b15      	ldr	r3, [pc, #84]	; (800c578 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c524:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c526:	e019      	b.n	800c55c <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c528:	f7ff ff0a 	bl	800c340 <LL_RCC_LSE_IsReady>
 800c52c:	0003      	movs	r3, r0
 800c52e:	2b01      	cmp	r3, #1
 800c530:	d116      	bne.n	800c560 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800c532:	2380      	movs	r3, #128	; 0x80
 800c534:	021b      	lsls	r3, r3, #8
 800c536:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c538:	e012      	b.n	800c560 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c53a:	f000 f825 	bl	800c588 <RCC_GetSystemClockFreq>
 800c53e:	0003      	movs	r3, r0
 800c540:	0018      	movs	r0, r3
 800c542:	f000 f84f 	bl	800c5e4 <RCC_GetHCLKClockFreq>
 800c546:	0003      	movs	r3, r0
 800c548:	0018      	movs	r0, r3
 800c54a:	f000 f863 	bl	800c614 <RCC_GetPCLK1ClockFreq>
 800c54e:	0003      	movs	r3, r0
 800c550:	60fb      	str	r3, [r7, #12]
        break;
 800c552:	e006      	b.n	800c562 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c554:	46c0      	nop			; (mov r8, r8)
 800c556:	e004      	b.n	800c562 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c558:	46c0      	nop			; (mov r8, r8)
 800c55a:	e002      	b.n	800c562 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c55c:	46c0      	nop			; (mov r8, r8)
 800c55e:	e000      	b.n	800c562 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c560:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800c562:	68fb      	ldr	r3, [r7, #12]
}
 800c564:	0018      	movs	r0, r3
 800c566:	46bd      	mov	sp, r7
 800c568:	b004      	add	sp, #16
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	00030003 	.word	0x00030003
 800c570:	00030001 	.word	0x00030001
 800c574:	00030002 	.word	0x00030002
 800c578:	00f42400 	.word	0x00f42400
 800c57c:	000c000c 	.word	0x000c000c
 800c580:	000c0004 	.word	0x000c0004
 800c584:	000c0008 	.word	0x000c0008

0800c588 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800c58e:	f7ff fee7 	bl	800c360 <LL_RCC_GetSysClkSource>
 800c592:	0003      	movs	r3, r0
 800c594:	2b08      	cmp	r3, #8
 800c596:	d002      	beq.n	800c59e <RCC_GetSystemClockFreq+0x16>
 800c598:	2b10      	cmp	r3, #16
 800c59a:	d003      	beq.n	800c5a4 <RCC_GetSystemClockFreq+0x1c>
 800c59c:	e007      	b.n	800c5ae <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800c59e:	4b0e      	ldr	r3, [pc, #56]	; (800c5d8 <RCC_GetSystemClockFreq+0x50>)
 800c5a0:	607b      	str	r3, [r7, #4]
      break;
 800c5a2:	e014      	b.n	800c5ce <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800c5a4:	f000 f84c 	bl	800c640 <RCC_PLL_GetFreqDomain_SYS>
 800c5a8:	0003      	movs	r3, r0
 800c5aa:	607b      	str	r3, [r7, #4]
      break;
 800c5ac:	e00f      	b.n	800c5ce <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800c5ae:	4b0b      	ldr	r3, [pc, #44]	; (800c5dc <RCC_GetSystemClockFreq+0x54>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	0adb      	lsrs	r3, r3, #11
 800c5b4:	2207      	movs	r2, #7
 800c5b6:	4013      	ands	r3, r2
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	409a      	lsls	r2, r3
 800c5bc:	0013      	movs	r3, r2
 800c5be:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800c5c0:	6839      	ldr	r1, [r7, #0]
 800c5c2:	4807      	ldr	r0, [pc, #28]	; (800c5e0 <RCC_GetSystemClockFreq+0x58>)
 800c5c4:	f7f3 fd9e 	bl	8000104 <__udivsi3>
 800c5c8:	0003      	movs	r3, r0
 800c5ca:	607b      	str	r3, [r7, #4]
      break;
 800c5cc:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800c5ce:	687b      	ldr	r3, [r7, #4]
}
 800c5d0:	0018      	movs	r0, r3
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	b002      	add	sp, #8
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	007a1200 	.word	0x007a1200
 800c5dc:	40021000 	.word	0x40021000
 800c5e0:	00f42400 	.word	0x00f42400

0800c5e4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800c5ec:	f7ff fec4 	bl	800c378 <LL_RCC_GetAHBPrescaler>
 800c5f0:	0003      	movs	r3, r0
 800c5f2:	0a1b      	lsrs	r3, r3, #8
 800c5f4:	220f      	movs	r2, #15
 800c5f6:	401a      	ands	r2, r3
 800c5f8:	4b05      	ldr	r3, [pc, #20]	; (800c610 <RCC_GetHCLKClockFreq+0x2c>)
 800c5fa:	0092      	lsls	r2, r2, #2
 800c5fc:	58d3      	ldr	r3, [r2, r3]
 800c5fe:	221f      	movs	r2, #31
 800c600:	4013      	ands	r3, r2
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	40da      	lsrs	r2, r3
 800c606:	0013      	movs	r3, r2
}
 800c608:	0018      	movs	r0, r3
 800c60a:	46bd      	mov	sp, r7
 800c60c:	b002      	add	sp, #8
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	08018390 	.word	0x08018390

0800c614 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b082      	sub	sp, #8
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800c61c:	f7ff feb8 	bl	800c390 <LL_RCC_GetAPB1Prescaler>
 800c620:	0003      	movs	r3, r0
 800c622:	0b1a      	lsrs	r2, r3, #12
 800c624:	4b05      	ldr	r3, [pc, #20]	; (800c63c <RCC_GetPCLK1ClockFreq+0x28>)
 800c626:	0092      	lsls	r2, r2, #2
 800c628:	58d3      	ldr	r3, [r2, r3]
 800c62a:	221f      	movs	r2, #31
 800c62c:	4013      	ands	r3, r2
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	40da      	lsrs	r2, r3
 800c632:	0013      	movs	r3, r2
}
 800c634:	0018      	movs	r0, r3
 800c636:	46bd      	mov	sp, r7
 800c638:	b002      	add	sp, #8
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	080183d0 	.word	0x080183d0

0800c640 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800c640:	b590      	push	{r4, r7, lr}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800c646:	f7ff fed9 	bl	800c3fc <LL_RCC_PLL_GetMainSource>
 800c64a:	0003      	movs	r3, r0
 800c64c:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	2b02      	cmp	r3, #2
 800c652:	d003      	beq.n	800c65c <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	2b03      	cmp	r3, #3
 800c658:	d003      	beq.n	800c662 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800c65a:	e005      	b.n	800c668 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800c65c:	4b13      	ldr	r3, [pc, #76]	; (800c6ac <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c65e:	607b      	str	r3, [r7, #4]
      break;
 800c660:	e005      	b.n	800c66e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800c662:	4b13      	ldr	r3, [pc, #76]	; (800c6b0 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800c664:	607b      	str	r3, [r7, #4]
      break;
 800c666:	e002      	b.n	800c66e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800c668:	4b10      	ldr	r3, [pc, #64]	; (800c6ac <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c66a:	607b      	str	r3, [r7, #4]
      break;
 800c66c:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800c66e:	f7ff fead 	bl	800c3cc <LL_RCC_PLL_GetN>
 800c672:	0002      	movs	r2, r0
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	4353      	muls	r3, r2
 800c678:	001c      	movs	r4, r3
 800c67a:	f7ff fecb 	bl	800c414 <LL_RCC_PLL_GetDivider>
 800c67e:	0003      	movs	r3, r0
 800c680:	091b      	lsrs	r3, r3, #4
 800c682:	3301      	adds	r3, #1
 800c684:	0019      	movs	r1, r3
 800c686:	0020      	movs	r0, r4
 800c688:	f7f3 fd3c 	bl	8000104 <__udivsi3>
 800c68c:	0003      	movs	r3, r0
 800c68e:	001c      	movs	r4, r3
 800c690:	f7ff fea8 	bl	800c3e4 <LL_RCC_PLL_GetR>
 800c694:	0003      	movs	r3, r0
 800c696:	0f5b      	lsrs	r3, r3, #29
 800c698:	3301      	adds	r3, #1
 800c69a:	0019      	movs	r1, r3
 800c69c:	0020      	movs	r0, r4
 800c69e:	f7f3 fd31 	bl	8000104 <__udivsi3>
 800c6a2:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800c6a4:	0018      	movs	r0, r3
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	b003      	add	sp, #12
 800c6aa:	bd90      	pop	{r4, r7, pc}
 800c6ac:	00f42400 	.word	0x00f42400
 800c6b0:	007a1200 	.word	0x007a1200

0800c6b4 <LL_USART_IsEnabled>:
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	4013      	ands	r3, r2
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d101      	bne.n	800c6cc <LL_USART_IsEnabled+0x18>
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e000      	b.n	800c6ce <LL_USART_IsEnabled+0x1a>
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	0018      	movs	r0, r3
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	b002      	add	sp, #8
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <LL_USART_SetPrescaler>:
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b082      	sub	sp, #8
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
 800c6de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e4:	220f      	movs	r2, #15
 800c6e6:	4393      	bics	r3, r2
 800c6e8:	683a      	ldr	r2, [r7, #0]
 800c6ea:	b292      	uxth	r2, r2
 800c6ec:	431a      	orrs	r2, r3
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c6f2:	46c0      	nop			; (mov r8, r8)
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	b002      	add	sp, #8
 800c6f8:	bd80      	pop	{r7, pc}
	...

0800c6fc <LL_USART_SetStopBitsLength>:
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	4a05      	ldr	r2, [pc, #20]	; (800c720 <LL_USART_SetStopBitsLength+0x24>)
 800c70c:	401a      	ands	r2, r3
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	431a      	orrs	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	605a      	str	r2, [r3, #4]
}
 800c716:	46c0      	nop			; (mov r8, r8)
 800c718:	46bd      	mov	sp, r7
 800c71a:	b002      	add	sp, #8
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	46c0      	nop			; (mov r8, r8)
 800c720:	ffffcfff 	.word	0xffffcfff

0800c724 <LL_USART_SetHWFlowCtrl>:
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	4a05      	ldr	r2, [pc, #20]	; (800c748 <LL_USART_SetHWFlowCtrl+0x24>)
 800c734:	401a      	ands	r2, r3
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	431a      	orrs	r2, r3
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	609a      	str	r2, [r3, #8]
}
 800c73e:	46c0      	nop			; (mov r8, r8)
 800c740:	46bd      	mov	sp, r7
 800c742:	b002      	add	sp, #8
 800c744:	bd80      	pop	{r7, pc}
 800c746:	46c0      	nop			; (mov r8, r8)
 800c748:	fffffcff 	.word	0xfffffcff

0800c74c <LL_USART_SetBaudRate>:
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
 800c758:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2b0b      	cmp	r3, #11
 800c75e:	d846      	bhi.n	800c7ee <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 800c760:	6a3b      	ldr	r3, [r7, #32]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d043      	beq.n	800c7ee <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	2380      	movs	r3, #128	; 0x80
 800c76a:	021b      	lsls	r3, r3, #8
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d126      	bne.n	800c7be <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	b2db      	uxtb	r3, r3
 800c774:	001a      	movs	r2, r3
 800c776:	4b20      	ldr	r3, [pc, #128]	; (800c7f8 <LL_USART_SetBaudRate+0xac>)
 800c778:	0092      	lsls	r2, r2, #2
 800c77a:	58d3      	ldr	r3, [r2, r3]
 800c77c:	0019      	movs	r1, r3
 800c77e:	68b8      	ldr	r0, [r7, #8]
 800c780:	f7f3 fcc0 	bl	8000104 <__udivsi3>
 800c784:	0003      	movs	r3, r0
 800c786:	005a      	lsls	r2, r3, #1
 800c788:	6a3b      	ldr	r3, [r7, #32]
 800c78a:	085b      	lsrs	r3, r3, #1
 800c78c:	18d3      	adds	r3, r2, r3
 800c78e:	6a39      	ldr	r1, [r7, #32]
 800c790:	0018      	movs	r0, r3
 800c792:	f7f3 fcb7 	bl	8000104 <__udivsi3>
 800c796:	0003      	movs	r3, r0
 800c798:	b29b      	uxth	r3, r3
 800c79a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	4a17      	ldr	r2, [pc, #92]	; (800c7fc <LL_USART_SetBaudRate+0xb0>)
 800c7a0:	4013      	ands	r3, r2
 800c7a2:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	085b      	lsrs	r3, r3, #1
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	001a      	movs	r2, r3
 800c7ac:	2307      	movs	r3, #7
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	693a      	ldr	r2, [r7, #16]
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	693a      	ldr	r2, [r7, #16]
 800c7ba:	60da      	str	r2, [r3, #12]
}
 800c7bc:	e017      	b.n	800c7ee <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	001a      	movs	r2, r3
 800c7c4:	4b0c      	ldr	r3, [pc, #48]	; (800c7f8 <LL_USART_SetBaudRate+0xac>)
 800c7c6:	0092      	lsls	r2, r2, #2
 800c7c8:	58d3      	ldr	r3, [r2, r3]
 800c7ca:	0019      	movs	r1, r3
 800c7cc:	68b8      	ldr	r0, [r7, #8]
 800c7ce:	f7f3 fc99 	bl	8000104 <__udivsi3>
 800c7d2:	0003      	movs	r3, r0
 800c7d4:	001a      	movs	r2, r3
 800c7d6:	6a3b      	ldr	r3, [r7, #32]
 800c7d8:	085b      	lsrs	r3, r3, #1
 800c7da:	18d3      	adds	r3, r2, r3
 800c7dc:	6a39      	ldr	r1, [r7, #32]
 800c7de:	0018      	movs	r0, r3
 800c7e0:	f7f3 fc90 	bl	8000104 <__udivsi3>
 800c7e4:	0003      	movs	r3, r0
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	001a      	movs	r2, r3
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	60da      	str	r2, [r3, #12]
}
 800c7ee:	46c0      	nop			; (mov r8, r8)
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	b006      	add	sp, #24
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	46c0      	nop			; (mov r8, r8)
 800c7f8:	08018444 	.word	0x08018444
 800c7fc:	0000fff0 	.word	0x0000fff0

0800c800 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800c800:	b590      	push	{r4, r7, lr}
 800c802:	b08b      	sub	sp, #44	; 0x2c
 800c804:	af02      	add	r7, sp, #8
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c80a:	231f      	movs	r3, #31
 800c80c:	18fb      	adds	r3, r7, r3
 800c80e:	2201      	movs	r2, #1
 800c810:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c812:	2300      	movs	r3, #0
 800c814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	0018      	movs	r0, r3
 800c81a:	f7ff ff4b 	bl	800c6b4 <LL_USART_IsEnabled>
 800c81e:	1e03      	subs	r3, r0, #0
 800c820:	d16a      	bne.n	800c8f8 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a38      	ldr	r2, [pc, #224]	; (800c908 <LL_USART_Init+0x108>)
 800c828:	401a      	ands	r2, r3
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	6899      	ldr	r1, [r3, #8]
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	4319      	orrs	r1, r3
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	695b      	ldr	r3, [r3, #20]
 800c838:	4319      	orrs	r1, r3
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	69db      	ldr	r3, [r3, #28]
 800c83e:	430b      	orrs	r3, r1
 800c840:	431a      	orrs	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	68da      	ldr	r2, [r3, #12]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	0011      	movs	r1, r2
 800c84e:	0018      	movs	r0, r3
 800c850:	f7ff ff54 	bl	800c6fc <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	699a      	ldr	r2, [r3, #24]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	0011      	movs	r1, r2
 800c85c:	0018      	movs	r0, r3
 800c85e:	f7ff ff61 	bl	800c724 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4a29      	ldr	r2, [pc, #164]	; (800c90c <LL_USART_Init+0x10c>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d105      	bne.n	800c876 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800c86a:	2003      	movs	r0, #3
 800c86c:	f7ff fdfc 	bl	800c468 <LL_RCC_GetUSARTClockFreq>
 800c870:	0003      	movs	r3, r0
 800c872:	61bb      	str	r3, [r7, #24]
 800c874:	e022      	b.n	800c8bc <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4a25      	ldr	r2, [pc, #148]	; (800c910 <LL_USART_Init+0x110>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d105      	bne.n	800c88a <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800c87e:	200c      	movs	r0, #12
 800c880:	f7ff fdf2 	bl	800c468 <LL_RCC_GetUSARTClockFreq>
 800c884:	0003      	movs	r3, r0
 800c886:	61bb      	str	r3, [r7, #24]
 800c888:	e018      	b.n	800c8bc <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4a21      	ldr	r2, [pc, #132]	; (800c914 <LL_USART_Init+0x114>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d108      	bne.n	800c8a4 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c892:	240c      	movs	r4, #12
 800c894:	193b      	adds	r3, r7, r4
 800c896:	0018      	movs	r0, r3
 800c898:	f7ff fdc8 	bl	800c42c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c89c:	193b      	adds	r3, r7, r4
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	61bb      	str	r3, [r7, #24]
 800c8a2:	e00b      	b.n	800c8bc <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4a1c      	ldr	r2, [pc, #112]	; (800c918 <LL_USART_Init+0x118>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d107      	bne.n	800c8bc <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c8ac:	240c      	movs	r4, #12
 800c8ae:	193b      	adds	r3, r7, r4
 800c8b0:	0018      	movs	r0, r3
 800c8b2:	f7ff fdbb 	bl	800c42c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c8b6:	193b      	adds	r3, r7, r4
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d013      	beq.n	800c8ea <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d00f      	beq.n	800c8ea <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800c8ca:	231f      	movs	r3, #31
 800c8cc:	18fb      	adds	r3, r7, r3
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	69dc      	ldr	r4, [r3, #28]
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	69b9      	ldr	r1, [r7, #24]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	0023      	movs	r3, r4
 800c8e6:	f7ff ff31 	bl	800c74c <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	0011      	movs	r1, r2
 800c8f2:	0018      	movs	r0, r3
 800c8f4:	f7ff feef 	bl	800c6d6 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c8f8:	231f      	movs	r3, #31
 800c8fa:	18fb      	adds	r3, r7, r3
 800c8fc:	781b      	ldrb	r3, [r3, #0]
}
 800c8fe:	0018      	movs	r0, r3
 800c900:	46bd      	mov	sp, r7
 800c902:	b009      	add	sp, #36	; 0x24
 800c904:	bd90      	pop	{r4, r7, pc}
 800c906:	46c0      	nop			; (mov r8, r8)
 800c908:	efff69f3 	.word	0xefff69f3
 800c90c:	40013800 	.word	0x40013800
 800c910:	40004400 	.word	0x40004400
 800c914:	40004800 	.word	0x40004800
 800c918:	40004c00 	.word	0x40004c00

0800c91c <__libc_init_array>:
 800c91c:	b570      	push	{r4, r5, r6, lr}
 800c91e:	2600      	movs	r6, #0
 800c920:	4d0c      	ldr	r5, [pc, #48]	; (800c954 <__libc_init_array+0x38>)
 800c922:	4c0d      	ldr	r4, [pc, #52]	; (800c958 <__libc_init_array+0x3c>)
 800c924:	1b64      	subs	r4, r4, r5
 800c926:	10a4      	asrs	r4, r4, #2
 800c928:	42a6      	cmp	r6, r4
 800c92a:	d109      	bne.n	800c940 <__libc_init_array+0x24>
 800c92c:	2600      	movs	r6, #0
 800c92e:	f000 f821 	bl	800c974 <_init>
 800c932:	4d0a      	ldr	r5, [pc, #40]	; (800c95c <__libc_init_array+0x40>)
 800c934:	4c0a      	ldr	r4, [pc, #40]	; (800c960 <__libc_init_array+0x44>)
 800c936:	1b64      	subs	r4, r4, r5
 800c938:	10a4      	asrs	r4, r4, #2
 800c93a:	42a6      	cmp	r6, r4
 800c93c:	d105      	bne.n	800c94a <__libc_init_array+0x2e>
 800c93e:	bd70      	pop	{r4, r5, r6, pc}
 800c940:	00b3      	lsls	r3, r6, #2
 800c942:	58eb      	ldr	r3, [r5, r3]
 800c944:	4798      	blx	r3
 800c946:	3601      	adds	r6, #1
 800c948:	e7ee      	b.n	800c928 <__libc_init_array+0xc>
 800c94a:	00b3      	lsls	r3, r6, #2
 800c94c:	58eb      	ldr	r3, [r5, r3]
 800c94e:	4798      	blx	r3
 800c950:	3601      	adds	r6, #1
 800c952:	e7f2      	b.n	800c93a <__libc_init_array+0x1e>
 800c954:	08018474 	.word	0x08018474
 800c958:	08018474 	.word	0x08018474
 800c95c:	08018474 	.word	0x08018474
 800c960:	08018478 	.word	0x08018478

0800c964 <memset>:
 800c964:	0003      	movs	r3, r0
 800c966:	1882      	adds	r2, r0, r2
 800c968:	4293      	cmp	r3, r2
 800c96a:	d100      	bne.n	800c96e <memset+0xa>
 800c96c:	4770      	bx	lr
 800c96e:	7019      	strb	r1, [r3, #0]
 800c970:	3301      	adds	r3, #1
 800c972:	e7f9      	b.n	800c968 <memset+0x4>

0800c974 <_init>:
 800c974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c976:	46c0      	nop			; (mov r8, r8)
 800c978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c97a:	bc08      	pop	{r3}
 800c97c:	469e      	mov	lr, r3
 800c97e:	4770      	bx	lr

0800c980 <_fini>:
 800c980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c982:	46c0      	nop			; (mov r8, r8)
 800c984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c986:	bc08      	pop	{r3}
 800c988:	469e      	mov	lr, r3
 800c98a:	4770      	bx	lr
