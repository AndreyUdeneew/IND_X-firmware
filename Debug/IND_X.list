
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a754  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800a810  0800a810  0001a810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8f8  0800a8f8  00023174  2**0
                  CONTENTS
  4 .ARM          00000000  0800a8f8  0800a8f8  00023174  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a8f8  0800a8f8  00023174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8f8  0800a8f8  0001a8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8fc  0800a8fc  0001a8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003174  20000000  0800a900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c0  20003174  0800da74  00023174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005634  0800da74  00025634  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00023174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d81  00000000  00000000  0002319c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d5  00000000  00000000  0003cf1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  000403f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001718  00000000  00000000  00041c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3f7  00000000  00000000  000433a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0ae  00000000  00000000  0005f797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae252  00000000  00000000  0007c845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012aa97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d0  00000000  00000000  0012aaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20003174 	.word	0x20003174
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a7f8 	.word	0x0800a7f8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20003178 	.word	0x20003178
 8000100:	0800a7f8 	.word	0x0800a7f8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800050e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	430a      	orrs	r2, r1
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800051a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	4013      	ands	r3, r2
 8000520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000522:	68fb      	ldr	r3, [r7, #12]
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b004      	add	sp, #16
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b08b      	sub	sp, #44	; 0x2c
 8000534:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 8000536:	231e      	movs	r3, #30
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	2200      	movs	r2, #0
 800053c:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 800053e:	231c      	movs	r3, #28
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	2200      	movs	r2, #0
 8000544:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8000546:	231a      	movs	r3, #26
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	2200      	movs	r2, #0
 800054c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f002 fd89 	bl	8003064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f891 	bl	8000678 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b41      	ldr	r3, [pc, #260]	; (800065c <main+0x12c>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	4b40      	ldr	r3, [pc, #256]	; (800065c <main+0x12c>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	4b3e      	ldr	r3, [pc, #248]	; (800065c <main+0x12c>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b3b      	ldr	r3, [pc, #236]	; (800065c <main+0x12c>)
 8000570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000572:	4b3a      	ldr	r3, [pc, #232]	; (800065c <main+0x12c>)
 8000574:	2102      	movs	r1, #2
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
 800057a:	4b38      	ldr	r3, [pc, #224]	; (800065c <main+0x12c>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	2202      	movs	r2, #2
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b35      	ldr	r3, [pc, #212]	; (800065c <main+0x12c>)
 8000588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800058a:	4b34      	ldr	r3, [pc, #208]	; (800065c <main+0x12c>)
 800058c:	2104      	movs	r1, #4
 800058e:	430a      	orrs	r2, r1
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
 8000592:	4b32      	ldr	r3, [pc, #200]	; (800065c <main+0x12c>)
 8000594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000596:	2204      	movs	r2, #4
 8000598:	4013      	ands	r3, r2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fbd3 	bl	8000d48 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a2:	f000 fba3 	bl	8000cec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 fac1 	bl	8000b2c <MX_USART2_UART_Init>
  MX_COMP1_Init();
 80005aa:	f000 f8e5 	bl	8000778 <MX_COMP1_Init>
  MX_TIM1_Init();
 80005ae:	f000 f9c3 	bl	8000938 <MX_TIM1_Init>
  MX_USART3_Init();
 80005b2:	f000 fb59 	bl	8000c68 <MX_USART3_Init>
  MX_I2S1_Init();
 80005b6:	f000 f951 	bl	800085c <MX_I2S1_Init>
  MX_I2C1_Init();
 80005ba:	f000 f90f 	bl	80007dc <MX_I2C1_Init>
  MX_SPI2_Init();
 80005be:	f000 f977 	bl	80008b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005c2:	4b27      	ldr	r3, [pc, #156]	; (8000660 <main+0x130>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f003 f81b 	bl	8003600 <HAL_COMP_Start>
	HAL_Delay(100);
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f002 fdd0 	bl	8003170 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005d0:	f001 fcb2 	bl	8001f38 <MEM_Reset>

	weoInit();
 80005d4:	f000 fe3c 	bl	8001250 <weoInit>
	HAL_Delay(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f002 fdc9 	bl	8003170 <HAL_Delay>
	weoClear();
 80005de:	f000 fea3 	bl	8001328 <weoClear>
	MEM_GetID();
 80005e2:	f001 ff39 	bl	8002458 <MEM_GetID>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <main+0x134>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <main+0x134>)
 80005ec:	491e      	ldr	r1, [pc, #120]	; (8000668 <main+0x138>)
 80005ee:	430a      	orrs	r2, r1
 80005f0:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <main+0x134>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f7ff ff1d 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <main+0x134>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff ff27 	bl	8000450 <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <main+0x134>)
 8000604:	6a1a      	ldr	r2, [r3, #32]
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <main+0x134>)
 8000608:	2108      	movs	r1, #8
 800060a:	430a      	orrs	r2, r1
 800060c:	621a      	str	r2, [r3, #32]

//	USART3->CR1 &= ~(USART_CR1_UE);
//	USART3->CR2 |= USART_CR2_MSBFIRST;
//	USART3->CR1 |= USART_CR1_UE;
//	weoDrawRectangleFilled(0x00,0x00,0x7F,0x7F,0xFF,h1);
	uint8_t x=0x05;
 800060e:	2019      	movs	r0, #25
 8000610:	183b      	adds	r3, r7, r0
 8000612:	2205      	movs	r2, #5
 8000614:	701a      	strb	r2, [r3, #0]
	uint8_t y=0x03;
 8000616:	2118      	movs	r1, #24
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2203      	movs	r2, #3
 800061c:	701a      	strb	r2, [r3, #0]
	weoDrawRectangleFilled(x,y,x+0x07-0x01,y+0x0E - 0x02,0xFF,test);
 800061e:	183b      	adds	r3, r7, r0
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	3306      	adds	r3, #6
 8000624:	b2da      	uxtb	r2, r3
 8000626:	187b      	adds	r3, r7, r1
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	330c      	adds	r3, #12
 800062c:	b2dc      	uxtb	r4, r3
 800062e:	187b      	adds	r3, r7, r1
 8000630:	7819      	ldrb	r1, [r3, #0]
 8000632:	183b      	adds	r3, r7, r0
 8000634:	7818      	ldrb	r0, [r3, #0]
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <main+0x13c>)
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	23ff      	movs	r3, #255	; 0xff
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	0023      	movs	r3, r4
 8000640:	f000 fed6 	bl	80013f0 <weoDrawRectangleFilled>
//	USART3->CR1 &= ~(USART_CR1_UE);
//		USART3->CR2 |= USART_CR2_MSBFIRST;
//		USART3->CR1 |= USART_CR1_UE;
	GPIOC->ODR |= 1 << 6;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <main+0x140>)
 8000646:	695a      	ldr	r2, [r3, #20]
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <main+0x140>)
 800064a:	2140      	movs	r1, #64	; 0x40
 800064c:	430a      	orrs	r2, r1
 800064e:	615a      	str	r2, [r3, #20]
	while (1) {
//		while(!(USART3->ISR & USART_ISR_TXE)){};
//						USART3->TDR = 0xF0;
		cmdExecute(cmd2Execute);
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <main+0x144>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	0018      	movs	r0, r3
 8000656:	f001 ff61 	bl	800251c <cmdExecute>
 800065a:	e7f9      	b.n	8000650 <main+0x120>
 800065c:	40021000 	.word	0x40021000
 8000660:	20003384 	.word	0x20003384
 8000664:	40004400 	.word	0x40004400
 8000668:	1000100d 	.word	0x1000100d
 800066c:	20003134 	.word	0x20003134
 8000670:	50000800 	.word	0x50000800
 8000674:	2000348e 	.word	0x2000348e

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b0a1      	sub	sp, #132	; 0x84
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	2448      	movs	r4, #72	; 0x48
 8000680:	193b      	adds	r3, r7, r4
 8000682:	0018      	movs	r0, r3
 8000684:	2338      	movs	r3, #56	; 0x38
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f00a f8ad 	bl	800a7e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068e:	2338      	movs	r3, #56	; 0x38
 8000690:	18fb      	adds	r3, r7, r3
 8000692:	0018      	movs	r0, r3
 8000694:	2310      	movs	r3, #16
 8000696:	001a      	movs	r2, r3
 8000698:	2100      	movs	r1, #0
 800069a:	f00a f8a5 	bl	800a7e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	0018      	movs	r0, r3
 80006a2:	2334      	movs	r3, #52	; 0x34
 80006a4:	001a      	movs	r2, r3
 80006a6:	2100      	movs	r1, #0
 80006a8:	f00a f89e 	bl	800a7e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f004 fe07 	bl	80052c4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2202      	movs	r2, #2
 80006ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	0052      	lsls	r2, r2, #1
 80006c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006c4:	0021      	movs	r1, r4
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2240      	movs	r2, #64	; 0x40
 80006d0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2202      	movs	r2, #2
 80006d6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2202      	movs	r2, #2
 80006dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2208      	movs	r2, #8
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	0292      	lsls	r2, r2, #10
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2280      	movs	r2, #128	; 0x80
 80006f6:	0492      	lsls	r2, r2, #18
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	0592      	lsls	r2, r2, #22
 8000700:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	187b      	adds	r3, r7, r1
 8000704:	0018      	movs	r0, r3
 8000706:	f004 fe29 	bl	800535c <HAL_RCC_OscConfig>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070e:	f002 f827 	bl	8002760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	2138      	movs	r1, #56	; 0x38
 8000714:	187b      	adds	r3, r7, r1
 8000716:	2207      	movs	r2, #7
 8000718:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2202      	movs	r2, #2
 800071e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2102      	movs	r1, #2
 8000730:	0018      	movs	r0, r3
 8000732:	f005 f933 	bl	800599c <HAL_RCC_ClockConfig>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800073a:	f002 f811 	bl	8002760 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <SystemClock_Config+0xfc>)
 8000742:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	0018      	movs	r0, r3
 8000760:	f005 fac6 	bl	8005cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000768:	f001 fffa 	bl	8002760 <Error_Handler>
  }
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b021      	add	sp, #132	; 0x84
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	00200822 	.word	0x00200822

08000778 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_COMP1_Init+0x5c>)
 800077e:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <MX_COMP1_Init+0x60>)
 8000780:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_COMP1_Init+0x5c>)
 8000784:	2280      	movs	r2, #128	; 0x80
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_COMP1_Init+0x5c>)
 800078c:	2230      	movs	r2, #48	; 0x30
 800078e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_COMP1_Init+0x5c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_COMP1_Init+0x5c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800079c:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_COMP1_Init+0x5c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_COMP1_Init+0x5c>)
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	0392      	lsls	r2, r2, #14
 80007a8:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_COMP1_Init+0x5c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_COMP1_Init+0x5c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_COMP1_Init+0x5c>)
 80007b8:	2212      	movs	r2, #18
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <MX_COMP1_Init+0x5c>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f002 fdbc 	bl	800333c <HAL_COMP_Init>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 80007c8:	f001 ffca 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	20003384 	.word	0x20003384
 80007d8:	40010200 	.word	0x40010200

080007dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MX_I2C1_Init+0x78>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <MX_I2C1_Init+0x7c>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_I2C1_Init+0x74>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_I2C1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_I2C1_Init+0x74>)
 8000818:	0018      	movs	r0, r3
 800081a:	f003 fc4d 	bl	80040b8 <HAL_I2C_Init>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000822:	f001 ff9d 	bl	8002760 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_I2C1_Init+0x74>)
 8000828:	2100      	movs	r1, #0
 800082a:	0018      	movs	r0, r3
 800082c:	f004 fada 	bl	8004de4 <HAL_I2CEx_ConfigAnalogFilter>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000834:	f001 ff94 	bl	8002760 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <MX_I2C1_Init+0x74>)
 800083a:	2100      	movs	r1, #0
 800083c:	0018      	movs	r0, r3
 800083e:	f004 fb1d 	bl	8004e7c <HAL_I2CEx_ConfigDigitalFilter>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000846:	f001 ff8b 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20003264 	.word	0x20003264
 8000854:	40005400 	.word	0x40005400
 8000858:	1094102c 	.word	0x1094102c

0800085c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_I2S1_Init+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	; (80008ac <MX_I2S1_Init+0x50>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_I2S1_Init+0x4c>)
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	0092      	lsls	r2, r2, #2
 800086c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2S1_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_I2S1_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_I2S1_Init+0x4c>)
 800087c:	2280      	movs	r2, #128	; 0x80
 800087e:	0092      	lsls	r2, r2, #2
 8000880:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2S1_Init+0x4c>)
 8000884:	22fa      	movs	r2, #250	; 0xfa
 8000886:	0192      	lsls	r2, r2, #6
 8000888:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_I2S1_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <MX_I2S1_Init+0x4c>)
 8000892:	0018      	movs	r0, r3
 8000894:	f004 fb3e 	bl	8004f14 <HAL_I2S_Init>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 800089c:	f001 ff60 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	20003490 	.word	0x20003490
 80008ac:	40013000 	.word	0x40013000

080008b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_SPI2_Init+0x80>)
 80008b6:	2208      	movs	r2, #8
 80008b8:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_SPI2_Init+0x80>)
 80008bc:	4a1d      	ldr	r2, [pc, #116]	; (8000934 <MX_SPI2_Init+0x84>)
 80008be:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_SPI2_Init+0x80>)
 80008c2:	2282      	movs	r2, #130	; 0x82
 80008c4:	0052      	lsls	r2, r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_SPI2_Init+0x80>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_SPI2_Init+0x80>)
 80008d0:	22e0      	movs	r2, #224	; 0xe0
 80008d2:	00d2      	lsls	r2, r2, #3
 80008d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_SPI2_Init+0x80>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_SPI2_Init+0x80>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_SPI2_Init+0x80>)
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_SPI2_Init+0x80>)
 80008ec:	2208      	movs	r2, #8
 80008ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_SPI2_Init+0x80>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_SPI2_Init+0x80>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_SPI2_Init+0x80>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_SPI2_Init+0x80>)
 8000904:	2207      	movs	r2, #7
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_SPI2_Init+0x80>)
 800090a:	2200      	movs	r2, #0
 800090c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_SPI2_Init+0x80>)
 8000910:	2208      	movs	r2, #8
 8000912:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_SPI2_Init+0x80>)
 8000916:	0018      	movs	r0, r3
 8000918:	f005 feea 	bl	80066f0 <HAL_SPI_Init>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 8000920:	f001 ff1e 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000924:	4b02      	ldr	r3, [pc, #8]	; (8000930 <MX_SPI2_Init+0x80>)
 8000926:	2208      	movs	r2, #8
 8000928:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200031e4 	.word	0x200031e4
 8000934:	40003800 	.word	0x40003800

08000938 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09e      	sub	sp, #120	; 0x78
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093e:	2368      	movs	r3, #104	; 0x68
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	0018      	movs	r0, r3
 8000944:	2310      	movs	r3, #16
 8000946:	001a      	movs	r2, r3
 8000948:	2100      	movs	r1, #0
 800094a:	f009 ff4d 	bl	800a7e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094e:	235c      	movs	r3, #92	; 0x5c
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	0018      	movs	r0, r3
 8000954:	230c      	movs	r3, #12
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f009 ff45 	bl	800a7e8 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800095e:	2350      	movs	r3, #80	; 0x50
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	0018      	movs	r0, r3
 8000964:	230c      	movs	r3, #12
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f009 ff3d 	bl	800a7e8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096e:	2334      	movs	r3, #52	; 0x34
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	0018      	movs	r0, r3
 8000974:	231c      	movs	r3, #28
 8000976:	001a      	movs	r2, r3
 8000978:	2100      	movs	r1, #0
 800097a:	f009 ff35 	bl	800a7e8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800097e:	003b      	movs	r3, r7
 8000980:	0018      	movs	r0, r3
 8000982:	2334      	movs	r3, #52	; 0x34
 8000984:	001a      	movs	r2, r3
 8000986:	2100      	movs	r1, #0
 8000988:	f009 ff2e 	bl	800a7e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800098c:	4b64      	ldr	r3, [pc, #400]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 800098e:	4a65      	ldr	r2, [pc, #404]	; (8000b24 <MX_TIM1_Init+0x1ec>)
 8000990:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000992:	4b63      	ldr	r3, [pc, #396]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000998:	4b61      	ldr	r3, [pc, #388]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 800099e:	4b60      	ldr	r3, [pc, #384]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 80009a0:	4a61      	ldr	r2, [pc, #388]	; (8000b28 <MX_TIM1_Init+0x1f0>)
 80009a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a4:	4b5e      	ldr	r3, [pc, #376]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009aa:	4b5d      	ldr	r3, [pc, #372]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009b0:	4b5b      	ldr	r3, [pc, #364]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b6:	4b5a      	ldr	r3, [pc, #360]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f007 fa8d 	bl	8007ed8 <HAL_TIM_Base_Init>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80009c2:	f001 fecd 	bl	8002760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c6:	2168      	movs	r1, #104	; 0x68
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	0152      	lsls	r2, r2, #5
 80009ce:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009d0:	187a      	adds	r2, r7, r1
 80009d2:	4b53      	ldr	r3, [pc, #332]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f007 fd16 	bl	8008408 <HAL_TIM_ConfigClockSource>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009e0:	f001 febe 	bl	8002760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009e4:	4b4e      	ldr	r3, [pc, #312]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f007 face 	bl	8007f88 <HAL_TIM_PWM_Init>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009f0:	f001 feb6 	bl	8002760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f4:	215c      	movs	r1, #92	; 0x5c
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a08:	187a      	adds	r2, r7, r1
 8000a0a:	4b45      	ldr	r3, [pc, #276]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f008 f9ca 	bl	8008da8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000a18:	f001 fea2 	bl	8002760 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000a1c:	2150      	movs	r1, #80	; 0x50
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2202      	movs	r2, #2
 8000a22:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2201      	movs	r2, #1
 8000a28:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000a30:	187a      	adds	r2, r7, r1
 8000a32:	4b3b      	ldr	r3, [pc, #236]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 8000a34:	2101      	movs	r1, #1
 8000a36:	0018      	movs	r0, r3
 8000a38:	f008 faca 	bl	8008fd0 <HAL_TIMEx_ConfigBreakInput>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a40:	f001 fe8e 	bl	8002760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a44:	2134      	movs	r1, #52	; 0x34
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2260      	movs	r2, #96	; 0x60
 8000a4a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2296      	movs	r2, #150	; 0x96
 8000a50:	0052      	lsls	r2, r2, #1
 8000a52:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2204      	movs	r2, #4
 8000a64:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a72:	1879      	adds	r1, r7, r1
 8000a74:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f007 fbcf 	bl	800821c <HAL_TIM_PWM_ConfigChannel>
 8000a7e:	1e03      	subs	r3, r0, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a82:	f001 fe6d 	bl	8002760 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a86:	2134      	movs	r1, #52	; 0x34
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2232      	movs	r2, #50	; 0x32
 8000a8c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a8e:	1879      	adds	r1, r7, r1
 8000a90:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 8000a92:	2210      	movs	r2, #16
 8000a94:	0018      	movs	r0, r3
 8000a96:	f007 fbc1 	bl	800821c <HAL_TIM_PWM_ConfigChannel>
 8000a9a:	1e03      	subs	r3, r0, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a9e:	f001 fe5f 	bl	8002760 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000aa2:	003b      	movs	r3, r7
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	00d2      	lsls	r2, r2, #3
 8000ab0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ab8:	003b      	movs	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000abe:	003b      	movs	r3, r7
 8000ac0:	2280      	movs	r2, #128	; 0x80
 8000ac2:	0152      	lsls	r2, r2, #5
 8000ac4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac6:	003b      	movs	r3, r7
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0192      	lsls	r2, r2, #6
 8000acc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000ace:	003b      	movs	r3, r7
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ada:	003b      	movs	r3, r7
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ae0:	003b      	movs	r3, r7
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	0492      	lsls	r2, r2, #18
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ae8:	003b      	movs	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aee:	003b      	movs	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000af4:	003b      	movs	r3, r7
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	01d2      	lsls	r2, r2, #7
 8000afa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000afc:	003a      	movs	r2, r7
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 8000b00:	0011      	movs	r1, r2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f008 f9be 	bl	8008e84 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000b0c:	f001 fe28 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <MX_TIM1_Init+0x1e8>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f002 f86a 	bl	8002bec <HAL_TIM_MspPostInit>

}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b01e      	add	sp, #120	; 0x78
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20003438 	.word	0x20003438
 8000b24:	40012c00 	.word	0x40012c00
 8000b28:	0000027f 	.word	0x0000027f

08000b2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b08f      	sub	sp, #60	; 0x3c
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b32:	2418      	movs	r4, #24
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	0018      	movs	r0, r3
 8000b38:	2320      	movs	r3, #32
 8000b3a:	001a      	movs	r2, r3
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	f009 fe53 	bl	800a7e8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	003b      	movs	r3, r7
 8000b44:	0018      	movs	r0, r3
 8000b46:	2318      	movs	r3, #24
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f009 fe4c 	bl	800a7e8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	029b      	lsls	r3, r3, #10
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff fcbf 	bl	80004d8 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff fcd2 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b60:	003b      	movs	r3, r7
 8000b62:	2204      	movs	r2, #4
 8000b64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2202      	movs	r2, #2
 8000b6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b72:	003b      	movs	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b78:	003b      	movs	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b7e:	003b      	movs	r3, r7
 8000b80:	2201      	movs	r2, #1
 8000b82:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	003a      	movs	r2, r7
 8000b86:	23a0      	movs	r3, #160	; 0xa0
 8000b88:	05db      	lsls	r3, r3, #23
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f009 faad 	bl	800a0ec <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b92:	003b      	movs	r3, r7
 8000b94:	2208      	movs	r2, #8
 8000b96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b98:	003b      	movs	r3, r7
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ba4:	003b      	movs	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000baa:	003b      	movs	r3, r7
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000bb0:	003b      	movs	r3, r7
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	003a      	movs	r2, r7
 8000bb8:	23a0      	movs	r3, #160	; 0xa0
 8000bba:	05db      	lsls	r3, r3, #23
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f009 fa94 	bl	800a0ec <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	201c      	movs	r0, #28
 8000bc8:	f7ff fb42 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000bcc:	201c      	movs	r0, #28
 8000bce:	f7ff fb25 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000bd8:	193b      	adds	r3, r7, r4
 8000bda:	22e1      	movs	r2, #225	; 0xe1
 8000bdc:	0212      	lsls	r2, r2, #8
 8000bde:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	0152      	lsls	r2, r2, #5
 8000be6:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000be8:	0021      	movs	r1, r4
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	220c      	movs	r2, #12
 8000bfa:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	4a16      	ldr	r2, [pc, #88]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c0c:	0019      	movs	r1, r3
 8000c0e:	0010      	movs	r0, r2
 8000c10:	f009 fd38 	bl	800a684 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff fba5 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	0018      	movs	r0, r3
 8000c24:	f7ff fbb2 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fb8c 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f7ff fbbe 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff fb76 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff fbcd 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d0f9      	beq.n	8000c42 <MX_USART2_UART_Init+0x116>
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <MX_USART2_UART_Init+0x138>)
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff fbdb 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000c56:	1e03      	subs	r3, r0, #0
 8000c58:	d0f3      	beq.n	8000c42 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b00f      	add	sp, #60	; 0x3c
 8000c62:	bd90      	pop	{r4, r7, pc}
 8000c64:	40004400 	.word	0x40004400

08000c68 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_USART3_Init+0x78>)
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <MX_USART3_Init+0x78>)
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	0309      	lsls	r1, r1, #12
 8000c76:	430a      	orrs	r2, r1
 8000c78:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000c7c:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <MX_USART3_Init+0x78>)
 8000c7e:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8100000;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000c82:	4a19      	ldr	r2, [pc, #100]	; (8000ce8 <MX_USART3_Init+0x80>)
 8000c84:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000ca0:	2280      	movs	r2, #128	; 0x80
 8000ca2:	00d2      	lsls	r2, r2, #3
 8000ca4:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000ca8:	2280      	movs	r2, #128	; 0x80
 8000caa:	0092      	lsls	r2, r2, #2
 8000cac:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f008 fa23 	bl	8009110 <HAL_USART_Init>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000cce:	f001 fd47 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8100000;
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <MX_USART3_Init+0x7c>)
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <MX_USART3_Init+0x80>)
 8000cd6:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	40004800 	.word	0x40004800
 8000ce4:	200033c4 	.word	0x200033c4
 8000ce8:	007b98a0 	.word	0x007b98a0

08000cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_DMA_Init+0x58>)
 8000cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_DMA_Init+0x58>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_DMA_Init+0x58>)
 8000d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d02:	2201      	movs	r2, #1
 8000d04:	4013      	ands	r3, r2
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2009      	movs	r0, #9
 8000d10:	f002 fd74 	bl	80037fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d14:	2009      	movs	r0, #9
 8000d16:	f002 fd86 	bl	8003826 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	200a      	movs	r0, #10
 8000d20:	f002 fd6c 	bl	80037fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000d24:	200a      	movs	r0, #10
 8000d26:	f002 fd7e 	bl	8003826 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	200b      	movs	r0, #11
 8000d30:	f002 fd64 	bl	80037fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000d34:	200b      	movs	r0, #11
 8000d36:	f002 fd76 	bl	8003826 <HAL_NVIC_EnableIRQ>

}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b002      	add	sp, #8
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	40021000 	.word	0x40021000

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	003b      	movs	r3, r7
 8000d50:	0018      	movs	r0, r3
 8000d52:	2318      	movs	r3, #24
 8000d54:	001a      	movs	r2, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	f009 fd46 	bl	800a7e8 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f7ff fbd1 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000d62:	2004      	movs	r0, #4
 8000d64:	f7ff fbce 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff fbcb 	bl	8000504 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4aa0      	ldr	r2, [pc, #640]	; (8000ff4 <MX_GPIO_Init+0x2ac>)
 8000d74:	0019      	movs	r1, r3
 8000d76:	0010      	movs	r0, r2
 8000d78:	f7ff fb96 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	01db      	lsls	r3, r3, #7
 8000d80:	4a9d      	ldr	r2, [pc, #628]	; (8000ff8 <MX_GPIO_Init+0x2b0>)
 8000d82:	0019      	movs	r1, r3
 8000d84:	0010      	movs	r0, r2
 8000d86:	f7ff fb8f 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	4a9a      	ldr	r2, [pc, #616]	; (8000ff8 <MX_GPIO_Init+0x2b0>)
 8000d90:	0019      	movs	r1, r3
 8000d92:	0010      	movs	r0, r2
 8000d94:	f7ff fb88 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d98:	23a0      	movs	r3, #160	; 0xa0
 8000d9a:	05db      	lsls	r3, r3, #23
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f7ff fb82 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000da4:	23a0      	movs	r3, #160	; 0xa0
 8000da6:	05db      	lsls	r3, r3, #23
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0018      	movs	r0, r3
 8000dac:	f7ff fb7c 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000db0:	4b91      	ldr	r3, [pc, #580]	; (8000ff8 <MX_GPIO_Init+0x2b0>)
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff fb77 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	011a      	lsls	r2, r3, #4
 8000dbe:	23a0      	movs	r3, #160	; 0xa0
 8000dc0:	05db      	lsls	r3, r3, #23
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff fb7b 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	015a      	lsls	r2, r3, #5
 8000dce:	23a0      	movs	r3, #160	; 0xa0
 8000dd0:	05db      	lsls	r3, r3, #23
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff fb73 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000dda:	003b      	movs	r3, r7
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000de2:	003b      	movs	r3, r7
 8000de4:	2201      	movs	r2, #1
 8000de6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	003b      	movs	r3, r7
 8000dea:	2203      	movs	r2, #3
 8000dec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dee:	003b      	movs	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000df4:	003b      	movs	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	4a7d      	ldr	r2, [pc, #500]	; (8000ff4 <MX_GPIO_Init+0x2ac>)
 8000dfe:	0019      	movs	r1, r3
 8000e00:	0010      	movs	r0, r2
 8000e02:	f009 f973 	bl	800a0ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	01d2      	lsls	r2, r2, #7
 8000e0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e0e:	003b      	movs	r3, r7
 8000e10:	2201      	movs	r2, #1
 8000e12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e14:	003b      	movs	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e20:	003b      	movs	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000e26:	003b      	movs	r3, r7
 8000e28:	4a73      	ldr	r2, [pc, #460]	; (8000ff8 <MX_GPIO_Init+0x2b0>)
 8000e2a:	0019      	movs	r1, r3
 8000e2c:	0010      	movs	r0, r2
 8000e2e:	f009 f95d 	bl	800a0ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000e32:	003b      	movs	r3, r7
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	0212      	lsls	r2, r2, #8
 8000e38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e40:	003b      	movs	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e46:	003b      	movs	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e4c:	003b      	movs	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000e52:	003b      	movs	r3, r7
 8000e54:	4a68      	ldr	r2, [pc, #416]	; (8000ff8 <MX_GPIO_Init+0x2b0>)
 8000e56:	0019      	movs	r1, r3
 8000e58:	0010      	movs	r0, r2
 8000e5a:	f009 f947 	bl	800a0ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e64:	003b      	movs	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000e70:	003a      	movs	r2, r7
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f009 f937 	bl	800a0ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2202      	movs	r2, #2
 8000e82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e84:	003b      	movs	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000e90:	003a      	movs	r2, r7
 8000e92:	23a0      	movs	r3, #160	; 0xa0
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	0011      	movs	r1, r2
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f009 f927 	bl	800a0ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2210      	movs	r2, #16
 8000ea2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ea4:	003b      	movs	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000eaa:	003b      	movs	r3, r7
 8000eac:	2201      	movs	r2, #1
 8000eae:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	003a      	movs	r2, r7
 8000eb2:	23a0      	movs	r3, #160	; 0xa0
 8000eb4:	05db      	lsls	r3, r3, #23
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f009 f917 	bl	800a0ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	2240      	movs	r2, #64	; 0x40
 8000ec2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ec4:	003b      	movs	r3, r7
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eca:	003b      	movs	r3, r7
 8000ecc:	2203      	movs	r2, #3
 8000ece:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ed0:	003b      	movs	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000edc:	003a      	movs	r2, r7
 8000ede:	23a0      	movs	r3, #160	; 0xa0
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	0011      	movs	r1, r2
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f009 f901 	bl	800a0ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000eea:	003b      	movs	r3, r7
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ef0:	003b      	movs	r3, r7
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2203      	movs	r2, #3
 8000efa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000efc:	003b      	movs	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f02:	003b      	movs	r3, r7
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000f08:	003a      	movs	r2, r7
 8000f0a:	23a0      	movs	r3, #160	; 0xa0
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f009 f8eb 	bl	800a0ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2240      	movs	r2, #64	; 0x40
 8000f1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f1c:	003b      	movs	r3, r7
 8000f1e:	2201      	movs	r2, #1
 8000f20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2203      	movs	r2, #3
 8000f26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f28:	003b      	movs	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f2e:	003b      	movs	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000f34:	003b      	movs	r3, r7
 8000f36:	4a30      	ldr	r2, [pc, #192]	; (8000ff8 <MX_GPIO_Init+0x2b0>)
 8000f38:	0019      	movs	r1, r3
 8000f3a:	0010      	movs	r0, r2
 8000f3c:	f009 f8d6 	bl	800a0ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8000f40:	003b      	movs	r3, r7
 8000f42:	2280      	movs	r2, #128	; 0x80
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f48:	003b      	movs	r3, r7
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	003b      	movs	r3, r7
 8000f50:	2203      	movs	r2, #3
 8000f52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f54:	003b      	movs	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8000f60:	003a      	movs	r2, r7
 8000f62:	23a0      	movs	r3, #160	; 0xa0
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	0011      	movs	r1, r2
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f009 f8bf 	bl	800a0ec <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8000f6e:	003b      	movs	r3, r7
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	0152      	lsls	r2, r2, #5
 8000f74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f76:	003b      	movs	r3, r7
 8000f78:	2201      	movs	r2, #1
 8000f7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	003b      	movs	r3, r7
 8000f7e:	2203      	movs	r2, #3
 8000f80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f82:	003b      	movs	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f88:	003b      	movs	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	003a      	movs	r2, r7
 8000f90:	23a0      	movs	r3, #160	; 0xa0
 8000f92:	05db      	lsls	r3, r3, #23
 8000f94:	0011      	movs	r1, r2
 8000f96:	0018      	movs	r0, r3
 8000f98:	f009 f8a8 	bl	800a0ec <LL_GPIO_Init>

  GPIO_InitStruct.Pin = KEY_4_Pin;
 8000f9c:	003b      	movs	r3, r7
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	0192      	lsls	r2, r2, #6
 8000fa2:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fa4:	003b      	movs	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000faa:	003b      	movs	r3, r7
 8000fac:	2201      	movs	r2, #1
 8000fae:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	003a      	movs	r2, r7
 8000fb2:	23a0      	movs	r3, #160	; 0xa0
 8000fb4:	05db      	lsls	r3, r3, #23
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f009 f897 	bl	800a0ec <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8000fbe:	003b      	movs	r3, r7
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	01d2      	lsls	r2, r2, #7
 8000fc4:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fcc:	003b      	movs	r3, r7
 8000fce:	2201      	movs	r2, #1
 8000fd0:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	003a      	movs	r2, r7
 8000fd4:	23a0      	movs	r3, #160	; 0xa0
 8000fd6:	05db      	lsls	r3, r3, #23
 8000fd8:	0011      	movs	r1, r2
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f009 f886 	bl	800a0ec <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	031b      	lsls	r3, r3, #12
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff fa4f 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b006      	add	sp, #24
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	50000400 	.word	0x50000400
 8000ff8:	50000800 	.word	0x50000800

08000ffc <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <USART2_RX_Callback+0x60>)
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff fa32 	bl	800046c <LL_USART_ReceiveData9>
 8001008:	0003      	movs	r3, r0
 800100a:	001a      	movs	r2, r3
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <USART2_RX_Callback+0x64>)
 800100e:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <USART2_RX_Callback+0x60>)
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	b29b      	uxth	r3, r3
 8001016:	05db      	lsls	r3, r3, #23
 8001018:	0ddb      	lsrs	r3, r3, #23
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <USART2_RX_Callback+0x64>)
 800101e:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <USART2_RX_Callback+0x68>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <USART2_RX_Callback+0x64>)
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	2bff      	cmp	r3, #255	; 0xff
 800102c:	d90a      	bls.n	8001044 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <USART2_RX_Callback+0x64>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <USART2_RX_Callback+0x6c>)
 8001036:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <USART2_RX_Callback+0x70>)
 800103a:	2200      	movs	r2, #0
 800103c:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <USART2_RX_Callback+0x74>)
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <USART2_RX_Callback+0x74>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d104      	bne.n	8001056 <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <USART2_RX_Callback+0x64>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	0018      	movs	r0, r3
 8001052:	f000 f87f 	bl	8001154 <cmdReceive>
  }
}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40004400 	.word	0x40004400
 8001060:	2000360e 	.word	0x2000360e
 8001064:	20003194 	.word	0x20003194
 8001068:	20005614 	.word	0x20005614
 800106c:	20003196 	.word	0x20003196
 8001070:	20003195 	.word	0x20003195

08001074 <HAL_SPI_RxHalfCpltCallback>:
//====================================================================================================================
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  	GPIOA->ODR |= 1 << 11;	//set test 1
 800107c:	23a0      	movs	r3, #160	; 0xa0
 800107e:	05db      	lsls	r3, r3, #23
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	23a0      	movs	r3, #160	; 0xa0
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	0109      	lsls	r1, r1, #4
 800108a:	430a      	orrs	r2, r1
 800108c:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 11);	//reset test 1
 800108e:	23a0      	movs	r3, #160	; 0xa0
 8001090:	05db      	lsls	r3, r3, #23
 8001092:	695a      	ldr	r2, [r3, #20]
 8001094:	23a0      	movs	r3, #160	; 0xa0
 8001096:	05db      	lsls	r3, r3, #23
 8001098:	490e      	ldr	r1, [pc, #56]	; (80010d4 <HAL_SPI_RxHalfCpltCallback+0x60>)
 800109a:	400a      	ands	r2, r1
 800109c:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 6);	//reset cs
 800109e:	23a0      	movs	r3, #160	; 0xa0
 80010a0:	05db      	lsls	r3, r3, #23
 80010a2:	695a      	ldr	r2, [r3, #20]
 80010a4:	23a0      	movs	r3, #160	; 0xa0
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	2140      	movs	r1, #64	; 0x40
 80010aa:	438a      	bics	r2, r1
 80010ac:	615a      	str	r2, [r3, #20]
  		GPIOA->ODR |= 1 << 7;	// reset dc
 80010ae:	23a0      	movs	r3, #160	; 0xa0
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	695a      	ldr	r2, [r3, #20]
 80010b4:	23a0      	movs	r3, #160	; 0xa0
 80010b6:	05db      	lsls	r3, r3, #23
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	430a      	orrs	r2, r1
 80010bc:	615a      	str	r2, [r3, #20]
  		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,len);
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_SPI_RxHalfCpltCallback+0x64>)
 80010c0:	881a      	ldrh	r2, [r3, #0]
 80010c2:	4906      	ldr	r1, [pc, #24]	; (80010dc <HAL_SPI_RxHalfCpltCallback+0x68>)
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_SPI_RxHalfCpltCallback+0x6c>)
 80010c6:	0018      	movs	r0, r3
 80010c8:	f008 f930 	bl	800932c <HAL_USART_Transmit_DMA>

}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b002      	add	sp, #8
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	fffff7ff 	.word	0xfffff7ff
 80010d8:	2000360c 	.word	0x2000360c
 80010dc:	20003614 	.word	0x20003614
 80010e0:	200033c4 	.word	0x200033c4

080010e4 <HAL_SPI_RxCpltCallback>:
//==========================================================
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi2)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  	GPIOC->ODR |= 1 << 15; // set cs
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_SPI_RxCpltCallback+0x20>)
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <HAL_SPI_RxCpltCallback+0x20>)
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	0209      	lsls	r1, r1, #8
 80010f6:	430a      	orrs	r2, r1
 80010f8:	615a      	str	r2, [r3, #20]
}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b002      	add	sp, #8
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	50000800 	.word	0x50000800

08001108 <HAL_USART_TxCpltCallback>:
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001110:	23a0      	movs	r3, #160	; 0xa0
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	23a0      	movs	r3, #160	; 0xa0
 8001118:	05db      	lsls	r3, r3, #23
 800111a:	2180      	movs	r1, #128	; 0x80
 800111c:	438a      	bics	r2, r1
 800111e:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8001120:	23a0      	movs	r3, #160	; 0xa0
 8001122:	05db      	lsls	r3, r3, #23
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	23a0      	movs	r3, #160	; 0xa0
 8001128:	05db      	lsls	r3, r3, #23
 800112a:	2140      	movs	r1, #64	; 0x40
 800112c:	430a      	orrs	r2, r1
 800112e:	615a      	str	r2, [r3, #20]

	GPIOC->ODR |= 1 << 6;	//set BF
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_USART_TxCpltCallback+0x44>)
 8001132:	695a      	ldr	r2, [r3, #20]
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_USART_TxCpltCallback+0x44>)
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	430a      	orrs	r2, r1
 800113a:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <HAL_USART_TxCpltCallback+0x48>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b002      	add	sp, #8
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	50000800 	.word	0x50000800
 8001150:	2000348e 	.word	0x2000348e

08001154 <cmdReceive>:
//==============================================================
	void cmdReceive (uint16_t dt1)
	{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	0002      	movs	r2, r0
 800115c:	1dbb      	adds	r3, r7, #6
 800115e:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8001160:	230f      	movs	r3, #15
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <cmdReceive+0xc4>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0fb      	beq.n	800116a <cmdReceive+0x16>
	  ByteReceived=0;
 8001172:	4b29      	ldr	r3, [pc, #164]	; (8001218 <cmdReceive+0xc4>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <cmdReceive+0xc8>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	001a      	movs	r2, r3
 800117e:	1dbb      	adds	r3, r7, #6
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	b2d9      	uxtb	r1, r3
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <cmdReceive+0xcc>)
 8001186:	5499      	strb	r1, [r3, r2]
	  ind++;
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <cmdReceive+0xc8>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <cmdReceive+0xc8>)
 8001192:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001194:	4b21      	ldr	r3, [pc, #132]	; (800121c <cmdReceive+0xc8>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d033      	beq.n	8001204 <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <cmdReceive+0xc8>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	001a      	movs	r2, r3
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <cmdReceive+0xcc>)
 80011a4:	785b      	ldrb	r3, [r3, #1]
 80011a6:	3301      	adds	r3, #1
 80011a8:	429a      	cmp	r2, r3
 80011aa:	dd2b      	ble.n	8001204 <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 80011ac:	230f      	movs	r3, #15
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	e00f      	b.n	80011d6 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 80011b6:	210f      	movs	r1, #15
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4a18      	ldr	r2, [pc, #96]	; (8001220 <cmdReceive+0xcc>)
 80011be:	5cd2      	ldrb	r2, [r2, r3]
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <cmdReceive+0xd0>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	18d3      	adds	r3, r2, r3
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <cmdReceive+0xd0>)
 80011ca:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	3201      	adds	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <cmdReceive+0xcc>)
 80011d8:	785b      	ldrb	r3, [r3, #1]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	210f      	movs	r1, #15
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	dae7      	bge.n	80011b6 <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <cmdReceive+0xd0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10a      	bne.n	8001204 <cmdReceive+0xb0>
 80011ee:	187b      	adds	r3, r7, r1
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <cmdReceive+0xcc>)
 80011f4:	785b      	ldrb	r3, [r3, #1]
 80011f6:	3302      	adds	r3, #2
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d103      	bne.n	8001204 <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <cmdReceive+0xcc>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 fa5a 	bl	80016b8 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <cmdReceive+0xd4>)
 8001206:	6a1a      	ldr	r2, [r3, #32]
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <cmdReceive+0xd4>)
 800120a:	2108      	movs	r1, #8
 800120c:	430a      	orrs	r2, r1
 800120e:	621a      	str	r2, [r3, #32]
	}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b004      	add	sp, #16
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20003194 	.word	0x20003194
 800121c:	20003196 	.word	0x20003196
 8001220:	20005614 	.word	0x20005614
 8001224:	20003198 	.word	0x20003198
 8001228:	40004400 	.word	0x40004400

0800122c <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	0002      	movs	r2, r0
 8001234:	1dfb      	adds	r3, r7, #7
 8001236:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8001238:	1df9      	adds	r1, r7, #7
 800123a:	4804      	ldr	r0, [pc, #16]	; (800124c <USART_AS_SPI_sendCMD+0x20>)
 800123c:	230a      	movs	r3, #10
 800123e:	2201      	movs	r2, #1
 8001240:	f007 ffb6 	bl	80091b0 <HAL_USART_Transmit>
		}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200033c4 	.word	0x200033c4

08001250 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 8001254:	4b32      	ldr	r3, [pc, #200]	; (8001320 <weoInit+0xd0>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b31      	ldr	r3, [pc, #196]	; (8001320 <weoInit+0xd0>)
 800125a:	2101      	movs	r1, #1
 800125c:	438a      	bics	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8001260:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <weoInit+0xd0>)
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <weoInit+0xd0>)
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	0309      	lsls	r1, r1, #12
 800126a:	430a      	orrs	r2, r1
 800126c:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 800126e:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <weoInit+0xd0>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <weoInit+0xd0>)
 8001274:	2101      	movs	r1, #1
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 800127a:	2001      	movs	r0, #1
 800127c:	f001 ff78 	bl	8003170 <HAL_Delay>
		HAL_Delay(1);
 8001280:	2001      	movs	r0, #1
 8001282:	f001 ff75 	bl	8003170 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001286:	4b27      	ldr	r3, [pc, #156]	; (8001324 <weoInit+0xd4>)
 8001288:	2100      	movs	r1, #0
 800128a:	0018      	movs	r0, r3
 800128c:	f006 fedc 	bl	8008048 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8001290:	2001      	movs	r0, #1
 8001292:	f001 ff6d 	bl	8003170 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001296:	23a0      	movs	r3, #160	; 0xa0
 8001298:	05db      	lsls	r3, r3, #23
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	23a0      	movs	r3, #160	; 0xa0
 800129e:	05db      	lsls	r3, r3, #23
 80012a0:	2140      	movs	r1, #64	; 0x40
 80012a2:	438a      	bics	r2, r1
 80012a4:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 80012a6:	23a0      	movs	r3, #160	; 0xa0
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	695a      	ldr	r2, [r3, #20]
 80012ac:	23a0      	movs	r3, #160	; 0xa0
 80012ae:	05db      	lsls	r3, r3, #23
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	438a      	bics	r2, r1
 80012b4:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 80012b6:	20af      	movs	r0, #175	; 0xaf
 80012b8:	f7ff ffb8 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 80012bc:	20a0      	movs	r0, #160	; 0xa0
 80012be:	f7ff ffb5 	bl	800122c <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 80012c2:	2051      	movs	r0, #81	; 0x51
 80012c4:	f7ff ffb2 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 80012c8:	2081      	movs	r0, #129	; 0x81
 80012ca:	f7ff ffaf 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 80012ce:	20ff      	movs	r0, #255	; 0xff
 80012d0:	f7ff ffac 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 80012d4:	20a1      	movs	r0, #161	; 0xa1
 80012d6:	f7ff ffa9 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff ffa6 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 80012e0:	20a2      	movs	r0, #162	; 0xa2
 80012e2:	f7ff ffa3 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff ffa0 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 80012ec:	20a8      	movs	r0, #168	; 0xa8
 80012ee:	f7ff ff9d 	bl	800122c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80012f2:	207f      	movs	r0, #127	; 0x7f
 80012f4:	f7ff ff9a 	bl	800122c <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 80012f8:	23a0      	movs	r3, #160	; 0xa0
 80012fa:	05db      	lsls	r3, r3, #23
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	23a0      	movs	r3, #160	; 0xa0
 8001300:	05db      	lsls	r3, r3, #23
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	430a      	orrs	r2, r1
 8001306:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8001308:	23a0      	movs	r3, #160	; 0xa0
 800130a:	05db      	lsls	r3, r3, #23
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	23a0      	movs	r3, #160	; 0xa0
 8001310:	05db      	lsls	r3, r3, #23
 8001312:	2140      	movs	r1, #64	; 0x40
 8001314:	430a      	orrs	r2, r1
 8001316:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	40004800 	.word	0x40004800
 8001324:	20003438 	.word	0x20003438

08001328 <weoClear>:
	void weoClear(void) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800132e:	23a0      	movs	r3, #160	; 0xa0
 8001330:	05db      	lsls	r3, r3, #23
 8001332:	695a      	ldr	r2, [r3, #20]
 8001334:	23a0      	movs	r3, #160	; 0xa0
 8001336:	05db      	lsls	r3, r3, #23
 8001338:	2140      	movs	r1, #64	; 0x40
 800133a:	438a      	bics	r2, r1
 800133c:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 800133e:	23a0      	movs	r3, #160	; 0xa0
 8001340:	05db      	lsls	r3, r3, #23
 8001342:	695a      	ldr	r2, [r3, #20]
 8001344:	23a0      	movs	r3, #160	; 0xa0
 8001346:	05db      	lsls	r3, r3, #23
 8001348:	2180      	movs	r1, #128	; 0x80
 800134a:	438a      	bics	r2, r1
 800134c:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800134e:	2075      	movs	r0, #117	; 0x75
 8001350:	f7ff ff6c 	bl	800122c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff ff69 	bl	800122c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 800135a:	207f      	movs	r0, #127	; 0x7f
 800135c:	f7ff ff66 	bl	800122c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001360:	2015      	movs	r0, #21
 8001362:	f7ff ff63 	bl	800122c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff ff60 	bl	800122c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 800136c:	207f      	movs	r0, #127	; 0x7f
 800136e:	f7ff ff5d 	bl	800122c <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001372:	23a0      	movs	r3, #160	; 0xa0
 8001374:	05db      	lsls	r3, r3, #23
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	23a0      	movs	r3, #160	; 0xa0
 800137a:	05db      	lsls	r3, r3, #23
 800137c:	2140      	movs	r1, #64	; 0x40
 800137e:	438a      	bics	r2, r1
 8001380:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 8001382:	23a0      	movs	r3, #160	; 0xa0
 8001384:	05db      	lsls	r3, r3, #23
 8001386:	695a      	ldr	r2, [r3, #20]
 8001388:	23a0      	movs	r3, #160	; 0xa0
 800138a:	05db      	lsls	r3, r3, #23
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	430a      	orrs	r2, r1
 8001390:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8001392:	1dbb      	adds	r3, r7, #6
 8001394:	2200      	movs	r2, #0
 8001396:	801a      	strh	r2, [r3, #0]
 8001398:	e00d      	b.n	80013b6 <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <weoClear+0xc0>)
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	4013      	ands	r3, r2
 80013a4:	d0fa      	beq.n	800139c <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <weoClear+0xc0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 80013ac:	1dbb      	adds	r3, r7, #6
 80013ae:	881a      	ldrh	r2, [r3, #0]
 80013b0:	1dbb      	adds	r3, r7, #6
 80013b2:	3201      	adds	r2, #1
 80013b4:	801a      	strh	r2, [r3, #0]
 80013b6:	1dbb      	adds	r3, r7, #6
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <weoClear+0xc4>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d9ec      	bls.n	800139a <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 80013c0:	23a0      	movs	r3, #160	; 0xa0
 80013c2:	05db      	lsls	r3, r3, #23
 80013c4:	695a      	ldr	r2, [r3, #20]
 80013c6:	23a0      	movs	r3, #160	; 0xa0
 80013c8:	05db      	lsls	r3, r3, #23
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	438a      	bics	r2, r1
 80013ce:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 80013d0:	23a0      	movs	r3, #160	; 0xa0
 80013d2:	05db      	lsls	r3, r3, #23
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	23a0      	movs	r3, #160	; 0xa0
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	2140      	movs	r1, #64	; 0x40
 80013dc:	430a      	orrs	r2, r1
 80013de:	615a      	str	r2, [r3, #20]
	}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b002      	add	sp, #8
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40004800 	.word	0x40004800
 80013ec:	00002001 	.word	0x00002001

080013f0 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	0005      	movs	r5, r0
 80013f8:	000c      	movs	r4, r1
 80013fa:	0010      	movs	r0, r2
 80013fc:	0019      	movs	r1, r3
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	1c2a      	adds	r2, r5, #0
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	1dbb      	adds	r3, r7, #6
 8001406:	1c22      	adds	r2, r4, #0
 8001408:	701a      	strb	r2, [r3, #0]
 800140a:	1d7b      	adds	r3, r7, #5
 800140c:	1c02      	adds	r2, r0, #0
 800140e:	701a      	strb	r2, [r3, #0]
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	1c0a      	adds	r2, r1, #0
 8001414:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001416:	240e      	movs	r4, #14
 8001418:	193b      	adds	r3, r7, r4
 800141a:	2200      	movs	r2, #0
 800141c:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b25b      	sxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	da00      	bge.n	800142a <weoDrawRectangleFilled+0x3a>
 8001428:	e0b7      	b.n	800159a <weoDrawRectangleFilled+0x1aa>
 800142a:	1dbb      	adds	r3, r7, #6
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b25b      	sxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	da00      	bge.n	8001436 <weoDrawRectangleFilled+0x46>
 8001434:	e0b1      	b.n	800159a <weoDrawRectangleFilled+0x1aa>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8001436:	1d7b      	adds	r3, r7, #5
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b25b      	sxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	da00      	bge.n	8001442 <weoDrawRectangleFilled+0x52>
 8001440:	e0ab      	b.n	800159a <weoDrawRectangleFilled+0x1aa>
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b25b      	sxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	da00      	bge.n	800144e <weoDrawRectangleFilled+0x5e>
 800144c:	e0a5      	b.n	800159a <weoDrawRectangleFilled+0x1aa>
				return;
			}


			start_x_New=start_x;
 800144e:	250d      	movs	r5, #13
 8001450:	197b      	adds	r3, r7, r5
 8001452:	1dfa      	adds	r2, r7, #7
 8001454:	7812      	ldrb	r2, [r2, #0]
 8001456:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001458:	260c      	movs	r6, #12
 800145a:	19bb      	adds	r3, r7, r6
 800145c:	1d3a      	adds	r2, r7, #4
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	217f      	movs	r1, #127	; 0x7f
 8001462:	1a8a      	subs	r2, r1, r2
 8001464:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8001466:	230b      	movs	r3, #11
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	1d7a      	adds	r2, r7, #5
 800146c:	7812      	ldrb	r2, [r2, #0]
 800146e:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001470:	220a      	movs	r2, #10
 8001472:	18bb      	adds	r3, r7, r2
 8001474:	1dba      	adds	r2, r7, #6
 8001476:	7812      	ldrb	r2, [r2, #0]
 8001478:	217f      	movs	r1, #127	; 0x7f
 800147a:	1a8a      	subs	r2, r1, r2
 800147c:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800147e:	23a0      	movs	r3, #160	; 0xa0
 8001480:	05db      	lsls	r3, r3, #23
 8001482:	695a      	ldr	r2, [r3, #20]
 8001484:	23a0      	movs	r3, #160	; 0xa0
 8001486:	05db      	lsls	r3, r3, #23
 8001488:	2140      	movs	r1, #64	; 0x40
 800148a:	438a      	bics	r2, r1
 800148c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800148e:	23a0      	movs	r3, #160	; 0xa0
 8001490:	05db      	lsls	r3, r3, #23
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	23a0      	movs	r3, #160	; 0xa0
 8001496:	05db      	lsls	r3, r3, #23
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	438a      	bics	r2, r1
 800149c:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800149e:	2075      	movs	r0, #117	; 0x75
 80014a0:	f7ff fec4 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 80014a4:	197b      	adds	r3, r7, r5
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff febf 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 80014ae:	230b      	movs	r3, #11
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff feb9 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80014ba:	2015      	movs	r0, #21
 80014bc:	f7ff feb6 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 80014c0:	19bb      	adds	r3, r7, r6
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	085b      	lsrs	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff feaf 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80014ce:	220a      	movs	r2, #10
 80014d0:	18bb      	adds	r3, r7, r2
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	085b      	lsrs	r3, r3, #1
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff fea7 	bl	800122c <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 80014de:	23a0      	movs	r3, #160	; 0xa0
 80014e0:	05db      	lsls	r3, r3, #23
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	23a0      	movs	r3, #160	; 0xa0
 80014e6:	05db      	lsls	r3, r3, #23
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	430a      	orrs	r2, r1
 80014ec:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80014ee:	23a0      	movs	r3, #160	; 0xa0
 80014f0:	05db      	lsls	r3, r3, #23
 80014f2:	695a      	ldr	r2, [r3, #20]
 80014f4:	23a0      	movs	r3, #160	; 0xa0
 80014f6:	05db      	lsls	r3, r3, #23
 80014f8:	2140      	movs	r1, #64	; 0x40
 80014fa:	430a      	orrs	r2, r1
 80014fc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014fe:	23a0      	movs	r3, #160	; 0xa0
 8001500:	05db      	lsls	r3, r3, #23
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	23a0      	movs	r3, #160	; 0xa0
 8001506:	05db      	lsls	r3, r3, #23
 8001508:	2140      	movs	r1, #64	; 0x40
 800150a:	438a      	bics	r2, r1
 800150c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 800150e:	23a0      	movs	r3, #160	; 0xa0
 8001510:	05db      	lsls	r3, r3, #23
 8001512:	695a      	ldr	r2, [r3, #20]
 8001514:	23a0      	movs	r3, #160	; 0xa0
 8001516:	05db      	lsls	r3, r3, #23
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	430a      	orrs	r2, r1
 800151c:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800151e:	193b      	adds	r3, r7, r4
 8001520:	2200      	movs	r2, #0
 8001522:	801a      	strh	r2, [r3, #0]
 8001524:	e012      	b.n	800154c <weoDrawRectangleFilled+0x15c>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <weoDrawRectangleFilled+0x1b4>)
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	4013      	ands	r3, r2
 8001530:	d0fa      	beq.n	8001528 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 8001532:	210e      	movs	r1, #14
 8001534:	187b      	adds	r3, r7, r1
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800153a:	18d3      	adds	r3, r2, r3
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <weoDrawRectangleFilled+0x1b4>)
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 8001542:	187b      	adds	r3, r7, r1
 8001544:	881a      	ldrh	r2, [r3, #0]
 8001546:	187b      	adds	r3, r7, r1
 8001548:	3201      	adds	r2, #1
 800154a:	801a      	strh	r2, [r3, #0]
 800154c:	230e      	movs	r3, #14
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	881a      	ldrh	r2, [r3, #0]
 8001552:	230b      	movs	r3, #11
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	7819      	ldrb	r1, [r3, #0]
 8001558:	230d      	movs	r3, #13
 800155a:	18fb      	adds	r3, r7, r3
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	1acb      	subs	r3, r1, r3
 8001560:	3301      	adds	r3, #1
 8001562:	210a      	movs	r1, #10
 8001564:	1879      	adds	r1, r7, r1
 8001566:	7809      	ldrb	r1, [r1, #0]
 8001568:	0849      	lsrs	r1, r1, #1
 800156a:	b2c9      	uxtb	r1, r1
 800156c:	0008      	movs	r0, r1
 800156e:	210c      	movs	r1, #12
 8001570:	1879      	adds	r1, r7, r1
 8001572:	7809      	ldrb	r1, [r1, #0]
 8001574:	0849      	lsrs	r1, r1, #1
 8001576:	b2c9      	uxtb	r1, r1
 8001578:	1a41      	subs	r1, r0, r1
 800157a:	3101      	adds	r1, #1
 800157c:	434b      	muls	r3, r1
 800157e:	429a      	cmp	r2, r3
 8001580:	dbd1      	blt.n	8001526 <weoDrawRectangleFilled+0x136>
			}
//			while(!(USART3->ISR & USART_ISR_TXE)){};
			HAL_Delay(1);
 8001582:	2001      	movs	r0, #1
 8001584:	f001 fdf4 	bl	8003170 <HAL_Delay>
//			GPIOA->ODR &= ~(1 << 7);	//reset dc
			GPIOA->ODR |= 1 << 6;	//set cs
 8001588:	23a0      	movs	r3, #160	; 0xa0
 800158a:	05db      	lsls	r3, r3, #23
 800158c:	695a      	ldr	r2, [r3, #20]
 800158e:	23a0      	movs	r3, #160	; 0xa0
 8001590:	05db      	lsls	r3, r3, #23
 8001592:	2140      	movs	r1, #64	; 0x40
 8001594:	430a      	orrs	r2, r1
 8001596:	615a      	str	r2, [r3, #20]
 8001598:	e000      	b.n	800159c <weoDrawRectangleFilled+0x1ac>
				return;
 800159a:	46c0      	nop			; (mov r8, r8)
		}
 800159c:	46bd      	mov	sp, r7
 800159e:	b005      	add	sp, #20
 80015a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	40004800 	.word	0x40004800

080015a8 <weoDrawRectangleInit>:
//========================================================================================================================
	void weoDrawRectangleInit(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y) {
 80015a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	0005      	movs	r5, r0
 80015b0:	000c      	movs	r4, r1
 80015b2:	0010      	movs	r0, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	1c2a      	adds	r2, r5, #0
 80015ba:	701a      	strb	r2, [r3, #0]
 80015bc:	1dbb      	adds	r3, r7, #6
 80015be:	1c22      	adds	r2, r4, #0
 80015c0:	701a      	strb	r2, [r3, #0]
 80015c2:	1d7b      	adds	r3, r7, #5
 80015c4:	1c02      	adds	r2, r0, #0
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	1c0a      	adds	r2, r1, #0
 80015cc:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80015ce:	230e      	movs	r3, #14
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	2200      	movs	r2, #0
 80015d4:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db66      	blt.n	80016ae <weoDrawRectangleInit+0x106>
 80015e0:	1dbb      	adds	r3, r7, #6
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	db61      	blt.n	80016ae <weoDrawRectangleInit+0x106>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80015ea:	1d7b      	adds	r3, r7, #5
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b25b      	sxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db5c      	blt.n	80016ae <weoDrawRectangleInit+0x106>
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db57      	blt.n	80016ae <weoDrawRectangleInit+0x106>
				return;
			}
			start_x_New=start_x;
 80015fe:	240d      	movs	r4, #13
 8001600:	193b      	adds	r3, r7, r4
 8001602:	1dfa      	adds	r2, r7, #7
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001608:	250c      	movs	r5, #12
 800160a:	197b      	adds	r3, r7, r5
 800160c:	1d3a      	adds	r2, r7, #4
 800160e:	7812      	ldrb	r2, [r2, #0]
 8001610:	217f      	movs	r1, #127	; 0x7f
 8001612:	1a8a      	subs	r2, r1, r2
 8001614:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8001616:	260b      	movs	r6, #11
 8001618:	19bb      	adds	r3, r7, r6
 800161a:	1d7a      	adds	r2, r7, #5
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001620:	230a      	movs	r3, #10
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	1dba      	adds	r2, r7, #6
 8001626:	7812      	ldrb	r2, [r2, #0]
 8001628:	217f      	movs	r1, #127	; 0x7f
 800162a:	1a8a      	subs	r2, r1, r2
 800162c:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800162e:	23a0      	movs	r3, #160	; 0xa0
 8001630:	05db      	lsls	r3, r3, #23
 8001632:	695a      	ldr	r2, [r3, #20]
 8001634:	23a0      	movs	r3, #160	; 0xa0
 8001636:	05db      	lsls	r3, r3, #23
 8001638:	2140      	movs	r1, #64	; 0x40
 800163a:	438a      	bics	r2, r1
 800163c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800163e:	23a0      	movs	r3, #160	; 0xa0
 8001640:	05db      	lsls	r3, r3, #23
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	23a0      	movs	r3, #160	; 0xa0
 8001646:	05db      	lsls	r3, r3, #23
 8001648:	2180      	movs	r1, #128	; 0x80
 800164a:	438a      	bics	r2, r1
 800164c:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800164e:	2075      	movs	r0, #117	; 0x75
 8001650:	f7ff fdec 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001654:	193b      	adds	r3, r7, r4
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	0018      	movs	r0, r3
 800165a:	f7ff fde7 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800165e:	19bb      	adds	r3, r7, r6
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	0018      	movs	r0, r3
 8001664:	f7ff fde2 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001668:	2015      	movs	r0, #21
 800166a:	f7ff fddf 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 800166e:	197b      	adds	r3, r7, r5
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	085b      	lsrs	r3, r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	0018      	movs	r0, r3
 8001678:	f7ff fdd8 	bl	800122c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800167c:	230a      	movs	r3, #10
 800167e:	18fb      	adds	r3, r7, r3
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	085b      	lsrs	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	0018      	movs	r0, r3
 8001688:	f7ff fdd0 	bl	800122c <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 800168c:	23a0      	movs	r3, #160	; 0xa0
 800168e:	05db      	lsls	r3, r3, #23
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	23a0      	movs	r3, #160	; 0xa0
 8001694:	05db      	lsls	r3, r3, #23
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	430a      	orrs	r2, r1
 800169a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800169c:	23a0      	movs	r3, #160	; 0xa0
 800169e:	05db      	lsls	r3, r3, #23
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	23a0      	movs	r3, #160	; 0xa0
 80016a4:	05db      	lsls	r3, r3, #23
 80016a6:	2140      	movs	r1, #64	; 0x40
 80016a8:	430a      	orrs	r2, r1
 80016aa:	615a      	str	r2, [r3, #20]
 80016ac:	e000      	b.n	80016b0 <weoDrawRectangleInit+0x108>
				return;
 80016ae:	46c0      	nop			; (mov r8, r8)
		}
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b005      	add	sp, #20
 80016b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016b8 <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80016c0:	230f      	movs	r3, #15
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	22ff      	movs	r2, #255	; 0xff
 80016c6:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80016c8:	230d      	movs	r3, #13
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 80016d0:	230a      	movs	r3, #10
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	2200      	movs	r2, #0
 80016d6:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 80016d8:	4bd1      	ldr	r3, [pc, #836]	; (8001a20 <answer2CPU+0x368>)
 80016da:	2200      	movs	r2, #0
 80016dc:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x14)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b11      	cmp	r3, #17
 80016e4:	d007      	beq.n	80016f6 <answer2CPU+0x3e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d003      	beq.n	80016f6 <answer2CPU+0x3e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b14      	cmp	r3, #20
 80016f4:	d105      	bne.n	8001702 <answer2CPU+0x4a>
 80016f6:	4bcb      	ldr	r3, [pc, #812]	; (8001a24 <answer2CPU+0x36c>)
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	4bca      	ldr	r3, [pc, #808]	; (8001a24 <answer2CPU+0x36c>)
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	438a      	bics	r2, r1
 8001700:	615a      	str	r2, [r3, #20]
		ans[0] = cmd[0]|0x80;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	4252      	negs	r2, r2
 800170a:	4313      	orrs	r3, r2
 800170c:	b2db      	uxtb	r3, r3
 800170e:	b29a      	uxth	r2, r3
 8001710:	4bc5      	ldr	r3, [pc, #788]	; (8001a28 <answer2CPU+0x370>)
 8001712:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b0f      	cmp	r3, #15
 800171a:	d800      	bhi.n	800171e <answer2CPU+0x66>
 800171c:	e150      	b.n	80019c0 <answer2CPU+0x308>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b15      	cmp	r3, #21
 8001724:	d900      	bls.n	8001728 <answer2CPU+0x70>
 8001726:	e14b      	b.n	80019c0 <answer2CPU+0x308>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 8001728:	23a0      	movs	r3, #160	; 0xa0
 800172a:	05db      	lsls	r3, r3, #23
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2201      	movs	r2, #1
 8001730:	4013      	ands	r3, r2
 8001732:	d106      	bne.n	8001742 <answer2CPU+0x8a>
					keyboard &= 0b11111110;
 8001734:	220f      	movs	r2, #15
 8001736:	18bb      	adds	r3, r7, r2
 8001738:	18ba      	adds	r2, r7, r2
 800173a:	7812      	ldrb	r2, [r2, #0]
 800173c:	2101      	movs	r1, #1
 800173e:	438a      	bics	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 8001742:	23a0      	movs	r3, #160	; 0xa0
 8001744:	05db      	lsls	r3, r3, #23
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	2202      	movs	r2, #2
 800174a:	4013      	ands	r3, r2
 800174c:	d106      	bne.n	800175c <answer2CPU+0xa4>
					keyboard &= 0b11111101;
 800174e:	220f      	movs	r2, #15
 8001750:	18bb      	adds	r3, r7, r2
 8001752:	18ba      	adds	r2, r7, r2
 8001754:	7812      	ldrb	r2, [r2, #0]
 8001756:	2102      	movs	r1, #2
 8001758:	438a      	bics	r2, r1
 800175a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 800175c:	23a0      	movs	r3, #160	; 0xa0
 800175e:	05db      	lsls	r3, r3, #23
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	2210      	movs	r2, #16
 8001764:	4013      	ands	r3, r2
 8001766:	d106      	bne.n	8001776 <answer2CPU+0xbe>
					keyboard &= 0b11111011;
 8001768:	220f      	movs	r2, #15
 800176a:	18bb      	adds	r3, r7, r2
 800176c:	18ba      	adds	r2, r7, r2
 800176e:	7812      	ldrb	r2, [r2, #0]
 8001770:	2104      	movs	r1, #4
 8001772:	438a      	bics	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001776:	23a0      	movs	r3, #160	; 0xa0
 8001778:	05db      	lsls	r3, r3, #23
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	019b      	lsls	r3, r3, #6
 8001780:	4013      	ands	r3, r2
 8001782:	d106      	bne.n	8001792 <answer2CPU+0xda>
					keyboard &= 0b11110111;
 8001784:	220f      	movs	r2, #15
 8001786:	18bb      	adds	r3, r7, r2
 8001788:	18ba      	adds	r2, r7, r2
 800178a:	7812      	ldrb	r2, [r2, #0]
 800178c:	2108      	movs	r1, #8
 800178e:	438a      	bics	r2, r1
 8001790:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8001792:	23a0      	movs	r3, #160	; 0xa0
 8001794:	05db      	lsls	r3, r3, #23
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	01db      	lsls	r3, r3, #7
 800179c:	4013      	ands	r3, r2
 800179e:	d106      	bne.n	80017ae <answer2CPU+0xf6>
					keyboard &= 0b11101111;
 80017a0:	220f      	movs	r2, #15
 80017a2:	18bb      	adds	r3, r7, r2
 80017a4:	18ba      	adds	r2, r7, r2
 80017a6:	7812      	ldrb	r2, [r2, #0]
 80017a8:	2110      	movs	r1, #16
 80017aa:	438a      	bics	r2, r1
 80017ac:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 80017ae:	210f      	movs	r1, #15
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	187a      	adds	r2, r7, r1
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	43d2      	mvns	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 80017ba:	2009      	movs	r0, #9
 80017bc:	183b      	adds	r3, r7, r0
 80017be:	2204      	movs	r2, #4
 80017c0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80017c2:	183b      	adds	r3, r7, r0
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	3b02      	subs	r3, #2
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b96      	ldr	r3, [pc, #600]	; (8001a28 <answer2CPU+0x370>)
 80017ce:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 80017d0:	187b      	adds	r3, r7, r1
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b94      	ldr	r3, [pc, #592]	; (8001a28 <answer2CPU+0x370>)
 80017d8:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80017da:	230e      	movs	r3, #14
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	e011      	b.n	8001808 <answer2CPU+0x150>
					myCS = myCS + ans[i];
 80017e4:	200e      	movs	r0, #14
 80017e6:	183b      	adds	r3, r7, r0
 80017e8:	781a      	ldrb	r2, [r3, #0]
 80017ea:	4b8f      	ldr	r3, [pc, #572]	; (8001a28 <answer2CPU+0x370>)
 80017ec:	0052      	lsls	r2, r2, #1
 80017ee:	5ad3      	ldrh	r3, [r2, r3]
 80017f0:	b2d9      	uxtb	r1, r3
 80017f2:	220d      	movs	r2, #13
 80017f4:	18bb      	adds	r3, r7, r2
 80017f6:	18ba      	adds	r2, r7, r2
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	188a      	adds	r2, r1, r2
 80017fc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80017fe:	183b      	adds	r3, r7, r0
 8001800:	781a      	ldrb	r2, [r3, #0]
 8001802:	183b      	adds	r3, r7, r0
 8001804:	3201      	adds	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
 8001808:	200e      	movs	r0, #14
 800180a:	183b      	adds	r3, r7, r0
 800180c:	781a      	ldrb	r2, [r3, #0]
 800180e:	2309      	movs	r3, #9
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	3b01      	subs	r3, #1
 8001816:	429a      	cmp	r2, r3
 8001818:	dbe4      	blt.n	80017e4 <answer2CPU+0x12c>
				}
				myCS = 0 - myCS;
 800181a:	210d      	movs	r1, #13
 800181c:	187b      	adds	r3, r7, r1
 800181e:	187a      	adds	r2, r7, r1
 8001820:	7812      	ldrb	r2, [r2, #0]
 8001822:	4252      	negs	r2, r2
 8001824:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8001826:	187b      	adds	r3, r7, r1
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b29a      	uxth	r2, r3
 800182c:	4b7e      	ldr	r3, [pc, #504]	; (8001a28 <answer2CPU+0x370>)
 800182e:	80da      	strh	r2, [r3, #6]
				i=0;
 8001830:	183b      	adds	r3, r7, r0
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	4b7c      	ldr	r3, [pc, #496]	; (8001a2c <answer2CPU+0x374>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	2280      	movs	r2, #128	; 0x80
 800183e:	4013      	ands	r3, r2
 8001840:	d0fa      	beq.n	8001838 <answer2CPU+0x180>
				USART2->TDR = ans[0]|0x0100;
 8001842:	4b79      	ldr	r3, [pc, #484]	; (8001a28 <answer2CPU+0x370>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	0052      	lsls	r2, r2, #1
 800184a:	4313      	orrs	r3, r2
 800184c:	b29a      	uxth	r2, r3
 800184e:	4b77      	ldr	r3, [pc, #476]	; (8001a2c <answer2CPU+0x374>)
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001852:	230e      	movs	r3, #14
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e013      	b.n	8001884 <answer2CPU+0x1cc>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	4b73      	ldr	r3, [pc, #460]	; (8001a2c <answer2CPU+0x374>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	4013      	ands	r3, r2
 8001866:	d0fa      	beq.n	800185e <answer2CPU+0x1a6>
				    USART2->TDR = (uint8_t)ans[i];
 8001868:	210e      	movs	r1, #14
 800186a:	187b      	adds	r3, r7, r1
 800186c:	781a      	ldrb	r2, [r3, #0]
 800186e:	4b6e      	ldr	r3, [pc, #440]	; (8001a28 <answer2CPU+0x370>)
 8001870:	0052      	lsls	r2, r2, #1
 8001872:	5ad3      	ldrh	r3, [r2, r3]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b6d      	ldr	r3, [pc, #436]	; (8001a2c <answer2CPU+0x374>)
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800187a:	187b      	adds	r3, r7, r1
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	187b      	adds	r3, r7, r1
 8001880:	3201      	adds	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
 8001884:	230e      	movs	r3, #14
 8001886:	18fa      	adds	r2, r7, r3
 8001888:	2309      	movs	r3, #9
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	7812      	ldrb	r2, [r2, #0]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d3e3      	bcc.n	800185c <answer2CPU+0x1a4>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b11      	cmp	r3, #17
 800189a:	d109      	bne.n	80018b0 <answer2CPU+0x1f8>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	789a      	ldrb	r2, [r3, #2]
 80018a0:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <answer2CPU+0x378>)
 80018a2:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 80018a4:	4b5e      	ldr	r3, [pc, #376]	; (8001a20 <answer2CPU+0x368>)
 80018a6:	2211      	movs	r2, #17
 80018a8:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80018aa:	4b62      	ldr	r3, [pc, #392]	; (8001a34 <answer2CPU+0x37c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b12      	cmp	r3, #18
 80018b6:	d115      	bne.n	80018e4 <answer2CPU+0x22c>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3302      	adds	r3, #2
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	001a      	movs	r2, r3
 80018c0:	4b5d      	ldr	r3, [pc, #372]	; (8001a38 <answer2CPU+0x380>)
 80018c2:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3303      	adds	r3, #3
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	001a      	movs	r2, r3
 80018cc:	4b5b      	ldr	r3, [pc, #364]	; (8001a3c <answer2CPU+0x384>)
 80018ce:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	791a      	ldrb	r2, [r3, #4]
 80018d4:	4b56      	ldr	r3, [pc, #344]	; (8001a30 <answer2CPU+0x378>)
 80018d6:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 80018d8:	4b51      	ldr	r3, [pc, #324]	; (8001a20 <answer2CPU+0x368>)
 80018da:	2212      	movs	r2, #18
 80018dc:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80018de:	4b55      	ldr	r3, [pc, #340]	; (8001a34 <answer2CPU+0x37c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b13      	cmp	r3, #19
 80018ea:	d134      	bne.n	8001956 <answer2CPU+0x29e>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3302      	adds	r3, #2
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	001a      	movs	r2, r3
 80018f4:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <answer2CPU+0x380>)
 80018f6:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3303      	adds	r3, #3
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	001a      	movs	r2, r3
 8001900:	4b4e      	ldr	r3, [pc, #312]	; (8001a3c <answer2CPU+0x384>)
 8001902:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3301      	adds	r3, #1
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	3b03      	subs	r3, #3
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <answer2CPU+0x388>)
 8001910:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001912:	230e      	movs	r3, #14
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
 800191a:	e00f      	b.n	800193c <answer2CPU+0x284>
					dataASCII[i] = cmd[i+4];
 800191c:	200e      	movs	r0, #14
 800191e:	183b      	adds	r3, r7, r0
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	3304      	adds	r3, #4
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	18d2      	adds	r2, r2, r3
 8001928:	183b      	adds	r3, r7, r0
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	7811      	ldrb	r1, [r2, #0]
 800192e:	4a45      	ldr	r2, [pc, #276]	; (8001a44 <answer2CPU+0x38c>)
 8001930:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001932:	183b      	adds	r3, r7, r0
 8001934:	781a      	ldrb	r2, [r3, #0]
 8001936:	183b      	adds	r3, r7, r0
 8001938:	3201      	adds	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	4b40      	ldr	r3, [pc, #256]	; (8001a40 <answer2CPU+0x388>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	220e      	movs	r2, #14
 8001942:	18ba      	adds	r2, r7, r2
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d3e8      	bcc.n	800191c <answer2CPU+0x264>
				}
					cmd2Execute=0x13;
 800194a:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <answer2CPU+0x368>)
 800194c:	2213      	movs	r2, #19
 800194e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001950:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <answer2CPU+0x37c>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b14      	cmp	r3, #20
 800195c:	d10c      	bne.n	8001978 <answer2CPU+0x2c0>
					numSound = cmd[3];
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	78da      	ldrb	r2, [r3, #3]
 8001962:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <answer2CPU+0x390>)
 8001964:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001966:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <answer2CPU+0x368>)
 8001968:	2214      	movs	r2, #20
 800196a:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	22ff      	movs	r2, #255	; 0xff
 8001970:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <answer2CPU+0x37c>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b15      	cmp	r3, #21
 800197e:	d10d      	bne.n	800199c <answer2CPU+0x2e4>
					volume = cmd[2];
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	789a      	ldrb	r2, [r3, #2]
 8001984:	4b31      	ldr	r3, [pc, #196]	; (8001a4c <answer2CPU+0x394>)
 8001986:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	78da      	ldrb	r2, [r3, #3]
 800198c:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <answer2CPU+0x398>)
 800198e:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001990:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <answer2CPU+0x368>)
 8001992:	2215      	movs	r2, #21
 8001994:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <answer2CPU+0x37c>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b16      	cmp	r3, #22
 80019a2:	d10d      	bne.n	80019c0 <answer2CPU+0x308>
					volume = cmd[3];
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	78da      	ldrb	r2, [r3, #3]
 80019a8:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <answer2CPU+0x394>)
 80019aa:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	791a      	ldrb	r2, [r3, #4]
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <answer2CPU+0x398>)
 80019b2:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <answer2CPU+0x368>)
 80019b6:	2216      	movs	r2, #22
 80019b8:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80019ba:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <answer2CPU+0x37c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d000      	beq.n	80019ca <answer2CPU+0x312>
 80019c8:	e09c      	b.n	8001b04 <answer2CPU+0x44c>
				myLength = 0x14; //20 bytes length answer
 80019ca:	2109      	movs	r1, #9
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	2214      	movs	r2, #20
 80019d0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80019d2:	187b      	adds	r3, r7, r1
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3b02      	subs	r3, #2
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <answer2CPU+0x370>)
 80019de:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80019e0:	230e      	movs	r3, #14
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	e010      	b.n	8001a0c <answer2CPU+0x354>
					ans[i + 2] = PCB_type[i];
 80019ea:	200e      	movs	r0, #14
 80019ec:	183b      	adds	r3, r7, r0
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <answer2CPU+0x39c>)
 80019f2:	5cd1      	ldrb	r1, [r2, r3]
 80019f4:	183b      	adds	r3, r7, r0
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	1c9a      	adds	r2, r3, #2
 80019fa:	b289      	uxth	r1, r1
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <answer2CPU+0x370>)
 80019fe:	0052      	lsls	r2, r2, #1
 8001a00:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001a02:	183b      	adds	r3, r7, r0
 8001a04:	781a      	ldrb	r2, [r3, #0]
 8001a06:	183b      	adds	r3, r7, r0
 8001a08:	3201      	adds	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	220e      	movs	r2, #14
 8001a0e:	18bb      	adds	r3, r7, r2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b10      	cmp	r3, #16
 8001a14:	d9e9      	bls.n	80019ea <answer2CPU+0x332>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001a16:	18bb      	adds	r3, r7, r2
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e02e      	b.n	8001a7c <answer2CPU+0x3c4>
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	2000348e 	.word	0x2000348e
 8001a24:	50000800 	.word	0x50000800
 8001a28:	200034d0 	.word	0x200034d0
 8001a2c:	40004400 	.word	0x40004400
 8001a30:	2000348d 	.word	0x2000348d
 8001a34:	200034e4 	.word	0x200034e4
 8001a38:	20003324 	.word	0x20003324
 8001a3c:	200033b8 	.word	0x200033b8
 8001a40:	200034cd 	.word	0x200034cd
 8001a44:	200031d4 	.word	0x200031d4
 8001a48:	2000354d 	.word	0x2000354d
 8001a4c:	20003321 	.word	0x20003321
 8001a50:	20003424 	.word	0x20003424
 8001a54:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 8001a58:	200e      	movs	r0, #14
 8001a5a:	183b      	adds	r3, r7, r0
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	4bdb      	ldr	r3, [pc, #876]	; (8001dcc <answer2CPU+0x714>)
 8001a60:	0052      	lsls	r2, r2, #1
 8001a62:	5ad3      	ldrh	r3, [r2, r3]
 8001a64:	b2d9      	uxtb	r1, r3
 8001a66:	220d      	movs	r2, #13
 8001a68:	18bb      	adds	r3, r7, r2
 8001a6a:	18ba      	adds	r2, r7, r2
 8001a6c:	7812      	ldrb	r2, [r2, #0]
 8001a6e:	188a      	adds	r2, r1, r2
 8001a70:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001a72:	183b      	adds	r3, r7, r0
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	183b      	adds	r3, r7, r0
 8001a78:	3201      	adds	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	230e      	movs	r3, #14
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	2009      	movs	r0, #9
 8001a84:	183b      	adds	r3, r7, r0
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	dbe4      	blt.n	8001a58 <answer2CPU+0x3a0>
				}
				myCS = 0 - myCS;
 8001a8e:	210d      	movs	r1, #13
 8001a90:	187b      	adds	r3, r7, r1
 8001a92:	187a      	adds	r2, r7, r1
 8001a94:	7812      	ldrb	r2, [r2, #0]
 8001a96:	4252      	negs	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001a9a:	183b      	adds	r3, r7, r0
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	1e5a      	subs	r2, r3, #1
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	b299      	uxth	r1, r3
 8001aa6:	4bc9      	ldr	r3, [pc, #804]	; (8001dcc <answer2CPU+0x714>)
 8001aa8:	0052      	lsls	r2, r2, #1
 8001aaa:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	4bc8      	ldr	r3, [pc, #800]	; (8001dd0 <answer2CPU+0x718>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	2280      	movs	r2, #128	; 0x80
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d0fa      	beq.n	8001aae <answer2CPU+0x3f6>
				USART2->TDR = ans[0]|0x0100;
 8001ab8:	4bc4      	ldr	r3, [pc, #784]	; (8001dcc <answer2CPU+0x714>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	2280      	movs	r2, #128	; 0x80
 8001abe:	0052      	lsls	r2, r2, #1
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4bc2      	ldr	r3, [pc, #776]	; (8001dd0 <answer2CPU+0x718>)
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001ac8:	e014      	b.n	8001af4 <answer2CPU+0x43c>
				  {
				    i++;
 8001aca:	210e      	movs	r1, #14
 8001acc:	187b      	adds	r3, r7, r1
 8001ace:	781a      	ldrb	r2, [r3, #0]
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	3201      	adds	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	4bbd      	ldr	r3, [pc, #756]	; (8001dd0 <answer2CPU+0x718>)
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d0fa      	beq.n	8001ad8 <answer2CPU+0x420>
				    USART2->TDR = (uint8_t)ans[i];
 8001ae2:	230e      	movs	r3, #14
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	4bb8      	ldr	r3, [pc, #736]	; (8001dcc <answer2CPU+0x714>)
 8001aea:	0052      	lsls	r2, r2, #1
 8001aec:	5ad3      	ldrh	r3, [r2, r3]
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	4bb7      	ldr	r3, [pc, #732]	; (8001dd0 <answer2CPU+0x718>)
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001af4:	230e      	movs	r3, #14
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	4bb4      	ldr	r3, [pc, #720]	; (8001dcc <answer2CPU+0x714>)
 8001afc:	0052      	lsls	r2, r2, #1
 8001afe:	5ad3      	ldrh	r3, [r2, r3]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e2      	bne.n	8001aca <answer2CPU+0x412>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d000      	beq.n	8001b0e <answer2CPU+0x456>
 8001b0c:	e07f      	b.n	8001c0e <answer2CPU+0x556>
				myLength = 0x0B; //19 bytes length answer
 8001b0e:	2109      	movs	r1, #9
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	220b      	movs	r2, #11
 8001b14:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b02      	subs	r3, #2
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4baa      	ldr	r3, [pc, #680]	; (8001dcc <answer2CPU+0x714>)
 8001b22:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001b24:	230e      	movs	r3, #14
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	e010      	b.n	8001b50 <answer2CPU+0x498>
					ans[i + 2] = PCB_rev[i];
 8001b2e:	200e      	movs	r0, #14
 8001b30:	183b      	adds	r3, r7, r0
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4aa7      	ldr	r2, [pc, #668]	; (8001dd4 <answer2CPU+0x71c>)
 8001b36:	5cd1      	ldrb	r1, [r2, r3]
 8001b38:	183b      	adds	r3, r7, r0
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	1c9a      	adds	r2, r3, #2
 8001b3e:	b289      	uxth	r1, r1
 8001b40:	4ba2      	ldr	r3, [pc, #648]	; (8001dcc <answer2CPU+0x714>)
 8001b42:	0052      	lsls	r2, r2, #1
 8001b44:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001b46:	183b      	adds	r3, r7, r0
 8001b48:	781a      	ldrb	r2, [r3, #0]
 8001b4a:	183b      	adds	r3, r7, r0
 8001b4c:	3201      	adds	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	220e      	movs	r2, #14
 8001b52:	18bb      	adds	r3, r7, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d9e9      	bls.n	8001b2e <answer2CPU+0x476>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001b5a:	18bb      	adds	r3, r7, r2
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
 8001b60:	e011      	b.n	8001b86 <answer2CPU+0x4ce>
					myCS = myCS + ans[i];
 8001b62:	200e      	movs	r0, #14
 8001b64:	183b      	adds	r3, r7, r0
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	4b98      	ldr	r3, [pc, #608]	; (8001dcc <answer2CPU+0x714>)
 8001b6a:	0052      	lsls	r2, r2, #1
 8001b6c:	5ad3      	ldrh	r3, [r2, r3]
 8001b6e:	b2d9      	uxtb	r1, r3
 8001b70:	220d      	movs	r2, #13
 8001b72:	18bb      	adds	r3, r7, r2
 8001b74:	18ba      	adds	r2, r7, r2
 8001b76:	7812      	ldrb	r2, [r2, #0]
 8001b78:	188a      	adds	r2, r1, r2
 8001b7a:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001b7c:	183b      	adds	r3, r7, r0
 8001b7e:	781a      	ldrb	r2, [r3, #0]
 8001b80:	183b      	adds	r3, r7, r0
 8001b82:	3201      	adds	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	230e      	movs	r3, #14
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	2009      	movs	r0, #9
 8001b8e:	183b      	adds	r3, r7, r0
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbe4      	blt.n	8001b62 <answer2CPU+0x4aa>
				}
				myCS = 0 - myCS;
 8001b98:	210d      	movs	r1, #13
 8001b9a:	187b      	adds	r3, r7, r1
 8001b9c:	187a      	adds	r2, r7, r1
 8001b9e:	7812      	ldrb	r2, [r2, #0]
 8001ba0:	4252      	negs	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001ba4:	183b      	adds	r3, r7, r0
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	1e5a      	subs	r2, r3, #1
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	b299      	uxth	r1, r3
 8001bb0:	4b86      	ldr	r3, [pc, #536]	; (8001dcc <answer2CPU+0x714>)
 8001bb2:	0052      	lsls	r2, r2, #1
 8001bb4:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	4b85      	ldr	r3, [pc, #532]	; (8001dd0 <answer2CPU+0x718>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	2280      	movs	r2, #128	; 0x80
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d0fa      	beq.n	8001bb8 <answer2CPU+0x500>
				USART2->TDR = ans[0]|0x0100;
 8001bc2:	4b82      	ldr	r3, [pc, #520]	; (8001dcc <answer2CPU+0x714>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	0052      	lsls	r2, r2, #1
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b80      	ldr	r3, [pc, #512]	; (8001dd0 <answer2CPU+0x718>)
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001bd2:	e014      	b.n	8001bfe <answer2CPU+0x546>
					  {
					    i++;
 8001bd4:	210e      	movs	r1, #14
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	781a      	ldrb	r2, [r3, #0]
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	3201      	adds	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	4b7b      	ldr	r3, [pc, #492]	; (8001dd0 <answer2CPU+0x718>)
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	2280      	movs	r2, #128	; 0x80
 8001be8:	4013      	ands	r3, r2
 8001bea:	d0fa      	beq.n	8001be2 <answer2CPU+0x52a>
					    USART2->TDR = (uint8_t)ans[i];
 8001bec:	230e      	movs	r3, #14
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	781a      	ldrb	r2, [r3, #0]
 8001bf2:	4b76      	ldr	r3, [pc, #472]	; (8001dcc <answer2CPU+0x714>)
 8001bf4:	0052      	lsls	r2, r2, #1
 8001bf6:	5ad3      	ldrh	r3, [r2, r3]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b75      	ldr	r3, [pc, #468]	; (8001dd0 <answer2CPU+0x718>)
 8001bfc:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001bfe:	230e      	movs	r3, #14
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	4b71      	ldr	r3, [pc, #452]	; (8001dcc <answer2CPU+0x714>)
 8001c06:	0052      	lsls	r2, r2, #1
 8001c08:	5ad3      	ldrh	r3, [r2, r3]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1e2      	bne.n	8001bd4 <answer2CPU+0x51c>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d000      	beq.n	8001c18 <answer2CPU+0x560>
 8001c16:	e07f      	b.n	8001d18 <answer2CPU+0x660>
				myLength = 0x13; //19 bytes length answer
 8001c18:	2109      	movs	r1, #9
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	2213      	movs	r2, #19
 8001c1e:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3b02      	subs	r3, #2
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	4b68      	ldr	r3, [pc, #416]	; (8001dcc <answer2CPU+0x714>)
 8001c2c:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001c2e:	230e      	movs	r3, #14
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	e010      	b.n	8001c5a <answer2CPU+0x5a2>
					ans[i + 2] = EmitterSN[i];
 8001c38:	200e      	movs	r0, #14
 8001c3a:	183b      	adds	r3, r7, r0
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4a66      	ldr	r2, [pc, #408]	; (8001dd8 <answer2CPU+0x720>)
 8001c40:	5cd1      	ldrb	r1, [r2, r3]
 8001c42:	183b      	adds	r3, r7, r0
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	1c9a      	adds	r2, r3, #2
 8001c48:	b289      	uxth	r1, r1
 8001c4a:	4b60      	ldr	r3, [pc, #384]	; (8001dcc <answer2CPU+0x714>)
 8001c4c:	0052      	lsls	r2, r2, #1
 8001c4e:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001c50:	183b      	adds	r3, r7, r0
 8001c52:	781a      	ldrb	r2, [r3, #0]
 8001c54:	183b      	adds	r3, r7, r0
 8001c56:	3201      	adds	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	220e      	movs	r2, #14
 8001c5c:	18bb      	adds	r3, r7, r2
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b10      	cmp	r3, #16
 8001c62:	d9e9      	bls.n	8001c38 <answer2CPU+0x580>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001c64:	18bb      	adds	r3, r7, r2
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	e011      	b.n	8001c90 <answer2CPU+0x5d8>
					myCS = myCS + ans[i];
 8001c6c:	200e      	movs	r0, #14
 8001c6e:	183b      	adds	r3, r7, r0
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <answer2CPU+0x714>)
 8001c74:	0052      	lsls	r2, r2, #1
 8001c76:	5ad3      	ldrh	r3, [r2, r3]
 8001c78:	b2d9      	uxtb	r1, r3
 8001c7a:	220d      	movs	r2, #13
 8001c7c:	18bb      	adds	r3, r7, r2
 8001c7e:	18ba      	adds	r2, r7, r2
 8001c80:	7812      	ldrb	r2, [r2, #0]
 8001c82:	188a      	adds	r2, r1, r2
 8001c84:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001c86:	183b      	adds	r3, r7, r0
 8001c88:	781a      	ldrb	r2, [r3, #0]
 8001c8a:	183b      	adds	r3, r7, r0
 8001c8c:	3201      	adds	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	230e      	movs	r3, #14
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	2009      	movs	r0, #9
 8001c98:	183b      	adds	r3, r7, r0
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbe4      	blt.n	8001c6c <answer2CPU+0x5b4>
				}
				myCS = 0 - myCS;
 8001ca2:	210d      	movs	r1, #13
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	187a      	adds	r2, r7, r1
 8001ca8:	7812      	ldrb	r2, [r2, #0]
 8001caa:	4252      	negs	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001cae:	183b      	adds	r3, r7, r0
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	1e5a      	subs	r2, r3, #1
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b299      	uxth	r1, r3
 8001cba:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <answer2CPU+0x714>)
 8001cbc:	0052      	lsls	r2, r2, #1
 8001cbe:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <answer2CPU+0x718>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d0fa      	beq.n	8001cc2 <answer2CPU+0x60a>
				USART2->TDR = ans[0]|0x0100;
 8001ccc:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <answer2CPU+0x714>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	2280      	movs	r2, #128	; 0x80
 8001cd2:	0052      	lsls	r2, r2, #1
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <answer2CPU+0x718>)
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001cdc:	e014      	b.n	8001d08 <answer2CPU+0x650>
				  {
				    i++;
 8001cde:	210e      	movs	r1, #14
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	3201      	adds	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <answer2CPU+0x718>)
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d0fa      	beq.n	8001cec <answer2CPU+0x634>
				    	USART2->TDR = (uint8_t)ans[i];
 8001cf6:	230e      	movs	r3, #14
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	781a      	ldrb	r2, [r3, #0]
 8001cfc:	4b33      	ldr	r3, [pc, #204]	; (8001dcc <answer2CPU+0x714>)
 8001cfe:	0052      	lsls	r2, r2, #1
 8001d00:	5ad3      	ldrh	r3, [r2, r3]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <answer2CPU+0x718>)
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001d08:	230e      	movs	r3, #14
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	781a      	ldrb	r2, [r3, #0]
 8001d0e:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <answer2CPU+0x714>)
 8001d10:	0052      	lsls	r2, r2, #1
 8001d12:	5ad3      	ldrh	r3, [r2, r3]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e2      	bne.n	8001cde <answer2CPU+0x626>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d000      	beq.n	8001d22 <answer2CPU+0x66a>
 8001d20:	e07b      	b.n	8001e1a <answer2CPU+0x762>
				myLength = 0x04; //4 bytes length answer
 8001d22:	2109      	movs	r1, #9
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	2204      	movs	r2, #4
 8001d28:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b02      	subs	r3, #2
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <answer2CPU+0x714>)
 8001d36:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001d38:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <answer2CPU+0x724>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <answer2CPU+0x714>)
 8001d40:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001d42:	230d      	movs	r3, #13
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <answer2CPU+0x714>)
 8001d4c:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001d4e:	230e      	movs	r3, #14
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e011      	b.n	8001d7c <answer2CPU+0x6c4>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001d58:	200e      	movs	r0, #14
 8001d5a:	183b      	adds	r3, r7, r0
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <answer2CPU+0x714>)
 8001d60:	0052      	lsls	r2, r2, #1
 8001d62:	5ad3      	ldrh	r3, [r2, r3]
 8001d64:	b2d9      	uxtb	r1, r3
 8001d66:	220d      	movs	r2, #13
 8001d68:	18bb      	adds	r3, r7, r2
 8001d6a:	18ba      	adds	r2, r7, r2
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	188a      	adds	r2, r1, r2
 8001d70:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001d72:	183b      	adds	r3, r7, r0
 8001d74:	781a      	ldrb	r2, [r3, #0]
 8001d76:	183b      	adds	r3, r7, r0
 8001d78:	3201      	adds	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	230e      	movs	r3, #14
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	2009      	movs	r0, #9
 8001d84:	183b      	adds	r3, r7, r0
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	dbe4      	blt.n	8001d58 <answer2CPU+0x6a0>
				}
				myCS = 0 - myCS;
 8001d8e:	210d      	movs	r1, #13
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	187a      	adds	r2, r7, r1
 8001d94:	7812      	ldrb	r2, [r2, #0]
 8001d96:	4252      	negs	r2, r2
 8001d98:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001d9a:	183b      	adds	r3, r7, r0
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	1e5a      	subs	r2, r3, #1
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b299      	uxth	r1, r3
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <answer2CPU+0x714>)
 8001da8:	0052      	lsls	r2, r2, #1
 8001daa:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <answer2CPU+0x718>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	4013      	ands	r3, r2
 8001db6:	d0fa      	beq.n	8001dae <answer2CPU+0x6f6>
					USART2->TDR = ans[0]|0x0100;
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <answer2CPU+0x714>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	2280      	movs	r2, #128	; 0x80
 8001dbe:	0052      	lsls	r2, r2, #1
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b02      	ldr	r3, [pc, #8]	; (8001dd0 <answer2CPU+0x718>)
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001dc8:	e01f      	b.n	8001e0a <answer2CPU+0x752>
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	200034d0 	.word	0x200034d0
 8001dd0:	40004400 	.word	0x40004400
 8001dd4:	20003114 	.word	0x20003114
 8001dd8:	20003120 	.word	0x20003120
 8001ddc:	2000311c 	.word	0x2000311c
						{
						  i++;
 8001de0:	210e      	movs	r1, #14
 8001de2:	187b      	adds	r3, r7, r1
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	3201      	adds	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001dec:	46c0      	nop			; (mov r8, r8)
 8001dee:	4b4e      	ldr	r3, [pc, #312]	; (8001f28 <answer2CPU+0x870>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	2280      	movs	r2, #128	; 0x80
 8001df4:	4013      	ands	r3, r2
 8001df6:	d0fa      	beq.n	8001dee <answer2CPU+0x736>
						     USART2->TDR = (uint8_t)ans[i];
 8001df8:	230e      	movs	r3, #14
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	781a      	ldrb	r2, [r3, #0]
 8001dfe:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <answer2CPU+0x874>)
 8001e00:	0052      	lsls	r2, r2, #1
 8001e02:	5ad3      	ldrh	r3, [r2, r3]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b48      	ldr	r3, [pc, #288]	; (8001f28 <answer2CPU+0x870>)
 8001e08:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001e0a:	230e      	movs	r3, #14
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	781a      	ldrb	r2, [r3, #0]
 8001e10:	4b46      	ldr	r3, [pc, #280]	; (8001f2c <answer2CPU+0x874>)
 8001e12:	0052      	lsls	r2, r2, #1
 8001e14:	5ad3      	ldrh	r3, [r2, r3]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1e2      	bne.n	8001de0 <answer2CPU+0x728>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d000      	beq.n	8001e24 <answer2CPU+0x76c>
 8001e22:	e076      	b.n	8001f12 <answer2CPU+0x85a>
				myLength = 0x04; //4 bytes length answer
 8001e24:	2109      	movs	r1, #9
 8001e26:	187b      	adds	r3, r7, r1
 8001e28:	2204      	movs	r2, #4
 8001e2a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	3b02      	subs	r3, #2
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <answer2CPU+0x874>)
 8001e38:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	001a      	movs	r2, r3
 8001e42:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <answer2CPU+0x878>)
 8001e44:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001e46:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <answer2CPU+0x87c>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <answer2CPU+0x874>)
 8001e4e:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001e50:	230d      	movs	r3, #13
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	4b34      	ldr	r3, [pc, #208]	; (8001f2c <answer2CPU+0x874>)
 8001e5a:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001e5c:	230e      	movs	r3, #14
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	e011      	b.n	8001e8a <answer2CPU+0x7d2>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001e66:	200e      	movs	r0, #14
 8001e68:	183b      	adds	r3, r7, r0
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <answer2CPU+0x874>)
 8001e6e:	0052      	lsls	r2, r2, #1
 8001e70:	5ad3      	ldrh	r3, [r2, r3]
 8001e72:	b2d9      	uxtb	r1, r3
 8001e74:	220d      	movs	r2, #13
 8001e76:	18bb      	adds	r3, r7, r2
 8001e78:	18ba      	adds	r2, r7, r2
 8001e7a:	7812      	ldrb	r2, [r2, #0]
 8001e7c:	188a      	adds	r2, r1, r2
 8001e7e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001e80:	183b      	adds	r3, r7, r0
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	183b      	adds	r3, r7, r0
 8001e86:	3201      	adds	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
 8001e8a:	230e      	movs	r3, #14
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	781a      	ldrb	r2, [r3, #0]
 8001e90:	2009      	movs	r0, #9
 8001e92:	183b      	adds	r3, r7, r0
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	dbe4      	blt.n	8001e66 <answer2CPU+0x7ae>
				}
				myCS = 0 - myCS;
 8001e9c:	210d      	movs	r1, #13
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	187a      	adds	r2, r7, r1
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	4252      	negs	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001ea8:	183b      	adds	r3, r7, r0
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	1e5a      	subs	r2, r3, #1
 8001eae:	187b      	adds	r3, r7, r1
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	b299      	uxth	r1, r3
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <answer2CPU+0x874>)
 8001eb6:	0052      	lsls	r2, r2, #1
 8001eb8:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <answer2CPU+0x870>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d0fa      	beq.n	8001ebc <answer2CPU+0x804>
				USART2->TDR = ans[0]|0x0100;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <answer2CPU+0x874>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	0052      	lsls	r2, r2, #1
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <answer2CPU+0x870>)
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001ed6:	e014      	b.n	8001f02 <answer2CPU+0x84a>
				{
				  i++;
 8001ed8:	210e      	movs	r1, #14
 8001eda:	187b      	adds	r3, r7, r1
 8001edc:	781a      	ldrb	r2, [r3, #0]
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	3201      	adds	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ee4:	46c0      	nop			; (mov r8, r8)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <answer2CPU+0x870>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	4013      	ands	r3, r2
 8001eee:	d0fa      	beq.n	8001ee6 <answer2CPU+0x82e>
				  USART2->TDR = (uint8_t)ans[i];
 8001ef0:	230e      	movs	r3, #14
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <answer2CPU+0x874>)
 8001ef8:	0052      	lsls	r2, r2, #1
 8001efa:	5ad3      	ldrh	r3, [r2, r3]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <answer2CPU+0x870>)
 8001f00:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001f02:	230e      	movs	r3, #14
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <answer2CPU+0x874>)
 8001f0a:	0052      	lsls	r2, r2, #1
 8001f0c:	5ad3      	ldrh	r3, [r2, r3]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1e2      	bne.n	8001ed8 <answer2CPU+0x820>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <answer2CPU+0x870>)
 8001f14:	6a1a      	ldr	r2, [r3, #32]
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <answer2CPU+0x870>)
 8001f18:	2108      	movs	r1, #8
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	621a      	str	r2, [r3, #32]
}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b004      	add	sp, #16
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40004400 	.word	0x40004400
 8001f2c:	200034d0 	.word	0x200034d0
 8001f30:	2000342c 	.word	0x2000342c
 8001f34:	20003322 	.word	0x20003322

08001f38 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f001 f916 	bl	8003170 <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001f44:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <MEM_Reset+0xb0>)
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <MEM_Reset+0xb0>)
 8001f4a:	4928      	ldr	r1, [pc, #160]	; (8001fec <MEM_Reset+0xb4>)
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001f50:	1dfb      	adds	r3, r7, #7
 8001f52:	2266      	movs	r2, #102	; 0x66
 8001f54:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001f56:	1df9      	adds	r1, r7, #7
 8001f58:	4825      	ldr	r0, [pc, #148]	; (8001ff0 <MEM_Reset+0xb8>)
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f004 fc7f 	bl	8006860 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <MEM_Reset+0xb0>)
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <MEM_Reset+0xb0>)
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	0209      	lsls	r1, r1, #8
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001f70:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001f72:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001f74:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001f76:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001f78:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001f7a:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	; (8001fe8 <MEM_Reset+0xb0>)
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <MEM_Reset+0xb0>)
 8001f82:	491a      	ldr	r1, [pc, #104]	; (8001fec <MEM_Reset+0xb4>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001f88:	1dfb      	adds	r3, r7, #7
 8001f8a:	2299      	movs	r2, #153	; 0x99
 8001f8c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001f8e:	1df9      	adds	r1, r7, #7
 8001f90:	4817      	ldr	r0, [pc, #92]	; (8001ff0 <MEM_Reset+0xb8>)
 8001f92:	2305      	movs	r3, #5
 8001f94:	2201      	movs	r2, #1
 8001f96:	f004 fc63 	bl	8006860 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <MEM_Reset+0xb0>)
 8001f9c:	695a      	ldr	r2, [r3, #20]
 8001f9e:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <MEM_Reset+0xb0>)
 8001fa0:	2180      	movs	r1, #128	; 0x80
 8001fa2:	0209      	lsls	r1, r1, #8
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f001 f8e1 	bl	8003170 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001fae:	1dfb      	adds	r3, r7, #7
 8001fb0:	22b7      	movs	r2, #183	; 0xb7
 8001fb2:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <MEM_Reset+0xb0>)
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <MEM_Reset+0xb0>)
 8001fba:	490c      	ldr	r1, [pc, #48]	; (8001fec <MEM_Reset+0xb4>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001fc0:	1df9      	adds	r1, r7, #7
 8001fc2:	480b      	ldr	r0, [pc, #44]	; (8001ff0 <MEM_Reset+0xb8>)
 8001fc4:	2305      	movs	r3, #5
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f004 fc4a 	bl	8006860 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <MEM_Reset+0xb0>)
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <MEM_Reset+0xb0>)
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	0209      	lsls	r1, r1, #8
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f001 f8c8 	bl	8003170 <HAL_Delay>
	}
 8001fe0:	46c0      	nop			; (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	50000800 	.word	0x50000800
 8001fec:	ffff7fff 	.word	0xffff7fff
 8001ff0:	200031e4 	.word	0x200031e4

08001ff4 <weoShowFullScreenDMA>:
		GPIOC->ODR |= 1 << 6;	//set BF
		cmd2Execute=0;
	}
//==========================================================================================================================

	uint8_t weoShowFullScreenDMA(uint8_t picNum) {
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	4c41      	ldr	r4, [pc, #260]	; (80020fc <weoShowFullScreenDMA+0x108>)
 8001ff8:	44a5      	add	sp, r4
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	4b40      	ldr	r3, [pc, #256]	; (8002100 <weoShowFullScreenDMA+0x10c>)
 8002000:	4940      	ldr	r1, [pc, #256]	; (8002104 <weoShowFullScreenDMA+0x110>)
 8002002:	468c      	mov	ip, r1
 8002004:	44bc      	add	ip, r7
 8002006:	4463      	add	r3, ip
 8002008:	701a      	strb	r2, [r3, #0]
//		uint8_t MEM_Buffer[8192];
		uint8_t DUMMY_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i;
		uint32_t addrInfo,addr;

		weoDrawRectangleInit(0x00, 0x00, 0x7F, 0x7F); // Здесь ещё работает
 800200a:	237f      	movs	r3, #127	; 0x7f
 800200c:	227f      	movs	r2, #127	; 0x7f
 800200e:	2100      	movs	r1, #0
 8002010:	2000      	movs	r0, #0
 8002012:	f7ff fac9 	bl	80015a8 <weoDrawRectangleInit>

		len=8192;
 8002016:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <weoShowFullScreenDMA+0x114>)
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	0192      	lsls	r2, r2, #6
 800201c:	801a      	strh	r2, [r3, #0]
		dma_spi_cnt=len;
 800201e:	4b3a      	ldr	r3, [pc, #232]	; (8002108 <weoShowFullScreenDMA+0x114>)
 8002020:	881a      	ldrh	r2, [r3, #0]
 8002022:	4b3a      	ldr	r3, [pc, #232]	; (800210c <weoShowFullScreenDMA+0x118>)
 8002024:	801a      	strh	r2, [r3, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002026:	483a      	ldr	r0, [pc, #232]	; (8002110 <weoShowFullScreenDMA+0x11c>)
 8002028:	183b      	adds	r3, r7, r0
 800202a:	2213      	movs	r2, #19
 800202c:	701a      	strb	r2, [r3, #0]

		addr=((picNum)*0x2000);
 800202e:	4b34      	ldr	r3, [pc, #208]	; (8002100 <weoShowFullScreenDMA+0x10c>)
 8002030:	4a34      	ldr	r2, [pc, #208]	; (8002104 <weoShowFullScreenDMA+0x110>)
 8002032:	4694      	mov	ip, r2
 8002034:	44bc      	add	ip, r7
 8002036:	4463      	add	r3, ip
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	035b      	lsls	r3, r3, #13
 800203c:	4935      	ldr	r1, [pc, #212]	; (8002114 <weoShowFullScreenDMA+0x120>)
 800203e:	187a      	adds	r2, r7, r1
 8002040:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 8002042:	187b      	adds	r3, r7, r1
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	4b33      	ldr	r3, [pc, #204]	; (8002118 <weoShowFullScreenDMA+0x124>)
 800204a:	4c2e      	ldr	r4, [pc, #184]	; (8002104 <weoShowFullScreenDMA+0x110>)
 800204c:	46a4      	mov	ip, r4
 800204e:	44bc      	add	ip, r7
 8002050:	4463      	add	r3, ip
 8002052:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002054:	187b      	adds	r3, r7, r1
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <weoShowFullScreenDMA+0x124>)
 800205e:	4c29      	ldr	r4, [pc, #164]	; (8002104 <weoShowFullScreenDMA+0x110>)
 8002060:	46a4      	mov	ip, r4
 8002062:	44bc      	add	ip, r7
 8002064:	4463      	add	r3, ip
 8002066:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002068:	187b      	adds	r3, r7, r1
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	b2da      	uxtb	r2, r3
 8002070:	4b29      	ldr	r3, [pc, #164]	; (8002118 <weoShowFullScreenDMA+0x124>)
 8002072:	4c24      	ldr	r4, [pc, #144]	; (8002104 <weoShowFullScreenDMA+0x110>)
 8002074:	46a4      	mov	ip, r4
 8002076:	44bc      	add	ip, r7
 8002078:	4463      	add	r3, ip
 800207a:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 800207c:	187b      	adds	r3, r7, r1
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0e1b      	lsrs	r3, r3, #24
 8002082:	b2da      	uxtb	r2, r3
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <weoShowFullScreenDMA+0x124>)
 8002086:	491f      	ldr	r1, [pc, #124]	; (8002104 <weoShowFullScreenDMA+0x110>)
 8002088:	468c      	mov	ip, r1
 800208a:	44bc      	add	ip, r7
 800208c:	4463      	add	r3, ip
 800208e:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <weoShowFullScreenDMA+0x128>)
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <weoShowFullScreenDMA+0x128>)
 8002096:	4922      	ldr	r1, [pc, #136]	; (8002120 <weoShowFullScreenDMA+0x12c>)
 8002098:	400a      	ands	r2, r1
 800209a:	615a      	str	r2, [r3, #20]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 800209c:	1839      	adds	r1, r7, r0
 800209e:	4821      	ldr	r0, [pc, #132]	; (8002124 <weoShowFullScreenDMA+0x130>)
 80020a0:	2332      	movs	r3, #50	; 0x32
 80020a2:	2201      	movs	r2, #1
 80020a4:	f004 fbdc 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80020a8:	2408      	movs	r4, #8
 80020aa:	193b      	adds	r3, r7, r4
 80020ac:	1cd9      	adds	r1, r3, #3
 80020ae:	481d      	ldr	r0, [pc, #116]	; (8002124 <weoShowFullScreenDMA+0x130>)
 80020b0:	2332      	movs	r3, #50	; 0x32
 80020b2:	2201      	movs	r2, #1
 80020b4:	f004 fbd4 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80020b8:	193b      	adds	r3, r7, r4
 80020ba:	1c99      	adds	r1, r3, #2
 80020bc:	4819      	ldr	r0, [pc, #100]	; (8002124 <weoShowFullScreenDMA+0x130>)
 80020be:	2332      	movs	r3, #50	; 0x32
 80020c0:	2201      	movs	r2, #1
 80020c2:	f004 fbcd 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80020c6:	193b      	adds	r3, r7, r4
 80020c8:	1c59      	adds	r1, r3, #1
 80020ca:	4816      	ldr	r0, [pc, #88]	; (8002124 <weoShowFullScreenDMA+0x130>)
 80020cc:	2332      	movs	r3, #50	; 0x32
 80020ce:	2201      	movs	r2, #1
 80020d0:	f004 fbc6 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80020d4:	1939      	adds	r1, r7, r4
 80020d6:	4813      	ldr	r0, [pc, #76]	; (8002124 <weoShowFullScreenDMA+0x130>)
 80020d8:	2332      	movs	r3, #50	; 0x32
 80020da:	2201      	movs	r2, #1
 80020dc:	f004 fbc0 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <weoShowFullScreenDMA+0x114>)
 80020e2:	881a      	ldrh	r2, [r3, #0]
 80020e4:	4910      	ldr	r1, [pc, #64]	; (8002128 <weoShowFullScreenDMA+0x134>)
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <weoShowFullScreenDMA+0x130>)
 80020e8:	0018      	movs	r0, r3
 80020ea:	f005 f82f 	bl	800714c <HAL_SPI_Receive_DMA>
	}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <weoShowFullScreenDMA+0x138>)
 80020f6:	449d      	add	sp, r3
 80020f8:	bd90      	pop	{r4, r7, pc}
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	ffffdfe4 	.word	0xffffdfe4
 8002100:	ffffdfef 	.word	0xffffdfef
 8002104:	00002018 	.word	0x00002018
 8002108:	2000360c 	.word	0x2000360c
 800210c:	20003166 	.word	0x20003166
 8002110:	00002013 	.word	0x00002013
 8002114:	00002014 	.word	0x00002014
 8002118:	ffffdff0 	.word	0xffffdff0
 800211c:	50000800 	.word	0x50000800
 8002120:	ffff7fff 	.word	0xffff7fff
 8002124:	200031e4 	.word	0x200031e4
 8002128:	20003614 	.word	0x20003614
 800212c:	0000201c 	.word	0x0000201c

08002130 <weoShowSmallImage>:
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	4cb4      	ldr	r4, [pc, #720]	; (8002404 <weoShowSmallImage+0x2d4>)
 8002134:	44a5      	add	sp, r4
 8002136:	af02      	add	r7, sp, #8
 8002138:	0004      	movs	r4, r0
 800213a:	0008      	movs	r0, r1
 800213c:	0011      	movs	r1, r2
 800213e:	4bb2      	ldr	r3, [pc, #712]	; (8002408 <weoShowSmallImage+0x2d8>)
 8002140:	4ab2      	ldr	r2, [pc, #712]	; (800240c <weoShowSmallImage+0x2dc>)
 8002142:	4694      	mov	ip, r2
 8002144:	44bc      	add	ip, r7
 8002146:	4463      	add	r3, ip
 8002148:	1c22      	adds	r2, r4, #0
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	4bb0      	ldr	r3, [pc, #704]	; (8002410 <weoShowSmallImage+0x2e0>)
 800214e:	4aaf      	ldr	r2, [pc, #700]	; (800240c <weoShowSmallImage+0x2dc>)
 8002150:	4694      	mov	ip, r2
 8002152:	44bc      	add	ip, r7
 8002154:	4463      	add	r3, ip
 8002156:	1c02      	adds	r2, r0, #0
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	4bae      	ldr	r3, [pc, #696]	; (8002414 <weoShowSmallImage+0x2e4>)
 800215c:	4aab      	ldr	r2, [pc, #684]	; (800240c <weoShowSmallImage+0x2dc>)
 800215e:	4694      	mov	ip, r2
 8002160:	44bc      	add	ip, r7
 8002162:	4463      	add	r3, ip
 8002164:	1c0a      	adds	r2, r1, #0
 8002166:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H,decY;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 8002168:	2300      	movs	r3, #0
 800216a:	49ab      	ldr	r1, [pc, #684]	; (8002418 <weoShowSmallImage+0x2e8>)
 800216c:	187a      	adds	r2, r7, r1
 800216e:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002170:	48aa      	ldr	r0, [pc, #680]	; (800241c <weoShowSmallImage+0x2ec>)
 8002172:	183b      	adds	r3, r7, r0
 8002174:	2213      	movs	r2, #19
 8002176:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 8002178:	4ba3      	ldr	r3, [pc, #652]	; (8002408 <weoShowSmallImage+0x2d8>)
 800217a:	4aa4      	ldr	r2, [pc, #656]	; (800240c <weoShowSmallImage+0x2dc>)
 800217c:	4694      	mov	ip, r2
 800217e:	44bc      	add	ip, r7
 8002180:	4463      	add	r3, ip
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	3301      	adds	r3, #1
 8002186:	33ff      	adds	r3, #255	; 0xff
 8002188:	035b      	lsls	r3, r3, #13
 800218a:	187a      	adds	r2, r7, r1
 800218c:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 800218e:	187b      	adds	r3, r7, r1
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	4ba2      	ldr	r3, [pc, #648]	; (8002420 <weoShowSmallImage+0x2f0>)
 8002196:	4c9d      	ldr	r4, [pc, #628]	; (800240c <weoShowSmallImage+0x2dc>)
 8002198:	46a4      	mov	ip, r4
 800219a:	44bc      	add	ip, r7
 800219c:	4463      	add	r3, ip
 800219e:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80021a0:	187b      	adds	r3, r7, r1
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	4b9d      	ldr	r3, [pc, #628]	; (8002420 <weoShowSmallImage+0x2f0>)
 80021aa:	4c98      	ldr	r4, [pc, #608]	; (800240c <weoShowSmallImage+0x2dc>)
 80021ac:	46a4      	mov	ip, r4
 80021ae:	44bc      	add	ip, r7
 80021b0:	4463      	add	r3, ip
 80021b2:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80021b4:	187b      	adds	r3, r7, r1
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	0c1b      	lsrs	r3, r3, #16
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b98      	ldr	r3, [pc, #608]	; (8002420 <weoShowSmallImage+0x2f0>)
 80021be:	4c93      	ldr	r4, [pc, #588]	; (800240c <weoShowSmallImage+0x2dc>)
 80021c0:	46a4      	mov	ip, r4
 80021c2:	44bc      	add	ip, r7
 80021c4:	4463      	add	r3, ip
 80021c6:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80021c8:	187b      	adds	r3, r7, r1
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	0e1b      	lsrs	r3, r3, #24
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	4b93      	ldr	r3, [pc, #588]	; (8002420 <weoShowSmallImage+0x2f0>)
 80021d2:	498e      	ldr	r1, [pc, #568]	; (800240c <weoShowSmallImage+0x2dc>)
 80021d4:	468c      	mov	ip, r1
 80021d6:	44bc      	add	ip, r7
 80021d8:	4463      	add	r3, ip
 80021da:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 80021dc:	4b91      	ldr	r3, [pc, #580]	; (8002424 <weoShowSmallImage+0x2f4>)
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	4b90      	ldr	r3, [pc, #576]	; (8002424 <weoShowSmallImage+0x2f4>)
 80021e2:	4991      	ldr	r1, [pc, #580]	; (8002428 <weoShowSmallImage+0x2f8>)
 80021e4:	400a      	ands	r2, r1
 80021e6:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80021e8:	1839      	adds	r1, r7, r0
 80021ea:	4890      	ldr	r0, [pc, #576]	; (800242c <weoShowSmallImage+0x2fc>)
 80021ec:	2332      	movs	r3, #50	; 0x32
 80021ee:	2201      	movs	r2, #1
 80021f0:	f004 fb36 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80021f4:	240c      	movs	r4, #12
 80021f6:	193b      	adds	r3, r7, r4
 80021f8:	1cd9      	adds	r1, r3, #3
 80021fa:	488c      	ldr	r0, [pc, #560]	; (800242c <weoShowSmallImage+0x2fc>)
 80021fc:	2332      	movs	r3, #50	; 0x32
 80021fe:	2201      	movs	r2, #1
 8002200:	f004 fb2e 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002204:	193b      	adds	r3, r7, r4
 8002206:	1c99      	adds	r1, r3, #2
 8002208:	4888      	ldr	r0, [pc, #544]	; (800242c <weoShowSmallImage+0x2fc>)
 800220a:	2332      	movs	r3, #50	; 0x32
 800220c:	2201      	movs	r2, #1
 800220e:	f004 fb27 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8002212:	193b      	adds	r3, r7, r4
 8002214:	1c59      	adds	r1, r3, #1
 8002216:	4885      	ldr	r0, [pc, #532]	; (800242c <weoShowSmallImage+0x2fc>)
 8002218:	2332      	movs	r3, #50	; 0x32
 800221a:	2201      	movs	r2, #1
 800221c:	f004 fb20 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002220:	1939      	adds	r1, r7, r4
 8002222:	4882      	ldr	r0, [pc, #520]	; (800242c <weoShowSmallImage+0x2fc>)
 8002224:	2332      	movs	r3, #50	; 0x32
 8002226:	2201      	movs	r2, #1
 8002228:	f004 fb1a 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 800222c:	4b80      	ldr	r3, [pc, #512]	; (8002430 <weoShowSmallImage+0x300>)
 800222e:	2210      	movs	r2, #16
 8002230:	18b9      	adds	r1, r7, r2
 8002232:	487e      	ldr	r0, [pc, #504]	; (800242c <weoShowSmallImage+0x2fc>)
 8002234:	2202      	movs	r2, #2
 8002236:	f004 fc6b 	bl	8006b10 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 800223a:	4b7a      	ldr	r3, [pc, #488]	; (8002424 <weoShowSmallImage+0x2f4>)
 800223c:	695a      	ldr	r2, [r3, #20]
 800223e:	4b79      	ldr	r3, [pc, #484]	; (8002424 <weoShowSmallImage+0x2f4>)
 8002240:	2180      	movs	r1, #128	; 0x80
 8002242:	0209      	lsls	r1, r1, #8
 8002244:	430a      	orrs	r2, r1
 8002246:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 8002248:	497a      	ldr	r1, [pc, #488]	; (8002434 <weoShowSmallImage+0x304>)
 800224a:	187b      	adds	r3, r7, r1
 800224c:	4a7a      	ldr	r2, [pc, #488]	; (8002438 <weoShowSmallImage+0x308>)
 800224e:	486f      	ldr	r0, [pc, #444]	; (800240c <weoShowSmallImage+0x2dc>)
 8002250:	4684      	mov	ip, r0
 8002252:	44bc      	add	ip, r7
 8002254:	4462      	add	r2, ip
 8002256:	7812      	ldrb	r2, [r2, #0]
 8002258:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 800225a:	4878      	ldr	r0, [pc, #480]	; (800243c <weoShowSmallImage+0x30c>)
 800225c:	183b      	adds	r3, r7, r0
 800225e:	4a76      	ldr	r2, [pc, #472]	; (8002438 <weoShowSmallImage+0x308>)
 8002260:	4c6a      	ldr	r4, [pc, #424]	; (800240c <weoShowSmallImage+0x2dc>)
 8002262:	46a4      	mov	ip, r4
 8002264:	44bc      	add	ip, r7
 8002266:	4462      	add	r2, ip
 8002268:	7852      	ldrb	r2, [r2, #1]
 800226a:	701a      	strb	r2, [r3, #0]

//		if((height % 2)!=0){
//			height+=1;
//		}
		len=width*height/2;
 800226c:	187b      	adds	r3, r7, r1
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	183a      	adds	r2, r7, r0
 8002272:	7812      	ldrb	r2, [r2, #0]
 8002274:	4353      	muls	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	da00      	bge.n	800227c <weoShowSmallImage+0x14c>
 800227a:	3301      	adds	r3, #1
 800227c:	105b      	asrs	r3, r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	4b6f      	ldr	r3, [pc, #444]	; (8002440 <weoShowSmallImage+0x310>)
 8002282:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 8002284:	4b64      	ldr	r3, [pc, #400]	; (8002418 <weoShowSmallImage+0x2e8>)
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	3302      	adds	r3, #2
 800228c:	496d      	ldr	r1, [pc, #436]	; (8002444 <weoShowSmallImage+0x314>)
 800228e:	187a      	adds	r2, r7, r1
 8002290:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 8002292:	187b      	adds	r3, r7, r1
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	4b61      	ldr	r3, [pc, #388]	; (8002420 <weoShowSmallImage+0x2f0>)
 800229a:	485c      	ldr	r0, [pc, #368]	; (800240c <weoShowSmallImage+0x2dc>)
 800229c:	4684      	mov	ip, r0
 800229e:	44bc      	add	ip, r7
 80022a0:	4463      	add	r3, ip
 80022a2:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	4b5c      	ldr	r3, [pc, #368]	; (8002420 <weoShowSmallImage+0x2f0>)
 80022ae:	4857      	ldr	r0, [pc, #348]	; (800240c <weoShowSmallImage+0x2dc>)
 80022b0:	4684      	mov	ip, r0
 80022b2:	44bc      	add	ip, r7
 80022b4:	4463      	add	r3, ip
 80022b6:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 80022b8:	187b      	adds	r3, r7, r1
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b57      	ldr	r3, [pc, #348]	; (8002420 <weoShowSmallImage+0x2f0>)
 80022c2:	4852      	ldr	r0, [pc, #328]	; (800240c <weoShowSmallImage+0x2dc>)
 80022c4:	4684      	mov	ip, r0
 80022c6:	44bc      	add	ip, r7
 80022c8:	4463      	add	r3, ip
 80022ca:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 80022cc:	187b      	adds	r3, r7, r1
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0e1b      	lsrs	r3, r3, #24
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	4b52      	ldr	r3, [pc, #328]	; (8002420 <weoShowSmallImage+0x2f0>)
 80022d6:	494d      	ldr	r1, [pc, #308]	; (800240c <weoShowSmallImage+0x2dc>)
 80022d8:	468c      	mov	ip, r1
 80022da:	44bc      	add	ip, r7
 80022dc:	4463      	add	r3, ip
 80022de:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 80022e0:	4b59      	ldr	r3, [pc, #356]	; (8002448 <weoShowSmallImage+0x318>)
 80022e2:	6a1a      	ldr	r2, [r3, #32]
 80022e4:	4b58      	ldr	r3, [pc, #352]	; (8002448 <weoShowSmallImage+0x318>)
 80022e6:	2108      	movs	r1, #8
 80022e8:	430a      	orrs	r2, r1
 80022ea:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 80022ec:	484b      	ldr	r0, [pc, #300]	; (800241c <weoShowSmallImage+0x2ec>)
 80022ee:	183b      	adds	r3, r7, r0
 80022f0:	2213      	movs	r2, #19
 80022f2:	701a      	strb	r2, [r3, #0]

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80022f4:	4b4b      	ldr	r3, [pc, #300]	; (8002424 <weoShowSmallImage+0x2f4>)
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <weoShowSmallImage+0x2f4>)
 80022fa:	494b      	ldr	r1, [pc, #300]	; (8002428 <weoShowSmallImage+0x2f8>)
 80022fc:	400a      	ands	r2, r1
 80022fe:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 8002300:	1839      	adds	r1, r7, r0
 8002302:	484a      	ldr	r0, [pc, #296]	; (800242c <weoShowSmallImage+0x2fc>)
 8002304:	2332      	movs	r3, #50	; 0x32
 8002306:	2201      	movs	r2, #1
 8002308:	f004 faaa 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 800230c:	240c      	movs	r4, #12
 800230e:	193b      	adds	r3, r7, r4
 8002310:	1cd9      	adds	r1, r3, #3
 8002312:	4846      	ldr	r0, [pc, #280]	; (800242c <weoShowSmallImage+0x2fc>)
 8002314:	2332      	movs	r3, #50	; 0x32
 8002316:	2201      	movs	r2, #1
 8002318:	f004 faa2 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 800231c:	193b      	adds	r3, r7, r4
 800231e:	1c99      	adds	r1, r3, #2
 8002320:	4842      	ldr	r0, [pc, #264]	; (800242c <weoShowSmallImage+0x2fc>)
 8002322:	2332      	movs	r3, #50	; 0x32
 8002324:	2201      	movs	r2, #1
 8002326:	f004 fa9b 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 800232a:	193b      	adds	r3, r7, r4
 800232c:	1c59      	adds	r1, r3, #1
 800232e:	483f      	ldr	r0, [pc, #252]	; (800242c <weoShowSmallImage+0x2fc>)
 8002330:	2332      	movs	r3, #50	; 0x32
 8002332:	2201      	movs	r2, #1
 8002334:	f004 fa94 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 8002338:	1939      	adds	r1, r7, r4
 800233a:	483c      	ldr	r0, [pc, #240]	; (800242c <weoShowSmallImage+0x2fc>)
 800233c:	2332      	movs	r3, #50	; 0x32
 800233e:	2201      	movs	r2, #1
 8002340:	f004 fa8e 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 8002344:	4b3e      	ldr	r3, [pc, #248]	; (8002440 <weoShowSmallImage+0x310>)
 8002346:	881a      	ldrh	r2, [r3, #0]
 8002348:	4b39      	ldr	r3, [pc, #228]	; (8002430 <weoShowSmallImage+0x300>)
 800234a:	2114      	movs	r1, #20
 800234c:	1879      	adds	r1, r7, r1
 800234e:	4837      	ldr	r0, [pc, #220]	; (800242c <weoShowSmallImage+0x2fc>)
 8002350:	f004 fbde 	bl	8006b10 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 8002354:	4b33      	ldr	r3, [pc, #204]	; (8002424 <weoShowSmallImage+0x2f4>)
 8002356:	695a      	ldr	r2, [r3, #20]
 8002358:	4b32      	ldr	r3, [pc, #200]	; (8002424 <weoShowSmallImage+0x2f4>)
 800235a:	2180      	movs	r1, #128	; 0x80
 800235c:	0209      	lsls	r1, r1, #8
 800235e:	430a      	orrs	r2, r1
 8002360:	615a      	str	r2, [r3, #20]

		decY=0x01;
 8002362:	493a      	ldr	r1, [pc, #232]	; (800244c <weoShowSmallImage+0x31c>)
 8002364:	187b      	adds	r3, r7, r1
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
		if(imY % 2 !=0){
 800236a:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <weoShowSmallImage+0x2e4>)
 800236c:	4a27      	ldr	r2, [pc, #156]	; (800240c <weoShowSmallImage+0x2dc>)
 800236e:	4694      	mov	ip, r2
 8002370:	44bc      	add	ip, r7
 8002372:	4463      	add	r3, ip
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2201      	movs	r2, #1
 8002378:	4013      	ands	r3, r2
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <weoShowSmallImage+0x256>
			decY=0x02;
 8002380:	187b      	adds	r3, r7, r1
 8002382:	2202      	movs	r2, #2
 8002384:	701a      	strb	r2, [r3, #0]
		}
		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8002386:	4b22      	ldr	r3, [pc, #136]	; (8002410 <weoShowSmallImage+0x2e0>)
 8002388:	4920      	ldr	r1, [pc, #128]	; (800240c <weoShowSmallImage+0x2dc>)
 800238a:	187a      	adds	r2, r7, r1
 800238c:	18d2      	adds	r2, r2, r3
 800238e:	4b29      	ldr	r3, [pc, #164]	; (8002434 <weoShowSmallImage+0x304>)
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	7812      	ldrb	r2, [r2, #0]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	18d3      	adds	r3, r2, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b2dc      	uxtb	r4, r3
 800239e:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <weoShowSmallImage+0x2e4>)
 80023a0:	187a      	adds	r2, r7, r1
 80023a2:	18d2      	adds	r2, r2, r3
 80023a4:	4b25      	ldr	r3, [pc, #148]	; (800243c <weoShowSmallImage+0x30c>)
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	18d3      	adds	r3, r2, r3
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b26      	ldr	r3, [pc, #152]	; (800244c <weoShowSmallImage+0x31c>)
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <weoShowSmallImage+0x2e4>)
 80023bc:	4913      	ldr	r1, [pc, #76]	; (800240c <weoShowSmallImage+0x2dc>)
 80023be:	468c      	mov	ip, r1
 80023c0:	44bc      	add	ip, r7
 80023c2:	4463      	add	r3, ip
 80023c4:	7819      	ldrb	r1, [r3, #0]
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <weoShowSmallImage+0x2e0>)
 80023c8:	4810      	ldr	r0, [pc, #64]	; (800240c <weoShowSmallImage+0x2dc>)
 80023ca:	4684      	mov	ip, r0
 80023cc:	44bc      	add	ip, r7
 80023ce:	4463      	add	r3, ip
 80023d0:	7818      	ldrb	r0, [r3, #0]
 80023d2:	2314      	movs	r3, #20
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	23ff      	movs	r3, #255	; 0xff
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	0013      	movs	r3, r2
 80023de:	0022      	movs	r2, r4
 80023e0:	f7ff f806 	bl	80013f0 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 80023e4:	4b0f      	ldr	r3, [pc, #60]	; (8002424 <weoShowSmallImage+0x2f4>)
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <weoShowSmallImage+0x2f4>)
 80023ea:	2140      	movs	r1, #64	; 0x40
 80023ec:	430a      	orrs	r2, r1
 80023ee:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 80023f0:	4b17      	ldr	r3, [pc, #92]	; (8002450 <weoShowSmallImage+0x320>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
	}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0018      	movs	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <weoShowSmallImage+0x324>)
 80023fe:	449d      	add	sp, r3
 8002400:	bd90      	pop	{r4, r7, pc}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	ffffdfcc 	.word	0xffffdfcc
 8002408:	ffffdfdf 	.word	0xffffdfdf
 800240c:	00002028 	.word	0x00002028
 8002410:	ffffdfde 	.word	0xffffdfde
 8002414:	ffffdfdd 	.word	0xffffdfdd
 8002418:	00002020 	.word	0x00002020
 800241c:	00002017 	.word	0x00002017
 8002420:	ffffdfe4 	.word	0xffffdfe4
 8002424:	50000800 	.word	0x50000800
 8002428:	ffff7fff 	.word	0xffff7fff
 800242c:	200031e4 	.word	0x200031e4
 8002430:	00001388 	.word	0x00001388
 8002434:	0000201f 	.word	0x0000201f
 8002438:	ffffdfe8 	.word	0xffffdfe8
 800243c:	0000201e 	.word	0x0000201e
 8002440:	2000360c 	.word	0x2000360c
 8002444:	00002018 	.word	0x00002018
 8002448:	40004400 	.word	0x40004400
 800244c:	00002027 	.word	0x00002027
 8002450:	2000348e 	.word	0x2000348e
 8002454:	0000202c 	.word	0x0000202c

08002458 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	4a29      	ldr	r2, [pc, #164]	; (8002508 <MEM_GetID+0xb0>)
 8002462:	7812      	ldrb	r2, [r2, #0]
 8002464:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002466:	1dfb      	adds	r3, r7, #7
 8002468:	229e      	movs	r2, #158	; 0x9e
 800246a:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 800246c:	4b27      	ldr	r3, [pc, #156]	; (800250c <MEM_GetID+0xb4>)
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	4b26      	ldr	r3, [pc, #152]	; (800250c <MEM_GetID+0xb4>)
 8002472:	4927      	ldr	r1, [pc, #156]	; (8002510 <MEM_GetID+0xb8>)
 8002474:	400a      	ands	r2, r1
 8002476:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002478:	1df9      	adds	r1, r7, #7
 800247a:	4826      	ldr	r0, [pc, #152]	; (8002514 <MEM_GetID+0xbc>)
 800247c:	2332      	movs	r3, #50	; 0x32
 800247e:	2201      	movs	r2, #1
 8002480:	f004 f9ee 	bl	8006860 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002484:	23fa      	movs	r3, #250	; 0xfa
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	1d39      	adds	r1, r7, #4
 800248a:	4822      	ldr	r0, [pc, #136]	; (8002514 <MEM_GetID+0xbc>)
 800248c:	2201      	movs	r2, #1
 800248e:	f004 fb3f 	bl	8006b10 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	001a      	movs	r2, r3
 8002498:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <MEM_GetID+0xc0>)
 800249a:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 800249c:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <MEM_GetID+0xc0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	021a      	lsls	r2, r3, #8
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <MEM_GetID+0xc0>)
 80024a4:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80024a6:	23fa      	movs	r3, #250	; 0xfa
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	1d39      	adds	r1, r7, #4
 80024ac:	4819      	ldr	r0, [pc, #100]	; (8002514 <MEM_GetID+0xbc>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	f004 fb2e 	bl	8006b10 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	001a      	movs	r2, r3
 80024ba:	4b17      	ldr	r3, [pc, #92]	; (8002518 <MEM_GetID+0xc0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	18d2      	adds	r2, r2, r3
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <MEM_GetID+0xc0>)
 80024c2:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <MEM_GetID+0xc0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	021a      	lsls	r2, r3, #8
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <MEM_GetID+0xc0>)
 80024cc:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80024ce:	23fa      	movs	r3, #250	; 0xfa
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	1d39      	adds	r1, r7, #4
 80024d4:	480f      	ldr	r0, [pc, #60]	; (8002514 <MEM_GetID+0xbc>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	f004 fb1a 	bl	8006b10 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	001a      	movs	r2, r3
 80024e2:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <MEM_GetID+0xc0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	18d2      	adds	r2, r2, r3
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <MEM_GetID+0xc0>)
 80024ea:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <MEM_GetID+0xb4>)
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <MEM_GetID+0xb4>)
 80024f2:	2180      	movs	r1, #128	; 0x80
 80024f4:	0209      	lsls	r1, r1, #8
 80024f6:	430a      	orrs	r2, r1
 80024f8:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 80024fa:	4b07      	ldr	r3, [pc, #28]	; (8002518 <MEM_GetID+0xc0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
	}
 80024fe:	0018      	movs	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	b002      	add	sp, #8
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	0800a810 	.word	0x0800a810
 800250c:	50000800 	.word	0x50000800
 8002510:	ffff7fff 	.word	0xffff7fff
 8002514:	200031e4 	.word	0x200031e4
 8002518:	20003190 	.word	0x20003190

0800251c <cmdExecute>:

	uint16_t Scount(void){

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	0002      	movs	r2, r0
 8002524:	1dfb      	adds	r3, r7, #7
 8002526:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002528:	4b34      	ldr	r3, [pc, #208]	; (80025fc <cmdExecute+0xe0>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b10      	cmp	r3, #16
 800252e:	d05e      	beq.n	80025ee <cmdExecute+0xd2>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 8002530:	4b33      	ldr	r3, [pc, #204]	; (8002600 <cmdExecute+0xe4>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d15c      	bne.n	80025f2 <cmdExecute+0xd6>
		USART2->ICR|=USART_ICR_ORECF;
 8002538:	4b32      	ldr	r3, [pc, #200]	; (8002604 <cmdExecute+0xe8>)
 800253a:	6a1a      	ldr	r2, [r3, #32]
 800253c:	4b31      	ldr	r3, [pc, #196]	; (8002604 <cmdExecute+0xe8>)
 800253e:	2108      	movs	r1, #8
 8002540:	430a      	orrs	r2, r1
 8002542:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 8002544:	1dfb      	adds	r3, r7, #7
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b11      	cmp	r3, #17
 800254a:	d107      	bne.n	800255c <cmdExecute+0x40>
			bf4me=0x11;	//set BF flag 4 me
 800254c:	4b2c      	ldr	r3, [pc, #176]	; (8002600 <cmdExecute+0xe4>)
 800254e:	2211      	movs	r2, #17
 8002550:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowFullScreen(picNum);
			weoShowFullScreenDMA(picNum);
 8002552:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <cmdExecute+0xec>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	0018      	movs	r0, r3
 8002558:	f7ff fd4c 	bl	8001ff4 <weoShowFullScreenDMA>
				}
		if(cmd2Execute==0x12){
 800255c:	1dfb      	adds	r3, r7, #7
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b12      	cmp	r3, #18
 8002562:	d10d      	bne.n	8002580 <cmdExecute+0x64>
			bf4me=0x12;	//set BF flag 4 me
 8002564:	4b26      	ldr	r3, [pc, #152]	; (8002600 <cmdExecute+0xe4>)
 8002566:	2212      	movs	r2, #18
 8002568:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 800256a:	4b27      	ldr	r3, [pc, #156]	; (8002608 <cmdExecute+0xec>)
 800256c:	7818      	ldrb	r0, [r3, #0]
 800256e:	4b27      	ldr	r3, [pc, #156]	; (800260c <cmdExecute+0xf0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	b2d9      	uxtb	r1, r3
 8002574:	4b26      	ldr	r3, [pc, #152]	; (8002610 <cmdExecute+0xf4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	001a      	movs	r2, r3
 800257c:	f7ff fdd8 	bl	8002130 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 8002580:	1dfb      	adds	r3, r7, #7
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b13      	cmp	r3, #19
 8002586:	d10d      	bne.n	80025a4 <cmdExecute+0x88>
			bf4me=0x13;	//set BF flag 4 me
 8002588:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <cmdExecute+0xe4>)
 800258a:	2213      	movs	r2, #19
 800258c:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 800258e:	4b1f      	ldr	r3, [pc, #124]	; (800260c <cmdExecute+0xf0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	b2d8      	uxtb	r0, r3
 8002594:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <cmdExecute+0xf4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	b2d9      	uxtb	r1, r3
 800259a:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <cmdExecute+0xf8>)
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <cmdExecute+0xfc>)
 80025a0:	f000 f83c 	bl	800261c <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 80025a4:	1dfb      	adds	r3, r7, #7
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b14      	cmp	r3, #20
 80025aa:	d102      	bne.n	80025b2 <cmdExecute+0x96>
			bf4me=0x14;	//set BF flag 4 me
 80025ac:	4b14      	ldr	r3, [pc, #80]	; (8002600 <cmdExecute+0xe4>)
 80025ae:	2214      	movs	r2, #20
 80025b0:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF


				}
		if(cmd2Execute==0x15){
 80025b2:	1dfb      	adds	r3, r7, #7
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b15      	cmp	r3, #21
 80025b8:	d108      	bne.n	80025cc <cmdExecute+0xb0>
			if(cmd[3]==0x00){
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <cmdExecute+0xe0>)
 80025bc:	78db      	ldrb	r3, [r3, #3]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <cmdExecute+0xaa>
				weoClear();
 80025c2:	f7fe feb1 	bl	8001328 <weoClear>
			}
			bf4me=0x15;	//set BF flag 4 me
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <cmdExecute+0xe4>)
 80025c8:	2215      	movs	r2, #21
 80025ca:	701a      	strb	r2, [r3, #0]
				}
		if(cmd2Execute==0x16){
 80025cc:	1dfb      	adds	r3, r7, #7
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b16      	cmp	r3, #22
 80025d2:	d102      	bne.n	80025da <cmdExecute+0xbe>
			bf4me=0x16;	//set BF flag 4 me
 80025d4:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <cmdExecute+0xe4>)
 80025d6:	2216      	movs	r2, #22
 80025d8:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 80025da:	1dfb      	adds	r3, r7, #7
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <cmdExecute+0xe8>)
 80025e2:	6a1a      	ldr	r2, [r3, #32]
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <cmdExecute+0xe8>)
 80025e6:	2108      	movs	r1, #8
 80025e8:	430a      	orrs	r2, r1
 80025ea:	621a      	str	r2, [r3, #32]
 80025ec:	e002      	b.n	80025f4 <cmdExecute+0xd8>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	e000      	b.n	80025f4 <cmdExecute+0xd8>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 80025f2:	46c0      	nop			; (mov r8, r8)
	}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b002      	add	sp, #8
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20005614 	.word	0x20005614
 8002600:	200034e4 	.word	0x200034e4
 8002604:	40004400 	.word	0x40004400
 8002608:	2000348d 	.word	0x2000348d
 800260c:	20003324 	.word	0x20003324
 8002610:	200033b8 	.word	0x200033b8
 8002614:	200034cd 	.word	0x200034cd
 8002618:	200031d4 	.word	0x200031d4

0800261c <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 800261c:	b5b0      	push	{r4, r5, r7, lr}
 800261e:	b092      	sub	sp, #72	; 0x48
 8002620:	af02      	add	r7, sp, #8
 8002622:	0004      	movs	r4, r0
 8002624:	0008      	movs	r0, r1
 8002626:	0011      	movs	r1, r2
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	1dfb      	adds	r3, r7, #7
 800262c:	1c22      	adds	r2, r4, #0
 800262e:	701a      	strb	r2, [r3, #0]
 8002630:	1dbb      	adds	r3, r7, #6
 8002632:	1c02      	adds	r2, r0, #0
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	1d7b      	adds	r3, r7, #5
 8002638:	1c0a      	adds	r2, r1, #0
 800263a:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 800263c:	233e      	movs	r3, #62	; 0x3e
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	1dfa      	adds	r2, r7, #7
 8002642:	7812      	ldrb	r2, [r2, #0]
 8002644:	701a      	strb	r2, [r3, #0]

			len=49;
 8002646:	4b41      	ldr	r3, [pc, #260]	; (800274c <printASCIIarray+0x130>)
 8002648:	2231      	movs	r2, #49	; 0x31
 800264a:	801a      	strh	r2, [r3, #0]

			for (i=0;i<strLen;i++){
 800264c:	233c      	movs	r3, #60	; 0x3c
 800264e:	18fb      	adds	r3, r7, r3
 8002650:	2200      	movs	r2, #0
 8002652:	801a      	strh	r2, [r3, #0]
 8002654:	e04f      	b.n	80026f6 <printASCIIarray+0xda>
				for(j=0;j<49;j++){
 8002656:	233f      	movs	r3, #63	; 0x3f
 8002658:	18fb      	adds	r3, r7, r3
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	e01b      	b.n	8002698 <printASCIIarray+0x7c>
					weoBuffer[j]=FONT_X[dataASCII[i]][j];
 8002660:	233c      	movs	r3, #60	; 0x3c
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	18d3      	adds	r3, r2, r3
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	001a      	movs	r2, r3
 800266e:	253f      	movs	r5, #63	; 0x3f
 8002670:	197b      	adds	r3, r7, r5
 8002672:	7818      	ldrb	r0, [r3, #0]
 8002674:	197b      	adds	r3, r7, r5
 8002676:	7819      	ldrb	r1, [r3, #0]
 8002678:	4c35      	ldr	r4, [pc, #212]	; (8002750 <printASCIIarray+0x134>)
 800267a:	0013      	movs	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	00da      	lsls	r2, r3, #3
 8002682:	1ad2      	subs	r2, r2, r3
 8002684:	18a3      	adds	r3, r4, r2
 8002686:	5c1a      	ldrb	r2, [r3, r0]
 8002688:	2308      	movs	r3, #8
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 800268e:	197b      	adds	r3, r7, r5
 8002690:	781a      	ldrb	r2, [r3, #0]
 8002692:	197b      	adds	r3, r7, r5
 8002694:	3201      	adds	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	233f      	movs	r3, #63	; 0x3f
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b30      	cmp	r3, #48	; 0x30
 80026a0:	d9de      	bls.n	8002660 <printASCIIarray+0x44>
					}
				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 80026a2:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <printASCIIarray+0x138>)
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	203e      	movs	r0, #62	; 0x3e
 80026a8:	183b      	adds	r3, r7, r0
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	18d3      	adds	r3, r2, r3
 80026ae:	b2dc      	uxtb	r4, r3
 80026b0:	4b29      	ldr	r3, [pc, #164]	; (8002758 <printASCIIarray+0x13c>)
 80026b2:	781a      	ldrb	r2, [r3, #0]
 80026b4:	1dbb      	adds	r3, r7, #6
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	18d3      	adds	r3, r2, r3
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	1dbb      	adds	r3, r7, #6
 80026be:	7819      	ldrb	r1, [r3, #0]
 80026c0:	0005      	movs	r5, r0
 80026c2:	183b      	adds	r3, r7, r0
 80026c4:	7818      	ldrb	r0, [r3, #0]
 80026c6:	2308      	movs	r3, #8
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	23ff      	movs	r3, #255	; 0xff
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	0013      	movs	r3, r2
 80026d2:	0022      	movs	r2, r4
 80026d4:	f7fe fe8c 	bl	80013f0 <weoDrawRectangleFilled>
				ASCII_X += X_increment+1;
 80026d8:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <printASCIIarray+0x138>)
 80026da:	781a      	ldrb	r2, [r3, #0]
 80026dc:	197b      	adds	r3, r7, r5
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	18d3      	adds	r3, r2, r3
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	197b      	adds	r3, r7, r5
 80026e6:	3201      	adds	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 80026ea:	213c      	movs	r1, #60	; 0x3c
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	881a      	ldrh	r2, [r3, #0]
 80026f0:	187b      	adds	r3, r7, r1
 80026f2:	3201      	adds	r2, #1
 80026f4:	801a      	strh	r2, [r3, #0]
 80026f6:	1d7b      	adds	r3, r7, #5
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	213c      	movs	r1, #60	; 0x3c
 80026fe:	187a      	adds	r2, r7, r1
 8002700:	8812      	ldrh	r2, [r2, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d3a7      	bcc.n	8002656 <printASCIIarray+0x3a>
			}
			for(i=0;i<len;i++){
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2200      	movs	r2, #0
 800270a:	801a      	strh	r2, [r3, #0]
 800270c:	e00b      	b.n	8002726 <printASCIIarray+0x10a>
			weoBuffer[i]=0x00;
 800270e:	203c      	movs	r0, #60	; 0x3c
 8002710:	183b      	adds	r3, r7, r0
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	2208      	movs	r2, #8
 8002716:	18ba      	adds	r2, r7, r2
 8002718:	2100      	movs	r1, #0
 800271a:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<len;i++){
 800271c:	183b      	adds	r3, r7, r0
 800271e:	881a      	ldrh	r2, [r3, #0]
 8002720:	183b      	adds	r3, r7, r0
 8002722:	3201      	adds	r2, #1
 8002724:	801a      	strh	r2, [r3, #0]
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <printASCIIarray+0x130>)
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	223c      	movs	r2, #60	; 0x3c
 800272c:	18ba      	adds	r2, r7, r2
 800272e:	8812      	ldrh	r2, [r2, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d3ec      	bcc.n	800270e <printASCIIarray+0xf2>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <printASCIIarray+0x140>)
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <printASCIIarray+0x140>)
 800273a:	2140      	movs	r1, #64	; 0x40
 800273c:	430a      	orrs	r2, r1
 800273e:	615a      	str	r2, [r3, #20]

		}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b010      	add	sp, #64	; 0x40
 8002748:	bdb0      	pop	{r4, r5, r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	2000360c 	.word	0x2000360c
 8002750:	20000000 	.word	0x20000000
 8002754:	20003130 	.word	0x20003130
 8002758:	20003131 	.word	0x20003131
 800275c:	50000800 	.word	0x50000800

08002760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_MspInit+0x4c>)
 8002774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_MspInit+0x4c>)
 8002778:	2101      	movs	r1, #1
 800277a:	430a      	orrs	r2, r1
 800277c:	641a      	str	r2, [r3, #64]	; 0x40
 800277e:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <HAL_MspInit+0x4c>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	2201      	movs	r2, #1
 8002784:	4013      	ands	r3, r2
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_MspInit+0x4c>)
 800278c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <HAL_MspInit+0x4c>)
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	0549      	lsls	r1, r1, #21
 8002794:	430a      	orrs	r2, r1
 8002796:	63da      	str	r2, [r3, #60]	; 0x3c
 8002798:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <HAL_MspInit+0x4c>)
 800279a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	055b      	lsls	r3, r3, #21
 80027a0:	4013      	ands	r3, r2
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	0018      	movs	r0, r3
 80027ac:	f000 fd04 	bl	80031b8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027b0:	46c0      	nop			; (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000

080027bc <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80027bc:	b590      	push	{r4, r7, lr}
 80027be:	b089      	sub	sp, #36	; 0x24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	240c      	movs	r4, #12
 80027c6:	193b      	adds	r3, r7, r4
 80027c8:	0018      	movs	r0, r3
 80027ca:	2314      	movs	r3, #20
 80027cc:	001a      	movs	r2, r3
 80027ce:	2100      	movs	r1, #0
 80027d0:	f008 f80a 	bl	800a7e8 <memset>
  if(hcomp->Instance==COMP1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a10      	ldr	r2, [pc, #64]	; (800281c <HAL_COMP_MspInit+0x60>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d11a      	bne.n	8002814 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_COMP_MspInit+0x64>)
 80027e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_COMP_MspInit+0x64>)
 80027e4:	2102      	movs	r1, #2
 80027e6:	430a      	orrs	r2, r1
 80027e8:	635a      	str	r2, [r3, #52]	; 0x34
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <HAL_COMP_MspInit+0x64>)
 80027ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ee:	2202      	movs	r2, #2
 80027f0:	4013      	ands	r3, r2
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027f6:	193b      	adds	r3, r7, r4
 80027f8:	2204      	movs	r2, #4
 80027fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027fc:	193b      	adds	r3, r7, r4
 80027fe:	2203      	movs	r2, #3
 8002800:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	193b      	adds	r3, r7, r4
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002808:	193b      	adds	r3, r7, r4
 800280a:	4a06      	ldr	r2, [pc, #24]	; (8002824 <HAL_COMP_MspInit+0x68>)
 800280c:	0019      	movs	r1, r3
 800280e:	0010      	movs	r0, r2
 8002810:	f001 faee 	bl	8003df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8002814:	46c0      	nop			; (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	b009      	add	sp, #36	; 0x24
 800281a:	bd90      	pop	{r4, r7, pc}
 800281c:	40010200 	.word	0x40010200
 8002820:	40021000 	.word	0x40021000
 8002824:	50000400 	.word	0x50000400

08002828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b08b      	sub	sp, #44	; 0x2c
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	2414      	movs	r4, #20
 8002832:	193b      	adds	r3, r7, r4
 8002834:	0018      	movs	r0, r3
 8002836:	2314      	movs	r3, #20
 8002838:	001a      	movs	r2, r3
 800283a:	2100      	movs	r1, #0
 800283c:	f007 ffd4 	bl	800a7e8 <memset>
  if(hi2c->Instance==I2C1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a20      	ldr	r2, [pc, #128]	; (80028c8 <HAL_I2C_MspInit+0xa0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d139      	bne.n	80028be <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_I2C_MspInit+0xa4>)
 800284c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800284e:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <HAL_I2C_MspInit+0xa4>)
 8002850:	2101      	movs	r1, #1
 8002852:	430a      	orrs	r2, r1
 8002854:	635a      	str	r2, [r3, #52]	; 0x34
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_I2C_MspInit+0xa4>)
 8002858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285a:	2201      	movs	r2, #1
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002862:	193b      	adds	r3, r7, r4
 8002864:	22c0      	movs	r2, #192	; 0xc0
 8002866:	00d2      	lsls	r2, r2, #3
 8002868:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800286a:	0021      	movs	r1, r4
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2212      	movs	r2, #18
 8002870:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002872:	187b      	adds	r3, r7, r1
 8002874:	2201      	movs	r2, #1
 8002876:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	187b      	adds	r3, r7, r1
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800287e:	187b      	adds	r3, r7, r1
 8002880:	2206      	movs	r2, #6
 8002882:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002884:	187a      	adds	r2, r7, r1
 8002886:	23a0      	movs	r3, #160	; 0xa0
 8002888:	05db      	lsls	r3, r3, #23
 800288a:	0011      	movs	r1, r2
 800288c:	0018      	movs	r0, r3
 800288e:	f001 faaf 	bl	8003df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <HAL_I2C_MspInit+0xa4>)
 8002894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_I2C_MspInit+0xa4>)
 8002898:	2180      	movs	r1, #128	; 0x80
 800289a:	0389      	lsls	r1, r1, #14
 800289c:	430a      	orrs	r2, r1
 800289e:	63da      	str	r2, [r3, #60]	; 0x3c
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_I2C_MspInit+0xa4>)
 80028a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	039b      	lsls	r3, r3, #14
 80028a8:	4013      	ands	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2100      	movs	r1, #0
 80028b2:	2017      	movs	r0, #23
 80028b4:	f000 ffa2 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80028b8:	2017      	movs	r0, #23
 80028ba:	f000 ffb4 	bl	8003826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b00b      	add	sp, #44	; 0x2c
 80028c4:	bd90      	pop	{r4, r7, pc}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	40005400 	.word	0x40005400
 80028cc:	40021000 	.word	0x40021000

080028d0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b08b      	sub	sp, #44	; 0x2c
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	2414      	movs	r4, #20
 80028da:	193b      	adds	r3, r7, r4
 80028dc:	0018      	movs	r0, r3
 80028de:	2314      	movs	r3, #20
 80028e0:	001a      	movs	r2, r3
 80028e2:	2100      	movs	r1, #0
 80028e4:	f007 ff80 	bl	800a7e8 <memset>
  if(hi2s->Instance==SPI1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a47      	ldr	r2, [pc, #284]	; (8002a0c <HAL_I2S_MspInit+0x13c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d000      	beq.n	80028f4 <HAL_I2S_MspInit+0x24>
 80028f2:	e086      	b.n	8002a02 <HAL_I2S_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028f4:	4b46      	ldr	r3, [pc, #280]	; (8002a10 <HAL_I2S_MspInit+0x140>)
 80028f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f8:	4b45      	ldr	r3, [pc, #276]	; (8002a10 <HAL_I2S_MspInit+0x140>)
 80028fa:	2180      	movs	r1, #128	; 0x80
 80028fc:	0149      	lsls	r1, r1, #5
 80028fe:	430a      	orrs	r2, r1
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
 8002902:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <HAL_I2S_MspInit+0x140>)
 8002904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	015b      	lsls	r3, r3, #5
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002910:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <HAL_I2S_MspInit+0x140>)
 8002912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002914:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <HAL_I2S_MspInit+0x140>)
 8002916:	2101      	movs	r1, #1
 8002918:	430a      	orrs	r2, r1
 800291a:	635a      	str	r2, [r3, #52]	; 0x34
 800291c:	4b3c      	ldr	r3, [pc, #240]	; (8002a10 <HAL_I2S_MspInit+0x140>)
 800291e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002920:	2201      	movs	r2, #1
 8002922:	4013      	ands	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002928:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <HAL_I2S_MspInit+0x140>)
 800292a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800292c:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <HAL_I2S_MspInit+0x140>)
 800292e:	2102      	movs	r1, #2
 8002930:	430a      	orrs	r2, r1
 8002932:	635a      	str	r2, [r3, #52]	; 0x34
 8002934:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <HAL_I2S_MspInit+0x140>)
 8002936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002938:	2202      	movs	r2, #2
 800293a:	4013      	ands	r3, r2
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002940:	193b      	adds	r3, r7, r4
 8002942:	2280      	movs	r2, #128	; 0x80
 8002944:	0212      	lsls	r2, r2, #8
 8002946:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	193b      	adds	r3, r7, r4
 800294a:	2202      	movs	r2, #2
 800294c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	193b      	adds	r3, r7, r4
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	193b      	adds	r3, r7, r4
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800295a:	193b      	adds	r3, r7, r4
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	193a      	adds	r2, r7, r4
 8002962:	23a0      	movs	r3, #160	; 0xa0
 8002964:	05db      	lsls	r3, r3, #23
 8002966:	0011      	movs	r1, r2
 8002968:	0018      	movs	r0, r3
 800296a:	f001 fa41 	bl	8003df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800296e:	0021      	movs	r1, r4
 8002970:	187b      	adds	r3, r7, r1
 8002972:	2238      	movs	r2, #56	; 0x38
 8002974:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002976:	187b      	adds	r3, r7, r1
 8002978:	2202      	movs	r2, #2
 800297a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	187b      	adds	r3, r7, r1
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	187b      	adds	r3, r7, r1
 8002984:	2200      	movs	r2, #0
 8002986:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002988:	187b      	adds	r3, r7, r1
 800298a:	2200      	movs	r2, #0
 800298c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298e:	187b      	adds	r3, r7, r1
 8002990:	4a20      	ldr	r2, [pc, #128]	; (8002a14 <HAL_I2S_MspInit+0x144>)
 8002992:	0019      	movs	r1, r3
 8002994:	0010      	movs	r0, r2
 8002996:	f001 fa2b 	bl	8003df0 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <HAL_I2S_MspInit+0x148>)
 800299c:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <HAL_I2S_MspInit+0x14c>)
 800299e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <HAL_I2S_MspInit+0x148>)
 80029a2:	2211      	movs	r2, #17
 80029a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029a6:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <HAL_I2S_MspInit+0x148>)
 80029a8:	2210      	movs	r2, #16
 80029aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ac:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <HAL_I2S_MspInit+0x148>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029b2:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_I2S_MspInit+0x148>)
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029b8:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <HAL_I2S_MspInit+0x148>)
 80029ba:	2280      	movs	r2, #128	; 0x80
 80029bc:	0052      	lsls	r2, r2, #1
 80029be:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029c0:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <HAL_I2S_MspInit+0x148>)
 80029c2:	2280      	movs	r2, #128	; 0x80
 80029c4:	00d2      	lsls	r2, r2, #3
 80029c6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80029c8:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <HAL_I2S_MspInit+0x148>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_I2S_MspInit+0x148>)
 80029d0:	22c0      	movs	r2, #192	; 0xc0
 80029d2:	0192      	lsls	r2, r2, #6
 80029d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <HAL_I2S_MspInit+0x148>)
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 ff41 	bl	8003860 <HAL_DMA_Init>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 80029e2:	f7ff febd 	bl	8002760 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a0b      	ldr	r2, [pc, #44]	; (8002a18 <HAL_I2S_MspInit+0x148>)
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <HAL_I2S_MspInit+0x148>)
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2100      	movs	r1, #0
 80029f6:	2019      	movs	r0, #25
 80029f8:	f000 ff00 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80029fc:	2019      	movs	r0, #25
 80029fe:	f000 ff12 	bl	8003826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b00b      	add	sp, #44	; 0x2c
 8002a08:	bd90      	pop	{r4, r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	40013000 	.word	0x40013000
 8002a10:	40021000 	.word	0x40021000
 8002a14:	50000400 	.word	0x50000400
 8002a18:	200035b0 	.word	0x200035b0
 8002a1c:	40020008 	.word	0x40020008

08002a20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b08b      	sub	sp, #44	; 0x2c
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	2414      	movs	r4, #20
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	2314      	movs	r3, #20
 8002a30:	001a      	movs	r2, r3
 8002a32:	2100      	movs	r1, #0
 8002a34:	f007 fed8 	bl	800a7e8 <memset>
  if(hspi->Instance==SPI2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a54      	ldr	r2, [pc, #336]	; (8002b90 <HAL_SPI_MspInit+0x170>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d000      	beq.n	8002a44 <HAL_SPI_MspInit+0x24>
 8002a42:	e0a0      	b.n	8002b86 <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a44:	4b53      	ldr	r3, [pc, #332]	; (8002b94 <HAL_SPI_MspInit+0x174>)
 8002a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a48:	4b52      	ldr	r3, [pc, #328]	; (8002b94 <HAL_SPI_MspInit+0x174>)
 8002a4a:	2180      	movs	r1, #128	; 0x80
 8002a4c:	01c9      	lsls	r1, r1, #7
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a52:	4b50      	ldr	r3, [pc, #320]	; (8002b94 <HAL_SPI_MspInit+0x174>)
 8002a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	01db      	lsls	r3, r3, #7
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a60:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_SPI_MspInit+0x174>)
 8002a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a64:	4b4b      	ldr	r3, [pc, #300]	; (8002b94 <HAL_SPI_MspInit+0x174>)
 8002a66:	2102      	movs	r1, #2
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	635a      	str	r2, [r3, #52]	; 0x34
 8002a6c:	4b49      	ldr	r3, [pc, #292]	; (8002b94 <HAL_SPI_MspInit+0x174>)
 8002a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a70:	2202      	movs	r2, #2
 8002a72:	4013      	ands	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a78:	193b      	adds	r3, r7, r4
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7e:	193b      	adds	r3, r7, r4
 8002a80:	2202      	movs	r2, #2
 8002a82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	2204      	movs	r2, #4
 8002a94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	4a3f      	ldr	r2, [pc, #252]	; (8002b98 <HAL_SPI_MspInit+0x178>)
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	0010      	movs	r0, r2
 8002a9e:	f001 f9a7 	bl	8003df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002aa2:	0021      	movs	r1, r4
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	22c0      	movs	r2, #192	; 0xc0
 8002aa8:	0052      	lsls	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	2202      	movs	r2, #2
 8002ab0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	2200      	movs	r2, #0
 8002abc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	4a34      	ldr	r2, [pc, #208]	; (8002b98 <HAL_SPI_MspInit+0x178>)
 8002ac8:	0019      	movs	r1, r3
 8002aca:	0010      	movs	r0, r2
 8002acc:	f001 f990 	bl	8003df0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8002ad0:	4b32      	ldr	r3, [pc, #200]	; (8002b9c <HAL_SPI_MspInit+0x17c>)
 8002ad2:	4a33      	ldr	r2, [pc, #204]	; (8002ba0 <HAL_SPI_MspInit+0x180>)
 8002ad4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002ad6:	4b31      	ldr	r3, [pc, #196]	; (8002b9c <HAL_SPI_MspInit+0x17c>)
 8002ad8:	2212      	movs	r2, #18
 8002ada:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002adc:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <HAL_SPI_MspInit+0x17c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae2:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <HAL_SPI_MspInit+0x17c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <HAL_SPI_MspInit+0x17c>)
 8002aea:	2280      	movs	r2, #128	; 0x80
 8002aec:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aee:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_SPI_MspInit+0x17c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002af4:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_SPI_MspInit+0x17c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002afa:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <HAL_SPI_MspInit+0x17c>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002b00:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <HAL_SPI_MspInit+0x17c>)
 8002b02:	2280      	movs	r2, #128	; 0x80
 8002b04:	0192      	lsls	r2, r2, #6
 8002b06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002b08:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_SPI_MspInit+0x17c>)
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 fea8 	bl	8003860 <HAL_DMA_Init>
 8002b10:	1e03      	subs	r3, r0, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8002b14:	f7ff fe24 	bl	8002760 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a20      	ldr	r2, [pc, #128]	; (8002b9c <HAL_SPI_MspInit+0x17c>)
 8002b1c:	659a      	str	r2, [r3, #88]	; 0x58
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <HAL_SPI_MspInit+0x17c>)
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <HAL_SPI_MspInit+0x184>)
 8002b26:	4a20      	ldr	r2, [pc, #128]	; (8002ba8 <HAL_SPI_MspInit+0x188>)
 8002b28:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <HAL_SPI_MspInit+0x184>)
 8002b2c:	2213      	movs	r2, #19
 8002b2e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b30:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <HAL_SPI_MspInit+0x184>)
 8002b32:	2210      	movs	r2, #16
 8002b34:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_SPI_MspInit+0x184>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_SPI_MspInit+0x184>)
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b42:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <HAL_SPI_MspInit+0x184>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b48:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <HAL_SPI_MspInit+0x184>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_SPI_MspInit+0x184>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b54:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <HAL_SPI_MspInit+0x184>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <HAL_SPI_MspInit+0x184>)
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f000 fe7f 	bl	8003860 <HAL_DMA_Init>
 8002b62:	1e03      	subs	r3, r0, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8002b66:	f7ff fdfb 	bl	8002760 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ba4 <HAL_SPI_MspInit+0x184>)
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <HAL_SPI_MspInit+0x184>)
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	201a      	movs	r0, #26
 8002b7c:	f000 fe3e 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002b80:	201a      	movs	r0, #26
 8002b82:	f000 fe50 	bl	8003826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b00b      	add	sp, #44	; 0x2c
 8002b8c:	bd90      	pop	{r4, r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	40003800 	.word	0x40003800
 8002b94:	40021000 	.word	0x40021000
 8002b98:	50000400 	.word	0x50000400
 8002b9c:	200032c4 	.word	0x200032c4
 8002ba0:	4002001c 	.word	0x4002001c
 8002ba4:	20003550 	.word	0x20003550
 8002ba8:	40020030 	.word	0x40020030

08002bac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <HAL_TIM_Base_MspInit+0x38>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d10d      	bne.n	8002bda <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <HAL_TIM_Base_MspInit+0x3c>)
 8002bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_TIM_Base_MspInit+0x3c>)
 8002bc4:	2180      	movs	r1, #128	; 0x80
 8002bc6:	0109      	lsls	r1, r1, #4
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_TIM_Base_MspInit+0x3c>)
 8002bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b004      	add	sp, #16
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	40012c00 	.word	0x40012c00
 8002be8:	40021000 	.word	0x40021000

08002bec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b089      	sub	sp, #36	; 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	240c      	movs	r4, #12
 8002bf6:	193b      	adds	r3, r7, r4
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	2314      	movs	r3, #20
 8002bfc:	001a      	movs	r2, r3
 8002bfe:	2100      	movs	r1, #0
 8002c00:	f007 fdf2 	bl	800a7e8 <memset>
  if(htim->Instance==TIM1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a15      	ldr	r2, [pc, #84]	; (8002c60 <HAL_TIM_MspPostInit+0x74>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d123      	bne.n	8002c56 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0e:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <HAL_TIM_MspPostInit+0x78>)
 8002c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c12:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <HAL_TIM_MspPostInit+0x78>)
 8002c14:	2101      	movs	r1, #1
 8002c16:	430a      	orrs	r2, r1
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_TIM_MspPostInit+0x78>)
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4013      	ands	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	2280      	movs	r2, #128	; 0x80
 8002c2a:	0052      	lsls	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	0021      	movs	r1, r4
 8002c30:	187b      	adds	r3, r7, r1
 8002c32:	2202      	movs	r2, #2
 8002c34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c36:	187b      	adds	r3, r7, r1
 8002c38:	2202      	movs	r2, #2
 8002c3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002c42:	187b      	adds	r3, r7, r1
 8002c44:	2202      	movs	r2, #2
 8002c46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c48:	187a      	adds	r2, r7, r1
 8002c4a:	23a0      	movs	r3, #160	; 0xa0
 8002c4c:	05db      	lsls	r3, r3, #23
 8002c4e:	0011      	movs	r1, r2
 8002c50:	0018      	movs	r0, r3
 8002c52:	f001 f8cd 	bl	8003df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b009      	add	sp, #36	; 0x24
 8002c5c:	bd90      	pop	{r4, r7, pc}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40021000 	.word	0x40021000

08002c68 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b08b      	sub	sp, #44	; 0x2c
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	2414      	movs	r4, #20
 8002c72:	193b      	adds	r3, r7, r4
 8002c74:	0018      	movs	r0, r3
 8002c76:	2314      	movs	r3, #20
 8002c78:	001a      	movs	r2, r3
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	f007 fdb4 	bl	800a7e8 <memset>
  if(husart->Instance==USART3)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a45      	ldr	r2, [pc, #276]	; (8002d9c <HAL_USART_MspInit+0x134>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d000      	beq.n	8002c8c <HAL_USART_MspInit+0x24>
 8002c8a:	e083      	b.n	8002d94 <HAL_USART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c8c:	4b44      	ldr	r3, [pc, #272]	; (8002da0 <HAL_USART_MspInit+0x138>)
 8002c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c90:	4b43      	ldr	r3, [pc, #268]	; (8002da0 <HAL_USART_MspInit+0x138>)
 8002c92:	2180      	movs	r1, #128	; 0x80
 8002c94:	02c9      	lsls	r1, r1, #11
 8002c96:	430a      	orrs	r2, r1
 8002c98:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c9a:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_USART_MspInit+0x138>)
 8002c9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	02db      	lsls	r3, r3, #11
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca8:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <HAL_USART_MspInit+0x138>)
 8002caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cac:	4b3c      	ldr	r3, [pc, #240]	; (8002da0 <HAL_USART_MspInit+0x138>)
 8002cae:	2101      	movs	r1, #1
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	635a      	str	r2, [r3, #52]	; 0x34
 8002cb4:	4b3a      	ldr	r3, [pc, #232]	; (8002da0 <HAL_USART_MspInit+0x138>)
 8002cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb8:	2201      	movs	r2, #1
 8002cba:	4013      	ands	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc0:	4b37      	ldr	r3, [pc, #220]	; (8002da0 <HAL_USART_MspInit+0x138>)
 8002cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc4:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <HAL_USART_MspInit+0x138>)
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	635a      	str	r2, [r3, #52]	; 0x34
 8002ccc:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <HAL_USART_MspInit+0x138>)
 8002cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cd8:	193b      	adds	r3, r7, r4
 8002cda:	2220      	movs	r2, #32
 8002cdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	193b      	adds	r3, r7, r4
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	2203      	movs	r2, #3
 8002cee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002cf0:	193b      	adds	r3, r7, r4
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf6:	193a      	adds	r2, r7, r4
 8002cf8:	23a0      	movs	r3, #160	; 0xa0
 8002cfa:	05db      	lsls	r3, r3, #23
 8002cfc:	0011      	movs	r1, r2
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f001 f876 	bl	8003df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d04:	0021      	movs	r1, r4
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	2203      	movs	r2, #3
 8002d0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	187b      	adds	r3, r7, r1
 8002d0e:	2202      	movs	r2, #2
 8002d10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	187b      	adds	r3, r7, r1
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2204      	movs	r2, #4
 8002d22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	4a1f      	ldr	r2, [pc, #124]	; (8002da4 <HAL_USART_MspInit+0x13c>)
 8002d28:	0019      	movs	r1, r3
 8002d2a:	0010      	movs	r0, r2
 8002d2c:	f001 f860 	bl	8003df0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_USART_MspInit+0x140>)
 8002d32:	4a1e      	ldr	r2, [pc, #120]	; (8002dac <HAL_USART_MspInit+0x144>)
 8002d34:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002d36:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <HAL_USART_MspInit+0x140>)
 8002d38:	2237      	movs	r2, #55	; 0x37
 8002d3a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d3c:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <HAL_USART_MspInit+0x140>)
 8002d3e:	2210      	movs	r2, #16
 8002d40:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d42:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_USART_MspInit+0x140>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d48:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <HAL_USART_MspInit+0x140>)
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d4e:	4b16      	ldr	r3, [pc, #88]	; (8002da8 <HAL_USART_MspInit+0x140>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d54:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <HAL_USART_MspInit+0x140>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002d5a:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <HAL_USART_MspInit+0x140>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_USART_MspInit+0x140>)
 8002d62:	2280      	movs	r2, #128	; 0x80
 8002d64:	0192      	lsls	r2, r2, #6
 8002d66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <HAL_USART_MspInit+0x140>)
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 fd78 	bl	8003860 <HAL_DMA_Init>
 8002d70:	1e03      	subs	r3, r0, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8002d74:	f7ff fcf4 	bl	8002760 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a0b      	ldr	r2, [pc, #44]	; (8002da8 <HAL_USART_MspInit+0x140>)
 8002d7c:	651a      	str	r2, [r3, #80]	; 0x50
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_USART_MspInit+0x140>)
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002d84:	2200      	movs	r2, #0
 8002d86:	2100      	movs	r1, #0
 8002d88:	201d      	movs	r0, #29
 8002d8a:	f000 fd37 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002d8e:	201d      	movs	r0, #29
 8002d90:	f000 fd49 	bl	8003826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b00b      	add	sp, #44	; 0x2c
 8002d9a:	bd90      	pop	{r4, r7, pc}
 8002d9c:	40004800 	.word	0x40004800
 8002da0:	40021000 	.word	0x40021000
 8002da4:	50000400 	.word	0x50000400
 8002da8:	20003328 	.word	0x20003328
 8002dac:	40020044 	.word	0x40020044

08002db0 <LL_USART_IsActiveFlag_FE>:
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d101      	bne.n	8002dc8 <LL_USART_IsActiveFlag_FE+0x18>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <LL_USART_IsActiveFlag_FE+0x1a>
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b002      	add	sp, #8
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <LL_USART_IsActiveFlag_NE>:
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	2204      	movs	r2, #4
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d101      	bne.n	8002dea <LL_USART_IsActiveFlag_NE+0x18>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <LL_USART_IsActiveFlag_NE+0x1a>
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	0018      	movs	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b002      	add	sp, #8
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <LL_USART_IsActiveFlag_ORE>:
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	2208      	movs	r2, #8
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d101      	bne.n	8002e0c <LL_USART_IsActiveFlag_ORE+0x18>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <LL_USART_IsActiveFlag_ORE+0x1a>
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b002      	add	sp, #8
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	2220      	movs	r2, #32
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	d101      	bne.n	8002e2e <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b002      	add	sp, #8
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2220      	movs	r2, #32
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d101      	bne.n	8002e50 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	0018      	movs	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b002      	add	sp, #8
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e68:	e7fe      	b.n	8002e68 <HardFault_Handler+0x4>

08002e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e82:	f000 f959 	bl	8003138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002e90:	4b03      	ldr	r3, [pc, #12]	; (8002ea0 <DMA1_Channel1_IRQHandler+0x14>)
 8002e92:	0018      	movs	r0, r3
 8002e94:	f000 fe5e 	bl	8003b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	200035b0 	.word	0x200035b0

08002ea4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 fe52 	bl	8003b54 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f000 fe4e 	bl	8003b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	200032c4 	.word	0x200032c4
 8002ec4:	20003550 	.word	0x20003550

08002ec8 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 fe40 	bl	8003b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	20003328 	.word	0x20003328

08002ee0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <I2C1_IRQHandler+0x2c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	23e0      	movs	r3, #224	; 0xe0
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d004      	beq.n	8002efc <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <I2C1_IRQHandler+0x2c>)
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f001 f98f 	bl	8004218 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002efa:	e003      	b.n	8002f04 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <I2C1_IRQHandler+0x2c>)
 8002efe:	0018      	movs	r0, r3
 8002f00:	f001 f970 	bl	80041e4 <HAL_I2C_EV_IRQHandler>
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	20003264 	.word	0x20003264

08002f10 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <SPI1_IRQHandler+0x14>)
 8002f16:	0018      	movs	r0, r3
 8002f18:	f002 f8f2 	bl	8005100 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	20003490 	.word	0x20003490

08002f28 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <SPI2_IRQHandler+0x14>)
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f004 fbfc 	bl	800772c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	200031e4 	.word	0x200031e4

08002f40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002f44:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002f46:	6a1a      	ldr	r2, [r3, #32]
 8002f48:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002f4a:	2108      	movs	r1, #8
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002f50:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002f52:	6a1a      	ldr	r2, [r3, #32]
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002f56:	2102      	movs	r1, #2
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002f5c:	4b1f      	ldr	r3, [pc, #124]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002f5e:	6a1a      	ldr	r2, [r3, #32]
 8002f60:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002f62:	2104      	movs	r1, #4
 8002f64:	430a      	orrs	r2, r1
 8002f66:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002f68:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7ff ff53 	bl	8002e16 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002f70:	1e03      	subs	r3, r0, #0
 8002f72:	d009      	beq.n	8002f88 <USART2_IRQHandler+0x48>
 8002f74:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7ff ff5e 	bl	8002e38 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002f7c:	1e03      	subs	r3, r0, #0
 8002f7e:	d003      	beq.n	8002f88 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002f80:	f7fe f83c 	bl	8000ffc <USART2_RX_Callback>
	  {
 8002f84:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f86:	e025      	b.n	8002fd4 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002f88:	4b14      	ldr	r3, [pc, #80]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002f8a:	6a1a      	ldr	r2, [r3, #32]
 8002f8c:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002f8e:	2108      	movs	r1, #8
 8002f90:	430a      	orrs	r2, r1
 8002f92:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff ff2c 	bl	8002df4 <LL_USART_IsActiveFlag_ORE>
 8002f9c:	1e03      	subs	r3, r0, #0
 8002f9e:	d008      	beq.n	8002fb2 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002fa0:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002fa2:	6a1a      	ldr	r2, [r3, #32]
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002fa6:	2108      	movs	r1, #8
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002fb0:	e010      	b.n	8002fd4 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7ff fefb 	bl	8002db0 <LL_USART_IsActiveFlag_FE>
 8002fba:	1e03      	subs	r3, r0, #0
 8002fbc:	d002      	beq.n	8002fc4 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002fc2:	e007      	b.n	8002fd4 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7ff ff03 	bl	8002dd2 <LL_USART_IsActiveFlag_NE>
 8002fcc:	1e03      	subs	r3, r0, #0
 8002fce:	d001      	beq.n	8002fd4 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002fd0:	4b02      	ldr	r3, [pc, #8]	; (8002fdc <USART2_IRQHandler+0x9c>)
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	40004400 	.word	0x40004400

08002fe0 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <USART3_4_LPUART1_IRQHandler+0x14>)
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f006 fa3c 	bl	8009464 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	200033c4 	.word	0x200033c4

08002ff8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <SystemInit+0x14>)
 8002ffe:	2280      	movs	r2, #128	; 0x80
 8003000:	0512      	lsls	r2, r2, #20
 8003002:	609a      	str	r2, [r3, #8]
#endif
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003010:	480d      	ldr	r0, [pc, #52]	; (8003048 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003012:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003014:	f7ff fff0 	bl	8002ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003018:	480c      	ldr	r0, [pc, #48]	; (800304c <LoopForever+0x6>)
  ldr r1, =_edata
 800301a:	490d      	ldr	r1, [pc, #52]	; (8003050 <LoopForever+0xa>)
  ldr r2, =_sidata
 800301c:	4a0d      	ldr	r2, [pc, #52]	; (8003054 <LoopForever+0xe>)
  movs r3, #0
 800301e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003020:	e002      	b.n	8003028 <LoopCopyDataInit>

08003022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003026:	3304      	adds	r3, #4

08003028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800302a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800302c:	d3f9      	bcc.n	8003022 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003030:	4c0a      	ldr	r4, [pc, #40]	; (800305c <LoopForever+0x16>)
  movs r3, #0
 8003032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003034:	e001      	b.n	800303a <LoopFillZerobss>

08003036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003038:	3204      	adds	r2, #4

0800303a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800303a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800303c:	d3fb      	bcc.n	8003036 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800303e:	f007 fbaf 	bl	800a7a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003042:	f7fd fa75 	bl	8000530 <main>

08003046 <LoopForever>:

LoopForever:
  b LoopForever
 8003046:	e7fe      	b.n	8003046 <LoopForever>
  ldr   r0, =_estack
 8003048:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800304c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003050:	20003174 	.word	0x20003174
  ldr r2, =_sidata
 8003054:	0800a900 	.word	0x0800a900
  ldr r2, =_sbss
 8003058:	20003174 	.word	0x20003174
  ldr r4, =_ebss
 800305c:	20005634 	.word	0x20005634

08003060 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003060:	e7fe      	b.n	8003060 <ADC1_COMP_IRQHandler>
	...

08003064 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800306a:	1dfb      	adds	r3, r7, #7
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_Init+0x3c>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <HAL_Init+0x3c>)
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	0049      	lsls	r1, r1, #1
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800307e:	2000      	movs	r0, #0
 8003080:	f000 f810 	bl	80030a4 <HAL_InitTick>
 8003084:	1e03      	subs	r3, r0, #0
 8003086:	d003      	beq.n	8003090 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003088:	1dfb      	adds	r3, r7, #7
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e001      	b.n	8003094 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003090:	f7ff fb6c 	bl	800276c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	781b      	ldrb	r3, [r3, #0]
}
 8003098:	0018      	movs	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	b002      	add	sp, #8
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40022000 	.word	0x40022000

080030a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030ac:	230f      	movs	r3, #15
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_InitTick+0x88>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d02b      	beq.n	8003114 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80030bc:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <HAL_InitTick+0x8c>)
 80030be:	681c      	ldr	r4, [r3, #0]
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <HAL_InitTick+0x88>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	0019      	movs	r1, r3
 80030c6:	23fa      	movs	r3, #250	; 0xfa
 80030c8:	0098      	lsls	r0, r3, #2
 80030ca:	f7fd f81b 	bl	8000104 <__udivsi3>
 80030ce:	0003      	movs	r3, r0
 80030d0:	0019      	movs	r1, r3
 80030d2:	0020      	movs	r0, r4
 80030d4:	f7fd f816 	bl	8000104 <__udivsi3>
 80030d8:	0003      	movs	r3, r0
 80030da:	0018      	movs	r0, r3
 80030dc:	f000 fbb3 	bl	8003846 <HAL_SYSTICK_Config>
 80030e0:	1e03      	subs	r3, r0, #0
 80030e2:	d112      	bne.n	800310a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d80a      	bhi.n	8003100 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	2301      	movs	r3, #1
 80030ee:	425b      	negs	r3, r3
 80030f0:	2200      	movs	r2, #0
 80030f2:	0018      	movs	r0, r3
 80030f4:	f000 fb82 	bl	80037fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <HAL_InitTick+0x90>)
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e00d      	b.n	800311c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003100:	230f      	movs	r3, #15
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	2201      	movs	r2, #1
 8003106:	701a      	strb	r2, [r3, #0]
 8003108:	e008      	b.n	800311c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800310a:	230f      	movs	r3, #15
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e003      	b.n	800311c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003114:	230f      	movs	r3, #15
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	2201      	movs	r2, #1
 800311a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800311c:	230f      	movs	r3, #15
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	781b      	ldrb	r3, [r3, #0]
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b005      	add	sp, #20
 8003128:	bd90      	pop	{r4, r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	20003170 	.word	0x20003170
 8003130:	20003168 	.word	0x20003168
 8003134:	2000316c 	.word	0x2000316c

08003138 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_IncTick+0x1c>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	001a      	movs	r2, r3
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_IncTick+0x20>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	18d2      	adds	r2, r2, r3
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <HAL_IncTick+0x20>)
 800314a:	601a      	str	r2, [r3, #0]
}
 800314c:	46c0      	nop			; (mov r8, r8)
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	20003170 	.word	0x20003170
 8003158:	20005630 	.word	0x20005630

0800315c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  return uwTick;
 8003160:	4b02      	ldr	r3, [pc, #8]	; (800316c <HAL_GetTick+0x10>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	0018      	movs	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	20005630 	.word	0x20005630

08003170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003178:	f7ff fff0 	bl	800315c <HAL_GetTick>
 800317c:	0003      	movs	r3, r0
 800317e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3301      	adds	r3, #1
 8003188:	d005      	beq.n	8003196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <HAL_Delay+0x44>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	001a      	movs	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	189b      	adds	r3, r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	f7ff ffe0 	bl	800315c <HAL_GetTick>
 800319c:	0002      	movs	r2, r0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d8f7      	bhi.n	8003198 <HAL_Delay+0x28>
  {
  }
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b004      	add	sp, #16
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	20003170 	.word	0x20003170

080031b8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a06      	ldr	r2, [pc, #24]	; (80031e0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	0019      	movs	r1, r3
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]
}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b002      	add	sp, #8
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	40010000 	.word	0x40010000
 80031e0:	fffff9ff 	.word	0xfffff9ff

080031e4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80031ec:	4a05      	ldr	r2, [pc, #20]	; (8003204 <LL_EXTI_EnableIT_0_31+0x20>)
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	58d2      	ldr	r2, [r2, r3]
 80031f2:	4904      	ldr	r1, [pc, #16]	; (8003204 <LL_EXTI_EnableIT_0_31+0x20>)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	2280      	movs	r2, #128	; 0x80
 80031fa:	508b      	str	r3, [r1, r2]
}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	b002      	add	sp, #8
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40021800 	.word	0x40021800

08003208 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003210:	4a06      	ldr	r2, [pc, #24]	; (800322c <LL_EXTI_DisableIT_0_31+0x24>)
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	58d3      	ldr	r3, [r2, r3]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	43d2      	mvns	r2, r2
 800321a:	4904      	ldr	r1, [pc, #16]	; (800322c <LL_EXTI_DisableIT_0_31+0x24>)
 800321c:	4013      	ands	r3, r2
 800321e:	2280      	movs	r2, #128	; 0x80
 8003220:	508b      	str	r3, [r1, r2]
}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b002      	add	sp, #8
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	40021800 	.word	0x40021800

08003230 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003238:	4a05      	ldr	r2, [pc, #20]	; (8003250 <LL_EXTI_EnableEvent_0_31+0x20>)
 800323a:	2384      	movs	r3, #132	; 0x84
 800323c:	58d2      	ldr	r2, [r2, r3]
 800323e:	4904      	ldr	r1, [pc, #16]	; (8003250 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4313      	orrs	r3, r2
 8003244:	2284      	movs	r2, #132	; 0x84
 8003246:	508b      	str	r3, [r1, r2]

}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	b002      	add	sp, #8
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021800 	.word	0x40021800

08003254 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800325c:	4a06      	ldr	r2, [pc, #24]	; (8003278 <LL_EXTI_DisableEvent_0_31+0x24>)
 800325e:	2384      	movs	r3, #132	; 0x84
 8003260:	58d3      	ldr	r3, [r2, r3]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	43d2      	mvns	r2, r2
 8003266:	4904      	ldr	r1, [pc, #16]	; (8003278 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003268:	4013      	ands	r3, r2
 800326a:	2284      	movs	r2, #132	; 0x84
 800326c:	508b      	str	r3, [r1, r2]
}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	46bd      	mov	sp, r7
 8003272:	b002      	add	sp, #8
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	40021800 	.word	0x40021800

0800327c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8003286:	6819      	ldr	r1, [r3, #0]
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	430a      	orrs	r2, r1
 800328e:	601a      	str	r2, [r3, #0]

}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b002      	add	sp, #8
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021800 	.word	0x40021800

0800329c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	43d9      	mvns	r1, r3
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80032ae:	400a      	ands	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]

}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b002      	add	sp, #8
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	40021800 	.word	0x40021800

080032c0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80032c8:	4b04      	ldr	r3, [pc, #16]	; (80032dc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
}
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b002      	add	sp, #8
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021800 	.word	0x40021800

080032e0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	43d9      	mvns	r1, r3
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80032f2:	400a      	ands	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b002      	add	sp, #8
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	40021800 	.word	0x40021800

08003304 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 800330c:	4b03      	ldr	r3, [pc, #12]	; (800331c <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	611a      	str	r2, [r3, #16]
}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	46bd      	mov	sp, r7
 8003316:	b002      	add	sp, #8
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	40021800 	.word	0x40021800

08003320 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8003328:	4b03      	ldr	r3, [pc, #12]	; (8003338 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	60da      	str	r2, [r3, #12]
}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	46bd      	mov	sp, r7
 8003332:	b002      	add	sp, #8
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	40021800 	.word	0x40021800

0800333c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003344:	2300      	movs	r3, #0
 8003346:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003348:	211f      	movs	r1, #31
 800334a:	187b      	adds	r3, r7, r1
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d103      	bne.n	800335e <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8003356:	187b      	adds	r3, r7, r1
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	e13d      	b.n	80035da <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	0fdb      	lsrs	r3, r3, #31
 8003366:	07da      	lsls	r2, r3, #31
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	061b      	lsls	r3, r3, #24
 800336c:	429a      	cmp	r2, r3
 800336e:	d104      	bne.n	800337a <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8003370:	231f      	movs	r3, #31
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
 8003378:	e12f      	b.n	80035da <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2229      	movs	r2, #41	; 0x29
 800337e:	5c9b      	ldrb	r3, [r3, r2]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2228      	movs	r2, #40	; 0x28
 800338a:	2100      	movs	r1, #0
 800338c:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	0018      	movs	r0, r3
 8003398:	f7ff fa10 	bl	80027bc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2230      	movs	r2, #48	; 0x30
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a85      	ldr	r2, [pc, #532]	; (80035e8 <HAL_COMP_Init+0x2ac>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	0019      	movs	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	430a      	orrs	r2, r1
 80033e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	2380      	movs	r3, #128	; 0x80
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d10d      	bne.n	800340a <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80033ee:	4b7f      	ldr	r3, [pc, #508]	; (80035ec <HAL_COMP_Init+0x2b0>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4b7e      	ldr	r3, [pc, #504]	; (80035ec <HAL_COMP_Init+0x2b0>)
 80033f4:	497e      	ldr	r1, [pc, #504]	; (80035f0 <HAL_COMP_Init+0x2b4>)
 80033f6:	400a      	ands	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80033fa:	4b7c      	ldr	r3, [pc, #496]	; (80035ec <HAL_COMP_Init+0x2b0>)
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	4b7b      	ldr	r3, [pc, #492]	; (80035ec <HAL_COMP_Init+0x2b0>)
 8003400:	2180      	movs	r1, #128	; 0x80
 8003402:	0109      	lsls	r1, r1, #4
 8003404:	430a      	orrs	r2, r1
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	e01f      	b.n	800344a <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	23c0      	movs	r3, #192	; 0xc0
 8003410:	015b      	lsls	r3, r3, #5
 8003412:	429a      	cmp	r2, r3
 8003414:	d10d      	bne.n	8003432 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003416:	4b75      	ldr	r3, [pc, #468]	; (80035ec <HAL_COMP_Init+0x2b0>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b74      	ldr	r3, [pc, #464]	; (80035ec <HAL_COMP_Init+0x2b0>)
 800341c:	2180      	movs	r1, #128	; 0x80
 800341e:	0109      	lsls	r1, r1, #4
 8003420:	430a      	orrs	r2, r1
 8003422:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003424:	4b71      	ldr	r3, [pc, #452]	; (80035ec <HAL_COMP_Init+0x2b0>)
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	4b70      	ldr	r3, [pc, #448]	; (80035ec <HAL_COMP_Init+0x2b0>)
 800342a:	4971      	ldr	r1, [pc, #452]	; (80035f0 <HAL_COMP_Init+0x2b4>)
 800342c:	400a      	ands	r2, r1
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	e00b      	b.n	800344a <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003432:	4b6e      	ldr	r3, [pc, #440]	; (80035ec <HAL_COMP_Init+0x2b0>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4b6d      	ldr	r3, [pc, #436]	; (80035ec <HAL_COMP_Init+0x2b0>)
 8003438:	496d      	ldr	r1, [pc, #436]	; (80035f0 <HAL_COMP_Init+0x2b4>)
 800343a:	400a      	ands	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800343e:	4b6b      	ldr	r3, [pc, #428]	; (80035ec <HAL_COMP_Init+0x2b0>)
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4b6a      	ldr	r3, [pc, #424]	; (80035ec <HAL_COMP_Init+0x2b0>)
 8003444:	496a      	ldr	r1, [pc, #424]	; (80035f0 <HAL_COMP_Init+0x2b4>)
 8003446:	400a      	ands	r2, r1
 8003448:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	22a0      	movs	r2, #160	; 0xa0
 8003450:	01d2      	lsls	r2, r2, #7
 8003452:	4293      	cmp	r3, r2
 8003454:	d017      	beq.n	8003486 <HAL_COMP_Init+0x14a>
 8003456:	22a0      	movs	r2, #160	; 0xa0
 8003458:	01d2      	lsls	r2, r2, #7
 800345a:	4293      	cmp	r3, r2
 800345c:	d830      	bhi.n	80034c0 <HAL_COMP_Init+0x184>
 800345e:	2b01      	cmp	r3, #1
 8003460:	d01f      	beq.n	80034a2 <HAL_COMP_Init+0x166>
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	01d2      	lsls	r2, r2, #7
 8003466:	4293      	cmp	r3, r2
 8003468:	d12a      	bne.n	80034c0 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800346a:	4b60      	ldr	r3, [pc, #384]	; (80035ec <HAL_COMP_Init+0x2b0>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4b5f      	ldr	r3, [pc, #380]	; (80035ec <HAL_COMP_Init+0x2b0>)
 8003470:	2180      	movs	r1, #128	; 0x80
 8003472:	01c9      	lsls	r1, r1, #7
 8003474:	430a      	orrs	r2, r1
 8003476:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003478:	4b5c      	ldr	r3, [pc, #368]	; (80035ec <HAL_COMP_Init+0x2b0>)
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	4b5b      	ldr	r3, [pc, #364]	; (80035ec <HAL_COMP_Init+0x2b0>)
 800347e:	495d      	ldr	r1, [pc, #372]	; (80035f4 <HAL_COMP_Init+0x2b8>)
 8003480:	400a      	ands	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
        break;
 8003484:	e029      	b.n	80034da <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003486:	4b59      	ldr	r3, [pc, #356]	; (80035ec <HAL_COMP_Init+0x2b0>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4b58      	ldr	r3, [pc, #352]	; (80035ec <HAL_COMP_Init+0x2b0>)
 800348c:	4959      	ldr	r1, [pc, #356]	; (80035f4 <HAL_COMP_Init+0x2b8>)
 800348e:	400a      	ands	r2, r1
 8003490:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003492:	4b56      	ldr	r3, [pc, #344]	; (80035ec <HAL_COMP_Init+0x2b0>)
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	4b55      	ldr	r3, [pc, #340]	; (80035ec <HAL_COMP_Init+0x2b0>)
 8003498:	2180      	movs	r1, #128	; 0x80
 800349a:	01c9      	lsls	r1, r1, #7
 800349c:	430a      	orrs	r2, r1
 800349e:	605a      	str	r2, [r3, #4]
        break;
 80034a0:	e01b      	b.n	80034da <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80034a2:	4b52      	ldr	r3, [pc, #328]	; (80035ec <HAL_COMP_Init+0x2b0>)
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	4b51      	ldr	r3, [pc, #324]	; (80035ec <HAL_COMP_Init+0x2b0>)
 80034a8:	2180      	movs	r1, #128	; 0x80
 80034aa:	01c9      	lsls	r1, r1, #7
 80034ac:	430a      	orrs	r2, r1
 80034ae:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80034b0:	4b4e      	ldr	r3, [pc, #312]	; (80035ec <HAL_COMP_Init+0x2b0>)
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	4b4d      	ldr	r3, [pc, #308]	; (80035ec <HAL_COMP_Init+0x2b0>)
 80034b6:	2180      	movs	r1, #128	; 0x80
 80034b8:	01c9      	lsls	r1, r1, #7
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
        break;
 80034be:	e00c      	b.n	80034da <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80034c0:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <HAL_COMP_Init+0x2b0>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b49      	ldr	r3, [pc, #292]	; (80035ec <HAL_COMP_Init+0x2b0>)
 80034c6:	494b      	ldr	r1, [pc, #300]	; (80035f4 <HAL_COMP_Init+0x2b8>)
 80034c8:	400a      	ands	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80034cc:	4b47      	ldr	r3, [pc, #284]	; (80035ec <HAL_COMP_Init+0x2b0>)
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	4b46      	ldr	r3, [pc, #280]	; (80035ec <HAL_COMP_Init+0x2b0>)
 80034d2:	4948      	ldr	r1, [pc, #288]	; (80035f4 <HAL_COMP_Init+0x2b8>)
 80034d4:	400a      	ands	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]
        break;
 80034d8:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2230      	movs	r2, #48	; 0x30
 80034e2:	4013      	ands	r3, r2
 80034e4:	d016      	beq.n	8003514 <HAL_COMP_Init+0x1d8>
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d113      	bne.n	8003514 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80034ec:	4b42      	ldr	r3, [pc, #264]	; (80035f8 <HAL_COMP_Init+0x2bc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4942      	ldr	r1, [pc, #264]	; (80035fc <HAL_COMP_Init+0x2c0>)
 80034f2:	0018      	movs	r0, r3
 80034f4:	f7fc fe06 	bl	8000104 <__udivsi3>
 80034f8:	0003      	movs	r3, r0
 80034fa:	001a      	movs	r2, r3
 80034fc:	0013      	movs	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	189b      	adds	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003506:	e002      	b.n	800350e <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3b01      	subs	r3, #1
 800350c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f9      	bne.n	8003508 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a34      	ldr	r2, [pc, #208]	; (80035ec <HAL_COMP_Init+0x2b0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d102      	bne.n	8003524 <HAL_COMP_Init+0x1e8>
 800351e:	2380      	movs	r3, #128	; 0x80
 8003520:	029b      	lsls	r3, r3, #10
 8003522:	e001      	b.n	8003528 <HAL_COMP_Init+0x1ec>
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	02db      	lsls	r3, r3, #11
 8003528:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	2203      	movs	r2, #3
 8003530:	4013      	ands	r3, r2
 8003532:	d040      	beq.n	80035b6 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	2210      	movs	r2, #16
 800353a:	4013      	ands	r3, r2
 800353c:	d004      	beq.n	8003548 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	0018      	movs	r0, r3
 8003542:	f7ff fe9b 	bl	800327c <LL_EXTI_EnableRisingTrig_0_31>
 8003546:	e003      	b.n	8003550 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	0018      	movs	r0, r3
 800354c:	f7ff fea6 	bl	800329c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	2220      	movs	r2, #32
 8003556:	4013      	ands	r3, r2
 8003558:	d004      	beq.n	8003564 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	0018      	movs	r0, r3
 800355e:	f7ff feaf 	bl	80032c0 <LL_EXTI_EnableFallingTrig_0_31>
 8003562:	e003      	b.n	800356c <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	0018      	movs	r0, r3
 8003568:	f7ff feba 	bl	80032e0 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	0018      	movs	r0, r3
 8003570:	f7ff fed6 	bl	8003320 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	0018      	movs	r0, r3
 8003578:	f7ff fec4 	bl	8003304 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	2202      	movs	r2, #2
 8003582:	4013      	ands	r3, r2
 8003584:	d004      	beq.n	8003590 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	0018      	movs	r0, r3
 800358a:	f7ff fe51 	bl	8003230 <LL_EXTI_EnableEvent_0_31>
 800358e:	e003      	b.n	8003598 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	0018      	movs	r0, r3
 8003594:	f7ff fe5e 	bl	8003254 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	2201      	movs	r2, #1
 800359e:	4013      	ands	r3, r2
 80035a0:	d004      	beq.n	80035ac <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff fe1d 	bl	80031e4 <LL_EXTI_EnableIT_0_31>
 80035aa:	e00c      	b.n	80035c6 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	0018      	movs	r0, r3
 80035b0:	f7ff fe2a 	bl	8003208 <LL_EXTI_DisableIT_0_31>
 80035b4:	e007      	b.n	80035c6 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f7ff fe4b 	bl	8003254 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f7ff fe21 	bl	8003208 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2229      	movs	r2, #41	; 0x29
 80035ca:	5c9b      	ldrb	r3, [r3, r2]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d103      	bne.n	80035da <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2229      	movs	r2, #41	; 0x29
 80035d6:	2101      	movs	r1, #1
 80035d8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80035da:	231f      	movs	r3, #31
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	781b      	ldrb	r3, [r3, #0]
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b008      	add	sp, #32
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	fe00740f 	.word	0xfe00740f
 80035ec:	40010200 	.word	0x40010200
 80035f0:	fffff7ff 	.word	0xfffff7ff
 80035f4:	ffffbfff 	.word	0xffffbfff
 80035f8:	20003168 	.word	0x20003168
 80035fc:	00030d40 	.word	0x00030d40

08003600 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003608:	2300      	movs	r3, #0
 800360a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800360c:	210f      	movs	r1, #15
 800360e:	187b      	adds	r3, r7, r1
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d103      	bne.n	8003622 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 800361a:	187b      	adds	r3, r7, r1
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	e034      	b.n	800368c <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	0fdb      	lsrs	r3, r3, #31
 800362a:	07da      	lsls	r2, r3, #31
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	061b      	lsls	r3, r3, #24
 8003630:	429a      	cmp	r2, r3
 8003632:	d104      	bne.n	800363e <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8003634:	230f      	movs	r3, #15
 8003636:	18fb      	adds	r3, r7, r3
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
 800363c:	e026      	b.n	800368c <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2229      	movs	r2, #41	; 0x29
 8003642:	5c9b      	ldrb	r3, [r3, r2]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d11c      	bne.n	8003684 <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2101      	movs	r1, #1
 8003656:	430a      	orrs	r2, r1
 8003658:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2229      	movs	r2, #41	; 0x29
 800365e:	2102      	movs	r1, #2
 8003660:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003662:	4b0e      	ldr	r3, [pc, #56]	; (800369c <HAL_COMP_Start+0x9c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	490e      	ldr	r1, [pc, #56]	; (80036a0 <HAL_COMP_Start+0xa0>)
 8003668:	0018      	movs	r0, r3
 800366a:	f7fc fd4b 	bl	8000104 <__udivsi3>
 800366e:	0003      	movs	r3, r0
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003674:	e002      	b.n	800367c <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	3b01      	subs	r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f9      	bne.n	8003676 <HAL_COMP_Start+0x76>
 8003682:	e003      	b.n	800368c <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003684:	230f      	movs	r3, #15
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	2201      	movs	r2, #1
 800368a:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800368c:	230f      	movs	r3, #15
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	781b      	ldrb	r3, [r3, #0]
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b004      	add	sp, #16
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	20003168 	.word	0x20003168
 80036a0:	00030d40 	.word	0x00030d40

080036a4 <__NVIC_EnableIRQ>:
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	0002      	movs	r2, r0
 80036ac:	1dfb      	adds	r3, r7, #7
 80036ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036b0:	1dfb      	adds	r3, r7, #7
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b7f      	cmp	r3, #127	; 0x7f
 80036b6:	d809      	bhi.n	80036cc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036b8:	1dfb      	adds	r3, r7, #7
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	001a      	movs	r2, r3
 80036be:	231f      	movs	r3, #31
 80036c0:	401a      	ands	r2, r3
 80036c2:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <__NVIC_EnableIRQ+0x30>)
 80036c4:	2101      	movs	r1, #1
 80036c6:	4091      	lsls	r1, r2
 80036c8:	000a      	movs	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]
}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b002      	add	sp, #8
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	e000e100 	.word	0xe000e100

080036d8 <__NVIC_SetPriority>:
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	0002      	movs	r2, r0
 80036e0:	6039      	str	r1, [r7, #0]
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036e6:	1dfb      	adds	r3, r7, #7
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b7f      	cmp	r3, #127	; 0x7f
 80036ec:	d828      	bhi.n	8003740 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036ee:	4a2f      	ldr	r2, [pc, #188]	; (80037ac <__NVIC_SetPriority+0xd4>)
 80036f0:	1dfb      	adds	r3, r7, #7
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	b25b      	sxtb	r3, r3
 80036f6:	089b      	lsrs	r3, r3, #2
 80036f8:	33c0      	adds	r3, #192	; 0xc0
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	589b      	ldr	r3, [r3, r2]
 80036fe:	1dfa      	adds	r2, r7, #7
 8003700:	7812      	ldrb	r2, [r2, #0]
 8003702:	0011      	movs	r1, r2
 8003704:	2203      	movs	r2, #3
 8003706:	400a      	ands	r2, r1
 8003708:	00d2      	lsls	r2, r2, #3
 800370a:	21ff      	movs	r1, #255	; 0xff
 800370c:	4091      	lsls	r1, r2
 800370e:	000a      	movs	r2, r1
 8003710:	43d2      	mvns	r2, r2
 8003712:	401a      	ands	r2, r3
 8003714:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	019b      	lsls	r3, r3, #6
 800371a:	22ff      	movs	r2, #255	; 0xff
 800371c:	401a      	ands	r2, r3
 800371e:	1dfb      	adds	r3, r7, #7
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	0018      	movs	r0, r3
 8003724:	2303      	movs	r3, #3
 8003726:	4003      	ands	r3, r0
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800372c:	481f      	ldr	r0, [pc, #124]	; (80037ac <__NVIC_SetPriority+0xd4>)
 800372e:	1dfb      	adds	r3, r7, #7
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	b25b      	sxtb	r3, r3
 8003734:	089b      	lsrs	r3, r3, #2
 8003736:	430a      	orrs	r2, r1
 8003738:	33c0      	adds	r3, #192	; 0xc0
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	501a      	str	r2, [r3, r0]
}
 800373e:	e031      	b.n	80037a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003740:	4a1b      	ldr	r2, [pc, #108]	; (80037b0 <__NVIC_SetPriority+0xd8>)
 8003742:	1dfb      	adds	r3, r7, #7
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	0019      	movs	r1, r3
 8003748:	230f      	movs	r3, #15
 800374a:	400b      	ands	r3, r1
 800374c:	3b08      	subs	r3, #8
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	3306      	adds	r3, #6
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	18d3      	adds	r3, r2, r3
 8003756:	3304      	adds	r3, #4
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	1dfa      	adds	r2, r7, #7
 800375c:	7812      	ldrb	r2, [r2, #0]
 800375e:	0011      	movs	r1, r2
 8003760:	2203      	movs	r2, #3
 8003762:	400a      	ands	r2, r1
 8003764:	00d2      	lsls	r2, r2, #3
 8003766:	21ff      	movs	r1, #255	; 0xff
 8003768:	4091      	lsls	r1, r2
 800376a:	000a      	movs	r2, r1
 800376c:	43d2      	mvns	r2, r2
 800376e:	401a      	ands	r2, r3
 8003770:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	019b      	lsls	r3, r3, #6
 8003776:	22ff      	movs	r2, #255	; 0xff
 8003778:	401a      	ands	r2, r3
 800377a:	1dfb      	adds	r3, r7, #7
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	0018      	movs	r0, r3
 8003780:	2303      	movs	r3, #3
 8003782:	4003      	ands	r3, r0
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003788:	4809      	ldr	r0, [pc, #36]	; (80037b0 <__NVIC_SetPriority+0xd8>)
 800378a:	1dfb      	adds	r3, r7, #7
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	001c      	movs	r4, r3
 8003790:	230f      	movs	r3, #15
 8003792:	4023      	ands	r3, r4
 8003794:	3b08      	subs	r3, #8
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	430a      	orrs	r2, r1
 800379a:	3306      	adds	r3, #6
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	18c3      	adds	r3, r0, r3
 80037a0:	3304      	adds	r3, #4
 80037a2:	601a      	str	r2, [r3, #0]
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b003      	add	sp, #12
 80037aa:	bd90      	pop	{r4, r7, pc}
 80037ac:	e000e100 	.word	0xe000e100
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	1e5a      	subs	r2, r3, #1
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	045b      	lsls	r3, r3, #17
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d301      	bcc.n	80037cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037c8:	2301      	movs	r3, #1
 80037ca:	e010      	b.n	80037ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <SysTick_Config+0x44>)
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	3a01      	subs	r2, #1
 80037d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037d4:	2301      	movs	r3, #1
 80037d6:	425b      	negs	r3, r3
 80037d8:	2103      	movs	r1, #3
 80037da:	0018      	movs	r0, r3
 80037dc:	f7ff ff7c 	bl	80036d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <SysTick_Config+0x44>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037e6:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <SysTick_Config+0x44>)
 80037e8:	2207      	movs	r2, #7
 80037ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	0018      	movs	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b002      	add	sp, #8
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	e000e010 	.word	0xe000e010

080037fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	210f      	movs	r1, #15
 8003808:	187b      	adds	r3, r7, r1
 800380a:	1c02      	adds	r2, r0, #0
 800380c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	187b      	adds	r3, r7, r1
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b25b      	sxtb	r3, r3
 8003816:	0011      	movs	r1, r2
 8003818:	0018      	movs	r0, r3
 800381a:	f7ff ff5d 	bl	80036d8 <__NVIC_SetPriority>
}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	0002      	movs	r2, r0
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003832:	1dfb      	adds	r3, r7, #7
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	b25b      	sxtb	r3, r3
 8003838:	0018      	movs	r0, r3
 800383a:	f7ff ff33 	bl	80036a4 <__NVIC_EnableIRQ>
}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b002      	add	sp, #8
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	0018      	movs	r0, r3
 8003852:	f7ff ffaf 	bl	80037b4 <SysTick_Config>
 8003856:	0003      	movs	r3, r0
}
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e077      	b.n	8003962 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a3d      	ldr	r2, [pc, #244]	; (800396c <HAL_DMA_Init+0x10c>)
 8003878:	4694      	mov	ip, r2
 800387a:	4463      	add	r3, ip
 800387c:	2114      	movs	r1, #20
 800387e:	0018      	movs	r0, r3
 8003880:	f7fc fc40 	bl	8000104 <__udivsi3>
 8003884:	0003      	movs	r3, r0
 8003886:	009a      	lsls	r2, r3, #2
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2225      	movs	r2, #37	; 0x25
 8003890:	2102      	movs	r1, #2
 8003892:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4934      	ldr	r1, [pc, #208]	; (8003970 <HAL_DMA_Init+0x110>)
 80038a0:	400a      	ands	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6819      	ldr	r1, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	0018      	movs	r0, r3
 80038de:	f000 fa37 	bl	8003d50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	2380      	movs	r3, #128	; 0x80
 80038e8:	01db      	lsls	r3, r3, #7
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d102      	bne.n	80038f4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fc:	213f      	movs	r1, #63	; 0x3f
 80038fe:	400a      	ands	r2, r1
 8003900:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800390a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d011      	beq.n	8003938 <HAL_DMA_Init+0xd8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b04      	cmp	r3, #4
 800391a:	d80d      	bhi.n	8003938 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	0018      	movs	r0, r3
 8003920:	f000 fa42 	bl	8003da8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003934:	605a      	str	r2, [r3, #4]
 8003936:	e008      	b.n	800394a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2225      	movs	r2, #37	; 0x25
 8003954:	2101      	movs	r1, #1
 8003956:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2224      	movs	r2, #36	; 0x24
 800395c:	2100      	movs	r1, #0
 800395e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	0018      	movs	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	b002      	add	sp, #8
 8003968:	bd80      	pop	{r7, pc}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	bffdfff8 	.word	0xbffdfff8
 8003970:	ffff800f 	.word	0xffff800f

08003974 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2317      	movs	r3, #23
 8003984:	18fb      	adds	r3, r7, r3
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2224      	movs	r2, #36	; 0x24
 800398e:	5c9b      	ldrb	r3, [r3, r2]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_DMA_Start_IT+0x24>
 8003994:	2302      	movs	r3, #2
 8003996:	e06f      	b.n	8003a78 <HAL_DMA_Start_IT+0x104>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2224      	movs	r2, #36	; 0x24
 800399c:	2101      	movs	r1, #1
 800399e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2225      	movs	r2, #37	; 0x25
 80039a4:	5c9b      	ldrb	r3, [r3, r2]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d157      	bne.n	8003a5c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2225      	movs	r2, #37	; 0x25
 80039b0:	2102      	movs	r1, #2
 80039b2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2101      	movs	r1, #1
 80039c6:	438a      	bics	r2, r1
 80039c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f97d 	bl	8003cd0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	210e      	movs	r1, #14
 80039ea:	430a      	orrs	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e00f      	b.n	8003a10 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2104      	movs	r1, #4
 80039fc:	438a      	bics	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	210a      	movs	r1, #10
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	025b      	lsls	r3, r3, #9
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d008      	beq.n	8003a30 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	0049      	lsls	r1, r1, #1
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a42:	2180      	movs	r1, #128	; 0x80
 8003a44:	0049      	lsls	r1, r1, #1
 8003a46:	430a      	orrs	r2, r1
 8003a48:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2101      	movs	r1, #1
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e00a      	b.n	8003a72 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2280      	movs	r2, #128	; 0x80
 8003a60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2224      	movs	r2, #36	; 0x24
 8003a66:	2100      	movs	r1, #0
 8003a68:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003a6a:	2317      	movs	r3, #23
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	2201      	movs	r2, #1
 8003a70:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003a72:	2317      	movs	r3, #23
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	781b      	ldrb	r3, [r3, #0]
}
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b006      	add	sp, #24
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a88:	210f      	movs	r1, #15
 8003a8a:	187b      	adds	r3, r7, r1
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2225      	movs	r2, #37	; 0x25
 8003a94:	5c9b      	ldrb	r3, [r3, r2]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d006      	beq.n	8003aaa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
 8003aa8:	e049      	b.n	8003b3e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	210e      	movs	r1, #14
 8003ab6:	438a      	bics	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	438a      	bics	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	491d      	ldr	r1, [pc, #116]	; (8003b4c <HAL_DMA_Abort_IT+0xcc>)
 8003ad6:	400a      	ands	r2, r1
 8003ad8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_DMA_Abort_IT+0xd0>)
 8003adc:	6859      	ldr	r1, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	221c      	movs	r2, #28
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <HAL_DMA_Abort_IT+0xd0>)
 8003aec:	430a      	orrs	r2, r1
 8003aee:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003af8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00c      	beq.n	8003b1c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0c:	490f      	ldr	r1, [pc, #60]	; (8003b4c <HAL_DMA_Abort_IT+0xcc>)
 8003b0e:	400a      	ands	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003b1a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2225      	movs	r2, #37	; 0x25
 8003b20:	2101      	movs	r1, #1
 8003b22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2224      	movs	r2, #36	; 0x24
 8003b28:	2100      	movs	r1, #0
 8003b2a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d004      	beq.n	8003b3e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	0010      	movs	r0, r2
 8003b3c:	4798      	blx	r3
    }
  }
  return status;
 8003b3e:	230f      	movs	r3, #15
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	781b      	ldrb	r3, [r3, #0]
}
 8003b44:	0018      	movs	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b004      	add	sp, #16
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	fffffeff 	.word	0xfffffeff
 8003b50:	40020000 	.word	0x40020000

08003b54 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003b5c:	4b55      	ldr	r3, [pc, #340]	; (8003cb4 <HAL_DMA_IRQHandler+0x160>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	221c      	movs	r2, #28
 8003b70:	4013      	ands	r3, r2
 8003b72:	2204      	movs	r2, #4
 8003b74:	409a      	lsls	r2, r3
 8003b76:	0013      	movs	r3, r2
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d027      	beq.n	8003bce <HAL_DMA_IRQHandler+0x7a>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2204      	movs	r2, #4
 8003b82:	4013      	ands	r3, r2
 8003b84:	d023      	beq.n	8003bce <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d107      	bne.n	8003ba2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2104      	movs	r1, #4
 8003b9e:	438a      	bics	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003ba2:	4b44      	ldr	r3, [pc, #272]	; (8003cb4 <HAL_DMA_IRQHandler+0x160>)
 8003ba4:	6859      	ldr	r1, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	221c      	movs	r2, #28
 8003bac:	4013      	ands	r3, r2
 8003bae:	2204      	movs	r2, #4
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	4b40      	ldr	r3, [pc, #256]	; (8003cb4 <HAL_DMA_IRQHandler+0x160>)
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d100      	bne.n	8003bc2 <HAL_DMA_IRQHandler+0x6e>
 8003bc0:	e073      	b.n	8003caa <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	0010      	movs	r0, r2
 8003bca:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003bcc:	e06d      	b.n	8003caa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	221c      	movs	r2, #28
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	0013      	movs	r3, r2
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4013      	ands	r3, r2
 8003be0:	d02e      	beq.n	8003c40 <HAL_DMA_IRQHandler+0xec>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2202      	movs	r2, #2
 8003be6:	4013      	ands	r3, r2
 8003be8:	d02a      	beq.n	8003c40 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d10b      	bne.n	8003c0e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	210a      	movs	r1, #10
 8003c02:	438a      	bics	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2225      	movs	r2, #37	; 0x25
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003c0e:	4b29      	ldr	r3, [pc, #164]	; (8003cb4 <HAL_DMA_IRQHandler+0x160>)
 8003c10:	6859      	ldr	r1, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	221c      	movs	r2, #28
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	409a      	lsls	r2, r3
 8003c1e:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <HAL_DMA_IRQHandler+0x160>)
 8003c20:	430a      	orrs	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2224      	movs	r2, #36	; 0x24
 8003c28:	2100      	movs	r1, #0
 8003c2a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d03a      	beq.n	8003caa <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	0010      	movs	r0, r2
 8003c3c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003c3e:	e034      	b.n	8003caa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	221c      	movs	r2, #28
 8003c46:	4013      	ands	r3, r2
 8003c48:	2208      	movs	r2, #8
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	0013      	movs	r3, r2
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4013      	ands	r3, r2
 8003c52:	d02b      	beq.n	8003cac <HAL_DMA_IRQHandler+0x158>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2208      	movs	r2, #8
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d027      	beq.n	8003cac <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	210e      	movs	r1, #14
 8003c68:	438a      	bics	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <HAL_DMA_IRQHandler+0x160>)
 8003c6e:	6859      	ldr	r1, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	221c      	movs	r2, #28
 8003c76:	4013      	ands	r3, r2
 8003c78:	2201      	movs	r2, #1
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	; (8003cb4 <HAL_DMA_IRQHandler+0x160>)
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2225      	movs	r2, #37	; 0x25
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	; 0x24
 8003c94:	2100      	movs	r1, #0
 8003c96:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	0010      	movs	r0, r2
 8003ca8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	46c0      	nop			; (mov r8, r8)
}
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b004      	add	sp, #16
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40020000 	.word	0x40020000

08003cb8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2225      	movs	r2, #37	; 0x25
 8003cc4:	5c9b      	ldrb	r3, [r3, r2]
 8003cc6:	b2db      	uxtb	r3, r3
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b002      	add	sp, #8
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ce6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003cf8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003cfa:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <DMA_SetConfig+0x7c>)
 8003cfc:	6859      	ldr	r1, [r3, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	221c      	movs	r2, #28
 8003d04:	4013      	ands	r3, r2
 8003d06:	2201      	movs	r2, #1
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <DMA_SetConfig+0x7c>)
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d108      	bne.n	8003d32 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d30:	e007      	b.n	8003d42 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	60da      	str	r2, [r3, #12]
}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b004      	add	sp, #16
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	40020000 	.word	0x40020000

08003d50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	4a10      	ldr	r2, [pc, #64]	; (8003da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003d60:	4694      	mov	ip, r2
 8003d62:	4463      	add	r3, ip
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	001a      	movs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	001a      	movs	r2, r3
 8003d72:	23ff      	movs	r3, #255	; 0xff
 8003d74:	4013      	ands	r3, r2
 8003d76:	3b08      	subs	r3, #8
 8003d78:	2114      	movs	r1, #20
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7fc f9c2 	bl	8000104 <__udivsi3>
 8003d80:	0003      	movs	r3, r0
 8003d82:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a07      	ldr	r2, [pc, #28]	; (8003da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003d88:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	221f      	movs	r2, #31
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2201      	movs	r2, #1
 8003d92:	409a      	lsls	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003d98:	46c0      	nop			; (mov r8, r8)
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b004      	add	sp, #16
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	10008200 	.word	0x10008200
 8003da4:	40020880 	.word	0x40020880

08003da8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	223f      	movs	r2, #63	; 0x3f
 8003db6:	4013      	ands	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4a0a      	ldr	r2, [pc, #40]	; (8003de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003dbe:	4694      	mov	ip, r2
 8003dc0:	4463      	add	r3, ip
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	001a      	movs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a07      	ldr	r2, [pc, #28]	; (8003dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2201      	movs	r2, #1
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b004      	add	sp, #16
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	1000823f 	.word	0x1000823f
 8003dec:	40020940 	.word	0x40020940

08003df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dfe:	e147      	b.n	8004090 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2101      	movs	r1, #1
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4091      	lsls	r1, r2
 8003e0a:	000a      	movs	r2, r1
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d100      	bne.n	8003e18 <HAL_GPIO_Init+0x28>
 8003e16:	e138      	b.n	800408a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d00b      	beq.n	8003e38 <HAL_GPIO_Init+0x48>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d007      	beq.n	8003e38 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e2c:	2b11      	cmp	r3, #17
 8003e2e:	d003      	beq.n	8003e38 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b12      	cmp	r3, #18
 8003e36:	d130      	bne.n	8003e9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	2203      	movs	r2, #3
 8003e44:	409a      	lsls	r2, r3
 8003e46:	0013      	movs	r3, r2
 8003e48:	43da      	mvns	r2, r3
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	0013      	movs	r3, r2
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e6e:	2201      	movs	r2, #1
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	409a      	lsls	r2, r3
 8003e74:	0013      	movs	r3, r2
 8003e76:	43da      	mvns	r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	2201      	movs	r2, #1
 8003e86:	401a      	ands	r2, r3
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	0013      	movs	r3, r2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	0013      	movs	r3, r2
 8003eaa:	43da      	mvns	r2, r3
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	0013      	movs	r3, r2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d003      	beq.n	8003eda <HAL_GPIO_Init+0xea>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2b12      	cmp	r3, #18
 8003ed8:	d123      	bne.n	8003f22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	08da      	lsrs	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3208      	adds	r2, #8
 8003ee2:	0092      	lsls	r2, r2, #2
 8003ee4:	58d3      	ldr	r3, [r2, r3]
 8003ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2207      	movs	r2, #7
 8003eec:	4013      	ands	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	220f      	movs	r2, #15
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	0013      	movs	r3, r2
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2107      	movs	r1, #7
 8003f06:	400b      	ands	r3, r1
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	0013      	movs	r3, r2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	08da      	lsrs	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3208      	adds	r2, #8
 8003f1c:	0092      	lsls	r2, r2, #2
 8003f1e:	6939      	ldr	r1, [r7, #16]
 8003f20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	0013      	movs	r3, r2
 8003f32:	43da      	mvns	r2, r3
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2203      	movs	r2, #3
 8003f40:	401a      	ands	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	409a      	lsls	r2, r3
 8003f48:	0013      	movs	r3, r2
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	055b      	lsls	r3, r3, #21
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d100      	bne.n	8003f64 <HAL_GPIO_Init+0x174>
 8003f62:	e092      	b.n	800408a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003f64:	4a50      	ldr	r2, [pc, #320]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	089b      	lsrs	r3, r3, #2
 8003f6a:	3318      	adds	r3, #24
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	589b      	ldr	r3, [r3, r2]
 8003f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2203      	movs	r2, #3
 8003f76:	4013      	ands	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	220f      	movs	r2, #15
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	0013      	movs	r3, r2
 8003f80:	43da      	mvns	r2, r3
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4013      	ands	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	23a0      	movs	r3, #160	; 0xa0
 8003f8c:	05db      	lsls	r3, r3, #23
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d013      	beq.n	8003fba <HAL_GPIO_Init+0x1ca>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a45      	ldr	r2, [pc, #276]	; (80040ac <HAL_GPIO_Init+0x2bc>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00d      	beq.n	8003fb6 <HAL_GPIO_Init+0x1c6>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a44      	ldr	r2, [pc, #272]	; (80040b0 <HAL_GPIO_Init+0x2c0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d007      	beq.n	8003fb2 <HAL_GPIO_Init+0x1c2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a43      	ldr	r2, [pc, #268]	; (80040b4 <HAL_GPIO_Init+0x2c4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <HAL_GPIO_Init+0x1be>
 8003faa:	2303      	movs	r3, #3
 8003fac:	e006      	b.n	8003fbc <HAL_GPIO_Init+0x1cc>
 8003fae:	2305      	movs	r3, #5
 8003fb0:	e004      	b.n	8003fbc <HAL_GPIO_Init+0x1cc>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e002      	b.n	8003fbc <HAL_GPIO_Init+0x1cc>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <HAL_GPIO_Init+0x1cc>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	2103      	movs	r1, #3
 8003fc0:	400a      	ands	r2, r1
 8003fc2:	00d2      	lsls	r2, r2, #3
 8003fc4:	4093      	lsls	r3, r2
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003fcc:	4936      	ldr	r1, [pc, #216]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	3318      	adds	r3, #24
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fda:	4a33      	ldr	r2, [pc, #204]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	58d3      	ldr	r3, [r2, r3]
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	43da      	mvns	r2, r3
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	025b      	lsls	r3, r3, #9
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004000:	4929      	ldr	r1, [pc, #164]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8004002:	2280      	movs	r2, #128	; 0x80
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004008:	4a27      	ldr	r2, [pc, #156]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 800400a:	2384      	movs	r3, #132	; 0x84
 800400c:	58d3      	ldr	r3, [r2, r3]
 800400e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	43da      	mvns	r2, r3
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4013      	ands	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	029b      	lsls	r3, r3, #10
 8004022:	4013      	ands	r3, r2
 8004024:	d003      	beq.n	800402e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800402e:	491e      	ldr	r1, [pc, #120]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8004030:	2284      	movs	r2, #132	; 0x84
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004036:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	43da      	mvns	r2, r3
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	035b      	lsls	r3, r3, #13
 800404e:	4013      	ands	r3, r2
 8004050:	d003      	beq.n	800405a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800405a:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004060:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	43da      	mvns	r2, r3
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	2380      	movs	r3, #128	; 0x80
 8004076:	039b      	lsls	r3, r3, #14
 8004078:	4013      	ands	r3, r2
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004084:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <HAL_GPIO_Init+0x2b8>)
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	3301      	adds	r3, #1
 800408e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	40da      	lsrs	r2, r3
 8004098:	1e13      	subs	r3, r2, #0
 800409a:	d000      	beq.n	800409e <HAL_GPIO_Init+0x2ae>
 800409c:	e6b0      	b.n	8003e00 <HAL_GPIO_Init+0x10>
  }
}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b006      	add	sp, #24
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40021800 	.word	0x40021800
 80040ac:	50000400 	.word	0x50000400
 80040b0:	50000800 	.word	0x50000800
 80040b4:	50000c00 	.word	0x50000c00

080040b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e082      	b.n	80041d0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2241      	movs	r2, #65	; 0x41
 80040ce:	5c9b      	ldrb	r3, [r3, r2]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d107      	bne.n	80040e6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2240      	movs	r2, #64	; 0x40
 80040da:	2100      	movs	r1, #0
 80040dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7fe fba1 	bl	8002828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2241      	movs	r2, #65	; 0x41
 80040ea:	2124      	movs	r1, #36	; 0x24
 80040ec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	438a      	bics	r2, r1
 80040fc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4934      	ldr	r1, [pc, #208]	; (80041d8 <HAL_I2C_Init+0x120>)
 8004108:	400a      	ands	r2, r1
 800410a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4931      	ldr	r1, [pc, #196]	; (80041dc <HAL_I2C_Init+0x124>)
 8004118:	400a      	ands	r2, r1
 800411a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d108      	bne.n	8004136 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2180      	movs	r1, #128	; 0x80
 800412e:	0209      	lsls	r1, r1, #8
 8004130:	430a      	orrs	r2, r1
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	e007      	b.n	8004146 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2184      	movs	r1, #132	; 0x84
 8004140:	0209      	lsls	r1, r1, #8
 8004142:	430a      	orrs	r2, r1
 8004144:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d104      	bne.n	8004158 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2280      	movs	r2, #128	; 0x80
 8004154:	0112      	lsls	r2, r2, #4
 8004156:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	491f      	ldr	r1, [pc, #124]	; (80041e0 <HAL_I2C_Init+0x128>)
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	491a      	ldr	r1, [pc, #104]	; (80041dc <HAL_I2C_Init+0x124>)
 8004174:	400a      	ands	r2, r1
 8004176:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	431a      	orrs	r2, r3
 8004182:	0011      	movs	r1, r2
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	021a      	lsls	r2, r3, #8
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69d9      	ldr	r1, [r3, #28]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1a      	ldr	r2, [r3, #32]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2101      	movs	r1, #1
 80041ae:	430a      	orrs	r2, r1
 80041b0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2241      	movs	r2, #65	; 0x41
 80041bc:	2120      	movs	r1, #32
 80041be:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2242      	movs	r2, #66	; 0x42
 80041ca:	2100      	movs	r1, #0
 80041cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	0018      	movs	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	b002      	add	sp, #8
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	f0ffffff 	.word	0xf0ffffff
 80041dc:	ffff7fff 	.word	0xffff7fff
 80041e0:	02008000 	.word	0x02008000

080041e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	68f9      	ldr	r1, [r7, #12]
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4798      	blx	r3
  }
}
 8004210:	46c0      	nop			; (mov r8, r8)
 8004212:	46bd      	mov	sp, r7
 8004214:	b004      	add	sp, #16
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	0a1b      	lsrs	r3, r3, #8
 8004234:	001a      	movs	r2, r3
 8004236:	2301      	movs	r3, #1
 8004238:	4013      	ands	r3, r2
 800423a:	d010      	beq.n	800425e <HAL_I2C_ER_IRQHandler+0x46>
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	09db      	lsrs	r3, r3, #7
 8004240:	001a      	movs	r2, r3
 8004242:	2301      	movs	r3, #1
 8004244:	4013      	ands	r3, r2
 8004246:	d00a      	beq.n	800425e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424c:	2201      	movs	r2, #1
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2280      	movs	r2, #128	; 0x80
 800425a:	0052      	lsls	r2, r2, #1
 800425c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	0a9b      	lsrs	r3, r3, #10
 8004262:	001a      	movs	r2, r3
 8004264:	2301      	movs	r3, #1
 8004266:	4013      	ands	r3, r2
 8004268:	d010      	beq.n	800428c <HAL_I2C_ER_IRQHandler+0x74>
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	09db      	lsrs	r3, r3, #7
 800426e:	001a      	movs	r2, r3
 8004270:	2301      	movs	r3, #1
 8004272:	4013      	ands	r3, r2
 8004274:	d00a      	beq.n	800428c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427a:	2208      	movs	r2, #8
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2280      	movs	r2, #128	; 0x80
 8004288:	00d2      	lsls	r2, r2, #3
 800428a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	0a5b      	lsrs	r3, r3, #9
 8004290:	001a      	movs	r2, r3
 8004292:	2301      	movs	r3, #1
 8004294:	4013      	ands	r3, r2
 8004296:	d010      	beq.n	80042ba <HAL_I2C_ER_IRQHandler+0xa2>
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	09db      	lsrs	r3, r3, #7
 800429c:	001a      	movs	r2, r3
 800429e:	2301      	movs	r3, #1
 80042a0:	4013      	ands	r3, r2
 80042a2:	d00a      	beq.n	80042ba <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a8:	2202      	movs	r2, #2
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2280      	movs	r2, #128	; 0x80
 80042b6:	0092      	lsls	r2, r2, #2
 80042b8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	220b      	movs	r2, #11
 80042c4:	4013      	ands	r3, r2
 80042c6:	d005      	beq.n	80042d4 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	0011      	movs	r1, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f000 fbd8 	bl	8004a84 <I2C_ITError>
  }
}
 80042d4:	46c0      	nop			; (mov r8, r8)
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b006      	add	sp, #24
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b002      	add	sp, #8
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b002      	add	sp, #8
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	0008      	movs	r0, r1
 8004306:	0011      	movs	r1, r2
 8004308:	1cfb      	adds	r3, r7, #3
 800430a:	1c02      	adds	r2, r0, #0
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	003b      	movs	r3, r7
 8004310:	1c0a      	adds	r2, r1, #0
 8004312:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004314:	46c0      	nop			; (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b002      	add	sp, #8
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	b002      	add	sp, #8
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b002      	add	sp, #8
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}

0800434c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2240      	movs	r2, #64	; 0x40
 8004366:	5c9b      	ldrb	r3, [r3, r2]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <I2C_Slave_ISR_IT+0x24>
 800436c:	2302      	movs	r3, #2
 800436e:	e0fa      	b.n	8004566 <I2C_Slave_ISR_IT+0x21a>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2240      	movs	r2, #64	; 0x40
 8004374:	2101      	movs	r1, #1
 8004376:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	001a      	movs	r2, r3
 800437e:	2301      	movs	r3, #1
 8004380:	4013      	ands	r3, r2
 8004382:	d00b      	beq.n	800439c <I2C_Slave_ISR_IT+0x50>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	001a      	movs	r2, r3
 800438a:	2301      	movs	r3, #1
 800438c:	4013      	ands	r3, r2
 800438e:	d005      	beq.n	800439c <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	0011      	movs	r1, r2
 8004396:	0018      	movs	r0, r3
 8004398:	f000 f9f6 	bl	8004788 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	001a      	movs	r2, r3
 80043a2:	2301      	movs	r3, #1
 80043a4:	4013      	ands	r3, r2
 80043a6:	d054      	beq.n	8004452 <I2C_Slave_ISR_IT+0x106>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	001a      	movs	r2, r3
 80043ae:	2301      	movs	r3, #1
 80043b0:	4013      	ands	r3, r2
 80043b2:	d04e      	beq.n	8004452 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d12d      	bne.n	800441a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2241      	movs	r2, #65	; 0x41
 80043c2:	5c9b      	ldrb	r3, [r3, r2]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b28      	cmp	r3, #40	; 0x28
 80043c8:	d10b      	bne.n	80043e2 <I2C_Slave_ISR_IT+0x96>
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	049b      	lsls	r3, r3, #18
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d106      	bne.n	80043e2 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	0011      	movs	r1, r2
 80043da:	0018      	movs	r0, r3
 80043dc:	f000 faf8 	bl	80049d0 <I2C_ITListenCplt>
 80043e0:	e036      	b.n	8004450 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2241      	movs	r2, #65	; 0x41
 80043e6:	5c9b      	ldrb	r3, [r3, r2]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b29      	cmp	r3, #41	; 0x29
 80043ec:	d110      	bne.n	8004410 <I2C_Slave_ISR_IT+0xc4>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	4a5f      	ldr	r2, [pc, #380]	; (8004570 <I2C_Slave_ISR_IT+0x224>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00c      	beq.n	8004410 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2210      	movs	r2, #16
 80043fc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	0018      	movs	r0, r3
 8004402:	f000 fc4a 	bl	8004c9a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	0018      	movs	r0, r3
 800440a:	f000 f957 	bl	80046bc <I2C_ITSlaveSeqCplt>
 800440e:	e01f      	b.n	8004450 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2210      	movs	r2, #16
 8004416:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004418:	e09d      	b.n	8004556 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2210      	movs	r2, #16
 8004420:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	2204      	movs	r2, #4
 8004428:	431a      	orrs	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <I2C_Slave_ISR_IT+0xf4>
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	045b      	lsls	r3, r3, #17
 800443a:	429a      	cmp	r2, r3
 800443c:	d000      	beq.n	8004440 <I2C_Slave_ISR_IT+0xf4>
 800443e:	e08a      	b.n	8004556 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	0011      	movs	r1, r2
 8004448:	0018      	movs	r0, r3
 800444a:	f000 fb1b 	bl	8004a84 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800444e:	e082      	b.n	8004556 <I2C_Slave_ISR_IT+0x20a>
 8004450:	e081      	b.n	8004556 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	089b      	lsrs	r3, r3, #2
 8004456:	001a      	movs	r2, r3
 8004458:	2301      	movs	r3, #1
 800445a:	4013      	ands	r3, r2
 800445c:	d031      	beq.n	80044c2 <I2C_Slave_ISR_IT+0x176>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	089b      	lsrs	r3, r3, #2
 8004462:	001a      	movs	r2, r3
 8004464:	2301      	movs	r3, #1
 8004466:	4013      	ands	r3, r2
 8004468:	d02b      	beq.n	80044c2 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d018      	beq.n	80044a6 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d154      	bne.n	800455a <I2C_Slave_ISR_IT+0x20e>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	4a2f      	ldr	r2, [pc, #188]	; (8004570 <I2C_Slave_ISR_IT+0x224>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d050      	beq.n	800455a <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	0018      	movs	r0, r3
 80044bc:	f000 f8fe 	bl	80046bc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80044c0:	e04b      	b.n	800455a <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	08db      	lsrs	r3, r3, #3
 80044c6:	001a      	movs	r2, r3
 80044c8:	2301      	movs	r3, #1
 80044ca:	4013      	ands	r3, r2
 80044cc:	d00c      	beq.n	80044e8 <I2C_Slave_ISR_IT+0x19c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	08db      	lsrs	r3, r3, #3
 80044d2:	001a      	movs	r2, r3
 80044d4:	2301      	movs	r3, #1
 80044d6:	4013      	ands	r3, r2
 80044d8:	d006      	beq.n	80044e8 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	0011      	movs	r1, r2
 80044e0:	0018      	movs	r0, r3
 80044e2:	f000 f847 	bl	8004574 <I2C_ITAddrCplt>
 80044e6:	e039      	b.n	800455c <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	001a      	movs	r2, r3
 80044ee:	2301      	movs	r3, #1
 80044f0:	4013      	ands	r3, r2
 80044f2:	d033      	beq.n	800455c <I2C_Slave_ISR_IT+0x210>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	001a      	movs	r2, r3
 80044fa:	2301      	movs	r3, #1
 80044fc:	4013      	ands	r3, r2
 80044fe:	d02d      	beq.n	800455c <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d018      	beq.n	800453c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	781a      	ldrb	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	851a      	strh	r2, [r3, #40]	; 0x28
 800453a:	e00f      	b.n	800455c <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	045b      	lsls	r3, r3, #17
 8004542:	429a      	cmp	r2, r3
 8004544:	d002      	beq.n	800454c <I2C_Slave_ISR_IT+0x200>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d107      	bne.n	800455c <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	0018      	movs	r0, r3
 8004550:	f000 f8b4 	bl	80046bc <I2C_ITSlaveSeqCplt>
 8004554:	e002      	b.n	800455c <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	e000      	b.n	800455c <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800455a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2240      	movs	r2, #64	; 0x40
 8004560:	2100      	movs	r1, #0
 8004562:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b006      	add	sp, #24
 800456c:	bd80      	pop	{r7, pc}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	ffff0000 	.word	0xffff0000

08004574 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004574:	b5b0      	push	{r4, r5, r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2241      	movs	r2, #65	; 0x41
 8004582:	5c9b      	ldrb	r3, [r3, r2]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	001a      	movs	r2, r3
 8004588:	2328      	movs	r3, #40	; 0x28
 800458a:	4013      	ands	r3, r2
 800458c:	2b28      	cmp	r3, #40	; 0x28
 800458e:	d000      	beq.n	8004592 <I2C_ITAddrCplt+0x1e>
 8004590:	e088      	b.n	80046a4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	b2da      	uxtb	r2, r3
 800459c:	250f      	movs	r5, #15
 800459e:	197b      	adds	r3, r7, r5
 80045a0:	2101      	movs	r1, #1
 80045a2:	400a      	ands	r2, r1
 80045a4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	0c1b      	lsrs	r3, r3, #16
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	200c      	movs	r0, #12
 80045b2:	183b      	adds	r3, r7, r0
 80045b4:	21fe      	movs	r1, #254	; 0xfe
 80045b6:	400a      	ands	r2, r1
 80045b8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	240a      	movs	r4, #10
 80045c4:	193b      	adds	r3, r7, r4
 80045c6:	0592      	lsls	r2, r2, #22
 80045c8:	0d92      	lsrs	r2, r2, #22
 80045ca:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	2308      	movs	r3, #8
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	21fe      	movs	r1, #254	; 0xfe
 80045da:	400a      	ands	r2, r1
 80045dc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d148      	bne.n	8004678 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80045e6:	0021      	movs	r1, r4
 80045e8:	187b      	adds	r3, r7, r1
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	09db      	lsrs	r3, r3, #7
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	183b      	adds	r3, r7, r0
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	4053      	eors	r3, r2
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	001a      	movs	r2, r3
 80045fa:	2306      	movs	r3, #6
 80045fc:	4013      	ands	r3, r2
 80045fe:	d120      	bne.n	8004642 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004600:	183b      	adds	r3, r7, r0
 8004602:	187a      	adds	r2, r7, r1
 8004604:	8812      	ldrh	r2, [r2, #0]
 8004606:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004616:	2b02      	cmp	r3, #2
 8004618:	d14c      	bne.n	80046b4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2208      	movs	r2, #8
 8004626:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2240      	movs	r2, #64	; 0x40
 800462c:	2100      	movs	r1, #0
 800462e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004630:	183b      	adds	r3, r7, r0
 8004632:	881a      	ldrh	r2, [r3, #0]
 8004634:	197b      	adds	r3, r7, r5
 8004636:	7819      	ldrb	r1, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	0018      	movs	r0, r3
 800463c:	f7ff fe5e 	bl	80042fc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004640:	e038      	b.n	80046b4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004642:	240c      	movs	r4, #12
 8004644:	193b      	adds	r3, r7, r4
 8004646:	2208      	movs	r2, #8
 8004648:	18ba      	adds	r2, r7, r2
 800464a:	8812      	ldrh	r2, [r2, #0]
 800464c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800464e:	2380      	movs	r3, #128	; 0x80
 8004650:	021a      	lsls	r2, r3, #8
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	0011      	movs	r1, r2
 8004656:	0018      	movs	r0, r3
 8004658:	f000 fb60 	bl	8004d1c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2240      	movs	r2, #64	; 0x40
 8004660:	2100      	movs	r1, #0
 8004662:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004664:	193b      	adds	r3, r7, r4
 8004666:	881a      	ldrh	r2, [r3, #0]
 8004668:	230f      	movs	r3, #15
 800466a:	18fb      	adds	r3, r7, r3
 800466c:	7819      	ldrb	r1, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	0018      	movs	r0, r3
 8004672:	f7ff fe43 	bl	80042fc <HAL_I2C_AddrCallback>
}
 8004676:	e01d      	b.n	80046b4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004678:	2380      	movs	r3, #128	; 0x80
 800467a:	021a      	lsls	r2, r3, #8
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	0011      	movs	r1, r2
 8004680:	0018      	movs	r0, r3
 8004682:	f000 fb4b 	bl	8004d1c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2240      	movs	r2, #64	; 0x40
 800468a:	2100      	movs	r1, #0
 800468c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800468e:	230c      	movs	r3, #12
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	881a      	ldrh	r2, [r3, #0]
 8004694:	230f      	movs	r3, #15
 8004696:	18fb      	adds	r3, r7, r3
 8004698:	7819      	ldrb	r1, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0018      	movs	r0, r3
 800469e:	f7ff fe2d 	bl	80042fc <HAL_I2C_AddrCallback>
}
 80046a2:	e007      	b.n	80046b4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2208      	movs	r2, #8
 80046aa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2240      	movs	r2, #64	; 0x40
 80046b0:	2100      	movs	r1, #0
 80046b2:	5499      	strb	r1, [r3, r2]
}
 80046b4:	46c0      	nop			; (mov r8, r8)
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b004      	add	sp, #16
 80046ba:	bdb0      	pop	{r4, r5, r7, pc}

080046bc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2242      	movs	r2, #66	; 0x42
 80046d0:	2100      	movs	r1, #0
 80046d2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	0b9b      	lsrs	r3, r3, #14
 80046d8:	001a      	movs	r2, r3
 80046da:	2301      	movs	r3, #1
 80046dc:	4013      	ands	r3, r2
 80046de:	d008      	beq.n	80046f2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4925      	ldr	r1, [pc, #148]	; (8004780 <I2C_ITSlaveSeqCplt+0xc4>)
 80046ec:	400a      	ands	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	e00d      	b.n	800470e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	0bdb      	lsrs	r3, r3, #15
 80046f6:	001a      	movs	r2, r3
 80046f8:	2301      	movs	r3, #1
 80046fa:	4013      	ands	r3, r2
 80046fc:	d007      	beq.n	800470e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	491e      	ldr	r1, [pc, #120]	; (8004784 <I2C_ITSlaveSeqCplt+0xc8>)
 800470a:	400a      	ands	r2, r1
 800470c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2241      	movs	r2, #65	; 0x41
 8004712:	5c9b      	ldrb	r3, [r3, r2]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b29      	cmp	r3, #41	; 0x29
 8004718:	d114      	bne.n	8004744 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2241      	movs	r2, #65	; 0x41
 800471e:	2128      	movs	r1, #40	; 0x28
 8004720:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2221      	movs	r2, #33	; 0x21
 8004726:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2101      	movs	r1, #1
 800472c:	0018      	movs	r0, r3
 800472e:	f000 faf5 	bl	8004d1c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2240      	movs	r2, #64	; 0x40
 8004736:	2100      	movs	r1, #0
 8004738:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	0018      	movs	r0, r3
 800473e:	f7ff fdcd 	bl	80042dc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004742:	e019      	b.n	8004778 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2241      	movs	r2, #65	; 0x41
 8004748:	5c9b      	ldrb	r3, [r3, r2]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b2a      	cmp	r3, #42	; 0x2a
 800474e:	d113      	bne.n	8004778 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2241      	movs	r2, #65	; 0x41
 8004754:	2128      	movs	r1, #40	; 0x28
 8004756:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2222      	movs	r2, #34	; 0x22
 800475c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2102      	movs	r1, #2
 8004762:	0018      	movs	r0, r3
 8004764:	f000 fada 	bl	8004d1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2240      	movs	r2, #64	; 0x40
 800476c:	2100      	movs	r1, #0
 800476e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	0018      	movs	r0, r3
 8004774:	f7ff fdba 	bl	80042ec <HAL_I2C_SlaveRxCpltCallback>
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	b004      	add	sp, #16
 800477e:	bd80      	pop	{r7, pc}
 8004780:	ffffbfff 	.word	0xffffbfff
 8004784:	ffff7fff 	.word	0xffff7fff

08004788 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800479e:	200f      	movs	r0, #15
 80047a0:	183b      	adds	r3, r7, r0
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	2141      	movs	r1, #65	; 0x41
 80047a6:	5c52      	ldrb	r2, [r2, r1]
 80047a8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2220      	movs	r2, #32
 80047b0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047b2:	183b      	adds	r3, r7, r0
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b21      	cmp	r3, #33	; 0x21
 80047b8:	d003      	beq.n	80047c2 <I2C_ITSlaveCplt+0x3a>
 80047ba:	183b      	adds	r3, r7, r0
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b29      	cmp	r3, #41	; 0x29
 80047c0:	d109      	bne.n	80047d6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80047c2:	4a7d      	ldr	r2, [pc, #500]	; (80049b8 <I2C_ITSlaveCplt+0x230>)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	0011      	movs	r1, r2
 80047c8:	0018      	movs	r0, r3
 80047ca:	f000 faa7 	bl	8004d1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2221      	movs	r2, #33	; 0x21
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
 80047d4:	e011      	b.n	80047fa <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047d6:	220f      	movs	r2, #15
 80047d8:	18bb      	adds	r3, r7, r2
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b22      	cmp	r3, #34	; 0x22
 80047de:	d003      	beq.n	80047e8 <I2C_ITSlaveCplt+0x60>
 80047e0:	18bb      	adds	r3, r7, r2
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b2a      	cmp	r3, #42	; 0x2a
 80047e6:	d108      	bne.n	80047fa <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80047e8:	4a74      	ldr	r2, [pc, #464]	; (80049bc <I2C_ITSlaveCplt+0x234>)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	0011      	movs	r1, r2
 80047ee:	0018      	movs	r0, r3
 80047f0:	f000 fa94 	bl	8004d1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2222      	movs	r2, #34	; 0x22
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2180      	movs	r1, #128	; 0x80
 8004806:	0209      	lsls	r1, r1, #8
 8004808:	430a      	orrs	r2, r1
 800480a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	496a      	ldr	r1, [pc, #424]	; (80049c0 <I2C_ITSlaveCplt+0x238>)
 8004818:	400a      	ands	r2, r1
 800481a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	0018      	movs	r0, r3
 8004820:	f000 fa3b 	bl	8004c9a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	0b9b      	lsrs	r3, r3, #14
 8004828:	001a      	movs	r2, r3
 800482a:	2301      	movs	r3, #1
 800482c:	4013      	ands	r3, r2
 800482e:	d013      	beq.n	8004858 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4962      	ldr	r1, [pc, #392]	; (80049c4 <I2C_ITSlaveCplt+0x23c>)
 800483c:	400a      	ands	r2, r1
 800483e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	2b00      	cmp	r3, #0
 8004846:	d020      	beq.n	800488a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	b29a      	uxth	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004856:	e018      	b.n	800488a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	0bdb      	lsrs	r3, r3, #15
 800485c:	001a      	movs	r2, r3
 800485e:	2301      	movs	r3, #1
 8004860:	4013      	ands	r3, r2
 8004862:	d012      	beq.n	800488a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4956      	ldr	r1, [pc, #344]	; (80049c8 <I2C_ITSlaveCplt+0x240>)
 8004870:	400a      	ands	r2, r1
 8004872:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d006      	beq.n	800488a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	b29a      	uxth	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	089b      	lsrs	r3, r3, #2
 800488e:	001a      	movs	r2, r3
 8004890:	2301      	movs	r3, #1
 8004892:	4013      	ands	r3, r2
 8004894:	d020      	beq.n	80048d8 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2204      	movs	r2, #4
 800489a:	4393      	bics	r3, r2
 800489c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00c      	beq.n	80048d8 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d005      	beq.n	80048ee <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	2204      	movs	r2, #4
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2242      	movs	r2, #66	; 0x42
 80048f2:	2100      	movs	r1, #0
 80048f4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004900:	2b00      	cmp	r3, #0
 8004902:	d013      	beq.n	800492c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	0011      	movs	r1, r2
 800490c:	0018      	movs	r0, r3
 800490e:	f000 f8b9 	bl	8004a84 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2241      	movs	r2, #65	; 0x41
 8004916:	5c9b      	ldrb	r3, [r3, r2]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b28      	cmp	r3, #40	; 0x28
 800491c:	d147      	bne.n	80049ae <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	0011      	movs	r1, r2
 8004924:	0018      	movs	r0, r3
 8004926:	f000 f853 	bl	80049d0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800492a:	e040      	b.n	80049ae <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	4a26      	ldr	r2, [pc, #152]	; (80049cc <I2C_ITSlaveCplt+0x244>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d016      	beq.n	8004964 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0018      	movs	r0, r3
 800493a:	f7ff febf 	bl	80046bc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a22      	ldr	r2, [pc, #136]	; (80049cc <I2C_ITSlaveCplt+0x244>)
 8004942:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2241      	movs	r2, #65	; 0x41
 8004948:	2120      	movs	r1, #32
 800494a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2240      	movs	r2, #64	; 0x40
 8004956:	2100      	movs	r1, #0
 8004958:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	0018      	movs	r0, r3
 800495e:	f7ff fcdd 	bl	800431c <HAL_I2C_ListenCpltCallback>
}
 8004962:	e024      	b.n	80049ae <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2241      	movs	r2, #65	; 0x41
 8004968:	5c9b      	ldrb	r3, [r3, r2]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b22      	cmp	r3, #34	; 0x22
 800496e:	d10f      	bne.n	8004990 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2241      	movs	r2, #65	; 0x41
 8004974:	2120      	movs	r1, #32
 8004976:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2240      	movs	r2, #64	; 0x40
 8004982:	2100      	movs	r1, #0
 8004984:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	0018      	movs	r0, r3
 800498a:	f7ff fcaf 	bl	80042ec <HAL_I2C_SlaveRxCpltCallback>
}
 800498e:	e00e      	b.n	80049ae <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2241      	movs	r2, #65	; 0x41
 8004994:	2120      	movs	r1, #32
 8004996:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2240      	movs	r2, #64	; 0x40
 80049a2:	2100      	movs	r1, #0
 80049a4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0018      	movs	r0, r3
 80049aa:	f7ff fc97 	bl	80042dc <HAL_I2C_SlaveTxCpltCallback>
}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b006      	add	sp, #24
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	00008001 	.word	0x00008001
 80049bc:	00008002 	.word	0x00008002
 80049c0:	fe00e800 	.word	0xfe00e800
 80049c4:	ffffbfff 	.word	0xffffbfff
 80049c8:	ffff7fff 	.word	0xffff7fff
 80049cc:	ffff0000 	.word	0xffff0000

080049d0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a27      	ldr	r2, [pc, #156]	; (8004a7c <I2C_ITListenCplt+0xac>)
 80049de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2241      	movs	r2, #65	; 0x41
 80049ea:	2120      	movs	r1, #32
 80049ec:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2242      	movs	r2, #66	; 0x42
 80049f2:	2100      	movs	r1, #0
 80049f4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	089b      	lsrs	r3, r3, #2
 8004a00:	001a      	movs	r2, r3
 8004a02:	2301      	movs	r3, #1
 8004a04:	4013      	ands	r3, r2
 8004a06:	d022      	beq.n	8004a4e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d012      	beq.n	8004a4e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a46:	2204      	movs	r2, #4
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a4e:	4a0c      	ldr	r2, [pc, #48]	; (8004a80 <I2C_ITListenCplt+0xb0>)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	0011      	movs	r1, r2
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 f961 	bl	8004d1c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2210      	movs	r2, #16
 8004a60:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2240      	movs	r2, #64	; 0x40
 8004a66:	2100      	movs	r1, #0
 8004a68:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7ff fc55 	bl	800431c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b002      	add	sp, #8
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	ffff0000 	.word	0xffff0000
 8004a80:	00008003 	.word	0x00008003

08004a84 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a8e:	200f      	movs	r0, #15
 8004a90:	183b      	adds	r3, r7, r0
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	2141      	movs	r1, #65	; 0x41
 8004a96:	5c52      	ldrb	r2, [r2, r1]
 8004a98:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2242      	movs	r2, #66	; 0x42
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a62      	ldr	r2, [pc, #392]	; (8004c30 <I2C_ITError+0x1ac>)
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004aba:	183b      	adds	r3, r7, r0
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b28      	cmp	r3, #40	; 0x28
 8004ac0:	d007      	beq.n	8004ad2 <I2C_ITError+0x4e>
 8004ac2:	183b      	adds	r3, r7, r0
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b29      	cmp	r3, #41	; 0x29
 8004ac8:	d003      	beq.n	8004ad2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004aca:	183b      	adds	r3, r7, r0
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b2a      	cmp	r3, #42	; 0x2a
 8004ad0:	d10c      	bne.n	8004aec <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2103      	movs	r1, #3
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f000 f920 	bl	8004d1c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2241      	movs	r2, #65	; 0x41
 8004ae0:	2128      	movs	r1, #40	; 0x28
 8004ae2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a53      	ldr	r2, [pc, #332]	; (8004c34 <I2C_ITError+0x1b0>)
 8004ae8:	635a      	str	r2, [r3, #52]	; 0x34
 8004aea:	e012      	b.n	8004b12 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004aec:	4a52      	ldr	r2, [pc, #328]	; (8004c38 <I2C_ITError+0x1b4>)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0011      	movs	r1, r2
 8004af2:	0018      	movs	r0, r3
 8004af4:	f000 f912 	bl	8004d1c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2241      	movs	r2, #65	; 0x41
 8004afc:	5c9b      	ldrb	r3, [r3, r2]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b60      	cmp	r3, #96	; 0x60
 8004b02:	d003      	beq.n	8004b0c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2241      	movs	r2, #65	; 0x41
 8004b08:	2120      	movs	r1, #32
 8004b0a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b16:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d03b      	beq.n	8004b98 <I2C_ITError+0x114>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b11      	cmp	r3, #17
 8004b24:	d002      	beq.n	8004b2c <I2C_ITError+0xa8>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b21      	cmp	r3, #33	; 0x21
 8004b2a:	d135      	bne.n	8004b98 <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	2380      	movs	r3, #128	; 0x80
 8004b34:	01db      	lsls	r3, r3, #7
 8004b36:	401a      	ands	r2, r3
 8004b38:	2380      	movs	r3, #128	; 0x80
 8004b3a:	01db      	lsls	r3, r3, #7
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d107      	bne.n	8004b50 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	493c      	ldr	r1, [pc, #240]	; (8004c3c <I2C_ITError+0x1b8>)
 8004b4c:	400a      	ands	r2, r1
 8004b4e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	0018      	movs	r0, r3
 8004b56:	f7ff f8af 	bl	8003cb8 <HAL_DMA_GetState>
 8004b5a:	0003      	movs	r3, r0
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d016      	beq.n	8004b8e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	4a36      	ldr	r2, [pc, #216]	; (8004c40 <I2C_ITError+0x1bc>)
 8004b66:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2240      	movs	r2, #64	; 0x40
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	0018      	movs	r0, r3
 8004b76:	f7fe ff83 	bl	8003a80 <HAL_DMA_Abort_IT>
 8004b7a:	1e03      	subs	r3, r0, #0
 8004b7c:	d051      	beq.n	8004c22 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	0018      	movs	r0, r3
 8004b8a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b8c:	e049      	b.n	8004c22 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f000 f859 	bl	8004c48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b96:	e044      	b.n	8004c22 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d03b      	beq.n	8004c18 <I2C_ITError+0x194>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b12      	cmp	r3, #18
 8004ba4:	d002      	beq.n	8004bac <I2C_ITError+0x128>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b22      	cmp	r3, #34	; 0x22
 8004baa:	d135      	bne.n	8004c18 <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	2380      	movs	r3, #128	; 0x80
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	401a      	ands	r2, r3
 8004bb8:	2380      	movs	r3, #128	; 0x80
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d107      	bne.n	8004bd0 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	491e      	ldr	r1, [pc, #120]	; (8004c44 <I2C_ITError+0x1c0>)
 8004bcc:	400a      	ands	r2, r1
 8004bce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f7ff f86f 	bl	8003cb8 <HAL_DMA_GetState>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d016      	beq.n	8004c0e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <I2C_ITError+0x1bc>)
 8004be6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2240      	movs	r2, #64	; 0x40
 8004bec:	2100      	movs	r1, #0
 8004bee:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f7fe ff43 	bl	8003a80 <HAL_DMA_Abort_IT>
 8004bfa:	1e03      	subs	r3, r0, #0
 8004bfc:	d013      	beq.n	8004c26 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c08:	0018      	movs	r0, r3
 8004c0a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c0c:	e00b      	b.n	8004c26 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f000 f819 	bl	8004c48 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c16:	e006      	b.n	8004c26 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f000 f814 	bl	8004c48 <I2C_TreatErrorCallback>
  }
}
 8004c20:	e002      	b.n	8004c28 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	e000      	b.n	8004c28 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c26:	46c0      	nop			; (mov r8, r8)
}
 8004c28:	46c0      	nop			; (mov r8, r8)
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b004      	add	sp, #16
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	ffff0000 	.word	0xffff0000
 8004c34:	0800434d 	.word	0x0800434d
 8004c38:	00008003 	.word	0x00008003
 8004c3c:	ffffbfff 	.word	0xffffbfff
 8004c40:	08004cdf 	.word	0x08004cdf
 8004c44:	ffff7fff 	.word	0xffff7fff

08004c48 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2241      	movs	r2, #65	; 0x41
 8004c54:	5c9b      	ldrb	r3, [r3, r2]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b60      	cmp	r3, #96	; 0x60
 8004c5a:	d10f      	bne.n	8004c7c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2241      	movs	r2, #65	; 0x41
 8004c60:	2120      	movs	r1, #32
 8004c62:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2240      	movs	r2, #64	; 0x40
 8004c6e:	2100      	movs	r1, #0
 8004c70:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	0018      	movs	r0, r3
 8004c76:	f7ff fb61 	bl	800433c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c7a:	e00a      	b.n	8004c92 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2240      	movs	r2, #64	; 0x40
 8004c86:	2100      	movs	r1, #0
 8004c88:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7ff fb4d 	bl	800432c <HAL_I2C_ErrorCallback>
}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b002      	add	sp, #8
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d103      	bne.n	8004cb8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d007      	beq.n	8004cd6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	699a      	ldr	r2, [r3, #24]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	619a      	str	r2, [r3, #24]
  }
}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b002      	add	sp, #8
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d08:	2200      	movs	r2, #0
 8004d0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f7ff ff9a 	bl	8004c48 <I2C_TreatErrorCallback>
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b004      	add	sp, #16
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	000a      	movs	r2, r1
 8004d26:	1cbb      	adds	r3, r7, #2
 8004d28:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004d2e:	1cbb      	adds	r3, r7, #2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	2201      	movs	r2, #1
 8004d34:	4013      	ands	r3, r2
 8004d36:	d010      	beq.n	8004d5a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2242      	movs	r2, #66	; 0x42
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2241      	movs	r2, #65	; 0x41
 8004d44:	5c9b      	ldrb	r3, [r3, r2]
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	001a      	movs	r2, r3
 8004d4a:	2328      	movs	r3, #40	; 0x28
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b28      	cmp	r3, #40	; 0x28
 8004d50:	d003      	beq.n	8004d5a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	22b0      	movs	r2, #176	; 0xb0
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004d5a:	1cbb      	adds	r3, r7, #2
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	4013      	ands	r3, r2
 8004d62:	d010      	beq.n	8004d86 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2244      	movs	r2, #68	; 0x44
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2241      	movs	r2, #65	; 0x41
 8004d70:	5c9b      	ldrb	r3, [r3, r2]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	001a      	movs	r2, r3
 8004d76:	2328      	movs	r3, #40	; 0x28
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b28      	cmp	r3, #40	; 0x28
 8004d7c:	d003      	beq.n	8004d86 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	22b0      	movs	r2, #176	; 0xb0
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d86:	1cbb      	adds	r3, r7, #2
 8004d88:	2200      	movs	r2, #0
 8004d8a:	5e9b      	ldrsh	r3, [r3, r2]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	da03      	bge.n	8004d98 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	22b8      	movs	r2, #184	; 0xb8
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004d98:	1cbb      	adds	r3, r7, #2
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	2b10      	cmp	r3, #16
 8004d9e:	d103      	bne.n	8004da8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2290      	movs	r2, #144	; 0x90
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004da8:	1cbb      	adds	r3, r7, #2
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d103      	bne.n	8004db8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004db8:	1cbb      	adds	r3, r7, #2
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d103      	bne.n	8004dc8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2240      	movs	r2, #64	; 0x40
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	43d9      	mvns	r1, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	400a      	ands	r2, r1
 8004dd8:	601a      	str	r2, [r3, #0]
}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b004      	add	sp, #16
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2241      	movs	r2, #65	; 0x41
 8004df2:	5c9b      	ldrb	r3, [r3, r2]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	d138      	bne.n	8004e6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2240      	movs	r2, #64	; 0x40
 8004dfe:	5c9b      	ldrb	r3, [r3, r2]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e032      	b.n	8004e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2240      	movs	r2, #64	; 0x40
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2241      	movs	r2, #65	; 0x41
 8004e14:	2124      	movs	r1, #36	; 0x24
 8004e16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2101      	movs	r1, #1
 8004e24:	438a      	bics	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4911      	ldr	r1, [pc, #68]	; (8004e78 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004e34:	400a      	ands	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6819      	ldr	r1, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2101      	movs	r1, #1
 8004e54:	430a      	orrs	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2241      	movs	r2, #65	; 0x41
 8004e5c:	2120      	movs	r1, #32
 8004e5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2240      	movs	r2, #64	; 0x40
 8004e64:	2100      	movs	r1, #0
 8004e66:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e000      	b.n	8004e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e6c:	2302      	movs	r3, #2
  }
}
 8004e6e:	0018      	movs	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b002      	add	sp, #8
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	ffffefff 	.word	0xffffefff

08004e7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2241      	movs	r2, #65	; 0x41
 8004e8a:	5c9b      	ldrb	r3, [r3, r2]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d139      	bne.n	8004f06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2240      	movs	r2, #64	; 0x40
 8004e96:	5c9b      	ldrb	r3, [r3, r2]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e033      	b.n	8004f08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2240      	movs	r2, #64	; 0x40
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2241      	movs	r2, #65	; 0x41
 8004eac:	2124      	movs	r1, #36	; 0x24
 8004eae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2101      	movs	r1, #1
 8004ebc:	438a      	bics	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4a11      	ldr	r2, [pc, #68]	; (8004f10 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2101      	movs	r1, #1
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2241      	movs	r2, #65	; 0x41
 8004ef6:	2120      	movs	r1, #32
 8004ef8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2240      	movs	r2, #64	; 0x40
 8004efe:	2100      	movs	r1, #0
 8004f00:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	e000      	b.n	8004f08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f06:	2302      	movs	r3, #2
  }
}
 8004f08:	0018      	movs	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b004      	add	sp, #16
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	fffff0ff 	.word	0xfffff0ff

08004f14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e0e5      	b.n	80050f2 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2235      	movs	r2, #53	; 0x35
 8004f2a:	5c9b      	ldrb	r3, [r3, r2]
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d107      	bne.n	8004f42 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2234      	movs	r2, #52	; 0x34
 8004f36:	2100      	movs	r1, #0
 8004f38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f7fd fcc7 	bl	80028d0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2235      	movs	r2, #53	; 0x35
 8004f46:	2102      	movs	r1, #2
 8004f48:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69da      	ldr	r2, [r3, #28]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4969      	ldr	r1, [pc, #420]	; (80050fc <HAL_I2S_Init+0x1e8>)
 8004f56:	400a      	ands	r2, r1
 8004f58:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d100      	bne.n	8004f6c <HAL_I2S_Init+0x58>
 8004f6a:	e076      	b.n	800505a <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004f74:	2310      	movs	r3, #16
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	e001      	b.n	8004f7e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004f7a:	2320      	movs	r3, #32
 8004f7c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d802      	bhi.n	8004f8c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	0018      	movs	r0, r3
 8004f92:	f001 f865 	bl	8006060 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f96:	0003      	movs	r3, r0
 8004f98:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d131      	bne.n	800500a <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d016      	beq.n	8004fdc <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	0019      	movs	r1, r3
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f7fb f8a5 	bl	8000104 <__udivsi3>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	001a      	movs	r2, r3
 8004fbe:	0013      	movs	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	189b      	adds	r3, r3, r2
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	001a      	movs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	0019      	movs	r1, r3
 8004fce:	0010      	movs	r0, r2
 8004fd0:	f7fb f898 	bl	8000104 <__udivsi3>
 8004fd4:	0003      	movs	r3, r0
 8004fd6:	3305      	adds	r3, #5
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	e02a      	b.n	8005032 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	0019      	movs	r1, r3
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f7fb f88e 	bl	8000104 <__udivsi3>
 8004fe8:	0003      	movs	r3, r0
 8004fea:	001a      	movs	r2, r3
 8004fec:	0013      	movs	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	189b      	adds	r3, r3, r2
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	001a      	movs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	0019      	movs	r1, r3
 8004ffc:	0010      	movs	r0, r2
 8004ffe:	f7fb f881 	bl	8000104 <__udivsi3>
 8005002:	0003      	movs	r3, r0
 8005004:	3305      	adds	r3, #5
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	e013      	b.n	8005032 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800500a:	6979      	ldr	r1, [r7, #20]
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f7fb f879 	bl	8000104 <__udivsi3>
 8005012:	0003      	movs	r3, r0
 8005014:	001a      	movs	r2, r3
 8005016:	0013      	movs	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	189b      	adds	r3, r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	001a      	movs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	0019      	movs	r1, r3
 8005026:	0010      	movs	r0, r2
 8005028:	f7fb f86c 	bl	8000104 <__udivsi3>
 800502c:	0003      	movs	r3, r0
 800502e:	3305      	adds	r3, #5
 8005030:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	210a      	movs	r1, #10
 8005036:	0018      	movs	r0, r3
 8005038:	f7fb f864 	bl	8000104 <__udivsi3>
 800503c:	0003      	movs	r3, r0
 800503e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2201      	movs	r2, #1
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	021b      	lsls	r3, r3, #8
 8005056:	61bb      	str	r3, [r7, #24]
 8005058:	e003      	b.n	8005062 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800505a:	2302      	movs	r3, #2
 800505c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800505e:	2300      	movs	r3, #0
 8005060:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d902      	bls.n	800506e <HAL_I2S_Init+0x15a>
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	2bff      	cmp	r3, #255	; 0xff
 800506c:	d907      	bls.n	800507e <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	2210      	movs	r2, #16
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e039      	b.n	80050f2 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	431a      	orrs	r2, r3
 8005086:	0011      	movs	r1, r2
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	430a      	orrs	r2, r1
 8005090:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	4a18      	ldr	r2, [pc, #96]	; (80050fc <HAL_I2S_Init+0x1e8>)
 800509a:	401a      	ands	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6859      	ldr	r1, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	4319      	orrs	r1, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	4319      	orrs	r1, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	430b      	orrs	r3, r1
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2180      	movs	r1, #128	; 0x80
 80050ba:	0109      	lsls	r1, r1, #4
 80050bc:	430a      	orrs	r2, r1
 80050be:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b30      	cmp	r3, #48	; 0x30
 80050c6:	d003      	beq.n	80050d0 <HAL_I2S_Init+0x1bc>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2bb0      	cmp	r3, #176	; 0xb0
 80050ce:	d108      	bne.n	80050e2 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	69da      	ldr	r2, [r3, #28]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2180      	movs	r1, #128	; 0x80
 80050dc:	0149      	lsls	r1, r1, #5
 80050de:	430a      	orrs	r2, r1
 80050e0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2235      	movs	r2, #53	; 0x35
 80050ec:	2101      	movs	r1, #1
 80050ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	0018      	movs	r0, r3
 80050f4:	46bd      	mov	sp, r7
 80050f6:	b008      	add	sp, #32
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	fffff040 	.word	0xfffff040

08005100 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	099b      	lsrs	r3, r3, #6
 800511c:	001a      	movs	r2, r3
 800511e:	2301      	movs	r3, #1
 8005120:	4013      	ands	r3, r2
 8005122:	d10e      	bne.n	8005142 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2201      	movs	r2, #1
 8005128:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 800512a:	d00a      	beq.n	8005142 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	099b      	lsrs	r3, r3, #6
 8005130:	001a      	movs	r2, r3
 8005132:	2301      	movs	r3, #1
 8005134:	4013      	ands	r3, r2
 8005136:	d004      	beq.n	8005142 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	0018      	movs	r0, r3
 800513c:	f000 f892 	bl	8005264 <I2S_Receive_IT>
    return;
 8005140:	e046      	b.n	80051d0 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	085b      	lsrs	r3, r3, #1
 8005146:	001a      	movs	r2, r3
 8005148:	2301      	movs	r3, #1
 800514a:	4013      	ands	r3, r2
 800514c:	d00a      	beq.n	8005164 <HAL_I2S_IRQHandler+0x64>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	09db      	lsrs	r3, r3, #7
 8005152:	001a      	movs	r2, r3
 8005154:	2301      	movs	r3, #1
 8005156:	4013      	ands	r3, r2
 8005158:	d004      	beq.n	8005164 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	0018      	movs	r0, r3
 800515e:	f000 f852 	bl	8005206 <I2S_Transmit_IT>
    return;
 8005162:	e035      	b.n	80051d0 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	001a      	movs	r2, r3
 800516a:	2301      	movs	r3, #1
 800516c:	4013      	ands	r3, r2
 800516e:	d02f      	beq.n	80051d0 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	099b      	lsrs	r3, r3, #6
 8005174:	001a      	movs	r2, r3
 8005176:	2301      	movs	r3, #1
 8005178:	4013      	ands	r3, r2
 800517a:	d00d      	beq.n	8005198 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2160      	movs	r1, #96	; 0x60
 8005188:	438a      	bics	r2, r1
 800518a:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	2202      	movs	r2, #2
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	08db      	lsrs	r3, r3, #3
 800519c:	001a      	movs	r2, r3
 800519e:	2301      	movs	r3, #1
 80051a0:	4013      	ands	r3, r2
 80051a2:	d00d      	beq.n	80051c0 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	21a0      	movs	r1, #160	; 0xa0
 80051b0:	438a      	bics	r2, r1
 80051b2:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	2204      	movs	r2, #4
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2235      	movs	r2, #53	; 0x35
 80051c4:	2101      	movs	r1, #1
 80051c6:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	0018      	movs	r0, r3
 80051cc:	f000 f813 	bl	80051f6 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80051d0:	46bd      	mov	sp, r7
 80051d2:	b004      	add	sp, #16
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	46bd      	mov	sp, r7
 80051e2:	b002      	add	sp, #8
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b002      	add	sp, #8
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b082      	sub	sp, #8
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	46bd      	mov	sp, r7
 8005202:	b002      	add	sp, #8
 8005204:	bd80      	pop	{r7, pc}

08005206 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	881a      	ldrh	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	1c9a      	adds	r2, r3, #2
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10f      	bne.n	800525c <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	21a0      	movs	r1, #160	; 0xa0
 8005248:	438a      	bics	r2, r1
 800524a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2235      	movs	r2, #53	; 0x35
 8005250:	2101      	movs	r1, #1
 8005252:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	0018      	movs	r0, r3
 8005258:	f7ff ffbd 	bl	80051d6 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800525c:	46c0      	nop			; (mov r8, r8)
 800525e:	46bd      	mov	sp, r7
 8005260:	b002      	add	sp, #8
 8005262:	bd80      	pop	{r7, pc}

08005264 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	b292      	uxth	r2, r2
 8005278:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	1c9a      	adds	r2, r3, #2
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10f      	bne.n	80052bc <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2160      	movs	r1, #96	; 0x60
 80052a8:	438a      	bics	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2235      	movs	r2, #53	; 0x35
 80052b0:	2101      	movs	r1, #1
 80052b2:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	0018      	movs	r0, r3
 80052b8:	f7ff ff95 	bl	80051e6 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	46bd      	mov	sp, r7
 80052c0:	b002      	add	sp, #8
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80052cc:	4b19      	ldr	r3, [pc, #100]	; (8005334 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a19      	ldr	r2, [pc, #100]	; (8005338 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	0019      	movs	r1, r3
 80052d6:	4b17      	ldr	r3, [pc, #92]	; (8005334 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	430a      	orrs	r2, r1
 80052dc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	2380      	movs	r3, #128	; 0x80
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d11f      	bne.n	8005328 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80052e8:	4b14      	ldr	r3, [pc, #80]	; (800533c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	0013      	movs	r3, r2
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	189b      	adds	r3, r3, r2
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	4912      	ldr	r1, [pc, #72]	; (8005340 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80052f6:	0018      	movs	r0, r3
 80052f8:	f7fa ff04 	bl	8000104 <__udivsi3>
 80052fc:	0003      	movs	r3, r0
 80052fe:	3301      	adds	r3, #1
 8005300:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005302:	e008      	b.n	8005316 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	3b01      	subs	r3, #1
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	e001      	b.n	8005316 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e009      	b.n	800532a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005318:	695a      	ldr	r2, [r3, #20]
 800531a:	2380      	movs	r3, #128	; 0x80
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	401a      	ands	r2, r3
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	429a      	cmp	r2, r3
 8005326:	d0ed      	beq.n	8005304 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	0018      	movs	r0, r3
 800532c:	46bd      	mov	sp, r7
 800532e:	b004      	add	sp, #16
 8005330:	bd80      	pop	{r7, pc}
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	40007000 	.word	0x40007000
 8005338:	fffff9ff 	.word	0xfffff9ff
 800533c:	20003168 	.word	0x20003168
 8005340:	000f4240 	.word	0x000f4240

08005344 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <LL_RCC_GetAPB1Prescaler+0x14>)
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	23e0      	movs	r3, #224	; 0xe0
 800534e:	01db      	lsls	r3, r3, #7
 8005350:	4013      	ands	r3, r2
}
 8005352:	0018      	movs	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40021000 	.word	0x40021000

0800535c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e304      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2201      	movs	r2, #1
 8005374:	4013      	ands	r3, r2
 8005376:	d100      	bne.n	800537a <HAL_RCC_OscConfig+0x1e>
 8005378:	e07c      	b.n	8005474 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800537a:	4bc3      	ldr	r3, [pc, #780]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2238      	movs	r2, #56	; 0x38
 8005380:	4013      	ands	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005384:	4bc0      	ldr	r3, [pc, #768]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	2203      	movs	r2, #3
 800538a:	4013      	ands	r3, r2
 800538c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	2b10      	cmp	r3, #16
 8005392:	d102      	bne.n	800539a <HAL_RCC_OscConfig+0x3e>
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2b03      	cmp	r3, #3
 8005398:	d002      	beq.n	80053a0 <HAL_RCC_OscConfig+0x44>
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d10b      	bne.n	80053b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a0:	4bb9      	ldr	r3, [pc, #740]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	2380      	movs	r3, #128	; 0x80
 80053a6:	029b      	lsls	r3, r3, #10
 80053a8:	4013      	ands	r3, r2
 80053aa:	d062      	beq.n	8005472 <HAL_RCC_OscConfig+0x116>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d15e      	bne.n	8005472 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e2df      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	2380      	movs	r3, #128	; 0x80
 80053be:	025b      	lsls	r3, r3, #9
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d107      	bne.n	80053d4 <HAL_RCC_OscConfig+0x78>
 80053c4:	4bb0      	ldr	r3, [pc, #704]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	4baf      	ldr	r3, [pc, #700]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80053ca:	2180      	movs	r1, #128	; 0x80
 80053cc:	0249      	lsls	r1, r1, #9
 80053ce:	430a      	orrs	r2, r1
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	e020      	b.n	8005416 <HAL_RCC_OscConfig+0xba>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	23a0      	movs	r3, #160	; 0xa0
 80053da:	02db      	lsls	r3, r3, #11
 80053dc:	429a      	cmp	r2, r3
 80053de:	d10e      	bne.n	80053fe <HAL_RCC_OscConfig+0xa2>
 80053e0:	4ba9      	ldr	r3, [pc, #676]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4ba8      	ldr	r3, [pc, #672]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80053e6:	2180      	movs	r1, #128	; 0x80
 80053e8:	02c9      	lsls	r1, r1, #11
 80053ea:	430a      	orrs	r2, r1
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	4ba6      	ldr	r3, [pc, #664]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4ba5      	ldr	r3, [pc, #660]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80053f4:	2180      	movs	r1, #128	; 0x80
 80053f6:	0249      	lsls	r1, r1, #9
 80053f8:	430a      	orrs	r2, r1
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	e00b      	b.n	8005416 <HAL_RCC_OscConfig+0xba>
 80053fe:	4ba2      	ldr	r3, [pc, #648]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	4ba1      	ldr	r3, [pc, #644]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005404:	49a1      	ldr	r1, [pc, #644]	; (800568c <HAL_RCC_OscConfig+0x330>)
 8005406:	400a      	ands	r2, r1
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	4b9f      	ldr	r3, [pc, #636]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	4b9e      	ldr	r3, [pc, #632]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005410:	499f      	ldr	r1, [pc, #636]	; (8005690 <HAL_RCC_OscConfig+0x334>)
 8005412:	400a      	ands	r2, r1
 8005414:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d014      	beq.n	8005448 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541e:	f7fd fe9d 	bl	800315c <HAL_GetTick>
 8005422:	0003      	movs	r3, r0
 8005424:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005428:	f7fd fe98 	bl	800315c <HAL_GetTick>
 800542c:	0002      	movs	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b64      	cmp	r3, #100	; 0x64
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e29e      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800543a:	4b93      	ldr	r3, [pc, #588]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	029b      	lsls	r3, r3, #10
 8005442:	4013      	ands	r3, r2
 8005444:	d0f0      	beq.n	8005428 <HAL_RCC_OscConfig+0xcc>
 8005446:	e015      	b.n	8005474 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005448:	f7fd fe88 	bl	800315c <HAL_GetTick>
 800544c:	0003      	movs	r3, r0
 800544e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005452:	f7fd fe83 	bl	800315c <HAL_GetTick>
 8005456:	0002      	movs	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b64      	cmp	r3, #100	; 0x64
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e289      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005464:	4b88      	ldr	r3, [pc, #544]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	029b      	lsls	r3, r3, #10
 800546c:	4013      	ands	r3, r2
 800546e:	d1f0      	bne.n	8005452 <HAL_RCC_OscConfig+0xf6>
 8005470:	e000      	b.n	8005474 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005472:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2202      	movs	r2, #2
 800547a:	4013      	ands	r3, r2
 800547c:	d100      	bne.n	8005480 <HAL_RCC_OscConfig+0x124>
 800547e:	e099      	b.n	80055b4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005480:	4b81      	ldr	r3, [pc, #516]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	2238      	movs	r2, #56	; 0x38
 8005486:	4013      	ands	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800548a:	4b7f      	ldr	r3, [pc, #508]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	2203      	movs	r2, #3
 8005490:	4013      	ands	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2b10      	cmp	r3, #16
 8005498:	d102      	bne.n	80054a0 <HAL_RCC_OscConfig+0x144>
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d002      	beq.n	80054a6 <HAL_RCC_OscConfig+0x14a>
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d135      	bne.n	8005512 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054a6:	4b78      	ldr	r3, [pc, #480]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	2380      	movs	r3, #128	; 0x80
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	4013      	ands	r3, r2
 80054b0:	d005      	beq.n	80054be <HAL_RCC_OscConfig+0x162>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e25c      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054be:	4b72      	ldr	r3, [pc, #456]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	4a74      	ldr	r2, [pc, #464]	; (8005694 <HAL_RCC_OscConfig+0x338>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	0019      	movs	r1, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	021a      	lsls	r2, r3, #8
 80054ce:	4b6e      	ldr	r3, [pc, #440]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80054d0:	430a      	orrs	r2, r1
 80054d2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d112      	bne.n	8005500 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80054da:	4b6b      	ldr	r3, [pc, #428]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a6e      	ldr	r2, [pc, #440]	; (8005698 <HAL_RCC_OscConfig+0x33c>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	0019      	movs	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	4b67      	ldr	r3, [pc, #412]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80054ea:	430a      	orrs	r2, r1
 80054ec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80054ee:	4b66      	ldr	r3, [pc, #408]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	0adb      	lsrs	r3, r3, #11
 80054f4:	2207      	movs	r2, #7
 80054f6:	4013      	ands	r3, r2
 80054f8:	4a68      	ldr	r2, [pc, #416]	; (800569c <HAL_RCC_OscConfig+0x340>)
 80054fa:	40da      	lsrs	r2, r3
 80054fc:	4b68      	ldr	r3, [pc, #416]	; (80056a0 <HAL_RCC_OscConfig+0x344>)
 80054fe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005500:	4b68      	ldr	r3, [pc, #416]	; (80056a4 <HAL_RCC_OscConfig+0x348>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	0018      	movs	r0, r3
 8005506:	f7fd fdcd 	bl	80030a4 <HAL_InitTick>
 800550a:	1e03      	subs	r3, r0, #0
 800550c:	d051      	beq.n	80055b2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e232      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d030      	beq.n	800557c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800551a:	4b5b      	ldr	r3, [pc, #364]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a5e      	ldr	r2, [pc, #376]	; (8005698 <HAL_RCC_OscConfig+0x33c>)
 8005520:	4013      	ands	r3, r2
 8005522:	0019      	movs	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	4b57      	ldr	r3, [pc, #348]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 800552a:	430a      	orrs	r2, r1
 800552c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800552e:	4b56      	ldr	r3, [pc, #344]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b55      	ldr	r3, [pc, #340]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005534:	2180      	movs	r1, #128	; 0x80
 8005536:	0049      	lsls	r1, r1, #1
 8005538:	430a      	orrs	r2, r1
 800553a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553c:	f7fd fe0e 	bl	800315c <HAL_GetTick>
 8005540:	0003      	movs	r3, r0
 8005542:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005546:	f7fd fe09 	bl	800315c <HAL_GetTick>
 800554a:	0002      	movs	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e20f      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005558:	4b4b      	ldr	r3, [pc, #300]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	2380      	movs	r3, #128	; 0x80
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4013      	ands	r3, r2
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005564:	4b48      	ldr	r3, [pc, #288]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4a4a      	ldr	r2, [pc, #296]	; (8005694 <HAL_RCC_OscConfig+0x338>)
 800556a:	4013      	ands	r3, r2
 800556c:	0019      	movs	r1, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	021a      	lsls	r2, r3, #8
 8005574:	4b44      	ldr	r3, [pc, #272]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
 800557a:	e01b      	b.n	80055b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800557c:	4b42      	ldr	r3, [pc, #264]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	4b41      	ldr	r3, [pc, #260]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005582:	4949      	ldr	r1, [pc, #292]	; (80056a8 <HAL_RCC_OscConfig+0x34c>)
 8005584:	400a      	ands	r2, r1
 8005586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005588:	f7fd fde8 	bl	800315c <HAL_GetTick>
 800558c:	0003      	movs	r3, r0
 800558e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005590:	e008      	b.n	80055a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005592:	f7fd fde3 	bl	800315c <HAL_GetTick>
 8005596:	0002      	movs	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d901      	bls.n	80055a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e1e9      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055a4:	4b38      	ldr	r3, [pc, #224]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	2380      	movs	r3, #128	; 0x80
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4013      	ands	r3, r2
 80055ae:	d1f0      	bne.n	8005592 <HAL_RCC_OscConfig+0x236>
 80055b0:	e000      	b.n	80055b4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055b2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2208      	movs	r2, #8
 80055ba:	4013      	ands	r3, r2
 80055bc:	d047      	beq.n	800564e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80055be:	4b32      	ldr	r3, [pc, #200]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	2238      	movs	r2, #56	; 0x38
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b18      	cmp	r3, #24
 80055c8:	d10a      	bne.n	80055e0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80055ca:	4b2f      	ldr	r3, [pc, #188]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80055cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ce:	2202      	movs	r2, #2
 80055d0:	4013      	ands	r3, r2
 80055d2:	d03c      	beq.n	800564e <HAL_RCC_OscConfig+0x2f2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d138      	bne.n	800564e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e1cb      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d019      	beq.n	800561c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80055e8:	4b27      	ldr	r3, [pc, #156]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80055ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80055ec:	4b26      	ldr	r3, [pc, #152]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 80055ee:	2101      	movs	r1, #1
 80055f0:	430a      	orrs	r2, r1
 80055f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fd fdb2 	bl	800315c <HAL_GetTick>
 80055f8:	0003      	movs	r3, r0
 80055fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055fe:	f7fd fdad 	bl	800315c <HAL_GetTick>
 8005602:	0002      	movs	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e1b3      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005610:	4b1d      	ldr	r3, [pc, #116]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005614:	2202      	movs	r2, #2
 8005616:	4013      	ands	r3, r2
 8005618:	d0f1      	beq.n	80055fe <HAL_RCC_OscConfig+0x2a2>
 800561a:	e018      	b.n	800564e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800561c:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 800561e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005620:	4b19      	ldr	r3, [pc, #100]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005622:	2101      	movs	r1, #1
 8005624:	438a      	bics	r2, r1
 8005626:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fd fd98 	bl	800315c <HAL_GetTick>
 800562c:	0003      	movs	r3, r0
 800562e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005632:	f7fd fd93 	bl	800315c <HAL_GetTick>
 8005636:	0002      	movs	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e199      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005644:	4b10      	ldr	r3, [pc, #64]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005648:	2202      	movs	r2, #2
 800564a:	4013      	ands	r3, r2
 800564c:	d1f1      	bne.n	8005632 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2204      	movs	r2, #4
 8005654:	4013      	ands	r3, r2
 8005656:	d100      	bne.n	800565a <HAL_RCC_OscConfig+0x2fe>
 8005658:	e0c6      	b.n	80057e8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800565a:	231f      	movs	r3, #31
 800565c:	18fb      	adds	r3, r7, r3
 800565e:	2200      	movs	r2, #0
 8005660:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005662:	4b09      	ldr	r3, [pc, #36]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2238      	movs	r2, #56	; 0x38
 8005668:	4013      	ands	r3, r2
 800566a:	2b20      	cmp	r3, #32
 800566c:	d11e      	bne.n	80056ac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800566e:	4b06      	ldr	r3, [pc, #24]	; (8005688 <HAL_RCC_OscConfig+0x32c>)
 8005670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005672:	2202      	movs	r2, #2
 8005674:	4013      	ands	r3, r2
 8005676:	d100      	bne.n	800567a <HAL_RCC_OscConfig+0x31e>
 8005678:	e0b6      	b.n	80057e8 <HAL_RCC_OscConfig+0x48c>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d000      	beq.n	8005684 <HAL_RCC_OscConfig+0x328>
 8005682:	e0b1      	b.n	80057e8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e177      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
 8005688:	40021000 	.word	0x40021000
 800568c:	fffeffff 	.word	0xfffeffff
 8005690:	fffbffff 	.word	0xfffbffff
 8005694:	ffff80ff 	.word	0xffff80ff
 8005698:	ffffc7ff 	.word	0xffffc7ff
 800569c:	00f42400 	.word	0x00f42400
 80056a0:	20003168 	.word	0x20003168
 80056a4:	2000316c 	.word	0x2000316c
 80056a8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056ac:	4bb4      	ldr	r3, [pc, #720]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80056ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056b0:	2380      	movs	r3, #128	; 0x80
 80056b2:	055b      	lsls	r3, r3, #21
 80056b4:	4013      	ands	r3, r2
 80056b6:	d101      	bne.n	80056bc <HAL_RCC_OscConfig+0x360>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <HAL_RCC_OscConfig+0x362>
 80056bc:	2300      	movs	r3, #0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d011      	beq.n	80056e6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80056c2:	4baf      	ldr	r3, [pc, #700]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80056c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c6:	4bae      	ldr	r3, [pc, #696]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80056c8:	2180      	movs	r1, #128	; 0x80
 80056ca:	0549      	lsls	r1, r1, #21
 80056cc:	430a      	orrs	r2, r1
 80056ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80056d0:	4bab      	ldr	r3, [pc, #684]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80056d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d4:	2380      	movs	r3, #128	; 0x80
 80056d6:	055b      	lsls	r3, r3, #21
 80056d8:	4013      	ands	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80056de:	231f      	movs	r3, #31
 80056e0:	18fb      	adds	r3, r7, r3
 80056e2:	2201      	movs	r2, #1
 80056e4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056e6:	4ba7      	ldr	r3, [pc, #668]	; (8005984 <HAL_RCC_OscConfig+0x628>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	2380      	movs	r3, #128	; 0x80
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	4013      	ands	r3, r2
 80056f0:	d11a      	bne.n	8005728 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056f2:	4ba4      	ldr	r3, [pc, #656]	; (8005984 <HAL_RCC_OscConfig+0x628>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	4ba3      	ldr	r3, [pc, #652]	; (8005984 <HAL_RCC_OscConfig+0x628>)
 80056f8:	2180      	movs	r1, #128	; 0x80
 80056fa:	0049      	lsls	r1, r1, #1
 80056fc:	430a      	orrs	r2, r1
 80056fe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005700:	f7fd fd2c 	bl	800315c <HAL_GetTick>
 8005704:	0003      	movs	r3, r0
 8005706:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005708:	e008      	b.n	800571c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800570a:	f7fd fd27 	bl	800315c <HAL_GetTick>
 800570e:	0002      	movs	r2, r0
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e12d      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800571c:	4b99      	ldr	r3, [pc, #612]	; (8005984 <HAL_RCC_OscConfig+0x628>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	2380      	movs	r3, #128	; 0x80
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	4013      	ands	r3, r2
 8005726:	d0f0      	beq.n	800570a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d106      	bne.n	800573e <HAL_RCC_OscConfig+0x3e2>
 8005730:	4b93      	ldr	r3, [pc, #588]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 8005732:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005734:	4b92      	ldr	r3, [pc, #584]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 8005736:	2101      	movs	r1, #1
 8005738:	430a      	orrs	r2, r1
 800573a:	65da      	str	r2, [r3, #92]	; 0x5c
 800573c:	e01c      	b.n	8005778 <HAL_RCC_OscConfig+0x41c>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	2b05      	cmp	r3, #5
 8005744:	d10c      	bne.n	8005760 <HAL_RCC_OscConfig+0x404>
 8005746:	4b8e      	ldr	r3, [pc, #568]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 8005748:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800574a:	4b8d      	ldr	r3, [pc, #564]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 800574c:	2104      	movs	r1, #4
 800574e:	430a      	orrs	r2, r1
 8005750:	65da      	str	r2, [r3, #92]	; 0x5c
 8005752:	4b8b      	ldr	r3, [pc, #556]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 8005754:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005756:	4b8a      	ldr	r3, [pc, #552]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 8005758:	2101      	movs	r1, #1
 800575a:	430a      	orrs	r2, r1
 800575c:	65da      	str	r2, [r3, #92]	; 0x5c
 800575e:	e00b      	b.n	8005778 <HAL_RCC_OscConfig+0x41c>
 8005760:	4b87      	ldr	r3, [pc, #540]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 8005762:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005764:	4b86      	ldr	r3, [pc, #536]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 8005766:	2101      	movs	r1, #1
 8005768:	438a      	bics	r2, r1
 800576a:	65da      	str	r2, [r3, #92]	; 0x5c
 800576c:	4b84      	ldr	r3, [pc, #528]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 800576e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005770:	4b83      	ldr	r3, [pc, #524]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 8005772:	2104      	movs	r1, #4
 8005774:	438a      	bics	r2, r1
 8005776:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d014      	beq.n	80057aa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005780:	f7fd fcec 	bl	800315c <HAL_GetTick>
 8005784:	0003      	movs	r3, r0
 8005786:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005788:	e009      	b.n	800579e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800578a:	f7fd fce7 	bl	800315c <HAL_GetTick>
 800578e:	0002      	movs	r2, r0
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	4a7c      	ldr	r2, [pc, #496]	; (8005988 <HAL_RCC_OscConfig+0x62c>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e0ec      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800579e:	4b78      	ldr	r3, [pc, #480]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80057a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a2:	2202      	movs	r2, #2
 80057a4:	4013      	ands	r3, r2
 80057a6:	d0f0      	beq.n	800578a <HAL_RCC_OscConfig+0x42e>
 80057a8:	e013      	b.n	80057d2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057aa:	f7fd fcd7 	bl	800315c <HAL_GetTick>
 80057ae:	0003      	movs	r3, r0
 80057b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057b2:	e009      	b.n	80057c8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b4:	f7fd fcd2 	bl	800315c <HAL_GetTick>
 80057b8:	0002      	movs	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	4a72      	ldr	r2, [pc, #456]	; (8005988 <HAL_RCC_OscConfig+0x62c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e0d7      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057c8:	4b6d      	ldr	r3, [pc, #436]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80057ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057cc:	2202      	movs	r2, #2
 80057ce:	4013      	ands	r3, r2
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80057d2:	231f      	movs	r3, #31
 80057d4:	18fb      	adds	r3, r7, r3
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d105      	bne.n	80057e8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80057dc:	4b68      	ldr	r3, [pc, #416]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80057de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e0:	4b67      	ldr	r3, [pc, #412]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80057e2:	496a      	ldr	r1, [pc, #424]	; (800598c <HAL_RCC_OscConfig+0x630>)
 80057e4:	400a      	ands	r2, r1
 80057e6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d100      	bne.n	80057f2 <HAL_RCC_OscConfig+0x496>
 80057f0:	e0c1      	b.n	8005976 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057f2:	4b63      	ldr	r3, [pc, #396]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	2238      	movs	r2, #56	; 0x38
 80057f8:	4013      	ands	r3, r2
 80057fa:	2b10      	cmp	r3, #16
 80057fc:	d100      	bne.n	8005800 <HAL_RCC_OscConfig+0x4a4>
 80057fe:	e081      	b.n	8005904 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	2b02      	cmp	r3, #2
 8005806:	d156      	bne.n	80058b6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005808:	4b5d      	ldr	r3, [pc, #372]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	4b5c      	ldr	r3, [pc, #368]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 800580e:	4960      	ldr	r1, [pc, #384]	; (8005990 <HAL_RCC_OscConfig+0x634>)
 8005810:	400a      	ands	r2, r1
 8005812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005814:	f7fd fca2 	bl	800315c <HAL_GetTick>
 8005818:	0003      	movs	r3, r0
 800581a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800581c:	e008      	b.n	8005830 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800581e:	f7fd fc9d 	bl	800315c <HAL_GetTick>
 8005822:	0002      	movs	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e0a3      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005830:	4b53      	ldr	r3, [pc, #332]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	2380      	movs	r3, #128	; 0x80
 8005836:	049b      	lsls	r3, r3, #18
 8005838:	4013      	ands	r3, r2
 800583a:	d1f0      	bne.n	800581e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800583c:	4b50      	ldr	r3, [pc, #320]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4a54      	ldr	r2, [pc, #336]	; (8005994 <HAL_RCC_OscConfig+0x638>)
 8005842:	4013      	ands	r3, r2
 8005844:	0019      	movs	r1, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1a      	ldr	r2, [r3, #32]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005868:	431a      	orrs	r2, r3
 800586a:	4b45      	ldr	r3, [pc, #276]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 800586c:	430a      	orrs	r2, r1
 800586e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005870:	4b43      	ldr	r3, [pc, #268]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	4b42      	ldr	r3, [pc, #264]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 8005876:	2180      	movs	r1, #128	; 0x80
 8005878:	0449      	lsls	r1, r1, #17
 800587a:	430a      	orrs	r2, r1
 800587c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800587e:	4b40      	ldr	r3, [pc, #256]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	4b3f      	ldr	r3, [pc, #252]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 8005884:	2180      	movs	r1, #128	; 0x80
 8005886:	0549      	lsls	r1, r1, #21
 8005888:	430a      	orrs	r2, r1
 800588a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588c:	f7fd fc66 	bl	800315c <HAL_GetTick>
 8005890:	0003      	movs	r3, r0
 8005892:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005894:	e008      	b.n	80058a8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005896:	f7fd fc61 	bl	800315c <HAL_GetTick>
 800589a:	0002      	movs	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e067      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058a8:	4b35      	ldr	r3, [pc, #212]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	2380      	movs	r3, #128	; 0x80
 80058ae:	049b      	lsls	r3, r3, #18
 80058b0:	4013      	ands	r3, r2
 80058b2:	d0f0      	beq.n	8005896 <HAL_RCC_OscConfig+0x53a>
 80058b4:	e05f      	b.n	8005976 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b6:	4b32      	ldr	r3, [pc, #200]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4b31      	ldr	r3, [pc, #196]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80058bc:	4934      	ldr	r1, [pc, #208]	; (8005990 <HAL_RCC_OscConfig+0x634>)
 80058be:	400a      	ands	r2, r1
 80058c0:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80058c2:	4b2f      	ldr	r3, [pc, #188]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	4b2e      	ldr	r3, [pc, #184]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80058c8:	2103      	movs	r1, #3
 80058ca:	438a      	bics	r2, r1
 80058cc:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80058ce:	4b2c      	ldr	r3, [pc, #176]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	4b2b      	ldr	r3, [pc, #172]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80058d4:	4930      	ldr	r1, [pc, #192]	; (8005998 <HAL_RCC_OscConfig+0x63c>)
 80058d6:	400a      	ands	r2, r1
 80058d8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058da:	f7fd fc3f 	bl	800315c <HAL_GetTick>
 80058de:	0003      	movs	r3, r0
 80058e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e4:	f7fd fc3a 	bl	800315c <HAL_GetTick>
 80058e8:	0002      	movs	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e040      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f6:	4b22      	ldr	r3, [pc, #136]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	2380      	movs	r3, #128	; 0x80
 80058fc:	049b      	lsls	r3, r3, #18
 80058fe:	4013      	ands	r3, r2
 8005900:	d1f0      	bne.n	80058e4 <HAL_RCC_OscConfig+0x588>
 8005902:	e038      	b.n	8005976 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e033      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005910:	4b1b      	ldr	r3, [pc, #108]	; (8005980 <HAL_RCC_OscConfig+0x624>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2203      	movs	r2, #3
 800591a:	401a      	ands	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	429a      	cmp	r2, r3
 8005922:	d126      	bne.n	8005972 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2270      	movs	r2, #112	; 0x70
 8005928:	401a      	ands	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d11f      	bne.n	8005972 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	23fe      	movs	r3, #254	; 0xfe
 8005936:	01db      	lsls	r3, r3, #7
 8005938:	401a      	ands	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005940:	429a      	cmp	r2, r3
 8005942:	d116      	bne.n	8005972 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	23f8      	movs	r3, #248	; 0xf8
 8005948:	039b      	lsls	r3, r3, #14
 800594a:	401a      	ands	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005950:	429a      	cmp	r2, r3
 8005952:	d10e      	bne.n	8005972 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	23e0      	movs	r3, #224	; 0xe0
 8005958:	051b      	lsls	r3, r3, #20
 800595a:	401a      	ands	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005960:	429a      	cmp	r2, r3
 8005962:	d106      	bne.n	8005972 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	0f5b      	lsrs	r3, r3, #29
 8005968:	075a      	lsls	r2, r3, #29
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d001      	beq.n	8005976 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	0018      	movs	r0, r3
 800597a:	46bd      	mov	sp, r7
 800597c:	b008      	add	sp, #32
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40021000 	.word	0x40021000
 8005984:	40007000 	.word	0x40007000
 8005988:	00001388 	.word	0x00001388
 800598c:	efffffff 	.word	0xefffffff
 8005990:	feffffff 	.word	0xfeffffff
 8005994:	11c1808c 	.word	0x11c1808c
 8005998:	eefeffff 	.word	0xeefeffff

0800599c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0e9      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059b0:	4b76      	ldr	r3, [pc, #472]	; (8005b8c <HAL_RCC_ClockConfig+0x1f0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2207      	movs	r2, #7
 80059b6:	4013      	ands	r3, r2
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d91e      	bls.n	80059fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059be:	4b73      	ldr	r3, [pc, #460]	; (8005b8c <HAL_RCC_ClockConfig+0x1f0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2207      	movs	r2, #7
 80059c4:	4393      	bics	r3, r2
 80059c6:	0019      	movs	r1, r3
 80059c8:	4b70      	ldr	r3, [pc, #448]	; (8005b8c <HAL_RCC_ClockConfig+0x1f0>)
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059d0:	f7fd fbc4 	bl	800315c <HAL_GetTick>
 80059d4:	0003      	movs	r3, r0
 80059d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80059d8:	e009      	b.n	80059ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059da:	f7fd fbbf 	bl	800315c <HAL_GetTick>
 80059de:	0002      	movs	r2, r0
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	4a6a      	ldr	r2, [pc, #424]	; (8005b90 <HAL_RCC_ClockConfig+0x1f4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e0ca      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80059ee:	4b67      	ldr	r3, [pc, #412]	; (8005b8c <HAL_RCC_ClockConfig+0x1f0>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2207      	movs	r2, #7
 80059f4:	4013      	ands	r3, r2
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d1ee      	bne.n	80059da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2202      	movs	r2, #2
 8005a02:	4013      	ands	r3, r2
 8005a04:	d015      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d006      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005a10:	4b60      	ldr	r3, [pc, #384]	; (8005b94 <HAL_RCC_ClockConfig+0x1f8>)
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	4b5f      	ldr	r3, [pc, #380]	; (8005b94 <HAL_RCC_ClockConfig+0x1f8>)
 8005a16:	21e0      	movs	r1, #224	; 0xe0
 8005a18:	01c9      	lsls	r1, r1, #7
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a1e:	4b5d      	ldr	r3, [pc, #372]	; (8005b94 <HAL_RCC_ClockConfig+0x1f8>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	4a5d      	ldr	r2, [pc, #372]	; (8005b98 <HAL_RCC_ClockConfig+0x1fc>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	0019      	movs	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	4b59      	ldr	r3, [pc, #356]	; (8005b94 <HAL_RCC_ClockConfig+0x1f8>)
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2201      	movs	r2, #1
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d057      	beq.n	8005aec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d107      	bne.n	8005a54 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a44:	4b53      	ldr	r3, [pc, #332]	; (8005b94 <HAL_RCC_ClockConfig+0x1f8>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	2380      	movs	r3, #128	; 0x80
 8005a4a:	029b      	lsls	r3, r3, #10
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d12b      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e097      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a5c:	4b4d      	ldr	r3, [pc, #308]	; (8005b94 <HAL_RCC_ClockConfig+0x1f8>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	2380      	movs	r3, #128	; 0x80
 8005a62:	049b      	lsls	r3, r3, #18
 8005a64:	4013      	ands	r3, r2
 8005a66:	d11f      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e08b      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d107      	bne.n	8005a84 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a74:	4b47      	ldr	r3, [pc, #284]	; (8005b94 <HAL_RCC_ClockConfig+0x1f8>)
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	2380      	movs	r3, #128	; 0x80
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	d113      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e07f      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d106      	bne.n	8005a9a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a8c:	4b41      	ldr	r3, [pc, #260]	; (8005b94 <HAL_RCC_ClockConfig+0x1f8>)
 8005a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a90:	2202      	movs	r2, #2
 8005a92:	4013      	ands	r3, r2
 8005a94:	d108      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e074      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a9a:	4b3e      	ldr	r3, [pc, #248]	; (8005b94 <HAL_RCC_ClockConfig+0x1f8>)
 8005a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9e:	2202      	movs	r2, #2
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	d101      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e06d      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005aa8:	4b3a      	ldr	r3, [pc, #232]	; (8005b94 <HAL_RCC_ClockConfig+0x1f8>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2207      	movs	r2, #7
 8005aae:	4393      	bics	r3, r2
 8005ab0:	0019      	movs	r1, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	4b37      	ldr	r3, [pc, #220]	; (8005b94 <HAL_RCC_ClockConfig+0x1f8>)
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005abc:	f7fd fb4e 	bl	800315c <HAL_GetTick>
 8005ac0:	0003      	movs	r3, r0
 8005ac2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac4:	e009      	b.n	8005ada <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac6:	f7fd fb49 	bl	800315c <HAL_GetTick>
 8005aca:	0002      	movs	r2, r0
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	4a2f      	ldr	r2, [pc, #188]	; (8005b90 <HAL_RCC_ClockConfig+0x1f4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e054      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ada:	4b2e      	ldr	r3, [pc, #184]	; (8005b94 <HAL_RCC_ClockConfig+0x1f8>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2238      	movs	r2, #56	; 0x38
 8005ae0:	401a      	ands	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d1ec      	bne.n	8005ac6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005aec:	4b27      	ldr	r3, [pc, #156]	; (8005b8c <HAL_RCC_ClockConfig+0x1f0>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2207      	movs	r2, #7
 8005af2:	4013      	ands	r3, r2
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d21e      	bcs.n	8005b38 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afa:	4b24      	ldr	r3, [pc, #144]	; (8005b8c <HAL_RCC_ClockConfig+0x1f0>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2207      	movs	r2, #7
 8005b00:	4393      	bics	r3, r2
 8005b02:	0019      	movs	r1, r3
 8005b04:	4b21      	ldr	r3, [pc, #132]	; (8005b8c <HAL_RCC_ClockConfig+0x1f0>)
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b0c:	f7fd fb26 	bl	800315c <HAL_GetTick>
 8005b10:	0003      	movs	r3, r0
 8005b12:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b14:	e009      	b.n	8005b2a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b16:	f7fd fb21 	bl	800315c <HAL_GetTick>
 8005b1a:	0002      	movs	r2, r0
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	4a1b      	ldr	r2, [pc, #108]	; (8005b90 <HAL_RCC_ClockConfig+0x1f4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e02c      	b.n	8005b84 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b2a:	4b18      	ldr	r3, [pc, #96]	; (8005b8c <HAL_RCC_ClockConfig+0x1f0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2207      	movs	r2, #7
 8005b30:	4013      	ands	r3, r2
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d1ee      	bne.n	8005b16 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2204      	movs	r2, #4
 8005b3e:	4013      	ands	r3, r2
 8005b40:	d009      	beq.n	8005b56 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005b42:	4b14      	ldr	r3, [pc, #80]	; (8005b94 <HAL_RCC_ClockConfig+0x1f8>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	4a15      	ldr	r2, [pc, #84]	; (8005b9c <HAL_RCC_ClockConfig+0x200>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	0019      	movs	r1, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	4b10      	ldr	r3, [pc, #64]	; (8005b94 <HAL_RCC_ClockConfig+0x1f8>)
 8005b52:	430a      	orrs	r2, r1
 8005b54:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005b56:	f000 f829 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8005b5a:	0001      	movs	r1, r0
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <HAL_RCC_ClockConfig+0x1f8>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	0a1b      	lsrs	r3, r3, #8
 8005b62:	220f      	movs	r2, #15
 8005b64:	401a      	ands	r2, r3
 8005b66:	4b0e      	ldr	r3, [pc, #56]	; (8005ba0 <HAL_RCC_ClockConfig+0x204>)
 8005b68:	0092      	lsls	r2, r2, #2
 8005b6a:	58d3      	ldr	r3, [r2, r3]
 8005b6c:	221f      	movs	r2, #31
 8005b6e:	4013      	ands	r3, r2
 8005b70:	000a      	movs	r2, r1
 8005b72:	40da      	lsrs	r2, r3
 8005b74:	4b0b      	ldr	r3, [pc, #44]	; (8005ba4 <HAL_RCC_ClockConfig+0x208>)
 8005b76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <HAL_RCC_ClockConfig+0x20c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f7fd fa91 	bl	80030a4 <HAL_InitTick>
 8005b82:	0003      	movs	r3, r0
}
 8005b84:	0018      	movs	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	b004      	add	sp, #16
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40022000 	.word	0x40022000
 8005b90:	00001388 	.word	0x00001388
 8005b94:	40021000 	.word	0x40021000
 8005b98:	fffff0ff 	.word	0xfffff0ff
 8005b9c:	ffff8fff 	.word	0xffff8fff
 8005ba0:	0800a814 	.word	0x0800a814
 8005ba4:	20003168 	.word	0x20003168
 8005ba8:	2000316c 	.word	0x2000316c

08005bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bb2:	4b3c      	ldr	r3, [pc, #240]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2238      	movs	r2, #56	; 0x38
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d10f      	bne.n	8005bdc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005bbc:	4b39      	ldr	r3, [pc, #228]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	0adb      	lsrs	r3, r3, #11
 8005bc2:	2207      	movs	r2, #7
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	409a      	lsls	r2, r3
 8005bca:	0013      	movs	r3, r2
 8005bcc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	4835      	ldr	r0, [pc, #212]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005bd2:	f7fa fa97 	bl	8000104 <__udivsi3>
 8005bd6:	0003      	movs	r3, r0
 8005bd8:	613b      	str	r3, [r7, #16]
 8005bda:	e05d      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bdc:	4b31      	ldr	r3, [pc, #196]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2238      	movs	r2, #56	; 0x38
 8005be2:	4013      	ands	r3, r2
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d102      	bne.n	8005bee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005be8:	4b30      	ldr	r3, [pc, #192]	; (8005cac <HAL_RCC_GetSysClockFreq+0x100>)
 8005bea:	613b      	str	r3, [r7, #16]
 8005bec:	e054      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bee:	4b2d      	ldr	r3, [pc, #180]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	2238      	movs	r2, #56	; 0x38
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	2b10      	cmp	r3, #16
 8005bf8:	d138      	bne.n	8005c6c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005bfa:	4b2a      	ldr	r3, [pc, #168]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	2203      	movs	r2, #3
 8005c00:	4013      	ands	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c04:	4b27      	ldr	r3, [pc, #156]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	091b      	lsrs	r3, r3, #4
 8005c0a:	2207      	movs	r2, #7
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	3301      	adds	r3, #1
 8005c10:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d10d      	bne.n	8005c34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	4824      	ldr	r0, [pc, #144]	; (8005cac <HAL_RCC_GetSysClockFreq+0x100>)
 8005c1c:	f7fa fa72 	bl	8000104 <__udivsi3>
 8005c20:	0003      	movs	r3, r0
 8005c22:	0019      	movs	r1, r3
 8005c24:	4b1f      	ldr	r3, [pc, #124]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	0a1b      	lsrs	r3, r3, #8
 8005c2a:	227f      	movs	r2, #127	; 0x7f
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	434b      	muls	r3, r1
 8005c30:	617b      	str	r3, [r7, #20]
        break;
 8005c32:	e00d      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005c34:	68b9      	ldr	r1, [r7, #8]
 8005c36:	481c      	ldr	r0, [pc, #112]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005c38:	f7fa fa64 	bl	8000104 <__udivsi3>
 8005c3c:	0003      	movs	r3, r0
 8005c3e:	0019      	movs	r1, r3
 8005c40:	4b18      	ldr	r3, [pc, #96]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	0a1b      	lsrs	r3, r3, #8
 8005c46:	227f      	movs	r2, #127	; 0x7f
 8005c48:	4013      	ands	r3, r2
 8005c4a:	434b      	muls	r3, r1
 8005c4c:	617b      	str	r3, [r7, #20]
        break;
 8005c4e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005c50:	4b14      	ldr	r3, [pc, #80]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	0f5b      	lsrs	r3, r3, #29
 8005c56:	2207      	movs	r2, #7
 8005c58:	4013      	ands	r3, r2
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	6978      	ldr	r0, [r7, #20]
 8005c62:	f7fa fa4f 	bl	8000104 <__udivsi3>
 8005c66:	0003      	movs	r3, r0
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	e015      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005c6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2238      	movs	r2, #56	; 0x38
 8005c72:	4013      	ands	r3, r2
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d103      	bne.n	8005c80 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005c78:	2380      	movs	r3, #128	; 0x80
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	e00b      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005c80:	4b08      	ldr	r3, [pc, #32]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2238      	movs	r2, #56	; 0x38
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b18      	cmp	r3, #24
 8005c8a:	d103      	bne.n	8005c94 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005c8c:	23fa      	movs	r3, #250	; 0xfa
 8005c8e:	01db      	lsls	r3, r3, #7
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	e001      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c98:	693b      	ldr	r3, [r7, #16]
}
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	b006      	add	sp, #24
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	46c0      	nop			; (mov r8, r8)
 8005ca4:	40021000 	.word	0x40021000
 8005ca8:	00f42400 	.word	0x00f42400
 8005cac:	007a1200 	.word	0x007a1200

08005cb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cb4:	4b02      	ldr	r3, [pc, #8]	; (8005cc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
}
 8005cb8:	0018      	movs	r0, r3
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	20003168 	.word	0x20003168

08005cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc4:	b5b0      	push	{r4, r5, r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005cc8:	f7ff fff2 	bl	8005cb0 <HAL_RCC_GetHCLKFreq>
 8005ccc:	0004      	movs	r4, r0
 8005cce:	f7ff fb39 	bl	8005344 <LL_RCC_GetAPB1Prescaler>
 8005cd2:	0003      	movs	r3, r0
 8005cd4:	0b1a      	lsrs	r2, r3, #12
 8005cd6:	4b05      	ldr	r3, [pc, #20]	; (8005cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8005cd8:	0092      	lsls	r2, r2, #2
 8005cda:	58d3      	ldr	r3, [r2, r3]
 8005cdc:	221f      	movs	r2, #31
 8005cde:	4013      	ands	r3, r2
 8005ce0:	40dc      	lsrs	r4, r3
 8005ce2:	0023      	movs	r3, r4
}
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	0800a854 	.word	0x0800a854

08005cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005cf8:	2313      	movs	r3, #19
 8005cfa:	18fb      	adds	r3, r7, r3
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d00:	2312      	movs	r3, #18
 8005d02:	18fb      	adds	r3, r7, r3
 8005d04:	2200      	movs	r2, #0
 8005d06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	2380      	movs	r3, #128	; 0x80
 8005d0e:	029b      	lsls	r3, r3, #10
 8005d10:	4013      	ands	r3, r2
 8005d12:	d100      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005d14:	e0a3      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d16:	2011      	movs	r0, #17
 8005d18:	183b      	adds	r3, r7, r0
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d1e:	4bc3      	ldr	r3, [pc, #780]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d22:	2380      	movs	r3, #128	; 0x80
 8005d24:	055b      	lsls	r3, r3, #21
 8005d26:	4013      	ands	r3, r2
 8005d28:	d110      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d2a:	4bc0      	ldr	r3, [pc, #768]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d2e:	4bbf      	ldr	r3, [pc, #764]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d30:	2180      	movs	r1, #128	; 0x80
 8005d32:	0549      	lsls	r1, r1, #21
 8005d34:	430a      	orrs	r2, r1
 8005d36:	63da      	str	r2, [r3, #60]	; 0x3c
 8005d38:	4bbc      	ldr	r3, [pc, #752]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d3c:	2380      	movs	r3, #128	; 0x80
 8005d3e:	055b      	lsls	r3, r3, #21
 8005d40:	4013      	ands	r3, r2
 8005d42:	60bb      	str	r3, [r7, #8]
 8005d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d46:	183b      	adds	r3, r7, r0
 8005d48:	2201      	movs	r2, #1
 8005d4a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d4c:	4bb8      	ldr	r3, [pc, #736]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	4bb7      	ldr	r3, [pc, #732]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005d52:	2180      	movs	r1, #128	; 0x80
 8005d54:	0049      	lsls	r1, r1, #1
 8005d56:	430a      	orrs	r2, r1
 8005d58:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d5a:	f7fd f9ff 	bl	800315c <HAL_GetTick>
 8005d5e:	0003      	movs	r3, r0
 8005d60:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d62:	e00b      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d64:	f7fd f9fa 	bl	800315c <HAL_GetTick>
 8005d68:	0002      	movs	r2, r0
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d904      	bls.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005d72:	2313      	movs	r3, #19
 8005d74:	18fb      	adds	r3, r7, r3
 8005d76:	2203      	movs	r2, #3
 8005d78:	701a      	strb	r2, [r3, #0]
        break;
 8005d7a:	e005      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d7c:	4bac      	ldr	r3, [pc, #688]	; (8006030 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	2380      	movs	r3, #128	; 0x80
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	4013      	ands	r3, r2
 8005d86:	d0ed      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005d88:	2313      	movs	r3, #19
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d154      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d92:	4ba6      	ldr	r3, [pc, #664]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d96:	23c0      	movs	r3, #192	; 0xc0
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d019      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d014      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005dae:	4b9f      	ldr	r3, [pc, #636]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db2:	4aa0      	ldr	r2, [pc, #640]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005db8:	4b9c      	ldr	r3, [pc, #624]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dbc:	4b9b      	ldr	r3, [pc, #620]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dbe:	2180      	movs	r1, #128	; 0x80
 8005dc0:	0249      	lsls	r1, r1, #9
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dc6:	4b99      	ldr	r3, [pc, #612]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dca:	4b98      	ldr	r3, [pc, #608]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dcc:	499a      	ldr	r1, [pc, #616]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005dce:	400a      	ands	r2, r1
 8005dd0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005dd2:	4b96      	ldr	r3, [pc, #600]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d016      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de0:	f7fd f9bc 	bl	800315c <HAL_GetTick>
 8005de4:	0003      	movs	r3, r0
 8005de6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005de8:	e00c      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dea:	f7fd f9b7 	bl	800315c <HAL_GetTick>
 8005dee:	0002      	movs	r2, r0
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	4a91      	ldr	r2, [pc, #580]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d904      	bls.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005dfa:	2313      	movs	r3, #19
 8005dfc:	18fb      	adds	r3, r7, r3
 8005dfe:	2203      	movs	r2, #3
 8005e00:	701a      	strb	r2, [r3, #0]
            break;
 8005e02:	e004      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e04:	4b89      	ldr	r3, [pc, #548]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e08:	2202      	movs	r2, #2
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d0ed      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005e0e:	2313      	movs	r3, #19
 8005e10:	18fb      	adds	r3, r7, r3
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e18:	4b84      	ldr	r3, [pc, #528]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1c:	4a85      	ldr	r2, [pc, #532]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	0019      	movs	r1, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e26:	4b81      	ldr	r3, [pc, #516]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e2c:	e00c      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e2e:	2312      	movs	r3, #18
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	2213      	movs	r2, #19
 8005e34:	18ba      	adds	r2, r7, r2
 8005e36:	7812      	ldrb	r2, [r2, #0]
 8005e38:	701a      	strb	r2, [r3, #0]
 8005e3a:	e005      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3c:	2312      	movs	r3, #18
 8005e3e:	18fb      	adds	r3, r7, r3
 8005e40:	2213      	movs	r2, #19
 8005e42:	18ba      	adds	r2, r7, r2
 8005e44:	7812      	ldrb	r2, [r2, #0]
 8005e46:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e48:	2311      	movs	r3, #17
 8005e4a:	18fb      	adds	r3, r7, r3
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d105      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e52:	4b76      	ldr	r3, [pc, #472]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e56:	4b75      	ldr	r3, [pc, #468]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e58:	4979      	ldr	r1, [pc, #484]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005e5a:	400a      	ands	r2, r1
 8005e5c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2201      	movs	r2, #1
 8005e64:	4013      	ands	r3, r2
 8005e66:	d009      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e68:	4b70      	ldr	r3, [pc, #448]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	4393      	bics	r3, r2
 8005e70:	0019      	movs	r1, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	4b6d      	ldr	r3, [pc, #436]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2202      	movs	r2, #2
 8005e82:	4013      	ands	r3, r2
 8005e84:	d009      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e86:	4b69      	ldr	r3, [pc, #420]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8a:	220c      	movs	r2, #12
 8005e8c:	4393      	bics	r3, r2
 8005e8e:	0019      	movs	r1, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	4b65      	ldr	r3, [pc, #404]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e96:	430a      	orrs	r2, r1
 8005e98:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2210      	movs	r2, #16
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	d009      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ea4:	4b61      	ldr	r3, [pc, #388]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea8:	4a66      	ldr	r2, [pc, #408]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	0019      	movs	r1, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	4b5e      	ldr	r3, [pc, #376]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	2380      	movs	r3, #128	; 0x80
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d009      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ec4:	4b59      	ldr	r3, [pc, #356]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec8:	4a5f      	ldr	r2, [pc, #380]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005eca:	4013      	ands	r3, r2
 8005ecc:	0019      	movs	r1, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	4b56      	ldr	r3, [pc, #344]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	2380      	movs	r3, #128	; 0x80
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d009      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ee4:	4b51      	ldr	r3, [pc, #324]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee8:	4a58      	ldr	r2, [pc, #352]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005eea:	4013      	ands	r3, r2
 8005eec:	0019      	movs	r1, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69da      	ldr	r2, [r3, #28]
 8005ef2:	4b4e      	ldr	r3, [pc, #312]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2220      	movs	r2, #32
 8005efe:	4013      	ands	r3, r2
 8005f00:	d009      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f02:	4b4a      	ldr	r3, [pc, #296]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f06:	4a52      	ldr	r2, [pc, #328]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005f08:	4013      	ands	r3, r2
 8005f0a:	0019      	movs	r1, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691a      	ldr	r2, [r3, #16]
 8005f10:	4b46      	ldr	r3, [pc, #280]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f12:	430a      	orrs	r2, r1
 8005f14:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	2380      	movs	r3, #128	; 0x80
 8005f1c:	01db      	lsls	r3, r3, #7
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d015      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f22:	4b42      	ldr	r3, [pc, #264]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	0899      	lsrs	r1, r3, #2
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1a      	ldr	r2, [r3, #32]
 8005f2e:	4b3f      	ldr	r3, [pc, #252]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f30:	430a      	orrs	r2, r1
 8005f32:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a1a      	ldr	r2, [r3, #32]
 8005f38:	2380      	movs	r3, #128	; 0x80
 8005f3a:	05db      	lsls	r3, r3, #23
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d106      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005f40:	4b3a      	ldr	r3, [pc, #232]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	4b39      	ldr	r3, [pc, #228]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f46:	2180      	movs	r1, #128	; 0x80
 8005f48:	0249      	lsls	r1, r1, #9
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	2380      	movs	r3, #128	; 0x80
 8005f54:	031b      	lsls	r3, r3, #12
 8005f56:	4013      	ands	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f5a:	4b34      	ldr	r3, [pc, #208]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5e:	2240      	movs	r2, #64	; 0x40
 8005f60:	4393      	bics	r3, r2
 8005f62:	0019      	movs	r1, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f68:	4b30      	ldr	r3, [pc, #192]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	2380      	movs	r3, #128	; 0x80
 8005f74:	039b      	lsls	r3, r3, #14
 8005f76:	4013      	ands	r3, r2
 8005f78:	d016      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f7a:	4b2c      	ldr	r3, [pc, #176]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	4a35      	ldr	r2, [pc, #212]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	0019      	movs	r1, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f88:	4b28      	ldr	r3, [pc, #160]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f92:	2380      	movs	r3, #128	; 0x80
 8005f94:	03db      	lsls	r3, r3, #15
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d106      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005f9a:	4b24      	ldr	r3, [pc, #144]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	4b23      	ldr	r3, [pc, #140]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fa0:	2180      	movs	r1, #128	; 0x80
 8005fa2:	0449      	lsls	r1, r1, #17
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	03db      	lsls	r3, r3, #15
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	d016      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005fb4:	4b1d      	ldr	r3, [pc, #116]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb8:	4a27      	ldr	r2, [pc, #156]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005fba:	4013      	ands	r3, r2
 8005fbc:	0019      	movs	r1, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc2:	4b1a      	ldr	r3, [pc, #104]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fcc:	2380      	movs	r3, #128	; 0x80
 8005fce:	045b      	lsls	r3, r3, #17
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d106      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005fd4:	4b15      	ldr	r3, [pc, #84]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	4b14      	ldr	r3, [pc, #80]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fda:	2180      	movs	r1, #128	; 0x80
 8005fdc:	0449      	lsls	r1, r1, #17
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	2380      	movs	r3, #128	; 0x80
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	4013      	ands	r3, r2
 8005fec:	d016      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005fee:	4b0f      	ldr	r3, [pc, #60]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff2:	4a1a      	ldr	r2, [pc, #104]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	0019      	movs	r1, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	695a      	ldr	r2, [r3, #20]
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ffe:	430a      	orrs	r2, r1
 8006000:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695a      	ldr	r2, [r3, #20]
 8006006:	2380      	movs	r3, #128	; 0x80
 8006008:	01db      	lsls	r3, r3, #7
 800600a:	429a      	cmp	r2, r3
 800600c:	d106      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800600e:	4b07      	ldr	r3, [pc, #28]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006014:	2180      	movs	r1, #128	; 0x80
 8006016:	0249      	lsls	r1, r1, #9
 8006018:	430a      	orrs	r2, r1
 800601a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800601c:	2312      	movs	r3, #18
 800601e:	18fb      	adds	r3, r7, r3
 8006020:	781b      	ldrb	r3, [r3, #0]
}
 8006022:	0018      	movs	r0, r3
 8006024:	46bd      	mov	sp, r7
 8006026:	b006      	add	sp, #24
 8006028:	bd80      	pop	{r7, pc}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	40021000 	.word	0x40021000
 8006030:	40007000 	.word	0x40007000
 8006034:	fffffcff 	.word	0xfffffcff
 8006038:	fffeffff 	.word	0xfffeffff
 800603c:	00001388 	.word	0x00001388
 8006040:	efffffff 	.word	0xefffffff
 8006044:	fffff3ff 	.word	0xfffff3ff
 8006048:	fff3ffff 	.word	0xfff3ffff
 800604c:	ffcfffff 	.word	0xffcfffff
 8006050:	ffffcfff 	.word	0xffffcfff
 8006054:	ffbfffff 	.word	0xffbfffff
 8006058:	feffffff 	.word	0xfeffffff
 800605c:	ffff3fff 	.word	0xffff3fff

08006060 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	2380      	movs	r3, #128	; 0x80
 8006070:	029b      	lsls	r3, r3, #10
 8006072:	429a      	cmp	r2, r3
 8006074:	d136      	bne.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006076:	4bcd      	ldr	r3, [pc, #820]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006078:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800607a:	23c0      	movs	r3, #192	; 0xc0
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4013      	ands	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006082:	4bca      	ldr	r3, [pc, #808]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006086:	2202      	movs	r2, #2
 8006088:	4013      	ands	r3, r2
 800608a:	2b02      	cmp	r3, #2
 800608c:	d108      	bne.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	2380      	movs	r3, #128	; 0x80
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	429a      	cmp	r2, r3
 8006096:	d103      	bne.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8006098:	2380      	movs	r3, #128	; 0x80
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	617b      	str	r3, [r7, #20]
 800609e:	e31c      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80060a0:	4bc2      	ldr	r3, [pc, #776]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80060a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a4:	2202      	movs	r2, #2
 80060a6:	4013      	ands	r3, r2
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d108      	bne.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	2380      	movs	r3, #128	; 0x80
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d103      	bne.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 80060b6:	23fa      	movs	r3, #250	; 0xfa
 80060b8:	01db      	lsls	r3, r3, #7
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	e30d      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80060be:	4bbb      	ldr	r3, [pc, #748]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	029b      	lsls	r3, r3, #10
 80060c6:	401a      	ands	r2, r3
 80060c8:	2380      	movs	r3, #128	; 0x80
 80060ca:	029b      	lsls	r3, r3, #10
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d000      	beq.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80060d0:	e303      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	23c0      	movs	r3, #192	; 0xc0
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	429a      	cmp	r2, r3
 80060da:	d000      	beq.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 80060dc:	e2fd      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 80060de:	4bb4      	ldr	r3, [pc, #720]	; (80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	e2fa      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 80060e4:	4bb1      	ldr	r3, [pc, #708]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	2203      	movs	r2, #3
 80060ea:	4013      	ands	r3, r2
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d102      	bne.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 80060f0:	4bb0      	ldr	r3, [pc, #704]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	e00a      	b.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 80060f6:	4bad      	ldr	r3, [pc, #692]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	2203      	movs	r2, #3
 80060fc:	4013      	ands	r3, r2
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d102      	bne.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8006102:	4bad      	ldr	r3, [pc, #692]	; (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	e001      	b.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800610c:	4ba7      	ldr	r3, [pc, #668]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	091b      	lsrs	r3, r3, #4
 8006112:	2207      	movs	r2, #7
 8006114:	4013      	ands	r3, r2
 8006116:	3301      	adds	r3, #1
 8006118:	0019      	movs	r1, r3
 800611a:	6938      	ldr	r0, [r7, #16]
 800611c:	f7f9 fff2 	bl	8000104 <__udivsi3>
 8006120:	0003      	movs	r3, r0
 8006122:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	2380      	movs	r3, #128	; 0x80
 8006128:	03db      	lsls	r3, r3, #15
 800612a:	429a      	cmp	r2, r3
 800612c:	d100      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 800612e:	e28e      	b.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	2380      	movs	r3, #128	; 0x80
 8006134:	03db      	lsls	r3, r3, #15
 8006136:	429a      	cmp	r2, r3
 8006138:	d900      	bls.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800613a:	e2b7      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	2380      	movs	r3, #128	; 0x80
 8006140:	039b      	lsls	r3, r3, #14
 8006142:	429a      	cmp	r2, r3
 8006144:	d100      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006146:	e253      	b.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	2380      	movs	r3, #128	; 0x80
 800614c:	039b      	lsls	r3, r3, #14
 800614e:	429a      	cmp	r2, r3
 8006150:	d900      	bls.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006152:	e2ab      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	031b      	lsls	r3, r3, #12
 800615a:	429a      	cmp	r2, r3
 800615c:	d100      	bne.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800615e:	e0b2      	b.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	2380      	movs	r3, #128	; 0x80
 8006164:	031b      	lsls	r3, r3, #12
 8006166:	429a      	cmp	r2, r3
 8006168:	d900      	bls.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800616a:	e29f      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	2380      	movs	r3, #128	; 0x80
 8006170:	01db      	lsls	r3, r3, #7
 8006172:	429a      	cmp	r2, r3
 8006174:	d100      	bne.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8006176:	e103      	b.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	2380      	movs	r3, #128	; 0x80
 800617c:	01db      	lsls	r3, r3, #7
 800617e:	429a      	cmp	r2, r3
 8006180:	d900      	bls.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006182:	e293      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	2380      	movs	r3, #128	; 0x80
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	429a      	cmp	r2, r3
 800618c:	d100      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800618e:	e165      	b.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	2380      	movs	r3, #128	; 0x80
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	429a      	cmp	r2, r3
 8006198:	d900      	bls.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800619a:	e287      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	2380      	movs	r3, #128	; 0x80
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d100      	bne.n	80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80061a6:	e1e3      	b.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	2380      	movs	r3, #128	; 0x80
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d900      	bls.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80061b2:	e27b      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	2380      	movs	r3, #128	; 0x80
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d100      	bne.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80061be:	e197      	b.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	2380      	movs	r3, #128	; 0x80
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d900      	bls.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80061ca:	e26f      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b20      	cmp	r3, #32
 80061d0:	d100      	bne.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80061d2:	e118      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b20      	cmp	r3, #32
 80061d8:	d900      	bls.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 80061da:	e267      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b10      	cmp	r3, #16
 80061e0:	d100      	bne.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80061e2:	e093      	b.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b10      	cmp	r3, #16
 80061e8:	d900      	bls.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80061ea:	e25f      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d003      	beq.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d033      	beq.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 80061f8:	e258      	b.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80061fa:	4b6c      	ldr	r3, [pc, #432]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fe:	2203      	movs	r2, #3
 8006200:	4013      	ands	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d104      	bne.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800620a:	f7ff fd5b 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 800620e:	0003      	movs	r3, r0
 8006210:	617b      	str	r3, [r7, #20]
        break;
 8006212:	e24d      	b.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d104      	bne.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 800621a:	f7ff fcc7 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 800621e:	0003      	movs	r3, r0
 8006220:	617b      	str	r3, [r7, #20]
        break;
 8006222:	e245      	b.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006224:	4b61      	ldr	r3, [pc, #388]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	2380      	movs	r3, #128	; 0x80
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	401a      	ands	r2, r3
 800622e:	2380      	movs	r3, #128	; 0x80
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	429a      	cmp	r2, r3
 8006234:	d105      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d102      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 800623c:	4b5d      	ldr	r3, [pc, #372]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800623e:	617b      	str	r3, [r7, #20]
        break;
 8006240:	e236      	b.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006242:	4b5a      	ldr	r3, [pc, #360]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006246:	2202      	movs	r2, #2
 8006248:	4013      	ands	r3, r2
 800624a:	2b02      	cmp	r3, #2
 800624c:	d000      	beq.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 800624e:	e22f      	b.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b03      	cmp	r3, #3
 8006254:	d000      	beq.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8006256:	e22b      	b.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	617b      	str	r3, [r7, #20]
        break;
 800625e:	e227      	b.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006260:	4b52      	ldr	r3, [pc, #328]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006264:	220c      	movs	r2, #12
 8006266:	4013      	ands	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d104      	bne.n	800627a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006270:	f7ff fd28 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 8006274:	0003      	movs	r3, r0
 8006276:	617b      	str	r3, [r7, #20]
        break;
 8006278:	e21c      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b04      	cmp	r3, #4
 800627e:	d104      	bne.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006280:	f7ff fc94 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8006284:	0003      	movs	r3, r0
 8006286:	617b      	str	r3, [r7, #20]
        break;
 8006288:	e214      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800628a:	4b48      	ldr	r3, [pc, #288]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	2380      	movs	r3, #128	; 0x80
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	401a      	ands	r2, r3
 8006294:	2380      	movs	r3, #128	; 0x80
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	429a      	cmp	r2, r3
 800629a:	d105      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d102      	bne.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 80062a2:	4b44      	ldr	r3, [pc, #272]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80062a4:	617b      	str	r3, [r7, #20]
        break;
 80062a6:	e205      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80062a8:	4b40      	ldr	r3, [pc, #256]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ac:	2202      	movs	r2, #2
 80062ae:	4013      	ands	r3, r2
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d000      	beq.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80062b4:	e1fe      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b0c      	cmp	r3, #12
 80062ba:	d000      	beq.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80062bc:	e1fa      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 80062be:	2380      	movs	r3, #128	; 0x80
 80062c0:	021b      	lsls	r3, r3, #8
 80062c2:	617b      	str	r3, [r7, #20]
        break;
 80062c4:	e1f6      	b.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80062c6:	4b39      	ldr	r3, [pc, #228]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ca:	2240      	movs	r2, #64	; 0x40
 80062cc:	4013      	ands	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 80062d0:	4b36      	ldr	r3, [pc, #216]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	2380      	movs	r3, #128	; 0x80
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	401a      	ands	r2, r3
 80062da:	2380      	movs	r3, #128	; 0x80
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	429a      	cmp	r2, r3
 80062e0:	d105      	bne.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d102      	bne.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 80062e8:	4b34      	ldr	r3, [pc, #208]	; (80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 80062ea:	617b      	str	r3, [r7, #20]
        break;
 80062ec:	e1e4      	b.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80062ee:	4b2f      	ldr	r3, [pc, #188]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f2:	2202      	movs	r2, #2
 80062f4:	4013      	ands	r3, r2
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d000      	beq.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 80062fa:	e1dd      	b.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b40      	cmp	r3, #64	; 0x40
 8006300:	d000      	beq.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8006302:	e1d9      	b.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8006304:	2380      	movs	r3, #128	; 0x80
 8006306:	021b      	lsls	r3, r3, #8
 8006308:	617b      	str	r3, [r7, #20]
        break;
 800630a:	e1d5      	b.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800630c:	4b27      	ldr	r3, [pc, #156]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800630e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006310:	23c0      	movs	r3, #192	; 0xc0
 8006312:	011b      	lsls	r3, r3, #4
 8006314:	4013      	ands	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d104      	bne.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800631e:	f7ff fcd1 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 8006322:	0003      	movs	r3, r0
 8006324:	617b      	str	r3, [r7, #20]
        break;
 8006326:	e1c9      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	2380      	movs	r3, #128	; 0x80
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	429a      	cmp	r2, r3
 8006330:	d104      	bne.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8006332:	f7ff fc3b 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8006336:	0003      	movs	r3, r0
 8006338:	617b      	str	r3, [r7, #20]
        break;
 800633a:	e1bf      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800633c:	4b1b      	ldr	r3, [pc, #108]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	2380      	movs	r3, #128	; 0x80
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	401a      	ands	r2, r3
 8006346:	2380      	movs	r3, #128	; 0x80
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	429a      	cmp	r2, r3
 800634c:	d107      	bne.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	2380      	movs	r3, #128	; 0x80
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	429a      	cmp	r2, r3
 8006356:	d102      	bne.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8006358:	4b16      	ldr	r3, [pc, #88]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800635a:	617b      	str	r3, [r7, #20]
        break;
 800635c:	e1ae      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800635e:	4b13      	ldr	r3, [pc, #76]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006362:	2202      	movs	r2, #2
 8006364:	4013      	ands	r3, r2
 8006366:	2b02      	cmp	r3, #2
 8006368:	d000      	beq.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800636a:	e1a7      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	23c0      	movs	r3, #192	; 0xc0
 8006370:	011b      	lsls	r3, r3, #4
 8006372:	429a      	cmp	r2, r3
 8006374:	d000      	beq.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8006376:	e1a1      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8006378:	2380      	movs	r3, #128	; 0x80
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	617b      	str	r3, [r7, #20]
        break;
 800637e:	e19d      	b.n	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006380:	4b0a      	ldr	r3, [pc, #40]	; (80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006384:	0f9b      	lsrs	r3, r3, #30
 8006386:	079b      	lsls	r3, r3, #30
 8006388:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d104      	bne.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006390:	f7ff fc0c 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8006394:	0003      	movs	r3, r0
 8006396:	617b      	str	r3, [r7, #20]
        break;
 8006398:	e192      	b.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	061b      	lsls	r3, r3, #24
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d10d      	bne.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 80063a4:	4b03      	ldr	r3, [pc, #12]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80063a6:	617b      	str	r3, [r7, #20]
        break;
 80063a8:	e18a      	b.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80063aa:	46c0      	nop			; (mov r8, r8)
 80063ac:	40021000 	.word	0x40021000
 80063b0:	0003d090 	.word	0x0003d090
 80063b4:	00f42400 	.word	0x00f42400
 80063b8:	007a1200 	.word	0x007a1200
 80063bc:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	2380      	movs	r3, #128	; 0x80
 80063c4:	05db      	lsls	r3, r3, #23
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d000      	beq.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 80063ca:	e179      	b.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80063cc:	4bc5      	ldr	r3, [pc, #788]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063ce:	68da      	ldr	r2, [r3, #12]
 80063d0:	2380      	movs	r3, #128	; 0x80
 80063d2:	025b      	lsls	r3, r3, #9
 80063d4:	4013      	ands	r3, r2
 80063d6:	d100      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80063d8:	e172      	b.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80063da:	4bc2      	ldr	r3, [pc, #776]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	0a1b      	lsrs	r3, r3, #8
 80063e0:	227f      	movs	r2, #127	; 0x7f
 80063e2:	4013      	ands	r3, r2
 80063e4:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	435a      	muls	r2, r3
 80063ec:	4bbd      	ldr	r3, [pc, #756]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	0c5b      	lsrs	r3, r3, #17
 80063f2:	211f      	movs	r1, #31
 80063f4:	400b      	ands	r3, r1
 80063f6:	3301      	adds	r3, #1
 80063f8:	0019      	movs	r1, r3
 80063fa:	0010      	movs	r0, r2
 80063fc:	f7f9 fe82 	bl	8000104 <__udivsi3>
 8006400:	0003      	movs	r3, r0
 8006402:	617b      	str	r3, [r7, #20]
        break;
 8006404:	e15c      	b.n	80066c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006406:	4bb7      	ldr	r3, [pc, #732]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800640a:	23c0      	movs	r3, #192	; 0xc0
 800640c:	019b      	lsls	r3, r3, #6
 800640e:	4013      	ands	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006418:	f7ff fc54 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 800641c:	0003      	movs	r3, r0
 800641e:	617b      	str	r3, [r7, #20]
        break;
 8006420:	e150      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	2380      	movs	r3, #128	; 0x80
 8006426:	015b      	lsls	r3, r3, #5
 8006428:	429a      	cmp	r2, r3
 800642a:	d104      	bne.n	8006436 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 800642c:	f7ff fbbe 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8006430:	0003      	movs	r3, r0
 8006432:	617b      	str	r3, [r7, #20]
        break;
 8006434:	e146      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006436:	4bab      	ldr	r3, [pc, #684]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	2380      	movs	r3, #128	; 0x80
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	401a      	ands	r2, r3
 8006440:	2380      	movs	r3, #128	; 0x80
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	429a      	cmp	r2, r3
 8006446:	d000      	beq.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8006448:	e13c      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	2380      	movs	r3, #128	; 0x80
 800644e:	019b      	lsls	r3, r3, #6
 8006450:	429a      	cmp	r2, r3
 8006452:	d000      	beq.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8006454:	e136      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8006456:	4ba4      	ldr	r3, [pc, #656]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006458:	617b      	str	r3, [r7, #20]
        break;
 800645a:	e133      	b.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 800645c:	4ba1      	ldr	r3, [pc, #644]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800645e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006460:	23c0      	movs	r3, #192	; 0xc0
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	4013      	ands	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	2380      	movs	r3, #128	; 0x80
 800646c:	01db      	lsls	r3, r3, #7
 800646e:	429a      	cmp	r2, r3
 8006470:	d11c      	bne.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006472:	4b9c      	ldr	r3, [pc, #624]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	2380      	movs	r3, #128	; 0x80
 8006478:	025b      	lsls	r3, r3, #9
 800647a:	4013      	ands	r3, r2
 800647c:	d100      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 800647e:	e123      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006480:	4b98      	ldr	r3, [pc, #608]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	0a1b      	lsrs	r3, r3, #8
 8006486:	227f      	movs	r2, #127	; 0x7f
 8006488:	4013      	ands	r3, r2
 800648a:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	435a      	muls	r2, r3
 8006492:	4b94      	ldr	r3, [pc, #592]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	0c5b      	lsrs	r3, r3, #17
 8006498:	211f      	movs	r1, #31
 800649a:	400b      	ands	r3, r1
 800649c:	3301      	adds	r3, #1
 800649e:	0019      	movs	r1, r3
 80064a0:	0010      	movs	r0, r2
 80064a2:	f7f9 fe2f 	bl	8000104 <__udivsi3>
 80064a6:	0003      	movs	r3, r0
 80064a8:	617b      	str	r3, [r7, #20]
        break;
 80064aa:	e10d      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d104      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 80064b2:	f7ff fb7b 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 80064b6:	0003      	movs	r3, r0
 80064b8:	617b      	str	r3, [r7, #20]
        break;
 80064ba:	e105      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 80064bc:	4b89      	ldr	r3, [pc, #548]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	2380      	movs	r3, #128	; 0x80
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	401a      	ands	r2, r3
 80064c6:	2380      	movs	r3, #128	; 0x80
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d107      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	2380      	movs	r3, #128	; 0x80
 80064d2:	021b      	lsls	r3, r3, #8
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d102      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 80064d8:	4b83      	ldr	r3, [pc, #524]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80064da:	617b      	str	r3, [r7, #20]
        break;
 80064dc:	e0f4      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	23c0      	movs	r3, #192	; 0xc0
 80064e2:	021b      	lsls	r3, r3, #8
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d000      	beq.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80064e8:	e0ee      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 80064ea:	4b80      	ldr	r3, [pc, #512]	; (80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80064ec:	617b      	str	r3, [r7, #20]
        break;
 80064ee:	e0eb      	b.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80064f0:	4b7c      	ldr	r3, [pc, #496]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064f4:	23c0      	movs	r3, #192	; 0xc0
 80064f6:	031b      	lsls	r3, r3, #12
 80064f8:	4013      	ands	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d104      	bne.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006502:	f7ff fbdf 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 8006506:	0003      	movs	r3, r0
 8006508:	617b      	str	r3, [r7, #20]
        break;
 800650a:	e0df      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800650c:	4b75      	ldr	r3, [pc, #468]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800650e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006510:	2202      	movs	r2, #2
 8006512:	4013      	ands	r3, r2
 8006514:	2b02      	cmp	r3, #2
 8006516:	d108      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	2380      	movs	r3, #128	; 0x80
 800651c:	02db      	lsls	r3, r3, #11
 800651e:	429a      	cmp	r2, r3
 8006520:	d103      	bne.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 8006522:	23fa      	movs	r3, #250	; 0xfa
 8006524:	01db      	lsls	r3, r3, #7
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	e021      	b.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800652a:	4b6e      	ldr	r3, [pc, #440]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	2380      	movs	r3, #128	; 0x80
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	401a      	ands	r2, r3
 8006534:	2380      	movs	r3, #128	; 0x80
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	429a      	cmp	r2, r3
 800653a:	d107      	bne.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	2380      	movs	r3, #128	; 0x80
 8006540:	031b      	lsls	r3, r3, #12
 8006542:	429a      	cmp	r2, r3
 8006544:	d102      	bne.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 8006546:	4b68      	ldr	r3, [pc, #416]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	e010      	b.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800654c:	4b65      	ldr	r3, [pc, #404]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800654e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006550:	2202      	movs	r2, #2
 8006552:	4013      	ands	r3, r2
 8006554:	2b02      	cmp	r3, #2
 8006556:	d000      	beq.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006558:	e0b8      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	23c0      	movs	r3, #192	; 0xc0
 800655e:	031b      	lsls	r3, r3, #12
 8006560:	429a      	cmp	r2, r3
 8006562:	d000      	beq.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006564:	e0b2      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 8006566:	2380      	movs	r3, #128	; 0x80
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	617b      	str	r3, [r7, #20]
        break;
 800656c:	e0ae      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800656e:	e0ad      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006570:	4b5c      	ldr	r3, [pc, #368]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006572:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006574:	23c0      	movs	r3, #192	; 0xc0
 8006576:	039b      	lsls	r3, r3, #14
 8006578:	4013      	ands	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d104      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006582:	f7ff fb9f 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 8006586:	0003      	movs	r3, r0
 8006588:	617b      	str	r3, [r7, #20]
        break;
 800658a:	e0a1      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800658c:	4b55      	ldr	r3, [pc, #340]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800658e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006590:	2202      	movs	r2, #2
 8006592:	4013      	ands	r3, r2
 8006594:	2b02      	cmp	r3, #2
 8006596:	d108      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	2380      	movs	r3, #128	; 0x80
 800659c:	035b      	lsls	r3, r3, #13
 800659e:	429a      	cmp	r2, r3
 80065a0:	d103      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 80065a2:	23fa      	movs	r3, #250	; 0xfa
 80065a4:	01db      	lsls	r3, r3, #7
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	e021      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80065aa:	4b4e      	ldr	r3, [pc, #312]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	2380      	movs	r3, #128	; 0x80
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	401a      	ands	r2, r3
 80065b4:	2380      	movs	r3, #128	; 0x80
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d107      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	2380      	movs	r3, #128	; 0x80
 80065c0:	039b      	lsls	r3, r3, #14
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d102      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 80065c6:	4b48      	ldr	r3, [pc, #288]	; (80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	e010      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80065cc:	4b45      	ldr	r3, [pc, #276]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d0:	2202      	movs	r2, #2
 80065d2:	4013      	ands	r3, r2
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d000      	beq.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80065d8:	e07a      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	23c0      	movs	r3, #192	; 0xc0
 80065de:	039b      	lsls	r3, r3, #14
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d000      	beq.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 80065e4:	e074      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 80065e6:	2380      	movs	r3, #128	; 0x80
 80065e8:	021b      	lsls	r3, r3, #8
 80065ea:	617b      	str	r3, [r7, #20]
        break;
 80065ec:	e070      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80065ee:	e06f      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80065f0:	4b3c      	ldr	r3, [pc, #240]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065f4:	2380      	movs	r3, #128	; 0x80
 80065f6:	03db      	lsls	r3, r3, #15
 80065f8:	4013      	ands	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	2380      	movs	r3, #128	; 0x80
 8006600:	03db      	lsls	r3, r3, #15
 8006602:	429a      	cmp	r2, r3
 8006604:	d11b      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006606:	4b37      	ldr	r3, [pc, #220]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	2380      	movs	r3, #128	; 0x80
 800660c:	045b      	lsls	r3, r3, #17
 800660e:	4013      	ands	r3, r2
 8006610:	d060      	beq.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006612:	4b34      	ldr	r3, [pc, #208]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	0a1b      	lsrs	r3, r3, #8
 8006618:	227f      	movs	r2, #127	; 0x7f
 800661a:	4013      	ands	r3, r2
 800661c:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	435a      	muls	r2, r3
 8006624:	4b2f      	ldr	r3, [pc, #188]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	0e5b      	lsrs	r3, r3, #25
 800662a:	2107      	movs	r1, #7
 800662c:	400b      	ands	r3, r1
 800662e:	3301      	adds	r3, #1
 8006630:	0019      	movs	r1, r3
 8006632:	0010      	movs	r0, r2
 8006634:	f7f9 fd66 	bl	8000104 <__udivsi3>
 8006638:	0003      	movs	r3, r0
 800663a:	617b      	str	r3, [r7, #20]
        break;
 800663c:	e04a      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d147      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006644:	f7ff fb3e 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 8006648:	0003      	movs	r3, r0
 800664a:	617b      	str	r3, [r7, #20]
        break;
 800664c:	e042      	b.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 800664e:	4b25      	ldr	r3, [pc, #148]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006652:	2380      	movs	r3, #128	; 0x80
 8006654:	045b      	lsls	r3, r3, #17
 8006656:	4013      	ands	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	2380      	movs	r3, #128	; 0x80
 800665e:	045b      	lsls	r3, r3, #17
 8006660:	429a      	cmp	r2, r3
 8006662:	d11b      	bne.n	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006664:	4b1f      	ldr	r3, [pc, #124]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	2380      	movs	r3, #128	; 0x80
 800666a:	045b      	lsls	r3, r3, #17
 800666c:	4013      	ands	r3, r2
 800666e:	d033      	beq.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006670:	4b1c      	ldr	r3, [pc, #112]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	0a1b      	lsrs	r3, r3, #8
 8006676:	227f      	movs	r2, #127	; 0x7f
 8006678:	4013      	ands	r3, r2
 800667a:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	435a      	muls	r2, r3
 8006682:	4b18      	ldr	r3, [pc, #96]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	0e5b      	lsrs	r3, r3, #25
 8006688:	2107      	movs	r1, #7
 800668a:	400b      	ands	r3, r1
 800668c:	3301      	adds	r3, #1
 800668e:	0019      	movs	r1, r3
 8006690:	0010      	movs	r0, r2
 8006692:	f7f9 fd37 	bl	8000104 <__udivsi3>
 8006696:	0003      	movs	r3, r0
 8006698:	617b      	str	r3, [r7, #20]
        break;
 800669a:	e01d      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d11a      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 80066a2:	f7ff fb0f 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 80066a6:	0003      	movs	r3, r0
 80066a8:	617b      	str	r3, [r7, #20]
        break;
 80066aa:	e015      	b.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 80066ac:	46c0      	nop			; (mov r8, r8)
 80066ae:	e014      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066b0:	46c0      	nop			; (mov r8, r8)
 80066b2:	e012      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066b4:	46c0      	nop			; (mov r8, r8)
 80066b6:	e010      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066b8:	46c0      	nop			; (mov r8, r8)
 80066ba:	e00e      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066bc:	46c0      	nop			; (mov r8, r8)
 80066be:	e00c      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066c0:	46c0      	nop			; (mov r8, r8)
 80066c2:	e00a      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066c4:	46c0      	nop			; (mov r8, r8)
 80066c6:	e008      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066c8:	46c0      	nop			; (mov r8, r8)
 80066ca:	e006      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066cc:	46c0      	nop			; (mov r8, r8)
 80066ce:	e004      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066d0:	46c0      	nop			; (mov r8, r8)
 80066d2:	e002      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066d4:	46c0      	nop			; (mov r8, r8)
 80066d6:	e000      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80066d8:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 80066da:	697b      	ldr	r3, [r7, #20]
}
 80066dc:	0018      	movs	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	b006      	add	sp, #24
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40021000 	.word	0x40021000
 80066e8:	00f42400 	.word	0x00f42400
 80066ec:	0000bb80 	.word	0x0000bb80

080066f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e0a8      	b.n	8006854 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	2382      	movs	r3, #130	; 0x82
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	429a      	cmp	r2, r3
 8006714:	d009      	beq.n	800672a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	61da      	str	r2, [r3, #28]
 800671c:	e005      	b.n	800672a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	225d      	movs	r2, #93	; 0x5d
 8006734:	5c9b      	ldrb	r3, [r3, r2]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d107      	bne.n	800674c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	225c      	movs	r2, #92	; 0x5c
 8006740:	2100      	movs	r1, #0
 8006742:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	0018      	movs	r0, r3
 8006748:	f7fc f96a 	bl	8002a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	225d      	movs	r2, #93	; 0x5d
 8006750:	2102      	movs	r1, #2
 8006752:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2140      	movs	r1, #64	; 0x40
 8006760:	438a      	bics	r2, r1
 8006762:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	23e0      	movs	r3, #224	; 0xe0
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	429a      	cmp	r2, r3
 800676e:	d902      	bls.n	8006776 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e002      	b.n	800677c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006776:	2380      	movs	r3, #128	; 0x80
 8006778:	015b      	lsls	r3, r3, #5
 800677a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	23f0      	movs	r3, #240	; 0xf0
 8006782:	011b      	lsls	r3, r3, #4
 8006784:	429a      	cmp	r2, r3
 8006786:	d008      	beq.n	800679a <HAL_SPI_Init+0xaa>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	23e0      	movs	r3, #224	; 0xe0
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	429a      	cmp	r2, r3
 8006792:	d002      	beq.n	800679a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	2382      	movs	r3, #130	; 0x82
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	401a      	ands	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6899      	ldr	r1, [r3, #8]
 80067a8:	2384      	movs	r3, #132	; 0x84
 80067aa:	021b      	lsls	r3, r3, #8
 80067ac:	400b      	ands	r3, r1
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	2102      	movs	r1, #2
 80067b6:	400b      	ands	r3, r1
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	2101      	movs	r1, #1
 80067c0:	400b      	ands	r3, r1
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6999      	ldr	r1, [r3, #24]
 80067c8:	2380      	movs	r3, #128	; 0x80
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	400b      	ands	r3, r1
 80067ce:	431a      	orrs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	2138      	movs	r1, #56	; 0x38
 80067d6:	400b      	ands	r3, r1
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	2180      	movs	r1, #128	; 0x80
 80067e0:	400b      	ands	r3, r1
 80067e2:	431a      	orrs	r2, r3
 80067e4:	0011      	movs	r1, r2
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067ea:	2380      	movs	r3, #128	; 0x80
 80067ec:	019b      	lsls	r3, r3, #6
 80067ee:	401a      	ands	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	0c1b      	lsrs	r3, r3, #16
 80067fe:	2204      	movs	r2, #4
 8006800:	401a      	ands	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	2110      	movs	r1, #16
 8006808:	400b      	ands	r3, r1
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006810:	2108      	movs	r1, #8
 8006812:	400b      	ands	r3, r1
 8006814:	431a      	orrs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68d9      	ldr	r1, [r3, #12]
 800681a:	23f0      	movs	r3, #240	; 0xf0
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	400b      	ands	r3, r1
 8006820:	431a      	orrs	r2, r3
 8006822:	0011      	movs	r1, r2
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	2380      	movs	r3, #128	; 0x80
 8006828:	015b      	lsls	r3, r3, #5
 800682a:	401a      	ands	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	69da      	ldr	r2, [r3, #28]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4907      	ldr	r1, [pc, #28]	; (800685c <HAL_SPI_Init+0x16c>)
 8006840:	400a      	ands	r2, r1
 8006842:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	225d      	movs	r2, #93	; 0x5d
 800684e:	2101      	movs	r1, #1
 8006850:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	0018      	movs	r0, r3
 8006856:	46bd      	mov	sp, r7
 8006858:	b004      	add	sp, #16
 800685a:	bd80      	pop	{r7, pc}
 800685c:	fffff7ff 	.word	0xfffff7ff

08006860 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	1dbb      	adds	r3, r7, #6
 800686e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006870:	231f      	movs	r3, #31
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	2200      	movs	r2, #0
 8006876:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	225c      	movs	r2, #92	; 0x5c
 800687c:	5c9b      	ldrb	r3, [r3, r2]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_SPI_Transmit+0x26>
 8006882:	2302      	movs	r3, #2
 8006884:	e140      	b.n	8006b08 <HAL_SPI_Transmit+0x2a8>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	225c      	movs	r2, #92	; 0x5c
 800688a:	2101      	movs	r1, #1
 800688c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800688e:	f7fc fc65 	bl	800315c <HAL_GetTick>
 8006892:	0003      	movs	r3, r0
 8006894:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006896:	2316      	movs	r3, #22
 8006898:	18fb      	adds	r3, r7, r3
 800689a:	1dba      	adds	r2, r7, #6
 800689c:	8812      	ldrh	r2, [r2, #0]
 800689e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	225d      	movs	r2, #93	; 0x5d
 80068a4:	5c9b      	ldrb	r3, [r3, r2]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d004      	beq.n	80068b6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80068ac:	231f      	movs	r3, #31
 80068ae:	18fb      	adds	r3, r7, r3
 80068b0:	2202      	movs	r2, #2
 80068b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80068b4:	e11d      	b.n	8006af2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_SPI_Transmit+0x64>
 80068bc:	1dbb      	adds	r3, r7, #6
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d104      	bne.n	80068ce <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80068c4:	231f      	movs	r3, #31
 80068c6:	18fb      	adds	r3, r7, r3
 80068c8:	2201      	movs	r2, #1
 80068ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80068cc:	e111      	b.n	8006af2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	225d      	movs	r2, #93	; 0x5d
 80068d2:	2103      	movs	r1, #3
 80068d4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1dba      	adds	r2, r7, #6
 80068e6:	8812      	ldrh	r2, [r2, #0]
 80068e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	1dba      	adds	r2, r7, #6
 80068ee:	8812      	ldrh	r2, [r2, #0]
 80068f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2244      	movs	r2, #68	; 0x44
 80068fc:	2100      	movs	r1, #0
 80068fe:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2246      	movs	r2, #70	; 0x46
 8006904:	2100      	movs	r1, #0
 8006906:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	2380      	movs	r3, #128	; 0x80
 800691a:	021b      	lsls	r3, r3, #8
 800691c:	429a      	cmp	r2, r3
 800691e:	d110      	bne.n	8006942 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2140      	movs	r1, #64	; 0x40
 800692c:	438a      	bics	r2, r1
 800692e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2180      	movs	r1, #128	; 0x80
 800693c:	01c9      	lsls	r1, r1, #7
 800693e:	430a      	orrs	r2, r1
 8006940:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2240      	movs	r2, #64	; 0x40
 800694a:	4013      	ands	r3, r2
 800694c:	2b40      	cmp	r3, #64	; 0x40
 800694e:	d007      	beq.n	8006960 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2140      	movs	r1, #64	; 0x40
 800695c:	430a      	orrs	r2, r1
 800695e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	23e0      	movs	r3, #224	; 0xe0
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	429a      	cmp	r2, r3
 800696a:	d94e      	bls.n	8006a0a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d004      	beq.n	800697e <HAL_SPI_Transmit+0x11e>
 8006974:	2316      	movs	r3, #22
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d13f      	bne.n	80069fe <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	881a      	ldrh	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	1c9a      	adds	r2, r3, #2
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006998:	b29b      	uxth	r3, r3
 800699a:	3b01      	subs	r3, #1
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069a2:	e02c      	b.n	80069fe <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2202      	movs	r2, #2
 80069ac:	4013      	ands	r3, r2
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d112      	bne.n	80069d8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	881a      	ldrh	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	1c9a      	adds	r2, r3, #2
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069d6:	e012      	b.n	80069fe <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069d8:	f7fc fbc0 	bl	800315c <HAL_GetTick>
 80069dc:	0002      	movs	r2, r0
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d802      	bhi.n	80069ee <HAL_SPI_Transmit+0x18e>
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	3301      	adds	r3, #1
 80069ec:	d102      	bne.n	80069f4 <HAL_SPI_Transmit+0x194>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80069f4:	231f      	movs	r3, #31
 80069f6:	18fb      	adds	r3, r7, r3
 80069f8:	2203      	movs	r2, #3
 80069fa:	701a      	strb	r2, [r3, #0]
          goto error;
 80069fc:	e079      	b.n	8006af2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1cd      	bne.n	80069a4 <HAL_SPI_Transmit+0x144>
 8006a08:	e04f      	b.n	8006aaa <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d004      	beq.n	8006a1c <HAL_SPI_Transmit+0x1bc>
 8006a12:	2316      	movs	r3, #22
 8006a14:	18fb      	adds	r3, r7, r3
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d141      	bne.n	8006aa0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	330c      	adds	r3, #12
 8006a26:	7812      	ldrb	r2, [r2, #0]
 8006a28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006a42:	e02d      	b.n	8006aa0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d113      	bne.n	8006a7a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	7812      	ldrb	r2, [r2, #0]
 8006a5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a78:	e012      	b.n	8006aa0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a7a:	f7fc fb6f 	bl	800315c <HAL_GetTick>
 8006a7e:	0002      	movs	r2, r0
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d802      	bhi.n	8006a90 <HAL_SPI_Transmit+0x230>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	d102      	bne.n	8006a96 <HAL_SPI_Transmit+0x236>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d104      	bne.n	8006aa0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006a96:	231f      	movs	r3, #31
 8006a98:	18fb      	adds	r3, r7, r3
 8006a9a:	2203      	movs	r2, #3
 8006a9c:	701a      	strb	r2, [r3, #0]
          goto error;
 8006a9e:	e028      	b.n	8006af2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1cc      	bne.n	8006a44 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f001 f9cb 	bl	8007e4c <SPI_EndRxTxTransaction>
 8006ab6:	1e03      	subs	r3, r0, #0
 8006ab8:	d002      	beq.n	8006ac0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2220      	movs	r2, #32
 8006abe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10a      	bne.n	8006ade <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ac8:	2300      	movs	r3, #0
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	613b      	str	r3, [r7, #16]
 8006adc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d004      	beq.n	8006af0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006ae6:	231f      	movs	r3, #31
 8006ae8:	18fb      	adds	r3, r7, r3
 8006aea:	2201      	movs	r2, #1
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	e000      	b.n	8006af2 <HAL_SPI_Transmit+0x292>
  }

error:
 8006af0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	225d      	movs	r2, #93	; 0x5d
 8006af6:	2101      	movs	r1, #1
 8006af8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	225c      	movs	r2, #92	; 0x5c
 8006afe:	2100      	movs	r1, #0
 8006b00:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006b02:	231f      	movs	r3, #31
 8006b04:	18fb      	adds	r3, r7, r3
 8006b06:	781b      	ldrb	r3, [r3, #0]
}
 8006b08:	0018      	movs	r0, r3
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b008      	add	sp, #32
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b10:	b590      	push	{r4, r7, lr}
 8006b12:	b089      	sub	sp, #36	; 0x24
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	1dbb      	adds	r3, r7, #6
 8006b1e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b20:	2317      	movs	r3, #23
 8006b22:	18fb      	adds	r3, r7, r3
 8006b24:	2200      	movs	r2, #0
 8006b26:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	2382      	movs	r3, #130	; 0x82
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d113      	bne.n	8006b5c <HAL_SPI_Receive+0x4c>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10f      	bne.n	8006b5c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	225d      	movs	r2, #93	; 0x5d
 8006b40:	2104      	movs	r1, #4
 8006b42:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b44:	1dbb      	adds	r3, r7, #6
 8006b46:	881c      	ldrh	r4, [r3, #0]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	68b9      	ldr	r1, [r7, #8]
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	0023      	movs	r3, r4
 8006b54:	f000 f928 	bl	8006da8 <HAL_SPI_TransmitReceive>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	e11c      	b.n	8006d96 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	225c      	movs	r2, #92	; 0x5c
 8006b60:	5c9b      	ldrb	r3, [r3, r2]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d101      	bne.n	8006b6a <HAL_SPI_Receive+0x5a>
 8006b66:	2302      	movs	r3, #2
 8006b68:	e115      	b.n	8006d96 <HAL_SPI_Receive+0x286>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	225c      	movs	r2, #92	; 0x5c
 8006b6e:	2101      	movs	r1, #1
 8006b70:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b72:	f7fc faf3 	bl	800315c <HAL_GetTick>
 8006b76:	0003      	movs	r3, r0
 8006b78:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	225d      	movs	r2, #93	; 0x5d
 8006b7e:	5c9b      	ldrb	r3, [r3, r2]
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d004      	beq.n	8006b90 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8006b86:	2317      	movs	r3, #23
 8006b88:	18fb      	adds	r3, r7, r3
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b8e:	e0f7      	b.n	8006d80 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <HAL_SPI_Receive+0x8e>
 8006b96:	1dbb      	adds	r3, r7, #6
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d104      	bne.n	8006ba8 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8006b9e:	2317      	movs	r3, #23
 8006ba0:	18fb      	adds	r3, r7, r3
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ba6:	e0eb      	b.n	8006d80 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	225d      	movs	r2, #93	; 0x5d
 8006bac:	2104      	movs	r1, #4
 8006bae:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	1dba      	adds	r2, r7, #6
 8006bc0:	2144      	movs	r1, #68	; 0x44
 8006bc2:	8812      	ldrh	r2, [r2, #0]
 8006bc4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	1dba      	adds	r2, r7, #6
 8006bca:	2146      	movs	r1, #70	; 0x46
 8006bcc:	8812      	ldrh	r2, [r2, #0]
 8006bce:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	23e0      	movs	r3, #224	; 0xe0
 8006bf4:	00db      	lsls	r3, r3, #3
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d908      	bls.n	8006c0c <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4966      	ldr	r1, [pc, #408]	; (8006da0 <HAL_SPI_Receive+0x290>)
 8006c06:	400a      	ands	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
 8006c0a:	e008      	b.n	8006c1e <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2180      	movs	r1, #128	; 0x80
 8006c18:	0149      	lsls	r1, r1, #5
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	2380      	movs	r3, #128	; 0x80
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d10f      	bne.n	8006c4a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2140      	movs	r1, #64	; 0x40
 8006c36:	438a      	bics	r2, r1
 8006c38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4957      	ldr	r1, [pc, #348]	; (8006da4 <HAL_SPI_Receive+0x294>)
 8006c46:	400a      	ands	r2, r1
 8006c48:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2240      	movs	r2, #64	; 0x40
 8006c52:	4013      	ands	r3, r2
 8006c54:	2b40      	cmp	r3, #64	; 0x40
 8006c56:	d007      	beq.n	8006c68 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2140      	movs	r1, #64	; 0x40
 8006c64:	430a      	orrs	r2, r1
 8006c66:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	23e0      	movs	r3, #224	; 0xe0
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d900      	bls.n	8006c76 <HAL_SPI_Receive+0x166>
 8006c74:	e069      	b.n	8006d4a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c76:	e031      	b.n	8006cdc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	4013      	ands	r3, r2
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d117      	bne.n	8006cb6 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	330c      	adds	r3, #12
 8006c8c:	001a      	movs	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	7812      	ldrb	r2, [r2, #0]
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2246      	movs	r2, #70	; 0x46
 8006ca6:	5a9b      	ldrh	r3, [r3, r2]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b299      	uxth	r1, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2246      	movs	r2, #70	; 0x46
 8006cb2:	5299      	strh	r1, [r3, r2]
 8006cb4:	e012      	b.n	8006cdc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cb6:	f7fc fa51 	bl	800315c <HAL_GetTick>
 8006cba:	0002      	movs	r2, r0
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d802      	bhi.n	8006ccc <HAL_SPI_Receive+0x1bc>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	d102      	bne.n	8006cd2 <HAL_SPI_Receive+0x1c2>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d104      	bne.n	8006cdc <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8006cd2:	2317      	movs	r3, #23
 8006cd4:	18fb      	adds	r3, r7, r3
 8006cd6:	2203      	movs	r2, #3
 8006cd8:	701a      	strb	r2, [r3, #0]
          goto error;
 8006cda:	e051      	b.n	8006d80 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2246      	movs	r2, #70	; 0x46
 8006ce0:	5a9b      	ldrh	r3, [r3, r2]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1c7      	bne.n	8006c78 <HAL_SPI_Receive+0x168>
 8006ce8:	e035      	b.n	8006d56 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d115      	bne.n	8006d24 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	b292      	uxth	r2, r2
 8006d04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	1c9a      	adds	r2, r3, #2
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2246      	movs	r2, #70	; 0x46
 8006d14:	5a9b      	ldrh	r3, [r3, r2]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b299      	uxth	r1, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2246      	movs	r2, #70	; 0x46
 8006d20:	5299      	strh	r1, [r3, r2]
 8006d22:	e012      	b.n	8006d4a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d24:	f7fc fa1a 	bl	800315c <HAL_GetTick>
 8006d28:	0002      	movs	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d802      	bhi.n	8006d3a <HAL_SPI_Receive+0x22a>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	3301      	adds	r3, #1
 8006d38:	d102      	bne.n	8006d40 <HAL_SPI_Receive+0x230>
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d104      	bne.n	8006d4a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8006d40:	2317      	movs	r3, #23
 8006d42:	18fb      	adds	r3, r7, r3
 8006d44:	2203      	movs	r2, #3
 8006d46:	701a      	strb	r2, [r3, #0]
          goto error;
 8006d48:	e01a      	b.n	8006d80 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2246      	movs	r2, #70	; 0x46
 8006d4e:	5a9b      	ldrh	r3, [r3, r2]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1c9      	bne.n	8006cea <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f001 f817 	bl	8007d90 <SPI_EndRxTransaction>
 8006d62:	1e03      	subs	r3, r0, #0
 8006d64:	d002      	beq.n	8006d6c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d004      	beq.n	8006d7e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8006d74:	2317      	movs	r3, #23
 8006d76:	18fb      	adds	r3, r7, r3
 8006d78:	2201      	movs	r2, #1
 8006d7a:	701a      	strb	r2, [r3, #0]
 8006d7c:	e000      	b.n	8006d80 <HAL_SPI_Receive+0x270>
  }

error :
 8006d7e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	225d      	movs	r2, #93	; 0x5d
 8006d84:	2101      	movs	r1, #1
 8006d86:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	225c      	movs	r2, #92	; 0x5c
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006d90:	2317      	movs	r3, #23
 8006d92:	18fb      	adds	r3, r7, r3
 8006d94:	781b      	ldrb	r3, [r3, #0]
}
 8006d96:	0018      	movs	r0, r3
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	b007      	add	sp, #28
 8006d9c:	bd90      	pop	{r4, r7, pc}
 8006d9e:	46c0      	nop			; (mov r8, r8)
 8006da0:	ffffefff 	.word	0xffffefff
 8006da4:	ffffbfff 	.word	0xffffbfff

08006da8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08a      	sub	sp, #40	; 0x28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	001a      	movs	r2, r3
 8006db6:	1cbb      	adds	r3, r7, #2
 8006db8:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006dbe:	2323      	movs	r3, #35	; 0x23
 8006dc0:	18fb      	adds	r3, r7, r3
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	225c      	movs	r2, #92	; 0x5c
 8006dca:	5c9b      	ldrb	r3, [r3, r2]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_SPI_TransmitReceive+0x2c>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e1b5      	b.n	8007140 <HAL_SPI_TransmitReceive+0x398>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	225c      	movs	r2, #92	; 0x5c
 8006dd8:	2101      	movs	r1, #1
 8006dda:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ddc:	f7fc f9be 	bl	800315c <HAL_GetTick>
 8006de0:	0003      	movs	r3, r0
 8006de2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006de4:	201b      	movs	r0, #27
 8006de6:	183b      	adds	r3, r7, r0
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	215d      	movs	r1, #93	; 0x5d
 8006dec:	5c52      	ldrb	r2, [r2, r1]
 8006dee:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006df6:	2312      	movs	r3, #18
 8006df8:	18fb      	adds	r3, r7, r3
 8006dfa:	1cba      	adds	r2, r7, #2
 8006dfc:	8812      	ldrh	r2, [r2, #0]
 8006dfe:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e00:	183b      	adds	r3, r7, r0
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d011      	beq.n	8006e2c <HAL_SPI_TransmitReceive+0x84>
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	2382      	movs	r3, #130	; 0x82
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d107      	bne.n	8006e22 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d103      	bne.n	8006e22 <HAL_SPI_TransmitReceive+0x7a>
 8006e1a:	183b      	adds	r3, r7, r0
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d004      	beq.n	8006e2c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006e22:	2323      	movs	r3, #35	; 0x23
 8006e24:	18fb      	adds	r3, r7, r3
 8006e26:	2202      	movs	r2, #2
 8006e28:	701a      	strb	r2, [r3, #0]
    goto error;
 8006e2a:	e17e      	b.n	800712a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d006      	beq.n	8006e40 <HAL_SPI_TransmitReceive+0x98>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_SPI_TransmitReceive+0x98>
 8006e38:	1cbb      	adds	r3, r7, #2
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006e40:	2323      	movs	r3, #35	; 0x23
 8006e42:	18fb      	adds	r3, r7, r3
 8006e44:	2201      	movs	r2, #1
 8006e46:	701a      	strb	r2, [r3, #0]
    goto error;
 8006e48:	e16f      	b.n	800712a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	225d      	movs	r2, #93	; 0x5d
 8006e4e:	5c9b      	ldrb	r3, [r3, r2]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d003      	beq.n	8006e5e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	225d      	movs	r2, #93	; 0x5d
 8006e5a:	2105      	movs	r1, #5
 8006e5c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	1cba      	adds	r2, r7, #2
 8006e6e:	2146      	movs	r1, #70	; 0x46
 8006e70:	8812      	ldrh	r2, [r2, #0]
 8006e72:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	1cba      	adds	r2, r7, #2
 8006e78:	2144      	movs	r1, #68	; 0x44
 8006e7a:	8812      	ldrh	r2, [r2, #0]
 8006e7c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	1cba      	adds	r2, r7, #2
 8006e88:	8812      	ldrh	r2, [r2, #0]
 8006e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	1cba      	adds	r2, r7, #2
 8006e90:	8812      	ldrh	r2, [r2, #0]
 8006e92:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	23e0      	movs	r3, #224	; 0xe0
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d908      	bls.n	8006ebe <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	49a4      	ldr	r1, [pc, #656]	; (8007148 <HAL_SPI_TransmitReceive+0x3a0>)
 8006eb8:	400a      	ands	r2, r1
 8006eba:	605a      	str	r2, [r3, #4]
 8006ebc:	e008      	b.n	8006ed0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2180      	movs	r1, #128	; 0x80
 8006eca:	0149      	lsls	r1, r1, #5
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2240      	movs	r2, #64	; 0x40
 8006ed8:	4013      	ands	r3, r2
 8006eda:	2b40      	cmp	r3, #64	; 0x40
 8006edc:	d007      	beq.n	8006eee <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2140      	movs	r1, #64	; 0x40
 8006eea:	430a      	orrs	r2, r1
 8006eec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	23e0      	movs	r3, #224	; 0xe0
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d800      	bhi.n	8006efc <HAL_SPI_TransmitReceive+0x154>
 8006efa:	e07f      	b.n	8006ffc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <HAL_SPI_TransmitReceive+0x168>
 8006f04:	2312      	movs	r3, #18
 8006f06:	18fb      	adds	r3, r7, r3
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d000      	beq.n	8006f10 <HAL_SPI_TransmitReceive+0x168>
 8006f0e:	e069      	b.n	8006fe4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f14:	881a      	ldrh	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f20:	1c9a      	adds	r2, r3, #2
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f34:	e056      	b.n	8006fe4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d11b      	bne.n	8006f7c <HAL_SPI_TransmitReceive+0x1d4>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d016      	beq.n	8006f7c <HAL_SPI_TransmitReceive+0x1d4>
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d113      	bne.n	8006f7c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	881a      	ldrh	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	1c9a      	adds	r2, r3, #2
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	2201      	movs	r2, #1
 8006f84:	4013      	ands	r3, r2
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d11c      	bne.n	8006fc4 <HAL_SPI_TransmitReceive+0x21c>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2246      	movs	r2, #70	; 0x46
 8006f8e:	5a9b      	ldrh	r3, [r3, r2]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d016      	beq.n	8006fc4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa0:	b292      	uxth	r2, r2
 8006fa2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa8:	1c9a      	adds	r2, r3, #2
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2246      	movs	r2, #70	; 0x46
 8006fb2:	5a9b      	ldrh	r3, [r3, r2]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b299      	uxth	r1, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2246      	movs	r2, #70	; 0x46
 8006fbe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fc4:	f7fc f8ca 	bl	800315c <HAL_GetTick>
 8006fc8:	0002      	movs	r2, r0
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d807      	bhi.n	8006fe4 <HAL_SPI_TransmitReceive+0x23c>
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	d004      	beq.n	8006fe4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006fda:	2323      	movs	r3, #35	; 0x23
 8006fdc:	18fb      	adds	r3, r7, r3
 8006fde:	2203      	movs	r2, #3
 8006fe0:	701a      	strb	r2, [r3, #0]
        goto error;
 8006fe2:	e0a2      	b.n	800712a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1a3      	bne.n	8006f36 <HAL_SPI_TransmitReceive+0x18e>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2246      	movs	r2, #70	; 0x46
 8006ff2:	5a9b      	ldrh	r3, [r3, r2]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d19d      	bne.n	8006f36 <HAL_SPI_TransmitReceive+0x18e>
 8006ffa:	e085      	b.n	8007108 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d005      	beq.n	8007010 <HAL_SPI_TransmitReceive+0x268>
 8007004:	2312      	movs	r3, #18
 8007006:	18fb      	adds	r3, r7, r3
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d000      	beq.n	8007010 <HAL_SPI_TransmitReceive+0x268>
 800700e:	e070      	b.n	80070f2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	330c      	adds	r3, #12
 800701a:	7812      	ldrb	r2, [r2, #0]
 800701c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007036:	e05c      	b.n	80070f2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	2202      	movs	r2, #2
 8007040:	4013      	ands	r3, r2
 8007042:	2b02      	cmp	r3, #2
 8007044:	d11c      	bne.n	8007080 <HAL_SPI_TransmitReceive+0x2d8>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800704a:	b29b      	uxth	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d017      	beq.n	8007080 <HAL_SPI_TransmitReceive+0x2d8>
 8007050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007052:	2b01      	cmp	r3, #1
 8007054:	d114      	bne.n	8007080 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	330c      	adds	r3, #12
 8007060:	7812      	ldrb	r2, [r2, #0]
 8007062:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007072:	b29b      	uxth	r3, r3
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2201      	movs	r2, #1
 8007088:	4013      	ands	r3, r2
 800708a:	2b01      	cmp	r3, #1
 800708c:	d11e      	bne.n	80070cc <HAL_SPI_TransmitReceive+0x324>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2246      	movs	r2, #70	; 0x46
 8007092:	5a9b      	ldrh	r3, [r3, r2]
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d018      	beq.n	80070cc <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	330c      	adds	r3, #12
 80070a0:	001a      	movs	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	b2d2      	uxtb	r2, r2
 80070aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2246      	movs	r2, #70	; 0x46
 80070ba:	5a9b      	ldrh	r3, [r3, r2]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	b299      	uxth	r1, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2246      	movs	r2, #70	; 0x46
 80070c6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070c8:	2301      	movs	r3, #1
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070cc:	f7fc f846 	bl	800315c <HAL_GetTick>
 80070d0:	0002      	movs	r2, r0
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d8:	429a      	cmp	r2, r3
 80070da:	d802      	bhi.n	80070e2 <HAL_SPI_TransmitReceive+0x33a>
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	3301      	adds	r3, #1
 80070e0:	d102      	bne.n	80070e8 <HAL_SPI_TransmitReceive+0x340>
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d104      	bne.n	80070f2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80070e8:	2323      	movs	r3, #35	; 0x23
 80070ea:	18fb      	adds	r3, r7, r3
 80070ec:	2203      	movs	r2, #3
 80070ee:	701a      	strb	r2, [r3, #0]
        goto error;
 80070f0:	e01b      	b.n	800712a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d19d      	bne.n	8007038 <HAL_SPI_TransmitReceive+0x290>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2246      	movs	r2, #70	; 0x46
 8007100:	5a9b      	ldrh	r3, [r3, r2]
 8007102:	b29b      	uxth	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d197      	bne.n	8007038 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	0018      	movs	r0, r3
 8007110:	f000 fe9c 	bl	8007e4c <SPI_EndRxTxTransaction>
 8007114:	1e03      	subs	r3, r0, #0
 8007116:	d007      	beq.n	8007128 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8007118:	2323      	movs	r3, #35	; 0x23
 800711a:	18fb      	adds	r3, r7, r3
 800711c:	2201      	movs	r2, #1
 800711e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2220      	movs	r2, #32
 8007124:	661a      	str	r2, [r3, #96]	; 0x60
 8007126:	e000      	b.n	800712a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8007128:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	225d      	movs	r2, #93	; 0x5d
 800712e:	2101      	movs	r1, #1
 8007130:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	225c      	movs	r2, #92	; 0x5c
 8007136:	2100      	movs	r1, #0
 8007138:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800713a:	2323      	movs	r3, #35	; 0x23
 800713c:	18fb      	adds	r3, r7, r3
 800713e:	781b      	ldrb	r3, [r3, #0]
}
 8007140:	0018      	movs	r0, r3
 8007142:	46bd      	mov	sp, r7
 8007144:	b00a      	add	sp, #40	; 0x28
 8007146:	bd80      	pop	{r7, pc}
 8007148:	ffffefff 	.word	0xffffefff

0800714c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800714c:	b590      	push	{r4, r7, lr}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	1dbb      	adds	r3, r7, #6
 8007158:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800715a:	2317      	movs	r3, #23
 800715c:	18fb      	adds	r3, r7, r3
 800715e:	2200      	movs	r2, #0
 8007160:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d112      	bne.n	8007190 <HAL_SPI_Receive_DMA+0x44>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	2382      	movs	r3, #130	; 0x82
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	429a      	cmp	r2, r3
 8007174:	d10c      	bne.n	8007190 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	225d      	movs	r2, #93	; 0x5d
 800717a:	2104      	movs	r1, #4
 800717c:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800717e:	1dbb      	adds	r3, r7, #6
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f91e 	bl	80073c8 <HAL_SPI_TransmitReceive_DMA>
 800718c:	0003      	movs	r3, r0
 800718e:	e10b      	b.n	80073a8 <HAL_SPI_Receive_DMA+0x25c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	225c      	movs	r2, #92	; 0x5c
 8007194:	5c9b      	ldrb	r3, [r3, r2]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d101      	bne.n	800719e <HAL_SPI_Receive_DMA+0x52>
 800719a:	2302      	movs	r3, #2
 800719c:	e104      	b.n	80073a8 <HAL_SPI_Receive_DMA+0x25c>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	225c      	movs	r2, #92	; 0x5c
 80071a2:	2101      	movs	r1, #1
 80071a4:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	225d      	movs	r2, #93	; 0x5d
 80071aa:	5c9b      	ldrb	r3, [r3, r2]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d004      	beq.n	80071bc <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80071b2:	2317      	movs	r3, #23
 80071b4:	18fb      	adds	r3, r7, r3
 80071b6:	2202      	movs	r2, #2
 80071b8:	701a      	strb	r2, [r3, #0]
    goto error;
 80071ba:	e0ee      	b.n	800739a <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_SPI_Receive_DMA+0x7e>
 80071c2:	1dbb      	adds	r3, r7, #6
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d104      	bne.n	80071d4 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 80071ca:	2317      	movs	r3, #23
 80071cc:	18fb      	adds	r3, r7, r3
 80071ce:	2201      	movs	r2, #1
 80071d0:	701a      	strb	r2, [r3, #0]
    goto error;
 80071d2:	e0e2      	b.n	800739a <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	225d      	movs	r2, #93	; 0x5d
 80071d8:	2104      	movs	r1, #4
 80071da:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	1dba      	adds	r2, r7, #6
 80071ec:	2144      	movs	r1, #68	; 0x44
 80071ee:	8812      	ldrh	r2, [r2, #0]
 80071f0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	1dba      	adds	r2, r7, #6
 80071f6:	2146      	movs	r1, #70	; 0x46
 80071f8:	8812      	ldrh	r2, [r2, #0]
 80071fa:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	2380      	movs	r3, #128	; 0x80
 800721a:	021b      	lsls	r3, r3, #8
 800721c:	429a      	cmp	r2, r3
 800721e:	d10f      	bne.n	8007240 <HAL_SPI_Receive_DMA+0xf4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2140      	movs	r1, #64	; 0x40
 800722c:	438a      	bics	r2, r1
 800722e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	495d      	ldr	r1, [pc, #372]	; (80073b0 <HAL_SPI_Receive_DMA+0x264>)
 800723c:	400a      	ands	r2, r1
 800723e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	495a      	ldr	r1, [pc, #360]	; (80073b4 <HAL_SPI_Receive_DMA+0x268>)
 800724c:	400a      	ands	r2, r1
 800724e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	68da      	ldr	r2, [r3, #12]
 8007254:	23e0      	movs	r3, #224	; 0xe0
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	429a      	cmp	r2, r3
 800725a:	d908      	bls.n	800726e <HAL_SPI_Receive_DMA+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4954      	ldr	r1, [pc, #336]	; (80073b8 <HAL_SPI_Receive_DMA+0x26c>)
 8007268:	400a      	ands	r2, r1
 800726a:	605a      	str	r2, [r3, #4]
 800726c:	e045      	b.n	80072fa <HAL_SPI_Receive_DMA+0x1ae>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2180      	movs	r1, #128	; 0x80
 800727a:	0149      	lsls	r1, r1, #5
 800727c:	430a      	orrs	r2, r1
 800727e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007284:	699a      	ldr	r2, [r3, #24]
 8007286:	2380      	movs	r3, #128	; 0x80
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	429a      	cmp	r2, r3
 800728c:	d135      	bne.n	80072fa <HAL_SPI_Receive_DMA+0x1ae>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4947      	ldr	r1, [pc, #284]	; (80073b8 <HAL_SPI_Receive_DMA+0x26c>)
 800729a:	400a      	ands	r2, r1
 800729c:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2246      	movs	r2, #70	; 0x46
 80072a2:	5a9b      	ldrh	r3, [r3, r2]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	001a      	movs	r2, r3
 80072a8:	2301      	movs	r3, #1
 80072aa:	4013      	ands	r3, r2
 80072ac:	d111      	bne.n	80072d2 <HAL_SPI_Receive_DMA+0x186>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	493e      	ldr	r1, [pc, #248]	; (80073b4 <HAL_SPI_Receive_DMA+0x268>)
 80072ba:	400a      	ands	r2, r1
 80072bc:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2246      	movs	r2, #70	; 0x46
 80072c2:	5a9b      	ldrh	r3, [r3, r2]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	085b      	lsrs	r3, r3, #1
 80072c8:	b299      	uxth	r1, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2246      	movs	r2, #70	; 0x46
 80072ce:	5299      	strh	r1, [r3, r2]
 80072d0:	e013      	b.n	80072fa <HAL_SPI_Receive_DMA+0x1ae>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2180      	movs	r1, #128	; 0x80
 80072de:	0189      	lsls	r1, r1, #6
 80072e0:	430a      	orrs	r2, r1
 80072e2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2246      	movs	r2, #70	; 0x46
 80072e8:	5a9b      	ldrh	r3, [r3, r2]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	085b      	lsrs	r3, r3, #1
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3301      	adds	r3, #1
 80072f2:	b299      	uxth	r1, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2246      	movs	r2, #70	; 0x46
 80072f8:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fe:	4a2f      	ldr	r2, [pc, #188]	; (80073bc <HAL_SPI_Receive_DMA+0x270>)
 8007300:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007306:	4a2e      	ldr	r2, [pc, #184]	; (80073c0 <HAL_SPI_Receive_DMA+0x274>)
 8007308:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800730e:	4a2d      	ldr	r2, [pc, #180]	; (80073c4 <HAL_SPI_Receive_DMA+0x278>)
 8007310:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007316:	2200      	movs	r2, #0
 8007318:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	330c      	adds	r3, #12
 8007324:	0019      	movs	r1, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2246      	movs	r2, #70	; 0x46
 8007330:	5a9b      	ldrh	r3, [r3, r2]
 8007332:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007334:	0022      	movs	r2, r4
 8007336:	f7fc fb1d 	bl	8003974 <HAL_DMA_Start_IT>
 800733a:	1e03      	subs	r3, r0, #0
 800733c:	d00e      	beq.n	800735c <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007342:	2210      	movs	r2, #16
 8007344:	431a      	orrs	r2, r3
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800734a:	2317      	movs	r3, #23
 800734c:	18fb      	adds	r3, r7, r3
 800734e:	2201      	movs	r2, #1
 8007350:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	225d      	movs	r2, #93	; 0x5d
 8007356:	2101      	movs	r1, #1
 8007358:	5499      	strb	r1, [r3, r2]
    goto error;
 800735a:	e01e      	b.n	800739a <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2240      	movs	r2, #64	; 0x40
 8007364:	4013      	ands	r3, r2
 8007366:	2b40      	cmp	r3, #64	; 0x40
 8007368:	d007      	beq.n	800737a <HAL_SPI_Receive_DMA+0x22e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2140      	movs	r1, #64	; 0x40
 8007376:	430a      	orrs	r2, r1
 8007378:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2120      	movs	r1, #32
 8007386:	430a      	orrs	r2, r1
 8007388:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2101      	movs	r1, #1
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	225c      	movs	r2, #92	; 0x5c
 800739e:	2100      	movs	r1, #0
 80073a0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80073a2:	2317      	movs	r3, #23
 80073a4:	18fb      	adds	r3, r7, r3
 80073a6:	781b      	ldrb	r3, [r3, #0]
}
 80073a8:	0018      	movs	r0, r3
 80073aa:	46bd      	mov	sp, r7
 80073ac:	b007      	add	sp, #28
 80073ae:	bd90      	pop	{r4, r7, pc}
 80073b0:	ffffbfff 	.word	0xffffbfff
 80073b4:	ffffdfff 	.word	0xffffdfff
 80073b8:	ffffefff 	.word	0xffffefff
 80073bc:	08007a9f 	.word	0x08007a9f
 80073c0:	08007959 	.word	0x08007959
 80073c4:	08007adb 	.word	0x08007adb

080073c8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80073c8:	b590      	push	{r4, r7, lr}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	001a      	movs	r2, r3
 80073d6:	1cbb      	adds	r3, r7, #2
 80073d8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073da:	2317      	movs	r3, #23
 80073dc:	18fb      	adds	r3, r7, r3
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	225c      	movs	r2, #92	; 0x5c
 80073e6:	5c9b      	ldrb	r3, [r3, r2]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_SPI_TransmitReceive_DMA+0x28>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e186      	b.n	80076fe <HAL_SPI_TransmitReceive_DMA+0x336>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	225c      	movs	r2, #92	; 0x5c
 80073f4:	2101      	movs	r1, #1
 80073f6:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80073f8:	2016      	movs	r0, #22
 80073fa:	183b      	adds	r3, r7, r0
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	215d      	movs	r1, #93	; 0x5d
 8007400:	5c52      	ldrb	r2, [r2, r1]
 8007402:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800740a:	0001      	movs	r1, r0
 800740c:	187b      	adds	r3, r7, r1
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d011      	beq.n	8007438 <HAL_SPI_TransmitReceive_DMA+0x70>
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	2382      	movs	r3, #130	; 0x82
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	429a      	cmp	r2, r3
 800741c:	d107      	bne.n	800742e <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d103      	bne.n	800742e <HAL_SPI_TransmitReceive_DMA+0x66>
 8007426:	187b      	adds	r3, r7, r1
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b04      	cmp	r3, #4
 800742c:	d004      	beq.n	8007438 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800742e:	2317      	movs	r3, #23
 8007430:	18fb      	adds	r3, r7, r3
 8007432:	2202      	movs	r2, #2
 8007434:	701a      	strb	r2, [r3, #0]
    goto error;
 8007436:	e15b      	b.n	80076f0 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d006      	beq.n	800744c <HAL_SPI_TransmitReceive_DMA+0x84>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <HAL_SPI_TransmitReceive_DMA+0x84>
 8007444:	1cbb      	adds	r3, r7, #2
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d104      	bne.n	8007456 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 800744c:	2317      	movs	r3, #23
 800744e:	18fb      	adds	r3, r7, r3
 8007450:	2201      	movs	r2, #1
 8007452:	701a      	strb	r2, [r3, #0]
    goto error;
 8007454:	e14c      	b.n	80076f0 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	225d      	movs	r2, #93	; 0x5d
 800745a:	5c9b      	ldrb	r3, [r3, r2]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b04      	cmp	r3, #4
 8007460:	d003      	beq.n	800746a <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	225d      	movs	r2, #93	; 0x5d
 8007466:	2105      	movs	r1, #5
 8007468:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	1cba      	adds	r2, r7, #2
 800747a:	8812      	ldrh	r2, [r2, #0]
 800747c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	1cba      	adds	r2, r7, #2
 8007482:	8812      	ldrh	r2, [r2, #0]
 8007484:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	1cba      	adds	r2, r7, #2
 8007490:	2144      	movs	r1, #68	; 0x44
 8007492:	8812      	ldrh	r2, [r2, #0]
 8007494:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	1cba      	adds	r2, r7, #2
 800749a:	2146      	movs	r1, #70	; 0x46
 800749c:	8812      	ldrh	r2, [r2, #0]
 800749e:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4994      	ldr	r1, [pc, #592]	; (8007708 <HAL_SPI_TransmitReceive_DMA+0x340>)
 80074b8:	400a      	ands	r2, r1
 80074ba:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	68da      	ldr	r2, [r3, #12]
 80074c0:	23e0      	movs	r3, #224	; 0xe0
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d908      	bls.n	80074da <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	498e      	ldr	r1, [pc, #568]	; (800770c <HAL_SPI_TransmitReceive_DMA+0x344>)
 80074d4:	400a      	ands	r2, r1
 80074d6:	605a      	str	r2, [r3, #4]
 80074d8:	e074      	b.n	80075c4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2180      	movs	r1, #128	; 0x80
 80074e6:	0149      	lsls	r1, r1, #5
 80074e8:	430a      	orrs	r2, r1
 80074ea:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	2380      	movs	r3, #128	; 0x80
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d127      	bne.n	800754a <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80074fe:	001a      	movs	r2, r3
 8007500:	2301      	movs	r3, #1
 8007502:	4013      	ands	r3, r2
 8007504:	d10f      	bne.n	8007526 <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	497f      	ldr	r1, [pc, #508]	; (8007710 <HAL_SPI_TransmitReceive_DMA+0x348>)
 8007512:	400a      	ands	r2, r1
 8007514:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800751a:	b29b      	uxth	r3, r3
 800751c:	085b      	lsrs	r3, r3, #1
 800751e:	b29a      	uxth	r2, r3
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007524:	e011      	b.n	800754a <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2180      	movs	r1, #128	; 0x80
 8007532:	01c9      	lsls	r1, r1, #7
 8007534:	430a      	orrs	r2, r1
 8007536:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800753c:	b29b      	uxth	r3, r3
 800753e:	085b      	lsrs	r3, r3, #1
 8007540:	b29b      	uxth	r3, r3
 8007542:	3301      	adds	r3, #1
 8007544:	b29a      	uxth	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754e:	699a      	ldr	r2, [r3, #24]
 8007550:	2380      	movs	r3, #128	; 0x80
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	429a      	cmp	r2, r3
 8007556:	d135      	bne.n	80075c4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	496a      	ldr	r1, [pc, #424]	; (800770c <HAL_SPI_TransmitReceive_DMA+0x344>)
 8007564:	400a      	ands	r2, r1
 8007566:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2246      	movs	r2, #70	; 0x46
 800756c:	5a9b      	ldrh	r3, [r3, r2]
 800756e:	b29b      	uxth	r3, r3
 8007570:	001a      	movs	r2, r3
 8007572:	2301      	movs	r3, #1
 8007574:	4013      	ands	r3, r2
 8007576:	d111      	bne.n	800759c <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4964      	ldr	r1, [pc, #400]	; (8007714 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8007584:	400a      	ands	r2, r1
 8007586:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2246      	movs	r2, #70	; 0x46
 800758c:	5a9b      	ldrh	r3, [r3, r2]
 800758e:	b29b      	uxth	r3, r3
 8007590:	085b      	lsrs	r3, r3, #1
 8007592:	b299      	uxth	r1, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2246      	movs	r2, #70	; 0x46
 8007598:	5299      	strh	r1, [r3, r2]
 800759a:	e013      	b.n	80075c4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2180      	movs	r1, #128	; 0x80
 80075a8:	0189      	lsls	r1, r1, #6
 80075aa:	430a      	orrs	r2, r1
 80075ac:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2246      	movs	r2, #70	; 0x46
 80075b2:	5a9b      	ldrh	r3, [r3, r2]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	085b      	lsrs	r3, r3, #1
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	3301      	adds	r3, #1
 80075bc:	b299      	uxth	r1, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2246      	movs	r2, #70	; 0x46
 80075c2:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	225d      	movs	r2, #93	; 0x5d
 80075c8:	5c9b      	ldrb	r3, [r3, r2]
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d108      	bne.n	80075e2 <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d4:	4a50      	ldr	r2, [pc, #320]	; (8007718 <HAL_SPI_TransmitReceive_DMA+0x350>)
 80075d6:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075dc:	4a4f      	ldr	r2, [pc, #316]	; (800771c <HAL_SPI_TransmitReceive_DMA+0x354>)
 80075de:	62da      	str	r2, [r3, #44]	; 0x2c
 80075e0:	e007      	b.n	80075f2 <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e6:	4a4e      	ldr	r2, [pc, #312]	; (8007720 <HAL_SPI_TransmitReceive_DMA+0x358>)
 80075e8:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ee:	4a4d      	ldr	r2, [pc, #308]	; (8007724 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 80075f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f6:	4a4c      	ldr	r2, [pc, #304]	; (8007728 <HAL_SPI_TransmitReceive_DMA+0x360>)
 80075f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075fe:	2200      	movs	r2, #0
 8007600:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	330c      	adds	r3, #12
 800760c:	0019      	movs	r1, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2246      	movs	r2, #70	; 0x46
 8007618:	5a9b      	ldrh	r3, [r3, r2]
 800761a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800761c:	0022      	movs	r2, r4
 800761e:	f7fc f9a9 	bl	8003974 <HAL_DMA_Start_IT>
 8007622:	1e03      	subs	r3, r0, #0
 8007624:	d00e      	beq.n	8007644 <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800762a:	2210      	movs	r2, #16
 800762c:	431a      	orrs	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007632:	2317      	movs	r3, #23
 8007634:	18fb      	adds	r3, r7, r3
 8007636:	2201      	movs	r2, #1
 8007638:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	225d      	movs	r2, #93	; 0x5d
 800763e:	2101      	movs	r1, #1
 8007640:	5499      	strb	r1, [r3, r2]
    goto error;
 8007642:	e055      	b.n	80076f0 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2101      	movs	r1, #1
 8007650:	430a      	orrs	r2, r1
 8007652:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007658:	2200      	movs	r2, #0
 800765a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007660:	2200      	movs	r2, #0
 8007662:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007668:	2200      	movs	r2, #0
 800766a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007670:	2200      	movs	r2, #0
 8007672:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767c:	0019      	movs	r1, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	330c      	adds	r3, #12
 8007684:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800768a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800768c:	f7fc f972 	bl	8003974 <HAL_DMA_Start_IT>
 8007690:	1e03      	subs	r3, r0, #0
 8007692:	d00e      	beq.n	80076b2 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007698:	2210      	movs	r2, #16
 800769a:	431a      	orrs	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80076a0:	2317      	movs	r3, #23
 80076a2:	18fb      	adds	r3, r7, r3
 80076a4:	2201      	movs	r2, #1
 80076a6:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	225d      	movs	r2, #93	; 0x5d
 80076ac:	2101      	movs	r1, #1
 80076ae:	5499      	strb	r1, [r3, r2]
    goto error;
 80076b0:	e01e      	b.n	80076f0 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2240      	movs	r2, #64	; 0x40
 80076ba:	4013      	ands	r3, r2
 80076bc:	2b40      	cmp	r3, #64	; 0x40
 80076be:	d007      	beq.n	80076d0 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2140      	movs	r1, #64	; 0x40
 80076cc:	430a      	orrs	r2, r1
 80076ce:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2120      	movs	r1, #32
 80076dc:	430a      	orrs	r2, r1
 80076de:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2102      	movs	r1, #2
 80076ec:	430a      	orrs	r2, r1
 80076ee:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	225c      	movs	r2, #92	; 0x5c
 80076f4:	2100      	movs	r1, #0
 80076f6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80076f8:	2317      	movs	r3, #23
 80076fa:	18fb      	adds	r3, r7, r3
 80076fc:	781b      	ldrb	r3, [r3, #0]
}
 80076fe:	0018      	movs	r0, r3
 8007700:	46bd      	mov	sp, r7
 8007702:	b007      	add	sp, #28
 8007704:	bd90      	pop	{r4, r7, pc}
 8007706:	46c0      	nop			; (mov r8, r8)
 8007708:	ffff9fff 	.word	0xffff9fff
 800770c:	ffffefff 	.word	0xffffefff
 8007710:	ffffbfff 	.word	0xffffbfff
 8007714:	ffffdfff 	.word	0xffffdfff
 8007718:	08007a9f 	.word	0x08007a9f
 800771c:	08007959 	.word	0x08007959
 8007720:	08007abd 	.word	0x08007abd
 8007724:	08007a09 	.word	0x08007a09
 8007728:	08007adb 	.word	0x08007adb

0800772c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b088      	sub	sp, #32
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	099b      	lsrs	r3, r3, #6
 8007748:	001a      	movs	r2, r3
 800774a:	2301      	movs	r3, #1
 800774c:	4013      	ands	r3, r2
 800774e:	d10f      	bne.n	8007770 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2201      	movs	r2, #1
 8007754:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007756:	d00b      	beq.n	8007770 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	099b      	lsrs	r3, r3, #6
 800775c:	001a      	movs	r2, r3
 800775e:	2301      	movs	r3, #1
 8007760:	4013      	ands	r3, r2
 8007762:	d005      	beq.n	8007770 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	0010      	movs	r0, r2
 800776c:	4798      	blx	r3
    return;
 800776e:	e0d5      	b.n	800791c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	085b      	lsrs	r3, r3, #1
 8007774:	001a      	movs	r2, r3
 8007776:	2301      	movs	r3, #1
 8007778:	4013      	ands	r3, r2
 800777a:	d00b      	beq.n	8007794 <HAL_SPI_IRQHandler+0x68>
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	09db      	lsrs	r3, r3, #7
 8007780:	001a      	movs	r2, r3
 8007782:	2301      	movs	r3, #1
 8007784:	4013      	ands	r3, r2
 8007786:	d005      	beq.n	8007794 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	0010      	movs	r0, r2
 8007790:	4798      	blx	r3
    return;
 8007792:	e0c3      	b.n	800791c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	095b      	lsrs	r3, r3, #5
 8007798:	001a      	movs	r2, r3
 800779a:	2301      	movs	r3, #1
 800779c:	4013      	ands	r3, r2
 800779e:	d10c      	bne.n	80077ba <HAL_SPI_IRQHandler+0x8e>
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	099b      	lsrs	r3, r3, #6
 80077a4:	001a      	movs	r2, r3
 80077a6:	2301      	movs	r3, #1
 80077a8:	4013      	ands	r3, r2
 80077aa:	d106      	bne.n	80077ba <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	0a1b      	lsrs	r3, r3, #8
 80077b0:	001a      	movs	r2, r3
 80077b2:	2301      	movs	r3, #1
 80077b4:	4013      	ands	r3, r2
 80077b6:	d100      	bne.n	80077ba <HAL_SPI_IRQHandler+0x8e>
 80077b8:	e0b0      	b.n	800791c <HAL_SPI_IRQHandler+0x1f0>
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	095b      	lsrs	r3, r3, #5
 80077be:	001a      	movs	r2, r3
 80077c0:	2301      	movs	r3, #1
 80077c2:	4013      	ands	r3, r2
 80077c4:	d100      	bne.n	80077c8 <HAL_SPI_IRQHandler+0x9c>
 80077c6:	e0a9      	b.n	800791c <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	099b      	lsrs	r3, r3, #6
 80077cc:	001a      	movs	r2, r3
 80077ce:	2301      	movs	r3, #1
 80077d0:	4013      	ands	r3, r2
 80077d2:	d023      	beq.n	800781c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	225d      	movs	r2, #93	; 0x5d
 80077d8:	5c9b      	ldrb	r3, [r3, r2]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d011      	beq.n	8007804 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e4:	2204      	movs	r2, #4
 80077e6:	431a      	orrs	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077ec:	2300      	movs	r3, #0
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	617b      	str	r3, [r7, #20]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	e00b      	b.n	800781c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007804:	2300      	movs	r3, #0
 8007806:	613b      	str	r3, [r7, #16]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	613b      	str	r3, [r7, #16]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	613b      	str	r3, [r7, #16]
 8007818:	693b      	ldr	r3, [r7, #16]
        return;
 800781a:	e07f      	b.n	800791c <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	095b      	lsrs	r3, r3, #5
 8007820:	001a      	movs	r2, r3
 8007822:	2301      	movs	r3, #1
 8007824:	4013      	ands	r3, r2
 8007826:	d014      	beq.n	8007852 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800782c:	2201      	movs	r2, #1
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007834:	2300      	movs	r3, #0
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2140      	movs	r1, #64	; 0x40
 800784c:	438a      	bics	r2, r1
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	0a1b      	lsrs	r3, r3, #8
 8007856:	001a      	movs	r2, r3
 8007858:	2301      	movs	r3, #1
 800785a:	4013      	ands	r3, r2
 800785c:	d00c      	beq.n	8007878 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007862:	2208      	movs	r2, #8
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800786a:	2300      	movs	r3, #0
 800786c:	60bb      	str	r3, [r7, #8]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	60bb      	str	r3, [r7, #8]
 8007876:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800787c:	2b00      	cmp	r3, #0
 800787e:	d04c      	beq.n	800791a <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	21e0      	movs	r1, #224	; 0xe0
 800788c:	438a      	bics	r2, r1
 800788e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	225d      	movs	r2, #93	; 0x5d
 8007894:	2101      	movs	r1, #1
 8007896:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	2202      	movs	r2, #2
 800789c:	4013      	ands	r3, r2
 800789e:	d103      	bne.n	80078a8 <HAL_SPI_IRQHandler+0x17c>
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	2201      	movs	r2, #1
 80078a4:	4013      	ands	r3, r2
 80078a6:	d032      	beq.n	800790e <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2103      	movs	r1, #3
 80078b4:	438a      	bics	r2, r1
 80078b6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d010      	beq.n	80078e2 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c4:	4a17      	ldr	r2, [pc, #92]	; (8007924 <HAL_SPI_IRQHandler+0x1f8>)
 80078c6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078cc:	0018      	movs	r0, r3
 80078ce:	f7fc f8d7 	bl	8003a80 <HAL_DMA_Abort_IT>
 80078d2:	1e03      	subs	r3, r0, #0
 80078d4:	d005      	beq.n	80078e2 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078da:	2240      	movs	r2, #64	; 0x40
 80078dc:	431a      	orrs	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d016      	beq.n	8007918 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ee:	4a0d      	ldr	r2, [pc, #52]	; (8007924 <HAL_SPI_IRQHandler+0x1f8>)
 80078f0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f6:	0018      	movs	r0, r3
 80078f8:	f7fc f8c2 	bl	8003a80 <HAL_DMA_Abort_IT>
 80078fc:	1e03      	subs	r3, r0, #0
 80078fe:	d00b      	beq.n	8007918 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007904:	2240      	movs	r2, #64	; 0x40
 8007906:	431a      	orrs	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800790c:	e004      	b.n	8007918 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	0018      	movs	r0, r3
 8007912:	f000 f819 	bl	8007948 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007916:	e000      	b.n	800791a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8007918:	46c0      	nop			; (mov r8, r8)
    return;
 800791a:	46c0      	nop			; (mov r8, r8)
  }
}
 800791c:	46bd      	mov	sp, r7
 800791e:	b008      	add	sp, #32
 8007920:	bd80      	pop	{r7, pc}
 8007922:	46c0      	nop			; (mov r8, r8)
 8007924:	08007b1d 	.word	0x08007b1d

08007928 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007930:	46c0      	nop			; (mov r8, r8)
 8007932:	46bd      	mov	sp, r7
 8007934:	b002      	add	sp, #8
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007940:	46c0      	nop			; (mov r8, r8)
 8007942:	46bd      	mov	sp, r7
 8007944:	b002      	add	sp, #8
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007950:	46c0      	nop			; (mov r8, r8)
 8007952:	46bd      	mov	sp, r7
 8007954:	b002      	add	sp, #8
 8007956:	bd80      	pop	{r7, pc}

08007958 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007966:	f7fb fbf9 	bl	800315c <HAL_GetTick>
 800796a:	0003      	movs	r3, r0
 800796c:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2220      	movs	r2, #32
 8007976:	4013      	ands	r3, r2
 8007978:	2b20      	cmp	r3, #32
 800797a:	d03e      	beq.n	80079fa <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2120      	movs	r1, #32
 8007988:	438a      	bics	r2, r1
 800798a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10e      	bne.n	80079b2 <SPI_DMAReceiveCplt+0x5a>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	2382      	movs	r3, #130	; 0x82
 800799a:	005b      	lsls	r3, r3, #1
 800799c:	429a      	cmp	r2, r3
 800799e:	d108      	bne.n	80079b2 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2103      	movs	r1, #3
 80079ac:	438a      	bics	r2, r1
 80079ae:	605a      	str	r2, [r3, #4]
 80079b0:	e007      	b.n	80079c2 <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2101      	movs	r1, #1
 80079be:	438a      	bics	r2, r1
 80079c0:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2164      	movs	r1, #100	; 0x64
 80079c8:	0018      	movs	r0, r3
 80079ca:	f000 f9e1 	bl	8007d90 <SPI_EndRxTransaction>
 80079ce:	1e03      	subs	r3, r0, #0
 80079d0:	d002      	beq.n	80079d8 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2220      	movs	r2, #32
 80079d6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2246      	movs	r2, #70	; 0x46
 80079dc:	2100      	movs	r1, #0
 80079de:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	225d      	movs	r2, #93	; 0x5d
 80079e4:	2101      	movs	r1, #1
 80079e6:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d004      	beq.n	80079fa <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	0018      	movs	r0, r3
 80079f4:	f7ff ffa8 	bl	8007948 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80079f8:	e003      	b.n	8007a02 <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	0018      	movs	r0, r3
 80079fe:	f7f9 fb71 	bl	80010e4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a02:	46bd      	mov	sp, r7
 8007a04:	b004      	add	sp, #16
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a14:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a16:	f7fb fba1 	bl	800315c <HAL_GetTick>
 8007a1a:	0003      	movs	r3, r0
 8007a1c:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2220      	movs	r2, #32
 8007a26:	4013      	ands	r3, r2
 8007a28:	2b20      	cmp	r3, #32
 8007a2a:	d031      	beq.n	8007a90 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2120      	movs	r1, #32
 8007a38:	438a      	bics	r2, r1
 8007a3a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2164      	movs	r1, #100	; 0x64
 8007a42:	0018      	movs	r0, r3
 8007a44:	f000 fa02 	bl	8007e4c <SPI_EndRxTxTransaction>
 8007a48:	1e03      	subs	r3, r0, #0
 8007a4a:	d005      	beq.n	8007a58 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a50:	2220      	movs	r2, #32
 8007a52:	431a      	orrs	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2103      	movs	r1, #3
 8007a64:	438a      	bics	r2, r1
 8007a66:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2246      	movs	r2, #70	; 0x46
 8007a72:	2100      	movs	r1, #0
 8007a74:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	225d      	movs	r2, #93	; 0x5d
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d004      	beq.n	8007a90 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f7ff ff5d 	bl	8007948 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007a8e:	e003      	b.n	8007a98 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	0018      	movs	r0, r3
 8007a94:	f7ff ff48 	bl	8007928 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	b004      	add	sp, #16
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b084      	sub	sp, #16
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f7f9 fae0 	bl	8001074 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ab4:	46c0      	nop			; (mov r8, r8)
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	b004      	add	sp, #16
 8007aba:	bd80      	pop	{r7, pc}

08007abc <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	0018      	movs	r0, r3
 8007ace:	f7ff ff33 	bl	8007938 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	b004      	add	sp, #16
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2103      	movs	r1, #3
 8007af4:	438a      	bics	r2, r1
 8007af6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007afc:	2210      	movs	r2, #16
 8007afe:	431a      	orrs	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	225d      	movs	r2, #93	; 0x5d
 8007b08:	2101      	movs	r1, #1
 8007b0a:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	0018      	movs	r0, r3
 8007b10:	f7ff ff1a 	bl	8007948 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b14:	46c0      	nop			; (mov r8, r8)
 8007b16:	46bd      	mov	sp, r7
 8007b18:	b004      	add	sp, #16
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b28:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2246      	movs	r2, #70	; 0x46
 8007b2e:	2100      	movs	r1, #0
 8007b30:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	f7ff ff04 	bl	8007948 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b40:	46c0      	nop			; (mov r8, r8)
 8007b42:	46bd      	mov	sp, r7
 8007b44:	b004      	add	sp, #16
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	603b      	str	r3, [r7, #0]
 8007b54:	1dfb      	adds	r3, r7, #7
 8007b56:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b58:	f7fb fb00 	bl	800315c <HAL_GetTick>
 8007b5c:	0002      	movs	r2, r0
 8007b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b60:	1a9b      	subs	r3, r3, r2
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	18d3      	adds	r3, r2, r3
 8007b66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b68:	f7fb faf8 	bl	800315c <HAL_GetTick>
 8007b6c:	0003      	movs	r3, r0
 8007b6e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b70:	4b3a      	ldr	r3, [pc, #232]	; (8007c5c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	015b      	lsls	r3, r3, #5
 8007b76:	0d1b      	lsrs	r3, r3, #20
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	4353      	muls	r3, r2
 8007b7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b7e:	e058      	b.n	8007c32 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	d055      	beq.n	8007c32 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b86:	f7fb fae9 	bl	800315c <HAL_GetTick>
 8007b8a:	0002      	movs	r2, r0
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d902      	bls.n	8007b9c <SPI_WaitFlagStateUntilTimeout+0x54>
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d142      	bne.n	8007c22 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	21e0      	movs	r1, #224	; 0xe0
 8007ba8:	438a      	bics	r2, r1
 8007baa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	2382      	movs	r3, #130	; 0x82
 8007bb2:	005b      	lsls	r3, r3, #1
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d113      	bne.n	8007be0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	689a      	ldr	r2, [r3, #8]
 8007bbc:	2380      	movs	r3, #128	; 0x80
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d005      	beq.n	8007bd0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	2380      	movs	r3, #128	; 0x80
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d107      	bne.n	8007be0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2140      	movs	r1, #64	; 0x40
 8007bdc:	438a      	bics	r2, r1
 8007bde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be4:	2380      	movs	r3, #128	; 0x80
 8007be6:	019b      	lsls	r3, r3, #6
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d110      	bne.n	8007c0e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	491a      	ldr	r1, [pc, #104]	; (8007c60 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007bf8:	400a      	ands	r2, r1
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2180      	movs	r1, #128	; 0x80
 8007c08:	0189      	lsls	r1, r1, #6
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	225d      	movs	r2, #93	; 0x5d
 8007c12:	2101      	movs	r1, #1
 8007c14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	225c      	movs	r2, #92	; 0x5c
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e017      	b.n	8007c52 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	425a      	negs	r2, r3
 8007c42:	4153      	adcs	r3, r2
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	001a      	movs	r2, r3
 8007c48:	1dfb      	adds	r3, r7, #7
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d197      	bne.n	8007b80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	0018      	movs	r0, r3
 8007c54:	46bd      	mov	sp, r7
 8007c56:	b008      	add	sp, #32
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	46c0      	nop			; (mov r8, r8)
 8007c5c:	20003168 	.word	0x20003168
 8007c60:	ffffdfff 	.word	0xffffdfff

08007c64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b088      	sub	sp, #32
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007c72:	f7fb fa73 	bl	800315c <HAL_GetTick>
 8007c76:	0002      	movs	r2, r0
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	1a9b      	subs	r3, r3, r2
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	18d3      	adds	r3, r2, r3
 8007c80:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c82:	f7fb fa6b 	bl	800315c <HAL_GetTick>
 8007c86:	0003      	movs	r3, r0
 8007c88:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c8a:	4b3f      	ldr	r3, [pc, #252]	; (8007d88 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	0013      	movs	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	189b      	adds	r3, r3, r2
 8007c94:	00da      	lsls	r2, r3, #3
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	0d1b      	lsrs	r3, r3, #20
 8007c9a:	69fa      	ldr	r2, [r7, #28]
 8007c9c:	4353      	muls	r3, r2
 8007c9e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007ca0:	e064      	b.n	8007d6c <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	23c0      	movs	r3, #192	; 0xc0
 8007ca6:	00db      	lsls	r3, r3, #3
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d106      	bne.n	8007cba <SPI_WaitFifoStateUntilTimeout+0x56>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d103      	bne.n	8007cba <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	330c      	adds	r3, #12
 8007cb8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	d055      	beq.n	8007d6c <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cc0:	f7fb fa4c 	bl	800315c <HAL_GetTick>
 8007cc4:	0002      	movs	r2, r0
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	69fa      	ldr	r2, [r7, #28]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d902      	bls.n	8007cd6 <SPI_WaitFifoStateUntilTimeout+0x72>
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d142      	bne.n	8007d5c <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	21e0      	movs	r1, #224	; 0xe0
 8007ce2:	438a      	bics	r2, r1
 8007ce4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	2382      	movs	r3, #130	; 0x82
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d113      	bne.n	8007d1a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	689a      	ldr	r2, [r3, #8]
 8007cf6:	2380      	movs	r3, #128	; 0x80
 8007cf8:	021b      	lsls	r3, r3, #8
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d005      	beq.n	8007d0a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	2380      	movs	r3, #128	; 0x80
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d107      	bne.n	8007d1a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2140      	movs	r1, #64	; 0x40
 8007d16:	438a      	bics	r2, r1
 8007d18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d1e:	2380      	movs	r3, #128	; 0x80
 8007d20:	019b      	lsls	r3, r3, #6
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d110      	bne.n	8007d48 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4916      	ldr	r1, [pc, #88]	; (8007d8c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007d32:	400a      	ands	r2, r1
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2180      	movs	r1, #128	; 0x80
 8007d42:	0189      	lsls	r1, r1, #6
 8007d44:	430a      	orrs	r2, r1
 8007d46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	225d      	movs	r2, #93	; 0x5d
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	225c      	movs	r2, #92	; 0x5c
 8007d54:	2100      	movs	r1, #0
 8007d56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e010      	b.n	8007d7e <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	4013      	ands	r3, r2
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d192      	bne.n	8007ca2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	0018      	movs	r0, r3
 8007d80:	46bd      	mov	sp, r7
 8007d82:	b008      	add	sp, #32
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	20003168 	.word	0x20003168
 8007d8c:	ffffdfff 	.word	0xffffdfff

08007d90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	2382      	movs	r3, #130	; 0x82
 8007da2:	005b      	lsls	r3, r3, #1
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d113      	bne.n	8007dd0 <SPI_EndRxTransaction+0x40>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	689a      	ldr	r2, [r3, #8]
 8007dac:	2380      	movs	r3, #128	; 0x80
 8007dae:	021b      	lsls	r3, r3, #8
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d005      	beq.n	8007dc0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	689a      	ldr	r2, [r3, #8]
 8007db8:	2380      	movs	r3, #128	; 0x80
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d107      	bne.n	8007dd0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2140      	movs	r1, #64	; 0x40
 8007dcc:	438a      	bics	r2, r1
 8007dce:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	0013      	movs	r3, r2
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2180      	movs	r1, #128	; 0x80
 8007dde:	f7ff feb3 	bl	8007b48 <SPI_WaitFlagStateUntilTimeout>
 8007de2:	1e03      	subs	r3, r0, #0
 8007de4:	d007      	beq.n	8007df6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dea:	2220      	movs	r2, #32
 8007dec:	431a      	orrs	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e026      	b.n	8007e44 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	2382      	movs	r3, #130	; 0x82
 8007dfc:	005b      	lsls	r3, r3, #1
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d11f      	bne.n	8007e42 <SPI_EndRxTransaction+0xb2>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	689a      	ldr	r2, [r3, #8]
 8007e06:	2380      	movs	r3, #128	; 0x80
 8007e08:	021b      	lsls	r3, r3, #8
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d005      	beq.n	8007e1a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	689a      	ldr	r2, [r3, #8]
 8007e12:	2380      	movs	r3, #128	; 0x80
 8007e14:	00db      	lsls	r3, r3, #3
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d113      	bne.n	8007e42 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	23c0      	movs	r3, #192	; 0xc0
 8007e1e:	00d9      	lsls	r1, r3, #3
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	0013      	movs	r3, r2
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f7ff ff1b 	bl	8007c64 <SPI_WaitFifoStateUntilTimeout>
 8007e2e:	1e03      	subs	r3, r0, #0
 8007e30:	d007      	beq.n	8007e42 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e36:	2220      	movs	r2, #32
 8007e38:	431a      	orrs	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e000      	b.n	8007e44 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	0018      	movs	r0, r3
 8007e46:	46bd      	mov	sp, r7
 8007e48:	b004      	add	sp, #16
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af02      	add	r7, sp, #8
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	23c0      	movs	r3, #192	; 0xc0
 8007e5c:	0159      	lsls	r1, r3, #5
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	0013      	movs	r3, r2
 8007e66:	2200      	movs	r2, #0
 8007e68:	f7ff fefc 	bl	8007c64 <SPI_WaitFifoStateUntilTimeout>
 8007e6c:	1e03      	subs	r3, r0, #0
 8007e6e:	d007      	beq.n	8007e80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e74:	2220      	movs	r2, #32
 8007e76:	431a      	orrs	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e027      	b.n	8007ed0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	0013      	movs	r3, r2
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2180      	movs	r1, #128	; 0x80
 8007e8e:	f7ff fe5b 	bl	8007b48 <SPI_WaitFlagStateUntilTimeout>
 8007e92:	1e03      	subs	r3, r0, #0
 8007e94:	d007      	beq.n	8007ea6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e014      	b.n	8007ed0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	23c0      	movs	r3, #192	; 0xc0
 8007eaa:	00d9      	lsls	r1, r3, #3
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	0013      	movs	r3, r2
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f7ff fed5 	bl	8007c64 <SPI_WaitFifoStateUntilTimeout>
 8007eba:	1e03      	subs	r3, r0, #0
 8007ebc:	d007      	beq.n	8007ece <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec2:	2220      	movs	r2, #32
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e000      	b.n	8007ed0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	0018      	movs	r0, r3
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	b004      	add	sp, #16
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e04a      	b.n	8007f80 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	223d      	movs	r2, #61	; 0x3d
 8007eee:	5c9b      	ldrb	r3, [r3, r2]
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d107      	bne.n	8007f06 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	223c      	movs	r2, #60	; 0x3c
 8007efa:	2100      	movs	r1, #0
 8007efc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	0018      	movs	r0, r3
 8007f02:	f7fa fe53 	bl	8002bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	223d      	movs	r2, #61	; 0x3d
 8007f0a:	2102      	movs	r1, #2
 8007f0c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3304      	adds	r3, #4
 8007f16:	0019      	movs	r1, r3
 8007f18:	0010      	movs	r0, r2
 8007f1a:	f000 fb41 	bl	80085a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2248      	movs	r2, #72	; 0x48
 8007f22:	2101      	movs	r1, #1
 8007f24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	223e      	movs	r2, #62	; 0x3e
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	5499      	strb	r1, [r3, r2]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	223f      	movs	r2, #63	; 0x3f
 8007f32:	2101      	movs	r1, #1
 8007f34:	5499      	strb	r1, [r3, r2]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2240      	movs	r2, #64	; 0x40
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	5499      	strb	r1, [r3, r2]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2241      	movs	r2, #65	; 0x41
 8007f42:	2101      	movs	r1, #1
 8007f44:	5499      	strb	r1, [r3, r2]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2242      	movs	r2, #66	; 0x42
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	5499      	strb	r1, [r3, r2]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2243      	movs	r2, #67	; 0x43
 8007f52:	2101      	movs	r1, #1
 8007f54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2244      	movs	r2, #68	; 0x44
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	5499      	strb	r1, [r3, r2]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2245      	movs	r2, #69	; 0x45
 8007f62:	2101      	movs	r1, #1
 8007f64:	5499      	strb	r1, [r3, r2]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2246      	movs	r2, #70	; 0x46
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	5499      	strb	r1, [r3, r2]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2247      	movs	r2, #71	; 0x47
 8007f72:	2101      	movs	r1, #1
 8007f74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	223d      	movs	r2, #61	; 0x3d
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	0018      	movs	r0, r3
 8007f82:	46bd      	mov	sp, r7
 8007f84:	b002      	add	sp, #8
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e04a      	b.n	8008030 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	223d      	movs	r2, #61	; 0x3d
 8007f9e:	5c9b      	ldrb	r3, [r3, r2]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d107      	bne.n	8007fb6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	223c      	movs	r2, #60	; 0x3c
 8007faa:	2100      	movs	r1, #0
 8007fac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	f000 f841 	bl	8008038 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	223d      	movs	r2, #61	; 0x3d
 8007fba:	2102      	movs	r1, #2
 8007fbc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	0019      	movs	r1, r3
 8007fc8:	0010      	movs	r0, r2
 8007fca:	f000 fae9 	bl	80085a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2248      	movs	r2, #72	; 0x48
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	223e      	movs	r2, #62	; 0x3e
 8007fda:	2101      	movs	r1, #1
 8007fdc:	5499      	strb	r1, [r3, r2]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	223f      	movs	r2, #63	; 0x3f
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	5499      	strb	r1, [r3, r2]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2240      	movs	r2, #64	; 0x40
 8007fea:	2101      	movs	r1, #1
 8007fec:	5499      	strb	r1, [r3, r2]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2241      	movs	r2, #65	; 0x41
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	5499      	strb	r1, [r3, r2]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2242      	movs	r2, #66	; 0x42
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	5499      	strb	r1, [r3, r2]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2243      	movs	r2, #67	; 0x43
 8008002:	2101      	movs	r1, #1
 8008004:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2244      	movs	r2, #68	; 0x44
 800800a:	2101      	movs	r1, #1
 800800c:	5499      	strb	r1, [r3, r2]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2245      	movs	r2, #69	; 0x45
 8008012:	2101      	movs	r1, #1
 8008014:	5499      	strb	r1, [r3, r2]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2246      	movs	r2, #70	; 0x46
 800801a:	2101      	movs	r1, #1
 800801c:	5499      	strb	r1, [r3, r2]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2247      	movs	r2, #71	; 0x47
 8008022:	2101      	movs	r1, #1
 8008024:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	223d      	movs	r2, #61	; 0x3d
 800802a:	2101      	movs	r1, #1
 800802c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	0018      	movs	r0, r3
 8008032:	46bd      	mov	sp, r7
 8008034:	b002      	add	sp, #8
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008040:	46c0      	nop			; (mov r8, r8)
 8008042:	46bd      	mov	sp, r7
 8008044:	b002      	add	sp, #8
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d108      	bne.n	800806a <HAL_TIM_PWM_Start+0x22>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	223e      	movs	r2, #62	; 0x3e
 800805c:	5c9b      	ldrb	r3, [r3, r2]
 800805e:	b2db      	uxtb	r3, r3
 8008060:	3b01      	subs	r3, #1
 8008062:	1e5a      	subs	r2, r3, #1
 8008064:	4193      	sbcs	r3, r2
 8008066:	b2db      	uxtb	r3, r3
 8008068:	e037      	b.n	80080da <HAL_TIM_PWM_Start+0x92>
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b04      	cmp	r3, #4
 800806e:	d108      	bne.n	8008082 <HAL_TIM_PWM_Start+0x3a>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	223f      	movs	r2, #63	; 0x3f
 8008074:	5c9b      	ldrb	r3, [r3, r2]
 8008076:	b2db      	uxtb	r3, r3
 8008078:	3b01      	subs	r3, #1
 800807a:	1e5a      	subs	r2, r3, #1
 800807c:	4193      	sbcs	r3, r2
 800807e:	b2db      	uxtb	r3, r3
 8008080:	e02b      	b.n	80080da <HAL_TIM_PWM_Start+0x92>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b08      	cmp	r3, #8
 8008086:	d108      	bne.n	800809a <HAL_TIM_PWM_Start+0x52>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2240      	movs	r2, #64	; 0x40
 800808c:	5c9b      	ldrb	r3, [r3, r2]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	3b01      	subs	r3, #1
 8008092:	1e5a      	subs	r2, r3, #1
 8008094:	4193      	sbcs	r3, r2
 8008096:	b2db      	uxtb	r3, r3
 8008098:	e01f      	b.n	80080da <HAL_TIM_PWM_Start+0x92>
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b0c      	cmp	r3, #12
 800809e:	d108      	bne.n	80080b2 <HAL_TIM_PWM_Start+0x6a>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2241      	movs	r2, #65	; 0x41
 80080a4:	5c9b      	ldrb	r3, [r3, r2]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	3b01      	subs	r3, #1
 80080aa:	1e5a      	subs	r2, r3, #1
 80080ac:	4193      	sbcs	r3, r2
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	e013      	b.n	80080da <HAL_TIM_PWM_Start+0x92>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b10      	cmp	r3, #16
 80080b6:	d108      	bne.n	80080ca <HAL_TIM_PWM_Start+0x82>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2242      	movs	r2, #66	; 0x42
 80080bc:	5c9b      	ldrb	r3, [r3, r2]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	3b01      	subs	r3, #1
 80080c2:	1e5a      	subs	r2, r3, #1
 80080c4:	4193      	sbcs	r3, r2
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	e007      	b.n	80080da <HAL_TIM_PWM_Start+0x92>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2243      	movs	r2, #67	; 0x43
 80080ce:	5c9b      	ldrb	r3, [r3, r2]
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	1e5a      	subs	r2, r3, #1
 80080d6:	4193      	sbcs	r3, r2
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e08b      	b.n	80081fa <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d104      	bne.n	80080f2 <HAL_TIM_PWM_Start+0xaa>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	223e      	movs	r2, #62	; 0x3e
 80080ec:	2102      	movs	r1, #2
 80080ee:	5499      	strb	r1, [r3, r2]
 80080f0:	e023      	b.n	800813a <HAL_TIM_PWM_Start+0xf2>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	d104      	bne.n	8008102 <HAL_TIM_PWM_Start+0xba>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	223f      	movs	r2, #63	; 0x3f
 80080fc:	2102      	movs	r1, #2
 80080fe:	5499      	strb	r1, [r3, r2]
 8008100:	e01b      	b.n	800813a <HAL_TIM_PWM_Start+0xf2>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b08      	cmp	r3, #8
 8008106:	d104      	bne.n	8008112 <HAL_TIM_PWM_Start+0xca>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2240      	movs	r2, #64	; 0x40
 800810c:	2102      	movs	r1, #2
 800810e:	5499      	strb	r1, [r3, r2]
 8008110:	e013      	b.n	800813a <HAL_TIM_PWM_Start+0xf2>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b0c      	cmp	r3, #12
 8008116:	d104      	bne.n	8008122 <HAL_TIM_PWM_Start+0xda>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2241      	movs	r2, #65	; 0x41
 800811c:	2102      	movs	r1, #2
 800811e:	5499      	strb	r1, [r3, r2]
 8008120:	e00b      	b.n	800813a <HAL_TIM_PWM_Start+0xf2>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b10      	cmp	r3, #16
 8008126:	d104      	bne.n	8008132 <HAL_TIM_PWM_Start+0xea>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2242      	movs	r2, #66	; 0x42
 800812c:	2102      	movs	r1, #2
 800812e:	5499      	strb	r1, [r3, r2]
 8008130:	e003      	b.n	800813a <HAL_TIM_PWM_Start+0xf2>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2243      	movs	r2, #67	; 0x43
 8008136:	2102      	movs	r1, #2
 8008138:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	2201      	movs	r2, #1
 8008142:	0018      	movs	r0, r3
 8008144:	f000 fe0c 	bl	8008d60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a2d      	ldr	r2, [pc, #180]	; (8008204 <HAL_TIM_PWM_Start+0x1bc>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d00e      	beq.n	8008170 <HAL_TIM_PWM_Start+0x128>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a2c      	ldr	r2, [pc, #176]	; (8008208 <HAL_TIM_PWM_Start+0x1c0>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d009      	beq.n	8008170 <HAL_TIM_PWM_Start+0x128>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a2a      	ldr	r2, [pc, #168]	; (800820c <HAL_TIM_PWM_Start+0x1c4>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d004      	beq.n	8008170 <HAL_TIM_PWM_Start+0x128>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a29      	ldr	r2, [pc, #164]	; (8008210 <HAL_TIM_PWM_Start+0x1c8>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d101      	bne.n	8008174 <HAL_TIM_PWM_Start+0x12c>
 8008170:	2301      	movs	r3, #1
 8008172:	e000      	b.n	8008176 <HAL_TIM_PWM_Start+0x12e>
 8008174:	2300      	movs	r3, #0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d008      	beq.n	800818c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2180      	movs	r1, #128	; 0x80
 8008186:	0209      	lsls	r1, r1, #8
 8008188:	430a      	orrs	r2, r1
 800818a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1c      	ldr	r2, [pc, #112]	; (8008204 <HAL_TIM_PWM_Start+0x1bc>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00f      	beq.n	80081b6 <HAL_TIM_PWM_Start+0x16e>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	2380      	movs	r3, #128	; 0x80
 800819c:	05db      	lsls	r3, r3, #23
 800819e:	429a      	cmp	r2, r3
 80081a0:	d009      	beq.n	80081b6 <HAL_TIM_PWM_Start+0x16e>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a1b      	ldr	r2, [pc, #108]	; (8008214 <HAL_TIM_PWM_Start+0x1cc>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d004      	beq.n	80081b6 <HAL_TIM_PWM_Start+0x16e>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a15      	ldr	r2, [pc, #84]	; (8008208 <HAL_TIM_PWM_Start+0x1c0>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d116      	bne.n	80081e4 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	4a16      	ldr	r2, [pc, #88]	; (8008218 <HAL_TIM_PWM_Start+0x1d0>)
 80081be:	4013      	ands	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2b06      	cmp	r3, #6
 80081c6:	d016      	beq.n	80081f6 <HAL_TIM_PWM_Start+0x1ae>
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	2380      	movs	r3, #128	; 0x80
 80081cc:	025b      	lsls	r3, r3, #9
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d011      	beq.n	80081f6 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2101      	movs	r1, #1
 80081de:	430a      	orrs	r2, r1
 80081e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e2:	e008      	b.n	80081f6 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2101      	movs	r1, #1
 80081f0:	430a      	orrs	r2, r1
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	e000      	b.n	80081f8 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	0018      	movs	r0, r3
 80081fc:	46bd      	mov	sp, r7
 80081fe:	b004      	add	sp, #16
 8008200:	bd80      	pop	{r7, pc}
 8008202:	46c0      	nop			; (mov r8, r8)
 8008204:	40012c00 	.word	0x40012c00
 8008208:	40014000 	.word	0x40014000
 800820c:	40014400 	.word	0x40014400
 8008210:	40014800 	.word	0x40014800
 8008214:	40000400 	.word	0x40000400
 8008218:	00010007 	.word	0x00010007

0800821c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	223c      	movs	r2, #60	; 0x3c
 800822c:	5c9b      	ldrb	r3, [r3, r2]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008232:	2302      	movs	r3, #2
 8008234:	e0df      	b.n	80083f6 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	223c      	movs	r2, #60	; 0x3c
 800823a:	2101      	movs	r1, #1
 800823c:	5499      	strb	r1, [r3, r2]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b14      	cmp	r3, #20
 8008242:	d900      	bls.n	8008246 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8008244:	e0d1      	b.n	80083ea <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	009a      	lsls	r2, r3, #2
 800824a:	4b6d      	ldr	r3, [pc, #436]	; (8008400 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800824c:	18d3      	adds	r3, r2, r3
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	0011      	movs	r1, r2
 800825a:	0018      	movs	r0, r3
 800825c:	f000 fa20 	bl	80086a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	699a      	ldr	r2, [r3, #24]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2108      	movs	r1, #8
 800826c:	430a      	orrs	r2, r1
 800826e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	699a      	ldr	r2, [r3, #24]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2104      	movs	r1, #4
 800827c:	438a      	bics	r2, r1
 800827e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6999      	ldr	r1, [r3, #24]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	691a      	ldr	r2, [r3, #16]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	430a      	orrs	r2, r1
 8008290:	619a      	str	r2, [r3, #24]
      break;
 8008292:	e0ab      	b.n	80083ec <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	0011      	movs	r1, r2
 800829c:	0018      	movs	r0, r3
 800829e:	f000 fa89 	bl	80087b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	699a      	ldr	r2, [r3, #24]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2180      	movs	r1, #128	; 0x80
 80082ae:	0109      	lsls	r1, r1, #4
 80082b0:	430a      	orrs	r2, r1
 80082b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699a      	ldr	r2, [r3, #24]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4951      	ldr	r1, [pc, #324]	; (8008404 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80082c0:	400a      	ands	r2, r1
 80082c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6999      	ldr	r1, [r3, #24]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	021a      	lsls	r2, r3, #8
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	430a      	orrs	r2, r1
 80082d6:	619a      	str	r2, [r3, #24]
      break;
 80082d8:	e088      	b.n	80083ec <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	0011      	movs	r1, r2
 80082e2:	0018      	movs	r0, r3
 80082e4:	f000 faea 	bl	80088bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	69da      	ldr	r2, [r3, #28]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2108      	movs	r1, #8
 80082f4:	430a      	orrs	r2, r1
 80082f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	69da      	ldr	r2, [r3, #28]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2104      	movs	r1, #4
 8008304:	438a      	bics	r2, r1
 8008306:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	69d9      	ldr	r1, [r3, #28]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	691a      	ldr	r2, [r3, #16]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	61da      	str	r2, [r3, #28]
      break;
 800831a:	e067      	b.n	80083ec <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	0011      	movs	r1, r2
 8008324:	0018      	movs	r0, r3
 8008326:	f000 fb51 	bl	80089cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69da      	ldr	r2, [r3, #28]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2180      	movs	r1, #128	; 0x80
 8008336:	0109      	lsls	r1, r1, #4
 8008338:	430a      	orrs	r2, r1
 800833a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	69da      	ldr	r2, [r3, #28]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	492f      	ldr	r1, [pc, #188]	; (8008404 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8008348:	400a      	ands	r2, r1
 800834a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	69d9      	ldr	r1, [r3, #28]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	021a      	lsls	r2, r3, #8
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	61da      	str	r2, [r3, #28]
      break;
 8008360:	e044      	b.n	80083ec <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	0011      	movs	r1, r2
 800836a:	0018      	movs	r0, r3
 800836c:	f000 fb98 	bl	8008aa0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2108      	movs	r1, #8
 800837c:	430a      	orrs	r2, r1
 800837e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2104      	movs	r1, #4
 800838c:	438a      	bics	r2, r1
 800838e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	691a      	ldr	r2, [r3, #16]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083a2:	e023      	b.n	80083ec <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	0011      	movs	r1, r2
 80083ac:	0018      	movs	r0, r3
 80083ae:	f000 fbd7 	bl	8008b60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2180      	movs	r1, #128	; 0x80
 80083be:	0109      	lsls	r1, r1, #4
 80083c0:	430a      	orrs	r2, r1
 80083c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	490d      	ldr	r1, [pc, #52]	; (8008404 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80083d0:	400a      	ands	r2, r1
 80083d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	021a      	lsls	r2, r3, #8
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083e8:	e000      	b.n	80083ec <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80083ea:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	223c      	movs	r2, #60	; 0x3c
 80083f0:	2100      	movs	r1, #0
 80083f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	0018      	movs	r0, r3
 80083f8:	46bd      	mov	sp, r7
 80083fa:	b004      	add	sp, #16
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	46c0      	nop			; (mov r8, r8)
 8008400:	0800a874 	.word	0x0800a874
 8008404:	fffffbff 	.word	0xfffffbff

08008408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	223c      	movs	r2, #60	; 0x3c
 8008416:	5c9b      	ldrb	r3, [r3, r2]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d101      	bne.n	8008420 <HAL_TIM_ConfigClockSource+0x18>
 800841c:	2302      	movs	r3, #2
 800841e:	e0b7      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x188>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	223c      	movs	r2, #60	; 0x3c
 8008424:	2101      	movs	r1, #1
 8008426:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	223d      	movs	r2, #61	; 0x3d
 800842c:	2102      	movs	r1, #2
 800842e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	4a57      	ldr	r2, [pc, #348]	; (8008598 <HAL_TIM_ConfigClockSource+0x190>)
 800843c:	4013      	ands	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	4a56      	ldr	r2, [pc, #344]	; (800859c <HAL_TIM_ConfigClockSource+0x194>)
 8008444:	4013      	ands	r3, r2
 8008446:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2280      	movs	r2, #128	; 0x80
 8008456:	0192      	lsls	r2, r2, #6
 8008458:	4293      	cmp	r3, r2
 800845a:	d040      	beq.n	80084de <HAL_TIM_ConfigClockSource+0xd6>
 800845c:	2280      	movs	r2, #128	; 0x80
 800845e:	0192      	lsls	r2, r2, #6
 8008460:	4293      	cmp	r3, r2
 8008462:	d900      	bls.n	8008466 <HAL_TIM_ConfigClockSource+0x5e>
 8008464:	e088      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x170>
 8008466:	2280      	movs	r2, #128	; 0x80
 8008468:	0152      	lsls	r2, r2, #5
 800846a:	4293      	cmp	r3, r2
 800846c:	d100      	bne.n	8008470 <HAL_TIM_ConfigClockSource+0x68>
 800846e:	e085      	b.n	800857c <HAL_TIM_ConfigClockSource+0x174>
 8008470:	2280      	movs	r2, #128	; 0x80
 8008472:	0152      	lsls	r2, r2, #5
 8008474:	4293      	cmp	r3, r2
 8008476:	d900      	bls.n	800847a <HAL_TIM_ConfigClockSource+0x72>
 8008478:	e07e      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x170>
 800847a:	2b70      	cmp	r3, #112	; 0x70
 800847c:	d018      	beq.n	80084b0 <HAL_TIM_ConfigClockSource+0xa8>
 800847e:	d900      	bls.n	8008482 <HAL_TIM_ConfigClockSource+0x7a>
 8008480:	e07a      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x170>
 8008482:	2b60      	cmp	r3, #96	; 0x60
 8008484:	d04f      	beq.n	8008526 <HAL_TIM_ConfigClockSource+0x11e>
 8008486:	d900      	bls.n	800848a <HAL_TIM_ConfigClockSource+0x82>
 8008488:	e076      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x170>
 800848a:	2b50      	cmp	r3, #80	; 0x50
 800848c:	d03b      	beq.n	8008506 <HAL_TIM_ConfigClockSource+0xfe>
 800848e:	d900      	bls.n	8008492 <HAL_TIM_ConfigClockSource+0x8a>
 8008490:	e072      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x170>
 8008492:	2b40      	cmp	r3, #64	; 0x40
 8008494:	d057      	beq.n	8008546 <HAL_TIM_ConfigClockSource+0x13e>
 8008496:	d900      	bls.n	800849a <HAL_TIM_ConfigClockSource+0x92>
 8008498:	e06e      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x170>
 800849a:	2b30      	cmp	r3, #48	; 0x30
 800849c:	d063      	beq.n	8008566 <HAL_TIM_ConfigClockSource+0x15e>
 800849e:	d86b      	bhi.n	8008578 <HAL_TIM_ConfigClockSource+0x170>
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	d060      	beq.n	8008566 <HAL_TIM_ConfigClockSource+0x15e>
 80084a4:	d868      	bhi.n	8008578 <HAL_TIM_ConfigClockSource+0x170>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d05d      	beq.n	8008566 <HAL_TIM_ConfigClockSource+0x15e>
 80084aa:	2b10      	cmp	r3, #16
 80084ac:	d05b      	beq.n	8008566 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80084ae:	e063      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	6899      	ldr	r1, [r3, #8]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f000 fc2e 	bl	8008d20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2277      	movs	r2, #119	; 0x77
 80084d0:	4313      	orrs	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	609a      	str	r2, [r3, #8]
      break;
 80084dc:	e04f      	b.n	800857e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6818      	ldr	r0, [r3, #0]
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	6899      	ldr	r1, [r3, #8]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f000 fc17 	bl	8008d20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	689a      	ldr	r2, [r3, #8]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2180      	movs	r1, #128	; 0x80
 80084fe:	01c9      	lsls	r1, r1, #7
 8008500:	430a      	orrs	r2, r1
 8008502:	609a      	str	r2, [r3, #8]
      break;
 8008504:	e03b      	b.n	800857e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6818      	ldr	r0, [r3, #0]
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	6859      	ldr	r1, [r3, #4]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	001a      	movs	r2, r3
 8008514:	f000 fb88 	bl	8008c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2150      	movs	r1, #80	; 0x50
 800851e:	0018      	movs	r0, r3
 8008520:	f000 fbe2 	bl	8008ce8 <TIM_ITRx_SetConfig>
      break;
 8008524:	e02b      	b.n	800857e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	6859      	ldr	r1, [r3, #4]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	001a      	movs	r2, r3
 8008534:	f000 fba6 	bl	8008c84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2160      	movs	r1, #96	; 0x60
 800853e:	0018      	movs	r0, r3
 8008540:	f000 fbd2 	bl	8008ce8 <TIM_ITRx_SetConfig>
      break;
 8008544:	e01b      	b.n	800857e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	6859      	ldr	r1, [r3, #4]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	001a      	movs	r2, r3
 8008554:	f000 fb68 	bl	8008c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2140      	movs	r1, #64	; 0x40
 800855e:	0018      	movs	r0, r3
 8008560:	f000 fbc2 	bl	8008ce8 <TIM_ITRx_SetConfig>
      break;
 8008564:	e00b      	b.n	800857e <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	0019      	movs	r1, r3
 8008570:	0010      	movs	r0, r2
 8008572:	f000 fbb9 	bl	8008ce8 <TIM_ITRx_SetConfig>
        break;
 8008576:	e002      	b.n	800857e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008578:	46c0      	nop			; (mov r8, r8)
 800857a:	e000      	b.n	800857e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800857c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	223d      	movs	r2, #61	; 0x3d
 8008582:	2101      	movs	r1, #1
 8008584:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	223c      	movs	r2, #60	; 0x3c
 800858a:	2100      	movs	r1, #0
 800858c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	0018      	movs	r0, r3
 8008592:	46bd      	mov	sp, r7
 8008594:	b004      	add	sp, #16
 8008596:	bd80      	pop	{r7, pc}
 8008598:	ffceff88 	.word	0xffceff88
 800859c:	ffff00ff 	.word	0xffff00ff

080085a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a34      	ldr	r2, [pc, #208]	; (8008684 <TIM_Base_SetConfig+0xe4>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d008      	beq.n	80085ca <TIM_Base_SetConfig+0x2a>
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	2380      	movs	r3, #128	; 0x80
 80085bc:	05db      	lsls	r3, r3, #23
 80085be:	429a      	cmp	r2, r3
 80085c0:	d003      	beq.n	80085ca <TIM_Base_SetConfig+0x2a>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a30      	ldr	r2, [pc, #192]	; (8008688 <TIM_Base_SetConfig+0xe8>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d108      	bne.n	80085dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2270      	movs	r2, #112	; 0x70
 80085ce:	4393      	bics	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	4313      	orrs	r3, r2
 80085da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a29      	ldr	r2, [pc, #164]	; (8008684 <TIM_Base_SetConfig+0xe4>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d018      	beq.n	8008616 <TIM_Base_SetConfig+0x76>
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	2380      	movs	r3, #128	; 0x80
 80085e8:	05db      	lsls	r3, r3, #23
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d013      	beq.n	8008616 <TIM_Base_SetConfig+0x76>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a25      	ldr	r2, [pc, #148]	; (8008688 <TIM_Base_SetConfig+0xe8>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d00f      	beq.n	8008616 <TIM_Base_SetConfig+0x76>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a24      	ldr	r2, [pc, #144]	; (800868c <TIM_Base_SetConfig+0xec>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d00b      	beq.n	8008616 <TIM_Base_SetConfig+0x76>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a23      	ldr	r2, [pc, #140]	; (8008690 <TIM_Base_SetConfig+0xf0>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d007      	beq.n	8008616 <TIM_Base_SetConfig+0x76>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a22      	ldr	r2, [pc, #136]	; (8008694 <TIM_Base_SetConfig+0xf4>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d003      	beq.n	8008616 <TIM_Base_SetConfig+0x76>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a21      	ldr	r2, [pc, #132]	; (8008698 <TIM_Base_SetConfig+0xf8>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d108      	bne.n	8008628 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4a20      	ldr	r2, [pc, #128]	; (800869c <TIM_Base_SetConfig+0xfc>)
 800861a:	4013      	ands	r3, r2
 800861c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	4313      	orrs	r3, r2
 8008626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2280      	movs	r2, #128	; 0x80
 800862c:	4393      	bics	r3, r2
 800862e:	001a      	movs	r2, r3
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	4313      	orrs	r3, r2
 8008636:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	689a      	ldr	r2, [r3, #8]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a0c      	ldr	r2, [pc, #48]	; (8008684 <TIM_Base_SetConfig+0xe4>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d00b      	beq.n	800866e <TIM_Base_SetConfig+0xce>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a0d      	ldr	r2, [pc, #52]	; (8008690 <TIM_Base_SetConfig+0xf0>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d007      	beq.n	800866e <TIM_Base_SetConfig+0xce>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a0c      	ldr	r2, [pc, #48]	; (8008694 <TIM_Base_SetConfig+0xf4>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d003      	beq.n	800866e <TIM_Base_SetConfig+0xce>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a0b      	ldr	r2, [pc, #44]	; (8008698 <TIM_Base_SetConfig+0xf8>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d103      	bne.n	8008676 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	691a      	ldr	r2, [r3, #16]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	615a      	str	r2, [r3, #20]
}
 800867c:	46c0      	nop			; (mov r8, r8)
 800867e:	46bd      	mov	sp, r7
 8008680:	b004      	add	sp, #16
 8008682:	bd80      	pop	{r7, pc}
 8008684:	40012c00 	.word	0x40012c00
 8008688:	40000400 	.word	0x40000400
 800868c:	40002000 	.word	0x40002000
 8008690:	40014000 	.word	0x40014000
 8008694:	40014400 	.word	0x40014400
 8008698:	40014800 	.word	0x40014800
 800869c:	fffffcff 	.word	0xfffffcff

080086a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	2201      	movs	r2, #1
 80086b0:	4393      	bics	r3, r2
 80086b2:	001a      	movs	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4a32      	ldr	r2, [pc, #200]	; (8008798 <TIM_OC1_SetConfig+0xf8>)
 80086ce:	4013      	ands	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2203      	movs	r2, #3
 80086d6:	4393      	bics	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2202      	movs	r2, #2
 80086e8:	4393      	bics	r3, r2
 80086ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a28      	ldr	r2, [pc, #160]	; (800879c <TIM_OC1_SetConfig+0xfc>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d00b      	beq.n	8008716 <TIM_OC1_SetConfig+0x76>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a27      	ldr	r2, [pc, #156]	; (80087a0 <TIM_OC1_SetConfig+0x100>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d007      	beq.n	8008716 <TIM_OC1_SetConfig+0x76>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a26      	ldr	r2, [pc, #152]	; (80087a4 <TIM_OC1_SetConfig+0x104>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d003      	beq.n	8008716 <TIM_OC1_SetConfig+0x76>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a25      	ldr	r2, [pc, #148]	; (80087a8 <TIM_OC1_SetConfig+0x108>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d10c      	bne.n	8008730 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2208      	movs	r2, #8
 800871a:	4393      	bics	r3, r2
 800871c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	4313      	orrs	r3, r2
 8008726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2204      	movs	r2, #4
 800872c:	4393      	bics	r3, r2
 800872e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4a1a      	ldr	r2, [pc, #104]	; (800879c <TIM_OC1_SetConfig+0xfc>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d00b      	beq.n	8008750 <TIM_OC1_SetConfig+0xb0>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a19      	ldr	r2, [pc, #100]	; (80087a0 <TIM_OC1_SetConfig+0x100>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d007      	beq.n	8008750 <TIM_OC1_SetConfig+0xb0>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a18      	ldr	r2, [pc, #96]	; (80087a4 <TIM_OC1_SetConfig+0x104>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d003      	beq.n	8008750 <TIM_OC1_SetConfig+0xb0>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a17      	ldr	r2, [pc, #92]	; (80087a8 <TIM_OC1_SetConfig+0x108>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d111      	bne.n	8008774 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	4a16      	ldr	r2, [pc, #88]	; (80087ac <TIM_OC1_SetConfig+0x10c>)
 8008754:	4013      	ands	r3, r2
 8008756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	4a15      	ldr	r2, [pc, #84]	; (80087b0 <TIM_OC1_SetConfig+0x110>)
 800875c:	4013      	ands	r3, r2
 800875e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	4313      	orrs	r3, r2
 8008768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4313      	orrs	r3, r2
 8008772:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	685a      	ldr	r2, [r3, #4]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	621a      	str	r2, [r3, #32]
}
 800878e:	46c0      	nop			; (mov r8, r8)
 8008790:	46bd      	mov	sp, r7
 8008792:	b006      	add	sp, #24
 8008794:	bd80      	pop	{r7, pc}
 8008796:	46c0      	nop			; (mov r8, r8)
 8008798:	fffeff8f 	.word	0xfffeff8f
 800879c:	40012c00 	.word	0x40012c00
 80087a0:	40014000 	.word	0x40014000
 80087a4:	40014400 	.word	0x40014400
 80087a8:	40014800 	.word	0x40014800
 80087ac:	fffffeff 	.word	0xfffffeff
 80087b0:	fffffdff 	.word	0xfffffdff

080087b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	2210      	movs	r2, #16
 80087c4:	4393      	bics	r3, r2
 80087c6:	001a      	movs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	4a2e      	ldr	r2, [pc, #184]	; (800889c <TIM_OC2_SetConfig+0xe8>)
 80087e2:	4013      	ands	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	4a2d      	ldr	r2, [pc, #180]	; (80088a0 <TIM_OC2_SetConfig+0xec>)
 80087ea:	4013      	ands	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	021b      	lsls	r3, r3, #8
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	2220      	movs	r2, #32
 80087fe:	4393      	bics	r3, r2
 8008800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	4313      	orrs	r3, r2
 800880c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a24      	ldr	r2, [pc, #144]	; (80088a4 <TIM_OC2_SetConfig+0xf0>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d10d      	bne.n	8008832 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2280      	movs	r2, #128	; 0x80
 800881a:	4393      	bics	r3, r2
 800881c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	011b      	lsls	r3, r3, #4
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2240      	movs	r2, #64	; 0x40
 800882e:	4393      	bics	r3, r2
 8008830:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a1b      	ldr	r2, [pc, #108]	; (80088a4 <TIM_OC2_SetConfig+0xf0>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d00b      	beq.n	8008852 <TIM_OC2_SetConfig+0x9e>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a1a      	ldr	r2, [pc, #104]	; (80088a8 <TIM_OC2_SetConfig+0xf4>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d007      	beq.n	8008852 <TIM_OC2_SetConfig+0x9e>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a19      	ldr	r2, [pc, #100]	; (80088ac <TIM_OC2_SetConfig+0xf8>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d003      	beq.n	8008852 <TIM_OC2_SetConfig+0x9e>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a18      	ldr	r2, [pc, #96]	; (80088b0 <TIM_OC2_SetConfig+0xfc>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d113      	bne.n	800887a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	4a17      	ldr	r2, [pc, #92]	; (80088b4 <TIM_OC2_SetConfig+0x100>)
 8008856:	4013      	ands	r3, r2
 8008858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	4a16      	ldr	r2, [pc, #88]	; (80088b8 <TIM_OC2_SetConfig+0x104>)
 800885e:	4013      	ands	r3, r2
 8008860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	4313      	orrs	r3, r2
 800886c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	4313      	orrs	r3, r2
 8008878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	685a      	ldr	r2, [r3, #4]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	621a      	str	r2, [r3, #32]
}
 8008894:	46c0      	nop			; (mov r8, r8)
 8008896:	46bd      	mov	sp, r7
 8008898:	b006      	add	sp, #24
 800889a:	bd80      	pop	{r7, pc}
 800889c:	feff8fff 	.word	0xfeff8fff
 80088a0:	fffffcff 	.word	0xfffffcff
 80088a4:	40012c00 	.word	0x40012c00
 80088a8:	40014000 	.word	0x40014000
 80088ac:	40014400 	.word	0x40014400
 80088b0:	40014800 	.word	0x40014800
 80088b4:	fffffbff 	.word	0xfffffbff
 80088b8:	fffff7ff 	.word	0xfffff7ff

080088bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	4a35      	ldr	r2, [pc, #212]	; (80089a0 <TIM_OC3_SetConfig+0xe4>)
 80088cc:	401a      	ands	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	69db      	ldr	r3, [r3, #28]
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	4a2f      	ldr	r2, [pc, #188]	; (80089a4 <TIM_OC3_SetConfig+0xe8>)
 80088e8:	4013      	ands	r3, r2
 80088ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2203      	movs	r2, #3
 80088f0:	4393      	bics	r3, r2
 80088f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	4a29      	ldr	r2, [pc, #164]	; (80089a8 <TIM_OC3_SetConfig+0xec>)
 8008902:	4013      	ands	r3, r2
 8008904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	021b      	lsls	r3, r3, #8
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	4313      	orrs	r3, r2
 8008910:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a25      	ldr	r2, [pc, #148]	; (80089ac <TIM_OC3_SetConfig+0xf0>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d10d      	bne.n	8008936 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	4a24      	ldr	r2, [pc, #144]	; (80089b0 <TIM_OC3_SetConfig+0xf4>)
 800891e:	4013      	ands	r3, r2
 8008920:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	021b      	lsls	r3, r3, #8
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	4313      	orrs	r3, r2
 800892c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	4a20      	ldr	r2, [pc, #128]	; (80089b4 <TIM_OC3_SetConfig+0xf8>)
 8008932:	4013      	ands	r3, r2
 8008934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a1c      	ldr	r2, [pc, #112]	; (80089ac <TIM_OC3_SetConfig+0xf0>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d00b      	beq.n	8008956 <TIM_OC3_SetConfig+0x9a>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a1d      	ldr	r2, [pc, #116]	; (80089b8 <TIM_OC3_SetConfig+0xfc>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d007      	beq.n	8008956 <TIM_OC3_SetConfig+0x9a>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a1c      	ldr	r2, [pc, #112]	; (80089bc <TIM_OC3_SetConfig+0x100>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d003      	beq.n	8008956 <TIM_OC3_SetConfig+0x9a>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a1b      	ldr	r2, [pc, #108]	; (80089c0 <TIM_OC3_SetConfig+0x104>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d113      	bne.n	800897e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	4a1a      	ldr	r2, [pc, #104]	; (80089c4 <TIM_OC3_SetConfig+0x108>)
 800895a:	4013      	ands	r3, r2
 800895c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	4a19      	ldr	r2, [pc, #100]	; (80089c8 <TIM_OC3_SetConfig+0x10c>)
 8008962:	4013      	ands	r3, r2
 8008964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	4313      	orrs	r3, r2
 8008970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	621a      	str	r2, [r3, #32]
}
 8008998:	46c0      	nop			; (mov r8, r8)
 800899a:	46bd      	mov	sp, r7
 800899c:	b006      	add	sp, #24
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	fffffeff 	.word	0xfffffeff
 80089a4:	fffeff8f 	.word	0xfffeff8f
 80089a8:	fffffdff 	.word	0xfffffdff
 80089ac:	40012c00 	.word	0x40012c00
 80089b0:	fffff7ff 	.word	0xfffff7ff
 80089b4:	fffffbff 	.word	0xfffffbff
 80089b8:	40014000 	.word	0x40014000
 80089bc:	40014400 	.word	0x40014400
 80089c0:	40014800 	.word	0x40014800
 80089c4:	ffffefff 	.word	0xffffefff
 80089c8:	ffffdfff 	.word	0xffffdfff

080089cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	4a28      	ldr	r2, [pc, #160]	; (8008a7c <TIM_OC4_SetConfig+0xb0>)
 80089dc:	401a      	ands	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4a22      	ldr	r2, [pc, #136]	; (8008a80 <TIM_OC4_SetConfig+0xb4>)
 80089f8:	4013      	ands	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4a21      	ldr	r2, [pc, #132]	; (8008a84 <TIM_OC4_SetConfig+0xb8>)
 8008a00:	4013      	ands	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	021b      	lsls	r3, r3, #8
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	4a1d      	ldr	r2, [pc, #116]	; (8008a88 <TIM_OC4_SetConfig+0xbc>)
 8008a14:	4013      	ands	r3, r2
 8008a16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	031b      	lsls	r3, r3, #12
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a19      	ldr	r2, [pc, #100]	; (8008a8c <TIM_OC4_SetConfig+0xc0>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d00b      	beq.n	8008a44 <TIM_OC4_SetConfig+0x78>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a18      	ldr	r2, [pc, #96]	; (8008a90 <TIM_OC4_SetConfig+0xc4>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d007      	beq.n	8008a44 <TIM_OC4_SetConfig+0x78>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a17      	ldr	r2, [pc, #92]	; (8008a94 <TIM_OC4_SetConfig+0xc8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d003      	beq.n	8008a44 <TIM_OC4_SetConfig+0x78>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a16      	ldr	r2, [pc, #88]	; (8008a98 <TIM_OC4_SetConfig+0xcc>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d109      	bne.n	8008a58 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	4a15      	ldr	r2, [pc, #84]	; (8008a9c <TIM_OC4_SetConfig+0xd0>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	019b      	lsls	r3, r3, #6
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	621a      	str	r2, [r3, #32]
}
 8008a72:	46c0      	nop			; (mov r8, r8)
 8008a74:	46bd      	mov	sp, r7
 8008a76:	b006      	add	sp, #24
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	46c0      	nop			; (mov r8, r8)
 8008a7c:	ffffefff 	.word	0xffffefff
 8008a80:	feff8fff 	.word	0xfeff8fff
 8008a84:	fffffcff 	.word	0xfffffcff
 8008a88:	ffffdfff 	.word	0xffffdfff
 8008a8c:	40012c00 	.word	0x40012c00
 8008a90:	40014000 	.word	0x40014000
 8008a94:	40014400 	.word	0x40014400
 8008a98:	40014800 	.word	0x40014800
 8008a9c:	ffffbfff 	.word	0xffffbfff

08008aa0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	4a25      	ldr	r2, [pc, #148]	; (8008b44 <TIM_OC5_SetConfig+0xa4>)
 8008ab0:	401a      	ands	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4a1f      	ldr	r2, [pc, #124]	; (8008b48 <TIM_OC5_SetConfig+0xa8>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	4a1b      	ldr	r2, [pc, #108]	; (8008b4c <TIM_OC5_SetConfig+0xac>)
 8008ade:	4013      	ands	r3, r2
 8008ae0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	041b      	lsls	r3, r3, #16
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a17      	ldr	r2, [pc, #92]	; (8008b50 <TIM_OC5_SetConfig+0xb0>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d00b      	beq.n	8008b0e <TIM_OC5_SetConfig+0x6e>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a16      	ldr	r2, [pc, #88]	; (8008b54 <TIM_OC5_SetConfig+0xb4>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d007      	beq.n	8008b0e <TIM_OC5_SetConfig+0x6e>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a15      	ldr	r2, [pc, #84]	; (8008b58 <TIM_OC5_SetConfig+0xb8>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d003      	beq.n	8008b0e <TIM_OC5_SetConfig+0x6e>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a14      	ldr	r2, [pc, #80]	; (8008b5c <TIM_OC5_SetConfig+0xbc>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d109      	bne.n	8008b22 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	4a0c      	ldr	r2, [pc, #48]	; (8008b44 <TIM_OC5_SetConfig+0xa4>)
 8008b12:	4013      	ands	r3, r2
 8008b14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	021b      	lsls	r3, r3, #8
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	621a      	str	r2, [r3, #32]
}
 8008b3c:	46c0      	nop			; (mov r8, r8)
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	b006      	add	sp, #24
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	fffeffff 	.word	0xfffeffff
 8008b48:	fffeff8f 	.word	0xfffeff8f
 8008b4c:	fffdffff 	.word	0xfffdffff
 8008b50:	40012c00 	.word	0x40012c00
 8008b54:	40014000 	.word	0x40014000
 8008b58:	40014400 	.word	0x40014400
 8008b5c:	40014800 	.word	0x40014800

08008b60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b086      	sub	sp, #24
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	4a26      	ldr	r2, [pc, #152]	; (8008c08 <TIM_OC6_SetConfig+0xa8>)
 8008b70:	401a      	ands	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	4a20      	ldr	r2, [pc, #128]	; (8008c0c <TIM_OC6_SetConfig+0xac>)
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	4a1c      	ldr	r2, [pc, #112]	; (8008c10 <TIM_OC6_SetConfig+0xb0>)
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	051b      	lsls	r3, r3, #20
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a18      	ldr	r2, [pc, #96]	; (8008c14 <TIM_OC6_SetConfig+0xb4>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d00b      	beq.n	8008bd0 <TIM_OC6_SetConfig+0x70>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a17      	ldr	r2, [pc, #92]	; (8008c18 <TIM_OC6_SetConfig+0xb8>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d007      	beq.n	8008bd0 <TIM_OC6_SetConfig+0x70>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a16      	ldr	r2, [pc, #88]	; (8008c1c <TIM_OC6_SetConfig+0xbc>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d003      	beq.n	8008bd0 <TIM_OC6_SetConfig+0x70>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a15      	ldr	r2, [pc, #84]	; (8008c20 <TIM_OC6_SetConfig+0xc0>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d109      	bne.n	8008be4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	4a14      	ldr	r2, [pc, #80]	; (8008c24 <TIM_OC6_SetConfig+0xc4>)
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	029b      	lsls	r3, r3, #10
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	621a      	str	r2, [r3, #32]
}
 8008bfe:	46c0      	nop			; (mov r8, r8)
 8008c00:	46bd      	mov	sp, r7
 8008c02:	b006      	add	sp, #24
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	46c0      	nop			; (mov r8, r8)
 8008c08:	ffefffff 	.word	0xffefffff
 8008c0c:	feff8fff 	.word	0xfeff8fff
 8008c10:	ffdfffff 	.word	0xffdfffff
 8008c14:	40012c00 	.word	0x40012c00
 8008c18:	40014000 	.word	0x40014000
 8008c1c:	40014400 	.word	0x40014400
 8008c20:	40014800 	.word	0x40014800
 8008c24:	fffbffff 	.word	0xfffbffff

08008c28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	4393      	bics	r3, r2
 8008c42:	001a      	movs	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	22f0      	movs	r2, #240	; 0xf0
 8008c52:	4393      	bics	r3, r2
 8008c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	011b      	lsls	r3, r3, #4
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	220a      	movs	r2, #10
 8008c64:	4393      	bics	r3, r2
 8008c66:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	621a      	str	r2, [r3, #32]
}
 8008c7c:	46c0      	nop			; (mov r8, r8)
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	b006      	add	sp, #24
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6a1b      	ldr	r3, [r3, #32]
 8008c94:	2210      	movs	r2, #16
 8008c96:	4393      	bics	r3, r2
 8008c98:	001a      	movs	r2, r3
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6a1b      	ldr	r3, [r3, #32]
 8008ca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	4a0d      	ldr	r2, [pc, #52]	; (8008ce4 <TIM_TI2_ConfigInputStage+0x60>)
 8008cae:	4013      	ands	r3, r2
 8008cb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	031b      	lsls	r3, r3, #12
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	22a0      	movs	r2, #160	; 0xa0
 8008cc0:	4393      	bics	r3, r2
 8008cc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	011b      	lsls	r3, r3, #4
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	621a      	str	r2, [r3, #32]
}
 8008cda:	46c0      	nop			; (mov r8, r8)
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	b006      	add	sp, #24
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	46c0      	nop			; (mov r8, r8)
 8008ce4:	ffff0fff 	.word	0xffff0fff

08008ce8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	4a08      	ldr	r2, [pc, #32]	; (8008d1c <TIM_ITRx_SetConfig+0x34>)
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	2207      	movs	r2, #7
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	609a      	str	r2, [r3, #8]
}
 8008d12:	46c0      	nop			; (mov r8, r8)
 8008d14:	46bd      	mov	sp, r7
 8008d16:	b004      	add	sp, #16
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	46c0      	nop			; (mov r8, r8)
 8008d1c:	ffcfff8f 	.word	0xffcfff8f

08008d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
 8008d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	4a09      	ldr	r2, [pc, #36]	; (8008d5c <TIM_ETR_SetConfig+0x3c>)
 8008d38:	4013      	ands	r3, r2
 8008d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	021a      	lsls	r2, r3, #8
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	431a      	orrs	r2, r3
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	609a      	str	r2, [r3, #8]
}
 8008d54:	46c0      	nop			; (mov r8, r8)
 8008d56:	46bd      	mov	sp, r7
 8008d58:	b006      	add	sp, #24
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	ffff00ff 	.word	0xffff00ff

08008d60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	221f      	movs	r2, #31
 8008d70:	4013      	ands	r3, r2
 8008d72:	2201      	movs	r2, #1
 8008d74:	409a      	lsls	r2, r3
 8008d76:	0013      	movs	r3, r2
 8008d78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	43d2      	mvns	r2, r2
 8008d82:	401a      	ands	r2, r3
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6a1a      	ldr	r2, [r3, #32]
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	211f      	movs	r1, #31
 8008d90:	400b      	ands	r3, r1
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	4099      	lsls	r1, r3
 8008d96:	000b      	movs	r3, r1
 8008d98:	431a      	orrs	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	621a      	str	r2, [r3, #32]
}
 8008d9e:	46c0      	nop			; (mov r8, r8)
 8008da0:	46bd      	mov	sp, r7
 8008da2:	b006      	add	sp, #24
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	223c      	movs	r2, #60	; 0x3c
 8008db6:	5c9b      	ldrb	r3, [r3, r2]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d101      	bne.n	8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	e055      	b.n	8008e6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	223c      	movs	r2, #60	; 0x3c
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	223d      	movs	r2, #61	; 0x3d
 8008dcc:	2102      	movs	r1, #2
 8008dce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a23      	ldr	r2, [pc, #140]	; (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d108      	bne.n	8008dfc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4a22      	ldr	r2, [pc, #136]	; (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008dee:	4013      	ands	r3, r2
 8008df0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2270      	movs	r2, #112	; 0x70
 8008e00:	4393      	bics	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a16      	ldr	r2, [pc, #88]	; (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d00f      	beq.n	8008e40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	2380      	movs	r3, #128	; 0x80
 8008e26:	05db      	lsls	r3, r3, #23
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d009      	beq.n	8008e40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a12      	ldr	r2, [pc, #72]	; (8008e7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d004      	beq.n	8008e40 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a11      	ldr	r2, [pc, #68]	; (8008e80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d10c      	bne.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2280      	movs	r2, #128	; 0x80
 8008e44:	4393      	bics	r3, r2
 8008e46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	223d      	movs	r2, #61	; 0x3d
 8008e5e:	2101      	movs	r1, #1
 8008e60:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	223c      	movs	r2, #60	; 0x3c
 8008e66:	2100      	movs	r1, #0
 8008e68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	0018      	movs	r0, r3
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	b004      	add	sp, #16
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	40012c00 	.word	0x40012c00
 8008e78:	ff0fffff 	.word	0xff0fffff
 8008e7c:	40000400 	.word	0x40000400
 8008e80:	40014000 	.word	0x40014000

08008e84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	223c      	movs	r2, #60	; 0x3c
 8008e96:	5c9b      	ldrb	r3, [r3, r2]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d101      	bne.n	8008ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	e079      	b.n	8008f94 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	223c      	movs	r2, #60	; 0x3c
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	22ff      	movs	r2, #255	; 0xff
 8008eac:	4393      	bics	r3, r2
 8008eae:	001a      	movs	r2, r3
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4a38      	ldr	r2, [pc, #224]	; (8008f9c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008ebc:	401a      	ands	r2, r3
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	4a35      	ldr	r2, [pc, #212]	; (8008fa0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008eca:	401a      	ands	r2, r3
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	4a33      	ldr	r2, [pc, #204]	; (8008fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008ed8:	401a      	ands	r2, r3
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	4a30      	ldr	r2, [pc, #192]	; (8008fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008ee6:	401a      	ands	r2, r3
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4a2e      	ldr	r2, [pc, #184]	; (8008fac <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008ef4:	401a      	ands	r2, r3
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	4a2b      	ldr	r2, [pc, #172]	; (8008fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008f02:	401a      	ands	r2, r3
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4a29      	ldr	r2, [pc, #164]	; (8008fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008f10:	401a      	ands	r2, r3
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	041b      	lsls	r3, r3, #16
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a25      	ldr	r2, [pc, #148]	; (8008fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d106      	bne.n	8008f34 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4a24      	ldr	r2, [pc, #144]	; (8008fbc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008f2a:	401a      	ands	r2, r3
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a1f      	ldr	r2, [pc, #124]	; (8008fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d121      	bne.n	8008f82 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	4a1f      	ldr	r2, [pc, #124]	; (8008fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008f42:	401a      	ands	r2, r3
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f48:	051b      	lsls	r3, r3, #20
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4a1c      	ldr	r2, [pc, #112]	; (8008fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8008f52:	401a      	ands	r2, r3
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	6a1b      	ldr	r3, [r3, #32]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	4a1a      	ldr	r2, [pc, #104]	; (8008fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008f60:	401a      	ands	r2, r3
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	4313      	orrs	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a12      	ldr	r2, [pc, #72]	; (8008fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d106      	bne.n	8008f82 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	4a15      	ldr	r2, [pc, #84]	; (8008fcc <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008f78:	401a      	ands	r2, r3
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	223c      	movs	r2, #60	; 0x3c
 8008f8e:	2100      	movs	r1, #0
 8008f90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	0018      	movs	r0, r3
 8008f96:	46bd      	mov	sp, r7
 8008f98:	b004      	add	sp, #16
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	fffffcff 	.word	0xfffffcff
 8008fa0:	fffffbff 	.word	0xfffffbff
 8008fa4:	fffff7ff 	.word	0xfffff7ff
 8008fa8:	ffffefff 	.word	0xffffefff
 8008fac:	ffffdfff 	.word	0xffffdfff
 8008fb0:	ffffbfff 	.word	0xffffbfff
 8008fb4:	fff0ffff 	.word	0xfff0ffff
 8008fb8:	40012c00 	.word	0x40012c00
 8008fbc:	efffffff 	.word	0xefffffff
 8008fc0:	ff0fffff 	.word	0xff0fffff
 8008fc4:	feffffff 	.word	0xfeffffff
 8008fc8:	fdffffff 	.word	0xfdffffff
 8008fcc:	dfffffff 	.word	0xdfffffff

08008fd0 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08a      	sub	sp, #40	; 0x28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	223c      	movs	r2, #60	; 0x3c
 8008fe0:	5c9b      	ldrb	r3, [r3, r2]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d101      	bne.n	8008fea <HAL_TIMEx_ConfigBreakInput+0x1a>
 8008fe6:	2302      	movs	r3, #2
 8008fe8:	e08e      	b.n	8009108 <HAL_TIMEx_ConfigBreakInput+0x138>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	223c      	movs	r2, #60	; 0x3c
 8008fee:	2101      	movs	r1, #1
 8008ff0:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b04      	cmp	r3, #4
 8008ff8:	d019      	beq.n	800902e <HAL_TIMEx_ConfigBreakInput+0x5e>
 8008ffa:	d822      	bhi.n	8009042 <HAL_TIMEx_ConfigBreakInput+0x72>
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d002      	beq.n	8009006 <HAL_TIMEx_ConfigBreakInput+0x36>
 8009000:	2b02      	cmp	r3, #2
 8009002:	d00a      	beq.n	800901a <HAL_TIMEx_ConfigBreakInput+0x4a>
 8009004:	e01d      	b.n	8009042 <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8009006:	2301      	movs	r3, #1
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800900a:	2300      	movs	r3, #0
 800900c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800900e:	2380      	movs	r3, #128	; 0x80
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8009014:	2309      	movs	r3, #9
 8009016:	61bb      	str	r3, [r7, #24]
      break;
 8009018:	e01c      	b.n	8009054 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800901a:	2302      	movs	r3, #2
 800901c:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800901e:	2301      	movs	r3, #1
 8009020:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8009022:	2380      	movs	r3, #128	; 0x80
 8009024:	00db      	lsls	r3, r3, #3
 8009026:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8009028:	230a      	movs	r3, #10
 800902a:	61bb      	str	r3, [r7, #24]
      break;
 800902c:	e012      	b.n	8009054 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800902e:	2304      	movs	r3, #4
 8009030:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8009032:	2302      	movs	r3, #2
 8009034:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8009036:	2380      	movs	r3, #128	; 0x80
 8009038:	011b      	lsls	r3, r3, #4
 800903a:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800903c:	230b      	movs	r3, #11
 800903e:	61bb      	str	r3, [r7, #24]
      break;
 8009040:	e008      	b.n	8009054 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 8009042:	2300      	movs	r3, #0
 8009044:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 8009046:	2300      	movs	r3, #0
 8009048:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 800904a:	2300      	movs	r3, #0
 800904c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	61bb      	str	r3, [r7, #24]
      break;
 8009052:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d003      	beq.n	8009062 <HAL_TIMEx_ConfigBreakInput+0x92>
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2b02      	cmp	r3, #2
 800905e:	d027      	beq.n	80090b0 <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 8009060:	e04d      	b.n	80090fe <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009068:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	43da      	mvns	r2, r3
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	4013      	ands	r3, r2
 8009072:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	409a      	lsls	r2, r3
 800907c:	0013      	movs	r3, r2
 800907e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009080:	4013      	ands	r3, r2
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	4313      	orrs	r3, r2
 8009086:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	43da      	mvns	r2, r3
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	4013      	ands	r3, r2
 8009090:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	689a      	ldr	r2, [r3, #8]
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	409a      	lsls	r2, r3
 800909a:	0013      	movs	r3, r2
 800909c:	6a3a      	ldr	r2, [r7, #32]
 800909e:	4013      	ands	r3, r2
 80090a0:	697a      	ldr	r2, [r7, #20]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 80090ae:	e026      	b.n	80090fe <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090b6:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	43da      	mvns	r2, r3
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	4013      	ands	r3, r2
 80090c0:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	409a      	lsls	r2, r3
 80090ca:	0013      	movs	r3, r2
 80090cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ce:	4013      	ands	r3, r2
 80090d0:	697a      	ldr	r2, [r7, #20]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	43da      	mvns	r2, r3
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	4013      	ands	r3, r2
 80090de:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689a      	ldr	r2, [r3, #8]
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	409a      	lsls	r2, r3
 80090e8:	0013      	movs	r3, r2
 80090ea:	6a3a      	ldr	r2, [r7, #32]
 80090ec:	4013      	ands	r3, r2
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80090fc:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	223c      	movs	r2, #60	; 0x3c
 8009102:	2100      	movs	r1, #0
 8009104:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	0018      	movs	r0, r3
 800910a:	46bd      	mov	sp, r7
 800910c:	b00a      	add	sp, #40	; 0x28
 800910e:	bd80      	pop	{r7, pc}

08009110 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e03f      	b.n	80091a2 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2259      	movs	r2, #89	; 0x59
 8009126:	5c9b      	ldrb	r3, [r3, r2]
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d107      	bne.n	800913e <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2258      	movs	r2, #88	; 0x58
 8009132:	2100      	movs	r1, #0
 8009134:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	0018      	movs	r0, r3
 800913a:	f7f9 fd95 	bl	8002c68 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2259      	movs	r2, #89	; 0x59
 8009142:	2102      	movs	r1, #2
 8009144:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2101      	movs	r1, #1
 8009152:	438a      	bics	r2, r1
 8009154:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	0018      	movs	r0, r3
 800915a:	f000 fbdb 	bl	8009914 <USART_SetConfig>
 800915e:	0003      	movs	r3, r0
 8009160:	2b01      	cmp	r3, #1
 8009162:	d101      	bne.n	8009168 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e01c      	b.n	80091a2 <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	490e      	ldr	r1, [pc, #56]	; (80091ac <HAL_USART_Init+0x9c>)
 8009174:	400a      	ands	r2, r1
 8009176:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689a      	ldr	r2, [r3, #8]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	212a      	movs	r1, #42	; 0x2a
 8009184:	438a      	bics	r2, r1
 8009186:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2101      	movs	r1, #1
 8009194:	430a      	orrs	r2, r1
 8009196:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	0018      	movs	r0, r3
 800919c:	f000 fe56 	bl	8009e4c <USART_CheckIdleState>
 80091a0:	0003      	movs	r3, r0
}
 80091a2:	0018      	movs	r0, r3
 80091a4:	46bd      	mov	sp, r7
 80091a6:	b002      	add	sp, #8
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	46c0      	nop			; (mov r8, r8)
 80091ac:	ffffbfff 	.word	0xffffbfff

080091b0 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b08a      	sub	sp, #40	; 0x28
 80091b4:	af02      	add	r7, sp, #8
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	603b      	str	r3, [r7, #0]
 80091bc:	1dbb      	adds	r3, r7, #6
 80091be:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2259      	movs	r2, #89	; 0x59
 80091c4:	5c9b      	ldrb	r3, [r3, r2]
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d000      	beq.n	80091ce <HAL_USART_Transmit+0x1e>
 80091cc:	e0a9      	b.n	8009322 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <HAL_USART_Transmit+0x2c>
 80091d4:	1dbb      	adds	r3, r7, #6
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e0a1      	b.n	8009324 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	2380      	movs	r3, #128	; 0x80
 80091e6:	015b      	lsls	r3, r3, #5
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d109      	bne.n	8009200 <HAL_USART_Transmit+0x50>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d105      	bne.n	8009200 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2201      	movs	r2, #1
 80091f8:	4013      	ands	r3, r2
 80091fa:	d001      	beq.n	8009200 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e091      	b.n	8009324 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2258      	movs	r2, #88	; 0x58
 8009204:	5c9b      	ldrb	r3, [r3, r2]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d101      	bne.n	800920e <HAL_USART_Transmit+0x5e>
 800920a:	2302      	movs	r3, #2
 800920c:	e08a      	b.n	8009324 <HAL_USART_Transmit+0x174>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2258      	movs	r2, #88	; 0x58
 8009212:	2101      	movs	r1, #1
 8009214:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2259      	movs	r2, #89	; 0x59
 8009220:	2112      	movs	r1, #18
 8009222:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009224:	f7f9 ff9a 	bl	800315c <HAL_GetTick>
 8009228:	0003      	movs	r3, r0
 800922a:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	1dba      	adds	r2, r7, #6
 8009230:	8812      	ldrh	r2, [r2, #0]
 8009232:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	1dba      	adds	r2, r7, #6
 8009238:	8812      	ldrh	r2, [r2, #0]
 800923a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	689a      	ldr	r2, [r3, #8]
 8009240:	2380      	movs	r3, #128	; 0x80
 8009242:	015b      	lsls	r3, r3, #5
 8009244:	429a      	cmp	r2, r3
 8009246:	d108      	bne.n	800925a <HAL_USART_Transmit+0xaa>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d104      	bne.n	800925a <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8009250:	2300      	movs	r3, #0
 8009252:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	61bb      	str	r3, [r7, #24]
 8009258:	e003      	b.n	8009262 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800925e:	2300      	movs	r3, #0
 8009260:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8009262:	e02a      	b.n	80092ba <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009264:	697a      	ldr	r2, [r7, #20]
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	0013      	movs	r3, r2
 800926e:	2200      	movs	r2, #0
 8009270:	2180      	movs	r1, #128	; 0x80
 8009272:	f000 fb19 	bl	80098a8 <USART_WaitOnFlagUntilTimeout>
 8009276:	1e03      	subs	r3, r0, #0
 8009278:	d001      	beq.n	800927e <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e052      	b.n	8009324 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10b      	bne.n	800929c <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	881b      	ldrh	r3, [r3, #0]
 8009288:	001a      	movs	r2, r3
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	05d2      	lsls	r2, r2, #23
 8009290:	0dd2      	lsrs	r2, r2, #23
 8009292:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	3302      	adds	r3, #2
 8009298:	61bb      	str	r3, [r7, #24]
 800929a:	e007      	b.n	80092ac <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	781a      	ldrb	r2, [r3, #0]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	3301      	adds	r3, #1
 80092aa:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	3b01      	subs	r3, #1
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092be:	b29b      	uxth	r3, r3
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1cf      	bne.n	8009264 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	0013      	movs	r3, r2
 80092ce:	2200      	movs	r2, #0
 80092d0:	2140      	movs	r1, #64	; 0x40
 80092d2:	f000 fae9 	bl	80098a8 <USART_WaitOnFlagUntilTimeout>
 80092d6:	1e03      	subs	r3, r0, #0
 80092d8:	d001      	beq.n	80092de <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e022      	b.n	8009324 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2240      	movs	r2, #64	; 0x40
 80092e4:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2208      	movs	r2, #8
 80092ec:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	699a      	ldr	r2, [r3, #24]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2108      	movs	r1, #8
 80092fa:	430a      	orrs	r2, r1
 80092fc:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	699a      	ldr	r2, [r3, #24]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2110      	movs	r1, #16
 800930a:	430a      	orrs	r2, r1
 800930c:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2259      	movs	r2, #89	; 0x59
 8009312:	2101      	movs	r1, #1
 8009314:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2258      	movs	r2, #88	; 0x58
 800931a:	2100      	movs	r1, #0
 800931c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	e000      	b.n	8009324 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009322:	2302      	movs	r3, #2
  }
}
 8009324:	0018      	movs	r0, r3
 8009326:	46bd      	mov	sp, r7
 8009328:	b008      	add	sp, #32
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_USART_Transmit_DMA>:
  * @param  pTxData pointer to data buffer (u8 or u16 data elements).
  * @param  Size amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 800932c:	b590      	push	{r4, r7, lr}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	1dbb      	adds	r3, r7, #6
 8009338:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800933a:	2317      	movs	r3, #23
 800933c:	18fb      	adds	r3, r7, r3
 800933e:	2200      	movs	r2, #0
 8009340:	701a      	strb	r2, [r3, #0]
  uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2259      	movs	r2, #89	; 0x59
 8009346:	5c9b      	ldrb	r3, [r3, r2]
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b01      	cmp	r3, #1
 800934c:	d000      	beq.n	8009350 <HAL_USART_Transmit_DMA+0x24>
 800934e:	e07d      	b.n	800944c <HAL_USART_Transmit_DMA+0x120>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <HAL_USART_Transmit_DMA+0x32>
 8009356:	1dbb      	adds	r3, r7, #6
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_USART_Transmit_DMA+0x36>
    {
      return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e075      	b.n	800944e <HAL_USART_Transmit_DMA+0x122>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	689a      	ldr	r2, [r3, #8]
 8009366:	2380      	movs	r3, #128	; 0x80
 8009368:	015b      	lsls	r3, r3, #5
 800936a:	429a      	cmp	r2, r3
 800936c:	d10a      	bne.n	8009384 <HAL_USART_Transmit_DMA+0x58>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d106      	bne.n	8009384 <HAL_USART_Transmit_DMA+0x58>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	001a      	movs	r2, r3
 800937a:	2301      	movs	r3, #1
 800937c:	4013      	ands	r3, r2
 800937e:	d001      	beq.n	8009384 <HAL_USART_Transmit_DMA+0x58>
      {
        return  HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e064      	b.n	800944e <HAL_USART_Transmit_DMA+0x122>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2258      	movs	r2, #88	; 0x58
 8009388:	5c9b      	ldrb	r3, [r3, r2]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d101      	bne.n	8009392 <HAL_USART_Transmit_DMA+0x66>
 800938e:	2302      	movs	r3, #2
 8009390:	e05d      	b.n	800944e <HAL_USART_Transmit_DMA+0x122>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2258      	movs	r2, #88	; 0x58
 8009396:	2101      	movs	r1, #1
 8009398:	5499      	strb	r1, [r3, r2]

    husart->pTxBuffPtr = pTxData;
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	629a      	str	r2, [r3, #40]	; 0x28
    husart->TxXferSize = Size;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	1dba      	adds	r2, r7, #6
 80093a4:	8812      	ldrh	r2, [r2, #0]
 80093a6:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	1dba      	adds	r2, r7, #6
 80093ac:	8812      	ldrh	r2, [r2, #0]
 80093ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2259      	movs	r2, #89	; 0x59
 80093ba:	2112      	movs	r1, #18
 80093bc:	5499      	strb	r1, [r3, r2]

    if (husart->hdmatx != NULL)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d01e      	beq.n	8009404 <HAL_USART_Transmit_DMA+0xd8>
    {
      /* Set the USART DMA transfer complete callback */
      husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ca:	4a23      	ldr	r2, [pc, #140]	; (8009458 <HAL_USART_Transmit_DMA+0x12c>)
 80093cc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the USART DMA Half transfer complete callback */
      husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d2:	4a22      	ldr	r2, [pc, #136]	; (800945c <HAL_USART_Transmit_DMA+0x130>)
 80093d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      husart->hdmatx->XferErrorCallback = USART_DMAError;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093da:	4a21      	ldr	r2, [pc, #132]	; (8009460 <HAL_USART_Transmit_DMA+0x134>)
 80093dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the USART transmit DMA channel */
      tmp = (uint32_t *)&pTxData;
 80093de:	2308      	movs	r3, #8
 80093e0:	18fb      	adds	r3, r7, r3
 80093e2:	613b      	str	r3, [r7, #16]
      status = HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->TDR, Size);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	6819      	ldr	r1, [r3, #0]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3328      	adds	r3, #40	; 0x28
 80093f2:	001a      	movs	r2, r3
 80093f4:	1dbb      	adds	r3, r7, #6
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	2417      	movs	r4, #23
 80093fa:	193c      	adds	r4, r7, r4
 80093fc:	f7fa faba 	bl	8003974 <HAL_DMA_Start_IT>
 8009400:	0003      	movs	r3, r0
 8009402:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8009404:	2317      	movs	r3, #23
 8009406:	18fb      	adds	r3, r7, r3
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d111      	bne.n	8009432 <HAL_USART_Transmit_DMA+0x106>
    {
      /* Clear the TC flag in the ICR register */
      __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2240      	movs	r2, #64	; 0x40
 8009414:	621a      	str	r2, [r3, #32]

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2258      	movs	r2, #88	; 0x58
 800941a:	2100      	movs	r1, #0
 800941c:	5499      	strb	r1, [r3, r2]

      /* Enable the DMA transfer for transmit request by setting the DMAT bit
         in the USART CR3 register */
      SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689a      	ldr	r2, [r3, #8]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2180      	movs	r1, #128	; 0x80
 800942a:	430a      	orrs	r2, r1
 800942c:	609a      	str	r2, [r3, #8]

      return HAL_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	e00d      	b.n	800944e <HAL_USART_Transmit_DMA+0x122>
    }
    else
    {
      /* Set error code to DMA */
      husart->ErrorCode = HAL_USART_ERROR_DMA;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2210      	movs	r2, #16
 8009436:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2258      	movs	r2, #88	; 0x58
 800943c:	2100      	movs	r1, #0
 800943e:	5499      	strb	r1, [r3, r2]

      /* Restore husart->State to ready */
      husart->State = HAL_USART_STATE_READY;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2259      	movs	r2, #89	; 0x59
 8009444:	2101      	movs	r1, #1
 8009446:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	e000      	b.n	800944e <HAL_USART_Transmit_DMA+0x122>
    }
  }
  else
  {
    return HAL_BUSY;
 800944c:	2302      	movs	r3, #2
  }
}
 800944e:	0018      	movs	r0, r3
 8009450:	46bd      	mov	sp, r7
 8009452:	b007      	add	sp, #28
 8009454:	bd90      	pop	{r4, r7, pc}
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	080097b1 	.word	0x080097b1
 800945c:	0800981b 	.word	0x0800981b
 8009460:	08009839 	.word	0x08009839

08009464 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	4aab      	ldr	r2, [pc, #684]	; (8009734 <HAL_USART_IRQHandler+0x2d0>)
 8009488:	4013      	ands	r3, r2
 800948a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d117      	bne.n	80094c2 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	2220      	movs	r2, #32
 8009496:	4013      	ands	r3, r2
 8009498:	d013      	beq.n	80094c2 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	2220      	movs	r2, #32
 800949e:	4013      	ands	r3, r2
 80094a0:	d104      	bne.n	80094ac <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	2380      	movs	r3, #128	; 0x80
 80094a6:	055b      	lsls	r3, r3, #21
 80094a8:	4013      	ands	r3, r2
 80094aa:	d00a      	beq.n	80094c2 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d100      	bne.n	80094b6 <HAL_USART_IRQHandler+0x52>
 80094b4:	e135      	b.n	8009722 <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	0010      	movs	r0, r2
 80094be:	4798      	blx	r3
      }
      return;
 80094c0:	e12f      	b.n	8009722 <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d100      	bne.n	80094ca <HAL_USART_IRQHandler+0x66>
 80094c8:	e0eb      	b.n	80096a2 <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	4a9a      	ldr	r2, [pc, #616]	; (8009738 <HAL_USART_IRQHandler+0x2d4>)
 80094ce:	4013      	ands	r3, r2
 80094d0:	d105      	bne.n	80094de <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 80094d2:	69ba      	ldr	r2, [r7, #24]
 80094d4:	2390      	movs	r3, #144	; 0x90
 80094d6:	005b      	lsls	r3, r3, #1
 80094d8:	4013      	ands	r3, r2
 80094da:	d100      	bne.n	80094de <HAL_USART_IRQHandler+0x7a>
 80094dc:	e0e1      	b.n	80096a2 <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	2201      	movs	r2, #1
 80094e2:	4013      	ands	r3, r2
 80094e4:	d00e      	beq.n	8009504 <HAL_USART_IRQHandler+0xa0>
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	2380      	movs	r3, #128	; 0x80
 80094ea:	005b      	lsls	r3, r3, #1
 80094ec:	4013      	ands	r3, r2
 80094ee:	d009      	beq.n	8009504 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2201      	movs	r2, #1
 80094f6:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094fc:	2201      	movs	r2, #1
 80094fe:	431a      	orrs	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	2202      	movs	r2, #2
 8009508:	4013      	ands	r3, r2
 800950a:	d00d      	beq.n	8009528 <HAL_USART_IRQHandler+0xc4>
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	2201      	movs	r2, #1
 8009510:	4013      	ands	r3, r2
 8009512:	d009      	beq.n	8009528 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2202      	movs	r2, #2
 800951a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009520:	2204      	movs	r2, #4
 8009522:	431a      	orrs	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	2204      	movs	r2, #4
 800952c:	4013      	ands	r3, r2
 800952e:	d00d      	beq.n	800954c <HAL_USART_IRQHandler+0xe8>
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2201      	movs	r2, #1
 8009534:	4013      	ands	r3, r2
 8009536:	d009      	beq.n	800954c <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2204      	movs	r2, #4
 800953e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009544:	2202      	movs	r2, #2
 8009546:	431a      	orrs	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	2208      	movs	r2, #8
 8009550:	4013      	ands	r3, r2
 8009552:	d011      	beq.n	8009578 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	2220      	movs	r2, #32
 8009558:	4013      	ands	r3, r2
 800955a:	d103      	bne.n	8009564 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	4a76      	ldr	r2, [pc, #472]	; (8009738 <HAL_USART_IRQHandler+0x2d4>)
 8009560:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009562:	d009      	beq.n	8009578 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2208      	movs	r2, #8
 800956a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009570:	2208      	movs	r2, #8
 8009572:	431a      	orrs	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009578:	69fa      	ldr	r2, [r7, #28]
 800957a:	2380      	movs	r3, #128	; 0x80
 800957c:	019b      	lsls	r3, r3, #6
 800957e:	4013      	ands	r3, r2
 8009580:	d01a      	beq.n	80095b8 <HAL_USART_IRQHandler+0x154>
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2201      	movs	r2, #1
 8009586:	4013      	ands	r3, r2
 8009588:	d016      	beq.n	80095b8 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2259      	movs	r2, #89	; 0x59
 800958e:	5c9b      	ldrb	r3, [r3, r2]
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b22      	cmp	r3, #34	; 0x22
 8009594:	d105      	bne.n	80095a2 <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2280      	movs	r2, #128	; 0x80
 800959c:	0192      	lsls	r2, r2, #6
 800959e:	621a      	str	r2, [r3, #32]
        return;
 80095a0:	e0c4      	b.n	800972c <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2280      	movs	r2, #128	; 0x80
 80095a8:	0192      	lsls	r2, r2, #6
 80095aa:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095b0:	2220      	movs	r2, #32
 80095b2:	431a      	orrs	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d100      	bne.n	80095c2 <HAL_USART_IRQHandler+0x15e>
 80095c0:	e0b1      	b.n	8009726 <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	2220      	movs	r2, #32
 80095c6:	4013      	ands	r3, r2
 80095c8:	d011      	beq.n	80095ee <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	2220      	movs	r2, #32
 80095ce:	4013      	ands	r3, r2
 80095d0:	d104      	bne.n	80095dc <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80095d2:	697a      	ldr	r2, [r7, #20]
 80095d4:	2380      	movs	r3, #128	; 0x80
 80095d6:	055b      	lsls	r3, r3, #21
 80095d8:	4013      	ands	r3, r2
 80095da:	d008      	beq.n	80095ee <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d004      	beq.n	80095ee <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	0010      	movs	r0, r2
 80095ec:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095f2:	2208      	movs	r2, #8
 80095f4:	4013      	ands	r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	2240      	movs	r2, #64	; 0x40
 8009600:	4013      	ands	r3, r2
 8009602:	2b40      	cmp	r3, #64	; 0x40
 8009604:	d002      	beq.n	800960c <HAL_USART_IRQHandler+0x1a8>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d040      	beq.n	800968e <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	0018      	movs	r0, r3
 8009610:	f000 f8ae 	bl	8009770 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	2240      	movs	r2, #64	; 0x40
 800961c:	4013      	ands	r3, r2
 800961e:	2b40      	cmp	r3, #64	; 0x40
 8009620:	d130      	bne.n	8009684 <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689a      	ldr	r2, [r3, #8]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2140      	movs	r1, #64	; 0x40
 800962e:	438a      	bics	r2, r1
 8009630:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009636:	2b00      	cmp	r3, #0
 8009638:	d008      	beq.n	800964c <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800963e:	2200      	movs	r2, #0
 8009640:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009646:	0018      	movs	r0, r3
 8009648:	f7fa fa1a 	bl	8003a80 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009650:	2b00      	cmp	r3, #0
 8009652:	d012      	beq.n	800967a <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009658:	4a38      	ldr	r2, [pc, #224]	; (800973c <HAL_USART_IRQHandler+0x2d8>)
 800965a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009660:	0018      	movs	r0, r3
 8009662:	f7fa fa0d 	bl	8003a80 <HAL_DMA_Abort_IT>
 8009666:	1e03      	subs	r3, r0, #0
 8009668:	d019      	beq.n	800969e <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800966e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009674:	0018      	movs	r0, r3
 8009676:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009678:	e011      	b.n	800969e <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	0018      	movs	r0, r3
 800967e:	f000 f86f 	bl	8009760 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009682:	e00c      	b.n	800969e <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	0018      	movs	r0, r3
 8009688:	f000 f86a 	bl	8009760 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800968c:	e007      	b.n	800969e <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	0018      	movs	r0, r3
 8009692:	f000 f865 	bl	8009760 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800969c:	e043      	b.n	8009726 <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800969e:	46c0      	nop			; (mov r8, r8)
    return;
 80096a0:	e041      	b.n	8009726 <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	2280      	movs	r2, #128	; 0x80
 80096a6:	4013      	ands	r3, r2
 80096a8:	d012      	beq.n	80096d0 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	2280      	movs	r2, #128	; 0x80
 80096ae:	4013      	ands	r3, r2
 80096b0:	d104      	bne.n	80096bc <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	2380      	movs	r3, #128	; 0x80
 80096b6:	041b      	lsls	r3, r3, #16
 80096b8:	4013      	ands	r3, r2
 80096ba:	d009      	beq.n	80096d0 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d032      	beq.n	800972a <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	0010      	movs	r0, r2
 80096cc:	4798      	blx	r3
    }
    return;
 80096ce:	e02c      	b.n	800972a <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	2240      	movs	r2, #64	; 0x40
 80096d4:	4013      	ands	r3, r2
 80096d6:	d008      	beq.n	80096ea <HAL_USART_IRQHandler+0x286>
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	2240      	movs	r2, #64	; 0x40
 80096dc:	4013      	ands	r3, r2
 80096de:	d004      	beq.n	80096ea <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	0018      	movs	r0, r3
 80096e4:	f000 fbf6 	bl	8009ed4 <USART_EndTransmit_IT>
    return;
 80096e8:	e020      	b.n	800972c <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80096ea:	69fa      	ldr	r2, [r7, #28]
 80096ec:	2380      	movs	r3, #128	; 0x80
 80096ee:	041b      	lsls	r3, r3, #16
 80096f0:	4013      	ands	r3, r2
 80096f2:	d009      	beq.n	8009708 <HAL_USART_IRQHandler+0x2a4>
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	2380      	movs	r3, #128	; 0x80
 80096f8:	05db      	lsls	r3, r3, #23
 80096fa:	4013      	ands	r3, r2
 80096fc:	d004      	beq.n	8009708 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	0018      	movs	r0, r3
 8009702:	f000 fc32 	bl	8009f6a <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8009706:	e011      	b.n	800972c <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009708:	69fa      	ldr	r2, [r7, #28]
 800970a:	2380      	movs	r3, #128	; 0x80
 800970c:	045b      	lsls	r3, r3, #17
 800970e:	4013      	ands	r3, r2
 8009710:	d00c      	beq.n	800972c <HAL_USART_IRQHandler+0x2c8>
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	2b00      	cmp	r3, #0
 8009716:	da09      	bge.n	800972c <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	0018      	movs	r0, r3
 800971c:	f000 fc1d 	bl	8009f5a <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8009720:	e004      	b.n	800972c <HAL_USART_IRQHandler+0x2c8>
      return;
 8009722:	46c0      	nop			; (mov r8, r8)
 8009724:	e002      	b.n	800972c <HAL_USART_IRQHandler+0x2c8>
    return;
 8009726:	46c0      	nop			; (mov r8, r8)
 8009728:	e000      	b.n	800972c <HAL_USART_IRQHandler+0x2c8>
    return;
 800972a:	46c0      	nop			; (mov r8, r8)
  }
}
 800972c:	46bd      	mov	sp, r7
 800972e:	b008      	add	sp, #32
 8009730:	bd80      	pop	{r7, pc}
 8009732:	46c0      	nop			; (mov r8, r8)
 8009734:	0000200f 	.word	0x0000200f
 8009738:	10000001 	.word	0x10000001
 800973c:	0800987f 	.word	0x0800987f

08009740 <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009748:	46c0      	nop			; (mov r8, r8)
 800974a:	46bd      	mov	sp, r7
 800974c:	b002      	add	sp, #8
 800974e:	bd80      	pop	{r7, pc}

08009750 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8009758:	46c0      	nop			; (mov r8, r8)
 800975a:	46bd      	mov	sp, r7
 800975c:	b002      	add	sp, #8
 800975e:	bd80      	pop	{r7, pc}

08009760 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8009768:	46c0      	nop			; (mov r8, r8)
 800976a:	46bd      	mov	sp, r7
 800976c:	b002      	add	sp, #8
 800976e:	bd80      	pop	{r7, pc}

08009770 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4909      	ldr	r1, [pc, #36]	; (80097a8 <USART_EndTransfer+0x38>)
 8009784:	400a      	ands	r2, r1
 8009786:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	689a      	ldr	r2, [r3, #8]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4906      	ldr	r1, [pc, #24]	; (80097ac <USART_EndTransfer+0x3c>)
 8009794:	400a      	ands	r2, r1
 8009796:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2259      	movs	r2, #89	; 0x59
 800979c:	2101      	movs	r1, #1
 800979e:	5499      	strb	r1, [r3, r2]
}
 80097a0:	46c0      	nop			; (mov r8, r8)
 80097a2:	46bd      	mov	sp, r7
 80097a4:	b002      	add	sp, #8
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	fffffe1f 	.word	0xfffffe1f
 80097ac:	ef7ffffe 	.word	0xef7ffffe

080097b0 <USART_DMATransmitCplt>:
  * @brief DMA USART transmit process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097bc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2220      	movs	r2, #32
 80097c6:	4013      	ands	r3, r2
 80097c8:	d119      	bne.n	80097fe <USART_DMATransmitCplt+0x4e>
  {
    husart->TxXferCount = 0U;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    if (husart->State == HAL_USART_STATE_BUSY_TX)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2259      	movs	r2, #89	; 0x59
 80097d4:	5c9b      	ldrb	r3, [r3, r2]
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b12      	cmp	r3, #18
 80097da:	d11a      	bne.n	8009812 <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	689a      	ldr	r2, [r3, #8]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2180      	movs	r1, #128	; 0x80
 80097e8:	438a      	bics	r2, r1
 80097ea:	609a      	str	r2, [r3, #8]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2140      	movs	r1, #64	; 0x40
 80097f8:	430a      	orrs	r2, r1
 80097fa:	601a      	str	r2, [r3, #0]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 80097fc:	e009      	b.n	8009812 <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2259      	movs	r2, #89	; 0x59
 8009802:	5c9b      	ldrb	r3, [r3, r2]
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b12      	cmp	r3, #18
 8009808:	d103      	bne.n	8009812 <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	0018      	movs	r0, r3
 800980e:	f7f7 fc7b 	bl	8001108 <HAL_USART_TxCpltCallback>
}
 8009812:	46c0      	nop			; (mov r8, r8)
 8009814:	46bd      	mov	sp, r7
 8009816:	b004      	add	sp, #16
 8009818:	bd80      	pop	{r7, pc}

0800981a <USART_DMATxHalfCplt>:
  * @brief DMA USART transmit process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b084      	sub	sp, #16
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009826:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	0018      	movs	r0, r3
 800982c:	f7ff ff88 	bl	8009740 <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8009830:	46c0      	nop			; (mov r8, r8)
 8009832:	46bd      	mov	sp, r7
 8009834:	b004      	add	sp, #16
 8009836:	bd80      	pop	{r7, pc}

08009838 <USART_DMAError>:
  * @brief DMA USART communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009844:	60fb      	str	r3, [r7, #12]

  husart->RxXferCount = 0U;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	85da      	strh	r2, [r3, #46]	; 0x2e
  USART_EndTransfer(husart);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	0018      	movs	r0, r3
 8009856:	f7ff ff8b 	bl	8009770 <USART_EndTransfer>

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800985e:	2210      	movs	r2, #16
 8009860:	431a      	orrs	r2, r3
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	65da      	str	r2, [r3, #92]	; 0x5c
  husart->State = HAL_USART_STATE_READY;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2259      	movs	r2, #89	; 0x59
 800986a:	2101      	movs	r1, #1
 800986c:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	0018      	movs	r0, r3
 8009872:	f7ff ff75 	bl	8009760 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8009876:	46c0      	nop			; (mov r8, r8)
 8009878:	46bd      	mov	sp, r7
 800987a:	b004      	add	sp, #16
 800987c:	bd80      	pop	{r7, pc}

0800987e <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b084      	sub	sp, #16
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988a:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	0018      	movs	r0, r3
 800989c:	f7ff ff60 	bl	8009760 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80098a0:	46c0      	nop			; (mov r8, r8)
 80098a2:	46bd      	mov	sp, r7
 80098a4:	b004      	add	sp, #16
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	603b      	str	r3, [r7, #0]
 80098b4:	1dfb      	adds	r3, r7, #7
 80098b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80098b8:	e017      	b.n	80098ea <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	3301      	adds	r3, #1
 80098be:	d014      	beq.n	80098ea <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098c0:	f7f9 fc4c 	bl	800315c <HAL_GetTick>
 80098c4:	0002      	movs	r2, r0
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d302      	bcc.n	80098d6 <USART_WaitOnFlagUntilTimeout+0x2e>
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d109      	bne.n	80098ea <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2259      	movs	r2, #89	; 0x59
 80098da:	2101      	movs	r1, #1
 80098dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2258      	movs	r2, #88	; 0x58
 80098e2:	2100      	movs	r1, #0
 80098e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e00f      	b.n	800990a <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	69db      	ldr	r3, [r3, #28]
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	4013      	ands	r3, r2
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	425a      	negs	r2, r3
 80098fa:	4153      	adcs	r3, r2
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	001a      	movs	r2, r3
 8009900:	1dfb      	adds	r3, r7, #7
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	429a      	cmp	r2, r3
 8009906:	d0d8      	beq.n	80098ba <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	0018      	movs	r0, r3
 800990c:	46bd      	mov	sp, r7
 800990e:	b004      	add	sp, #16
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800991c:	231e      	movs	r3, #30
 800991e:	18fb      	adds	r3, r7, r3
 8009920:	2200      	movs	r2, #0
 8009922:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8009924:	2300      	movs	r3, #0
 8009926:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	689a      	ldr	r2, [r3, #8]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	431a      	orrs	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	4313      	orrs	r3, r2
 8009938:	2280      	movs	r2, #128	; 0x80
 800993a:	0212      	lsls	r2, r2, #8
 800993c:	4313      	orrs	r3, r2
 800993e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4ab1      	ldr	r2, [pc, #708]	; (8009c0c <USART_SetConfig+0x2f8>)
 8009948:	4013      	ands	r3, r2
 800994a:	0019      	movs	r1, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	697a      	ldr	r2, [r7, #20]
 8009952:	430a      	orrs	r2, r1
 8009954:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8009956:	2380      	movs	r3, #128	; 0x80
 8009958:	011b      	lsls	r3, r3, #4
 800995a:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a1b      	ldr	r3, [r3, #32]
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	4313      	orrs	r3, r2
 8009964:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	699a      	ldr	r2, [r3, #24]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	4313      	orrs	r3, r2
 8009970:	697a      	ldr	r2, [r7, #20]
 8009972:	4313      	orrs	r3, r2
 8009974:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	4313      	orrs	r3, r2
 800997e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	4aa2      	ldr	r2, [pc, #648]	; (8009c10 <USART_SetConfig+0x2fc>)
 8009988:	4013      	ands	r3, r2
 800998a:	0019      	movs	r1, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	697a      	ldr	r2, [r7, #20]
 8009992:	430a      	orrs	r2, r1
 8009994:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999c:	220f      	movs	r2, #15
 800999e:	4393      	bics	r3, r2
 80099a0:	0019      	movs	r1, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	430a      	orrs	r2, r1
 80099ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a98      	ldr	r2, [pc, #608]	; (8009c14 <USART_SetConfig+0x300>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d127      	bne.n	8009a08 <USART_SetConfig+0xf4>
 80099b8:	4b97      	ldr	r3, [pc, #604]	; (8009c18 <USART_SetConfig+0x304>)
 80099ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099bc:	2203      	movs	r2, #3
 80099be:	4013      	ands	r3, r2
 80099c0:	2b03      	cmp	r3, #3
 80099c2:	d017      	beq.n	80099f4 <USART_SetConfig+0xe0>
 80099c4:	d81b      	bhi.n	80099fe <USART_SetConfig+0xea>
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d00a      	beq.n	80099e0 <USART_SetConfig+0xcc>
 80099ca:	d818      	bhi.n	80099fe <USART_SetConfig+0xea>
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <USART_SetConfig+0xc2>
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d00a      	beq.n	80099ea <USART_SetConfig+0xd6>
 80099d4:	e013      	b.n	80099fe <USART_SetConfig+0xea>
 80099d6:	231f      	movs	r3, #31
 80099d8:	18fb      	adds	r3, r7, r3
 80099da:	2200      	movs	r2, #0
 80099dc:	701a      	strb	r2, [r3, #0]
 80099de:	e058      	b.n	8009a92 <USART_SetConfig+0x17e>
 80099e0:	231f      	movs	r3, #31
 80099e2:	18fb      	adds	r3, r7, r3
 80099e4:	2202      	movs	r2, #2
 80099e6:	701a      	strb	r2, [r3, #0]
 80099e8:	e053      	b.n	8009a92 <USART_SetConfig+0x17e>
 80099ea:	231f      	movs	r3, #31
 80099ec:	18fb      	adds	r3, r7, r3
 80099ee:	2204      	movs	r2, #4
 80099f0:	701a      	strb	r2, [r3, #0]
 80099f2:	e04e      	b.n	8009a92 <USART_SetConfig+0x17e>
 80099f4:	231f      	movs	r3, #31
 80099f6:	18fb      	adds	r3, r7, r3
 80099f8:	2208      	movs	r2, #8
 80099fa:	701a      	strb	r2, [r3, #0]
 80099fc:	e049      	b.n	8009a92 <USART_SetConfig+0x17e>
 80099fe:	231f      	movs	r3, #31
 8009a00:	18fb      	adds	r3, r7, r3
 8009a02:	2210      	movs	r2, #16
 8009a04:	701a      	strb	r2, [r3, #0]
 8009a06:	e044      	b.n	8009a92 <USART_SetConfig+0x17e>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a83      	ldr	r2, [pc, #524]	; (8009c1c <USART_SetConfig+0x308>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d127      	bne.n	8009a62 <USART_SetConfig+0x14e>
 8009a12:	4b81      	ldr	r3, [pc, #516]	; (8009c18 <USART_SetConfig+0x304>)
 8009a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a16:	220c      	movs	r2, #12
 8009a18:	4013      	ands	r3, r2
 8009a1a:	2b0c      	cmp	r3, #12
 8009a1c:	d017      	beq.n	8009a4e <USART_SetConfig+0x13a>
 8009a1e:	d81b      	bhi.n	8009a58 <USART_SetConfig+0x144>
 8009a20:	2b08      	cmp	r3, #8
 8009a22:	d00a      	beq.n	8009a3a <USART_SetConfig+0x126>
 8009a24:	d818      	bhi.n	8009a58 <USART_SetConfig+0x144>
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <USART_SetConfig+0x11c>
 8009a2a:	2b04      	cmp	r3, #4
 8009a2c:	d00a      	beq.n	8009a44 <USART_SetConfig+0x130>
 8009a2e:	e013      	b.n	8009a58 <USART_SetConfig+0x144>
 8009a30:	231f      	movs	r3, #31
 8009a32:	18fb      	adds	r3, r7, r3
 8009a34:	2200      	movs	r2, #0
 8009a36:	701a      	strb	r2, [r3, #0]
 8009a38:	e02b      	b.n	8009a92 <USART_SetConfig+0x17e>
 8009a3a:	231f      	movs	r3, #31
 8009a3c:	18fb      	adds	r3, r7, r3
 8009a3e:	2202      	movs	r2, #2
 8009a40:	701a      	strb	r2, [r3, #0]
 8009a42:	e026      	b.n	8009a92 <USART_SetConfig+0x17e>
 8009a44:	231f      	movs	r3, #31
 8009a46:	18fb      	adds	r3, r7, r3
 8009a48:	2204      	movs	r2, #4
 8009a4a:	701a      	strb	r2, [r3, #0]
 8009a4c:	e021      	b.n	8009a92 <USART_SetConfig+0x17e>
 8009a4e:	231f      	movs	r3, #31
 8009a50:	18fb      	adds	r3, r7, r3
 8009a52:	2208      	movs	r2, #8
 8009a54:	701a      	strb	r2, [r3, #0]
 8009a56:	e01c      	b.n	8009a92 <USART_SetConfig+0x17e>
 8009a58:	231f      	movs	r3, #31
 8009a5a:	18fb      	adds	r3, r7, r3
 8009a5c:	2210      	movs	r2, #16
 8009a5e:	701a      	strb	r2, [r3, #0]
 8009a60:	e017      	b.n	8009a92 <USART_SetConfig+0x17e>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a6e      	ldr	r2, [pc, #440]	; (8009c20 <USART_SetConfig+0x30c>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d104      	bne.n	8009a76 <USART_SetConfig+0x162>
 8009a6c:	231f      	movs	r3, #31
 8009a6e:	18fb      	adds	r3, r7, r3
 8009a70:	2200      	movs	r2, #0
 8009a72:	701a      	strb	r2, [r3, #0]
 8009a74:	e00d      	b.n	8009a92 <USART_SetConfig+0x17e>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a6a      	ldr	r2, [pc, #424]	; (8009c24 <USART_SetConfig+0x310>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d104      	bne.n	8009a8a <USART_SetConfig+0x176>
 8009a80:	231f      	movs	r3, #31
 8009a82:	18fb      	adds	r3, r7, r3
 8009a84:	2200      	movs	r2, #0
 8009a86:	701a      	strb	r2, [r3, #0]
 8009a88:	e003      	b.n	8009a92 <USART_SetConfig+0x17e>
 8009a8a:	231f      	movs	r3, #31
 8009a8c:	18fb      	adds	r3, r7, r3
 8009a8e:	2210      	movs	r2, #16
 8009a90:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8009a92:	231f      	movs	r3, #31
 8009a94:	18fb      	adds	r3, r7, r3
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	2b08      	cmp	r3, #8
 8009a9a:	d100      	bne.n	8009a9e <USART_SetConfig+0x18a>
 8009a9c:	e139      	b.n	8009d12 <USART_SetConfig+0x3fe>
 8009a9e:	dd00      	ble.n	8009aa2 <USART_SetConfig+0x18e>
 8009aa0:	e195      	b.n	8009dce <USART_SetConfig+0x4ba>
 8009aa2:	2b04      	cmp	r3, #4
 8009aa4:	d100      	bne.n	8009aa8 <USART_SetConfig+0x194>
 8009aa6:	e0d3      	b.n	8009c50 <USART_SetConfig+0x33c>
 8009aa8:	dd00      	ble.n	8009aac <USART_SetConfig+0x198>
 8009aaa:	e190      	b.n	8009dce <USART_SetConfig+0x4ba>
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d003      	beq.n	8009ab8 <USART_SetConfig+0x1a4>
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d100      	bne.n	8009ab6 <USART_SetConfig+0x1a2>
 8009ab4:	e061      	b.n	8009b7a <USART_SetConfig+0x266>
 8009ab6:	e18a      	b.n	8009dce <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ab8:	f7fc f904 	bl	8005cc4 <HAL_RCC_GetPCLK1Freq>
 8009abc:	0003      	movs	r3, r0
 8009abe:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d044      	beq.n	8009b52 <USART_SetConfig+0x23e>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d03e      	beq.n	8009b4e <USART_SetConfig+0x23a>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d038      	beq.n	8009b4a <USART_SetConfig+0x236>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009adc:	2b03      	cmp	r3, #3
 8009ade:	d032      	beq.n	8009b46 <USART_SetConfig+0x232>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	d02c      	beq.n	8009b42 <USART_SetConfig+0x22e>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aec:	2b05      	cmp	r3, #5
 8009aee:	d026      	beq.n	8009b3e <USART_SetConfig+0x22a>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af4:	2b06      	cmp	r3, #6
 8009af6:	d020      	beq.n	8009b3a <USART_SetConfig+0x226>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afc:	2b07      	cmp	r3, #7
 8009afe:	d01a      	beq.n	8009b36 <USART_SetConfig+0x222>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b04:	2b08      	cmp	r3, #8
 8009b06:	d014      	beq.n	8009b32 <USART_SetConfig+0x21e>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0c:	2b09      	cmp	r3, #9
 8009b0e:	d00e      	beq.n	8009b2e <USART_SetConfig+0x21a>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b14:	2b0a      	cmp	r3, #10
 8009b16:	d008      	beq.n	8009b2a <USART_SetConfig+0x216>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	2b0b      	cmp	r3, #11
 8009b1e:	d102      	bne.n	8009b26 <USART_SetConfig+0x212>
 8009b20:	2380      	movs	r3, #128	; 0x80
 8009b22:	005b      	lsls	r3, r3, #1
 8009b24:	e016      	b.n	8009b54 <USART_SetConfig+0x240>
 8009b26:	2301      	movs	r3, #1
 8009b28:	e014      	b.n	8009b54 <USART_SetConfig+0x240>
 8009b2a:	2380      	movs	r3, #128	; 0x80
 8009b2c:	e012      	b.n	8009b54 <USART_SetConfig+0x240>
 8009b2e:	2340      	movs	r3, #64	; 0x40
 8009b30:	e010      	b.n	8009b54 <USART_SetConfig+0x240>
 8009b32:	2320      	movs	r3, #32
 8009b34:	e00e      	b.n	8009b54 <USART_SetConfig+0x240>
 8009b36:	2310      	movs	r3, #16
 8009b38:	e00c      	b.n	8009b54 <USART_SetConfig+0x240>
 8009b3a:	230c      	movs	r3, #12
 8009b3c:	e00a      	b.n	8009b54 <USART_SetConfig+0x240>
 8009b3e:	230a      	movs	r3, #10
 8009b40:	e008      	b.n	8009b54 <USART_SetConfig+0x240>
 8009b42:	2308      	movs	r3, #8
 8009b44:	e006      	b.n	8009b54 <USART_SetConfig+0x240>
 8009b46:	2306      	movs	r3, #6
 8009b48:	e004      	b.n	8009b54 <USART_SetConfig+0x240>
 8009b4a:	2304      	movs	r3, #4
 8009b4c:	e002      	b.n	8009b54 <USART_SetConfig+0x240>
 8009b4e:	2302      	movs	r3, #2
 8009b50:	e000      	b.n	8009b54 <USART_SetConfig+0x240>
 8009b52:	2301      	movs	r3, #1
 8009b54:	0019      	movs	r1, r3
 8009b56:	6938      	ldr	r0, [r7, #16]
 8009b58:	f7f6 fad4 	bl	8000104 <__udivsi3>
 8009b5c:	0003      	movs	r3, r0
 8009b5e:	005a      	lsls	r2, r3, #1
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	085b      	lsrs	r3, r3, #1
 8009b66:	18d2      	adds	r2, r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	0019      	movs	r1, r3
 8009b6e:	0010      	movs	r0, r2
 8009b70:	f7f6 fac8 	bl	8000104 <__udivsi3>
 8009b74:	0003      	movs	r3, r0
 8009b76:	61bb      	str	r3, [r7, #24]
      break;
 8009b78:	e12e      	b.n	8009dd8 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d052      	beq.n	8009c28 <USART_SetConfig+0x314>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d03e      	beq.n	8009c08 <USART_SetConfig+0x2f4>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d038      	beq.n	8009c04 <USART_SetConfig+0x2f0>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b96:	2b03      	cmp	r3, #3
 8009b98:	d032      	beq.n	8009c00 <USART_SetConfig+0x2ec>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	d02c      	beq.n	8009bfc <USART_SetConfig+0x2e8>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba6:	2b05      	cmp	r3, #5
 8009ba8:	d026      	beq.n	8009bf8 <USART_SetConfig+0x2e4>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bae:	2b06      	cmp	r3, #6
 8009bb0:	d020      	beq.n	8009bf4 <USART_SetConfig+0x2e0>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb6:	2b07      	cmp	r3, #7
 8009bb8:	d01a      	beq.n	8009bf0 <USART_SetConfig+0x2dc>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	2b08      	cmp	r3, #8
 8009bc0:	d014      	beq.n	8009bec <USART_SetConfig+0x2d8>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc6:	2b09      	cmp	r3, #9
 8009bc8:	d00e      	beq.n	8009be8 <USART_SetConfig+0x2d4>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bce:	2b0a      	cmp	r3, #10
 8009bd0:	d008      	beq.n	8009be4 <USART_SetConfig+0x2d0>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	2b0b      	cmp	r3, #11
 8009bd8:	d102      	bne.n	8009be0 <USART_SetConfig+0x2cc>
 8009bda:	2380      	movs	r3, #128	; 0x80
 8009bdc:	005b      	lsls	r3, r3, #1
 8009bde:	e024      	b.n	8009c2a <USART_SetConfig+0x316>
 8009be0:	2301      	movs	r3, #1
 8009be2:	e022      	b.n	8009c2a <USART_SetConfig+0x316>
 8009be4:	2380      	movs	r3, #128	; 0x80
 8009be6:	e020      	b.n	8009c2a <USART_SetConfig+0x316>
 8009be8:	2340      	movs	r3, #64	; 0x40
 8009bea:	e01e      	b.n	8009c2a <USART_SetConfig+0x316>
 8009bec:	2320      	movs	r3, #32
 8009bee:	e01c      	b.n	8009c2a <USART_SetConfig+0x316>
 8009bf0:	2310      	movs	r3, #16
 8009bf2:	e01a      	b.n	8009c2a <USART_SetConfig+0x316>
 8009bf4:	230c      	movs	r3, #12
 8009bf6:	e018      	b.n	8009c2a <USART_SetConfig+0x316>
 8009bf8:	230a      	movs	r3, #10
 8009bfa:	e016      	b.n	8009c2a <USART_SetConfig+0x316>
 8009bfc:	2308      	movs	r3, #8
 8009bfe:	e014      	b.n	8009c2a <USART_SetConfig+0x316>
 8009c00:	2306      	movs	r3, #6
 8009c02:	e012      	b.n	8009c2a <USART_SetConfig+0x316>
 8009c04:	2304      	movs	r3, #4
 8009c06:	e010      	b.n	8009c2a <USART_SetConfig+0x316>
 8009c08:	2302      	movs	r3, #2
 8009c0a:	e00e      	b.n	8009c2a <USART_SetConfig+0x316>
 8009c0c:	cfff69f3 	.word	0xcfff69f3
 8009c10:	ffffc0f6 	.word	0xffffc0f6
 8009c14:	40013800 	.word	0x40013800
 8009c18:	40021000 	.word	0x40021000
 8009c1c:	40004400 	.word	0x40004400
 8009c20:	40004800 	.word	0x40004800
 8009c24:	40004c00 	.word	0x40004c00
 8009c28:	2301      	movs	r3, #1
 8009c2a:	0019      	movs	r1, r3
 8009c2c:	4886      	ldr	r0, [pc, #536]	; (8009e48 <USART_SetConfig+0x534>)
 8009c2e:	f7f6 fa69 	bl	8000104 <__udivsi3>
 8009c32:	0003      	movs	r3, r0
 8009c34:	005a      	lsls	r2, r3, #1
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	085b      	lsrs	r3, r3, #1
 8009c3c:	18d2      	adds	r2, r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	0019      	movs	r1, r3
 8009c44:	0010      	movs	r0, r2
 8009c46:	f7f6 fa5d 	bl	8000104 <__udivsi3>
 8009c4a:	0003      	movs	r3, r0
 8009c4c:	61bb      	str	r3, [r7, #24]
      break;
 8009c4e:	e0c3      	b.n	8009dd8 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8009c50:	f7fb ffac 	bl	8005bac <HAL_RCC_GetSysClockFreq>
 8009c54:	0003      	movs	r3, r0
 8009c56:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d044      	beq.n	8009cea <USART_SetConfig+0x3d6>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d03e      	beq.n	8009ce6 <USART_SetConfig+0x3d2>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d038      	beq.n	8009ce2 <USART_SetConfig+0x3ce>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	d032      	beq.n	8009cde <USART_SetConfig+0x3ca>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7c:	2b04      	cmp	r3, #4
 8009c7e:	d02c      	beq.n	8009cda <USART_SetConfig+0x3c6>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c84:	2b05      	cmp	r3, #5
 8009c86:	d026      	beq.n	8009cd6 <USART_SetConfig+0x3c2>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8c:	2b06      	cmp	r3, #6
 8009c8e:	d020      	beq.n	8009cd2 <USART_SetConfig+0x3be>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	2b07      	cmp	r3, #7
 8009c96:	d01a      	beq.n	8009cce <USART_SetConfig+0x3ba>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9c:	2b08      	cmp	r3, #8
 8009c9e:	d014      	beq.n	8009cca <USART_SetConfig+0x3b6>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	2b09      	cmp	r3, #9
 8009ca6:	d00e      	beq.n	8009cc6 <USART_SetConfig+0x3b2>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	2b0a      	cmp	r3, #10
 8009cae:	d008      	beq.n	8009cc2 <USART_SetConfig+0x3ae>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	2b0b      	cmp	r3, #11
 8009cb6:	d102      	bne.n	8009cbe <USART_SetConfig+0x3aa>
 8009cb8:	2380      	movs	r3, #128	; 0x80
 8009cba:	005b      	lsls	r3, r3, #1
 8009cbc:	e016      	b.n	8009cec <USART_SetConfig+0x3d8>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e014      	b.n	8009cec <USART_SetConfig+0x3d8>
 8009cc2:	2380      	movs	r3, #128	; 0x80
 8009cc4:	e012      	b.n	8009cec <USART_SetConfig+0x3d8>
 8009cc6:	2340      	movs	r3, #64	; 0x40
 8009cc8:	e010      	b.n	8009cec <USART_SetConfig+0x3d8>
 8009cca:	2320      	movs	r3, #32
 8009ccc:	e00e      	b.n	8009cec <USART_SetConfig+0x3d8>
 8009cce:	2310      	movs	r3, #16
 8009cd0:	e00c      	b.n	8009cec <USART_SetConfig+0x3d8>
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	e00a      	b.n	8009cec <USART_SetConfig+0x3d8>
 8009cd6:	230a      	movs	r3, #10
 8009cd8:	e008      	b.n	8009cec <USART_SetConfig+0x3d8>
 8009cda:	2308      	movs	r3, #8
 8009cdc:	e006      	b.n	8009cec <USART_SetConfig+0x3d8>
 8009cde:	2306      	movs	r3, #6
 8009ce0:	e004      	b.n	8009cec <USART_SetConfig+0x3d8>
 8009ce2:	2304      	movs	r3, #4
 8009ce4:	e002      	b.n	8009cec <USART_SetConfig+0x3d8>
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	e000      	b.n	8009cec <USART_SetConfig+0x3d8>
 8009cea:	2301      	movs	r3, #1
 8009cec:	0019      	movs	r1, r3
 8009cee:	6938      	ldr	r0, [r7, #16]
 8009cf0:	f7f6 fa08 	bl	8000104 <__udivsi3>
 8009cf4:	0003      	movs	r3, r0
 8009cf6:	005a      	lsls	r2, r3, #1
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	085b      	lsrs	r3, r3, #1
 8009cfe:	18d2      	adds	r2, r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	0019      	movs	r1, r3
 8009d06:	0010      	movs	r0, r2
 8009d08:	f7f6 f9fc 	bl	8000104 <__udivsi3>
 8009d0c:	0003      	movs	r3, r0
 8009d0e:	61bb      	str	r3, [r7, #24]
      break;
 8009d10:	e062      	b.n	8009dd8 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d044      	beq.n	8009da4 <USART_SetConfig+0x490>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d03e      	beq.n	8009da0 <USART_SetConfig+0x48c>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d038      	beq.n	8009d9c <USART_SetConfig+0x488>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2e:	2b03      	cmp	r3, #3
 8009d30:	d032      	beq.n	8009d98 <USART_SetConfig+0x484>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	2b04      	cmp	r3, #4
 8009d38:	d02c      	beq.n	8009d94 <USART_SetConfig+0x480>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	2b05      	cmp	r3, #5
 8009d40:	d026      	beq.n	8009d90 <USART_SetConfig+0x47c>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	2b06      	cmp	r3, #6
 8009d48:	d020      	beq.n	8009d8c <USART_SetConfig+0x478>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	2b07      	cmp	r3, #7
 8009d50:	d01a      	beq.n	8009d88 <USART_SetConfig+0x474>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d56:	2b08      	cmp	r3, #8
 8009d58:	d014      	beq.n	8009d84 <USART_SetConfig+0x470>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5e:	2b09      	cmp	r3, #9
 8009d60:	d00e      	beq.n	8009d80 <USART_SetConfig+0x46c>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d66:	2b0a      	cmp	r3, #10
 8009d68:	d008      	beq.n	8009d7c <USART_SetConfig+0x468>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6e:	2b0b      	cmp	r3, #11
 8009d70:	d102      	bne.n	8009d78 <USART_SetConfig+0x464>
 8009d72:	2380      	movs	r3, #128	; 0x80
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	e016      	b.n	8009da6 <USART_SetConfig+0x492>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	e014      	b.n	8009da6 <USART_SetConfig+0x492>
 8009d7c:	2380      	movs	r3, #128	; 0x80
 8009d7e:	e012      	b.n	8009da6 <USART_SetConfig+0x492>
 8009d80:	2340      	movs	r3, #64	; 0x40
 8009d82:	e010      	b.n	8009da6 <USART_SetConfig+0x492>
 8009d84:	2320      	movs	r3, #32
 8009d86:	e00e      	b.n	8009da6 <USART_SetConfig+0x492>
 8009d88:	2310      	movs	r3, #16
 8009d8a:	e00c      	b.n	8009da6 <USART_SetConfig+0x492>
 8009d8c:	230c      	movs	r3, #12
 8009d8e:	e00a      	b.n	8009da6 <USART_SetConfig+0x492>
 8009d90:	230a      	movs	r3, #10
 8009d92:	e008      	b.n	8009da6 <USART_SetConfig+0x492>
 8009d94:	2308      	movs	r3, #8
 8009d96:	e006      	b.n	8009da6 <USART_SetConfig+0x492>
 8009d98:	2306      	movs	r3, #6
 8009d9a:	e004      	b.n	8009da6 <USART_SetConfig+0x492>
 8009d9c:	2304      	movs	r3, #4
 8009d9e:	e002      	b.n	8009da6 <USART_SetConfig+0x492>
 8009da0:	2302      	movs	r3, #2
 8009da2:	e000      	b.n	8009da6 <USART_SetConfig+0x492>
 8009da4:	2301      	movs	r3, #1
 8009da6:	0019      	movs	r1, r3
 8009da8:	2380      	movs	r3, #128	; 0x80
 8009daa:	0218      	lsls	r0, r3, #8
 8009dac:	f7f6 f9aa 	bl	8000104 <__udivsi3>
 8009db0:	0003      	movs	r3, r0
 8009db2:	005a      	lsls	r2, r3, #1
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	085b      	lsrs	r3, r3, #1
 8009dba:	18d2      	adds	r2, r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	0019      	movs	r1, r3
 8009dc2:	0010      	movs	r0, r2
 8009dc4:	f7f6 f99e 	bl	8000104 <__udivsi3>
 8009dc8:	0003      	movs	r3, r0
 8009dca:	61bb      	str	r3, [r7, #24]
      break;
 8009dcc:	e004      	b.n	8009dd8 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 8009dce:	231e      	movs	r3, #30
 8009dd0:	18fb      	adds	r3, r7, r3
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	701a      	strb	r2, [r3, #0]
      break;
 8009dd6:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	2b0f      	cmp	r3, #15
 8009ddc:	d91c      	bls.n	8009e18 <USART_SetConfig+0x504>
 8009dde:	69ba      	ldr	r2, [r7, #24]
 8009de0:	2380      	movs	r3, #128	; 0x80
 8009de2:	025b      	lsls	r3, r3, #9
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d217      	bcs.n	8009e18 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	200e      	movs	r0, #14
 8009dee:	183b      	adds	r3, r7, r0
 8009df0:	210f      	movs	r1, #15
 8009df2:	438a      	bics	r2, r1
 8009df4:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	085b      	lsrs	r3, r3, #1
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	2207      	movs	r2, #7
 8009dfe:	4013      	ands	r3, r2
 8009e00:	b299      	uxth	r1, r3
 8009e02:	183b      	adds	r3, r7, r0
 8009e04:	183a      	adds	r2, r7, r0
 8009e06:	8812      	ldrh	r2, [r2, #0]
 8009e08:	430a      	orrs	r2, r1
 8009e0a:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	183a      	adds	r2, r7, r0
 8009e12:	8812      	ldrh	r2, [r2, #0]
 8009e14:	60da      	str	r2, [r3, #12]
 8009e16:	e003      	b.n	8009e20 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 8009e18:	231e      	movs	r3, #30
 8009e1a:	18fb      	adds	r3, r7, r3
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8009e38:	231e      	movs	r3, #30
 8009e3a:	18fb      	adds	r3, r7, r3
 8009e3c:	781b      	ldrb	r3, [r3, #0]
}
 8009e3e:	0018      	movs	r0, r3
 8009e40:	46bd      	mov	sp, r7
 8009e42:	b008      	add	sp, #32
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	46c0      	nop			; (mov r8, r8)
 8009e48:	00f42400 	.word	0x00f42400

08009e4c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af02      	add	r7, sp, #8
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e5a:	f7f9 f97f 	bl	800315c <HAL_GetTick>
 8009e5e:	0003      	movs	r3, r0
 8009e60:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2208      	movs	r2, #8
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	2b08      	cmp	r3, #8
 8009e6e:	d10e      	bne.n	8009e8e <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	2380      	movs	r3, #128	; 0x80
 8009e74:	0399      	lsls	r1, r3, #14
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	23fa      	movs	r3, #250	; 0xfa
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	0013      	movs	r3, r2
 8009e80:	2200      	movs	r2, #0
 8009e82:	f7ff fd11 	bl	80098a8 <USART_WaitOnFlagUntilTimeout>
 8009e86:	1e03      	subs	r3, r0, #0
 8009e88:	d001      	beq.n	8009e8e <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e8a:	2303      	movs	r3, #3
 8009e8c:	e01e      	b.n	8009ecc <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2204      	movs	r2, #4
 8009e96:	4013      	ands	r3, r2
 8009e98:	2b04      	cmp	r3, #4
 8009e9a:	d10e      	bne.n	8009eba <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	2380      	movs	r3, #128	; 0x80
 8009ea0:	03d9      	lsls	r1, r3, #15
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	23fa      	movs	r3, #250	; 0xfa
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	0013      	movs	r3, r2
 8009eac:	2200      	movs	r2, #0
 8009eae:	f7ff fcfb 	bl	80098a8 <USART_WaitOnFlagUntilTimeout>
 8009eb2:	1e03      	subs	r3, r0, #0
 8009eb4:	d001      	beq.n	8009eba <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eb6:	2303      	movs	r3, #3
 8009eb8:	e008      	b.n	8009ecc <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2259      	movs	r2, #89	; 0x59
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2258      	movs	r2, #88	; 0x58
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	0018      	movs	r0, r3
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	b004      	add	sp, #16
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2140      	movs	r1, #64	; 0x40
 8009ee8:	438a      	bics	r2, r1
 8009eea:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	689a      	ldr	r2, [r3, #8]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	438a      	bics	r2, r1
 8009efa:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2259      	movs	r2, #89	; 0x59
 8009f06:	5c9b      	ldrb	r3, [r3, r2]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b12      	cmp	r3, #18
 8009f0c:	d114      	bne.n	8009f38 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2208      	movs	r2, #8
 8009f14:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	699a      	ldr	r2, [r3, #24]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2108      	movs	r1, #8
 8009f22:	430a      	orrs	r2, r1
 8009f24:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2259      	movs	r2, #89	; 0x59
 8009f2a:	2101      	movs	r1, #1
 8009f2c:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	0018      	movs	r0, r3
 8009f32:	f7f7 f8e9 	bl	8001108 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009f36:	e00c      	b.n	8009f52 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d107      	bne.n	8009f52 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2259      	movs	r2, #89	; 0x59
 8009f46:	2101      	movs	r1, #1
 8009f48:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	0018      	movs	r0, r3
 8009f4e:	f7ff fbff 	bl	8009750 <HAL_USART_TxRxCpltCallback>
}
 8009f52:	46c0      	nop			; (mov r8, r8)
 8009f54:	46bd      	mov	sp, r7
 8009f56:	b002      	add	sp, #8
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b082      	sub	sp, #8
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f62:	46c0      	nop			; (mov r8, r8)
 8009f64:	46bd      	mov	sp, r7
 8009f66:	b002      	add	sp, #8
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b082      	sub	sp, #8
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f72:	46c0      	nop			; (mov r8, r8)
 8009f74:	46bd      	mov	sp, r7
 8009f76:	b002      	add	sp, #8
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <LL_GPIO_SetPinMode>:
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	60f8      	str	r0, [r7, #12]
 8009f82:	60b9      	str	r1, [r7, #8]
 8009f84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6819      	ldr	r1, [r3, #0]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	435b      	muls	r3, r3
 8009f8e:	001a      	movs	r2, r3
 8009f90:	0013      	movs	r3, r2
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	189b      	adds	r3, r3, r2
 8009f96:	43db      	mvns	r3, r3
 8009f98:	400b      	ands	r3, r1
 8009f9a:	001a      	movs	r2, r3
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	435b      	muls	r3, r3
 8009fa0:	6879      	ldr	r1, [r7, #4]
 8009fa2:	434b      	muls	r3, r1
 8009fa4:	431a      	orrs	r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	601a      	str	r2, [r3, #0]
}
 8009faa:	46c0      	nop			; (mov r8, r8)
 8009fac:	46bd      	mov	sp, r7
 8009fae:	b004      	add	sp, #16
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <LL_GPIO_SetPinOutputType>:
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	60b9      	str	r1, [r7, #8]
 8009fbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	43d2      	mvns	r2, r2
 8009fc6:	401a      	ands	r2, r3
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	6879      	ldr	r1, [r7, #4]
 8009fcc:	434b      	muls	r3, r1
 8009fce:	431a      	orrs	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	605a      	str	r2, [r3, #4]
}
 8009fd4:	46c0      	nop			; (mov r8, r8)
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	b004      	add	sp, #16
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <LL_GPIO_SetPinSpeed>:
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6899      	ldr	r1, [r3, #8]
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	435b      	muls	r3, r3
 8009ff0:	001a      	movs	r2, r3
 8009ff2:	0013      	movs	r3, r2
 8009ff4:	005b      	lsls	r3, r3, #1
 8009ff6:	189b      	adds	r3, r3, r2
 8009ff8:	43db      	mvns	r3, r3
 8009ffa:	400b      	ands	r3, r1
 8009ffc:	001a      	movs	r2, r3
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	435b      	muls	r3, r3
 800a002:	6879      	ldr	r1, [r7, #4]
 800a004:	434b      	muls	r3, r1
 800a006:	431a      	orrs	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	609a      	str	r2, [r3, #8]
}
 800a00c:	46c0      	nop			; (mov r8, r8)
 800a00e:	46bd      	mov	sp, r7
 800a010:	b004      	add	sp, #16
 800a012:	bd80      	pop	{r7, pc}

0800a014 <LL_GPIO_SetPinPull>:
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	68d9      	ldr	r1, [r3, #12]
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	435b      	muls	r3, r3
 800a028:	001a      	movs	r2, r3
 800a02a:	0013      	movs	r3, r2
 800a02c:	005b      	lsls	r3, r3, #1
 800a02e:	189b      	adds	r3, r3, r2
 800a030:	43db      	mvns	r3, r3
 800a032:	400b      	ands	r3, r1
 800a034:	001a      	movs	r2, r3
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	435b      	muls	r3, r3
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	434b      	muls	r3, r1
 800a03e:	431a      	orrs	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	60da      	str	r2, [r3, #12]
}
 800a044:	46c0      	nop			; (mov r8, r8)
 800a046:	46bd      	mov	sp, r7
 800a048:	b004      	add	sp, #16
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <LL_GPIO_SetAFPin_0_7>:
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6a19      	ldr	r1, [r3, #32]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	435b      	muls	r3, r3
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	4353      	muls	r3, r2
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	435a      	muls	r2, r3
 800a068:	0013      	movs	r3, r2
 800a06a:	011b      	lsls	r3, r3, #4
 800a06c:	1a9b      	subs	r3, r3, r2
 800a06e:	43db      	mvns	r3, r3
 800a070:	400b      	ands	r3, r1
 800a072:	001a      	movs	r2, r3
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	435b      	muls	r3, r3
 800a078:	68b9      	ldr	r1, [r7, #8]
 800a07a:	434b      	muls	r3, r1
 800a07c:	68b9      	ldr	r1, [r7, #8]
 800a07e:	434b      	muls	r3, r1
 800a080:	6879      	ldr	r1, [r7, #4]
 800a082:	434b      	muls	r3, r1
 800a084:	431a      	orrs	r2, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	621a      	str	r2, [r3, #32]
}
 800a08a:	46c0      	nop			; (mov r8, r8)
 800a08c:	46bd      	mov	sp, r7
 800a08e:	b004      	add	sp, #16
 800a090:	bd80      	pop	{r7, pc}

0800a092 <LL_GPIO_SetAFPin_8_15>:
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	60f8      	str	r0, [r7, #12]
 800a09a:	60b9      	str	r1, [r7, #8]
 800a09c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	0a1b      	lsrs	r3, r3, #8
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	0a12      	lsrs	r2, r2, #8
 800a0aa:	4353      	muls	r3, r2
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	0a12      	lsrs	r2, r2, #8
 800a0b0:	4353      	muls	r3, r2
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	0a12      	lsrs	r2, r2, #8
 800a0b6:	435a      	muls	r2, r3
 800a0b8:	0013      	movs	r3, r2
 800a0ba:	011b      	lsls	r3, r3, #4
 800a0bc:	1a9b      	subs	r3, r3, r2
 800a0be:	43db      	mvns	r3, r3
 800a0c0:	400b      	ands	r3, r1
 800a0c2:	001a      	movs	r2, r3
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	0a1b      	lsrs	r3, r3, #8
 800a0c8:	68b9      	ldr	r1, [r7, #8]
 800a0ca:	0a09      	lsrs	r1, r1, #8
 800a0cc:	434b      	muls	r3, r1
 800a0ce:	68b9      	ldr	r1, [r7, #8]
 800a0d0:	0a09      	lsrs	r1, r1, #8
 800a0d2:	434b      	muls	r3, r1
 800a0d4:	68b9      	ldr	r1, [r7, #8]
 800a0d6:	0a09      	lsrs	r1, r1, #8
 800a0d8:	434b      	muls	r3, r1
 800a0da:	6879      	ldr	r1, [r7, #4]
 800a0dc:	434b      	muls	r3, r1
 800a0de:	431a      	orrs	r2, r3
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a0e4:	46c0      	nop			; (mov r8, r8)
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	b004      	add	sp, #16
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a0fa:	e047      	b.n	800a18c <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2101      	movs	r1, #1
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	4091      	lsls	r1, r2
 800a106:	000a      	movs	r2, r1
 800a108:	4013      	ands	r3, r2
 800a10a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d039      	beq.n	800a186 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d003      	beq.n	800a122 <LL_GPIO_Init+0x36>
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d10d      	bne.n	800a13e <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	689a      	ldr	r2, [r3, #8]
 800a126:	68b9      	ldr	r1, [r7, #8]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	0018      	movs	r0, r3
 800a12c:	f7ff ff56 	bl	8009fdc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	68da      	ldr	r2, [r3, #12]
 800a134:	68b9      	ldr	r1, [r7, #8]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	0018      	movs	r0, r3
 800a13a:	f7ff ff3a 	bl	8009fb2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	691a      	ldr	r2, [r3, #16]
 800a142:	68b9      	ldr	r1, [r7, #8]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	0018      	movs	r0, r3
 800a148:	f7ff ff64 	bl	800a014 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	2b02      	cmp	r3, #2
 800a152:	d111      	bne.n	800a178 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2bff      	cmp	r3, #255	; 0xff
 800a158:	d807      	bhi.n	800a16a <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	695a      	ldr	r2, [r3, #20]
 800a15e:	68b9      	ldr	r1, [r7, #8]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	0018      	movs	r0, r3
 800a164:	f7ff ff72 	bl	800a04c <LL_GPIO_SetAFPin_0_7>
 800a168:	e006      	b.n	800a178 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	695a      	ldr	r2, [r3, #20]
 800a16e:	68b9      	ldr	r1, [r7, #8]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	0018      	movs	r0, r3
 800a174:	f7ff ff8d 	bl	800a092 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	68b9      	ldr	r1, [r7, #8]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	0018      	movs	r0, r3
 800a182:	f7ff fefa 	bl	8009f7a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	3301      	adds	r3, #1
 800a18a:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	40da      	lsrs	r2, r3
 800a194:	1e13      	subs	r3, r2, #0
 800a196:	d1b1      	bne.n	800a0fc <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800a198:	2300      	movs	r3, #0
}
 800a19a:	0018      	movs	r0, r3
 800a19c:	46bd      	mov	sp, r7
 800a19e:	b004      	add	sp, #16
 800a1a0:	bd80      	pop	{r7, pc}
	...

0800a1a4 <LL_RCC_HSI_IsReady>:
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a1a8:	4b07      	ldr	r3, [pc, #28]	; (800a1c8 <LL_RCC_HSI_IsReady+0x24>)
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	2380      	movs	r3, #128	; 0x80
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	401a      	ands	r2, r3
 800a1b2:	2380      	movs	r3, #128	; 0x80
 800a1b4:	00db      	lsls	r3, r3, #3
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d101      	bne.n	800a1be <LL_RCC_HSI_IsReady+0x1a>
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e000      	b.n	800a1c0 <LL_RCC_HSI_IsReady+0x1c>
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	0018      	movs	r0, r3
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	46c0      	nop			; (mov r8, r8)
 800a1c8:	40021000 	.word	0x40021000

0800a1cc <LL_RCC_LSE_IsReady>:
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a1d0:	4b05      	ldr	r3, [pc, #20]	; (800a1e8 <LL_RCC_LSE_IsReady+0x1c>)
 800a1d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1d4:	2202      	movs	r2, #2
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d101      	bne.n	800a1e0 <LL_RCC_LSE_IsReady+0x14>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e000      	b.n	800a1e2 <LL_RCC_LSE_IsReady+0x16>
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	0018      	movs	r0, r3
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	40021000 	.word	0x40021000

0800a1ec <LL_RCC_GetSysClkSource>:
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a1f0:	4b03      	ldr	r3, [pc, #12]	; (800a200 <LL_RCC_GetSysClkSource+0x14>)
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	2238      	movs	r2, #56	; 0x38
 800a1f6:	4013      	ands	r3, r2
}
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	46c0      	nop			; (mov r8, r8)
 800a200:	40021000 	.word	0x40021000

0800a204 <LL_RCC_GetAHBPrescaler>:
{
 800a204:	b580      	push	{r7, lr}
 800a206:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a208:	4b03      	ldr	r3, [pc, #12]	; (800a218 <LL_RCC_GetAHBPrescaler+0x14>)
 800a20a:	689a      	ldr	r2, [r3, #8]
 800a20c:	23f0      	movs	r3, #240	; 0xf0
 800a20e:	011b      	lsls	r3, r3, #4
 800a210:	4013      	ands	r3, r2
}
 800a212:	0018      	movs	r0, r3
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	40021000 	.word	0x40021000

0800a21c <LL_RCC_GetAPB1Prescaler>:
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a220:	4b03      	ldr	r3, [pc, #12]	; (800a230 <LL_RCC_GetAPB1Prescaler+0x14>)
 800a222:	689a      	ldr	r2, [r3, #8]
 800a224:	23e0      	movs	r3, #224	; 0xe0
 800a226:	01db      	lsls	r3, r3, #7
 800a228:	4013      	ands	r3, r2
}
 800a22a:	0018      	movs	r0, r3
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	40021000 	.word	0x40021000

0800a234 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a23c:	4b05      	ldr	r3, [pc, #20]	; (800a254 <LL_RCC_GetUSARTClockSource+0x20>)
 800a23e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	401a      	ands	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	041b      	lsls	r3, r3, #16
 800a248:	4313      	orrs	r3, r2
}
 800a24a:	0018      	movs	r0, r3
 800a24c:	46bd      	mov	sp, r7
 800a24e:	b002      	add	sp, #8
 800a250:	bd80      	pop	{r7, pc}
 800a252:	46c0      	nop			; (mov r8, r8)
 800a254:	40021000 	.word	0x40021000

0800a258 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a25c:	4b03      	ldr	r3, [pc, #12]	; (800a26c <LL_RCC_PLL_GetN+0x14>)
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	0a1b      	lsrs	r3, r3, #8
 800a262:	227f      	movs	r2, #127	; 0x7f
 800a264:	4013      	ands	r3, r2
}
 800a266:	0018      	movs	r0, r3
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	40021000 	.word	0x40021000

0800a270 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a274:	4b03      	ldr	r3, [pc, #12]	; (800a284 <LL_RCC_PLL_GetR+0x14>)
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	0f5b      	lsrs	r3, r3, #29
 800a27a:	075b      	lsls	r3, r3, #29
}
 800a27c:	0018      	movs	r0, r3
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	46c0      	nop			; (mov r8, r8)
 800a284:	40021000 	.word	0x40021000

0800a288 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a28c:	4b03      	ldr	r3, [pc, #12]	; (800a29c <LL_RCC_PLL_GetMainSource+0x14>)
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	2203      	movs	r2, #3
 800a292:	4013      	ands	r3, r2
}
 800a294:	0018      	movs	r0, r3
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	46c0      	nop			; (mov r8, r8)
 800a29c:	40021000 	.word	0x40021000

0800a2a0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a2a4:	4b03      	ldr	r3, [pc, #12]	; (800a2b4 <LL_RCC_PLL_GetDivider+0x14>)
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	2270      	movs	r2, #112	; 0x70
 800a2aa:	4013      	ands	r3, r2
}
 800a2ac:	0018      	movs	r0, r3
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	46c0      	nop			; (mov r8, r8)
 800a2b4:	40021000 	.word	0x40021000

0800a2b8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800a2c0:	f000 f8a8 	bl	800a414 <RCC_GetSystemClockFreq>
 800a2c4:	0002      	movs	r2, r0
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	0018      	movs	r0, r3
 800a2d0:	f000 f8ce 	bl	800a470 <RCC_GetHCLKClockFreq>
 800a2d4:	0002      	movs	r2, r0
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	0018      	movs	r0, r3
 800a2e0:	f000 f8de 	bl	800a4a0 <RCC_GetPCLK1ClockFreq>
 800a2e4:	0002      	movs	r2, r0
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	609a      	str	r2, [r3, #8]
}
 800a2ea:	46c0      	nop			; (mov r8, r8)
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	b002      	add	sp, #8
 800a2f0:	bd80      	pop	{r7, pc}
	...

0800a2f4 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b03      	cmp	r3, #3
 800a304:	d134      	bne.n	800a370 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	0018      	movs	r0, r3
 800a30a:	f7ff ff93 	bl	800a234 <LL_RCC_GetUSARTClockSource>
 800a30e:	0003      	movs	r3, r0
 800a310:	4a39      	ldr	r2, [pc, #228]	; (800a3f8 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d016      	beq.n	800a344 <LL_RCC_GetUSARTClockFreq+0x50>
 800a316:	4a38      	ldr	r2, [pc, #224]	; (800a3f8 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d81c      	bhi.n	800a356 <LL_RCC_GetUSARTClockFreq+0x62>
 800a31c:	4a37      	ldr	r2, [pc, #220]	; (800a3fc <LL_RCC_GetUSARTClockFreq+0x108>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d003      	beq.n	800a32a <LL_RCC_GetUSARTClockFreq+0x36>
 800a322:	4a37      	ldr	r2, [pc, #220]	; (800a400 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d005      	beq.n	800a334 <LL_RCC_GetUSARTClockFreq+0x40>
 800a328:	e015      	b.n	800a356 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a32a:	f000 f873 	bl	800a414 <RCC_GetSystemClockFreq>
 800a32e:	0003      	movs	r3, r0
 800a330:	60fb      	str	r3, [r7, #12]
        break;
 800a332:	e05c      	b.n	800a3ee <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a334:	f7ff ff36 	bl	800a1a4 <LL_RCC_HSI_IsReady>
 800a338:	0003      	movs	r3, r0
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d150      	bne.n	800a3e0 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800a33e:	4b31      	ldr	r3, [pc, #196]	; (800a404 <LL_RCC_GetUSARTClockFreq+0x110>)
 800a340:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a342:	e04d      	b.n	800a3e0 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a344:	f7ff ff42 	bl	800a1cc <LL_RCC_LSE_IsReady>
 800a348:	0003      	movs	r3, r0
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d14a      	bne.n	800a3e4 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800a34e:	2380      	movs	r3, #128	; 0x80
 800a350:	021b      	lsls	r3, r3, #8
 800a352:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a354:	e046      	b.n	800a3e4 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a356:	f000 f85d 	bl	800a414 <RCC_GetSystemClockFreq>
 800a35a:	0003      	movs	r3, r0
 800a35c:	0018      	movs	r0, r3
 800a35e:	f000 f887 	bl	800a470 <RCC_GetHCLKClockFreq>
 800a362:	0003      	movs	r3, r0
 800a364:	0018      	movs	r0, r3
 800a366:	f000 f89b 	bl	800a4a0 <RCC_GetPCLK1ClockFreq>
 800a36a:	0003      	movs	r3, r0
 800a36c:	60fb      	str	r3, [r7, #12]
        break;
 800a36e:	e03e      	b.n	800a3ee <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b0c      	cmp	r3, #12
 800a374:	d13b      	bne.n	800a3ee <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	0018      	movs	r0, r3
 800a37a:	f7ff ff5b 	bl	800a234 <LL_RCC_GetUSARTClockSource>
 800a37e:	0003      	movs	r3, r0
 800a380:	4a21      	ldr	r2, [pc, #132]	; (800a408 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d016      	beq.n	800a3b4 <LL_RCC_GetUSARTClockFreq+0xc0>
 800a386:	4a20      	ldr	r2, [pc, #128]	; (800a408 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d81c      	bhi.n	800a3c6 <LL_RCC_GetUSARTClockFreq+0xd2>
 800a38c:	4a1f      	ldr	r2, [pc, #124]	; (800a40c <LL_RCC_GetUSARTClockFreq+0x118>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d003      	beq.n	800a39a <LL_RCC_GetUSARTClockFreq+0xa6>
 800a392:	4a1f      	ldr	r2, [pc, #124]	; (800a410 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d005      	beq.n	800a3a4 <LL_RCC_GetUSARTClockFreq+0xb0>
 800a398:	e015      	b.n	800a3c6 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a39a:	f000 f83b 	bl	800a414 <RCC_GetSystemClockFreq>
 800a39e:	0003      	movs	r3, r0
 800a3a0:	60fb      	str	r3, [r7, #12]
        break;
 800a3a2:	e024      	b.n	800a3ee <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a3a4:	f7ff fefe 	bl	800a1a4 <LL_RCC_HSI_IsReady>
 800a3a8:	0003      	movs	r3, r0
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d11c      	bne.n	800a3e8 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800a3ae:	4b15      	ldr	r3, [pc, #84]	; (800a404 <LL_RCC_GetUSARTClockFreq+0x110>)
 800a3b0:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a3b2:	e019      	b.n	800a3e8 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a3b4:	f7ff ff0a 	bl	800a1cc <LL_RCC_LSE_IsReady>
 800a3b8:	0003      	movs	r3, r0
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d116      	bne.n	800a3ec <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800a3be:	2380      	movs	r3, #128	; 0x80
 800a3c0:	021b      	lsls	r3, r3, #8
 800a3c2:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a3c4:	e012      	b.n	800a3ec <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a3c6:	f000 f825 	bl	800a414 <RCC_GetSystemClockFreq>
 800a3ca:	0003      	movs	r3, r0
 800a3cc:	0018      	movs	r0, r3
 800a3ce:	f000 f84f 	bl	800a470 <RCC_GetHCLKClockFreq>
 800a3d2:	0003      	movs	r3, r0
 800a3d4:	0018      	movs	r0, r3
 800a3d6:	f000 f863 	bl	800a4a0 <RCC_GetPCLK1ClockFreq>
 800a3da:	0003      	movs	r3, r0
 800a3dc:	60fb      	str	r3, [r7, #12]
        break;
 800a3de:	e006      	b.n	800a3ee <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a3e0:	46c0      	nop			; (mov r8, r8)
 800a3e2:	e004      	b.n	800a3ee <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a3e4:	46c0      	nop			; (mov r8, r8)
 800a3e6:	e002      	b.n	800a3ee <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a3e8:	46c0      	nop			; (mov r8, r8)
 800a3ea:	e000      	b.n	800a3ee <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a3ec:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
}
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	b004      	add	sp, #16
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	00030003 	.word	0x00030003
 800a3fc:	00030001 	.word	0x00030001
 800a400:	00030002 	.word	0x00030002
 800a404:	00f42400 	.word	0x00f42400
 800a408:	000c000c 	.word	0x000c000c
 800a40c:	000c0004 	.word	0x000c0004
 800a410:	000c0008 	.word	0x000c0008

0800a414 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800a41a:	f7ff fee7 	bl	800a1ec <LL_RCC_GetSysClkSource>
 800a41e:	0003      	movs	r3, r0
 800a420:	2b08      	cmp	r3, #8
 800a422:	d002      	beq.n	800a42a <RCC_GetSystemClockFreq+0x16>
 800a424:	2b10      	cmp	r3, #16
 800a426:	d003      	beq.n	800a430 <RCC_GetSystemClockFreq+0x1c>
 800a428:	e007      	b.n	800a43a <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800a42a:	4b0e      	ldr	r3, [pc, #56]	; (800a464 <RCC_GetSystemClockFreq+0x50>)
 800a42c:	607b      	str	r3, [r7, #4]
      break;
 800a42e:	e014      	b.n	800a45a <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800a430:	f000 f84c 	bl	800a4cc <RCC_PLL_GetFreqDomain_SYS>
 800a434:	0003      	movs	r3, r0
 800a436:	607b      	str	r3, [r7, #4]
      break;
 800a438:	e00f      	b.n	800a45a <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a43a:	4b0b      	ldr	r3, [pc, #44]	; (800a468 <RCC_GetSystemClockFreq+0x54>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	0adb      	lsrs	r3, r3, #11
 800a440:	2207      	movs	r2, #7
 800a442:	4013      	ands	r3, r2
 800a444:	2201      	movs	r2, #1
 800a446:	409a      	lsls	r2, r3
 800a448:	0013      	movs	r3, r2
 800a44a:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800a44c:	6839      	ldr	r1, [r7, #0]
 800a44e:	4807      	ldr	r0, [pc, #28]	; (800a46c <RCC_GetSystemClockFreq+0x58>)
 800a450:	f7f5 fe58 	bl	8000104 <__udivsi3>
 800a454:	0003      	movs	r3, r0
 800a456:	607b      	str	r3, [r7, #4]
      break;
 800a458:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800a45a:	687b      	ldr	r3, [r7, #4]
}
 800a45c:	0018      	movs	r0, r3
 800a45e:	46bd      	mov	sp, r7
 800a460:	b002      	add	sp, #8
 800a462:	bd80      	pop	{r7, pc}
 800a464:	007a1200 	.word	0x007a1200
 800a468:	40021000 	.word	0x40021000
 800a46c:	00f42400 	.word	0x00f42400

0800a470 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800a478:	f7ff fec4 	bl	800a204 <LL_RCC_GetAHBPrescaler>
 800a47c:	0003      	movs	r3, r0
 800a47e:	0a1b      	lsrs	r3, r3, #8
 800a480:	220f      	movs	r2, #15
 800a482:	401a      	ands	r2, r3
 800a484:	4b05      	ldr	r3, [pc, #20]	; (800a49c <RCC_GetHCLKClockFreq+0x2c>)
 800a486:	0092      	lsls	r2, r2, #2
 800a488:	58d3      	ldr	r3, [r2, r3]
 800a48a:	221f      	movs	r2, #31
 800a48c:	4013      	ands	r3, r2
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	40da      	lsrs	r2, r3
 800a492:	0013      	movs	r3, r2
}
 800a494:	0018      	movs	r0, r3
 800a496:	46bd      	mov	sp, r7
 800a498:	b002      	add	sp, #8
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	0800a814 	.word	0x0800a814

0800a4a0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800a4a8:	f7ff feb8 	bl	800a21c <LL_RCC_GetAPB1Prescaler>
 800a4ac:	0003      	movs	r3, r0
 800a4ae:	0b1a      	lsrs	r2, r3, #12
 800a4b0:	4b05      	ldr	r3, [pc, #20]	; (800a4c8 <RCC_GetPCLK1ClockFreq+0x28>)
 800a4b2:	0092      	lsls	r2, r2, #2
 800a4b4:	58d3      	ldr	r3, [r2, r3]
 800a4b6:	221f      	movs	r2, #31
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	40da      	lsrs	r2, r3
 800a4be:	0013      	movs	r3, r2
}
 800a4c0:	0018      	movs	r0, r3
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	b002      	add	sp, #8
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	0800a854 	.word	0x0800a854

0800a4cc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800a4cc:	b590      	push	{r4, r7, lr}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800a4d2:	f7ff fed9 	bl	800a288 <LL_RCC_PLL_GetMainSource>
 800a4d6:	0003      	movs	r3, r0
 800a4d8:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d003      	beq.n	800a4e8 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	2b03      	cmp	r3, #3
 800a4e4:	d003      	beq.n	800a4ee <RCC_PLL_GetFreqDomain_SYS+0x22>
 800a4e6:	e005      	b.n	800a4f4 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800a4e8:	4b13      	ldr	r3, [pc, #76]	; (800a538 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a4ea:	607b      	str	r3, [r7, #4]
      break;
 800a4ec:	e005      	b.n	800a4fa <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800a4ee:	4b13      	ldr	r3, [pc, #76]	; (800a53c <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800a4f0:	607b      	str	r3, [r7, #4]
      break;
 800a4f2:	e002      	b.n	800a4fa <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800a4f4:	4b10      	ldr	r3, [pc, #64]	; (800a538 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a4f6:	607b      	str	r3, [r7, #4]
      break;
 800a4f8:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800a4fa:	f7ff fead 	bl	800a258 <LL_RCC_PLL_GetN>
 800a4fe:	0002      	movs	r2, r0
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4353      	muls	r3, r2
 800a504:	001c      	movs	r4, r3
 800a506:	f7ff fecb 	bl	800a2a0 <LL_RCC_PLL_GetDivider>
 800a50a:	0003      	movs	r3, r0
 800a50c:	091b      	lsrs	r3, r3, #4
 800a50e:	3301      	adds	r3, #1
 800a510:	0019      	movs	r1, r3
 800a512:	0020      	movs	r0, r4
 800a514:	f7f5 fdf6 	bl	8000104 <__udivsi3>
 800a518:	0003      	movs	r3, r0
 800a51a:	001c      	movs	r4, r3
 800a51c:	f7ff fea8 	bl	800a270 <LL_RCC_PLL_GetR>
 800a520:	0003      	movs	r3, r0
 800a522:	0f5b      	lsrs	r3, r3, #29
 800a524:	3301      	adds	r3, #1
 800a526:	0019      	movs	r1, r3
 800a528:	0020      	movs	r0, r4
 800a52a:	f7f5 fdeb 	bl	8000104 <__udivsi3>
 800a52e:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800a530:	0018      	movs	r0, r3
 800a532:	46bd      	mov	sp, r7
 800a534:	b003      	add	sp, #12
 800a536:	bd90      	pop	{r4, r7, pc}
 800a538:	00f42400 	.word	0x00f42400
 800a53c:	007a1200 	.word	0x007a1200

0800a540 <LL_USART_IsEnabled>:
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2201      	movs	r2, #1
 800a54e:	4013      	ands	r3, r2
 800a550:	2b01      	cmp	r3, #1
 800a552:	d101      	bne.n	800a558 <LL_USART_IsEnabled+0x18>
 800a554:	2301      	movs	r3, #1
 800a556:	e000      	b.n	800a55a <LL_USART_IsEnabled+0x1a>
 800a558:	2300      	movs	r3, #0
}
 800a55a:	0018      	movs	r0, r3
 800a55c:	46bd      	mov	sp, r7
 800a55e:	b002      	add	sp, #8
 800a560:	bd80      	pop	{r7, pc}

0800a562 <LL_USART_SetPrescaler>:
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a570:	220f      	movs	r2, #15
 800a572:	4393      	bics	r3, r2
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	b292      	uxth	r2, r2
 800a578:	431a      	orrs	r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a57e:	46c0      	nop			; (mov r8, r8)
 800a580:	46bd      	mov	sp, r7
 800a582:	b002      	add	sp, #8
 800a584:	bd80      	pop	{r7, pc}
	...

0800a588 <LL_USART_SetStopBitsLength>:
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	4a05      	ldr	r2, [pc, #20]	; (800a5ac <LL_USART_SetStopBitsLength+0x24>)
 800a598:	401a      	ands	r2, r3
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	431a      	orrs	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	605a      	str	r2, [r3, #4]
}
 800a5a2:	46c0      	nop			; (mov r8, r8)
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	b002      	add	sp, #8
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	46c0      	nop			; (mov r8, r8)
 800a5ac:	ffffcfff 	.word	0xffffcfff

0800a5b0 <LL_USART_SetHWFlowCtrl>:
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	4a05      	ldr	r2, [pc, #20]	; (800a5d4 <LL_USART_SetHWFlowCtrl+0x24>)
 800a5c0:	401a      	ands	r2, r3
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	431a      	orrs	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	609a      	str	r2, [r3, #8]
}
 800a5ca:	46c0      	nop			; (mov r8, r8)
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	b002      	add	sp, #8
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	46c0      	nop			; (mov r8, r8)
 800a5d4:	fffffcff 	.word	0xfffffcff

0800a5d8 <LL_USART_SetBaudRate>:
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	607a      	str	r2, [r7, #4]
 800a5e4:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b0b      	cmp	r3, #11
 800a5ea:	d843      	bhi.n	800a674 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a5ec:	683a      	ldr	r2, [r7, #0]
 800a5ee:	2380      	movs	r3, #128	; 0x80
 800a5f0:	021b      	lsls	r3, r3, #8
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d126      	bne.n	800a644 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	001a      	movs	r2, r3
 800a5fc:	4b1f      	ldr	r3, [pc, #124]	; (800a67c <LL_USART_SetBaudRate+0xa4>)
 800a5fe:	0092      	lsls	r2, r2, #2
 800a600:	58d3      	ldr	r3, [r2, r3]
 800a602:	0019      	movs	r1, r3
 800a604:	68b8      	ldr	r0, [r7, #8]
 800a606:	f7f5 fd7d 	bl	8000104 <__udivsi3>
 800a60a:	0003      	movs	r3, r0
 800a60c:	005a      	lsls	r2, r3, #1
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	085b      	lsrs	r3, r3, #1
 800a612:	18d3      	adds	r3, r2, r3
 800a614:	6a39      	ldr	r1, [r7, #32]
 800a616:	0018      	movs	r0, r3
 800a618:	f7f5 fd74 	bl	8000104 <__udivsi3>
 800a61c:	0003      	movs	r3, r0
 800a61e:	b29b      	uxth	r3, r3
 800a620:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	4a16      	ldr	r2, [pc, #88]	; (800a680 <LL_USART_SetBaudRate+0xa8>)
 800a626:	4013      	ands	r3, r2
 800a628:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	085b      	lsrs	r3, r3, #1
 800a62e:	b29b      	uxth	r3, r3
 800a630:	001a      	movs	r2, r3
 800a632:	2307      	movs	r3, #7
 800a634:	4013      	ands	r3, r2
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	4313      	orrs	r3, r2
 800a63a:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	693a      	ldr	r2, [r7, #16]
 800a640:	60da      	str	r2, [r3, #12]
}
 800a642:	e017      	b.n	800a674 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	b2db      	uxtb	r3, r3
 800a648:	001a      	movs	r2, r3
 800a64a:	4b0c      	ldr	r3, [pc, #48]	; (800a67c <LL_USART_SetBaudRate+0xa4>)
 800a64c:	0092      	lsls	r2, r2, #2
 800a64e:	58d3      	ldr	r3, [r2, r3]
 800a650:	0019      	movs	r1, r3
 800a652:	68b8      	ldr	r0, [r7, #8]
 800a654:	f7f5 fd56 	bl	8000104 <__udivsi3>
 800a658:	0003      	movs	r3, r0
 800a65a:	001a      	movs	r2, r3
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	085b      	lsrs	r3, r3, #1
 800a660:	18d3      	adds	r3, r2, r3
 800a662:	6a39      	ldr	r1, [r7, #32]
 800a664:	0018      	movs	r0, r3
 800a666:	f7f5 fd4d 	bl	8000104 <__udivsi3>
 800a66a:	0003      	movs	r3, r0
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	001a      	movs	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	60da      	str	r2, [r3, #12]
}
 800a674:	46c0      	nop			; (mov r8, r8)
 800a676:	46bd      	mov	sp, r7
 800a678:	b006      	add	sp, #24
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	0800a8c8 	.word	0x0800a8c8
 800a680:	0000fff0 	.word	0x0000fff0

0800a684 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800a684:	b590      	push	{r4, r7, lr}
 800a686:	b08b      	sub	sp, #44	; 0x2c
 800a688:	af02      	add	r7, sp, #8
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a68e:	231f      	movs	r3, #31
 800a690:	18fb      	adds	r3, r7, r3
 800a692:	2201      	movs	r2, #1
 800a694:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a696:	2300      	movs	r3, #0
 800a698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	0018      	movs	r0, r3
 800a69e:	f7ff ff4f 	bl	800a540 <LL_USART_IsEnabled>
 800a6a2:	1e03      	subs	r3, r0, #0
 800a6a4:	d16a      	bne.n	800a77c <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a38      	ldr	r2, [pc, #224]	; (800a78c <LL_USART_Init+0x108>)
 800a6ac:	401a      	ands	r2, r3
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	6899      	ldr	r1, [r3, #8]
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	4319      	orrs	r1, r3
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	695b      	ldr	r3, [r3, #20]
 800a6bc:	4319      	orrs	r1, r3
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	430b      	orrs	r3, r1
 800a6c4:	431a      	orrs	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	68da      	ldr	r2, [r3, #12]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	0011      	movs	r1, r2
 800a6d2:	0018      	movs	r0, r3
 800a6d4:	f7ff ff58 	bl	800a588 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	699a      	ldr	r2, [r3, #24]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	0011      	movs	r1, r2
 800a6e0:	0018      	movs	r0, r3
 800a6e2:	f7ff ff65 	bl	800a5b0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a29      	ldr	r2, [pc, #164]	; (800a790 <LL_USART_Init+0x10c>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d105      	bne.n	800a6fa <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800a6ee:	2003      	movs	r0, #3
 800a6f0:	f7ff fe00 	bl	800a2f4 <LL_RCC_GetUSARTClockFreq>
 800a6f4:	0003      	movs	r3, r0
 800a6f6:	61bb      	str	r3, [r7, #24]
 800a6f8:	e022      	b.n	800a740 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4a25      	ldr	r2, [pc, #148]	; (800a794 <LL_USART_Init+0x110>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d105      	bne.n	800a70e <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800a702:	200c      	movs	r0, #12
 800a704:	f7ff fdf6 	bl	800a2f4 <LL_RCC_GetUSARTClockFreq>
 800a708:	0003      	movs	r3, r0
 800a70a:	61bb      	str	r3, [r7, #24]
 800a70c:	e018      	b.n	800a740 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a21      	ldr	r2, [pc, #132]	; (800a798 <LL_USART_Init+0x114>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d108      	bne.n	800a728 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a716:	240c      	movs	r4, #12
 800a718:	193b      	adds	r3, r7, r4
 800a71a:	0018      	movs	r0, r3
 800a71c:	f7ff fdcc 	bl	800a2b8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a720:	193b      	adds	r3, r7, r4
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	61bb      	str	r3, [r7, #24]
 800a726:	e00b      	b.n	800a740 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a1c      	ldr	r2, [pc, #112]	; (800a79c <LL_USART_Init+0x118>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d107      	bne.n	800a740 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a730:	240c      	movs	r4, #12
 800a732:	193b      	adds	r3, r7, r4
 800a734:	0018      	movs	r0, r3
 800a736:	f7ff fdbf 	bl	800a2b8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a73a:	193b      	adds	r3, r7, r4
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d013      	beq.n	800a76e <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00f      	beq.n	800a76e <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800a74e:	231f      	movs	r3, #31
 800a750:	18fb      	adds	r3, r7, r3
 800a752:	2200      	movs	r2, #0
 800a754:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	69dc      	ldr	r4, [r3, #28]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	69b9      	ldr	r1, [r7, #24]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	0023      	movs	r3, r4
 800a76a:	f7ff ff35 	bl	800a5d8 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	0011      	movs	r1, r2
 800a776:	0018      	movs	r0, r3
 800a778:	f7ff fef3 	bl	800a562 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a77c:	231f      	movs	r3, #31
 800a77e:	18fb      	adds	r3, r7, r3
 800a780:	781b      	ldrb	r3, [r3, #0]
}
 800a782:	0018      	movs	r0, r3
 800a784:	46bd      	mov	sp, r7
 800a786:	b009      	add	sp, #36	; 0x24
 800a788:	bd90      	pop	{r4, r7, pc}
 800a78a:	46c0      	nop			; (mov r8, r8)
 800a78c:	efff69f3 	.word	0xefff69f3
 800a790:	40013800 	.word	0x40013800
 800a794:	40004400 	.word	0x40004400
 800a798:	40004800 	.word	0x40004800
 800a79c:	40004c00 	.word	0x40004c00

0800a7a0 <__libc_init_array>:
 800a7a0:	b570      	push	{r4, r5, r6, lr}
 800a7a2:	2600      	movs	r6, #0
 800a7a4:	4d0c      	ldr	r5, [pc, #48]	; (800a7d8 <__libc_init_array+0x38>)
 800a7a6:	4c0d      	ldr	r4, [pc, #52]	; (800a7dc <__libc_init_array+0x3c>)
 800a7a8:	1b64      	subs	r4, r4, r5
 800a7aa:	10a4      	asrs	r4, r4, #2
 800a7ac:	42a6      	cmp	r6, r4
 800a7ae:	d109      	bne.n	800a7c4 <__libc_init_array+0x24>
 800a7b0:	2600      	movs	r6, #0
 800a7b2:	f000 f821 	bl	800a7f8 <_init>
 800a7b6:	4d0a      	ldr	r5, [pc, #40]	; (800a7e0 <__libc_init_array+0x40>)
 800a7b8:	4c0a      	ldr	r4, [pc, #40]	; (800a7e4 <__libc_init_array+0x44>)
 800a7ba:	1b64      	subs	r4, r4, r5
 800a7bc:	10a4      	asrs	r4, r4, #2
 800a7be:	42a6      	cmp	r6, r4
 800a7c0:	d105      	bne.n	800a7ce <__libc_init_array+0x2e>
 800a7c2:	bd70      	pop	{r4, r5, r6, pc}
 800a7c4:	00b3      	lsls	r3, r6, #2
 800a7c6:	58eb      	ldr	r3, [r5, r3]
 800a7c8:	4798      	blx	r3
 800a7ca:	3601      	adds	r6, #1
 800a7cc:	e7ee      	b.n	800a7ac <__libc_init_array+0xc>
 800a7ce:	00b3      	lsls	r3, r6, #2
 800a7d0:	58eb      	ldr	r3, [r5, r3]
 800a7d2:	4798      	blx	r3
 800a7d4:	3601      	adds	r6, #1
 800a7d6:	e7f2      	b.n	800a7be <__libc_init_array+0x1e>
 800a7d8:	0800a8f8 	.word	0x0800a8f8
 800a7dc:	0800a8f8 	.word	0x0800a8f8
 800a7e0:	0800a8f8 	.word	0x0800a8f8
 800a7e4:	0800a8fc 	.word	0x0800a8fc

0800a7e8 <memset>:
 800a7e8:	0003      	movs	r3, r0
 800a7ea:	1882      	adds	r2, r0, r2
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d100      	bne.n	800a7f2 <memset+0xa>
 800a7f0:	4770      	bx	lr
 800a7f2:	7019      	strb	r1, [r3, #0]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	e7f9      	b.n	800a7ec <memset+0x4>

0800a7f8 <_init>:
 800a7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fa:	46c0      	nop			; (mov r8, r8)
 800a7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7fe:	bc08      	pop	{r3}
 800a800:	469e      	mov	lr, r3
 800a802:	4770      	bx	lr

0800a804 <_fini>:
 800a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a806:	46c0      	nop			; (mov r8, r8)
 800a808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a80a:	bc08      	pop	{r3}
 800a80c:	469e      	mov	lr, r3
 800a80e:	4770      	bx	lr
