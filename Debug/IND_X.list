
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a678  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800a734  0800a734  0001a734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a81c  0800a81c  00023140  2**0
                  CONTENTS
  4 .ARM          00000000  0800a81c  0800a81c  00023140  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a81c  0800a81c  00023140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a81c  0800a81c  0001a81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a820  0800a820  0001a820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003140  20000000  0800a824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c0  20003140  0800d964  00023140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005600  0800d964  00025600  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00023140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d5a  00000000  00000000  00023168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d5  00000000  00000000  0003cec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00040398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001718  00000000  00000000  00041c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3f7  00000000  00000000  00043340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0a3  00000000  00000000  0005f737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae244  00000000  00000000  0007c7da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012aa1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d4  00000000  00000000  0012aa74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20003140 	.word	0x20003140
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a71c 	.word	0x0800a71c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20003144 	.word	0x20003144
 8000100:	0800a71c 	.word	0x0800a71c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800050e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	430a      	orrs	r2, r1
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800051a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	4013      	ands	r3, r2
 8000520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000522:	68fb      	ldr	r3, [r7, #12]
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b004      	add	sp, #16
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 8000536:	2316      	movs	r3, #22
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	2200      	movs	r2, #0
 800053c:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 800053e:	2314      	movs	r3, #20
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	2200      	movs	r2, #0
 8000544:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8000546:	2312      	movs	r3, #18
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	2200      	movs	r2, #0
 800054c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f002 fd13 	bl	8002f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f871 	bl	8000638 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b32      	ldr	r3, [pc, #200]	; (8000620 <main+0xf0>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	4b31      	ldr	r3, [pc, #196]	; (8000620 <main+0xf0>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	4b2f      	ldr	r3, [pc, #188]	; (8000620 <main+0xf0>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b2c      	ldr	r3, [pc, #176]	; (8000620 <main+0xf0>)
 8000570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000572:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <main+0xf0>)
 8000574:	2102      	movs	r1, #2
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
 800057a:	4b29      	ldr	r3, [pc, #164]	; (8000620 <main+0xf0>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	2202      	movs	r2, #2
 8000580:	4013      	ands	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b26      	ldr	r3, [pc, #152]	; (8000620 <main+0xf0>)
 8000588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800058a:	4b25      	ldr	r3, [pc, #148]	; (8000620 <main+0xf0>)
 800058c:	2104      	movs	r1, #4
 800058e:	430a      	orrs	r2, r1
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
 8000592:	4b23      	ldr	r3, [pc, #140]	; (8000620 <main+0xf0>)
 8000594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000596:	2204      	movs	r2, #4
 8000598:	4013      	ands	r3, r2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fbb3 	bl	8000d08 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a2:	f000 fb83 	bl	8000cac <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 faa1 	bl	8000aec <MX_USART2_UART_Init>
  MX_COMP1_Init();
 80005aa:	f000 f8c5 	bl	8000738 <MX_COMP1_Init>
  MX_TIM1_Init();
 80005ae:	f000 f9a3 	bl	80008f8 <MX_TIM1_Init>
  MX_USART3_Init();
 80005b2:	f000 fb39 	bl	8000c28 <MX_USART3_Init>
  MX_I2S1_Init();
 80005b6:	f000 f931 	bl	800081c <MX_I2S1_Init>
  MX_I2C1_Init();
 80005ba:	f000 f8ef 	bl	800079c <MX_I2C1_Init>
  MX_SPI2_Init();
 80005be:	f000 f957 	bl	8000870 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <main+0xf4>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 ffa5 	bl	8003514 <HAL_COMP_Start>
	HAL_Delay(100);
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f002 fd5a 	bl	8003084 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005d0:	f001 fc4a 	bl	8001e68 <MEM_Reset>

	weoInit();
 80005d4:	f000 fde4 	bl	80011a0 <weoInit>
	weoClear();
 80005d8:	f000 fe4e 	bl	8001278 <weoClear>

	MEM_GetID();
 80005dc:	f001 fea2 	bl	8002324 <MEM_GetID>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <main+0xf8>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <main+0xf8>)
 80005e6:	4911      	ldr	r1, [pc, #68]	; (800062c <main+0xfc>)
 80005e8:	430a      	orrs	r2, r1
 80005ea:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <main+0xf8>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff ff20 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <main+0xf8>)
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff ff2a 	bl	8000450 <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <main+0xf8>)
 80005fe:	6a1a      	ldr	r2, [r3, #32]
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <main+0xf8>)
 8000602:	2108      	movs	r1, #8
 8000604:	430a      	orrs	r2, r1
 8000606:	621a      	str	r2, [r3, #32]
//	USART3->CR1 |= USART_CR1_UE;
//weoDrawRectangleFilled(0x00,0x00,0x7F,0x7F,0xFF,h1);
//	USART3->CR1 &= ~(USART_CR1_UE);
//		USART3->CR2 |= USART_CR2_MSBFIRST;
//		USART3->CR1 |= USART_CR1_UE;
	GPIOC->ODR |= 1 << 6;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <main+0x100>)
 800060a:	695a      	ldr	r2, [r3, #20]
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <main+0x100>)
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	430a      	orrs	r2, r1
 8000612:	615a      	str	r2, [r3, #20]
	while (1) {
//		while(!(USART3->ISR & USART_ISR_TXE)){};
//						USART3->TDR = 0xF0;
		cmdExecute(cmd2Execute);
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <main+0x104>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fee5 	bl	80023e8 <cmdExecute>
 800061e:	e7f9      	b.n	8000614 <main+0xe4>
 8000620:	40021000 	.word	0x40021000
 8000624:	20003350 	.word	0x20003350
 8000628:	40004400 	.word	0x40004400
 800062c:	1000100d 	.word	0x1000100d
 8000630:	50000800 	.word	0x50000800
 8000634:	2000345a 	.word	0x2000345a

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b0a1      	sub	sp, #132	; 0x84
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	2448      	movs	r4, #72	; 0x48
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0018      	movs	r0, r3
 8000644:	2338      	movs	r3, #56	; 0x38
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f00a f85f 	bl	800a70c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064e:	2338      	movs	r3, #56	; 0x38
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	0018      	movs	r0, r3
 8000654:	2310      	movs	r3, #16
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f00a f857 	bl	800a70c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	0018      	movs	r0, r3
 8000662:	2334      	movs	r3, #52	; 0x34
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f00a f850 	bl	800a70c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	0018      	movs	r0, r3
 8000672:	f004 fdb1 	bl	80051d8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2202      	movs	r2, #2
 800067a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	0052      	lsls	r2, r2, #1
 8000682:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000684:	0021      	movs	r1, r4
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2240      	movs	r2, #64	; 0x40
 8000690:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2202      	movs	r2, #2
 8000696:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2202      	movs	r2, #2
 800069c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2208      	movs	r2, #8
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	0292      	lsls	r2, r2, #10
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2280      	movs	r2, #128	; 0x80
 80006b6:	0492      	lsls	r2, r2, #18
 80006b8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2280      	movs	r2, #128	; 0x80
 80006be:	0592      	lsls	r2, r2, #22
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	0018      	movs	r0, r3
 80006c6:	f004 fdd3 	bl	8005270 <HAL_RCC_OscConfig>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ce:	f001 ffd1 	bl	8002674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	2138      	movs	r1, #56	; 0x38
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2207      	movs	r2, #7
 80006d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2202      	movs	r2, #2
 80006de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2102      	movs	r1, #2
 80006f0:	0018      	movs	r0, r3
 80006f2:	f005 f8dd 	bl	80058b0 <HAL_RCC_ClockConfig>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fa:	f001 ffbb 	bl	8002674 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <SystemClock_Config+0xfc>)
 8000702:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	0018      	movs	r0, r3
 8000720:	f005 fa70 	bl	8005c04 <HAL_RCCEx_PeriphCLKConfig>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000728:	f001 ffa4 	bl	8002674 <Error_Handler>
  }
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b021      	add	sp, #132	; 0x84
 8000732:	bd90      	pop	{r4, r7, pc}
 8000734:	00200822 	.word	0x00200822

08000738 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_COMP1_Init+0x5c>)
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <MX_COMP1_Init+0x60>)
 8000740:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_COMP1_Init+0x5c>)
 800074c:	2230      	movs	r2, #48	; 0x30
 800074e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_COMP1_Init+0x5c>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	0392      	lsls	r2, r2, #14
 8000768:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_COMP1_Init+0x5c>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000778:	2212      	movs	r2, #18
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <MX_COMP1_Init+0x5c>)
 800077e:	0018      	movs	r0, r3
 8000780:	f002 fd66 	bl	8003250 <HAL_COMP_Init>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 8000788:	f001 ff74 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20003350 	.word	0x20003350
 8000798:	40010200 	.word	0x40010200

0800079c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_I2C1_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <MX_I2C1_Init+0x7c>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_I2C1_Init+0x74>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_I2C1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_I2C1_Init+0x74>)
 80007d8:	0018      	movs	r0, r3
 80007da:	f003 fbf7 	bl	8003fcc <HAL_I2C_Init>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007e2:	f001 ff47 	bl	8002674 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_I2C1_Init+0x74>)
 80007e8:	2100      	movs	r1, #0
 80007ea:	0018      	movs	r0, r3
 80007ec:	f004 fa84 	bl	8004cf8 <HAL_I2CEx_ConfigAnalogFilter>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007f4:	f001 ff3e 	bl	8002674 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <MX_I2C1_Init+0x74>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	0018      	movs	r0, r3
 80007fe:	f004 fac7 	bl	8004d90 <HAL_I2CEx_ConfigDigitalFilter>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000806:	f001 ff35 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20003230 	.word	0x20003230
 8000814:	40005400 	.word	0x40005400
 8000818:	1094102c 	.word	0x1094102c

0800081c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <MX_I2S1_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	0092      	lsls	r2, r2, #2
 800082c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_I2S1_Init+0x4c>)
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	0092      	lsls	r2, r2, #2
 8000840:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000844:	22fa      	movs	r2, #250	; 0xfa
 8000846:	0192      	lsls	r2, r2, #6
 8000848:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_I2S1_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000852:	0018      	movs	r0, r3
 8000854:	f004 fae8 	bl	8004e28 <HAL_I2S_Init>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 800085c:	f001 ff0a 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	2000345c 	.word	0x2000345c
 800086c:	40013000 	.word	0x40013000

08000870 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_SPI2_Init+0x80>)
 8000876:	2208      	movs	r2, #8
 8000878:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_SPI2_Init+0x80>)
 800087c:	4a1d      	ldr	r2, [pc, #116]	; (80008f4 <MX_SPI2_Init+0x84>)
 800087e:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_SPI2_Init+0x80>)
 8000882:	2282      	movs	r2, #130	; 0x82
 8000884:	0052      	lsls	r2, r2, #1
 8000886:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_SPI2_Init+0x80>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_SPI2_Init+0x80>)
 8000890:	22e0      	movs	r2, #224	; 0xe0
 8000892:	00d2      	lsls	r2, r2, #3
 8000894:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI2_Init+0x80>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI2_Init+0x80>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	0092      	lsls	r2, r2, #2
 80008a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008ac:	2208      	movs	r2, #8
 80008ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008be:	2200      	movs	r2, #0
 80008c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008c4:	2207      	movs	r2, #7
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008d0:	2208      	movs	r2, #8
 80008d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f005 fe94 	bl	8006604 <HAL_SPI_Init>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80008e0:	f001 fec8 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008e4:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008e6:	2208      	movs	r2, #8
 80008e8:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200031b0 	.word	0x200031b0
 80008f4:	40003800 	.word	0x40003800

080008f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09e      	sub	sp, #120	; 0x78
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	2368      	movs	r3, #104	; 0x68
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	0018      	movs	r0, r3
 8000904:	2310      	movs	r3, #16
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f009 feff 	bl	800a70c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090e:	235c      	movs	r3, #92	; 0x5c
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	0018      	movs	r0, r3
 8000914:	230c      	movs	r3, #12
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f009 fef7 	bl	800a70c <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800091e:	2350      	movs	r3, #80	; 0x50
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	0018      	movs	r0, r3
 8000924:	230c      	movs	r3, #12
 8000926:	001a      	movs	r2, r3
 8000928:	2100      	movs	r1, #0
 800092a:	f009 feef 	bl	800a70c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092e:	2334      	movs	r3, #52	; 0x34
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	0018      	movs	r0, r3
 8000934:	231c      	movs	r3, #28
 8000936:	001a      	movs	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f009 fee7 	bl	800a70c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800093e:	003b      	movs	r3, r7
 8000940:	0018      	movs	r0, r3
 8000942:	2334      	movs	r3, #52	; 0x34
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f009 fee0 	bl	800a70c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800094c:	4b64      	ldr	r3, [pc, #400]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 800094e:	4a65      	ldr	r2, [pc, #404]	; (8000ae4 <MX_TIM1_Init+0x1ec>)
 8000950:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000952:	4b63      	ldr	r3, [pc, #396]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b61      	ldr	r3, [pc, #388]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 800095e:	4b60      	ldr	r3, [pc, #384]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000960:	4a61      	ldr	r2, [pc, #388]	; (8000ae8 <MX_TIM1_Init+0x1f0>)
 8000962:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b5e      	ldr	r3, [pc, #376]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800096a:	4b5d      	ldr	r3, [pc, #372]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000970:	4b5b      	ldr	r3, [pc, #364]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000976:	4b5a      	ldr	r3, [pc, #360]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000978:	0018      	movs	r0, r3
 800097a:	f007 fa3f 	bl	8007dfc <HAL_TIM_Base_Init>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000982:	f001 fe77 	bl	8002674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	2168      	movs	r1, #104	; 0x68
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	0152      	lsls	r2, r2, #5
 800098e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000990:	187a      	adds	r2, r7, r1
 8000992:	4b53      	ldr	r3, [pc, #332]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f007 fcc8 	bl	800832c <HAL_TIM_ConfigClockSource>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009a0:	f001 fe68 	bl	8002674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009a4:	4b4e      	ldr	r3, [pc, #312]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f007 fa80 	bl	8007eac <HAL_TIM_PWM_Init>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009b0:	f001 fe60 	bl	8002674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	215c      	movs	r1, #92	; 0x5c
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c8:	187a      	adds	r2, r7, r1
 80009ca:	4b45      	ldr	r3, [pc, #276]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f008 f97c 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80009d8:	f001 fe4c 	bl	8002674 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009dc:	2150      	movs	r1, #80	; 0x50
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2202      	movs	r2, #2
 80009e2:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2201      	movs	r2, #1
 80009e8:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80009f0:	187a      	adds	r2, r7, r1
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	0018      	movs	r0, r3
 80009f8:	f008 fa7c 	bl	8008ef4 <HAL_TIMEx_ConfigBreakInput>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a00:	f001 fe38 	bl	8002674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a04:	2134      	movs	r1, #52	; 0x34
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2260      	movs	r2, #96	; 0x60
 8000a0a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2296      	movs	r2, #150	; 0x96
 8000a10:	0052      	lsls	r2, r2, #1
 8000a12:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2204      	movs	r2, #4
 8000a24:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a32:	1879      	adds	r1, r7, r1
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f007 fb81 	bl	8008140 <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a42:	f001 fe17 	bl	8002674 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a46:	2134      	movs	r1, #52	; 0x34
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2232      	movs	r2, #50	; 0x32
 8000a4c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a4e:	1879      	adds	r1, r7, r1
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000a52:	2210      	movs	r2, #16
 8000a54:	0018      	movs	r0, r3
 8000a56:	f007 fb73 	bl	8008140 <HAL_TIM_PWM_ConfigChannel>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a5e:	f001 fe09 	bl	8002674 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a62:	003b      	movs	r3, r7
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	00d2      	lsls	r2, r2, #3
 8000a70:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a72:	003b      	movs	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a78:	003b      	movs	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a7e:	003b      	movs	r3, r7
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	0152      	lsls	r2, r2, #5
 8000a84:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a86:	003b      	movs	r3, r7
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	0192      	lsls	r2, r2, #6
 8000a8c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000a8e:	003b      	movs	r3, r7
 8000a90:	220a      	movs	r2, #10
 8000a92:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a94:	003b      	movs	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a9a:	003b      	movs	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aa0:	003b      	movs	r3, r7
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	0492      	lsls	r2, r2, #18
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aae:	003b      	movs	r3, r7
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000ab4:	003b      	movs	r3, r7
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	01d2      	lsls	r2, r2, #7
 8000aba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000abc:	003a      	movs	r2, r7
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000ac0:	0011      	movs	r1, r2
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f008 f970 	bl	8008da8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000acc:	f001 fdd2 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f002 f814 	bl	8002b00 <HAL_TIM_MspPostInit>

}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b01e      	add	sp, #120	; 0x78
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20003404 	.word	0x20003404
 8000ae4:	40012c00 	.word	0x40012c00
 8000ae8:	0000027f 	.word	0x0000027f

08000aec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b08f      	sub	sp, #60	; 0x3c
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000af2:	2418      	movs	r4, #24
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	0018      	movs	r0, r3
 8000af8:	2320      	movs	r3, #32
 8000afa:	001a      	movs	r2, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	f009 fe05 	bl	800a70c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	003b      	movs	r3, r7
 8000b04:	0018      	movs	r0, r3
 8000b06:	2318      	movs	r3, #24
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f009 fdfe 	bl	800a70c <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	029b      	lsls	r3, r3, #10
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff fcdf 	bl	80004d8 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff fcf2 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b20:	003b      	movs	r3, r7
 8000b22:	2204      	movs	r2, #4
 8000b24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b26:	003b      	movs	r3, r7
 8000b28:	2202      	movs	r2, #2
 8000b2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b2c:	003b      	movs	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b32:	003b      	movs	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b38:	003b      	movs	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b3e:	003b      	movs	r3, r7
 8000b40:	2201      	movs	r2, #1
 8000b42:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	003a      	movs	r2, r7
 8000b46:	23a0      	movs	r3, #160	; 0xa0
 8000b48:	05db      	lsls	r3, r3, #23
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f009 fa5f 	bl	800a010 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b52:	003b      	movs	r3, r7
 8000b54:	2208      	movs	r2, #8
 8000b56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b58:	003b      	movs	r3, r7
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b5e:	003b      	movs	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b64:	003b      	movs	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b6a:	003b      	movs	r3, r7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b70:	003b      	movs	r3, r7
 8000b72:	2201      	movs	r2, #1
 8000b74:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	003a      	movs	r2, r7
 8000b78:	23a0      	movs	r3, #160	; 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f009 fa46 	bl	800a010 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000b84:	2100      	movs	r1, #0
 8000b86:	201c      	movs	r0, #28
 8000b88:	f7ff fb62 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000b8c:	201c      	movs	r0, #28
 8000b8e:	f7ff fb45 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	22e1      	movs	r2, #225	; 0xe1
 8000b9c:	0212      	lsls	r2, r2, #8
 8000b9e:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	0152      	lsls	r2, r2, #5
 8000ba6:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ba8:	0021      	movs	r1, r4
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	220c      	movs	r2, #12
 8000bba:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0010      	movs	r0, r2
 8000bd0:	f009 fcea 	bl	800a5a8 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fbc5 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000be0:	2100      	movs	r1, #0
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff fbd2 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff fbac 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fbde 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fb96 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff fbed 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d0f9      	beq.n	8000c02 <MX_USART2_UART_Init+0x116>
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff fbfb 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d0f3      	beq.n	8000c02 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b00f      	add	sp, #60	; 0x3c
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	40004400 	.word	0x40004400

08000c28 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_USART3_Init+0x78>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <MX_USART3_Init+0x78>)
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	0309      	lsls	r1, r1, #12
 8000c36:	430a      	orrs	r2, r1
 8000c38:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c3c:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <MX_USART3_Init+0x78>)
 8000c3e:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8100000;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c42:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c44:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c5a:	2208      	movs	r2, #8
 8000c5c:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c60:	2280      	movs	r2, #128	; 0x80
 8000c62:	00d2      	lsls	r2, r2, #3
 8000c64:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	0092      	lsls	r2, r2, #2
 8000c6c:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	0052      	lsls	r2, r2, #1
 8000c74:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c84:	0018      	movs	r0, r3
 8000c86:	f008 f9d5 	bl	8009034 <HAL_USART_Init>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000c8e:	f001 fcf1 	bl	8002674 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8100000;
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c96:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	40004800 	.word	0x40004800
 8000ca4:	20003390 	.word	0x20003390
 8000ca8:	007b98a0 	.word	0x007b98a0

08000cac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_DMA_Init+0x58>)
 8000cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_DMA_Init+0x58>)
 8000cb8:	2101      	movs	r1, #1
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	639a      	str	r2, [r3, #56]	; 0x38
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_DMA_Init+0x58>)
 8000cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2009      	movs	r0, #9
 8000cd0:	f002 fd1e 	bl	8003710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cd4:	2009      	movs	r0, #9
 8000cd6:	f002 fd30 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f002 fd16 	bl	8003710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ce4:	200a      	movs	r0, #10
 8000ce6:	f002 fd28 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	200b      	movs	r0, #11
 8000cf0:	f002 fd0e 	bl	8003710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000cf4:	200b      	movs	r0, #11
 8000cf6:	f002 fd20 	bl	800373a <HAL_NVIC_EnableIRQ>

}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	40021000 	.word	0x40021000

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	003b      	movs	r3, r7
 8000d10:	0018      	movs	r0, r3
 8000d12:	2318      	movs	r3, #24
 8000d14:	001a      	movs	r2, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	f009 fcf8 	bl	800a70c <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f7ff fbf1 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000d22:	2004      	movs	r0, #4
 8000d24:	f7ff fbee 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff fbeb 	bl	8000504 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4a8f      	ldr	r2, [pc, #572]	; (8000f70 <MX_GPIO_Init+0x268>)
 8000d34:	0019      	movs	r1, r3
 8000d36:	0010      	movs	r0, r2
 8000d38:	f7ff fbb6 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	01db      	lsls	r3, r3, #7
 8000d40:	4a8c      	ldr	r2, [pc, #560]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000d42:	0019      	movs	r1, r3
 8000d44:	0010      	movs	r0, r2
 8000d46:	f7ff fbaf 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	4a89      	ldr	r2, [pc, #548]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000d50:	0019      	movs	r1, r3
 8000d52:	0010      	movs	r0, r2
 8000d54:	f7ff fba8 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d58:	23a0      	movs	r3, #160	; 0xa0
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	2140      	movs	r1, #64	; 0x40
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fba2 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000d64:	23a0      	movs	r3, #160	; 0xa0
 8000d66:	05db      	lsls	r3, r3, #23
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fb9c 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000d70:	4b80      	ldr	r3, [pc, #512]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000d72:	2140      	movs	r1, #64	; 0x40
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fb97 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	011a      	lsls	r2, r3, #4
 8000d7e:	23a0      	movs	r3, #160	; 0xa0
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	0011      	movs	r1, r2
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff fb9b 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	015a      	lsls	r2, r3, #5
 8000d8e:	23a0      	movs	r3, #160	; 0xa0
 8000d90:	05db      	lsls	r3, r3, #23
 8000d92:	0011      	movs	r1, r2
 8000d94:	0018      	movs	r0, r3
 8000d96:	f7ff fb93 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	0092      	lsls	r2, r2, #2
 8000da0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000da2:	003b      	movs	r3, r7
 8000da4:	2201      	movs	r2, #1
 8000da6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	003b      	movs	r3, r7
 8000daa:	2203      	movs	r2, #3
 8000dac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dae:	003b      	movs	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db4:	003b      	movs	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000dba:	003b      	movs	r3, r7
 8000dbc:	4a6c      	ldr	r2, [pc, #432]	; (8000f70 <MX_GPIO_Init+0x268>)
 8000dbe:	0019      	movs	r1, r3
 8000dc0:	0010      	movs	r0, r2
 8000dc2:	f009 f925 	bl	800a010 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000dc6:	003b      	movs	r3, r7
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	01d2      	lsls	r2, r2, #7
 8000dcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dce:	003b      	movs	r3, r7
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dd4:	003b      	movs	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dda:	003b      	movs	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de0:	003b      	movs	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000de6:	003b      	movs	r3, r7
 8000de8:	4a62      	ldr	r2, [pc, #392]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000dea:	0019      	movs	r1, r3
 8000dec:	0010      	movs	r0, r2
 8000dee:	f009 f90f 	bl	800a010 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000df2:	003b      	movs	r3, r7
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	0212      	lsls	r2, r2, #8
 8000df8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e00:	003b      	movs	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000e12:	003b      	movs	r3, r7
 8000e14:	4a57      	ldr	r2, [pc, #348]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000e16:	0019      	movs	r1, r3
 8000e18:	0010      	movs	r0, r2
 8000e1a:	f009 f8f9 	bl	800a010 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000e1e:	003b      	movs	r3, r7
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e24:	003b      	movs	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e2a:	003b      	movs	r3, r7
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000e30:	003a      	movs	r2, r7
 8000e32:	23a0      	movs	r3, #160	; 0xa0
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f009 f8e9 	bl	800a010 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2202      	movs	r2, #2
 8000e42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e44:	003b      	movs	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000e50:	003a      	movs	r2, r7
 8000e52:	23a0      	movs	r3, #160	; 0xa0
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f009 f8d9 	bl	800a010 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2210      	movs	r2, #16
 8000e62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e64:	003b      	movs	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000e70:	003a      	movs	r2, r7
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f009 f8c9 	bl	800a010 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2240      	movs	r2, #64	; 0x40
 8000e82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e84:	003b      	movs	r3, r7
 8000e86:	2201      	movs	r2, #1
 8000e88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e90:	003b      	movs	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e96:	003b      	movs	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	003a      	movs	r2, r7
 8000e9e:	23a0      	movs	r3, #160	; 0xa0
 8000ea0:	05db      	lsls	r3, r3, #23
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f009 f8b3 	bl	800a010 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000eaa:	003b      	movs	r3, r7
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2203      	movs	r2, #3
 8000eba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ec2:	003b      	movs	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	003a      	movs	r2, r7
 8000eca:	23a0      	movs	r3, #160	; 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f009 f89d 	bl	800a010 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2240      	movs	r2, #64	; 0x40
 8000eda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2201      	movs	r2, #1
 8000ee0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ee8:	003b      	movs	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	003b      	movs	r3, r7
 8000ef6:	4a1f      	ldr	r2, [pc, #124]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000ef8:	0019      	movs	r1, r3
 8000efa:	0010      	movs	r0, r2
 8000efc:	f009 f888 	bl	800a010 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8000f00:	003b      	movs	r3, r7
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f08:	003b      	movs	r3, r7
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2203      	movs	r2, #3
 8000f12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f14:	003b      	movs	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f1a:	003b      	movs	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8000f20:	003a      	movs	r2, r7
 8000f22:	23a0      	movs	r3, #160	; 0xa0
 8000f24:	05db      	lsls	r3, r3, #23
 8000f26:	0011      	movs	r1, r2
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f009 f871 	bl	800a010 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8000f2e:	003b      	movs	r3, r7
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	0152      	lsls	r2, r2, #5
 8000f34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f36:	003b      	movs	r3, r7
 8000f38:	2201      	movs	r2, #1
 8000f3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	003b      	movs	r3, r7
 8000f3e:	2203      	movs	r2, #3
 8000f40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f42:	003b      	movs	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f48:	003b      	movs	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	003a      	movs	r2, r7
 8000f50:	23a0      	movs	r3, #160	; 0xa0
 8000f52:	05db      	lsls	r3, r3, #23
 8000f54:	0011      	movs	r1, r2
 8000f56:	0018      	movs	r0, r3
 8000f58:	f009 f85a 	bl	800a010 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	031b      	lsls	r3, r3, #12
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff fa91 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b006      	add	sp, #24
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	50000400 	.word	0x50000400
 8000f74:	50000800 	.word	0x50000800

08000f78 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <USART2_RX_Callback+0x60>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff fa74 	bl	800046c <LL_USART_ReceiveData9>
 8000f84:	0003      	movs	r3, r0
 8000f86:	001a      	movs	r2, r3
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <USART2_RX_Callback+0x64>)
 8000f8a:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <USART2_RX_Callback+0x60>)
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	05db      	lsls	r3, r3, #23
 8000f94:	0ddb      	lsrs	r3, r3, #23
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <USART2_RX_Callback+0x64>)
 8000f9a:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <USART2_RX_Callback+0x68>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <USART2_RX_Callback+0x64>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	2bff      	cmp	r3, #255	; 0xff
 8000fa8:	d90a      	bls.n	8000fc0 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <USART2_RX_Callback+0x64>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <USART2_RX_Callback+0x6c>)
 8000fb2:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <USART2_RX_Callback+0x70>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <USART2_RX_Callback+0x74>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <USART2_RX_Callback+0x74>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d104      	bne.n	8000fd2 <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <USART2_RX_Callback+0x64>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f000 f869 	bl	80010a4 <cmdReceive>
  }
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40004400 	.word	0x40004400
 8000fdc:	200035da 	.word	0x200035da
 8000fe0:	20003160 	.word	0x20003160
 8000fe4:	200055e0 	.word	0x200055e0
 8000fe8:	20003162 	.word	0x20003162
 8000fec:	20003161 	.word	0x20003161

08000ff0 <HAL_SPI_RxCpltCallback>:
	GPIOA->ODR &= ~(1 << 7);	// reset dc
	HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,len);
}
//==========================================================
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  	GPIOC->ODR |= 1 << 15; // set cs
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <HAL_SPI_RxCpltCallback+0x40>)
 8000ffa:	695a      	ldr	r2, [r3, #20]
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_SPI_RxCpltCallback+0x40>)
 8000ffe:	2180      	movs	r1, #128	; 0x80
 8001000:	0209      	lsls	r1, r1, #8
 8001002:	430a      	orrs	r2, r1
 8001004:	615a      	str	r2, [r3, #20]

//  	sendBuffer2WEO(MEM_Buffer, len);

	GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001006:	23a0      	movs	r3, #160	; 0xa0
 8001008:	05db      	lsls	r3, r3, #23
 800100a:	695a      	ldr	r2, [r3, #20]
 800100c:	23a0      	movs	r3, #160	; 0xa0
 800100e:	05db      	lsls	r3, r3, #23
 8001010:	2140      	movs	r1, #64	; 0x40
 8001012:	438a      	bics	r2, r1
 8001014:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 7;	// set dc
 8001016:	23a0      	movs	r3, #160	; 0xa0
 8001018:	05db      	lsls	r3, r3, #23
 800101a:	695a      	ldr	r2, [r3, #20]
 800101c:	23a0      	movs	r3, #160	; 0xa0
 800101e:	05db      	lsls	r3, r3, #23
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	430a      	orrs	r2, r1
 8001024:	615a      	str	r2, [r3, #20]
}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	50000800 	.word	0x50000800

08001034 <HAL_USART_TxCpltCallback>:
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  	GPIOA->ODR |= 1 << 11;	//set test 1
 800103c:	23a0      	movs	r3, #160	; 0xa0
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	695a      	ldr	r2, [r3, #20]
 8001042:	23a0      	movs	r3, #160	; 0xa0
 8001044:	05db      	lsls	r3, r3, #23
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	0109      	lsls	r1, r1, #4
 800104a:	430a      	orrs	r2, r1
 800104c:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 11);	//reset test 1
 800104e:	23a0      	movs	r3, #160	; 0xa0
 8001050:	05db      	lsls	r3, r3, #23
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	23a0      	movs	r3, #160	; 0xa0
 8001056:	05db      	lsls	r3, r3, #23
 8001058:	490f      	ldr	r1, [pc, #60]	; (8001098 <HAL_USART_TxCpltCallback+0x64>)
 800105a:	400a      	ands	r2, r1
 800105c:	615a      	str	r2, [r3, #20]

	GPIOA->ODR &= ~(1 << 7);	//reset dc
 800105e:	23a0      	movs	r3, #160	; 0xa0
 8001060:	05db      	lsls	r3, r3, #23
 8001062:	695a      	ldr	r2, [r3, #20]
 8001064:	23a0      	movs	r3, #160	; 0xa0
 8001066:	05db      	lsls	r3, r3, #23
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	438a      	bics	r2, r1
 800106c:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 800106e:	23a0      	movs	r3, #160	; 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	695a      	ldr	r2, [r3, #20]
 8001074:	23a0      	movs	r3, #160	; 0xa0
 8001076:	05db      	lsls	r3, r3, #23
 8001078:	2140      	movs	r1, #64	; 0x40
 800107a:	430a      	orrs	r2, r1
 800107c:	615a      	str	r2, [r3, #20]

	GPIOC->ODR |= 1 << 6;	//set BF
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_USART_TxCpltCallback+0x68>)
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_USART_TxCpltCallback+0x68>)
 8001084:	2140      	movs	r1, #64	; 0x40
 8001086:	430a      	orrs	r2, r1
 8001088:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_USART_TxCpltCallback+0x6c>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b002      	add	sp, #8
 8001096:	bd80      	pop	{r7, pc}
 8001098:	fffff7ff 	.word	0xfffff7ff
 800109c:	50000800 	.word	0x50000800
 80010a0:	2000345a 	.word	0x2000345a

080010a4 <cmdReceive>:
//==============================================================
	void cmdReceive (uint16_t dt1)
	{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	0002      	movs	r2, r0
 80010ac:	1dbb      	adds	r3, r7, #6
 80010ae:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 80010b0:	230f      	movs	r3, #15
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <cmdReceive+0xc4>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0fb      	beq.n	80010ba <cmdReceive+0x16>
	  ByteReceived=0;
 80010c2:	4b29      	ldr	r3, [pc, #164]	; (8001168 <cmdReceive+0xc4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 80010c8:	4b28      	ldr	r3, [pc, #160]	; (800116c <cmdReceive+0xc8>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	001a      	movs	r2, r3
 80010ce:	1dbb      	adds	r3, r7, #6
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	b2d9      	uxtb	r1, r3
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <cmdReceive+0xcc>)
 80010d6:	5499      	strb	r1, [r3, r2]
	  ind++;
 80010d8:	4b24      	ldr	r3, [pc, #144]	; (800116c <cmdReceive+0xc8>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	3301      	adds	r3, #1
 80010de:	b29a      	uxth	r2, r3
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <cmdReceive+0xc8>)
 80010e2:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <cmdReceive+0xc8>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d033      	beq.n	8001154 <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <cmdReceive+0xc8>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	001a      	movs	r2, r3
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <cmdReceive+0xcc>)
 80010f4:	785b      	ldrb	r3, [r3, #1]
 80010f6:	3301      	adds	r3, #1
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dd2b      	ble.n	8001154 <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 80010fc:	230f      	movs	r3, #15
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e00f      	b.n	8001126 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 8001106:	210f      	movs	r1, #15
 8001108:	187b      	adds	r3, r7, r1
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4a18      	ldr	r2, [pc, #96]	; (8001170 <cmdReceive+0xcc>)
 800110e:	5cd2      	ldrb	r2, [r2, r3]
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <cmdReceive+0xd0>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	18d3      	adds	r3, r2, r3
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <cmdReceive+0xd0>)
 800111a:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 800111c:	187b      	adds	r3, r7, r1
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	187b      	adds	r3, r7, r1
 8001122:	3201      	adds	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <cmdReceive+0xcc>)
 8001128:	785b      	ldrb	r3, [r3, #1]
 800112a:	1c5a      	adds	r2, r3, #1
 800112c:	210f      	movs	r1, #15
 800112e:	187b      	adds	r3, r7, r1
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	dae7      	bge.n	8001106 <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <cmdReceive+0xd0>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10a      	bne.n	8001154 <cmdReceive+0xb0>
 800113e:	187b      	adds	r3, r7, r1
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <cmdReceive+0xcc>)
 8001144:	785b      	ldrb	r3, [r3, #1]
 8001146:	3302      	adds	r3, #2
 8001148:	429a      	cmp	r2, r3
 800114a:	d103      	bne.n	8001154 <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <cmdReceive+0xcc>)
 800114e:	0018      	movs	r0, r3
 8001150:	f000 fa60 	bl	8001614 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <cmdReceive+0xd4>)
 8001156:	6a1a      	ldr	r2, [r3, #32]
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <cmdReceive+0xd4>)
 800115a:	2108      	movs	r1, #8
 800115c:	430a      	orrs	r2, r1
 800115e:	621a      	str	r2, [r3, #32]
	}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b004      	add	sp, #16
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20003160 	.word	0x20003160
 800116c:	20003162 	.word	0x20003162
 8001170:	200055e0 	.word	0x200055e0
 8001174:	20003164 	.word	0x20003164
 8001178:	40004400 	.word	0x40004400

0800117c <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	0002      	movs	r2, r0
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
 8001188:	1df9      	adds	r1, r7, #7
 800118a:	4804      	ldr	r0, [pc, #16]	; (800119c <USART_AS_SPI_sendCMD+0x20>)
 800118c:	230a      	movs	r3, #10
 800118e:	2201      	movs	r2, #1
 8001190:	f007 ffa0 	bl	80090d4 <HAL_USART_Transmit>
		}
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b002      	add	sp, #8
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20003390 	.word	0x20003390

080011a0 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
	}
	void weoInit(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 80011a4:	4b32      	ldr	r3, [pc, #200]	; (8001270 <weoInit+0xd0>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b31      	ldr	r3, [pc, #196]	; (8001270 <weoInit+0xd0>)
 80011aa:	2101      	movs	r1, #1
 80011ac:	438a      	bics	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 80011b0:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <weoInit+0xd0>)
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <weoInit+0xd0>)
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	0309      	lsls	r1, r1, #12
 80011ba:	430a      	orrs	r2, r1
 80011bc:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 80011be:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <weoInit+0xd0>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <weoInit+0xd0>)
 80011c4:	2101      	movs	r1, #1
 80011c6:	430a      	orrs	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f001 ff5a 	bl	8003084 <HAL_Delay>
		HAL_Delay(1);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f001 ff57 	bl	8003084 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011d6:	4b27      	ldr	r3, [pc, #156]	; (8001274 <weoInit+0xd4>)
 80011d8:	2100      	movs	r1, #0
 80011da:	0018      	movs	r0, r3
 80011dc:	f006 fec6 	bl	8007f6c <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f001 ff4f 	bl	8003084 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 80011e6:	23a0      	movs	r3, #160	; 0xa0
 80011e8:	05db      	lsls	r3, r3, #23
 80011ea:	695a      	ldr	r2, [r3, #20]
 80011ec:	23a0      	movs	r3, #160	; 0xa0
 80011ee:	05db      	lsls	r3, r3, #23
 80011f0:	2140      	movs	r1, #64	; 0x40
 80011f2:	438a      	bics	r2, r1
 80011f4:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 80011f6:	23a0      	movs	r3, #160	; 0xa0
 80011f8:	05db      	lsls	r3, r3, #23
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	23a0      	movs	r3, #160	; 0xa0
 80011fe:	05db      	lsls	r3, r3, #23
 8001200:	2180      	movs	r1, #128	; 0x80
 8001202:	438a      	bics	r2, r1
 8001204:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 8001206:	20af      	movs	r0, #175	; 0xaf
 8001208:	f7ff ffb8 	bl	800117c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 800120c:	20a0      	movs	r0, #160	; 0xa0
 800120e:	f7ff ffb5 	bl	800117c <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 8001212:	2051      	movs	r0, #81	; 0x51
 8001214:	f7ff ffb2 	bl	800117c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8001218:	2081      	movs	r0, #129	; 0x81
 800121a:	f7ff ffaf 	bl	800117c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 800121e:	20ff      	movs	r0, #255	; 0xff
 8001220:	f7ff ffac 	bl	800117c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 8001224:	20a1      	movs	r0, #161	; 0xa1
 8001226:	f7ff ffa9 	bl	800117c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff ffa6 	bl	800117c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 8001230:	20a2      	movs	r0, #162	; 0xa2
 8001232:	f7ff ffa3 	bl	800117c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001236:	2000      	movs	r0, #0
 8001238:	f7ff ffa0 	bl	800117c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 800123c:	20a8      	movs	r0, #168	; 0xa8
 800123e:	f7ff ff9d 	bl	800117c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8001242:	207f      	movs	r0, #127	; 0x7f
 8001244:	f7ff ff9a 	bl	800117c <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 8001248:	23a0      	movs	r3, #160	; 0xa0
 800124a:	05db      	lsls	r3, r3, #23
 800124c:	695a      	ldr	r2, [r3, #20]
 800124e:	23a0      	movs	r3, #160	; 0xa0
 8001250:	05db      	lsls	r3, r3, #23
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	430a      	orrs	r2, r1
 8001256:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8001258:	23a0      	movs	r3, #160	; 0xa0
 800125a:	05db      	lsls	r3, r3, #23
 800125c:	695a      	ldr	r2, [r3, #20]
 800125e:	23a0      	movs	r3, #160	; 0xa0
 8001260:	05db      	lsls	r3, r3, #23
 8001262:	2140      	movs	r1, #64	; 0x40
 8001264:	430a      	orrs	r2, r1
 8001266:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	40004800 	.word	0x40004800
 8001274:	20003404 	.word	0x20003404

08001278 <weoClear>:
	void weoClear(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
		uint16_t i = 0;
 800127e:	1dbb      	adds	r3, r7, #6
 8001280:	2200      	movs	r2, #0
 8001282:	801a      	strh	r2, [r3, #0]

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001284:	23a0      	movs	r3, #160	; 0xa0
 8001286:	05db      	lsls	r3, r3, #23
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	23a0      	movs	r3, #160	; 0xa0
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	438a      	bics	r2, r1
 8001292:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001294:	23a0      	movs	r3, #160	; 0xa0
 8001296:	05db      	lsls	r3, r3, #23
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	23a0      	movs	r3, #160	; 0xa0
 800129c:	05db      	lsls	r3, r3, #23
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	438a      	bics	r2, r1
 80012a2:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80012a4:	2075      	movs	r0, #117	; 0x75
 80012a6:	f7ff ff69 	bl	800117c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff ff66 	bl	800117c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80012b0:	207f      	movs	r0, #127	; 0x7f
 80012b2:	f7ff ff63 	bl	800117c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80012b6:	2015      	movs	r0, #21
 80012b8:	f7ff ff60 	bl	800117c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff ff5d 	bl	800117c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80012c2:	207f      	movs	r0, #127	; 0x7f
 80012c4:	f7ff ff5a 	bl	800117c <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80012c8:	23a0      	movs	r3, #160	; 0xa0
 80012ca:	05db      	lsls	r3, r3, #23
 80012cc:	695a      	ldr	r2, [r3, #20]
 80012ce:	23a0      	movs	r3, #160	; 0xa0
 80012d0:	05db      	lsls	r3, r3, #23
 80012d2:	2140      	movs	r1, #64	; 0x40
 80012d4:	438a      	bics	r2, r1
 80012d6:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 80012d8:	23a0      	movs	r3, #160	; 0xa0
 80012da:	05db      	lsls	r3, r3, #23
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	23a0      	movs	r3, #160	; 0xa0
 80012e0:	05db      	lsls	r3, r3, #23
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	430a      	orrs	r2, r1
 80012e6:	615a      	str	r2, [r3, #20]
					for (i = 0; i < 8192;i++) {	//fullScreen + small reserve
 80012e8:	1dbb      	adds	r3, r7, #6
 80012ea:	2200      	movs	r2, #0
 80012ec:	801a      	strh	r2, [r3, #0]
 80012ee:	e00d      	b.n	800130c <weoClear+0x94>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <weoClear+0xc8>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	2280      	movs	r2, #128	; 0x80
 80012f8:	4013      	ands	r3, r2
 80012fa:	d0fa      	beq.n	80012f2 <weoClear+0x7a>
						USART3->TDR = 0x00;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <weoClear+0xc8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i < 8192;i++) {	//fullScreen + small reserve
 8001302:	1dbb      	adds	r3, r7, #6
 8001304:	881a      	ldrh	r2, [r3, #0]
 8001306:	1dbb      	adds	r3, r7, #6
 8001308:	3201      	adds	r2, #1
 800130a:	801a      	strh	r2, [r3, #0]
 800130c:	1dbb      	adds	r3, r7, #6
 800130e:	881a      	ldrh	r2, [r3, #0]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	019b      	lsls	r3, r3, #6
 8001314:	429a      	cmp	r2, r3
 8001316:	d3eb      	bcc.n	80012f0 <weoClear+0x78>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001318:	23a0      	movs	r3, #160	; 0xa0
 800131a:	05db      	lsls	r3, r3, #23
 800131c:	695a      	ldr	r2, [r3, #20]
 800131e:	23a0      	movs	r3, #160	; 0xa0
 8001320:	05db      	lsls	r3, r3, #23
 8001322:	2180      	movs	r1, #128	; 0x80
 8001324:	438a      	bics	r2, r1
 8001326:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8001328:	23a0      	movs	r3, #160	; 0xa0
 800132a:	05db      	lsls	r3, r3, #23
 800132c:	695a      	ldr	r2, [r3, #20]
 800132e:	23a0      	movs	r3, #160	; 0xa0
 8001330:	05db      	lsls	r3, r3, #23
 8001332:	2140      	movs	r1, #64	; 0x40
 8001334:	430a      	orrs	r2, r1
 8001336:	615a      	str	r2, [r3, #20]
	}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40004800 	.word	0x40004800

08001344 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 8001344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	0005      	movs	r5, r0
 800134c:	000c      	movs	r4, r1
 800134e:	0010      	movs	r0, r2
 8001350:	0019      	movs	r1, r3
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	1c2a      	adds	r2, r5, #0
 8001356:	701a      	strb	r2, [r3, #0]
 8001358:	1dbb      	adds	r3, r7, #6
 800135a:	1c22      	adds	r2, r4, #0
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	1d7b      	adds	r3, r7, #5
 8001360:	1c02      	adds	r2, r0, #0
 8001362:	701a      	strb	r2, [r3, #0]
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	1c0a      	adds	r2, r1, #0
 8001368:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 800136a:	240e      	movs	r4, #14
 800136c:	193b      	adds	r3, r7, r4
 800136e:	2200      	movs	r2, #0
 8001370:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b25b      	sxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	da00      	bge.n	800137e <weoDrawRectangleFilled+0x3a>
 800137c:	e0bc      	b.n	80014f8 <weoDrawRectangleFilled+0x1b4>
 800137e:	1dbb      	adds	r3, r7, #6
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b25b      	sxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	da00      	bge.n	800138a <weoDrawRectangleFilled+0x46>
 8001388:	e0b6      	b.n	80014f8 <weoDrawRectangleFilled+0x1b4>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 800138a:	1d7b      	adds	r3, r7, #5
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b25b      	sxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	da00      	bge.n	8001396 <weoDrawRectangleFilled+0x52>
 8001394:	e0b0      	b.n	80014f8 <weoDrawRectangleFilled+0x1b4>
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b25b      	sxtb	r3, r3
 800139c:	2b00      	cmp	r3, #0
 800139e:	da00      	bge.n	80013a2 <weoDrawRectangleFilled+0x5e>
 80013a0:	e0aa      	b.n	80014f8 <weoDrawRectangleFilled+0x1b4>
				return;
			}


			start_x_New=start_x;
 80013a2:	250d      	movs	r5, #13
 80013a4:	197b      	adds	r3, r7, r5
 80013a6:	1dfa      	adds	r2, r7, #7
 80013a8:	7812      	ldrb	r2, [r2, #0]
 80013aa:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 80013ac:	260c      	movs	r6, #12
 80013ae:	19bb      	adds	r3, r7, r6
 80013b0:	1d3a      	adds	r2, r7, #4
 80013b2:	7812      	ldrb	r2, [r2, #0]
 80013b4:	217f      	movs	r1, #127	; 0x7f
 80013b6:	1a8a      	subs	r2, r1, r2
 80013b8:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80013ba:	230b      	movs	r3, #11
 80013bc:	18fb      	adds	r3, r7, r3
 80013be:	1d7a      	adds	r2, r7, #5
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 80013c4:	220a      	movs	r2, #10
 80013c6:	18bb      	adds	r3, r7, r2
 80013c8:	1dba      	adds	r2, r7, #6
 80013ca:	7812      	ldrb	r2, [r2, #0]
 80013cc:	217f      	movs	r1, #127	; 0x7f
 80013ce:	1a8a      	subs	r2, r1, r2
 80013d0:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80013d2:	23a0      	movs	r3, #160	; 0xa0
 80013d4:	05db      	lsls	r3, r3, #23
 80013d6:	695a      	ldr	r2, [r3, #20]
 80013d8:	23a0      	movs	r3, #160	; 0xa0
 80013da:	05db      	lsls	r3, r3, #23
 80013dc:	2140      	movs	r1, #64	; 0x40
 80013de:	438a      	bics	r2, r1
 80013e0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80013e2:	23a0      	movs	r3, #160	; 0xa0
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	23a0      	movs	r3, #160	; 0xa0
 80013ea:	05db      	lsls	r3, r3, #23
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	438a      	bics	r2, r1
 80013f0:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80013f2:	2075      	movs	r0, #117	; 0x75
 80013f4:	f7ff fec2 	bl	800117c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 80013f8:	197b      	adds	r3, r7, r5
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff febd 	bl	800117c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8001402:	230b      	movs	r3, #11
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	0018      	movs	r0, r3
 800140a:	f7ff feb7 	bl	800117c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800140e:	2015      	movs	r0, #21
 8001410:	f7ff feb4 	bl	800117c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001414:	19bb      	adds	r3, r7, r6
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	085b      	lsrs	r3, r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff fead 	bl	800117c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 8001422:	220a      	movs	r2, #10
 8001424:	18bb      	adds	r3, r7, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	085b      	lsrs	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	0018      	movs	r0, r3
 800142e:	f7ff fea5 	bl	800117c <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 8001432:	23a0      	movs	r3, #160	; 0xa0
 8001434:	05db      	lsls	r3, r3, #23
 8001436:	695a      	ldr	r2, [r3, #20]
 8001438:	23a0      	movs	r3, #160	; 0xa0
 800143a:	05db      	lsls	r3, r3, #23
 800143c:	2180      	movs	r1, #128	; 0x80
 800143e:	430a      	orrs	r2, r1
 8001440:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001442:	23a0      	movs	r3, #160	; 0xa0
 8001444:	05db      	lsls	r3, r3, #23
 8001446:	695a      	ldr	r2, [r3, #20]
 8001448:	23a0      	movs	r3, #160	; 0xa0
 800144a:	05db      	lsls	r3, r3, #23
 800144c:	2140      	movs	r1, #64	; 0x40
 800144e:	430a      	orrs	r2, r1
 8001450:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001452:	23a0      	movs	r3, #160	; 0xa0
 8001454:	05db      	lsls	r3, r3, #23
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	23a0      	movs	r3, #160	; 0xa0
 800145a:	05db      	lsls	r3, r3, #23
 800145c:	2140      	movs	r1, #64	; 0x40
 800145e:	438a      	bics	r2, r1
 8001460:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 8001462:	23a0      	movs	r3, #160	; 0xa0
 8001464:	05db      	lsls	r3, r3, #23
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	23a0      	movs	r3, #160	; 0xa0
 800146a:	05db      	lsls	r3, r3, #23
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	430a      	orrs	r2, r1
 8001470:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 8001472:	193b      	adds	r3, r7, r4
 8001474:	2200      	movs	r2, #0
 8001476:	801a      	strh	r2, [r3, #0]
 8001478:	e012      	b.n	80014a0 <weoDrawRectangleFilled+0x15c>
				while(!(USART3->ISR & USART_ISR_TXE)){};
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	4b20      	ldr	r3, [pc, #128]	; (8001500 <weoDrawRectangleFilled+0x1bc>)
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	4013      	ands	r3, r2
 8001484:	d0fa      	beq.n	800147c <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 8001486:	210e      	movs	r1, #14
 8001488:	187b      	adds	r3, r7, r1
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800148e:	18d3      	adds	r3, r2, r3
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <weoDrawRectangleFilled+0x1bc>)
 8001494:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 8001496:	187b      	adds	r3, r7, r1
 8001498:	881a      	ldrh	r2, [r3, #0]
 800149a:	187b      	adds	r3, r7, r1
 800149c:	3201      	adds	r2, #1
 800149e:	801a      	strh	r2, [r3, #0]
 80014a0:	230e      	movs	r3, #14
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	881a      	ldrh	r2, [r3, #0]
 80014a6:	230b      	movs	r3, #11
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	7819      	ldrb	r1, [r3, #0]
 80014ac:	230d      	movs	r3, #13
 80014ae:	18fb      	adds	r3, r7, r3
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	1acb      	subs	r3, r1, r3
 80014b4:	3301      	adds	r3, #1
 80014b6:	210a      	movs	r1, #10
 80014b8:	1879      	adds	r1, r7, r1
 80014ba:	7809      	ldrb	r1, [r1, #0]
 80014bc:	0849      	lsrs	r1, r1, #1
 80014be:	b2c9      	uxtb	r1, r1
 80014c0:	0008      	movs	r0, r1
 80014c2:	210c      	movs	r1, #12
 80014c4:	1879      	adds	r1, r7, r1
 80014c6:	7809      	ldrb	r1, [r1, #0]
 80014c8:	0849      	lsrs	r1, r1, #1
 80014ca:	b2c9      	uxtb	r1, r1
 80014cc:	1a41      	subs	r1, r0, r1
 80014ce:	3101      	adds	r1, #1
 80014d0:	434b      	muls	r3, r1
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dbd1      	blt.n	800147a <weoDrawRectangleFilled+0x136>
			}
			GPIOA->ODR &= ~(1 << 7);	//reset dc
 80014d6:	23a0      	movs	r3, #160	; 0xa0
 80014d8:	05db      	lsls	r3, r3, #23
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	23a0      	movs	r3, #160	; 0xa0
 80014de:	05db      	lsls	r3, r3, #23
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	438a      	bics	r2, r1
 80014e4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80014e6:	23a0      	movs	r3, #160	; 0xa0
 80014e8:	05db      	lsls	r3, r3, #23
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	23a0      	movs	r3, #160	; 0xa0
 80014ee:	05db      	lsls	r3, r3, #23
 80014f0:	2140      	movs	r1, #64	; 0x40
 80014f2:	430a      	orrs	r2, r1
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	e000      	b.n	80014fa <weoDrawRectangleFilled+0x1b6>
				return;
 80014f8:	46c0      	nop			; (mov r8, r8)
		}
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b005      	add	sp, #20
 80014fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001500:	40004800 	.word	0x40004800

08001504 <weoDrawRectangleInit>:
//========================================================================================================================
	void weoDrawRectangleInit(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y) {
 8001504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	0005      	movs	r5, r0
 800150c:	000c      	movs	r4, r1
 800150e:	0010      	movs	r0, r2
 8001510:	0019      	movs	r1, r3
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	1c2a      	adds	r2, r5, #0
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	1dbb      	adds	r3, r7, #6
 800151a:	1c22      	adds	r2, r4, #0
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	1d7b      	adds	r3, r7, #5
 8001520:	1c02      	adds	r2, r0, #0
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	1c0a      	adds	r2, r1, #0
 8001528:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 800152a:	230e      	movs	r3, #14
 800152c:	18fb      	adds	r3, r7, r3
 800152e:	2200      	movs	r2, #0
 8001530:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b25b      	sxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	db66      	blt.n	800160a <weoDrawRectangleInit+0x106>
 800153c:	1dbb      	adds	r3, r7, #6
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	b25b      	sxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	db61      	blt.n	800160a <weoDrawRectangleInit+0x106>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8001546:	1d7b      	adds	r3, r7, #5
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b25b      	sxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	db5c      	blt.n	800160a <weoDrawRectangleInit+0x106>
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b25b      	sxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	db57      	blt.n	800160a <weoDrawRectangleInit+0x106>
				return;
			}
			start_x_New=start_x;
 800155a:	240d      	movs	r4, #13
 800155c:	193b      	adds	r3, r7, r4
 800155e:	1dfa      	adds	r2, r7, #7
 8001560:	7812      	ldrb	r2, [r2, #0]
 8001562:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001564:	250c      	movs	r5, #12
 8001566:	197b      	adds	r3, r7, r5
 8001568:	1d3a      	adds	r2, r7, #4
 800156a:	7812      	ldrb	r2, [r2, #0]
 800156c:	217f      	movs	r1, #127	; 0x7f
 800156e:	1a8a      	subs	r2, r1, r2
 8001570:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8001572:	260b      	movs	r6, #11
 8001574:	19bb      	adds	r3, r7, r6
 8001576:	1d7a      	adds	r2, r7, #5
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 800157c:	230a      	movs	r3, #10
 800157e:	18fb      	adds	r3, r7, r3
 8001580:	1dba      	adds	r2, r7, #6
 8001582:	7812      	ldrb	r2, [r2, #0]
 8001584:	217f      	movs	r1, #127	; 0x7f
 8001586:	1a8a      	subs	r2, r1, r2
 8001588:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800158a:	23a0      	movs	r3, #160	; 0xa0
 800158c:	05db      	lsls	r3, r3, #23
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	23a0      	movs	r3, #160	; 0xa0
 8001592:	05db      	lsls	r3, r3, #23
 8001594:	2140      	movs	r1, #64	; 0x40
 8001596:	438a      	bics	r2, r1
 8001598:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800159a:	23a0      	movs	r3, #160	; 0xa0
 800159c:	05db      	lsls	r3, r3, #23
 800159e:	695a      	ldr	r2, [r3, #20]
 80015a0:	23a0      	movs	r3, #160	; 0xa0
 80015a2:	05db      	lsls	r3, r3, #23
 80015a4:	2180      	movs	r1, #128	; 0x80
 80015a6:	438a      	bics	r2, r1
 80015a8:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80015aa:	2075      	movs	r0, #117	; 0x75
 80015ac:	f7ff fde6 	bl	800117c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 80015b0:	193b      	adds	r3, r7, r4
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff fde1 	bl	800117c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 80015ba:	19bb      	adds	r3, r7, r6
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	0018      	movs	r0, r3
 80015c0:	f7ff fddc 	bl	800117c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80015c4:	2015      	movs	r0, #21
 80015c6:	f7ff fdd9 	bl	800117c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 80015ca:	197b      	adds	r3, r7, r5
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	085b      	lsrs	r3, r3, #1
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	0018      	movs	r0, r3
 80015d4:	f7ff fdd2 	bl	800117c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80015d8:	230a      	movs	r3, #10
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	085b      	lsrs	r3, r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	0018      	movs	r0, r3
 80015e4:	f7ff fdca 	bl	800117c <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 80015e8:	23a0      	movs	r3, #160	; 0xa0
 80015ea:	05db      	lsls	r3, r3, #23
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	23a0      	movs	r3, #160	; 0xa0
 80015f0:	05db      	lsls	r3, r3, #23
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	430a      	orrs	r2, r1
 80015f6:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80015f8:	23a0      	movs	r3, #160	; 0xa0
 80015fa:	05db      	lsls	r3, r3, #23
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	23a0      	movs	r3, #160	; 0xa0
 8001600:	05db      	lsls	r3, r3, #23
 8001602:	2140      	movs	r1, #64	; 0x40
 8001604:	430a      	orrs	r2, r1
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	e000      	b.n	800160c <weoDrawRectangleInit+0x108>
				return;
 800160a:	46c0      	nop			; (mov r8, r8)
		}
 800160c:	46bd      	mov	sp, r7
 800160e:	b005      	add	sp, #20
 8001610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001614 <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 800161c:	210f      	movs	r1, #15
 800161e:	187b      	adds	r3, r7, r1
 8001620:	22ff      	movs	r2, #255	; 0xff
 8001622:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 8001624:	230d      	movs	r3, #13
 8001626:	18fb      	adds	r3, r7, r3
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 800162c:	230a      	movs	r3, #10
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	2200      	movs	r2, #0
 8001632:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 8001634:	4bc7      	ldr	r3, [pc, #796]	; (8001954 <answer2CPU+0x340>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
		ans[0] = cmd[0]|0x80;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	4252      	negs	r2, r2
 8001642:	4313      	orrs	r3, r2
 8001644:	b2db      	uxtb	r3, r3
 8001646:	b29a      	uxth	r2, r3
 8001648:	4bc3      	ldr	r3, [pc, #780]	; (8001958 <answer2CPU+0x344>)
 800164a:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b0f      	cmp	r3, #15
 8001652:	d800      	bhi.n	8001656 <answer2CPU+0x42>
 8001654:	e14f      	b.n	80018f6 <answer2CPU+0x2e2>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b15      	cmp	r3, #21
 800165c:	d900      	bls.n	8001660 <answer2CPU+0x4c>
 800165e:	e14a      	b.n	80018f6 <answer2CPU+0x2e2>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 8001660:	23a0      	movs	r3, #160	; 0xa0
 8001662:	05db      	lsls	r3, r3, #23
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	2201      	movs	r2, #1
 8001668:	4013      	ands	r3, r2
 800166a:	d105      	bne.n	8001678 <answer2CPU+0x64>
					keyboard &= 0b11111110;
 800166c:	187b      	adds	r3, r7, r1
 800166e:	187a      	adds	r2, r7, r1
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	2101      	movs	r1, #1
 8001674:	438a      	bics	r2, r1
 8001676:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 8001678:	23a0      	movs	r3, #160	; 0xa0
 800167a:	05db      	lsls	r3, r3, #23
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	d106      	bne.n	8001692 <answer2CPU+0x7e>
					keyboard &= 0b11111101;
 8001684:	220f      	movs	r2, #15
 8001686:	18bb      	adds	r3, r7, r2
 8001688:	18ba      	adds	r2, r7, r2
 800168a:	7812      	ldrb	r2, [r2, #0]
 800168c:	2102      	movs	r1, #2
 800168e:	438a      	bics	r2, r1
 8001690:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8001692:	23a0      	movs	r3, #160	; 0xa0
 8001694:	05db      	lsls	r3, r3, #23
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2210      	movs	r2, #16
 800169a:	4013      	ands	r3, r2
 800169c:	d106      	bne.n	80016ac <answer2CPU+0x98>
					keyboard &= 0b11111011;
 800169e:	220f      	movs	r2, #15
 80016a0:	18bb      	adds	r3, r7, r2
 80016a2:	18ba      	adds	r2, r7, r2
 80016a4:	7812      	ldrb	r2, [r2, #0]
 80016a6:	2104      	movs	r1, #4
 80016a8:	438a      	bics	r2, r1
 80016aa:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 80016ac:	23a0      	movs	r3, #160	; 0xa0
 80016ae:	05db      	lsls	r3, r3, #23
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	4013      	ands	r3, r2
 80016b8:	d106      	bne.n	80016c8 <answer2CPU+0xb4>
					keyboard &= 0b11110111;
 80016ba:	220f      	movs	r2, #15
 80016bc:	18bb      	adds	r3, r7, r2
 80016be:	18ba      	adds	r2, r7, r2
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	2108      	movs	r1, #8
 80016c4:	438a      	bics	r2, r1
 80016c6:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 80016c8:	23a0      	movs	r3, #160	; 0xa0
 80016ca:	05db      	lsls	r3, r3, #23
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	01db      	lsls	r3, r3, #7
 80016d2:	4013      	ands	r3, r2
 80016d4:	d106      	bne.n	80016e4 <answer2CPU+0xd0>
					keyboard &= 0b11101111;
 80016d6:	220f      	movs	r2, #15
 80016d8:	18bb      	adds	r3, r7, r2
 80016da:	18ba      	adds	r2, r7, r2
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	2110      	movs	r1, #16
 80016e0:	438a      	bics	r2, r1
 80016e2:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 80016e4:	210f      	movs	r1, #15
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	187a      	adds	r2, r7, r1
 80016ea:	7812      	ldrb	r2, [r2, #0]
 80016ec:	43d2      	mvns	r2, r2
 80016ee:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 80016f0:	2009      	movs	r0, #9
 80016f2:	183b      	adds	r3, r7, r0
 80016f4:	2204      	movs	r2, #4
 80016f6:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80016f8:	183b      	adds	r3, r7, r0
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	3b02      	subs	r3, #2
 8001700:	b29a      	uxth	r2, r3
 8001702:	4b95      	ldr	r3, [pc, #596]	; (8001958 <answer2CPU+0x344>)
 8001704:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 8001706:	187b      	adds	r3, r7, r1
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b29a      	uxth	r2, r3
 800170c:	4b92      	ldr	r3, [pc, #584]	; (8001958 <answer2CPU+0x344>)
 800170e:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 8001710:	230e      	movs	r3, #14
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
 8001718:	e011      	b.n	800173e <answer2CPU+0x12a>
					myCS = myCS + ans[i];
 800171a:	200e      	movs	r0, #14
 800171c:	183b      	adds	r3, r7, r0
 800171e:	781a      	ldrb	r2, [r3, #0]
 8001720:	4b8d      	ldr	r3, [pc, #564]	; (8001958 <answer2CPU+0x344>)
 8001722:	0052      	lsls	r2, r2, #1
 8001724:	5ad3      	ldrh	r3, [r2, r3]
 8001726:	b2d9      	uxtb	r1, r3
 8001728:	220d      	movs	r2, #13
 800172a:	18bb      	adds	r3, r7, r2
 800172c:	18ba      	adds	r2, r7, r2
 800172e:	7812      	ldrb	r2, [r2, #0]
 8001730:	188a      	adds	r2, r1, r2
 8001732:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001734:	183b      	adds	r3, r7, r0
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	183b      	adds	r3, r7, r0
 800173a:	3201      	adds	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	200e      	movs	r0, #14
 8001740:	183b      	adds	r3, r7, r0
 8001742:	781a      	ldrb	r2, [r3, #0]
 8001744:	2309      	movs	r3, #9
 8001746:	18fb      	adds	r3, r7, r3
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	3b01      	subs	r3, #1
 800174c:	429a      	cmp	r2, r3
 800174e:	dbe4      	blt.n	800171a <answer2CPU+0x106>
				}
				myCS = 0 - myCS;
 8001750:	210d      	movs	r1, #13
 8001752:	187b      	adds	r3, r7, r1
 8001754:	187a      	adds	r2, r7, r1
 8001756:	7812      	ldrb	r2, [r2, #0]
 8001758:	4252      	negs	r2, r2
 800175a:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 800175c:	187b      	adds	r3, r7, r1
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b29a      	uxth	r2, r3
 8001762:	4b7d      	ldr	r3, [pc, #500]	; (8001958 <answer2CPU+0x344>)
 8001764:	80da      	strh	r2, [r3, #6]
				i=0;
 8001766:	183b      	adds	r3, r7, r0
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 800176c:	46c0      	nop			; (mov r8, r8)
 800176e:	4b7b      	ldr	r3, [pc, #492]	; (800195c <answer2CPU+0x348>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	2280      	movs	r2, #128	; 0x80
 8001774:	4013      	ands	r3, r2
 8001776:	d0fa      	beq.n	800176e <answer2CPU+0x15a>
				USART2->TDR = ans[0]|0x0100;
 8001778:	4b77      	ldr	r3, [pc, #476]	; (8001958 <answer2CPU+0x344>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	2280      	movs	r2, #128	; 0x80
 800177e:	0052      	lsls	r2, r2, #1
 8001780:	4313      	orrs	r3, r2
 8001782:	b29a      	uxth	r2, r3
 8001784:	4b75      	ldr	r3, [pc, #468]	; (800195c <answer2CPU+0x348>)
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001788:	230e      	movs	r3, #14
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e013      	b.n	80017ba <answer2CPU+0x1a6>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	4b71      	ldr	r3, [pc, #452]	; (800195c <answer2CPU+0x348>)
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	4013      	ands	r3, r2
 800179c:	d0fa      	beq.n	8001794 <answer2CPU+0x180>
				    USART2->TDR = (uint8_t)ans[i];
 800179e:	210e      	movs	r1, #14
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	4b6c      	ldr	r3, [pc, #432]	; (8001958 <answer2CPU+0x344>)
 80017a6:	0052      	lsls	r2, r2, #1
 80017a8:	5ad3      	ldrh	r3, [r2, r3]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	4b6b      	ldr	r3, [pc, #428]	; (800195c <answer2CPU+0x348>)
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	187b      	adds	r3, r7, r1
 80017b6:	3201      	adds	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
 80017ba:	230e      	movs	r3, #14
 80017bc:	18fa      	adds	r2, r7, r3
 80017be:	2309      	movs	r3, #9
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	7812      	ldrb	r2, [r2, #0]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d3e3      	bcc.n	8001792 <answer2CPU+0x17e>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {             //Show full screen background;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b11      	cmp	r3, #17
 80017d0:	d109      	bne.n	80017e6 <answer2CPU+0x1d2>
					picNum = cmd[2];
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	789a      	ldrb	r2, [r3, #2]
 80017d6:	4b62      	ldr	r3, [pc, #392]	; (8001960 <answer2CPU+0x34c>)
 80017d8:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 80017da:	4b5e      	ldr	r3, [pc, #376]	; (8001954 <answer2CPU+0x340>)
 80017dc:	2211      	movs	r2, #17
 80017de:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80017e0:	4b60      	ldr	r3, [pc, #384]	; (8001964 <answer2CPU+0x350>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b12      	cmp	r3, #18
 80017ec:	d115      	bne.n	800181a <answer2CPU+0x206>
					imX = cmd[2];
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3302      	adds	r3, #2
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	001a      	movs	r2, r3
 80017f6:	4b5c      	ldr	r3, [pc, #368]	; (8001968 <answer2CPU+0x354>)
 80017f8:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3303      	adds	r3, #3
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	001a      	movs	r2, r3
 8001802:	4b5a      	ldr	r3, [pc, #360]	; (800196c <answer2CPU+0x358>)
 8001804:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	791a      	ldrb	r2, [r3, #4]
 800180a:	4b55      	ldr	r3, [pc, #340]	; (8001960 <answer2CPU+0x34c>)
 800180c:	701a      	strb	r2, [r3, #0]
//					showSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 800180e:	4b51      	ldr	r3, [pc, #324]	; (8001954 <answer2CPU+0x340>)
 8001810:	2212      	movs	r2, #18
 8001812:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001814:	4b53      	ldr	r3, [pc, #332]	; (8001964 <answer2CPU+0x350>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b13      	cmp	r3, #19
 8001820:	d134      	bne.n	800188c <answer2CPU+0x278>
					imX = cmd[2];
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3302      	adds	r3, #2
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	001a      	movs	r2, r3
 800182a:	4b4f      	ldr	r3, [pc, #316]	; (8001968 <answer2CPU+0x354>)
 800182c:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3303      	adds	r3, #3
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	001a      	movs	r2, r3
 8001836:	4b4d      	ldr	r3, [pc, #308]	; (800196c <answer2CPU+0x358>)
 8001838:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3301      	adds	r3, #1
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	3b03      	subs	r3, #3
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b4a      	ldr	r3, [pc, #296]	; (8001970 <answer2CPU+0x35c>)
 8001846:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001848:	230e      	movs	r3, #14
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
 8001850:	e00f      	b.n	8001872 <answer2CPU+0x25e>
					dataASCII[i] = cmd[i+4];
 8001852:	200e      	movs	r0, #14
 8001854:	183b      	adds	r3, r7, r0
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	3304      	adds	r3, #4
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	18d2      	adds	r2, r2, r3
 800185e:	183b      	adds	r3, r7, r0
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	7811      	ldrb	r1, [r2, #0]
 8001864:	4a43      	ldr	r2, [pc, #268]	; (8001974 <answer2CPU+0x360>)
 8001866:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001868:	183b      	adds	r3, r7, r0
 800186a:	781a      	ldrb	r2, [r3, #0]
 800186c:	183b      	adds	r3, r7, r0
 800186e:	3201      	adds	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <answer2CPU+0x35c>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	220e      	movs	r2, #14
 8001878:	18ba      	adds	r2, r7, r2
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d3e8      	bcc.n	8001852 <answer2CPU+0x23e>
				}
					cmd2Execute=0x13;
 8001880:	4b34      	ldr	r3, [pc, #208]	; (8001954 <answer2CPU+0x340>)
 8001882:	2213      	movs	r2, #19
 8001884:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001886:	4b37      	ldr	r3, [pc, #220]	; (8001964 <answer2CPU+0x350>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b14      	cmp	r3, #20
 8001892:	d10c      	bne.n	80018ae <answer2CPU+0x29a>
					numSound = cmd[3];
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	78da      	ldrb	r2, [r3, #3]
 8001898:	4b37      	ldr	r3, [pc, #220]	; (8001978 <answer2CPU+0x364>)
 800189a:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <answer2CPU+0x340>)
 800189e:	2214      	movs	r2, #20
 80018a0:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	22ff      	movs	r2, #255	; 0xff
 80018a6:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 80018a8:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <answer2CPU+0x350>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b15      	cmp	r3, #21
 80018b4:	d10d      	bne.n	80018d2 <answer2CPU+0x2be>
					volume = cmd[2];
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	789a      	ldrb	r2, [r3, #2]
 80018ba:	4b30      	ldr	r3, [pc, #192]	; (800197c <answer2CPU+0x368>)
 80018bc:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	78da      	ldrb	r2, [r3, #3]
 80018c2:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <answer2CPU+0x36c>)
 80018c4:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 80018c6:	4b23      	ldr	r3, [pc, #140]	; (8001954 <answer2CPU+0x340>)
 80018c8:	2215      	movs	r2, #21
 80018ca:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <answer2CPU+0x350>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b16      	cmp	r3, #22
 80018d8:	d10d      	bne.n	80018f6 <answer2CPU+0x2e2>
					volume = cmd[3];
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	78da      	ldrb	r2, [r3, #3]
 80018de:	4b27      	ldr	r3, [pc, #156]	; (800197c <answer2CPU+0x368>)
 80018e0:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	791a      	ldrb	r2, [r3, #4]
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <answer2CPU+0x36c>)
 80018e8:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <answer2CPU+0x340>)
 80018ec:	2216      	movs	r2, #22
 80018ee:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <answer2CPU+0x350>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d000      	beq.n	8001900 <answer2CPU+0x2ec>
 80018fe:	e099      	b.n	8001a34 <answer2CPU+0x420>
				myLength = 0x14; //20 bytes length answer
 8001900:	2109      	movs	r1, #9
 8001902:	187b      	adds	r3, r7, r1
 8001904:	2214      	movs	r2, #20
 8001906:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001908:	187b      	adds	r3, r7, r1
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	3b02      	subs	r3, #2
 8001910:	b29a      	uxth	r2, r3
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <answer2CPU+0x344>)
 8001914:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001916:	230e      	movs	r3, #14
 8001918:	18fb      	adds	r3, r7, r3
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	e010      	b.n	8001942 <answer2CPU+0x32e>
					ans[i + 2] = PCB_type[i];
 8001920:	200e      	movs	r0, #14
 8001922:	183b      	adds	r3, r7, r0
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	4a17      	ldr	r2, [pc, #92]	; (8001984 <answer2CPU+0x370>)
 8001928:	5cd1      	ldrb	r1, [r2, r3]
 800192a:	183b      	adds	r3, r7, r0
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	1c9a      	adds	r2, r3, #2
 8001930:	b289      	uxth	r1, r1
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <answer2CPU+0x344>)
 8001934:	0052      	lsls	r2, r2, #1
 8001936:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001938:	183b      	adds	r3, r7, r0
 800193a:	781a      	ldrb	r2, [r3, #0]
 800193c:	183b      	adds	r3, r7, r0
 800193e:	3201      	adds	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
 8001942:	220e      	movs	r2, #14
 8001944:	18bb      	adds	r3, r7, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b10      	cmp	r3, #16
 800194a:	d9e9      	bls.n	8001920 <answer2CPU+0x30c>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 800194c:	18bb      	adds	r3, r7, r2
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	e02b      	b.n	80019ac <answer2CPU+0x398>
 8001954:	2000345a 	.word	0x2000345a
 8001958:	2000349c 	.word	0x2000349c
 800195c:	40004400 	.word	0x40004400
 8001960:	20003459 	.word	0x20003459
 8001964:	200034b0 	.word	0x200034b0
 8001968:	200032f0 	.word	0x200032f0
 800196c:	20003384 	.word	0x20003384
 8001970:	20003499 	.word	0x20003499
 8001974:	200031a0 	.word	0x200031a0
 8001978:	20003519 	.word	0x20003519
 800197c:	200032ed 	.word	0x200032ed
 8001980:	200033f0 	.word	0x200033f0
 8001984:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 8001988:	200e      	movs	r0, #14
 800198a:	183b      	adds	r3, r7, r0
 800198c:	781a      	ldrb	r2, [r3, #0]
 800198e:	4bdb      	ldr	r3, [pc, #876]	; (8001cfc <answer2CPU+0x6e8>)
 8001990:	0052      	lsls	r2, r2, #1
 8001992:	5ad3      	ldrh	r3, [r2, r3]
 8001994:	b2d9      	uxtb	r1, r3
 8001996:	220d      	movs	r2, #13
 8001998:	18bb      	adds	r3, r7, r2
 800199a:	18ba      	adds	r2, r7, r2
 800199c:	7812      	ldrb	r2, [r2, #0]
 800199e:	188a      	adds	r2, r1, r2
 80019a0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 80019a2:	183b      	adds	r3, r7, r0
 80019a4:	781a      	ldrb	r2, [r3, #0]
 80019a6:	183b      	adds	r3, r7, r0
 80019a8:	3201      	adds	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
 80019ac:	230e      	movs	r3, #14
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	2009      	movs	r0, #9
 80019b4:	183b      	adds	r3, r7, r0
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	429a      	cmp	r2, r3
 80019bc:	dbe4      	blt.n	8001988 <answer2CPU+0x374>
				}
				myCS = 0 - myCS;
 80019be:	210d      	movs	r1, #13
 80019c0:	187b      	adds	r3, r7, r1
 80019c2:	187a      	adds	r2, r7, r1
 80019c4:	7812      	ldrb	r2, [r2, #0]
 80019c6:	4252      	negs	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 80019ca:	183b      	adds	r3, r7, r0
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	1e5a      	subs	r2, r3, #1
 80019d0:	187b      	adds	r3, r7, r1
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b299      	uxth	r1, r3
 80019d6:	4bc9      	ldr	r3, [pc, #804]	; (8001cfc <answer2CPU+0x6e8>)
 80019d8:	0052      	lsls	r2, r2, #1
 80019da:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	4bc8      	ldr	r3, [pc, #800]	; (8001d00 <answer2CPU+0x6ec>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	4013      	ands	r3, r2
 80019e6:	d0fa      	beq.n	80019de <answer2CPU+0x3ca>
				USART2->TDR = ans[0]|0x0100;
 80019e8:	4bc4      	ldr	r3, [pc, #784]	; (8001cfc <answer2CPU+0x6e8>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	0052      	lsls	r2, r2, #1
 80019f0:	4313      	orrs	r3, r2
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	4bc2      	ldr	r3, [pc, #776]	; (8001d00 <answer2CPU+0x6ec>)
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 80019f8:	e014      	b.n	8001a24 <answer2CPU+0x410>
				  {
				    i++;
 80019fa:	210e      	movs	r1, #14
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	781a      	ldrb	r2, [r3, #0]
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	3201      	adds	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	4bbd      	ldr	r3, [pc, #756]	; (8001d00 <answer2CPU+0x6ec>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d0fa      	beq.n	8001a08 <answer2CPU+0x3f4>
				    USART2->TDR = (uint8_t)ans[i];
 8001a12:	230e      	movs	r3, #14
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	781a      	ldrb	r2, [r3, #0]
 8001a18:	4bb8      	ldr	r3, [pc, #736]	; (8001cfc <answer2CPU+0x6e8>)
 8001a1a:	0052      	lsls	r2, r2, #1
 8001a1c:	5ad3      	ldrh	r3, [r2, r3]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4bb7      	ldr	r3, [pc, #732]	; (8001d00 <answer2CPU+0x6ec>)
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001a24:	230e      	movs	r3, #14
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	4bb4      	ldr	r3, [pc, #720]	; (8001cfc <answer2CPU+0x6e8>)
 8001a2c:	0052      	lsls	r2, r2, #1
 8001a2e:	5ad3      	ldrh	r3, [r2, r3]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1e2      	bne.n	80019fa <answer2CPU+0x3e6>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d000      	beq.n	8001a3e <answer2CPU+0x42a>
 8001a3c:	e07f      	b.n	8001b3e <answer2CPU+0x52a>
				myLength = 0x0B; //19 bytes length answer
 8001a3e:	2109      	movs	r1, #9
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	220b      	movs	r2, #11
 8001a44:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b02      	subs	r3, #2
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	4baa      	ldr	r3, [pc, #680]	; (8001cfc <answer2CPU+0x6e8>)
 8001a52:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001a54:	230e      	movs	r3, #14
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	e010      	b.n	8001a80 <answer2CPU+0x46c>
					ans[i + 2] = PCB_rev[i];
 8001a5e:	200e      	movs	r0, #14
 8001a60:	183b      	adds	r3, r7, r0
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4aa7      	ldr	r2, [pc, #668]	; (8001d04 <answer2CPU+0x6f0>)
 8001a66:	5cd1      	ldrb	r1, [r2, r3]
 8001a68:	183b      	adds	r3, r7, r0
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	1c9a      	adds	r2, r3, #2
 8001a6e:	b289      	uxth	r1, r1
 8001a70:	4ba2      	ldr	r3, [pc, #648]	; (8001cfc <answer2CPU+0x6e8>)
 8001a72:	0052      	lsls	r2, r2, #1
 8001a74:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001a76:	183b      	adds	r3, r7, r0
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	183b      	adds	r3, r7, r0
 8001a7c:	3201      	adds	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
 8001a80:	220e      	movs	r2, #14
 8001a82:	18bb      	adds	r3, r7, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d9e9      	bls.n	8001a5e <answer2CPU+0x44a>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001a8a:	18bb      	adds	r3, r7, r2
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e011      	b.n	8001ab6 <answer2CPU+0x4a2>
					myCS = myCS + ans[i];
 8001a92:	200e      	movs	r0, #14
 8001a94:	183b      	adds	r3, r7, r0
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	4b98      	ldr	r3, [pc, #608]	; (8001cfc <answer2CPU+0x6e8>)
 8001a9a:	0052      	lsls	r2, r2, #1
 8001a9c:	5ad3      	ldrh	r3, [r2, r3]
 8001a9e:	b2d9      	uxtb	r1, r3
 8001aa0:	220d      	movs	r2, #13
 8001aa2:	18bb      	adds	r3, r7, r2
 8001aa4:	18ba      	adds	r2, r7, r2
 8001aa6:	7812      	ldrb	r2, [r2, #0]
 8001aa8:	188a      	adds	r2, r1, r2
 8001aaa:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001aac:	183b      	adds	r3, r7, r0
 8001aae:	781a      	ldrb	r2, [r3, #0]
 8001ab0:	183b      	adds	r3, r7, r0
 8001ab2:	3201      	adds	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	230e      	movs	r3, #14
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	781a      	ldrb	r2, [r3, #0]
 8001abc:	2009      	movs	r0, #9
 8001abe:	183b      	adds	r3, r7, r0
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	dbe4      	blt.n	8001a92 <answer2CPU+0x47e>
				}
				myCS = 0 - myCS;
 8001ac8:	210d      	movs	r1, #13
 8001aca:	187b      	adds	r3, r7, r1
 8001acc:	187a      	adds	r2, r7, r1
 8001ace:	7812      	ldrb	r2, [r2, #0]
 8001ad0:	4252      	negs	r2, r2
 8001ad2:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001ad4:	183b      	adds	r3, r7, r0
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	1e5a      	subs	r2, r3, #1
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b299      	uxth	r1, r3
 8001ae0:	4b86      	ldr	r3, [pc, #536]	; (8001cfc <answer2CPU+0x6e8>)
 8001ae2:	0052      	lsls	r2, r2, #1
 8001ae4:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	4b85      	ldr	r3, [pc, #532]	; (8001d00 <answer2CPU+0x6ec>)
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	4013      	ands	r3, r2
 8001af0:	d0fa      	beq.n	8001ae8 <answer2CPU+0x4d4>
				USART2->TDR = ans[0]|0x0100;
 8001af2:	4b82      	ldr	r3, [pc, #520]	; (8001cfc <answer2CPU+0x6e8>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	0052      	lsls	r2, r2, #1
 8001afa:	4313      	orrs	r3, r2
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b80      	ldr	r3, [pc, #512]	; (8001d00 <answer2CPU+0x6ec>)
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001b02:	e014      	b.n	8001b2e <answer2CPU+0x51a>
					  {
					    i++;
 8001b04:	210e      	movs	r1, #14
 8001b06:	187b      	adds	r3, r7, r1
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	3201      	adds	r2, #1
 8001b0e:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	4b7b      	ldr	r3, [pc, #492]	; (8001d00 <answer2CPU+0x6ec>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d0fa      	beq.n	8001b12 <answer2CPU+0x4fe>
					    USART2->TDR = (uint8_t)ans[i];
 8001b1c:	230e      	movs	r3, #14
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	4b76      	ldr	r3, [pc, #472]	; (8001cfc <answer2CPU+0x6e8>)
 8001b24:	0052      	lsls	r2, r2, #1
 8001b26:	5ad3      	ldrh	r3, [r2, r3]
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <answer2CPU+0x6ec>)
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001b2e:	230e      	movs	r3, #14
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	4b71      	ldr	r3, [pc, #452]	; (8001cfc <answer2CPU+0x6e8>)
 8001b36:	0052      	lsls	r2, r2, #1
 8001b38:	5ad3      	ldrh	r3, [r2, r3]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1e2      	bne.n	8001b04 <answer2CPU+0x4f0>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d000      	beq.n	8001b48 <answer2CPU+0x534>
 8001b46:	e07f      	b.n	8001c48 <answer2CPU+0x634>
				myLength = 0x13; //19 bytes length answer
 8001b48:	2109      	movs	r1, #9
 8001b4a:	187b      	adds	r3, r7, r1
 8001b4c:	2213      	movs	r2, #19
 8001b4e:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	3b02      	subs	r3, #2
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b68      	ldr	r3, [pc, #416]	; (8001cfc <answer2CPU+0x6e8>)
 8001b5c:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001b5e:	230e      	movs	r3, #14
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	e010      	b.n	8001b8a <answer2CPU+0x576>
					ans[i + 2] = EmitterSN[i];
 8001b68:	200e      	movs	r0, #14
 8001b6a:	183b      	adds	r3, r7, r0
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	4a66      	ldr	r2, [pc, #408]	; (8001d08 <answer2CPU+0x6f4>)
 8001b70:	5cd1      	ldrb	r1, [r2, r3]
 8001b72:	183b      	adds	r3, r7, r0
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	1c9a      	adds	r2, r3, #2
 8001b78:	b289      	uxth	r1, r1
 8001b7a:	4b60      	ldr	r3, [pc, #384]	; (8001cfc <answer2CPU+0x6e8>)
 8001b7c:	0052      	lsls	r2, r2, #1
 8001b7e:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001b80:	183b      	adds	r3, r7, r0
 8001b82:	781a      	ldrb	r2, [r3, #0]
 8001b84:	183b      	adds	r3, r7, r0
 8001b86:	3201      	adds	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	220e      	movs	r2, #14
 8001b8c:	18bb      	adds	r3, r7, r2
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b10      	cmp	r3, #16
 8001b92:	d9e9      	bls.n	8001b68 <answer2CPU+0x554>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001b94:	18bb      	adds	r3, r7, r2
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
 8001b9a:	e011      	b.n	8001bc0 <answer2CPU+0x5ac>
					myCS = myCS + ans[i];
 8001b9c:	200e      	movs	r0, #14
 8001b9e:	183b      	adds	r3, r7, r0
 8001ba0:	781a      	ldrb	r2, [r3, #0]
 8001ba2:	4b56      	ldr	r3, [pc, #344]	; (8001cfc <answer2CPU+0x6e8>)
 8001ba4:	0052      	lsls	r2, r2, #1
 8001ba6:	5ad3      	ldrh	r3, [r2, r3]
 8001ba8:	b2d9      	uxtb	r1, r3
 8001baa:	220d      	movs	r2, #13
 8001bac:	18bb      	adds	r3, r7, r2
 8001bae:	18ba      	adds	r2, r7, r2
 8001bb0:	7812      	ldrb	r2, [r2, #0]
 8001bb2:	188a      	adds	r2, r1, r2
 8001bb4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001bb6:	183b      	adds	r3, r7, r0
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	183b      	adds	r3, r7, r0
 8001bbc:	3201      	adds	r2, #1
 8001bbe:	701a      	strb	r2, [r3, #0]
 8001bc0:	230e      	movs	r3, #14
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	2009      	movs	r0, #9
 8001bc8:	183b      	adds	r3, r7, r0
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	dbe4      	blt.n	8001b9c <answer2CPU+0x588>
				}
				myCS = 0 - myCS;
 8001bd2:	210d      	movs	r1, #13
 8001bd4:	187b      	adds	r3, r7, r1
 8001bd6:	187a      	adds	r2, r7, r1
 8001bd8:	7812      	ldrb	r2, [r2, #0]
 8001bda:	4252      	negs	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001bde:	183b      	adds	r3, r7, r0
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	1e5a      	subs	r2, r3, #1
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	b299      	uxth	r1, r3
 8001bea:	4b44      	ldr	r3, [pc, #272]	; (8001cfc <answer2CPU+0x6e8>)
 8001bec:	0052      	lsls	r2, r2, #1
 8001bee:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <answer2CPU+0x6ec>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	2280      	movs	r2, #128	; 0x80
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d0fa      	beq.n	8001bf2 <answer2CPU+0x5de>
				USART2->TDR = ans[0]|0x0100;
 8001bfc:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <answer2CPU+0x6e8>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	2280      	movs	r2, #128	; 0x80
 8001c02:	0052      	lsls	r2, r2, #1
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <answer2CPU+0x6ec>)
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001c0c:	e014      	b.n	8001c38 <answer2CPU+0x624>
				  {
				    i++;
 8001c0e:	210e      	movs	r1, #14
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	781a      	ldrb	r2, [r3, #0]
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	3201      	adds	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <answer2CPU+0x6ec>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	4013      	ands	r3, r2
 8001c24:	d0fa      	beq.n	8001c1c <answer2CPU+0x608>
				    	USART2->TDR = (uint8_t)ans[i];
 8001c26:	230e      	movs	r3, #14
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	781a      	ldrb	r2, [r3, #0]
 8001c2c:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <answer2CPU+0x6e8>)
 8001c2e:	0052      	lsls	r2, r2, #1
 8001c30:	5ad3      	ldrh	r3, [r2, r3]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <answer2CPU+0x6ec>)
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001c38:	230e      	movs	r3, #14
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	781a      	ldrb	r2, [r3, #0]
 8001c3e:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <answer2CPU+0x6e8>)
 8001c40:	0052      	lsls	r2, r2, #1
 8001c42:	5ad3      	ldrh	r3, [r2, r3]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1e2      	bne.n	8001c0e <answer2CPU+0x5fa>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d000      	beq.n	8001c52 <answer2CPU+0x63e>
 8001c50:	e07b      	b.n	8001d4a <answer2CPU+0x736>
				myLength = 0x04; //4 bytes length answer
 8001c52:	2109      	movs	r1, #9
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	2204      	movs	r2, #4
 8001c58:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	3b02      	subs	r3, #2
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <answer2CPU+0x6e8>)
 8001c66:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001c68:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <answer2CPU+0x6f8>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <answer2CPU+0x6e8>)
 8001c70:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001c72:	230d      	movs	r3, #13
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <answer2CPU+0x6e8>)
 8001c7c:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001c7e:	230e      	movs	r3, #14
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	e011      	b.n	8001cac <answer2CPU+0x698>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001c88:	200e      	movs	r0, #14
 8001c8a:	183b      	adds	r3, r7, r0
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <answer2CPU+0x6e8>)
 8001c90:	0052      	lsls	r2, r2, #1
 8001c92:	5ad3      	ldrh	r3, [r2, r3]
 8001c94:	b2d9      	uxtb	r1, r3
 8001c96:	220d      	movs	r2, #13
 8001c98:	18bb      	adds	r3, r7, r2
 8001c9a:	18ba      	adds	r2, r7, r2
 8001c9c:	7812      	ldrb	r2, [r2, #0]
 8001c9e:	188a      	adds	r2, r1, r2
 8001ca0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001ca2:	183b      	adds	r3, r7, r0
 8001ca4:	781a      	ldrb	r2, [r3, #0]
 8001ca6:	183b      	adds	r3, r7, r0
 8001ca8:	3201      	adds	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	230e      	movs	r3, #14
 8001cae:	18fb      	adds	r3, r7, r3
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	2009      	movs	r0, #9
 8001cb4:	183b      	adds	r3, r7, r0
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	dbe4      	blt.n	8001c88 <answer2CPU+0x674>
				}
				myCS = 0 - myCS;
 8001cbe:	210d      	movs	r1, #13
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	187a      	adds	r2, r7, r1
 8001cc4:	7812      	ldrb	r2, [r2, #0]
 8001cc6:	4252      	negs	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001cca:	183b      	adds	r3, r7, r0
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	1e5a      	subs	r2, r3, #1
 8001cd0:	187b      	adds	r3, r7, r1
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b299      	uxth	r1, r3
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <answer2CPU+0x6e8>)
 8001cd8:	0052      	lsls	r2, r2, #1
 8001cda:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cdc:	46c0      	nop			; (mov r8, r8)
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <answer2CPU+0x6ec>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	2280      	movs	r2, #128	; 0x80
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0fa      	beq.n	8001cde <answer2CPU+0x6ca>
					USART2->TDR = ans[0]|0x0100;
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <answer2CPU+0x6e8>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	0052      	lsls	r2, r2, #1
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b02      	ldr	r3, [pc, #8]	; (8001d00 <answer2CPU+0x6ec>)
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001cf8:	e01f      	b.n	8001d3a <answer2CPU+0x726>
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	2000349c 	.word	0x2000349c
 8001d00:	40004400 	.word	0x40004400
 8001d04:	20003114 	.word	0x20003114
 8001d08:	20003120 	.word	0x20003120
 8001d0c:	2000311c 	.word	0x2000311c
						{
						  i++;
 8001d10:	210e      	movs	r1, #14
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	781a      	ldrb	r2, [r3, #0]
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	3201      	adds	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	4b4e      	ldr	r3, [pc, #312]	; (8001e58 <answer2CPU+0x844>)
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	2280      	movs	r2, #128	; 0x80
 8001d24:	4013      	ands	r3, r2
 8001d26:	d0fa      	beq.n	8001d1e <answer2CPU+0x70a>
						     USART2->TDR = (uint8_t)ans[i];
 8001d28:	230e      	movs	r3, #14
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	781a      	ldrb	r2, [r3, #0]
 8001d2e:	4b4b      	ldr	r3, [pc, #300]	; (8001e5c <answer2CPU+0x848>)
 8001d30:	0052      	lsls	r2, r2, #1
 8001d32:	5ad3      	ldrh	r3, [r2, r3]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <answer2CPU+0x844>)
 8001d38:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001d3a:	230e      	movs	r3, #14
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	781a      	ldrb	r2, [r3, #0]
 8001d40:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <answer2CPU+0x848>)
 8001d42:	0052      	lsls	r2, r2, #1
 8001d44:	5ad3      	ldrh	r3, [r2, r3]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1e2      	bne.n	8001d10 <answer2CPU+0x6fc>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d000      	beq.n	8001d54 <answer2CPU+0x740>
 8001d52:	e076      	b.n	8001e42 <answer2CPU+0x82e>
				myLength = 0x04; //4 bytes length answer
 8001d54:	2109      	movs	r1, #9
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	2204      	movs	r2, #4
 8001d5a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b02      	subs	r3, #2
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <answer2CPU+0x848>)
 8001d68:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	001a      	movs	r2, r3
 8001d72:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <answer2CPU+0x84c>)
 8001d74:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <answer2CPU+0x850>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <answer2CPU+0x848>)
 8001d7e:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001d80:	230d      	movs	r3, #13
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b34      	ldr	r3, [pc, #208]	; (8001e5c <answer2CPU+0x848>)
 8001d8a:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001d8c:	230e      	movs	r3, #14
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	e011      	b.n	8001dba <answer2CPU+0x7a6>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001d96:	200e      	movs	r0, #14
 8001d98:	183b      	adds	r3, r7, r0
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <answer2CPU+0x848>)
 8001d9e:	0052      	lsls	r2, r2, #1
 8001da0:	5ad3      	ldrh	r3, [r2, r3]
 8001da2:	b2d9      	uxtb	r1, r3
 8001da4:	220d      	movs	r2, #13
 8001da6:	18bb      	adds	r3, r7, r2
 8001da8:	18ba      	adds	r2, r7, r2
 8001daa:	7812      	ldrb	r2, [r2, #0]
 8001dac:	188a      	adds	r2, r1, r2
 8001dae:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001db0:	183b      	adds	r3, r7, r0
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	183b      	adds	r3, r7, r0
 8001db6:	3201      	adds	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	230e      	movs	r3, #14
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	2009      	movs	r0, #9
 8001dc2:	183b      	adds	r3, r7, r0
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbe4      	blt.n	8001d96 <answer2CPU+0x782>
				}
				myCS = 0 - myCS;
 8001dcc:	210d      	movs	r1, #13
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	187a      	adds	r2, r7, r1
 8001dd2:	7812      	ldrb	r2, [r2, #0]
 8001dd4:	4252      	negs	r2, r2
 8001dd6:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001dd8:	183b      	adds	r3, r7, r0
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	1e5a      	subs	r2, r3, #1
 8001dde:	187b      	adds	r3, r7, r1
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	b299      	uxth	r1, r3
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <answer2CPU+0x848>)
 8001de6:	0052      	lsls	r2, r2, #1
 8001de8:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <answer2CPU+0x844>)
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	4013      	ands	r3, r2
 8001df4:	d0fa      	beq.n	8001dec <answer2CPU+0x7d8>
				USART2->TDR = ans[0]|0x0100;
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <answer2CPU+0x848>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	0052      	lsls	r2, r2, #1
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <answer2CPU+0x844>)
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001e06:	e014      	b.n	8001e32 <answer2CPU+0x81e>
				{
				  i++;
 8001e08:	210e      	movs	r1, #14
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	3201      	adds	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e14:	46c0      	nop			; (mov r8, r8)
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <answer2CPU+0x844>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	2280      	movs	r2, #128	; 0x80
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d0fa      	beq.n	8001e16 <answer2CPU+0x802>
				  USART2->TDR = (uint8_t)ans[i];
 8001e20:	230e      	movs	r3, #14
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <answer2CPU+0x848>)
 8001e28:	0052      	lsls	r2, r2, #1
 8001e2a:	5ad3      	ldrh	r3, [r2, r3]
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <answer2CPU+0x844>)
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001e32:	230e      	movs	r3, #14
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	781a      	ldrb	r2, [r3, #0]
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <answer2CPU+0x848>)
 8001e3a:	0052      	lsls	r2, r2, #1
 8001e3c:	5ad3      	ldrh	r3, [r2, r3]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1e2      	bne.n	8001e08 <answer2CPU+0x7f4>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <answer2CPU+0x844>)
 8001e44:	6a1a      	ldr	r2, [r3, #32]
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <answer2CPU+0x844>)
 8001e48:	2108      	movs	r1, #8
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	621a      	str	r2, [r3, #32]
}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b004      	add	sp, #16
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40004400 	.word	0x40004400
 8001e5c:	2000349c 	.word	0x2000349c
 8001e60:	200033f8 	.word	0x200033f8
 8001e64:	200032ee 	.word	0x200032ee

08001e68 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f001 f908 	bl	8003084 <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001e74:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <MEM_Reset+0xb0>)
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <MEM_Reset+0xb0>)
 8001e7a:	4928      	ldr	r1, [pc, #160]	; (8001f1c <MEM_Reset+0xb4>)
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001e80:	1dfb      	adds	r3, r7, #7
 8001e82:	2266      	movs	r2, #102	; 0x66
 8001e84:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001e86:	1df9      	adds	r1, r7, #7
 8001e88:	4825      	ldr	r0, [pc, #148]	; (8001f20 <MEM_Reset+0xb8>)
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f004 fc71 	bl	8006774 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001e92:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <MEM_Reset+0xb0>)
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <MEM_Reset+0xb0>)
 8001e98:	2180      	movs	r1, #128	; 0x80
 8001e9a:	0209      	lsls	r1, r1, #8
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001ea0:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001ea2:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001ea4:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001ea6:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001ea8:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001eaa:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <MEM_Reset+0xb0>)
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <MEM_Reset+0xb0>)
 8001eb2:	491a      	ldr	r1, [pc, #104]	; (8001f1c <MEM_Reset+0xb4>)
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001eb8:	1dfb      	adds	r3, r7, #7
 8001eba:	2299      	movs	r2, #153	; 0x99
 8001ebc:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001ebe:	1df9      	adds	r1, r7, #7
 8001ec0:	4817      	ldr	r0, [pc, #92]	; (8001f20 <MEM_Reset+0xb8>)
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f004 fc55 	bl	8006774 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <MEM_Reset+0xb0>)
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <MEM_Reset+0xb0>)
 8001ed0:	2180      	movs	r1, #128	; 0x80
 8001ed2:	0209      	lsls	r1, r1, #8
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f001 f8d3 	bl	8003084 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001ede:	1dfb      	adds	r3, r7, #7
 8001ee0:	22b7      	movs	r2, #183	; 0xb7
 8001ee2:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MEM_Reset+0xb0>)
 8001ee6:	695a      	ldr	r2, [r3, #20]
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MEM_Reset+0xb0>)
 8001eea:	490c      	ldr	r1, [pc, #48]	; (8001f1c <MEM_Reset+0xb4>)
 8001eec:	400a      	ands	r2, r1
 8001eee:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001ef0:	1df9      	adds	r1, r7, #7
 8001ef2:	480b      	ldr	r0, [pc, #44]	; (8001f20 <MEM_Reset+0xb8>)
 8001ef4:	2305      	movs	r3, #5
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f004 fc3c 	bl	8006774 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MEM_Reset+0xb0>)
 8001efe:	695a      	ldr	r2, [r3, #20]
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <MEM_Reset+0xb0>)
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	0209      	lsls	r1, r1, #8
 8001f06:	430a      	orrs	r2, r1
 8001f08:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f001 f8ba 	bl	8003084 <HAL_Delay>
	}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b002      	add	sp, #8
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	50000800 	.word	0x50000800
 8001f1c:	ffff7fff 	.word	0xffff7fff
 8001f20:	200031b0 	.word	0x200031b0

08001f24 <showFullScreenFAST>:
		GPIOC->ODR |= 1 << 6;	//set BF
		cmd2Execute=0;
	}
//==========================================================================================================================

	uint8_t showFullScreenFAST(uint8_t picNum) {
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	4c46      	ldr	r4, [pc, #280]	; (8002040 <showFullScreenFAST+0x11c>)
 8001f28:	44a5      	add	sp, r4
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	4b45      	ldr	r3, [pc, #276]	; (8002044 <showFullScreenFAST+0x120>)
 8001f30:	4945      	ldr	r1, [pc, #276]	; (8002048 <showFullScreenFAST+0x124>)
 8001f32:	468c      	mov	ip, r1
 8001f34:	44bc      	add	ip, r7
 8001f36:	4463      	add	r3, ip
 8001f38:	701a      	strb	r2, [r3, #0]
		uint8_t DUMMY_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i;
//		uint16_t len;
		uint32_t addrInfo,addr;

		weoDrawRectangleInit(0x00, 0x00, 0x7F, 0x7F); // Здесь ещё работает
 8001f3a:	237f      	movs	r3, #127	; 0x7f
 8001f3c:	227f      	movs	r2, #127	; 0x7f
 8001f3e:	2100      	movs	r1, #0
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff fadf 	bl	8001504 <weoDrawRectangleInit>

		len=8192;
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <showFullScreenFAST+0x128>)
 8001f48:	2280      	movs	r2, #128	; 0x80
 8001f4a:	0192      	lsls	r2, r2, #6
 8001f4c:	801a      	strh	r2, [r3, #0]
		dma_spi_cnt=len;
 8001f4e:	4b3f      	ldr	r3, [pc, #252]	; (800204c <showFullScreenFAST+0x128>)
 8001f50:	881a      	ldrh	r2, [r3, #0]
 8001f52:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <showFullScreenFAST+0x12c>)
 8001f54:	801a      	strh	r2, [r3, #0]
		memCMD = 0x13; //read command with 4-byte address
 8001f56:	483f      	ldr	r0, [pc, #252]	; (8002054 <showFullScreenFAST+0x130>)
 8001f58:	183b      	adds	r3, r7, r0
 8001f5a:	2213      	movs	r2, #19
 8001f5c:	701a      	strb	r2, [r3, #0]

		addr=((picNum)*0x2000);
 8001f5e:	4b39      	ldr	r3, [pc, #228]	; (8002044 <showFullScreenFAST+0x120>)
 8001f60:	4a39      	ldr	r2, [pc, #228]	; (8002048 <showFullScreenFAST+0x124>)
 8001f62:	4694      	mov	ip, r2
 8001f64:	44bc      	add	ip, r7
 8001f66:	4463      	add	r3, ip
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	035b      	lsls	r3, r3, #13
 8001f6c:	493a      	ldr	r1, [pc, #232]	; (8002058 <showFullScreenFAST+0x134>)
 8001f6e:	187a      	adds	r2, r7, r1
 8001f70:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 8001f72:	187b      	adds	r3, r7, r1
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	4b38      	ldr	r3, [pc, #224]	; (800205c <showFullScreenFAST+0x138>)
 8001f7a:	4c33      	ldr	r4, [pc, #204]	; (8002048 <showFullScreenFAST+0x124>)
 8001f7c:	46a4      	mov	ip, r4
 8001f7e:	44bc      	add	ip, r7
 8001f80:	4463      	add	r3, ip
 8001f82:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8001f84:	187b      	adds	r3, r7, r1
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	4b33      	ldr	r3, [pc, #204]	; (800205c <showFullScreenFAST+0x138>)
 8001f8e:	4c2e      	ldr	r4, [pc, #184]	; (8002048 <showFullScreenFAST+0x124>)
 8001f90:	46a4      	mov	ip, r4
 8001f92:	44bc      	add	ip, r7
 8001f94:	4463      	add	r3, ip
 8001f96:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8001f98:	187b      	adds	r3, r7, r1
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <showFullScreenFAST+0x138>)
 8001fa2:	4c29      	ldr	r4, [pc, #164]	; (8002048 <showFullScreenFAST+0x124>)
 8001fa4:	46a4      	mov	ip, r4
 8001fa6:	44bc      	add	ip, r7
 8001fa8:	4463      	add	r3, ip
 8001faa:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8001fac:	187b      	adds	r3, r7, r1
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	0e1b      	lsrs	r3, r3, #24
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b29      	ldr	r3, [pc, #164]	; (800205c <showFullScreenFAST+0x138>)
 8001fb6:	4924      	ldr	r1, [pc, #144]	; (8002048 <showFullScreenFAST+0x124>)
 8001fb8:	468c      	mov	ip, r1
 8001fba:	44bc      	add	ip, r7
 8001fbc:	4463      	add	r3, ip
 8001fbe:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <showFullScreenFAST+0x13c>)
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	4b26      	ldr	r3, [pc, #152]	; (8002060 <showFullScreenFAST+0x13c>)
 8001fc6:	4927      	ldr	r1, [pc, #156]	; (8002064 <showFullScreenFAST+0x140>)
 8001fc8:	400a      	ands	r2, r1
 8001fca:	615a      	str	r2, [r3, #20]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8001fcc:	1839      	adds	r1, r7, r0
 8001fce:	4826      	ldr	r0, [pc, #152]	; (8002068 <showFullScreenFAST+0x144>)
 8001fd0:	2332      	movs	r3, #50	; 0x32
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f004 fbce 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8001fd8:	2408      	movs	r4, #8
 8001fda:	193b      	adds	r3, r7, r4
 8001fdc:	1cd9      	adds	r1, r3, #3
 8001fde:	4822      	ldr	r0, [pc, #136]	; (8002068 <showFullScreenFAST+0x144>)
 8001fe0:	2332      	movs	r3, #50	; 0x32
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f004 fbc6 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8001fe8:	193b      	adds	r3, r7, r4
 8001fea:	1c99      	adds	r1, r3, #2
 8001fec:	481e      	ldr	r0, [pc, #120]	; (8002068 <showFullScreenFAST+0x144>)
 8001fee:	2332      	movs	r3, #50	; 0x32
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f004 fbbf 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8001ff6:	193b      	adds	r3, r7, r4
 8001ff8:	1c59      	adds	r1, r3, #1
 8001ffa:	481b      	ldr	r0, [pc, #108]	; (8002068 <showFullScreenFAST+0x144>)
 8001ffc:	2332      	movs	r3, #50	; 0x32
 8001ffe:	2201      	movs	r2, #1
 8002000:	f004 fbb8 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002004:	1939      	adds	r1, r7, r4
 8002006:	4818      	ldr	r0, [pc, #96]	; (8002068 <showFullScreenFAST+0x144>)
 8002008:	2332      	movs	r3, #50	; 0x32
 800200a:	2201      	movs	r2, #1
 800200c:	f004 fbb2 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <showFullScreenFAST+0x128>)
 8002012:	881a      	ldrh	r2, [r3, #0]
 8002014:	4915      	ldr	r1, [pc, #84]	; (800206c <showFullScreenFAST+0x148>)
 8002016:	4b14      	ldr	r3, [pc, #80]	; (8002068 <showFullScreenFAST+0x144>)
 8002018:	0018      	movs	r0, r3
 800201a:	f005 f821 	bl	8007060 <HAL_SPI_Receive_DMA>
//		sendBuffer2WEO(MEM_Buffer, len); //5

//		GPIOC->ODR |= 1 << 15; // set cs
//

		HAL_Delay(5);
 800201e:	2005      	movs	r0, #5
 8002020:	f001 f830 	bl	8003084 <HAL_Delay>

		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,8192);
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	019a      	lsls	r2, r3, #6
 8002028:	4910      	ldr	r1, [pc, #64]	; (800206c <showFullScreenFAST+0x148>)
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <showFullScreenFAST+0x14c>)
 800202c:	0018      	movs	r0, r3
 800202e:	f007 f90f 	bl	8009250 <HAL_USART_Transmit_DMA>
//		GPIOA->ODR &= ~(1 << 7);	//reset dc
//		GPIOA->ODR |= 1 << 6;	//set cs
//
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <showFullScreenFAST+0x150>)
 800203a:	449d      	add	sp, r3
 800203c:	bd90      	pop	{r4, r7, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	ffffdfe4 	.word	0xffffdfe4
 8002044:	ffffdfef 	.word	0xffffdfef
 8002048:	00002018 	.word	0x00002018
 800204c:	200035d8 	.word	0x200035d8
 8002050:	20003132 	.word	0x20003132
 8002054:	00002013 	.word	0x00002013
 8002058:	00002014 	.word	0x00002014
 800205c:	ffffdff0 	.word	0xffffdff0
 8002060:	50000800 	.word	0x50000800
 8002064:	ffff7fff 	.word	0xffff7fff
 8002068:	200031b0 	.word	0x200031b0
 800206c:	200035e0 	.word	0x200035e0
 8002070:	20003390 	.word	0x20003390
 8002074:	0000201c 	.word	0x0000201c

08002078 <showSmallImage>:
//==========================================================================================================================
	uint8_t showSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8002078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207a:	4c97      	ldr	r4, [pc, #604]	; (80022d8 <showSmallImage+0x260>)
 800207c:	44a5      	add	sp, r4
 800207e:	af02      	add	r7, sp, #8
 8002080:	0004      	movs	r4, r0
 8002082:	0008      	movs	r0, r1
 8002084:	0011      	movs	r1, r2
 8002086:	4b95      	ldr	r3, [pc, #596]	; (80022dc <showSmallImage+0x264>)
 8002088:	4a95      	ldr	r2, [pc, #596]	; (80022e0 <showSmallImage+0x268>)
 800208a:	4694      	mov	ip, r2
 800208c:	44bc      	add	ip, r7
 800208e:	4463      	add	r3, ip
 8002090:	1c22      	adds	r2, r4, #0
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	4b93      	ldr	r3, [pc, #588]	; (80022e4 <showSmallImage+0x26c>)
 8002096:	4a92      	ldr	r2, [pc, #584]	; (80022e0 <showSmallImage+0x268>)
 8002098:	4694      	mov	ip, r2
 800209a:	44bc      	add	ip, r7
 800209c:	4463      	add	r3, ip
 800209e:	1c02      	adds	r2, r0, #0
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	4b91      	ldr	r3, [pc, #580]	; (80022e8 <showSmallImage+0x270>)
 80020a4:	4a8e      	ldr	r2, [pc, #568]	; (80022e0 <showSmallImage+0x268>)
 80020a6:	4694      	mov	ip, r2
 80020a8:	44bc      	add	ip, r7
 80020aa:	4463      	add	r3, ip
 80020ac:	1c0a      	adds	r2, r1, #0
 80020ae:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i, len;
		uint32_t addr;
		addr=0x00000000;
 80020b0:	2300      	movs	r3, #0
 80020b2:	498e      	ldr	r1, [pc, #568]	; (80022ec <showSmallImage+0x274>)
 80020b4:	187a      	adds	r2, r7, r1
 80020b6:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 80020b8:	4d8d      	ldr	r5, [pc, #564]	; (80022f0 <showSmallImage+0x278>)
 80020ba:	197b      	adds	r3, r7, r5
 80020bc:	2213      	movs	r2, #19
 80020be:	701a      	strb	r2, [r3, #0]
		//look at info about image
//		addr=(picNum*0x2000)+0x3C000;// the right path is to multiply picNum * image repeat period!
		addr=(picNum*0x2000);
 80020c0:	4b86      	ldr	r3, [pc, #536]	; (80022dc <showSmallImage+0x264>)
 80020c2:	4a87      	ldr	r2, [pc, #540]	; (80022e0 <showSmallImage+0x268>)
 80020c4:	4694      	mov	ip, r2
 80020c6:	44bc      	add	ip, r7
 80020c8:	4463      	add	r3, ip
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	035b      	lsls	r3, r3, #13
 80020ce:	187a      	adds	r2, r7, r1
 80020d0:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 80020d2:	187b      	adds	r3, r7, r1
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	4b86      	ldr	r3, [pc, #536]	; (80022f4 <showSmallImage+0x27c>)
 80020da:	4881      	ldr	r0, [pc, #516]	; (80022e0 <showSmallImage+0x268>)
 80020dc:	4684      	mov	ip, r0
 80020de:	44bc      	add	ip, r7
 80020e0:	4463      	add	r3, ip
 80020e2:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80020e4:	187b      	adds	r3, r7, r1
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	4b81      	ldr	r3, [pc, #516]	; (80022f4 <showSmallImage+0x27c>)
 80020ee:	487c      	ldr	r0, [pc, #496]	; (80022e0 <showSmallImage+0x268>)
 80020f0:	4684      	mov	ip, r0
 80020f2:	44bc      	add	ip, r7
 80020f4:	4463      	add	r3, ip
 80020f6:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0c1b      	lsrs	r3, r3, #16
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b7c      	ldr	r3, [pc, #496]	; (80022f4 <showSmallImage+0x27c>)
 8002102:	4877      	ldr	r0, [pc, #476]	; (80022e0 <showSmallImage+0x268>)
 8002104:	4684      	mov	ip, r0
 8002106:	44bc      	add	ip, r7
 8002108:	4463      	add	r3, ip
 800210a:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 800210c:	187b      	adds	r3, r7, r1
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	0e1b      	lsrs	r3, r3, #24
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b77      	ldr	r3, [pc, #476]	; (80022f4 <showSmallImage+0x27c>)
 8002116:	4972      	ldr	r1, [pc, #456]	; (80022e0 <showSmallImage+0x268>)
 8002118:	468c      	mov	ip, r1
 800211a:	44bc      	add	ip, r7
 800211c:	4463      	add	r3, ip
 800211e:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8002120:	4b75      	ldr	r3, [pc, #468]	; (80022f8 <showSmallImage+0x280>)
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	4b74      	ldr	r3, [pc, #464]	; (80022f8 <showSmallImage+0x280>)
 8002126:	4975      	ldr	r1, [pc, #468]	; (80022fc <showSmallImage+0x284>)
 8002128:	400a      	ands	r2, r1
 800212a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 800212c:	1979      	adds	r1, r7, r5
 800212e:	4874      	ldr	r0, [pc, #464]	; (8002300 <showSmallImage+0x288>)
 8002130:	2332      	movs	r3, #50	; 0x32
 8002132:	2201      	movs	r2, #1
 8002134:	f004 fb1e 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8002138:	240c      	movs	r4, #12
 800213a:	193b      	adds	r3, r7, r4
 800213c:	1cd9      	adds	r1, r3, #3
 800213e:	4870      	ldr	r0, [pc, #448]	; (8002300 <showSmallImage+0x288>)
 8002140:	2332      	movs	r3, #50	; 0x32
 8002142:	2201      	movs	r2, #1
 8002144:	f004 fb16 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002148:	193b      	adds	r3, r7, r4
 800214a:	1c99      	adds	r1, r3, #2
 800214c:	486c      	ldr	r0, [pc, #432]	; (8002300 <showSmallImage+0x288>)
 800214e:	2332      	movs	r3, #50	; 0x32
 8002150:	2201      	movs	r2, #1
 8002152:	f004 fb0f 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8002156:	193b      	adds	r3, r7, r4
 8002158:	1c59      	adds	r1, r3, #1
 800215a:	4869      	ldr	r0, [pc, #420]	; (8002300 <showSmallImage+0x288>)
 800215c:	2332      	movs	r3, #50	; 0x32
 800215e:	2201      	movs	r2, #1
 8002160:	f004 fb08 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002164:	1939      	adds	r1, r7, r4
 8002166:	4866      	ldr	r0, [pc, #408]	; (8002300 <showSmallImage+0x288>)
 8002168:	2332      	movs	r3, #50	; 0x32
 800216a:	2201      	movs	r2, #1
 800216c:	f004 fb02 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8002170:	4b64      	ldr	r3, [pc, #400]	; (8002304 <showSmallImage+0x28c>)
 8002172:	2210      	movs	r2, #16
 8002174:	18b9      	adds	r1, r7, r2
 8002176:	4862      	ldr	r0, [pc, #392]	; (8002300 <showSmallImage+0x288>)
 8002178:	2202      	movs	r2, #2
 800217a:	f004 fc53 	bl	8006a24 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 800217e:	4b5e      	ldr	r3, [pc, #376]	; (80022f8 <showSmallImage+0x280>)
 8002180:	695a      	ldr	r2, [r3, #20]
 8002182:	4b5d      	ldr	r3, [pc, #372]	; (80022f8 <showSmallImage+0x280>)
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	0209      	lsls	r1, r1, #8
 8002188:	430a      	orrs	r2, r1
 800218a:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 800218c:	4e5e      	ldr	r6, [pc, #376]	; (8002308 <showSmallImage+0x290>)
 800218e:	19bb      	adds	r3, r7, r6
 8002190:	4a5e      	ldr	r2, [pc, #376]	; (800230c <showSmallImage+0x294>)
 8002192:	4953      	ldr	r1, [pc, #332]	; (80022e0 <showSmallImage+0x268>)
 8002194:	468c      	mov	ip, r1
 8002196:	44bc      	add	ip, r7
 8002198:	4462      	add	r2, ip
 800219a:	7812      	ldrb	r2, [r2, #0]
 800219c:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 800219e:	495c      	ldr	r1, [pc, #368]	; (8002310 <showSmallImage+0x298>)
 80021a0:	187b      	adds	r3, r7, r1
 80021a2:	4a5a      	ldr	r2, [pc, #360]	; (800230c <showSmallImage+0x294>)
 80021a4:	484e      	ldr	r0, [pc, #312]	; (80022e0 <showSmallImage+0x268>)
 80021a6:	4684      	mov	ip, r0
 80021a8:	44bc      	add	ip, r7
 80021aa:	4462      	add	r2, ip
 80021ac:	7852      	ldrb	r2, [r2, #1]
 80021ae:	701a      	strb	r2, [r3, #0]

		len=(width*height>>1)+0x20;
 80021b0:	19bb      	adds	r3, r7, r6
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	187a      	adds	r2, r7, r1
 80021b6:	7812      	ldrb	r2, [r2, #0]
 80021b8:	4353      	muls	r3, r2
 80021ba:	105b      	asrs	r3, r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	4b55      	ldr	r3, [pc, #340]	; (8002314 <showSmallImage+0x29c>)
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	3220      	adds	r2, #32
 80021c4:	801a      	strh	r2, [r3, #0]
		addrArray[0]+=0x02;
 80021c6:	4b4b      	ldr	r3, [pc, #300]	; (80022f4 <showSmallImage+0x27c>)
 80021c8:	4a45      	ldr	r2, [pc, #276]	; (80022e0 <showSmallImage+0x268>)
 80021ca:	4694      	mov	ip, r2
 80021cc:	44bc      	add	ip, r7
 80021ce:	4463      	add	r3, ip
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	3302      	adds	r3, #2
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <showSmallImage+0x27c>)
 80021d8:	4841      	ldr	r0, [pc, #260]	; (80022e0 <showSmallImage+0x268>)
 80021da:	4684      	mov	ip, r0
 80021dc:	44bc      	add	ip, r7
 80021de:	4463      	add	r3, ip
 80021e0:	701a      	strb	r2, [r3, #0]

		USART2->ICR|=USART_ICR_ORECF;
 80021e2:	4b4d      	ldr	r3, [pc, #308]	; (8002318 <showSmallImage+0x2a0>)
 80021e4:	6a1a      	ldr	r2, [r3, #32]
 80021e6:	4b4c      	ldr	r3, [pc, #304]	; (8002318 <showSmallImage+0x2a0>)
 80021e8:	2108      	movs	r1, #8
 80021ea:	430a      	orrs	r2, r1
 80021ec:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 80021ee:	197b      	adds	r3, r7, r5
 80021f0:	2213      	movs	r2, #19
 80021f2:	701a      	strb	r2, [r3, #0]

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80021f4:	4b40      	ldr	r3, [pc, #256]	; (80022f8 <showSmallImage+0x280>)
 80021f6:	695a      	ldr	r2, [r3, #20]
 80021f8:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <showSmallImage+0x280>)
 80021fa:	4940      	ldr	r1, [pc, #256]	; (80022fc <showSmallImage+0x284>)
 80021fc:	400a      	ands	r2, r1
 80021fe:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 8002200:	1979      	adds	r1, r7, r5
 8002202:	483f      	ldr	r0, [pc, #252]	; (8002300 <showSmallImage+0x288>)
 8002204:	2332      	movs	r3, #50	; 0x32
 8002206:	2201      	movs	r2, #1
 8002208:	f004 fab4 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 800220c:	193b      	adds	r3, r7, r4
 800220e:	1cd9      	adds	r1, r3, #3
 8002210:	483b      	ldr	r0, [pc, #236]	; (8002300 <showSmallImage+0x288>)
 8002212:	2332      	movs	r3, #50	; 0x32
 8002214:	2201      	movs	r2, #1
 8002216:	f004 faad 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 800221a:	193b      	adds	r3, r7, r4
 800221c:	1c99      	adds	r1, r3, #2
 800221e:	4838      	ldr	r0, [pc, #224]	; (8002300 <showSmallImage+0x288>)
 8002220:	2332      	movs	r3, #50	; 0x32
 8002222:	2201      	movs	r2, #1
 8002224:	f004 faa6 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 8002228:	193b      	adds	r3, r7, r4
 800222a:	1c59      	adds	r1, r3, #1
 800222c:	4834      	ldr	r0, [pc, #208]	; (8002300 <showSmallImage+0x288>)
 800222e:	2332      	movs	r3, #50	; 0x32
 8002230:	2201      	movs	r2, #1
 8002232:	f004 fa9f 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 8002236:	1939      	adds	r1, r7, r4
 8002238:	4831      	ldr	r0, [pc, #196]	; (8002300 <showSmallImage+0x288>)
 800223a:	2332      	movs	r3, #50	; 0x32
 800223c:	2201      	movs	r2, #1
 800223e:	f004 fa99 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 8002242:	4c30      	ldr	r4, [pc, #192]	; (8002304 <showSmallImage+0x28c>)
 8002244:	4b33      	ldr	r3, [pc, #204]	; (8002314 <showSmallImage+0x29c>)
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	2514      	movs	r5, #20
 800224c:	1979      	adds	r1, r7, r5
 800224e:	482c      	ldr	r0, [pc, #176]	; (8002300 <showSmallImage+0x288>)
 8002250:	0023      	movs	r3, r4
 8002252:	f004 fbe7 	bl	8006a24 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 8002256:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <showSmallImage+0x280>)
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <showSmallImage+0x280>)
 800225c:	2180      	movs	r1, #128	; 0x80
 800225e:	0209      	lsls	r1, r1, #8
 8002260:	430a      	orrs	r2, r1
 8002262:	615a      	str	r2, [r3, #20]
		weoDrawRectangleFilled(imX, imY, (imX+width-0x01), (imY+height-0x01), 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8002264:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <showSmallImage+0x26c>)
 8002266:	481e      	ldr	r0, [pc, #120]	; (80022e0 <showSmallImage+0x268>)
 8002268:	183a      	adds	r2, r7, r0
 800226a:	18d2      	adds	r2, r2, r3
 800226c:	19bb      	adds	r3, r7, r6
 800226e:	7812      	ldrb	r2, [r2, #0]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	18d3      	adds	r3, r2, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b2dc      	uxtb	r4, r3
 800227a:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <showSmallImage+0x270>)
 800227c:	183a      	adds	r2, r7, r0
 800227e:	18d2      	adds	r2, r2, r3
 8002280:	4923      	ldr	r1, [pc, #140]	; (8002310 <showSmallImage+0x298>)
 8002282:	187b      	adds	r3, r7, r1
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	18d3      	adds	r3, r2, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <showSmallImage+0x270>)
 8002292:	4913      	ldr	r1, [pc, #76]	; (80022e0 <showSmallImage+0x268>)
 8002294:	468c      	mov	ip, r1
 8002296:	44bc      	add	ip, r7
 8002298:	4463      	add	r3, ip
 800229a:	7819      	ldrb	r1, [r3, #0]
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <showSmallImage+0x26c>)
 800229e:	4810      	ldr	r0, [pc, #64]	; (80022e0 <showSmallImage+0x268>)
 80022a0:	4684      	mov	ip, r0
 80022a2:	44bc      	add	ip, r7
 80022a4:	4463      	add	r3, ip
 80022a6:	7818      	ldrb	r0, [r3, #0]
 80022a8:	197b      	adds	r3, r7, r5
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	23ff      	movs	r3, #255	; 0xff
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	0013      	movs	r3, r2
 80022b2:	0022      	movs	r2, r4
 80022b4:	f7ff f846 	bl	8001344 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 80022b8:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <showSmallImage+0x280>)
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <showSmallImage+0x280>)
 80022be:	2140      	movs	r1, #64	; 0x40
 80022c0:	430a      	orrs	r2, r1
 80022c2:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <showSmallImage+0x2a4>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
	}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <showSmallImage+0x2a8>)
 80022d2:	449d      	add	sp, r3
 80022d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	ffffdfd4 	.word	0xffffdfd4
 80022dc:	ffffdfe7 	.word	0xffffdfe7
 80022e0:	00002020 	.word	0x00002020
 80022e4:	ffffdfe6 	.word	0xffffdfe6
 80022e8:	ffffdfe5 	.word	0xffffdfe5
 80022ec:	0000201c 	.word	0x0000201c
 80022f0:	00002017 	.word	0x00002017
 80022f4:	ffffdfec 	.word	0xffffdfec
 80022f8:	50000800 	.word	0x50000800
 80022fc:	ffff7fff 	.word	0xffff7fff
 8002300:	200031b0 	.word	0x200031b0
 8002304:	00001388 	.word	0x00001388
 8002308:	0000201b 	.word	0x0000201b
 800230c:	ffffdff0 	.word	0xffffdff0
 8002310:	0000201a 	.word	0x0000201a
 8002314:	00002018 	.word	0x00002018
 8002318:	40004400 	.word	0x40004400
 800231c:	2000345a 	.word	0x2000345a
 8002320:	00002024 	.word	0x00002024

08002324 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <MEM_GetID+0xb0>)
 800232e:	7812      	ldrb	r2, [r2, #0]
 8002330:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002332:	1dfb      	adds	r3, r7, #7
 8002334:	229e      	movs	r2, #158	; 0x9e
 8002336:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <MEM_GetID+0xb4>)
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <MEM_GetID+0xb4>)
 800233e:	4927      	ldr	r1, [pc, #156]	; (80023dc <MEM_GetID+0xb8>)
 8002340:	400a      	ands	r2, r1
 8002342:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002344:	1df9      	adds	r1, r7, #7
 8002346:	4826      	ldr	r0, [pc, #152]	; (80023e0 <MEM_GetID+0xbc>)
 8002348:	2332      	movs	r3, #50	; 0x32
 800234a:	2201      	movs	r2, #1
 800234c:	f004 fa12 	bl	8006774 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002350:	23fa      	movs	r3, #250	; 0xfa
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	1d39      	adds	r1, r7, #4
 8002356:	4822      	ldr	r0, [pc, #136]	; (80023e0 <MEM_GetID+0xbc>)
 8002358:	2201      	movs	r2, #1
 800235a:	f004 fb63 	bl	8006a24 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	001a      	movs	r2, r3
 8002364:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <MEM_GetID+0xc0>)
 8002366:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002368:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <MEM_GetID+0xc0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	021a      	lsls	r2, r3, #8
 800236e:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <MEM_GetID+0xc0>)
 8002370:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002372:	23fa      	movs	r3, #250	; 0xfa
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	1d39      	adds	r1, r7, #4
 8002378:	4819      	ldr	r0, [pc, #100]	; (80023e0 <MEM_GetID+0xbc>)
 800237a:	2201      	movs	r2, #1
 800237c:	f004 fb52 	bl	8006a24 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	001a      	movs	r2, r3
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <MEM_GetID+0xc0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	18d2      	adds	r2, r2, r3
 800238c:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <MEM_GetID+0xc0>)
 800238e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <MEM_GetID+0xc0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	021a      	lsls	r2, r3, #8
 8002396:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <MEM_GetID+0xc0>)
 8002398:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800239a:	23fa      	movs	r3, #250	; 0xfa
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	1d39      	adds	r1, r7, #4
 80023a0:	480f      	ldr	r0, [pc, #60]	; (80023e0 <MEM_GetID+0xbc>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	f004 fb3e 	bl	8006a24 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	001a      	movs	r2, r3
 80023ae:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <MEM_GetID+0xc0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	18d2      	adds	r2, r2, r3
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <MEM_GetID+0xc0>)
 80023b6:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <MEM_GetID+0xb4>)
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <MEM_GetID+0xb4>)
 80023be:	2180      	movs	r1, #128	; 0x80
 80023c0:	0209      	lsls	r1, r1, #8
 80023c2:	430a      	orrs	r2, r1
 80023c4:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 80023c6:	4b07      	ldr	r3, [pc, #28]	; (80023e4 <MEM_GetID+0xc0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
	}
 80023ca:	0018      	movs	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b002      	add	sp, #8
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	0800a734 	.word	0x0800a734
 80023d8:	50000800 	.word	0x50000800
 80023dc:	ffff7fff 	.word	0xffff7fff
 80023e0:	200031b0 	.word	0x200031b0
 80023e4:	2000315c 	.word	0x2000315c

080023e8 <cmdExecute>:

	uint16_t Scount(void){

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	0002      	movs	r2, r0
 80023f0:	1dfb      	adds	r3, r7, #7
 80023f2:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 80023f4:	4b49      	ldr	r3, [pc, #292]	; (800251c <cmdExecute+0x134>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b10      	cmp	r3, #16
 80023fa:	d100      	bne.n	80023fe <cmdExecute+0x16>
 80023fc:	e087      	b.n	800250e <cmdExecute+0x126>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 80023fe:	4b48      	ldr	r3, [pc, #288]	; (8002520 <cmdExecute+0x138>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d000      	beq.n	8002408 <cmdExecute+0x20>
 8002406:	e084      	b.n	8002512 <cmdExecute+0x12a>
		USART2->ICR|=USART_ICR_ORECF;
 8002408:	4b46      	ldr	r3, [pc, #280]	; (8002524 <cmdExecute+0x13c>)
 800240a:	6a1a      	ldr	r2, [r3, #32]
 800240c:	4b45      	ldr	r3, [pc, #276]	; (8002524 <cmdExecute+0x13c>)
 800240e:	2108      	movs	r1, #8
 8002410:	430a      	orrs	r2, r1
 8002412:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 8002414:	1dfb      	adds	r3, r7, #7
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b11      	cmp	r3, #17
 800241a:	d111      	bne.n	8002440 <cmdExecute+0x58>
			bf4me=0x11;	//set BF flag 4 me
 800241c:	4b40      	ldr	r3, [pc, #256]	; (8002520 <cmdExecute+0x138>)
 800241e:	2211      	movs	r2, #17
 8002420:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <cmdExecute+0x4e>
 800242a:	4b3f      	ldr	r3, [pc, #252]	; (8002528 <cmdExecute+0x140>)
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <cmdExecute+0x140>)
 8002430:	2140      	movs	r1, #64	; 0x40
 8002432:	438a      	bics	r2, r1
 8002434:	615a      	str	r2, [r3, #20]
//			showFullScreen(picNum);
			showFullScreenFAST(picNum);
 8002436:	4b3d      	ldr	r3, [pc, #244]	; (800252c <cmdExecute+0x144>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	0018      	movs	r0, r3
 800243c:	f7ff fd72 	bl	8001f24 <showFullScreenFAST>
				}
		if(cmd2Execute==0x12){
 8002440:	1dfb      	adds	r3, r7, #7
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b12      	cmp	r3, #18
 8002446:	d117      	bne.n	8002478 <cmdExecute+0x90>
			bf4me=0x12;	//set BF flag 4 me
 8002448:	4b35      	ldr	r3, [pc, #212]	; (8002520 <cmdExecute+0x138>)
 800244a:	2212      	movs	r2, #18
 800244c:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 800244e:	1dfb      	adds	r3, r7, #7
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <cmdExecute+0x7a>
 8002456:	4b34      	ldr	r3, [pc, #208]	; (8002528 <cmdExecute+0x140>)
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	4b33      	ldr	r3, [pc, #204]	; (8002528 <cmdExecute+0x140>)
 800245c:	2140      	movs	r1, #64	; 0x40
 800245e:	438a      	bics	r2, r1
 8002460:	615a      	str	r2, [r3, #20]
//			showSmallImageFAST(picNum,imX,imY);
			showSmallImage(picNum,imX,imY);
 8002462:	4b32      	ldr	r3, [pc, #200]	; (800252c <cmdExecute+0x144>)
 8002464:	7818      	ldrb	r0, [r3, #0]
 8002466:	4b32      	ldr	r3, [pc, #200]	; (8002530 <cmdExecute+0x148>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	b2d9      	uxtb	r1, r3
 800246c:	4b31      	ldr	r3, [pc, #196]	; (8002534 <cmdExecute+0x14c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	001a      	movs	r2, r3
 8002474:	f7ff fe00 	bl	8002078 <showSmallImage>
				}
		if(cmd2Execute==0x13){
 8002478:	1dfb      	adds	r3, r7, #7
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b13      	cmp	r3, #19
 800247e:	d117      	bne.n	80024b0 <cmdExecute+0xc8>
			bf4me=0x13;	//set BF flag 4 me
 8002480:	4b27      	ldr	r3, [pc, #156]	; (8002520 <cmdExecute+0x138>)
 8002482:	2213      	movs	r2, #19
 8002484:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 8002486:	1dfb      	adds	r3, r7, #7
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <cmdExecute+0xb2>
 800248e:	4b26      	ldr	r3, [pc, #152]	; (8002528 <cmdExecute+0x140>)
 8002490:	695a      	ldr	r2, [r3, #20]
 8002492:	4b25      	ldr	r3, [pc, #148]	; (8002528 <cmdExecute+0x140>)
 8002494:	2140      	movs	r1, #64	; 0x40
 8002496:	438a      	bics	r2, r1
 8002498:	615a      	str	r2, [r3, #20]

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 800249a:	4b25      	ldr	r3, [pc, #148]	; (8002530 <cmdExecute+0x148>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b2d8      	uxtb	r0, r3
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <cmdExecute+0x14c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	b2d9      	uxtb	r1, r3
 80024a6:	4b24      	ldr	r3, [pc, #144]	; (8002538 <cmdExecute+0x150>)
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <cmdExecute+0x154>)
 80024ac:	f000 f848 	bl	8002540 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 80024b0:	1dfb      	adds	r3, r7, #7
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b14      	cmp	r3, #20
 80024b6:	d10c      	bne.n	80024d2 <cmdExecute+0xea>
			bf4me=0x14;	//set BF flag 4 me
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <cmdExecute+0x138>)
 80024ba:	2214      	movs	r2, #20
 80024bc:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 80024be:	1dfb      	adds	r3, r7, #7
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <cmdExecute+0xea>
 80024c6:	4b18      	ldr	r3, [pc, #96]	; (8002528 <cmdExecute+0x140>)
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	4b17      	ldr	r3, [pc, #92]	; (8002528 <cmdExecute+0x140>)
 80024cc:	2140      	movs	r1, #64	; 0x40
 80024ce:	438a      	bics	r2, r1
 80024d0:	615a      	str	r2, [r3, #20]


				}
		if(cmd2Execute==0x15){
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b15      	cmp	r3, #21
 80024d8:	d108      	bne.n	80024ec <cmdExecute+0x104>
			if(cmd[3]==0x00){
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <cmdExecute+0x134>)
 80024dc:	78db      	ldrb	r3, [r3, #3]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <cmdExecute+0xfe>
				weoClear();
 80024e2:	f7fe fec9 	bl	8001278 <weoClear>
			}
			bf4me=0x15;	//set BF flag 4 me
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <cmdExecute+0x138>)
 80024e8:	2215      	movs	r2, #21
 80024ea:	701a      	strb	r2, [r3, #0]
				}
		if(cmd2Execute==0x16){
 80024ec:	1dfb      	adds	r3, r7, #7
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b16      	cmp	r3, #22
 80024f2:	d102      	bne.n	80024fa <cmdExecute+0x112>
			bf4me=0x16;	//set BF flag 4 me
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <cmdExecute+0x138>)
 80024f6:	2216      	movs	r2, #22
 80024f8:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 80024fa:	1dfb      	adds	r3, r7, #7
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <cmdExecute+0x13c>)
 8002502:	6a1a      	ldr	r2, [r3, #32]
 8002504:	4b07      	ldr	r3, [pc, #28]	; (8002524 <cmdExecute+0x13c>)
 8002506:	2108      	movs	r1, #8
 8002508:	430a      	orrs	r2, r1
 800250a:	621a      	str	r2, [r3, #32]
 800250c:	e002      	b.n	8002514 <cmdExecute+0x12c>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	e000      	b.n	8002514 <cmdExecute+0x12c>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 8002512:	46c0      	nop			; (mov r8, r8)
	}
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	b002      	add	sp, #8
 800251a:	bd80      	pop	{r7, pc}
 800251c:	200055e0 	.word	0x200055e0
 8002520:	200034b0 	.word	0x200034b0
 8002524:	40004400 	.word	0x40004400
 8002528:	50000800 	.word	0x50000800
 800252c:	20003459 	.word	0x20003459
 8002530:	200032f0 	.word	0x200032f0
 8002534:	20003384 	.word	0x20003384
 8002538:	20003499 	.word	0x20003499
 800253c:	200031a0 	.word	0x200031a0

08002540 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 8002540:	b5b0      	push	{r4, r5, r7, lr}
 8002542:	b092      	sub	sp, #72	; 0x48
 8002544:	af02      	add	r7, sp, #8
 8002546:	0004      	movs	r4, r0
 8002548:	0008      	movs	r0, r1
 800254a:	0011      	movs	r1, r2
 800254c:	603b      	str	r3, [r7, #0]
 800254e:	1dfb      	adds	r3, r7, #7
 8002550:	1c22      	adds	r2, r4, #0
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	1dbb      	adds	r3, r7, #6
 8002556:	1c02      	adds	r2, r0, #0
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	1d7b      	adds	r3, r7, #5
 800255c:	1c0a      	adds	r2, r1, #0
 800255e:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 8002560:	233e      	movs	r3, #62	; 0x3e
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	1dfa      	adds	r2, r7, #7
 8002566:	7812      	ldrb	r2, [r2, #0]
 8002568:	701a      	strb	r2, [r3, #0]

			for (i=0;i<strLen;i++){
 800256a:	233c      	movs	r3, #60	; 0x3c
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2200      	movs	r2, #0
 8002570:	801a      	strh	r2, [r3, #0]
 8002572:	e04f      	b.n	8002614 <printASCIIarray+0xd4>
				for(j=0;j<49;j++){
 8002574:	233f      	movs	r3, #63	; 0x3f
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	e01b      	b.n	80025b6 <printASCIIarray+0x76>
					weoBuffer[j]=FONT_X[dataASCII[i]][j];
 800257e:	233c      	movs	r3, #60	; 0x3c
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	18d3      	adds	r3, r2, r3
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	001a      	movs	r2, r3
 800258c:	253f      	movs	r5, #63	; 0x3f
 800258e:	197b      	adds	r3, r7, r5
 8002590:	7818      	ldrb	r0, [r3, #0]
 8002592:	197b      	adds	r3, r7, r5
 8002594:	7819      	ldrb	r1, [r3, #0]
 8002596:	4c33      	ldr	r4, [pc, #204]	; (8002664 <printASCIIarray+0x124>)
 8002598:	0013      	movs	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	00da      	lsls	r2, r3, #3
 80025a0:	1ad2      	subs	r2, r2, r3
 80025a2:	18a3      	adds	r3, r4, r2
 80025a4:	5c1a      	ldrb	r2, [r3, r0]
 80025a6:	2308      	movs	r3, #8
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 80025ac:	197b      	adds	r3, r7, r5
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	197b      	adds	r3, r7, r5
 80025b2:	3201      	adds	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	233f      	movs	r3, #63	; 0x3f
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b30      	cmp	r3, #48	; 0x30
 80025be:	d9de      	bls.n	800257e <printASCIIarray+0x3e>
					}
				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <printASCIIarray+0x128>)
 80025c2:	781a      	ldrb	r2, [r3, #0]
 80025c4:	203e      	movs	r0, #62	; 0x3e
 80025c6:	183b      	adds	r3, r7, r0
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	18d3      	adds	r3, r2, r3
 80025cc:	b2dc      	uxtb	r4, r3
 80025ce:	4b27      	ldr	r3, [pc, #156]	; (800266c <printASCIIarray+0x12c>)
 80025d0:	781a      	ldrb	r2, [r3, #0]
 80025d2:	1dbb      	adds	r3, r7, #6
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	18d3      	adds	r3, r2, r3
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	1dbb      	adds	r3, r7, #6
 80025dc:	7819      	ldrb	r1, [r3, #0]
 80025de:	0005      	movs	r5, r0
 80025e0:	183b      	adds	r3, r7, r0
 80025e2:	7818      	ldrb	r0, [r3, #0]
 80025e4:	2308      	movs	r3, #8
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	23ff      	movs	r3, #255	; 0xff
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	0013      	movs	r3, r2
 80025f0:	0022      	movs	r2, r4
 80025f2:	f7fe fea7 	bl	8001344 <weoDrawRectangleFilled>
				ASCII_X += X_increment+1;
 80025f6:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <printASCIIarray+0x128>)
 80025f8:	781a      	ldrb	r2, [r3, #0]
 80025fa:	197b      	adds	r3, r7, r5
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	18d3      	adds	r3, r2, r3
 8002600:	b2da      	uxtb	r2, r3
 8002602:	197b      	adds	r3, r7, r5
 8002604:	3201      	adds	r2, #1
 8002606:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 8002608:	213c      	movs	r1, #60	; 0x3c
 800260a:	187b      	adds	r3, r7, r1
 800260c:	881a      	ldrh	r2, [r3, #0]
 800260e:	187b      	adds	r3, r7, r1
 8002610:	3201      	adds	r2, #1
 8002612:	801a      	strh	r2, [r3, #0]
 8002614:	1d7b      	adds	r3, r7, #5
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b29b      	uxth	r3, r3
 800261a:	213c      	movs	r1, #60	; 0x3c
 800261c:	187a      	adds	r2, r7, r1
 800261e:	8812      	ldrh	r2, [r2, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d3a7      	bcc.n	8002574 <printASCIIarray+0x34>
			}
			for(i=0;i<49;i++){
 8002624:	187b      	adds	r3, r7, r1
 8002626:	2200      	movs	r2, #0
 8002628:	801a      	strh	r2, [r3, #0]
 800262a:	e00b      	b.n	8002644 <printASCIIarray+0x104>
			weoBuffer[i]=0x00;
 800262c:	203c      	movs	r0, #60	; 0x3c
 800262e:	183b      	adds	r3, r7, r0
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	2208      	movs	r2, #8
 8002634:	18ba      	adds	r2, r7, r2
 8002636:	2100      	movs	r1, #0
 8002638:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<49;i++){
 800263a:	183b      	adds	r3, r7, r0
 800263c:	881a      	ldrh	r2, [r3, #0]
 800263e:	183b      	adds	r3, r7, r0
 8002640:	3201      	adds	r2, #1
 8002642:	801a      	strh	r2, [r3, #0]
 8002644:	233c      	movs	r3, #60	; 0x3c
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	2b30      	cmp	r3, #48	; 0x30
 800264c:	d9ee      	bls.n	800262c <printASCIIarray+0xec>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <printASCIIarray+0x130>)
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <printASCIIarray+0x130>)
 8002654:	2140      	movs	r1, #64	; 0x40
 8002656:	430a      	orrs	r2, r1
 8002658:	615a      	str	r2, [r3, #20]

		}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	0018      	movs	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	b010      	add	sp, #64	; 0x40
 8002662:	bdb0      	pop	{r4, r5, r7, pc}
 8002664:	20000000 	.word	0x20000000
 8002668:	20003130 	.word	0x20003130
 800266c:	20003131 	.word	0x20003131
 8002670:	50000800 	.word	0x50000800

08002674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_MspInit+0x4c>)
 8002688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <HAL_MspInit+0x4c>)
 800268c:	2101      	movs	r1, #1
 800268e:	430a      	orrs	r2, r1
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_MspInit+0x4c>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	2201      	movs	r2, #1
 8002698:	4013      	ands	r3, r2
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_MspInit+0x4c>)
 80026a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026a2:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_MspInit+0x4c>)
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	0549      	lsls	r1, r1, #21
 80026a8:	430a      	orrs	r2, r1
 80026aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80026ac:	4b07      	ldr	r3, [pc, #28]	; (80026cc <HAL_MspInit+0x4c>)
 80026ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	055b      	lsls	r3, r3, #21
 80026b4:	4013      	ands	r3, r2
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	0018      	movs	r0, r3
 80026c0:	f000 fd04 	bl	80030cc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b002      	add	sp, #8
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000

080026d0 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b089      	sub	sp, #36	; 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	240c      	movs	r4, #12
 80026da:	193b      	adds	r3, r7, r4
 80026dc:	0018      	movs	r0, r3
 80026de:	2314      	movs	r3, #20
 80026e0:	001a      	movs	r2, r3
 80026e2:	2100      	movs	r1, #0
 80026e4:	f008 f812 	bl	800a70c <memset>
  if(hcomp->Instance==COMP1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a10      	ldr	r2, [pc, #64]	; (8002730 <HAL_COMP_MspInit+0x60>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d11a      	bne.n	8002728 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_COMP_MspInit+0x64>)
 80026f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_COMP_MspInit+0x64>)
 80026f8:	2102      	movs	r1, #2
 80026fa:	430a      	orrs	r2, r1
 80026fc:	635a      	str	r2, [r3, #52]	; 0x34
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_COMP_MspInit+0x64>)
 8002700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002702:	2202      	movs	r2, #2
 8002704:	4013      	ands	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800270a:	193b      	adds	r3, r7, r4
 800270c:	2204      	movs	r2, #4
 800270e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002710:	193b      	adds	r3, r7, r4
 8002712:	2203      	movs	r2, #3
 8002714:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	193b      	adds	r3, r7, r4
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271c:	193b      	adds	r3, r7, r4
 800271e:	4a06      	ldr	r2, [pc, #24]	; (8002738 <HAL_COMP_MspInit+0x68>)
 8002720:	0019      	movs	r1, r3
 8002722:	0010      	movs	r0, r2
 8002724:	f001 faee 	bl	8003d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b009      	add	sp, #36	; 0x24
 800272e:	bd90      	pop	{r4, r7, pc}
 8002730:	40010200 	.word	0x40010200
 8002734:	40021000 	.word	0x40021000
 8002738:	50000400 	.word	0x50000400

0800273c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800273c:	b590      	push	{r4, r7, lr}
 800273e:	b08b      	sub	sp, #44	; 0x2c
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	2414      	movs	r4, #20
 8002746:	193b      	adds	r3, r7, r4
 8002748:	0018      	movs	r0, r3
 800274a:	2314      	movs	r3, #20
 800274c:	001a      	movs	r2, r3
 800274e:	2100      	movs	r1, #0
 8002750:	f007 ffdc 	bl	800a70c <memset>
  if(hi2c->Instance==I2C1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a20      	ldr	r2, [pc, #128]	; (80027dc <HAL_I2C_MspInit+0xa0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d139      	bne.n	80027d2 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <HAL_I2C_MspInit+0xa4>)
 8002760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002762:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <HAL_I2C_MspInit+0xa4>)
 8002764:	2101      	movs	r1, #1
 8002766:	430a      	orrs	r2, r1
 8002768:	635a      	str	r2, [r3, #52]	; 0x34
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_I2C_MspInit+0xa4>)
 800276c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276e:	2201      	movs	r2, #1
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002776:	193b      	adds	r3, r7, r4
 8002778:	22c0      	movs	r2, #192	; 0xc0
 800277a:	00d2      	lsls	r2, r2, #3
 800277c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800277e:	0021      	movs	r1, r4
 8002780:	187b      	adds	r3, r7, r1
 8002782:	2212      	movs	r2, #18
 8002784:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002786:	187b      	adds	r3, r7, r1
 8002788:	2201      	movs	r2, #1
 800278a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278c:	187b      	adds	r3, r7, r1
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002792:	187b      	adds	r3, r7, r1
 8002794:	2206      	movs	r2, #6
 8002796:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002798:	187a      	adds	r2, r7, r1
 800279a:	23a0      	movs	r3, #160	; 0xa0
 800279c:	05db      	lsls	r3, r3, #23
 800279e:	0011      	movs	r1, r2
 80027a0:	0018      	movs	r0, r3
 80027a2:	f001 faaf 	bl	8003d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027a6:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <HAL_I2C_MspInit+0xa4>)
 80027a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027aa:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <HAL_I2C_MspInit+0xa4>)
 80027ac:	2180      	movs	r1, #128	; 0x80
 80027ae:	0389      	lsls	r1, r1, #14
 80027b0:	430a      	orrs	r2, r1
 80027b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <HAL_I2C_MspInit+0xa4>)
 80027b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	039b      	lsls	r3, r3, #14
 80027bc:	4013      	ands	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2100      	movs	r1, #0
 80027c6:	2017      	movs	r0, #23
 80027c8:	f000 ffa2 	bl	8003710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80027cc:	2017      	movs	r0, #23
 80027ce:	f000 ffb4 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b00b      	add	sp, #44	; 0x2c
 80027d8:	bd90      	pop	{r4, r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	40005400 	.word	0x40005400
 80027e0:	40021000 	.word	0x40021000

080027e4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b08b      	sub	sp, #44	; 0x2c
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	2414      	movs	r4, #20
 80027ee:	193b      	adds	r3, r7, r4
 80027f0:	0018      	movs	r0, r3
 80027f2:	2314      	movs	r3, #20
 80027f4:	001a      	movs	r2, r3
 80027f6:	2100      	movs	r1, #0
 80027f8:	f007 ff88 	bl	800a70c <memset>
  if(hi2s->Instance==SPI1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a47      	ldr	r2, [pc, #284]	; (8002920 <HAL_I2S_MspInit+0x13c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d000      	beq.n	8002808 <HAL_I2S_MspInit+0x24>
 8002806:	e086      	b.n	8002916 <HAL_I2S_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002808:	4b46      	ldr	r3, [pc, #280]	; (8002924 <HAL_I2S_MspInit+0x140>)
 800280a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800280c:	4b45      	ldr	r3, [pc, #276]	; (8002924 <HAL_I2S_MspInit+0x140>)
 800280e:	2180      	movs	r1, #128	; 0x80
 8002810:	0149      	lsls	r1, r1, #5
 8002812:	430a      	orrs	r2, r1
 8002814:	641a      	str	r2, [r3, #64]	; 0x40
 8002816:	4b43      	ldr	r3, [pc, #268]	; (8002924 <HAL_I2S_MspInit+0x140>)
 8002818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	015b      	lsls	r3, r3, #5
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002824:	4b3f      	ldr	r3, [pc, #252]	; (8002924 <HAL_I2S_MspInit+0x140>)
 8002826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002828:	4b3e      	ldr	r3, [pc, #248]	; (8002924 <HAL_I2S_MspInit+0x140>)
 800282a:	2101      	movs	r1, #1
 800282c:	430a      	orrs	r2, r1
 800282e:	635a      	str	r2, [r3, #52]	; 0x34
 8002830:	4b3c      	ldr	r3, [pc, #240]	; (8002924 <HAL_I2S_MspInit+0x140>)
 8002832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002834:	2201      	movs	r2, #1
 8002836:	4013      	ands	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283c:	4b39      	ldr	r3, [pc, #228]	; (8002924 <HAL_I2S_MspInit+0x140>)
 800283e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002840:	4b38      	ldr	r3, [pc, #224]	; (8002924 <HAL_I2S_MspInit+0x140>)
 8002842:	2102      	movs	r1, #2
 8002844:	430a      	orrs	r2, r1
 8002846:	635a      	str	r2, [r3, #52]	; 0x34
 8002848:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_I2S_MspInit+0x140>)
 800284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284c:	2202      	movs	r2, #2
 800284e:	4013      	ands	r3, r2
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002854:	193b      	adds	r3, r7, r4
 8002856:	2280      	movs	r2, #128	; 0x80
 8002858:	0212      	lsls	r2, r2, #8
 800285a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	193b      	adds	r3, r7, r4
 800285e:	2202      	movs	r2, #2
 8002860:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	193b      	adds	r3, r7, r4
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002868:	193b      	adds	r3, r7, r4
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800286e:	193b      	adds	r3, r7, r4
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002874:	193a      	adds	r2, r7, r4
 8002876:	23a0      	movs	r3, #160	; 0xa0
 8002878:	05db      	lsls	r3, r3, #23
 800287a:	0011      	movs	r1, r2
 800287c:	0018      	movs	r0, r3
 800287e:	f001 fa41 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002882:	0021      	movs	r1, r4
 8002884:	187b      	adds	r3, r7, r1
 8002886:	2238      	movs	r2, #56	; 0x38
 8002888:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	187b      	adds	r3, r7, r1
 800288c:	2202      	movs	r2, #2
 800288e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	187b      	adds	r3, r7, r1
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	187b      	adds	r3, r7, r1
 8002898:	2200      	movs	r2, #0
 800289a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800289c:	187b      	adds	r3, r7, r1
 800289e:	2200      	movs	r2, #0
 80028a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a2:	187b      	adds	r3, r7, r1
 80028a4:	4a20      	ldr	r2, [pc, #128]	; (8002928 <HAL_I2S_MspInit+0x144>)
 80028a6:	0019      	movs	r1, r3
 80028a8:	0010      	movs	r0, r2
 80028aa:	f001 fa2b 	bl	8003d04 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80028ae:	4b1f      	ldr	r3, [pc, #124]	; (800292c <HAL_I2S_MspInit+0x148>)
 80028b0:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <HAL_I2S_MspInit+0x14c>)
 80028b2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80028b4:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_I2S_MspInit+0x148>)
 80028b6:	2211      	movs	r2, #17
 80028b8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_I2S_MspInit+0x148>)
 80028bc:	2210      	movs	r2, #16
 80028be:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c0:	4b1a      	ldr	r3, [pc, #104]	; (800292c <HAL_I2S_MspInit+0x148>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028c6:	4b19      	ldr	r3, [pc, #100]	; (800292c <HAL_I2S_MspInit+0x148>)
 80028c8:	2280      	movs	r2, #128	; 0x80
 80028ca:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028cc:	4b17      	ldr	r3, [pc, #92]	; (800292c <HAL_I2S_MspInit+0x148>)
 80028ce:	2280      	movs	r2, #128	; 0x80
 80028d0:	0052      	lsls	r2, r2, #1
 80028d2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_I2S_MspInit+0x148>)
 80028d6:	2280      	movs	r2, #128	; 0x80
 80028d8:	00d2      	lsls	r2, r2, #3
 80028da:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <HAL_I2S_MspInit+0x148>)
 80028de:	2200      	movs	r2, #0
 80028e0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028e2:	4b12      	ldr	r3, [pc, #72]	; (800292c <HAL_I2S_MspInit+0x148>)
 80028e4:	22c0      	movs	r2, #192	; 0xc0
 80028e6:	0192      	lsls	r2, r2, #6
 80028e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_I2S_MspInit+0x148>)
 80028ec:	0018      	movs	r0, r3
 80028ee:	f000 ff41 	bl	8003774 <HAL_DMA_Init>
 80028f2:	1e03      	subs	r3, r0, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 80028f6:	f7ff febd 	bl	8002674 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a0b      	ldr	r2, [pc, #44]	; (800292c <HAL_I2S_MspInit+0x148>)
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_I2S_MspInit+0x148>)
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002906:	2200      	movs	r2, #0
 8002908:	2100      	movs	r1, #0
 800290a:	2019      	movs	r0, #25
 800290c:	f000 ff00 	bl	8003710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002910:	2019      	movs	r0, #25
 8002912:	f000 ff12 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	46bd      	mov	sp, r7
 800291a:	b00b      	add	sp, #44	; 0x2c
 800291c:	bd90      	pop	{r4, r7, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	40013000 	.word	0x40013000
 8002924:	40021000 	.word	0x40021000
 8002928:	50000400 	.word	0x50000400
 800292c:	2000357c 	.word	0x2000357c
 8002930:	40020008 	.word	0x40020008

08002934 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b08b      	sub	sp, #44	; 0x2c
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	2414      	movs	r4, #20
 800293e:	193b      	adds	r3, r7, r4
 8002940:	0018      	movs	r0, r3
 8002942:	2314      	movs	r3, #20
 8002944:	001a      	movs	r2, r3
 8002946:	2100      	movs	r1, #0
 8002948:	f007 fee0 	bl	800a70c <memset>
  if(hspi->Instance==SPI2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a54      	ldr	r2, [pc, #336]	; (8002aa4 <HAL_SPI_MspInit+0x170>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d000      	beq.n	8002958 <HAL_SPI_MspInit+0x24>
 8002956:	e0a0      	b.n	8002a9a <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002958:	4b53      	ldr	r3, [pc, #332]	; (8002aa8 <HAL_SPI_MspInit+0x174>)
 800295a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800295c:	4b52      	ldr	r3, [pc, #328]	; (8002aa8 <HAL_SPI_MspInit+0x174>)
 800295e:	2180      	movs	r1, #128	; 0x80
 8002960:	01c9      	lsls	r1, r1, #7
 8002962:	430a      	orrs	r2, r1
 8002964:	63da      	str	r2, [r3, #60]	; 0x3c
 8002966:	4b50      	ldr	r3, [pc, #320]	; (8002aa8 <HAL_SPI_MspInit+0x174>)
 8002968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800296a:	2380      	movs	r3, #128	; 0x80
 800296c:	01db      	lsls	r3, r3, #7
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002974:	4b4c      	ldr	r3, [pc, #304]	; (8002aa8 <HAL_SPI_MspInit+0x174>)
 8002976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002978:	4b4b      	ldr	r3, [pc, #300]	; (8002aa8 <HAL_SPI_MspInit+0x174>)
 800297a:	2102      	movs	r1, #2
 800297c:	430a      	orrs	r2, r1
 800297e:	635a      	str	r2, [r3, #52]	; 0x34
 8002980:	4b49      	ldr	r3, [pc, #292]	; (8002aa8 <HAL_SPI_MspInit+0x174>)
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	2202      	movs	r2, #2
 8002986:	4013      	ands	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800298c:	193b      	adds	r3, r7, r4
 800298e:	2240      	movs	r2, #64	; 0x40
 8002990:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	193b      	adds	r3, r7, r4
 8002994:	2202      	movs	r2, #2
 8002996:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	193b      	adds	r3, r7, r4
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	193b      	adds	r3, r7, r4
 80029a0:	2200      	movs	r2, #0
 80029a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 80029a4:	193b      	adds	r3, r7, r4
 80029a6:	2204      	movs	r2, #4
 80029a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029aa:	193b      	adds	r3, r7, r4
 80029ac:	4a3f      	ldr	r2, [pc, #252]	; (8002aac <HAL_SPI_MspInit+0x178>)
 80029ae:	0019      	movs	r1, r3
 80029b0:	0010      	movs	r0, r2
 80029b2:	f001 f9a7 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80029b6:	0021      	movs	r1, r4
 80029b8:	187b      	adds	r3, r7, r1
 80029ba:	22c0      	movs	r2, #192	; 0xc0
 80029bc:	0052      	lsls	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	2202      	movs	r2, #2
 80029c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	187b      	adds	r3, r7, r1
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80029d2:	187b      	adds	r3, r7, r1
 80029d4:	2201      	movs	r2, #1
 80029d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d8:	187b      	adds	r3, r7, r1
 80029da:	4a34      	ldr	r2, [pc, #208]	; (8002aac <HAL_SPI_MspInit+0x178>)
 80029dc:	0019      	movs	r1, r3
 80029de:	0010      	movs	r0, r2
 80029e0:	f001 f990 	bl	8003d04 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 80029e4:	4b32      	ldr	r3, [pc, #200]	; (8002ab0 <HAL_SPI_MspInit+0x17c>)
 80029e6:	4a33      	ldr	r2, [pc, #204]	; (8002ab4 <HAL_SPI_MspInit+0x180>)
 80029e8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80029ea:	4b31      	ldr	r3, [pc, #196]	; (8002ab0 <HAL_SPI_MspInit+0x17c>)
 80029ec:	2212      	movs	r2, #18
 80029ee:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029f0:	4b2f      	ldr	r3, [pc, #188]	; (8002ab0 <HAL_SPI_MspInit+0x17c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029f6:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <HAL_SPI_MspInit+0x17c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029fc:	4b2c      	ldr	r3, [pc, #176]	; (8002ab0 <HAL_SPI_MspInit+0x17c>)
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a02:	4b2b      	ldr	r3, [pc, #172]	; (8002ab0 <HAL_SPI_MspInit+0x17c>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a08:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <HAL_SPI_MspInit+0x17c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002a0e:	4b28      	ldr	r3, [pc, #160]	; (8002ab0 <HAL_SPI_MspInit+0x17c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a14:	4b26      	ldr	r3, [pc, #152]	; (8002ab0 <HAL_SPI_MspInit+0x17c>)
 8002a16:	2280      	movs	r2, #128	; 0x80
 8002a18:	0192      	lsls	r2, r2, #6
 8002a1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002a1c:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <HAL_SPI_MspInit+0x17c>)
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f000 fea8 	bl	8003774 <HAL_DMA_Init>
 8002a24:	1e03      	subs	r3, r0, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8002a28:	f7ff fe24 	bl	8002674 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a20      	ldr	r2, [pc, #128]	; (8002ab0 <HAL_SPI_MspInit+0x17c>)
 8002a30:	659a      	str	r2, [r3, #88]	; 0x58
 8002a32:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <HAL_SPI_MspInit+0x17c>)
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <HAL_SPI_MspInit+0x184>)
 8002a3a:	4a20      	ldr	r2, [pc, #128]	; (8002abc <HAL_SPI_MspInit+0x188>)
 8002a3c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <HAL_SPI_MspInit+0x184>)
 8002a40:	2213      	movs	r2, #19
 8002a42:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a44:	4b1c      	ldr	r3, [pc, #112]	; (8002ab8 <HAL_SPI_MspInit+0x184>)
 8002a46:	2210      	movs	r2, #16
 8002a48:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_SPI_MspInit+0x184>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_SPI_MspInit+0x184>)
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a56:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_SPI_MspInit+0x184>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_SPI_MspInit+0x184>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002a62:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <HAL_SPI_MspInit+0x184>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a68:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <HAL_SPI_MspInit+0x184>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002a6e:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_SPI_MspInit+0x184>)
 8002a70:	0018      	movs	r0, r3
 8002a72:	f000 fe7f 	bl	8003774 <HAL_DMA_Init>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8002a7a:	f7ff fdfb 	bl	8002674 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <HAL_SPI_MspInit+0x184>)
 8002a82:	655a      	str	r2, [r3, #84]	; 0x54
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <HAL_SPI_MspInit+0x184>)
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	201a      	movs	r0, #26
 8002a90:	f000 fe3e 	bl	8003710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002a94:	201a      	movs	r0, #26
 8002a96:	f000 fe50 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b00b      	add	sp, #44	; 0x2c
 8002aa0:	bd90      	pop	{r4, r7, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	40003800 	.word	0x40003800
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	50000400 	.word	0x50000400
 8002ab0:	20003290 	.word	0x20003290
 8002ab4:	4002001c 	.word	0x4002001c
 8002ab8:	2000351c 	.word	0x2000351c
 8002abc:	40020030 	.word	0x40020030

08002ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <HAL_TIM_Base_MspInit+0x38>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d10d      	bne.n	8002aee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_TIM_Base_MspInit+0x3c>)
 8002ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_TIM_Base_MspInit+0x3c>)
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	0109      	lsls	r1, r1, #4
 8002adc:	430a      	orrs	r2, r1
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_TIM_Base_MspInit+0x3c>)
 8002ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b004      	add	sp, #16
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	40012c00 	.word	0x40012c00
 8002afc:	40021000 	.word	0x40021000

08002b00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b00:	b590      	push	{r4, r7, lr}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	240c      	movs	r4, #12
 8002b0a:	193b      	adds	r3, r7, r4
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	2314      	movs	r3, #20
 8002b10:	001a      	movs	r2, r3
 8002b12:	2100      	movs	r1, #0
 8002b14:	f007 fdfa 	bl	800a70c <memset>
  if(htim->Instance==TIM1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a15      	ldr	r2, [pc, #84]	; (8002b74 <HAL_TIM_MspPostInit+0x74>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d123      	bne.n	8002b6a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b22:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <HAL_TIM_MspPostInit+0x78>)
 8002b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <HAL_TIM_MspPostInit+0x78>)
 8002b28:	2101      	movs	r1, #1
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_TIM_MspPostInit+0x78>)
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	2201      	movs	r2, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b3a:	193b      	adds	r3, r7, r4
 8002b3c:	2280      	movs	r2, #128	; 0x80
 8002b3e:	0052      	lsls	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	0021      	movs	r1, r4
 8002b44:	187b      	adds	r3, r7, r1
 8002b46:	2202      	movs	r2, #2
 8002b48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b4a:	187b      	adds	r3, r7, r1
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b50:	187b      	adds	r3, r7, r1
 8002b52:	2203      	movs	r2, #3
 8002b54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002b56:	187b      	adds	r3, r7, r1
 8002b58:	2202      	movs	r2, #2
 8002b5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5c:	187a      	adds	r2, r7, r1
 8002b5e:	23a0      	movs	r3, #160	; 0xa0
 8002b60:	05db      	lsls	r3, r3, #23
 8002b62:	0011      	movs	r1, r2
 8002b64:	0018      	movs	r0, r3
 8002b66:	f001 f8cd 	bl	8003d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	b009      	add	sp, #36	; 0x24
 8002b70:	bd90      	pop	{r4, r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	40012c00 	.word	0x40012c00
 8002b78:	40021000 	.word	0x40021000

08002b7c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b08b      	sub	sp, #44	; 0x2c
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	2414      	movs	r4, #20
 8002b86:	193b      	adds	r3, r7, r4
 8002b88:	0018      	movs	r0, r3
 8002b8a:	2314      	movs	r3, #20
 8002b8c:	001a      	movs	r2, r3
 8002b8e:	2100      	movs	r1, #0
 8002b90:	f007 fdbc 	bl	800a70c <memset>
  if(husart->Instance==USART3)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a45      	ldr	r2, [pc, #276]	; (8002cb0 <HAL_USART_MspInit+0x134>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d000      	beq.n	8002ba0 <HAL_USART_MspInit+0x24>
 8002b9e:	e083      	b.n	8002ca8 <HAL_USART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ba0:	4b44      	ldr	r3, [pc, #272]	; (8002cb4 <HAL_USART_MspInit+0x138>)
 8002ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ba4:	4b43      	ldr	r3, [pc, #268]	; (8002cb4 <HAL_USART_MspInit+0x138>)
 8002ba6:	2180      	movs	r1, #128	; 0x80
 8002ba8:	02c9      	lsls	r1, r1, #11
 8002baa:	430a      	orrs	r2, r1
 8002bac:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bae:	4b41      	ldr	r3, [pc, #260]	; (8002cb4 <HAL_USART_MspInit+0x138>)
 8002bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	02db      	lsls	r3, r3, #11
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bbc:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <HAL_USART_MspInit+0x138>)
 8002bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bc0:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <HAL_USART_MspInit+0x138>)
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc8:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <HAL_USART_MspInit+0x138>)
 8002bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bcc:	2201      	movs	r2, #1
 8002bce:	4013      	ands	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd4:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <HAL_USART_MspInit+0x138>)
 8002bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd8:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <HAL_USART_MspInit+0x138>)
 8002bda:	2102      	movs	r1, #2
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	635a      	str	r2, [r3, #52]	; 0x34
 8002be0:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <HAL_USART_MspInit+0x138>)
 8002be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be4:	2202      	movs	r2, #2
 8002be6:	4013      	ands	r3, r2
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bec:	193b      	adds	r3, r7, r4
 8002bee:	2220      	movs	r2, #32
 8002bf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	193b      	adds	r3, r7, r4
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	193b      	adds	r3, r7, r4
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfe:	193b      	adds	r3, r7, r4
 8002c00:	2203      	movs	r2, #3
 8002c02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002c04:	193b      	adds	r3, r7, r4
 8002c06:	2204      	movs	r2, #4
 8002c08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0a:	193a      	adds	r2, r7, r4
 8002c0c:	23a0      	movs	r3, #160	; 0xa0
 8002c0e:	05db      	lsls	r3, r3, #23
 8002c10:	0011      	movs	r1, r2
 8002c12:	0018      	movs	r0, r3
 8002c14:	f001 f876 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c18:	0021      	movs	r1, r4
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	187b      	adds	r3, r7, r1
 8002c22:	2202      	movs	r2, #2
 8002c24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	187b      	adds	r3, r7, r1
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	2203      	movs	r2, #3
 8002c30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002c32:	187b      	adds	r3, r7, r1
 8002c34:	2204      	movs	r2, #4
 8002c36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c38:	187b      	adds	r3, r7, r1
 8002c3a:	4a1f      	ldr	r2, [pc, #124]	; (8002cb8 <HAL_USART_MspInit+0x13c>)
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	0010      	movs	r0, r2
 8002c40:	f001 f860 	bl	8003d04 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8002c44:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <HAL_USART_MspInit+0x140>)
 8002c46:	4a1e      	ldr	r2, [pc, #120]	; (8002cc0 <HAL_USART_MspInit+0x144>)
 8002c48:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <HAL_USART_MspInit+0x140>)
 8002c4c:	2237      	movs	r2, #55	; 0x37
 8002c4e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c50:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <HAL_USART_MspInit+0x140>)
 8002c52:	2210      	movs	r2, #16
 8002c54:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_USART_MspInit+0x140>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c5c:	4b17      	ldr	r3, [pc, #92]	; (8002cbc <HAL_USART_MspInit+0x140>)
 8002c5e:	2280      	movs	r2, #128	; 0x80
 8002c60:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_USART_MspInit+0x140>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c68:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <HAL_USART_MspInit+0x140>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_USART_MspInit+0x140>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_USART_MspInit+0x140>)
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	0192      	lsls	r2, r2, #6
 8002c7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <HAL_USART_MspInit+0x140>)
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f000 fd78 	bl	8003774 <HAL_DMA_Init>
 8002c84:	1e03      	subs	r3, r0, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8002c88:	f7ff fcf4 	bl	8002674 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a0b      	ldr	r2, [pc, #44]	; (8002cbc <HAL_USART_MspInit+0x140>)
 8002c90:	651a      	str	r2, [r3, #80]	; 0x50
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <HAL_USART_MspInit+0x140>)
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	201d      	movs	r0, #29
 8002c9e:	f000 fd37 	bl	8003710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002ca2:	201d      	movs	r0, #29
 8002ca4:	f000 fd49 	bl	800373a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b00b      	add	sp, #44	; 0x2c
 8002cae:	bd90      	pop	{r4, r7, pc}
 8002cb0:	40004800 	.word	0x40004800
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	50000400 	.word	0x50000400
 8002cbc:	200032f4 	.word	0x200032f4
 8002cc0:	40020044 	.word	0x40020044

08002cc4 <LL_USART_IsActiveFlag_FE>:
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d101      	bne.n	8002cdc <LL_USART_IsActiveFlag_FE+0x18>
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e000      	b.n	8002cde <LL_USART_IsActiveFlag_FE+0x1a>
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	0018      	movs	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b002      	add	sp, #8
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <LL_USART_IsActiveFlag_NE>:
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d101      	bne.n	8002cfe <LL_USART_IsActiveFlag_NE+0x18>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <LL_USART_IsActiveFlag_NE+0x1a>
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <LL_USART_IsActiveFlag_ORE>:
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	2208      	movs	r2, #8
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d101      	bne.n	8002d20 <LL_USART_IsActiveFlag_ORE+0x18>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <LL_USART_IsActiveFlag_ORE+0x1a>
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	0018      	movs	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b002      	add	sp, #8
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	2220      	movs	r2, #32
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d101      	bne.n	8002d42 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b002      	add	sp, #8
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d101      	bne.n	8002d64 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	0018      	movs	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b002      	add	sp, #8
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d7c:	e7fe      	b.n	8002d7c <HardFault_Handler+0x4>

08002d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d96:	f000 f959 	bl	800304c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <DMA1_Channel1_IRQHandler+0x14>)
 8002da6:	0018      	movs	r0, r3
 8002da8:	f000 fe5e 	bl	8003a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	2000357c 	.word	0x2000357c

08002db8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002dbc:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 fe52 	bl	8003a68 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f000 fe4e 	bl	8003a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	20003290 	.word	0x20003290
 8002dd8:	2000351c 	.word	0x2000351c

08002ddc <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8002de2:	0018      	movs	r0, r3
 8002de4:	f000 fe40 	bl	8003a68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	200032f4 	.word	0x200032f4

08002df4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <I2C1_IRQHandler+0x2c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	23e0      	movs	r3, #224	; 0xe0
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4013      	ands	r3, r2
 8002e04:	d004      	beq.n	8002e10 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <I2C1_IRQHandler+0x2c>)
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f001 f98f 	bl	800412c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002e0e:	e003      	b.n	8002e18 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <I2C1_IRQHandler+0x2c>)
 8002e12:	0018      	movs	r0, r3
 8002e14:	f001 f970 	bl	80040f8 <HAL_I2C_EV_IRQHandler>
}
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	20003230 	.word	0x20003230

08002e24 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <SPI1_IRQHandler+0x14>)
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f002 f8f2 	bl	8005014 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	2000345c 	.word	0x2000345c

08002e3c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <SPI2_IRQHandler+0x14>)
 8002e42:	0018      	movs	r0, r3
 8002e44:	f004 fbfc 	bl	8007640 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	200031b0 	.word	0x200031b0

08002e54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002e58:	4b25      	ldr	r3, [pc, #148]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002e5a:	6a1a      	ldr	r2, [r3, #32]
 8002e5c:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002e5e:	2108      	movs	r1, #8
 8002e60:	430a      	orrs	r2, r1
 8002e62:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002e64:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002e66:	6a1a      	ldr	r2, [r3, #32]
 8002e68:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002e6a:	2102      	movs	r1, #2
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002e70:	4b1f      	ldr	r3, [pc, #124]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002e72:	6a1a      	ldr	r2, [r3, #32]
 8002e74:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002e76:	2104      	movs	r1, #4
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002e7c:	4b1c      	ldr	r3, [pc, #112]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7ff ff53 	bl	8002d2a <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002e84:	1e03      	subs	r3, r0, #0
 8002e86:	d009      	beq.n	8002e9c <USART2_IRQHandler+0x48>
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7ff ff5e 	bl	8002d4c <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002e90:	1e03      	subs	r3, r0, #0
 8002e92:	d003      	beq.n	8002e9c <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002e94:	f7fe f870 	bl	8000f78 <USART2_RX_Callback>
	  {
 8002e98:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e9a:	e025      	b.n	8002ee8 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002e9e:	6a1a      	ldr	r2, [r3, #32]
 8002ea0:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002ea2:	2108      	movs	r1, #8
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002ea8:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f7ff ff2c 	bl	8002d08 <LL_USART_IsActiveFlag_ORE>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d008      	beq.n	8002ec6 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002eb4:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002eb6:	6a1a      	ldr	r2, [r3, #32]
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002eba:	2108      	movs	r1, #8
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ec4:	e010      	b.n	8002ee8 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7ff fefb 	bl	8002cc4 <LL_USART_IsActiveFlag_FE>
 8002ece:	1e03      	subs	r3, r0, #0
 8002ed0:	d002      	beq.n	8002ed8 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002ed2:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ed6:	e007      	b.n	8002ee8 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002eda:	0018      	movs	r0, r3
 8002edc:	f7ff ff03 	bl	8002ce6 <LL_USART_IsActiveFlag_NE>
 8002ee0:	1e03      	subs	r3, r0, #0
 8002ee2:	d001      	beq.n	8002ee8 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002ee4:	4b02      	ldr	r3, [pc, #8]	; (8002ef0 <USART2_IRQHandler+0x9c>)
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	40004400 	.word	0x40004400

08002ef4 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <USART3_4_LPUART1_IRQHandler+0x14>)
 8002efa:	0018      	movs	r0, r3
 8002efc:	f006 fa44 	bl	8009388 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	20003390 	.word	0x20003390

08002f0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <SystemInit+0x14>)
 8002f12:	2280      	movs	r2, #128	; 0x80
 8002f14:	0512      	lsls	r2, r2, #20
 8002f16:	609a      	str	r2, [r3, #8]
#endif
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f24:	480d      	ldr	r0, [pc, #52]	; (8002f5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f28:	f7ff fff0 	bl	8002f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f2c:	480c      	ldr	r0, [pc, #48]	; (8002f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f2e:	490d      	ldr	r1, [pc, #52]	; (8002f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f30:	4a0d      	ldr	r2, [pc, #52]	; (8002f68 <LoopForever+0xe>)
  movs r3, #0
 8002f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f34:	e002      	b.n	8002f3c <LoopCopyDataInit>

08002f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3a:	3304      	adds	r3, #4

08002f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f40:	d3f9      	bcc.n	8002f36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f42:	4a0a      	ldr	r2, [pc, #40]	; (8002f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f44:	4c0a      	ldr	r4, [pc, #40]	; (8002f70 <LoopForever+0x16>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f48:	e001      	b.n	8002f4e <LoopFillZerobss>

08002f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f4c:	3204      	adds	r2, #4

08002f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f50:	d3fb      	bcc.n	8002f4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f52:	f007 fbb7 	bl	800a6c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002f56:	f7fd faeb 	bl	8000530 <main>

08002f5a <LoopForever>:

LoopForever:
  b LoopForever
 8002f5a:	e7fe      	b.n	8002f5a <LoopForever>
  ldr   r0, =_estack
 8002f5c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f64:	20003140 	.word	0x20003140
  ldr r2, =_sidata
 8002f68:	0800a824 	.word	0x0800a824
  ldr r2, =_sbss
 8002f6c:	20003140 	.word	0x20003140
  ldr r4, =_ebss
 8002f70:	20005600 	.word	0x20005600

08002f74 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f74:	e7fe      	b.n	8002f74 <ADC1_COMP_IRQHandler>
	...

08002f78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f7e:	1dfb      	adds	r3, r7, #7
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_Init+0x3c>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_Init+0x3c>)
 8002f8a:	2180      	movs	r1, #128	; 0x80
 8002f8c:	0049      	lsls	r1, r1, #1
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f92:	2000      	movs	r0, #0
 8002f94:	f000 f810 	bl	8002fb8 <HAL_InitTick>
 8002f98:	1e03      	subs	r3, r0, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002f9c:	1dfb      	adds	r3, r7, #7
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e001      	b.n	8002fa8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002fa4:	f7ff fb6c 	bl	8002680 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fa8:	1dfb      	adds	r3, r7, #7
 8002faa:	781b      	ldrb	r3, [r3, #0]
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b002      	add	sp, #8
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40022000 	.word	0x40022000

08002fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fc0:	230f      	movs	r3, #15
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <HAL_InitTick+0x88>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d02b      	beq.n	8003028 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002fd0:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <HAL_InitTick+0x8c>)
 8002fd2:	681c      	ldr	r4, [r3, #0]
 8002fd4:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <HAL_InitTick+0x88>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	0019      	movs	r1, r3
 8002fda:	23fa      	movs	r3, #250	; 0xfa
 8002fdc:	0098      	lsls	r0, r3, #2
 8002fde:	f7fd f891 	bl	8000104 <__udivsi3>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	0020      	movs	r0, r4
 8002fe8:	f7fd f88c 	bl	8000104 <__udivsi3>
 8002fec:	0003      	movs	r3, r0
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 fbb3 	bl	800375a <HAL_SYSTICK_Config>
 8002ff4:	1e03      	subs	r3, r0, #0
 8002ff6:	d112      	bne.n	800301e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d80a      	bhi.n	8003014 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	2301      	movs	r3, #1
 8003002:	425b      	negs	r3, r3
 8003004:	2200      	movs	r2, #0
 8003006:	0018      	movs	r0, r3
 8003008:	f000 fb82 	bl	8003710 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <HAL_InitTick+0x90>)
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	e00d      	b.n	8003030 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003014:	230f      	movs	r3, #15
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	e008      	b.n	8003030 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800301e:	230f      	movs	r3, #15
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]
 8003026:	e003      	b.n	8003030 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003028:	230f      	movs	r3, #15
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003030:	230f      	movs	r3, #15
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	781b      	ldrb	r3, [r3, #0]
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b005      	add	sp, #20
 800303c:	bd90      	pop	{r4, r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	2000313c 	.word	0x2000313c
 8003044:	20003134 	.word	0x20003134
 8003048:	20003138 	.word	0x20003138

0800304c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_IncTick+0x1c>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	001a      	movs	r2, r3
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_IncTick+0x20>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	18d2      	adds	r2, r2, r3
 800305c:	4b03      	ldr	r3, [pc, #12]	; (800306c <HAL_IncTick+0x20>)
 800305e:	601a      	str	r2, [r3, #0]
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	2000313c 	.word	0x2000313c
 800306c:	200055fc 	.word	0x200055fc

08003070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  return uwTick;
 8003074:	4b02      	ldr	r3, [pc, #8]	; (8003080 <HAL_GetTick+0x10>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	0018      	movs	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	200055fc 	.word	0x200055fc

08003084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800308c:	f7ff fff0 	bl	8003070 <HAL_GetTick>
 8003090:	0003      	movs	r3, r0
 8003092:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3301      	adds	r3, #1
 800309c:	d005      	beq.n	80030aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <HAL_Delay+0x44>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	001a      	movs	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	f7ff ffe0 	bl	8003070 <HAL_GetTick>
 80030b0:	0002      	movs	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d8f7      	bhi.n	80030ac <HAL_Delay+0x28>
  {
  }
}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b004      	add	sp, #16
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	2000313c 	.word	0x2000313c

080030cc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a06      	ldr	r2, [pc, #24]	; (80030f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80030da:	4013      	ands	r3, r2
 80030dc:	0019      	movs	r1, r3
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]
}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b002      	add	sp, #8
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	40010000 	.word	0x40010000
 80030f4:	fffff9ff 	.word	0xfffff9ff

080030f8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003100:	4a05      	ldr	r2, [pc, #20]	; (8003118 <LL_EXTI_EnableIT_0_31+0x20>)
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	58d2      	ldr	r2, [r2, r3]
 8003106:	4904      	ldr	r1, [pc, #16]	; (8003118 <LL_EXTI_EnableIT_0_31+0x20>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4313      	orrs	r3, r2
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	508b      	str	r3, [r1, r2]
}
 8003110:	46c0      	nop			; (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	b002      	add	sp, #8
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021800 	.word	0x40021800

0800311c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003124:	4a06      	ldr	r2, [pc, #24]	; (8003140 <LL_EXTI_DisableIT_0_31+0x24>)
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	58d3      	ldr	r3, [r2, r3]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	43d2      	mvns	r2, r2
 800312e:	4904      	ldr	r1, [pc, #16]	; (8003140 <LL_EXTI_DisableIT_0_31+0x24>)
 8003130:	4013      	ands	r3, r2
 8003132:	2280      	movs	r2, #128	; 0x80
 8003134:	508b      	str	r3, [r1, r2]
}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	46bd      	mov	sp, r7
 800313a:	b002      	add	sp, #8
 800313c:	bd80      	pop	{r7, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	40021800 	.word	0x40021800

08003144 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800314c:	4a05      	ldr	r2, [pc, #20]	; (8003164 <LL_EXTI_EnableEvent_0_31+0x20>)
 800314e:	2384      	movs	r3, #132	; 0x84
 8003150:	58d2      	ldr	r2, [r2, r3]
 8003152:	4904      	ldr	r1, [pc, #16]	; (8003164 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4313      	orrs	r3, r2
 8003158:	2284      	movs	r2, #132	; 0x84
 800315a:	508b      	str	r3, [r1, r2]

}
 800315c:	46c0      	nop			; (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	b002      	add	sp, #8
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40021800 	.word	0x40021800

08003168 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003170:	4a06      	ldr	r2, [pc, #24]	; (800318c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003172:	2384      	movs	r3, #132	; 0x84
 8003174:	58d3      	ldr	r3, [r2, r3]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	43d2      	mvns	r2, r2
 800317a:	4904      	ldr	r1, [pc, #16]	; (800318c <LL_EXTI_DisableEvent_0_31+0x24>)
 800317c:	4013      	ands	r3, r2
 800317e:	2284      	movs	r2, #132	; 0x84
 8003180:	508b      	str	r3, [r1, r2]
}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	46bd      	mov	sp, r7
 8003186:	b002      	add	sp, #8
 8003188:	bd80      	pop	{r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	40021800 	.word	0x40021800

08003190 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800319a:	6819      	ldr	r1, [r3, #0]
 800319c:	4b03      	ldr	r3, [pc, #12]	; (80031ac <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b002      	add	sp, #8
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021800 	.word	0x40021800

080031b0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	43d9      	mvns	r1, r3
 80031c0:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80031c2:	400a      	ands	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]

}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b002      	add	sp, #8
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	40021800 	.word	0x40021800

080031d4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
}
 80031e8:	46c0      	nop			; (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b002      	add	sp, #8
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021800 	.word	0x40021800

080031f4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80031fc:	4b05      	ldr	r3, [pc, #20]	; (8003214 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	43d9      	mvns	r1, r3
 8003204:	4b03      	ldr	r3, [pc, #12]	; (8003214 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003206:	400a      	ands	r2, r1
 8003208:	605a      	str	r2, [r3, #4]
}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b002      	add	sp, #8
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	40021800 	.word	0x40021800

08003218 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8003220:	4b03      	ldr	r3, [pc, #12]	; (8003230 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]
}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	46bd      	mov	sp, r7
 800322a:	b002      	add	sp, #8
 800322c:	bd80      	pop	{r7, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	40021800 	.word	0x40021800

08003234 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 800323c:	4b03      	ldr	r3, [pc, #12]	; (800324c <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	60da      	str	r2, [r3, #12]
}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b002      	add	sp, #8
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	40021800 	.word	0x40021800

08003250 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800325c:	211f      	movs	r1, #31
 800325e:	187b      	adds	r3, r7, r1
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 800326a:	187b      	adds	r3, r7, r1
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e13d      	b.n	80034ee <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	0fdb      	lsrs	r3, r3, #31
 800327a:	07da      	lsls	r2, r3, #31
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	061b      	lsls	r3, r3, #24
 8003280:	429a      	cmp	r2, r3
 8003282:	d104      	bne.n	800328e <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8003284:	231f      	movs	r3, #31
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e12f      	b.n	80034ee <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2229      	movs	r2, #41	; 0x29
 8003292:	5c9b      	ldrb	r3, [r3, r2]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2228      	movs	r2, #40	; 0x28
 800329e:	2100      	movs	r1, #0
 80032a0:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	0018      	movs	r0, r3
 80032ac:	f7ff fa10 	bl	80026d0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2230      	movs	r2, #48	; 0x30
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a85      	ldr	r2, [pc, #532]	; (80034fc <HAL_COMP_Init+0x2ac>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	0019      	movs	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	429a      	cmp	r2, r3
 8003300:	d10d      	bne.n	800331e <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003302:	4b7f      	ldr	r3, [pc, #508]	; (8003500 <HAL_COMP_Init+0x2b0>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b7e      	ldr	r3, [pc, #504]	; (8003500 <HAL_COMP_Init+0x2b0>)
 8003308:	497e      	ldr	r1, [pc, #504]	; (8003504 <HAL_COMP_Init+0x2b4>)
 800330a:	400a      	ands	r2, r1
 800330c:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800330e:	4b7c      	ldr	r3, [pc, #496]	; (8003500 <HAL_COMP_Init+0x2b0>)
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	4b7b      	ldr	r3, [pc, #492]	; (8003500 <HAL_COMP_Init+0x2b0>)
 8003314:	2180      	movs	r1, #128	; 0x80
 8003316:	0109      	lsls	r1, r1, #4
 8003318:	430a      	orrs	r2, r1
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	e01f      	b.n	800335e <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	23c0      	movs	r3, #192	; 0xc0
 8003324:	015b      	lsls	r3, r3, #5
 8003326:	429a      	cmp	r2, r3
 8003328:	d10d      	bne.n	8003346 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800332a:	4b75      	ldr	r3, [pc, #468]	; (8003500 <HAL_COMP_Init+0x2b0>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4b74      	ldr	r3, [pc, #464]	; (8003500 <HAL_COMP_Init+0x2b0>)
 8003330:	2180      	movs	r1, #128	; 0x80
 8003332:	0109      	lsls	r1, r1, #4
 8003334:	430a      	orrs	r2, r1
 8003336:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003338:	4b71      	ldr	r3, [pc, #452]	; (8003500 <HAL_COMP_Init+0x2b0>)
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	4b70      	ldr	r3, [pc, #448]	; (8003500 <HAL_COMP_Init+0x2b0>)
 800333e:	4971      	ldr	r1, [pc, #452]	; (8003504 <HAL_COMP_Init+0x2b4>)
 8003340:	400a      	ands	r2, r1
 8003342:	605a      	str	r2, [r3, #4]
 8003344:	e00b      	b.n	800335e <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003346:	4b6e      	ldr	r3, [pc, #440]	; (8003500 <HAL_COMP_Init+0x2b0>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4b6d      	ldr	r3, [pc, #436]	; (8003500 <HAL_COMP_Init+0x2b0>)
 800334c:	496d      	ldr	r1, [pc, #436]	; (8003504 <HAL_COMP_Init+0x2b4>)
 800334e:	400a      	ands	r2, r1
 8003350:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003352:	4b6b      	ldr	r3, [pc, #428]	; (8003500 <HAL_COMP_Init+0x2b0>)
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	4b6a      	ldr	r3, [pc, #424]	; (8003500 <HAL_COMP_Init+0x2b0>)
 8003358:	496a      	ldr	r1, [pc, #424]	; (8003504 <HAL_COMP_Init+0x2b4>)
 800335a:	400a      	ands	r2, r1
 800335c:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	22a0      	movs	r2, #160	; 0xa0
 8003364:	01d2      	lsls	r2, r2, #7
 8003366:	4293      	cmp	r3, r2
 8003368:	d017      	beq.n	800339a <HAL_COMP_Init+0x14a>
 800336a:	22a0      	movs	r2, #160	; 0xa0
 800336c:	01d2      	lsls	r2, r2, #7
 800336e:	4293      	cmp	r3, r2
 8003370:	d830      	bhi.n	80033d4 <HAL_COMP_Init+0x184>
 8003372:	2b01      	cmp	r3, #1
 8003374:	d01f      	beq.n	80033b6 <HAL_COMP_Init+0x166>
 8003376:	2280      	movs	r2, #128	; 0x80
 8003378:	01d2      	lsls	r2, r2, #7
 800337a:	4293      	cmp	r3, r2
 800337c:	d12a      	bne.n	80033d4 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800337e:	4b60      	ldr	r3, [pc, #384]	; (8003500 <HAL_COMP_Init+0x2b0>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <HAL_COMP_Init+0x2b0>)
 8003384:	2180      	movs	r1, #128	; 0x80
 8003386:	01c9      	lsls	r1, r1, #7
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800338c:	4b5c      	ldr	r3, [pc, #368]	; (8003500 <HAL_COMP_Init+0x2b0>)
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	4b5b      	ldr	r3, [pc, #364]	; (8003500 <HAL_COMP_Init+0x2b0>)
 8003392:	495d      	ldr	r1, [pc, #372]	; (8003508 <HAL_COMP_Init+0x2b8>)
 8003394:	400a      	ands	r2, r1
 8003396:	605a      	str	r2, [r3, #4]
        break;
 8003398:	e029      	b.n	80033ee <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800339a:	4b59      	ldr	r3, [pc, #356]	; (8003500 <HAL_COMP_Init+0x2b0>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b58      	ldr	r3, [pc, #352]	; (8003500 <HAL_COMP_Init+0x2b0>)
 80033a0:	4959      	ldr	r1, [pc, #356]	; (8003508 <HAL_COMP_Init+0x2b8>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80033a6:	4b56      	ldr	r3, [pc, #344]	; (8003500 <HAL_COMP_Init+0x2b0>)
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	4b55      	ldr	r3, [pc, #340]	; (8003500 <HAL_COMP_Init+0x2b0>)
 80033ac:	2180      	movs	r1, #128	; 0x80
 80033ae:	01c9      	lsls	r1, r1, #7
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]
        break;
 80033b4:	e01b      	b.n	80033ee <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80033b6:	4b52      	ldr	r3, [pc, #328]	; (8003500 <HAL_COMP_Init+0x2b0>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4b51      	ldr	r3, [pc, #324]	; (8003500 <HAL_COMP_Init+0x2b0>)
 80033bc:	2180      	movs	r1, #128	; 0x80
 80033be:	01c9      	lsls	r1, r1, #7
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80033c4:	4b4e      	ldr	r3, [pc, #312]	; (8003500 <HAL_COMP_Init+0x2b0>)
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	4b4d      	ldr	r3, [pc, #308]	; (8003500 <HAL_COMP_Init+0x2b0>)
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	01c9      	lsls	r1, r1, #7
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
        break;
 80033d2:	e00c      	b.n	80033ee <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80033d4:	4b4a      	ldr	r3, [pc, #296]	; (8003500 <HAL_COMP_Init+0x2b0>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b49      	ldr	r3, [pc, #292]	; (8003500 <HAL_COMP_Init+0x2b0>)
 80033da:	494b      	ldr	r1, [pc, #300]	; (8003508 <HAL_COMP_Init+0x2b8>)
 80033dc:	400a      	ands	r2, r1
 80033de:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80033e0:	4b47      	ldr	r3, [pc, #284]	; (8003500 <HAL_COMP_Init+0x2b0>)
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	4b46      	ldr	r3, [pc, #280]	; (8003500 <HAL_COMP_Init+0x2b0>)
 80033e6:	4948      	ldr	r1, [pc, #288]	; (8003508 <HAL_COMP_Init+0x2b8>)
 80033e8:	400a      	ands	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]
        break;
 80033ec:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2230      	movs	r2, #48	; 0x30
 80033f6:	4013      	ands	r3, r2
 80033f8:	d016      	beq.n	8003428 <HAL_COMP_Init+0x1d8>
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d113      	bne.n	8003428 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003400:	4b42      	ldr	r3, [pc, #264]	; (800350c <HAL_COMP_Init+0x2bc>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4942      	ldr	r1, [pc, #264]	; (8003510 <HAL_COMP_Init+0x2c0>)
 8003406:	0018      	movs	r0, r3
 8003408:	f7fc fe7c 	bl	8000104 <__udivsi3>
 800340c:	0003      	movs	r3, r0
 800340e:	001a      	movs	r2, r3
 8003410:	0013      	movs	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	189b      	adds	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800341a:	e002      	b.n	8003422 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3b01      	subs	r3, #1
 8003420:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f9      	bne.n	800341c <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a34      	ldr	r2, [pc, #208]	; (8003500 <HAL_COMP_Init+0x2b0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d102      	bne.n	8003438 <HAL_COMP_Init+0x1e8>
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	029b      	lsls	r3, r3, #10
 8003436:	e001      	b.n	800343c <HAL_COMP_Init+0x1ec>
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	02db      	lsls	r3, r3, #11
 800343c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	2203      	movs	r2, #3
 8003444:	4013      	ands	r3, r2
 8003446:	d040      	beq.n	80034ca <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	2210      	movs	r2, #16
 800344e:	4013      	ands	r3, r2
 8003450:	d004      	beq.n	800345c <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	0018      	movs	r0, r3
 8003456:	f7ff fe9b 	bl	8003190 <LL_EXTI_EnableRisingTrig_0_31>
 800345a:	e003      	b.n	8003464 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	0018      	movs	r0, r3
 8003460:	f7ff fea6 	bl	80031b0 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	2220      	movs	r2, #32
 800346a:	4013      	ands	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	0018      	movs	r0, r3
 8003472:	f7ff feaf 	bl	80031d4 <LL_EXTI_EnableFallingTrig_0_31>
 8003476:	e003      	b.n	8003480 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	0018      	movs	r0, r3
 800347c:	f7ff feba 	bl	80031f4 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	0018      	movs	r0, r3
 8003484:	f7ff fed6 	bl	8003234 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	0018      	movs	r0, r3
 800348c:	f7ff fec4 	bl	8003218 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2202      	movs	r2, #2
 8003496:	4013      	ands	r3, r2
 8003498:	d004      	beq.n	80034a4 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	0018      	movs	r0, r3
 800349e:	f7ff fe51 	bl	8003144 <LL_EXTI_EnableEvent_0_31>
 80034a2:	e003      	b.n	80034ac <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	0018      	movs	r0, r3
 80034a8:	f7ff fe5e 	bl	8003168 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	2201      	movs	r2, #1
 80034b2:	4013      	ands	r3, r2
 80034b4:	d004      	beq.n	80034c0 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff fe1d 	bl	80030f8 <LL_EXTI_EnableIT_0_31>
 80034be:	e00c      	b.n	80034da <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7ff fe2a 	bl	800311c <LL_EXTI_DisableIT_0_31>
 80034c8:	e007      	b.n	80034da <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff fe4b 	bl	8003168 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	0018      	movs	r0, r3
 80034d6:	f7ff fe21 	bl	800311c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2229      	movs	r2, #41	; 0x29
 80034de:	5c9b      	ldrb	r3, [r3, r2]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2229      	movs	r2, #41	; 0x29
 80034ea:	2101      	movs	r1, #1
 80034ec:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80034ee:	231f      	movs	r3, #31
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	781b      	ldrb	r3, [r3, #0]
}
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b008      	add	sp, #32
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	fe00740f 	.word	0xfe00740f
 8003500:	40010200 	.word	0x40010200
 8003504:	fffff7ff 	.word	0xfffff7ff
 8003508:	ffffbfff 	.word	0xffffbfff
 800350c:	20003134 	.word	0x20003134
 8003510:	00030d40 	.word	0x00030d40

08003514 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800351c:	2300      	movs	r3, #0
 800351e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003520:	210f      	movs	r1, #15
 8003522:	187b      	adds	r3, r7, r1
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d103      	bne.n	8003536 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 800352e:	187b      	adds	r3, r7, r1
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]
 8003534:	e034      	b.n	80035a0 <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	0fdb      	lsrs	r3, r3, #31
 800353e:	07da      	lsls	r2, r3, #31
 8003540:	2380      	movs	r3, #128	; 0x80
 8003542:	061b      	lsls	r3, r3, #24
 8003544:	429a      	cmp	r2, r3
 8003546:	d104      	bne.n	8003552 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8003548:	230f      	movs	r3, #15
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	2201      	movs	r2, #1
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	e026      	b.n	80035a0 <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2229      	movs	r2, #41	; 0x29
 8003556:	5c9b      	ldrb	r3, [r3, r2]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d11c      	bne.n	8003598 <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2101      	movs	r1, #1
 800356a:	430a      	orrs	r2, r1
 800356c:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2229      	movs	r2, #41	; 0x29
 8003572:	2102      	movs	r1, #2
 8003574:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003576:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <HAL_COMP_Start+0x9c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	490e      	ldr	r1, [pc, #56]	; (80035b4 <HAL_COMP_Start+0xa0>)
 800357c:	0018      	movs	r0, r3
 800357e:	f7fc fdc1 	bl	8000104 <__udivsi3>
 8003582:	0003      	movs	r3, r0
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003588:	e002      	b.n	8003590 <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	3b01      	subs	r3, #1
 800358e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f9      	bne.n	800358a <HAL_COMP_Start+0x76>
 8003596:	e003      	b.n	80035a0 <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003598:	230f      	movs	r3, #15
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80035a0:	230f      	movs	r3, #15
 80035a2:	18fb      	adds	r3, r7, r3
 80035a4:	781b      	ldrb	r3, [r3, #0]
}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b004      	add	sp, #16
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	20003134 	.word	0x20003134
 80035b4:	00030d40 	.word	0x00030d40

080035b8 <__NVIC_EnableIRQ>:
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	0002      	movs	r2, r0
 80035c0:	1dfb      	adds	r3, r7, #7
 80035c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035c4:	1dfb      	adds	r3, r7, #7
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b7f      	cmp	r3, #127	; 0x7f
 80035ca:	d809      	bhi.n	80035e0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035cc:	1dfb      	adds	r3, r7, #7
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	001a      	movs	r2, r3
 80035d2:	231f      	movs	r3, #31
 80035d4:	401a      	ands	r2, r3
 80035d6:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <__NVIC_EnableIRQ+0x30>)
 80035d8:	2101      	movs	r1, #1
 80035da:	4091      	lsls	r1, r2
 80035dc:	000a      	movs	r2, r1
 80035de:	601a      	str	r2, [r3, #0]
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b002      	add	sp, #8
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	e000e100 	.word	0xe000e100

080035ec <__NVIC_SetPriority>:
{
 80035ec:	b590      	push	{r4, r7, lr}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	0002      	movs	r2, r0
 80035f4:	6039      	str	r1, [r7, #0]
 80035f6:	1dfb      	adds	r3, r7, #7
 80035f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035fa:	1dfb      	adds	r3, r7, #7
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b7f      	cmp	r3, #127	; 0x7f
 8003600:	d828      	bhi.n	8003654 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003602:	4a2f      	ldr	r2, [pc, #188]	; (80036c0 <__NVIC_SetPriority+0xd4>)
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	b25b      	sxtb	r3, r3
 800360a:	089b      	lsrs	r3, r3, #2
 800360c:	33c0      	adds	r3, #192	; 0xc0
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	589b      	ldr	r3, [r3, r2]
 8003612:	1dfa      	adds	r2, r7, #7
 8003614:	7812      	ldrb	r2, [r2, #0]
 8003616:	0011      	movs	r1, r2
 8003618:	2203      	movs	r2, #3
 800361a:	400a      	ands	r2, r1
 800361c:	00d2      	lsls	r2, r2, #3
 800361e:	21ff      	movs	r1, #255	; 0xff
 8003620:	4091      	lsls	r1, r2
 8003622:	000a      	movs	r2, r1
 8003624:	43d2      	mvns	r2, r2
 8003626:	401a      	ands	r2, r3
 8003628:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	019b      	lsls	r3, r3, #6
 800362e:	22ff      	movs	r2, #255	; 0xff
 8003630:	401a      	ands	r2, r3
 8003632:	1dfb      	adds	r3, r7, #7
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	0018      	movs	r0, r3
 8003638:	2303      	movs	r3, #3
 800363a:	4003      	ands	r3, r0
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003640:	481f      	ldr	r0, [pc, #124]	; (80036c0 <__NVIC_SetPriority+0xd4>)
 8003642:	1dfb      	adds	r3, r7, #7
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	b25b      	sxtb	r3, r3
 8003648:	089b      	lsrs	r3, r3, #2
 800364a:	430a      	orrs	r2, r1
 800364c:	33c0      	adds	r3, #192	; 0xc0
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	501a      	str	r2, [r3, r0]
}
 8003652:	e031      	b.n	80036b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003654:	4a1b      	ldr	r2, [pc, #108]	; (80036c4 <__NVIC_SetPriority+0xd8>)
 8003656:	1dfb      	adds	r3, r7, #7
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	0019      	movs	r1, r3
 800365c:	230f      	movs	r3, #15
 800365e:	400b      	ands	r3, r1
 8003660:	3b08      	subs	r3, #8
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	3306      	adds	r3, #6
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	18d3      	adds	r3, r2, r3
 800366a:	3304      	adds	r3, #4
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	1dfa      	adds	r2, r7, #7
 8003670:	7812      	ldrb	r2, [r2, #0]
 8003672:	0011      	movs	r1, r2
 8003674:	2203      	movs	r2, #3
 8003676:	400a      	ands	r2, r1
 8003678:	00d2      	lsls	r2, r2, #3
 800367a:	21ff      	movs	r1, #255	; 0xff
 800367c:	4091      	lsls	r1, r2
 800367e:	000a      	movs	r2, r1
 8003680:	43d2      	mvns	r2, r2
 8003682:	401a      	ands	r2, r3
 8003684:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	019b      	lsls	r3, r3, #6
 800368a:	22ff      	movs	r2, #255	; 0xff
 800368c:	401a      	ands	r2, r3
 800368e:	1dfb      	adds	r3, r7, #7
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	0018      	movs	r0, r3
 8003694:	2303      	movs	r3, #3
 8003696:	4003      	ands	r3, r0
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800369c:	4809      	ldr	r0, [pc, #36]	; (80036c4 <__NVIC_SetPriority+0xd8>)
 800369e:	1dfb      	adds	r3, r7, #7
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	001c      	movs	r4, r3
 80036a4:	230f      	movs	r3, #15
 80036a6:	4023      	ands	r3, r4
 80036a8:	3b08      	subs	r3, #8
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	430a      	orrs	r2, r1
 80036ae:	3306      	adds	r3, #6
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	18c3      	adds	r3, r0, r3
 80036b4:	3304      	adds	r3, #4
 80036b6:	601a      	str	r2, [r3, #0]
}
 80036b8:	46c0      	nop			; (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b003      	add	sp, #12
 80036be:	bd90      	pop	{r4, r7, pc}
 80036c0:	e000e100 	.word	0xe000e100
 80036c4:	e000ed00 	.word	0xe000ed00

080036c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	1e5a      	subs	r2, r3, #1
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	045b      	lsls	r3, r3, #17
 80036d8:	429a      	cmp	r2, r3
 80036da:	d301      	bcc.n	80036e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036dc:	2301      	movs	r3, #1
 80036de:	e010      	b.n	8003702 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <SysTick_Config+0x44>)
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	3a01      	subs	r2, #1
 80036e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036e8:	2301      	movs	r3, #1
 80036ea:	425b      	negs	r3, r3
 80036ec:	2103      	movs	r1, #3
 80036ee:	0018      	movs	r0, r3
 80036f0:	f7ff ff7c 	bl	80035ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <SysTick_Config+0x44>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fa:	4b04      	ldr	r3, [pc, #16]	; (800370c <SysTick_Config+0x44>)
 80036fc:	2207      	movs	r2, #7
 80036fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003700:	2300      	movs	r3, #0
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b002      	add	sp, #8
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	e000e010 	.word	0xe000e010

08003710 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	210f      	movs	r1, #15
 800371c:	187b      	adds	r3, r7, r1
 800371e:	1c02      	adds	r2, r0, #0
 8003720:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	187b      	adds	r3, r7, r1
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	b25b      	sxtb	r3, r3
 800372a:	0011      	movs	r1, r2
 800372c:	0018      	movs	r0, r3
 800372e:	f7ff ff5d 	bl	80035ec <__NVIC_SetPriority>
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	46bd      	mov	sp, r7
 8003736:	b004      	add	sp, #16
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	0002      	movs	r2, r0
 8003742:	1dfb      	adds	r3, r7, #7
 8003744:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003746:	1dfb      	adds	r3, r7, #7
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	b25b      	sxtb	r3, r3
 800374c:	0018      	movs	r0, r3
 800374e:	f7ff ff33 	bl	80035b8 <__NVIC_EnableIRQ>
}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	46bd      	mov	sp, r7
 8003756:	b002      	add	sp, #8
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	f7ff ffaf 	bl	80036c8 <SysTick_Config>
 800376a:	0003      	movs	r3, r0
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e077      	b.n	8003876 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a3d      	ldr	r2, [pc, #244]	; (8003880 <HAL_DMA_Init+0x10c>)
 800378c:	4694      	mov	ip, r2
 800378e:	4463      	add	r3, ip
 8003790:	2114      	movs	r1, #20
 8003792:	0018      	movs	r0, r3
 8003794:	f7fc fcb6 	bl	8000104 <__udivsi3>
 8003798:	0003      	movs	r3, r0
 800379a:	009a      	lsls	r2, r3, #2
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2225      	movs	r2, #37	; 0x25
 80037a4:	2102      	movs	r1, #2
 80037a6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4934      	ldr	r1, [pc, #208]	; (8003884 <HAL_DMA_Init+0x110>)
 80037b4:	400a      	ands	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6819      	ldr	r1, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f000 fa37 	bl	8003c64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	2380      	movs	r3, #128	; 0x80
 80037fc:	01db      	lsls	r3, r3, #7
 80037fe:	429a      	cmp	r2, r3
 8003800:	d102      	bne.n	8003808 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	213f      	movs	r1, #63	; 0x3f
 8003812:	400a      	ands	r2, r1
 8003814:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800381e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d011      	beq.n	800384c <HAL_DMA_Init+0xd8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b04      	cmp	r3, #4
 800382e:	d80d      	bhi.n	800384c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	0018      	movs	r0, r3
 8003834:	f000 fa42 	bl	8003cbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	e008      	b.n	800385e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2225      	movs	r2, #37	; 0x25
 8003868:	2101      	movs	r1, #1
 800386a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2224      	movs	r2, #36	; 0x24
 8003870:	2100      	movs	r1, #0
 8003872:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b002      	add	sp, #8
 800387c:	bd80      	pop	{r7, pc}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	bffdfff8 	.word	0xbffdfff8
 8003884:	ffff800f 	.word	0xffff800f

08003888 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003896:	2317      	movs	r3, #23
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2224      	movs	r2, #36	; 0x24
 80038a2:	5c9b      	ldrb	r3, [r3, r2]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_DMA_Start_IT+0x24>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e06f      	b.n	800398c <HAL_DMA_Start_IT+0x104>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2224      	movs	r2, #36	; 0x24
 80038b0:	2101      	movs	r1, #1
 80038b2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2225      	movs	r2, #37	; 0x25
 80038b8:	5c9b      	ldrb	r3, [r3, r2]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d157      	bne.n	8003970 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2225      	movs	r2, #37	; 0x25
 80038c4:	2102      	movs	r1, #2
 80038c6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2101      	movs	r1, #1
 80038da:	438a      	bics	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f97d 	bl	8003be4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	210e      	movs	r1, #14
 80038fe:	430a      	orrs	r2, r1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e00f      	b.n	8003924 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2104      	movs	r1, #4
 8003910:	438a      	bics	r2, r1
 8003912:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	210a      	movs	r1, #10
 8003920:	430a      	orrs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	025b      	lsls	r3, r3, #9
 800392e:	4013      	ands	r3, r2
 8003930:	d008      	beq.n	8003944 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	2180      	movs	r1, #128	; 0x80
 800393e:	0049      	lsls	r1, r1, #1
 8003940:	430a      	orrs	r2, r1
 8003942:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003956:	2180      	movs	r1, #128	; 0x80
 8003958:	0049      	lsls	r1, r1, #1
 800395a:	430a      	orrs	r2, r1
 800395c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2101      	movs	r1, #1
 800396a:	430a      	orrs	r2, r1
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	e00a      	b.n	8003986 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2280      	movs	r2, #128	; 0x80
 8003974:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2224      	movs	r2, #36	; 0x24
 800397a:	2100      	movs	r1, #0
 800397c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800397e:	2317      	movs	r3, #23
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	2201      	movs	r2, #1
 8003984:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003986:	2317      	movs	r3, #23
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	781b      	ldrb	r3, [r3, #0]
}
 800398c:	0018      	movs	r0, r3
 800398e:	46bd      	mov	sp, r7
 8003990:	b006      	add	sp, #24
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800399c:	210f      	movs	r1, #15
 800399e:	187b      	adds	r3, r7, r1
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2225      	movs	r2, #37	; 0x25
 80039a8:	5c9b      	ldrb	r3, [r3, r2]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d006      	beq.n	80039be <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2204      	movs	r2, #4
 80039b4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80039b6:	187b      	adds	r3, r7, r1
 80039b8:	2201      	movs	r2, #1
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	e049      	b.n	8003a52 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	210e      	movs	r1, #14
 80039ca:	438a      	bics	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2101      	movs	r1, #1
 80039da:	438a      	bics	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	491d      	ldr	r1, [pc, #116]	; (8003a60 <HAL_DMA_Abort_IT+0xcc>)
 80039ea:	400a      	ands	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80039ee:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <HAL_DMA_Abort_IT+0xd0>)
 80039f0:	6859      	ldr	r1, [r3, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	221c      	movs	r2, #28
 80039f8:	4013      	ands	r3, r2
 80039fa:	2201      	movs	r2, #1
 80039fc:	409a      	lsls	r2, r3
 80039fe:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <HAL_DMA_Abort_IT+0xd0>)
 8003a00:	430a      	orrs	r2, r1
 8003a02:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a0c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00c      	beq.n	8003a30 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a20:	490f      	ldr	r1, [pc, #60]	; (8003a60 <HAL_DMA_Abort_IT+0xcc>)
 8003a22:	400a      	ands	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003a2e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2225      	movs	r2, #37	; 0x25
 8003a34:	2101      	movs	r1, #1
 8003a36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2224      	movs	r2, #36	; 0x24
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	0010      	movs	r0, r2
 8003a50:	4798      	blx	r3
    }
  }
  return status;
 8003a52:	230f      	movs	r3, #15
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	781b      	ldrb	r3, [r3, #0]
}
 8003a58:	0018      	movs	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b004      	add	sp, #16
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	fffffeff 	.word	0xfffffeff
 8003a64:	40020000 	.word	0x40020000

08003a68 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003a70:	4b55      	ldr	r3, [pc, #340]	; (8003bc8 <HAL_DMA_IRQHandler+0x160>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	221c      	movs	r2, #28
 8003a84:	4013      	ands	r3, r2
 8003a86:	2204      	movs	r2, #4
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	0013      	movs	r3, r2
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d027      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x7a>
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2204      	movs	r2, #4
 8003a96:	4013      	ands	r3, r2
 8003a98:	d023      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d107      	bne.n	8003ab6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2104      	movs	r1, #4
 8003ab2:	438a      	bics	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003ab6:	4b44      	ldr	r3, [pc, #272]	; (8003bc8 <HAL_DMA_IRQHandler+0x160>)
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	221c      	movs	r2, #28
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	4b40      	ldr	r3, [pc, #256]	; (8003bc8 <HAL_DMA_IRQHandler+0x160>)
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d100      	bne.n	8003ad6 <HAL_DMA_IRQHandler+0x6e>
 8003ad4:	e073      	b.n	8003bbe <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	0010      	movs	r0, r2
 8003ade:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003ae0:	e06d      	b.n	8003bbe <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	221c      	movs	r2, #28
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2202      	movs	r2, #2
 8003aec:	409a      	lsls	r2, r3
 8003aee:	0013      	movs	r3, r2
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4013      	ands	r3, r2
 8003af4:	d02e      	beq.n	8003b54 <HAL_DMA_IRQHandler+0xec>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2202      	movs	r2, #2
 8003afa:	4013      	ands	r3, r2
 8003afc:	d02a      	beq.n	8003b54 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2220      	movs	r2, #32
 8003b06:	4013      	ands	r3, r2
 8003b08:	d10b      	bne.n	8003b22 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	210a      	movs	r1, #10
 8003b16:	438a      	bics	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2225      	movs	r2, #37	; 0x25
 8003b1e:	2101      	movs	r1, #1
 8003b20:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003b22:	4b29      	ldr	r3, [pc, #164]	; (8003bc8 <HAL_DMA_IRQHandler+0x160>)
 8003b24:	6859      	ldr	r1, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	221c      	movs	r2, #28
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2202      	movs	r2, #2
 8003b30:	409a      	lsls	r2, r3
 8003b32:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <HAL_DMA_IRQHandler+0x160>)
 8003b34:	430a      	orrs	r2, r1
 8003b36:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2224      	movs	r2, #36	; 0x24
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d03a      	beq.n	8003bbe <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	0010      	movs	r0, r2
 8003b50:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003b52:	e034      	b.n	8003bbe <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	221c      	movs	r2, #28
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	0013      	movs	r3, r2
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4013      	ands	r3, r2
 8003b66:	d02b      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x158>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2208      	movs	r2, #8
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d027      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	210e      	movs	r1, #14
 8003b7c:	438a      	bics	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003b80:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <HAL_DMA_IRQHandler+0x160>)
 8003b82:	6859      	ldr	r1, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	221c      	movs	r2, #28
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	409a      	lsls	r2, r3
 8003b90:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <HAL_DMA_IRQHandler+0x160>)
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2225      	movs	r2, #37	; 0x25
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2224      	movs	r2, #36	; 0x24
 8003ba8:	2100      	movs	r1, #0
 8003baa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	0010      	movs	r0, r2
 8003bbc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	46c0      	nop			; (mov r8, r8)
}
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b004      	add	sp, #16
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40020000 	.word	0x40020000

08003bcc <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2225      	movs	r2, #37	; 0x25
 8003bd8:	5c9b      	ldrb	r3, [r3, r2]
 8003bda:	b2db      	uxtb	r3, r3
}
 8003bdc:	0018      	movs	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b002      	add	sp, #8
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003bfa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d004      	beq.n	8003c0e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003c0c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003c0e:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <DMA_SetConfig+0x7c>)
 8003c10:	6859      	ldr	r1, [r3, #4]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	221c      	movs	r2, #28
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	409a      	lsls	r2, r3
 8003c1e:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <DMA_SetConfig+0x7c>)
 8003c20:	430a      	orrs	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d108      	bne.n	8003c46 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c44:	e007      	b.n	8003c56 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	60da      	str	r2, [r3, #12]
}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b004      	add	sp, #16
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	40020000 	.word	0x40020000

08003c64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	089b      	lsrs	r3, r3, #2
 8003c72:	4a10      	ldr	r2, [pc, #64]	; (8003cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003c74:	4694      	mov	ip, r2
 8003c76:	4463      	add	r3, ip
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	001a      	movs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	001a      	movs	r2, r3
 8003c86:	23ff      	movs	r3, #255	; 0xff
 8003c88:	4013      	ands	r3, r2
 8003c8a:	3b08      	subs	r3, #8
 8003c8c:	2114      	movs	r1, #20
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f7fc fa38 	bl	8000104 <__udivsi3>
 8003c94:	0003      	movs	r3, r0
 8003c96:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a07      	ldr	r2, [pc, #28]	; (8003cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003c9c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	221f      	movs	r2, #31
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003cac:	46c0      	nop			; (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b004      	add	sp, #16
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	10008200 	.word	0x10008200
 8003cb8:	40020880 	.word	0x40020880

08003cbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	223f      	movs	r2, #63	; 0x3f
 8003cca:	4013      	ands	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003cd2:	4694      	mov	ip, r2
 8003cd4:	4463      	add	r3, ip
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	001a      	movs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a07      	ldr	r2, [pc, #28]	; (8003d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ce2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	2203      	movs	r2, #3
 8003cea:	4013      	ands	r3, r2
 8003cec:	2201      	movs	r2, #1
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b004      	add	sp, #16
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	1000823f 	.word	0x1000823f
 8003d00:	40020940 	.word	0x40020940

08003d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d12:	e147      	b.n	8003fa4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2101      	movs	r1, #1
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4091      	lsls	r1, r2
 8003d1e:	000a      	movs	r2, r1
 8003d20:	4013      	ands	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d100      	bne.n	8003d2c <HAL_GPIO_Init+0x28>
 8003d2a:	e138      	b.n	8003f9e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d00b      	beq.n	8003d4c <HAL_GPIO_Init+0x48>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d007      	beq.n	8003d4c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d40:	2b11      	cmp	r3, #17
 8003d42:	d003      	beq.n	8003d4c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b12      	cmp	r3, #18
 8003d4a:	d130      	bne.n	8003dae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	2203      	movs	r2, #3
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	0013      	movs	r3, r2
 8003d5c:	43da      	mvns	r2, r3
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4013      	ands	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	0013      	movs	r3, r2
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d82:	2201      	movs	r2, #1
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	409a      	lsls	r2, r3
 8003d88:	0013      	movs	r3, r2
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	2201      	movs	r2, #1
 8003d9a:	401a      	ands	r2, r3
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	0013      	movs	r3, r2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	2203      	movs	r2, #3
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	0013      	movs	r3, r2
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	0013      	movs	r3, r2
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_Init+0xea>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b12      	cmp	r3, #18
 8003dec:	d123      	bne.n	8003e36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	08da      	lsrs	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3208      	adds	r2, #8
 8003df6:	0092      	lsls	r2, r2, #2
 8003df8:	58d3      	ldr	r3, [r2, r3]
 8003dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2207      	movs	r2, #7
 8003e00:	4013      	ands	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	220f      	movs	r2, #15
 8003e06:	409a      	lsls	r2, r3
 8003e08:	0013      	movs	r3, r2
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2107      	movs	r1, #7
 8003e1a:	400b      	ands	r3, r1
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	0013      	movs	r3, r2
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	08da      	lsrs	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3208      	adds	r2, #8
 8003e30:	0092      	lsls	r2, r2, #2
 8003e32:	6939      	ldr	r1, [r7, #16]
 8003e34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	2203      	movs	r2, #3
 8003e42:	409a      	lsls	r2, r3
 8003e44:	0013      	movs	r3, r2
 8003e46:	43da      	mvns	r2, r3
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2203      	movs	r2, #3
 8003e54:	401a      	ands	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	0013      	movs	r3, r2
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	2380      	movs	r3, #128	; 0x80
 8003e70:	055b      	lsls	r3, r3, #21
 8003e72:	4013      	ands	r3, r2
 8003e74:	d100      	bne.n	8003e78 <HAL_GPIO_Init+0x174>
 8003e76:	e092      	b.n	8003f9e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003e78:	4a50      	ldr	r2, [pc, #320]	; (8003fbc <HAL_GPIO_Init+0x2b8>)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	089b      	lsrs	r3, r3, #2
 8003e7e:	3318      	adds	r3, #24
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	589b      	ldr	r3, [r3, r2]
 8003e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2203      	movs	r2, #3
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	220f      	movs	r2, #15
 8003e90:	409a      	lsls	r2, r3
 8003e92:	0013      	movs	r3, r2
 8003e94:	43da      	mvns	r2, r3
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	23a0      	movs	r3, #160	; 0xa0
 8003ea0:	05db      	lsls	r3, r3, #23
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d013      	beq.n	8003ece <HAL_GPIO_Init+0x1ca>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a45      	ldr	r2, [pc, #276]	; (8003fc0 <HAL_GPIO_Init+0x2bc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00d      	beq.n	8003eca <HAL_GPIO_Init+0x1c6>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a44      	ldr	r2, [pc, #272]	; (8003fc4 <HAL_GPIO_Init+0x2c0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d007      	beq.n	8003ec6 <HAL_GPIO_Init+0x1c2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a43      	ldr	r2, [pc, #268]	; (8003fc8 <HAL_GPIO_Init+0x2c4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <HAL_GPIO_Init+0x1be>
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e006      	b.n	8003ed0 <HAL_GPIO_Init+0x1cc>
 8003ec2:	2305      	movs	r3, #5
 8003ec4:	e004      	b.n	8003ed0 <HAL_GPIO_Init+0x1cc>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e002      	b.n	8003ed0 <HAL_GPIO_Init+0x1cc>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <HAL_GPIO_Init+0x1cc>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	2103      	movs	r1, #3
 8003ed4:	400a      	ands	r2, r1
 8003ed6:	00d2      	lsls	r2, r2, #3
 8003ed8:	4093      	lsls	r3, r2
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ee0:	4936      	ldr	r1, [pc, #216]	; (8003fbc <HAL_GPIO_Init+0x2b8>)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	089b      	lsrs	r3, r3, #2
 8003ee6:	3318      	adds	r3, #24
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003eee:	4a33      	ldr	r2, [pc, #204]	; (8003fbc <HAL_GPIO_Init+0x2b8>)
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	58d3      	ldr	r3, [r2, r3]
 8003ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	43da      	mvns	r2, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	025b      	lsls	r3, r3, #9
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f14:	4929      	ldr	r1, [pc, #164]	; (8003fbc <HAL_GPIO_Init+0x2b8>)
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003f1c:	4a27      	ldr	r2, [pc, #156]	; (8003fbc <HAL_GPIO_Init+0x2b8>)
 8003f1e:	2384      	movs	r3, #132	; 0x84
 8003f20:	58d3      	ldr	r3, [r2, r3]
 8003f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	43da      	mvns	r2, r3
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	029b      	lsls	r3, r3, #10
 8003f36:	4013      	ands	r3, r2
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f42:	491e      	ldr	r1, [pc, #120]	; (8003fbc <HAL_GPIO_Init+0x2b8>)
 8003f44:	2284      	movs	r2, #132	; 0x84
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f4a:	4b1c      	ldr	r3, [pc, #112]	; (8003fbc <HAL_GPIO_Init+0x2b8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	43da      	mvns	r2, r3
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4013      	ands	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	035b      	lsls	r3, r3, #13
 8003f62:	4013      	ands	r3, r2
 8003f64:	d003      	beq.n	8003f6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f6e:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <HAL_GPIO_Init+0x2b8>)
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003f74:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <HAL_GPIO_Init+0x2b8>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	43da      	mvns	r2, r3
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4013      	ands	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	039b      	lsls	r3, r3, #14
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f98:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <HAL_GPIO_Init+0x2b8>)
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	40da      	lsrs	r2, r3
 8003fac:	1e13      	subs	r3, r2, #0
 8003fae:	d000      	beq.n	8003fb2 <HAL_GPIO_Init+0x2ae>
 8003fb0:	e6b0      	b.n	8003d14 <HAL_GPIO_Init+0x10>
  }
}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b006      	add	sp, #24
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40021800 	.word	0x40021800
 8003fc0:	50000400 	.word	0x50000400
 8003fc4:	50000800 	.word	0x50000800
 8003fc8:	50000c00 	.word	0x50000c00

08003fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e082      	b.n	80040e4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2241      	movs	r2, #65	; 0x41
 8003fe2:	5c9b      	ldrb	r3, [r3, r2]
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d107      	bne.n	8003ffa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2240      	movs	r2, #64	; 0x40
 8003fee:	2100      	movs	r1, #0
 8003ff0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f7fe fba1 	bl	800273c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2241      	movs	r2, #65	; 0x41
 8003ffe:	2124      	movs	r1, #36	; 0x24
 8004000:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2101      	movs	r1, #1
 800400e:	438a      	bics	r2, r1
 8004010:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4934      	ldr	r1, [pc, #208]	; (80040ec <HAL_I2C_Init+0x120>)
 800401c:	400a      	ands	r2, r1
 800401e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4931      	ldr	r1, [pc, #196]	; (80040f0 <HAL_I2C_Init+0x124>)
 800402c:	400a      	ands	r2, r1
 800402e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d108      	bne.n	800404a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2180      	movs	r1, #128	; 0x80
 8004042:	0209      	lsls	r1, r1, #8
 8004044:	430a      	orrs	r2, r1
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	e007      	b.n	800405a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2184      	movs	r1, #132	; 0x84
 8004054:	0209      	lsls	r1, r1, #8
 8004056:	430a      	orrs	r2, r1
 8004058:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d104      	bne.n	800406c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2280      	movs	r2, #128	; 0x80
 8004068:	0112      	lsls	r2, r2, #4
 800406a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	491f      	ldr	r1, [pc, #124]	; (80040f4 <HAL_I2C_Init+0x128>)
 8004078:	430a      	orrs	r2, r1
 800407a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	491a      	ldr	r1, [pc, #104]	; (80040f0 <HAL_I2C_Init+0x124>)
 8004088:	400a      	ands	r2, r1
 800408a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	431a      	orrs	r2, r3
 8004096:	0011      	movs	r1, r2
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	021a      	lsls	r2, r3, #8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69d9      	ldr	r1, [r3, #28]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1a      	ldr	r2, [r3, #32]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2101      	movs	r1, #1
 80040c2:	430a      	orrs	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2241      	movs	r2, #65	; 0x41
 80040d0:	2120      	movs	r1, #32
 80040d2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2242      	movs	r2, #66	; 0x42
 80040de:	2100      	movs	r1, #0
 80040e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	0018      	movs	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b002      	add	sp, #8
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	f0ffffff 	.word	0xf0ffffff
 80040f0:	ffff7fff 	.word	0xffff7fff
 80040f4:	02008000 	.word	0x02008000

080040f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	4798      	blx	r3
  }
}
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	b004      	add	sp, #16
 800412a:	bd80      	pop	{r7, pc}

0800412c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	0a1b      	lsrs	r3, r3, #8
 8004148:	001a      	movs	r2, r3
 800414a:	2301      	movs	r3, #1
 800414c:	4013      	ands	r3, r2
 800414e:	d010      	beq.n	8004172 <HAL_I2C_ER_IRQHandler+0x46>
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	09db      	lsrs	r3, r3, #7
 8004154:	001a      	movs	r2, r3
 8004156:	2301      	movs	r3, #1
 8004158:	4013      	ands	r3, r2
 800415a:	d00a      	beq.n	8004172 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	2201      	movs	r2, #1
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2280      	movs	r2, #128	; 0x80
 800416e:	0052      	lsls	r2, r2, #1
 8004170:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	0a9b      	lsrs	r3, r3, #10
 8004176:	001a      	movs	r2, r3
 8004178:	2301      	movs	r3, #1
 800417a:	4013      	ands	r3, r2
 800417c:	d010      	beq.n	80041a0 <HAL_I2C_ER_IRQHandler+0x74>
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	09db      	lsrs	r3, r3, #7
 8004182:	001a      	movs	r2, r3
 8004184:	2301      	movs	r3, #1
 8004186:	4013      	ands	r3, r2
 8004188:	d00a      	beq.n	80041a0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	2208      	movs	r2, #8
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2280      	movs	r2, #128	; 0x80
 800419c:	00d2      	lsls	r2, r2, #3
 800419e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	0a5b      	lsrs	r3, r3, #9
 80041a4:	001a      	movs	r2, r3
 80041a6:	2301      	movs	r3, #1
 80041a8:	4013      	ands	r3, r2
 80041aa:	d010      	beq.n	80041ce <HAL_I2C_ER_IRQHandler+0xa2>
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	09db      	lsrs	r3, r3, #7
 80041b0:	001a      	movs	r2, r3
 80041b2:	2301      	movs	r3, #1
 80041b4:	4013      	ands	r3, r2
 80041b6:	d00a      	beq.n	80041ce <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	2202      	movs	r2, #2
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2280      	movs	r2, #128	; 0x80
 80041ca:	0092      	lsls	r2, r2, #2
 80041cc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	220b      	movs	r2, #11
 80041d8:	4013      	ands	r3, r2
 80041da:	d005      	beq.n	80041e8 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	0011      	movs	r1, r2
 80041e2:	0018      	movs	r0, r3
 80041e4:	f000 fbd8 	bl	8004998 <I2C_ITError>
  }
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b006      	add	sp, #24
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80041f8:	46c0      	nop			; (mov r8, r8)
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b002      	add	sp, #8
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004208:	46c0      	nop			; (mov r8, r8)
 800420a:	46bd      	mov	sp, r7
 800420c:	b002      	add	sp, #8
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	0008      	movs	r0, r1
 800421a:	0011      	movs	r1, r2
 800421c:	1cfb      	adds	r3, r7, #3
 800421e:	1c02      	adds	r2, r0, #0
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	003b      	movs	r3, r7
 8004224:	1c0a      	adds	r2, r1, #0
 8004226:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	46bd      	mov	sp, r7
 800422c:	b002      	add	sp, #8
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	b002      	add	sp, #8
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004248:	46c0      	nop			; (mov r8, r8)
 800424a:	46bd      	mov	sp, r7
 800424c:	b002      	add	sp, #8
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004258:	46c0      	nop			; (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	b002      	add	sp, #8
 800425e:	bd80      	pop	{r7, pc}

08004260 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2240      	movs	r2, #64	; 0x40
 800427a:	5c9b      	ldrb	r3, [r3, r2]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <I2C_Slave_ISR_IT+0x24>
 8004280:	2302      	movs	r3, #2
 8004282:	e0fa      	b.n	800447a <I2C_Slave_ISR_IT+0x21a>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2240      	movs	r2, #64	; 0x40
 8004288:	2101      	movs	r1, #1
 800428a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	095b      	lsrs	r3, r3, #5
 8004290:	001a      	movs	r2, r3
 8004292:	2301      	movs	r3, #1
 8004294:	4013      	ands	r3, r2
 8004296:	d00b      	beq.n	80042b0 <I2C_Slave_ISR_IT+0x50>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	001a      	movs	r2, r3
 800429e:	2301      	movs	r3, #1
 80042a0:	4013      	ands	r3, r2
 80042a2:	d005      	beq.n	80042b0 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	0011      	movs	r1, r2
 80042aa:	0018      	movs	r0, r3
 80042ac:	f000 f9f6 	bl	800469c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	091b      	lsrs	r3, r3, #4
 80042b4:	001a      	movs	r2, r3
 80042b6:	2301      	movs	r3, #1
 80042b8:	4013      	ands	r3, r2
 80042ba:	d054      	beq.n	8004366 <I2C_Slave_ISR_IT+0x106>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	091b      	lsrs	r3, r3, #4
 80042c0:	001a      	movs	r2, r3
 80042c2:	2301      	movs	r3, #1
 80042c4:	4013      	ands	r3, r2
 80042c6:	d04e      	beq.n	8004366 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d12d      	bne.n	800432e <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2241      	movs	r2, #65	; 0x41
 80042d6:	5c9b      	ldrb	r3, [r3, r2]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b28      	cmp	r3, #40	; 0x28
 80042dc:	d10b      	bne.n	80042f6 <I2C_Slave_ISR_IT+0x96>
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	049b      	lsls	r3, r3, #18
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d106      	bne.n	80042f6 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	0011      	movs	r1, r2
 80042ee:	0018      	movs	r0, r3
 80042f0:	f000 faf8 	bl	80048e4 <I2C_ITListenCplt>
 80042f4:	e036      	b.n	8004364 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2241      	movs	r2, #65	; 0x41
 80042fa:	5c9b      	ldrb	r3, [r3, r2]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b29      	cmp	r3, #41	; 0x29
 8004300:	d110      	bne.n	8004324 <I2C_Slave_ISR_IT+0xc4>
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	4a5f      	ldr	r2, [pc, #380]	; (8004484 <I2C_Slave_ISR_IT+0x224>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00c      	beq.n	8004324 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2210      	movs	r2, #16
 8004310:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	0018      	movs	r0, r3
 8004316:	f000 fc4a 	bl	8004bae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	0018      	movs	r0, r3
 800431e:	f000 f957 	bl	80045d0 <I2C_ITSlaveSeqCplt>
 8004322:	e01f      	b.n	8004364 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2210      	movs	r2, #16
 800432a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800432c:	e09d      	b.n	800446a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2210      	movs	r2, #16
 8004334:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	2204      	movs	r2, #4
 800433c:	431a      	orrs	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <I2C_Slave_ISR_IT+0xf4>
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	2380      	movs	r3, #128	; 0x80
 800434c:	045b      	lsls	r3, r3, #17
 800434e:	429a      	cmp	r2, r3
 8004350:	d000      	beq.n	8004354 <I2C_Slave_ISR_IT+0xf4>
 8004352:	e08a      	b.n	800446a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	0011      	movs	r1, r2
 800435c:	0018      	movs	r0, r3
 800435e:	f000 fb1b 	bl	8004998 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004362:	e082      	b.n	800446a <I2C_Slave_ISR_IT+0x20a>
 8004364:	e081      	b.n	800446a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	089b      	lsrs	r3, r3, #2
 800436a:	001a      	movs	r2, r3
 800436c:	2301      	movs	r3, #1
 800436e:	4013      	ands	r3, r2
 8004370:	d031      	beq.n	80043d6 <I2C_Slave_ISR_IT+0x176>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	089b      	lsrs	r3, r3, #2
 8004376:	001a      	movs	r2, r3
 8004378:	2301      	movs	r3, #1
 800437a:	4013      	ands	r3, r2
 800437c:	d02b      	beq.n	80043d6 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d018      	beq.n	80043ba <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d154      	bne.n	800446e <I2C_Slave_ISR_IT+0x20e>
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	4a2f      	ldr	r2, [pc, #188]	; (8004484 <I2C_Slave_ISR_IT+0x224>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d050      	beq.n	800446e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	0018      	movs	r0, r3
 80043d0:	f000 f8fe 	bl	80045d0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80043d4:	e04b      	b.n	800446e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	08db      	lsrs	r3, r3, #3
 80043da:	001a      	movs	r2, r3
 80043dc:	2301      	movs	r3, #1
 80043de:	4013      	ands	r3, r2
 80043e0:	d00c      	beq.n	80043fc <I2C_Slave_ISR_IT+0x19c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	08db      	lsrs	r3, r3, #3
 80043e6:	001a      	movs	r2, r3
 80043e8:	2301      	movs	r3, #1
 80043ea:	4013      	ands	r3, r2
 80043ec:	d006      	beq.n	80043fc <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	0011      	movs	r1, r2
 80043f4:	0018      	movs	r0, r3
 80043f6:	f000 f847 	bl	8004488 <I2C_ITAddrCplt>
 80043fa:	e039      	b.n	8004470 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	085b      	lsrs	r3, r3, #1
 8004400:	001a      	movs	r2, r3
 8004402:	2301      	movs	r3, #1
 8004404:	4013      	ands	r3, r2
 8004406:	d033      	beq.n	8004470 <I2C_Slave_ISR_IT+0x210>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	085b      	lsrs	r3, r3, #1
 800440c:	001a      	movs	r2, r3
 800440e:	2301      	movs	r3, #1
 8004410:	4013      	ands	r3, r2
 8004412:	d02d      	beq.n	8004470 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d018      	beq.n	8004450 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	851a      	strh	r2, [r3, #40]	; 0x28
 800444e:	e00f      	b.n	8004470 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	045b      	lsls	r3, r3, #17
 8004456:	429a      	cmp	r2, r3
 8004458:	d002      	beq.n	8004460 <I2C_Slave_ISR_IT+0x200>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d107      	bne.n	8004470 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	0018      	movs	r0, r3
 8004464:	f000 f8b4 	bl	80045d0 <I2C_ITSlaveSeqCplt>
 8004468:	e002      	b.n	8004470 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	e000      	b.n	8004470 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800446e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2240      	movs	r2, #64	; 0x40
 8004474:	2100      	movs	r1, #0
 8004476:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	0018      	movs	r0, r3
 800447c:	46bd      	mov	sp, r7
 800447e:	b006      	add	sp, #24
 8004480:	bd80      	pop	{r7, pc}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	ffff0000 	.word	0xffff0000

08004488 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004488:	b5b0      	push	{r4, r5, r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2241      	movs	r2, #65	; 0x41
 8004496:	5c9b      	ldrb	r3, [r3, r2]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	001a      	movs	r2, r3
 800449c:	2328      	movs	r3, #40	; 0x28
 800449e:	4013      	ands	r3, r2
 80044a0:	2b28      	cmp	r3, #40	; 0x28
 80044a2:	d000      	beq.n	80044a6 <I2C_ITAddrCplt+0x1e>
 80044a4:	e088      	b.n	80045b8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	250f      	movs	r5, #15
 80044b2:	197b      	adds	r3, r7, r5
 80044b4:	2101      	movs	r1, #1
 80044b6:	400a      	ands	r2, r1
 80044b8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	200c      	movs	r0, #12
 80044c6:	183b      	adds	r3, r7, r0
 80044c8:	21fe      	movs	r1, #254	; 0xfe
 80044ca:	400a      	ands	r2, r1
 80044cc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	240a      	movs	r4, #10
 80044d8:	193b      	adds	r3, r7, r4
 80044da:	0592      	lsls	r2, r2, #22
 80044dc:	0d92      	lsrs	r2, r2, #22
 80044de:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	2308      	movs	r3, #8
 80044ea:	18fb      	adds	r3, r7, r3
 80044ec:	21fe      	movs	r1, #254	; 0xfe
 80044ee:	400a      	ands	r2, r1
 80044f0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d148      	bne.n	800458c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80044fa:	0021      	movs	r1, r4
 80044fc:	187b      	adds	r3, r7, r1
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	09db      	lsrs	r3, r3, #7
 8004502:	b29a      	uxth	r2, r3
 8004504:	183b      	adds	r3, r7, r0
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	4053      	eors	r3, r2
 800450a:	b29b      	uxth	r3, r3
 800450c:	001a      	movs	r2, r3
 800450e:	2306      	movs	r3, #6
 8004510:	4013      	ands	r3, r2
 8004512:	d120      	bne.n	8004556 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004514:	183b      	adds	r3, r7, r0
 8004516:	187a      	adds	r2, r7, r1
 8004518:	8812      	ldrh	r2, [r2, #0]
 800451a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452a:	2b02      	cmp	r3, #2
 800452c:	d14c      	bne.n	80045c8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2208      	movs	r2, #8
 800453a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2240      	movs	r2, #64	; 0x40
 8004540:	2100      	movs	r1, #0
 8004542:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004544:	183b      	adds	r3, r7, r0
 8004546:	881a      	ldrh	r2, [r3, #0]
 8004548:	197b      	adds	r3, r7, r5
 800454a:	7819      	ldrb	r1, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	0018      	movs	r0, r3
 8004550:	f7ff fe5e 	bl	8004210 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004554:	e038      	b.n	80045c8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004556:	240c      	movs	r4, #12
 8004558:	193b      	adds	r3, r7, r4
 800455a:	2208      	movs	r2, #8
 800455c:	18ba      	adds	r2, r7, r2
 800455e:	8812      	ldrh	r2, [r2, #0]
 8004560:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004562:	2380      	movs	r3, #128	; 0x80
 8004564:	021a      	lsls	r2, r3, #8
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	0011      	movs	r1, r2
 800456a:	0018      	movs	r0, r3
 800456c:	f000 fb60 	bl	8004c30 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2240      	movs	r2, #64	; 0x40
 8004574:	2100      	movs	r1, #0
 8004576:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004578:	193b      	adds	r3, r7, r4
 800457a:	881a      	ldrh	r2, [r3, #0]
 800457c:	230f      	movs	r3, #15
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	7819      	ldrb	r1, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	0018      	movs	r0, r3
 8004586:	f7ff fe43 	bl	8004210 <HAL_I2C_AddrCallback>
}
 800458a:	e01d      	b.n	80045c8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800458c:	2380      	movs	r3, #128	; 0x80
 800458e:	021a      	lsls	r2, r3, #8
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	0011      	movs	r1, r2
 8004594:	0018      	movs	r0, r3
 8004596:	f000 fb4b 	bl	8004c30 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2240      	movs	r2, #64	; 0x40
 800459e:	2100      	movs	r1, #0
 80045a0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045a2:	230c      	movs	r3, #12
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	881a      	ldrh	r2, [r3, #0]
 80045a8:	230f      	movs	r3, #15
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	7819      	ldrb	r1, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f7ff fe2d 	bl	8004210 <HAL_I2C_AddrCallback>
}
 80045b6:	e007      	b.n	80045c8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2208      	movs	r2, #8
 80045be:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2240      	movs	r2, #64	; 0x40
 80045c4:	2100      	movs	r1, #0
 80045c6:	5499      	strb	r1, [r3, r2]
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b004      	add	sp, #16
 80045ce:	bdb0      	pop	{r4, r5, r7, pc}

080045d0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2242      	movs	r2, #66	; 0x42
 80045e4:	2100      	movs	r1, #0
 80045e6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	0b9b      	lsrs	r3, r3, #14
 80045ec:	001a      	movs	r2, r3
 80045ee:	2301      	movs	r3, #1
 80045f0:	4013      	ands	r3, r2
 80045f2:	d008      	beq.n	8004606 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4925      	ldr	r1, [pc, #148]	; (8004694 <I2C_ITSlaveSeqCplt+0xc4>)
 8004600:	400a      	ands	r2, r1
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	e00d      	b.n	8004622 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	0bdb      	lsrs	r3, r3, #15
 800460a:	001a      	movs	r2, r3
 800460c:	2301      	movs	r3, #1
 800460e:	4013      	ands	r3, r2
 8004610:	d007      	beq.n	8004622 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	491e      	ldr	r1, [pc, #120]	; (8004698 <I2C_ITSlaveSeqCplt+0xc8>)
 800461e:	400a      	ands	r2, r1
 8004620:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2241      	movs	r2, #65	; 0x41
 8004626:	5c9b      	ldrb	r3, [r3, r2]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b29      	cmp	r3, #41	; 0x29
 800462c:	d114      	bne.n	8004658 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2241      	movs	r2, #65	; 0x41
 8004632:	2128      	movs	r1, #40	; 0x28
 8004634:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2221      	movs	r2, #33	; 0x21
 800463a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2101      	movs	r1, #1
 8004640:	0018      	movs	r0, r3
 8004642:	f000 faf5 	bl	8004c30 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2240      	movs	r2, #64	; 0x40
 800464a:	2100      	movs	r1, #0
 800464c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	0018      	movs	r0, r3
 8004652:	f7ff fdcd 	bl	80041f0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004656:	e019      	b.n	800468c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2241      	movs	r2, #65	; 0x41
 800465c:	5c9b      	ldrb	r3, [r3, r2]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b2a      	cmp	r3, #42	; 0x2a
 8004662:	d113      	bne.n	800468c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2241      	movs	r2, #65	; 0x41
 8004668:	2128      	movs	r1, #40	; 0x28
 800466a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2222      	movs	r2, #34	; 0x22
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2102      	movs	r1, #2
 8004676:	0018      	movs	r0, r3
 8004678:	f000 fada 	bl	8004c30 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2240      	movs	r2, #64	; 0x40
 8004680:	2100      	movs	r1, #0
 8004682:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	0018      	movs	r0, r3
 8004688:	f7ff fdba 	bl	8004200 <HAL_I2C_SlaveRxCpltCallback>
}
 800468c:	46c0      	nop			; (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	b004      	add	sp, #16
 8004692:	bd80      	pop	{r7, pc}
 8004694:	ffffbfff 	.word	0xffffbfff
 8004698:	ffff7fff 	.word	0xffff7fff

0800469c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80046b2:	200f      	movs	r0, #15
 80046b4:	183b      	adds	r3, r7, r0
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	2141      	movs	r1, #65	; 0x41
 80046ba:	5c52      	ldrb	r2, [r2, r1]
 80046bc:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2220      	movs	r2, #32
 80046c4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046c6:	183b      	adds	r3, r7, r0
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b21      	cmp	r3, #33	; 0x21
 80046cc:	d003      	beq.n	80046d6 <I2C_ITSlaveCplt+0x3a>
 80046ce:	183b      	adds	r3, r7, r0
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b29      	cmp	r3, #41	; 0x29
 80046d4:	d109      	bne.n	80046ea <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80046d6:	4a7d      	ldr	r2, [pc, #500]	; (80048cc <I2C_ITSlaveCplt+0x230>)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	0011      	movs	r1, r2
 80046dc:	0018      	movs	r0, r3
 80046de:	f000 faa7 	bl	8004c30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2221      	movs	r2, #33	; 0x21
 80046e6:	631a      	str	r2, [r3, #48]	; 0x30
 80046e8:	e011      	b.n	800470e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046ea:	220f      	movs	r2, #15
 80046ec:	18bb      	adds	r3, r7, r2
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b22      	cmp	r3, #34	; 0x22
 80046f2:	d003      	beq.n	80046fc <I2C_ITSlaveCplt+0x60>
 80046f4:	18bb      	adds	r3, r7, r2
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b2a      	cmp	r3, #42	; 0x2a
 80046fa:	d108      	bne.n	800470e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80046fc:	4a74      	ldr	r2, [pc, #464]	; (80048d0 <I2C_ITSlaveCplt+0x234>)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	0011      	movs	r1, r2
 8004702:	0018      	movs	r0, r3
 8004704:	f000 fa94 	bl	8004c30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2222      	movs	r2, #34	; 0x22
 800470c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2180      	movs	r1, #128	; 0x80
 800471a:	0209      	lsls	r1, r1, #8
 800471c:	430a      	orrs	r2, r1
 800471e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	496a      	ldr	r1, [pc, #424]	; (80048d4 <I2C_ITSlaveCplt+0x238>)
 800472c:	400a      	ands	r2, r1
 800472e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	0018      	movs	r0, r3
 8004734:	f000 fa3b 	bl	8004bae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	0b9b      	lsrs	r3, r3, #14
 800473c:	001a      	movs	r2, r3
 800473e:	2301      	movs	r3, #1
 8004740:	4013      	ands	r3, r2
 8004742:	d013      	beq.n	800476c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4962      	ldr	r1, [pc, #392]	; (80048d8 <I2C_ITSlaveCplt+0x23c>)
 8004750:	400a      	ands	r2, r1
 8004752:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	2b00      	cmp	r3, #0
 800475a:	d020      	beq.n	800479e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	b29a      	uxth	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	855a      	strh	r2, [r3, #42]	; 0x2a
 800476a:	e018      	b.n	800479e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	0bdb      	lsrs	r3, r3, #15
 8004770:	001a      	movs	r2, r3
 8004772:	2301      	movs	r3, #1
 8004774:	4013      	ands	r3, r2
 8004776:	d012      	beq.n	800479e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4956      	ldr	r1, [pc, #344]	; (80048dc <I2C_ITSlaveCplt+0x240>)
 8004784:	400a      	ands	r2, r1
 8004786:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d006      	beq.n	800479e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	b29a      	uxth	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	089b      	lsrs	r3, r3, #2
 80047a2:	001a      	movs	r2, r3
 80047a4:	2301      	movs	r3, #1
 80047a6:	4013      	ands	r3, r2
 80047a8:	d020      	beq.n	80047ec <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2204      	movs	r2, #4
 80047ae:	4393      	bics	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00c      	beq.n	80047ec <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d005      	beq.n	8004802 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fa:	2204      	movs	r2, #4
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2242      	movs	r2, #66	; 0x42
 8004806:	2100      	movs	r1, #0
 8004808:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004814:	2b00      	cmp	r3, #0
 8004816:	d013      	beq.n	8004840 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	0011      	movs	r1, r2
 8004820:	0018      	movs	r0, r3
 8004822:	f000 f8b9 	bl	8004998 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2241      	movs	r2, #65	; 0x41
 800482a:	5c9b      	ldrb	r3, [r3, r2]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b28      	cmp	r3, #40	; 0x28
 8004830:	d147      	bne.n	80048c2 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	0011      	movs	r1, r2
 8004838:	0018      	movs	r0, r3
 800483a:	f000 f853 	bl	80048e4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800483e:	e040      	b.n	80048c2 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <I2C_ITSlaveCplt+0x244>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d016      	beq.n	8004878 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	0018      	movs	r0, r3
 800484e:	f7ff febf 	bl	80045d0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a22      	ldr	r2, [pc, #136]	; (80048e0 <I2C_ITSlaveCplt+0x244>)
 8004856:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2241      	movs	r2, #65	; 0x41
 800485c:	2120      	movs	r1, #32
 800485e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2240      	movs	r2, #64	; 0x40
 800486a:	2100      	movs	r1, #0
 800486c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	0018      	movs	r0, r3
 8004872:	f7ff fcdd 	bl	8004230 <HAL_I2C_ListenCpltCallback>
}
 8004876:	e024      	b.n	80048c2 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2241      	movs	r2, #65	; 0x41
 800487c:	5c9b      	ldrb	r3, [r3, r2]
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b22      	cmp	r3, #34	; 0x22
 8004882:	d10f      	bne.n	80048a4 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2241      	movs	r2, #65	; 0x41
 8004888:	2120      	movs	r1, #32
 800488a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2240      	movs	r2, #64	; 0x40
 8004896:	2100      	movs	r1, #0
 8004898:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	0018      	movs	r0, r3
 800489e:	f7ff fcaf 	bl	8004200 <HAL_I2C_SlaveRxCpltCallback>
}
 80048a2:	e00e      	b.n	80048c2 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2241      	movs	r2, #65	; 0x41
 80048a8:	2120      	movs	r1, #32
 80048aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2240      	movs	r2, #64	; 0x40
 80048b6:	2100      	movs	r1, #0
 80048b8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	0018      	movs	r0, r3
 80048be:	f7ff fc97 	bl	80041f0 <HAL_I2C_SlaveTxCpltCallback>
}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b006      	add	sp, #24
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	00008001 	.word	0x00008001
 80048d0:	00008002 	.word	0x00008002
 80048d4:	fe00e800 	.word	0xfe00e800
 80048d8:	ffffbfff 	.word	0xffffbfff
 80048dc:	ffff7fff 	.word	0xffff7fff
 80048e0:	ffff0000 	.word	0xffff0000

080048e4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a27      	ldr	r2, [pc, #156]	; (8004990 <I2C_ITListenCplt+0xac>)
 80048f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2241      	movs	r2, #65	; 0x41
 80048fe:	2120      	movs	r1, #32
 8004900:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2242      	movs	r2, #66	; 0x42
 8004906:	2100      	movs	r1, #0
 8004908:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	089b      	lsrs	r3, r3, #2
 8004914:	001a      	movs	r2, r3
 8004916:	2301      	movs	r3, #1
 8004918:	4013      	ands	r3, r2
 800491a:	d022      	beq.n	8004962 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004938:	2b00      	cmp	r3, #0
 800493a:	d012      	beq.n	8004962 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495a:	2204      	movs	r2, #4
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004962:	4a0c      	ldr	r2, [pc, #48]	; (8004994 <I2C_ITListenCplt+0xb0>)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	0011      	movs	r1, r2
 8004968:	0018      	movs	r0, r3
 800496a:	f000 f961 	bl	8004c30 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2210      	movs	r2, #16
 8004974:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2240      	movs	r2, #64	; 0x40
 800497a:	2100      	movs	r1, #0
 800497c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0018      	movs	r0, r3
 8004982:	f7ff fc55 	bl	8004230 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	46bd      	mov	sp, r7
 800498a:	b002      	add	sp, #8
 800498c:	bd80      	pop	{r7, pc}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	ffff0000 	.word	0xffff0000
 8004994:	00008003 	.word	0x00008003

08004998 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80049a2:	200f      	movs	r0, #15
 80049a4:	183b      	adds	r3, r7, r0
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	2141      	movs	r1, #65	; 0x41
 80049aa:	5c52      	ldrb	r2, [r2, r1]
 80049ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2242      	movs	r2, #66	; 0x42
 80049b2:	2100      	movs	r1, #0
 80049b4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a62      	ldr	r2, [pc, #392]	; (8004b44 <I2C_ITError+0x1ac>)
 80049ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80049ce:	183b      	adds	r3, r7, r0
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b28      	cmp	r3, #40	; 0x28
 80049d4:	d007      	beq.n	80049e6 <I2C_ITError+0x4e>
 80049d6:	183b      	adds	r3, r7, r0
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b29      	cmp	r3, #41	; 0x29
 80049dc:	d003      	beq.n	80049e6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80049de:	183b      	adds	r3, r7, r0
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b2a      	cmp	r3, #42	; 0x2a
 80049e4:	d10c      	bne.n	8004a00 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2103      	movs	r1, #3
 80049ea:	0018      	movs	r0, r3
 80049ec:	f000 f920 	bl	8004c30 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2241      	movs	r2, #65	; 0x41
 80049f4:	2128      	movs	r1, #40	; 0x28
 80049f6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a53      	ldr	r2, [pc, #332]	; (8004b48 <I2C_ITError+0x1b0>)
 80049fc:	635a      	str	r2, [r3, #52]	; 0x34
 80049fe:	e012      	b.n	8004a26 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a00:	4a52      	ldr	r2, [pc, #328]	; (8004b4c <I2C_ITError+0x1b4>)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	0011      	movs	r1, r2
 8004a06:	0018      	movs	r0, r3
 8004a08:	f000 f912 	bl	8004c30 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2241      	movs	r2, #65	; 0x41
 8004a10:	5c9b      	ldrb	r3, [r3, r2]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b60      	cmp	r3, #96	; 0x60
 8004a16:	d003      	beq.n	8004a20 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2241      	movs	r2, #65	; 0x41
 8004a1c:	2120      	movs	r1, #32
 8004a1e:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d03b      	beq.n	8004aac <I2C_ITError+0x114>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b11      	cmp	r3, #17
 8004a38:	d002      	beq.n	8004a40 <I2C_ITError+0xa8>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b21      	cmp	r3, #33	; 0x21
 8004a3e:	d135      	bne.n	8004aac <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	01db      	lsls	r3, r3, #7
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	2380      	movs	r3, #128	; 0x80
 8004a4e:	01db      	lsls	r3, r3, #7
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d107      	bne.n	8004a64 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	493c      	ldr	r1, [pc, #240]	; (8004b50 <I2C_ITError+0x1b8>)
 8004a60:	400a      	ands	r2, r1
 8004a62:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f7ff f8af 	bl	8003bcc <HAL_DMA_GetState>
 8004a6e:	0003      	movs	r3, r0
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d016      	beq.n	8004aa2 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	4a36      	ldr	r2, [pc, #216]	; (8004b54 <I2C_ITError+0x1bc>)
 8004a7a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2240      	movs	r2, #64	; 0x40
 8004a80:	2100      	movs	r1, #0
 8004a82:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f7fe ff83 	bl	8003994 <HAL_DMA_Abort_IT>
 8004a8e:	1e03      	subs	r3, r0, #0
 8004a90:	d051      	beq.n	8004b36 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004aa0:	e049      	b.n	8004b36 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f000 f859 	bl	8004b5c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004aaa:	e044      	b.n	8004b36 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d03b      	beq.n	8004b2c <I2C_ITError+0x194>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b12      	cmp	r3, #18
 8004ab8:	d002      	beq.n	8004ac0 <I2C_ITError+0x128>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b22      	cmp	r3, #34	; 0x22
 8004abe:	d135      	bne.n	8004b2c <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	2380      	movs	r3, #128	; 0x80
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	401a      	ands	r2, r3
 8004acc:	2380      	movs	r3, #128	; 0x80
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d107      	bne.n	8004ae4 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	491e      	ldr	r1, [pc, #120]	; (8004b58 <I2C_ITError+0x1c0>)
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7ff f86f 	bl	8003bcc <HAL_DMA_GetState>
 8004aee:	0003      	movs	r3, r0
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d016      	beq.n	8004b22 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	4a16      	ldr	r2, [pc, #88]	; (8004b54 <I2C_ITError+0x1bc>)
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2240      	movs	r2, #64	; 0x40
 8004b00:	2100      	movs	r1, #0
 8004b02:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7fe ff43 	bl	8003994 <HAL_DMA_Abort_IT>
 8004b0e:	1e03      	subs	r3, r0, #0
 8004b10:	d013      	beq.n	8004b3a <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b20:	e00b      	b.n	8004b3a <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 f819 	bl	8004b5c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b2a:	e006      	b.n	8004b3a <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f000 f814 	bl	8004b5c <I2C_TreatErrorCallback>
  }
}
 8004b34:	e002      	b.n	8004b3c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	e000      	b.n	8004b3c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b3a:	46c0      	nop			; (mov r8, r8)
}
 8004b3c:	46c0      	nop			; (mov r8, r8)
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b004      	add	sp, #16
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	ffff0000 	.word	0xffff0000
 8004b48:	08004261 	.word	0x08004261
 8004b4c:	00008003 	.word	0x00008003
 8004b50:	ffffbfff 	.word	0xffffbfff
 8004b54:	08004bf3 	.word	0x08004bf3
 8004b58:	ffff7fff 	.word	0xffff7fff

08004b5c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2241      	movs	r2, #65	; 0x41
 8004b68:	5c9b      	ldrb	r3, [r3, r2]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b60      	cmp	r3, #96	; 0x60
 8004b6e:	d10f      	bne.n	8004b90 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2241      	movs	r2, #65	; 0x41
 8004b74:	2120      	movs	r1, #32
 8004b76:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2240      	movs	r2, #64	; 0x40
 8004b82:	2100      	movs	r1, #0
 8004b84:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7ff fb61 	bl	8004250 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b8e:	e00a      	b.n	8004ba6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2240      	movs	r2, #64	; 0x40
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f7ff fb4d 	bl	8004240 <HAL_I2C_ErrorCallback>
}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b002      	add	sp, #8
 8004bac:	bd80      	pop	{r7, pc}

08004bae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b082      	sub	sp, #8
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d103      	bne.n	8004bcc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d007      	beq.n	8004bea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699a      	ldr	r2, [r3, #24]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2101      	movs	r1, #1
 8004be6:	430a      	orrs	r2, r1
 8004be8:	619a      	str	r2, [r3, #24]
  }
}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b002      	add	sp, #8
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	0018      	movs	r0, r3
 8004c24:	f7ff ff9a 	bl	8004b5c <I2C_TreatErrorCallback>
}
 8004c28:	46c0      	nop			; (mov r8, r8)
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b004      	add	sp, #16
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	000a      	movs	r2, r1
 8004c3a:	1cbb      	adds	r3, r7, #2
 8004c3c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c42:	1cbb      	adds	r3, r7, #2
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	2201      	movs	r2, #1
 8004c48:	4013      	ands	r3, r2
 8004c4a:	d010      	beq.n	8004c6e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2242      	movs	r2, #66	; 0x42
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2241      	movs	r2, #65	; 0x41
 8004c58:	5c9b      	ldrb	r3, [r3, r2]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	001a      	movs	r2, r3
 8004c5e:	2328      	movs	r3, #40	; 0x28
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b28      	cmp	r3, #40	; 0x28
 8004c64:	d003      	beq.n	8004c6e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	22b0      	movs	r2, #176	; 0xb0
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c6e:	1cbb      	adds	r3, r7, #2
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	2202      	movs	r2, #2
 8004c74:	4013      	ands	r3, r2
 8004c76:	d010      	beq.n	8004c9a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2244      	movs	r2, #68	; 0x44
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2241      	movs	r2, #65	; 0x41
 8004c84:	5c9b      	ldrb	r3, [r3, r2]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	001a      	movs	r2, r3
 8004c8a:	2328      	movs	r3, #40	; 0x28
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b28      	cmp	r3, #40	; 0x28
 8004c90:	d003      	beq.n	8004c9a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	22b0      	movs	r2, #176	; 0xb0
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c9a:	1cbb      	adds	r3, r7, #2
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	5e9b      	ldrsh	r3, [r3, r2]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	da03      	bge.n	8004cac <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	22b8      	movs	r2, #184	; 0xb8
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004cac:	1cbb      	adds	r3, r7, #2
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d103      	bne.n	8004cbc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2290      	movs	r2, #144	; 0x90
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004cbc:	1cbb      	adds	r3, r7, #2
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d103      	bne.n	8004ccc <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004ccc:	1cbb      	adds	r3, r7, #2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	2b40      	cmp	r3, #64	; 0x40
 8004cd2:	d103      	bne.n	8004cdc <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2240      	movs	r2, #64	; 0x40
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	43d9      	mvns	r1, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	400a      	ands	r2, r1
 8004cec:	601a      	str	r2, [r3, #0]
}
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b004      	add	sp, #16
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2241      	movs	r2, #65	; 0x41
 8004d06:	5c9b      	ldrb	r3, [r3, r2]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d138      	bne.n	8004d80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2240      	movs	r2, #64	; 0x40
 8004d12:	5c9b      	ldrb	r3, [r3, r2]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e032      	b.n	8004d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2240      	movs	r2, #64	; 0x40
 8004d20:	2101      	movs	r1, #1
 8004d22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2241      	movs	r2, #65	; 0x41
 8004d28:	2124      	movs	r1, #36	; 0x24
 8004d2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2101      	movs	r1, #1
 8004d38:	438a      	bics	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4911      	ldr	r1, [pc, #68]	; (8004d8c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004d48:	400a      	ands	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6819      	ldr	r1, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2101      	movs	r1, #1
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2241      	movs	r2, #65	; 0x41
 8004d70:	2120      	movs	r1, #32
 8004d72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2240      	movs	r2, #64	; 0x40
 8004d78:	2100      	movs	r1, #0
 8004d7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
  }
}
 8004d82:	0018      	movs	r0, r3
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b002      	add	sp, #8
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	ffffefff 	.word	0xffffefff

08004d90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2241      	movs	r2, #65	; 0x41
 8004d9e:	5c9b      	ldrb	r3, [r3, r2]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d139      	bne.n	8004e1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2240      	movs	r2, #64	; 0x40
 8004daa:	5c9b      	ldrb	r3, [r3, r2]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e033      	b.n	8004e1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2240      	movs	r2, #64	; 0x40
 8004db8:	2101      	movs	r1, #1
 8004dba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2241      	movs	r2, #65	; 0x41
 8004dc0:	2124      	movs	r1, #36	; 0x24
 8004dc2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2101      	movs	r1, #1
 8004dd0:	438a      	bics	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4a11      	ldr	r2, [pc, #68]	; (8004e24 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2101      	movs	r1, #1
 8004e02:	430a      	orrs	r2, r1
 8004e04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2241      	movs	r2, #65	; 0x41
 8004e0a:	2120      	movs	r1, #32
 8004e0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2240      	movs	r2, #64	; 0x40
 8004e12:	2100      	movs	r1, #0
 8004e14:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	e000      	b.n	8004e1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e1a:	2302      	movs	r3, #2
  }
}
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	b004      	add	sp, #16
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	fffff0ff 	.word	0xfffff0ff

08004e28 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e0e5      	b.n	8005006 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2235      	movs	r2, #53	; 0x35
 8004e3e:	5c9b      	ldrb	r3, [r3, r2]
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d107      	bne.n	8004e56 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2234      	movs	r2, #52	; 0x34
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f7fd fcc7 	bl	80027e4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2235      	movs	r2, #53	; 0x35
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4969      	ldr	r1, [pc, #420]	; (8005010 <HAL_I2S_Init+0x1e8>)
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2202      	movs	r2, #2
 8004e74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d100      	bne.n	8004e80 <HAL_I2S_Init+0x58>
 8004e7e:	e076      	b.n	8004f6e <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d102      	bne.n	8004e8e <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004e88:	2310      	movs	r3, #16
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	e001      	b.n	8004e92 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004e8e:	2320      	movs	r3, #32
 8004e90:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	d802      	bhi.n	8004ea0 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004ea0:	2380      	movs	r3, #128	; 0x80
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f001 f865 	bl	8005f74 <HAL_RCCEx_GetPeriphCLKFreq>
 8004eaa:	0003      	movs	r3, r0
 8004eac:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691a      	ldr	r2, [r3, #16]
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d131      	bne.n	8004f1e <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d016      	beq.n	8004ef0 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7fb f91b 	bl	8000104 <__udivsi3>
 8004ece:	0003      	movs	r3, r0
 8004ed0:	001a      	movs	r2, r3
 8004ed2:	0013      	movs	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	189b      	adds	r3, r3, r2
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	001a      	movs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	0019      	movs	r1, r3
 8004ee2:	0010      	movs	r0, r2
 8004ee4:	f7fb f90e 	bl	8000104 <__udivsi3>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	3305      	adds	r3, #5
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	e02a      	b.n	8004f46 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	0019      	movs	r1, r3
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7fb f904 	bl	8000104 <__udivsi3>
 8004efc:	0003      	movs	r3, r0
 8004efe:	001a      	movs	r2, r3
 8004f00:	0013      	movs	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	189b      	adds	r3, r3, r2
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	001a      	movs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	0019      	movs	r1, r3
 8004f10:	0010      	movs	r0, r2
 8004f12:	f7fb f8f7 	bl	8000104 <__udivsi3>
 8004f16:	0003      	movs	r3, r0
 8004f18:	3305      	adds	r3, #5
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	e013      	b.n	8004f46 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f1e:	6979      	ldr	r1, [r7, #20]
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7fb f8ef 	bl	8000104 <__udivsi3>
 8004f26:	0003      	movs	r3, r0
 8004f28:	001a      	movs	r2, r3
 8004f2a:	0013      	movs	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	189b      	adds	r3, r3, r2
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	001a      	movs	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	0019      	movs	r1, r3
 8004f3a:	0010      	movs	r0, r2
 8004f3c:	f7fb f8e2 	bl	8000104 <__udivsi3>
 8004f40:	0003      	movs	r3, r0
 8004f42:	3305      	adds	r3, #5
 8004f44:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	210a      	movs	r1, #10
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	f7fb f8da 	bl	8000104 <__udivsi3>
 8004f50:	0003      	movs	r3, r0
 8004f52:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2201      	movs	r2, #1
 8004f58:	4013      	ands	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	085b      	lsrs	r3, r3, #1
 8004f64:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	e003      	b.n	8004f76 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d902      	bls.n	8004f82 <HAL_I2S_Init+0x15a>
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	2bff      	cmp	r3, #255	; 0xff
 8004f80:	d907      	bls.n	8004f92 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	2210      	movs	r2, #16
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e039      	b.n	8005006 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691a      	ldr	r2, [r3, #16]
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	0011      	movs	r1, r2
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	4a18      	ldr	r2, [pc, #96]	; (8005010 <HAL_I2S_Init+0x1e8>)
 8004fae:	401a      	ands	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6859      	ldr	r1, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	4319      	orrs	r1, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	4319      	orrs	r1, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2180      	movs	r1, #128	; 0x80
 8004fce:	0109      	lsls	r1, r1, #4
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2b30      	cmp	r3, #48	; 0x30
 8004fda:	d003      	beq.n	8004fe4 <HAL_I2S_Init+0x1bc>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2bb0      	cmp	r3, #176	; 0xb0
 8004fe2:	d108      	bne.n	8004ff6 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69da      	ldr	r2, [r3, #28]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2180      	movs	r1, #128	; 0x80
 8004ff0:	0149      	lsls	r1, r1, #5
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2235      	movs	r2, #53	; 0x35
 8005000:	2101      	movs	r1, #1
 8005002:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	0018      	movs	r0, r3
 8005008:	46bd      	mov	sp, r7
 800500a:	b008      	add	sp, #32
 800500c:	bd80      	pop	{r7, pc}
 800500e:	46c0      	nop			; (mov r8, r8)
 8005010:	fffff040 	.word	0xfffff040

08005014 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	099b      	lsrs	r3, r3, #6
 8005030:	001a      	movs	r2, r3
 8005032:	2301      	movs	r3, #1
 8005034:	4013      	ands	r3, r2
 8005036:	d10e      	bne.n	8005056 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2201      	movs	r2, #1
 800503c:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 800503e:	d00a      	beq.n	8005056 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	099b      	lsrs	r3, r3, #6
 8005044:	001a      	movs	r2, r3
 8005046:	2301      	movs	r3, #1
 8005048:	4013      	ands	r3, r2
 800504a:	d004      	beq.n	8005056 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	0018      	movs	r0, r3
 8005050:	f000 f892 	bl	8005178 <I2S_Receive_IT>
    return;
 8005054:	e046      	b.n	80050e4 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	085b      	lsrs	r3, r3, #1
 800505a:	001a      	movs	r2, r3
 800505c:	2301      	movs	r3, #1
 800505e:	4013      	ands	r3, r2
 8005060:	d00a      	beq.n	8005078 <HAL_I2S_IRQHandler+0x64>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	09db      	lsrs	r3, r3, #7
 8005066:	001a      	movs	r2, r3
 8005068:	2301      	movs	r3, #1
 800506a:	4013      	ands	r3, r2
 800506c:	d004      	beq.n	8005078 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	0018      	movs	r0, r3
 8005072:	f000 f852 	bl	800511a <I2S_Transmit_IT>
    return;
 8005076:	e035      	b.n	80050e4 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	001a      	movs	r2, r3
 800507e:	2301      	movs	r3, #1
 8005080:	4013      	ands	r3, r2
 8005082:	d02f      	beq.n	80050e4 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	099b      	lsrs	r3, r3, #6
 8005088:	001a      	movs	r2, r3
 800508a:	2301      	movs	r3, #1
 800508c:	4013      	ands	r3, r2
 800508e:	d00d      	beq.n	80050ac <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2160      	movs	r1, #96	; 0x60
 800509c:	438a      	bics	r2, r1
 800509e:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	2202      	movs	r2, #2
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	08db      	lsrs	r3, r3, #3
 80050b0:	001a      	movs	r2, r3
 80050b2:	2301      	movs	r3, #1
 80050b4:	4013      	ands	r3, r2
 80050b6:	d00d      	beq.n	80050d4 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	21a0      	movs	r1, #160	; 0xa0
 80050c4:	438a      	bics	r2, r1
 80050c6:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	2204      	movs	r2, #4
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2235      	movs	r2, #53	; 0x35
 80050d8:	2101      	movs	r1, #1
 80050da:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	0018      	movs	r0, r3
 80050e0:	f000 f813 	bl	800510a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80050e4:	46bd      	mov	sp, r7
 80050e6:	b004      	add	sp, #16
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	46bd      	mov	sp, r7
 80050f6:	b002      	add	sp, #8
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b082      	sub	sp, #8
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	46bd      	mov	sp, r7
 8005106:	b002      	add	sp, #8
 8005108:	bd80      	pop	{r7, pc}

0800510a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	46bd      	mov	sp, r7
 8005116:	b002      	add	sp, #8
 8005118:	bd80      	pop	{r7, pc}

0800511a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	881a      	ldrh	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	1c9a      	adds	r2, r3, #2
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800513c:	b29b      	uxth	r3, r3
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10f      	bne.n	8005170 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	21a0      	movs	r1, #160	; 0xa0
 800515c:	438a      	bics	r2, r1
 800515e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2235      	movs	r2, #53	; 0x35
 8005164:	2101      	movs	r1, #1
 8005166:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	0018      	movs	r0, r3
 800516c:	f7ff ffbd 	bl	80050ea <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005170:	46c0      	nop			; (mov r8, r8)
 8005172:	46bd      	mov	sp, r7
 8005174:	b002      	add	sp, #8
 8005176:	bd80      	pop	{r7, pc}

08005178 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	b292      	uxth	r2, r2
 800518c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	1c9a      	adds	r2, r3, #2
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10f      	bne.n	80051d0 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2160      	movs	r1, #96	; 0x60
 80051bc:	438a      	bics	r2, r1
 80051be:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2235      	movs	r2, #53	; 0x35
 80051c4:	2101      	movs	r1, #1
 80051c6:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	0018      	movs	r0, r3
 80051cc:	f7ff ff95 	bl	80050fa <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80051d0:	46c0      	nop			; (mov r8, r8)
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b002      	add	sp, #8
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80051e0:	4b19      	ldr	r3, [pc, #100]	; (8005248 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a19      	ldr	r2, [pc, #100]	; (800524c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	0019      	movs	r1, r3
 80051ea:	4b17      	ldr	r3, [pc, #92]	; (8005248 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d11f      	bne.n	800523c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80051fc:	4b14      	ldr	r3, [pc, #80]	; (8005250 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	0013      	movs	r3, r2
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	189b      	adds	r3, r3, r2
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	4912      	ldr	r1, [pc, #72]	; (8005254 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800520a:	0018      	movs	r0, r3
 800520c:	f7fa ff7a 	bl	8000104 <__udivsi3>
 8005210:	0003      	movs	r3, r0
 8005212:	3301      	adds	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005216:	e008      	b.n	800522a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3b01      	subs	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	e001      	b.n	800522a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e009      	b.n	800523e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800522a:	4b07      	ldr	r3, [pc, #28]	; (8005248 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800522c:	695a      	ldr	r2, [r3, #20]
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	401a      	ands	r2, r3
 8005234:	2380      	movs	r3, #128	; 0x80
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	429a      	cmp	r2, r3
 800523a:	d0ed      	beq.n	8005218 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	0018      	movs	r0, r3
 8005240:	46bd      	mov	sp, r7
 8005242:	b004      	add	sp, #16
 8005244:	bd80      	pop	{r7, pc}
 8005246:	46c0      	nop			; (mov r8, r8)
 8005248:	40007000 	.word	0x40007000
 800524c:	fffff9ff 	.word	0xfffff9ff
 8005250:	20003134 	.word	0x20003134
 8005254:	000f4240 	.word	0x000f4240

08005258 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <LL_RCC_GetAPB1Prescaler+0x14>)
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	23e0      	movs	r3, #224	; 0xe0
 8005262:	01db      	lsls	r3, r3, #7
 8005264:	4013      	ands	r3, r2
}
 8005266:	0018      	movs	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40021000 	.word	0x40021000

08005270 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e304      	b.n	800588c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2201      	movs	r2, #1
 8005288:	4013      	ands	r3, r2
 800528a:	d100      	bne.n	800528e <HAL_RCC_OscConfig+0x1e>
 800528c:	e07c      	b.n	8005388 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800528e:	4bc3      	ldr	r3, [pc, #780]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2238      	movs	r2, #56	; 0x38
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005298:	4bc0      	ldr	r3, [pc, #768]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	2203      	movs	r2, #3
 800529e:	4013      	ands	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b10      	cmp	r3, #16
 80052a6:	d102      	bne.n	80052ae <HAL_RCC_OscConfig+0x3e>
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d002      	beq.n	80052b4 <HAL_RCC_OscConfig+0x44>
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d10b      	bne.n	80052cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b4:	4bb9      	ldr	r3, [pc, #740]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	029b      	lsls	r3, r3, #10
 80052bc:	4013      	ands	r3, r2
 80052be:	d062      	beq.n	8005386 <HAL_RCC_OscConfig+0x116>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d15e      	bne.n	8005386 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e2df      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	2380      	movs	r3, #128	; 0x80
 80052d2:	025b      	lsls	r3, r3, #9
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d107      	bne.n	80052e8 <HAL_RCC_OscConfig+0x78>
 80052d8:	4bb0      	ldr	r3, [pc, #704]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4baf      	ldr	r3, [pc, #700]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 80052de:	2180      	movs	r1, #128	; 0x80
 80052e0:	0249      	lsls	r1, r1, #9
 80052e2:	430a      	orrs	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e020      	b.n	800532a <HAL_RCC_OscConfig+0xba>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	23a0      	movs	r3, #160	; 0xa0
 80052ee:	02db      	lsls	r3, r3, #11
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d10e      	bne.n	8005312 <HAL_RCC_OscConfig+0xa2>
 80052f4:	4ba9      	ldr	r3, [pc, #676]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	4ba8      	ldr	r3, [pc, #672]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 80052fa:	2180      	movs	r1, #128	; 0x80
 80052fc:	02c9      	lsls	r1, r1, #11
 80052fe:	430a      	orrs	r2, r1
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	4ba6      	ldr	r3, [pc, #664]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	4ba5      	ldr	r3, [pc, #660]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005308:	2180      	movs	r1, #128	; 0x80
 800530a:	0249      	lsls	r1, r1, #9
 800530c:	430a      	orrs	r2, r1
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	e00b      	b.n	800532a <HAL_RCC_OscConfig+0xba>
 8005312:	4ba2      	ldr	r3, [pc, #648]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4ba1      	ldr	r3, [pc, #644]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005318:	49a1      	ldr	r1, [pc, #644]	; (80055a0 <HAL_RCC_OscConfig+0x330>)
 800531a:	400a      	ands	r2, r1
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	4b9f      	ldr	r3, [pc, #636]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b9e      	ldr	r3, [pc, #632]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005324:	499f      	ldr	r1, [pc, #636]	; (80055a4 <HAL_RCC_OscConfig+0x334>)
 8005326:	400a      	ands	r2, r1
 8005328:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d014      	beq.n	800535c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005332:	f7fd fe9d 	bl	8003070 <HAL_GetTick>
 8005336:	0003      	movs	r3, r0
 8005338:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800533c:	f7fd fe98 	bl	8003070 <HAL_GetTick>
 8005340:	0002      	movs	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b64      	cmp	r3, #100	; 0x64
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e29e      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800534e:	4b93      	ldr	r3, [pc, #588]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	2380      	movs	r3, #128	; 0x80
 8005354:	029b      	lsls	r3, r3, #10
 8005356:	4013      	ands	r3, r2
 8005358:	d0f0      	beq.n	800533c <HAL_RCC_OscConfig+0xcc>
 800535a:	e015      	b.n	8005388 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535c:	f7fd fe88 	bl	8003070 <HAL_GetTick>
 8005360:	0003      	movs	r3, r0
 8005362:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005366:	f7fd fe83 	bl	8003070 <HAL_GetTick>
 800536a:	0002      	movs	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b64      	cmp	r3, #100	; 0x64
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e289      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005378:	4b88      	ldr	r3, [pc, #544]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	2380      	movs	r3, #128	; 0x80
 800537e:	029b      	lsls	r3, r3, #10
 8005380:	4013      	ands	r3, r2
 8005382:	d1f0      	bne.n	8005366 <HAL_RCC_OscConfig+0xf6>
 8005384:	e000      	b.n	8005388 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005386:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2202      	movs	r2, #2
 800538e:	4013      	ands	r3, r2
 8005390:	d100      	bne.n	8005394 <HAL_RCC_OscConfig+0x124>
 8005392:	e099      	b.n	80054c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005394:	4b81      	ldr	r3, [pc, #516]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2238      	movs	r2, #56	; 0x38
 800539a:	4013      	ands	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800539e:	4b7f      	ldr	r3, [pc, #508]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	2203      	movs	r2, #3
 80053a4:	4013      	ands	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2b10      	cmp	r3, #16
 80053ac:	d102      	bne.n	80053b4 <HAL_RCC_OscConfig+0x144>
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d002      	beq.n	80053ba <HAL_RCC_OscConfig+0x14a>
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d135      	bne.n	8005426 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053ba:	4b78      	ldr	r3, [pc, #480]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	4013      	ands	r3, r2
 80053c4:	d005      	beq.n	80053d2 <HAL_RCC_OscConfig+0x162>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e25c      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d2:	4b72      	ldr	r3, [pc, #456]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4a74      	ldr	r2, [pc, #464]	; (80055a8 <HAL_RCC_OscConfig+0x338>)
 80053d8:	4013      	ands	r3, r2
 80053da:	0019      	movs	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	021a      	lsls	r2, r3, #8
 80053e2:	4b6e      	ldr	r3, [pc, #440]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 80053e4:	430a      	orrs	r2, r1
 80053e6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d112      	bne.n	8005414 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80053ee:	4b6b      	ldr	r3, [pc, #428]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a6e      	ldr	r2, [pc, #440]	; (80055ac <HAL_RCC_OscConfig+0x33c>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	0019      	movs	r1, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	4b67      	ldr	r3, [pc, #412]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 80053fe:	430a      	orrs	r2, r1
 8005400:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005402:	4b66      	ldr	r3, [pc, #408]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	0adb      	lsrs	r3, r3, #11
 8005408:	2207      	movs	r2, #7
 800540a:	4013      	ands	r3, r2
 800540c:	4a68      	ldr	r2, [pc, #416]	; (80055b0 <HAL_RCC_OscConfig+0x340>)
 800540e:	40da      	lsrs	r2, r3
 8005410:	4b68      	ldr	r3, [pc, #416]	; (80055b4 <HAL_RCC_OscConfig+0x344>)
 8005412:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005414:	4b68      	ldr	r3, [pc, #416]	; (80055b8 <HAL_RCC_OscConfig+0x348>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	0018      	movs	r0, r3
 800541a:	f7fd fdcd 	bl	8002fb8 <HAL_InitTick>
 800541e:	1e03      	subs	r3, r0, #0
 8005420:	d051      	beq.n	80054c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e232      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d030      	beq.n	8005490 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800542e:	4b5b      	ldr	r3, [pc, #364]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a5e      	ldr	r2, [pc, #376]	; (80055ac <HAL_RCC_OscConfig+0x33c>)
 8005434:	4013      	ands	r3, r2
 8005436:	0019      	movs	r1, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	4b57      	ldr	r3, [pc, #348]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 800543e:	430a      	orrs	r2, r1
 8005440:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005442:	4b56      	ldr	r3, [pc, #344]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	4b55      	ldr	r3, [pc, #340]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005448:	2180      	movs	r1, #128	; 0x80
 800544a:	0049      	lsls	r1, r1, #1
 800544c:	430a      	orrs	r2, r1
 800544e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005450:	f7fd fe0e 	bl	8003070 <HAL_GetTick>
 8005454:	0003      	movs	r3, r0
 8005456:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800545a:	f7fd fe09 	bl	8003070 <HAL_GetTick>
 800545e:	0002      	movs	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e20f      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800546c:	4b4b      	ldr	r3, [pc, #300]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	2380      	movs	r3, #128	; 0x80
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	4013      	ands	r3, r2
 8005476:	d0f0      	beq.n	800545a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005478:	4b48      	ldr	r3, [pc, #288]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	4a4a      	ldr	r2, [pc, #296]	; (80055a8 <HAL_RCC_OscConfig+0x338>)
 800547e:	4013      	ands	r3, r2
 8005480:	0019      	movs	r1, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	021a      	lsls	r2, r3, #8
 8005488:	4b44      	ldr	r3, [pc, #272]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 800548a:	430a      	orrs	r2, r1
 800548c:	605a      	str	r2, [r3, #4]
 800548e:	e01b      	b.n	80054c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005490:	4b42      	ldr	r3, [pc, #264]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	4b41      	ldr	r3, [pc, #260]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005496:	4949      	ldr	r1, [pc, #292]	; (80055bc <HAL_RCC_OscConfig+0x34c>)
 8005498:	400a      	ands	r2, r1
 800549a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fd fde8 	bl	8003070 <HAL_GetTick>
 80054a0:	0003      	movs	r3, r0
 80054a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a6:	f7fd fde3 	bl	8003070 <HAL_GetTick>
 80054aa:	0002      	movs	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e1e9      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054b8:	4b38      	ldr	r3, [pc, #224]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	2380      	movs	r3, #128	; 0x80
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4013      	ands	r3, r2
 80054c2:	d1f0      	bne.n	80054a6 <HAL_RCC_OscConfig+0x236>
 80054c4:	e000      	b.n	80054c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2208      	movs	r2, #8
 80054ce:	4013      	ands	r3, r2
 80054d0:	d047      	beq.n	8005562 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80054d2:	4b32      	ldr	r3, [pc, #200]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	2238      	movs	r2, #56	; 0x38
 80054d8:	4013      	ands	r3, r2
 80054da:	2b18      	cmp	r3, #24
 80054dc:	d10a      	bne.n	80054f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80054de:	4b2f      	ldr	r3, [pc, #188]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 80054e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e2:	2202      	movs	r2, #2
 80054e4:	4013      	ands	r3, r2
 80054e6:	d03c      	beq.n	8005562 <HAL_RCC_OscConfig+0x2f2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d138      	bne.n	8005562 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e1cb      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d019      	beq.n	8005530 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80054fc:	4b27      	ldr	r3, [pc, #156]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 80054fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005500:	4b26      	ldr	r3, [pc, #152]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005502:	2101      	movs	r1, #1
 8005504:	430a      	orrs	r2, r1
 8005506:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005508:	f7fd fdb2 	bl	8003070 <HAL_GetTick>
 800550c:	0003      	movs	r3, r0
 800550e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005512:	f7fd fdad 	bl	8003070 <HAL_GetTick>
 8005516:	0002      	movs	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e1b3      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005524:	4b1d      	ldr	r3, [pc, #116]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005528:	2202      	movs	r2, #2
 800552a:	4013      	ands	r3, r2
 800552c:	d0f1      	beq.n	8005512 <HAL_RCC_OscConfig+0x2a2>
 800552e:	e018      	b.n	8005562 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005530:	4b1a      	ldr	r3, [pc, #104]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005532:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005534:	4b19      	ldr	r3, [pc, #100]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005536:	2101      	movs	r1, #1
 8005538:	438a      	bics	r2, r1
 800553a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553c:	f7fd fd98 	bl	8003070 <HAL_GetTick>
 8005540:	0003      	movs	r3, r0
 8005542:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005546:	f7fd fd93 	bl	8003070 <HAL_GetTick>
 800554a:	0002      	movs	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e199      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005558:	4b10      	ldr	r3, [pc, #64]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 800555a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555c:	2202      	movs	r2, #2
 800555e:	4013      	ands	r3, r2
 8005560:	d1f1      	bne.n	8005546 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2204      	movs	r2, #4
 8005568:	4013      	ands	r3, r2
 800556a:	d100      	bne.n	800556e <HAL_RCC_OscConfig+0x2fe>
 800556c:	e0c6      	b.n	80056fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800556e:	231f      	movs	r3, #31
 8005570:	18fb      	adds	r3, r7, r3
 8005572:	2200      	movs	r2, #0
 8005574:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005576:	4b09      	ldr	r3, [pc, #36]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2238      	movs	r2, #56	; 0x38
 800557c:	4013      	ands	r3, r2
 800557e:	2b20      	cmp	r3, #32
 8005580:	d11e      	bne.n	80055c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005582:	4b06      	ldr	r3, [pc, #24]	; (800559c <HAL_RCC_OscConfig+0x32c>)
 8005584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005586:	2202      	movs	r2, #2
 8005588:	4013      	ands	r3, r2
 800558a:	d100      	bne.n	800558e <HAL_RCC_OscConfig+0x31e>
 800558c:	e0b6      	b.n	80056fc <HAL_RCC_OscConfig+0x48c>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d000      	beq.n	8005598 <HAL_RCC_OscConfig+0x328>
 8005596:	e0b1      	b.n	80056fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e177      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
 800559c:	40021000 	.word	0x40021000
 80055a0:	fffeffff 	.word	0xfffeffff
 80055a4:	fffbffff 	.word	0xfffbffff
 80055a8:	ffff80ff 	.word	0xffff80ff
 80055ac:	ffffc7ff 	.word	0xffffc7ff
 80055b0:	00f42400 	.word	0x00f42400
 80055b4:	20003134 	.word	0x20003134
 80055b8:	20003138 	.word	0x20003138
 80055bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055c0:	4bb4      	ldr	r3, [pc, #720]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 80055c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	055b      	lsls	r3, r3, #21
 80055c8:	4013      	ands	r3, r2
 80055ca:	d101      	bne.n	80055d0 <HAL_RCC_OscConfig+0x360>
 80055cc:	2301      	movs	r3, #1
 80055ce:	e000      	b.n	80055d2 <HAL_RCC_OscConfig+0x362>
 80055d0:	2300      	movs	r3, #0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d011      	beq.n	80055fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80055d6:	4baf      	ldr	r3, [pc, #700]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 80055d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055da:	4bae      	ldr	r3, [pc, #696]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 80055dc:	2180      	movs	r1, #128	; 0x80
 80055de:	0549      	lsls	r1, r1, #21
 80055e0:	430a      	orrs	r2, r1
 80055e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80055e4:	4bab      	ldr	r3, [pc, #684]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 80055e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055e8:	2380      	movs	r3, #128	; 0x80
 80055ea:	055b      	lsls	r3, r3, #21
 80055ec:	4013      	ands	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80055f2:	231f      	movs	r3, #31
 80055f4:	18fb      	adds	r3, r7, r3
 80055f6:	2201      	movs	r2, #1
 80055f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055fa:	4ba7      	ldr	r3, [pc, #668]	; (8005898 <HAL_RCC_OscConfig+0x628>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	2380      	movs	r3, #128	; 0x80
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	4013      	ands	r3, r2
 8005604:	d11a      	bne.n	800563c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005606:	4ba4      	ldr	r3, [pc, #656]	; (8005898 <HAL_RCC_OscConfig+0x628>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4ba3      	ldr	r3, [pc, #652]	; (8005898 <HAL_RCC_OscConfig+0x628>)
 800560c:	2180      	movs	r1, #128	; 0x80
 800560e:	0049      	lsls	r1, r1, #1
 8005610:	430a      	orrs	r2, r1
 8005612:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005614:	f7fd fd2c 	bl	8003070 <HAL_GetTick>
 8005618:	0003      	movs	r3, r0
 800561a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561e:	f7fd fd27 	bl	8003070 <HAL_GetTick>
 8005622:	0002      	movs	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e12d      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005630:	4b99      	ldr	r3, [pc, #612]	; (8005898 <HAL_RCC_OscConfig+0x628>)
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	2380      	movs	r3, #128	; 0x80
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	4013      	ands	r3, r2
 800563a:	d0f0      	beq.n	800561e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d106      	bne.n	8005652 <HAL_RCC_OscConfig+0x3e2>
 8005644:	4b93      	ldr	r3, [pc, #588]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 8005646:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005648:	4b92      	ldr	r3, [pc, #584]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 800564a:	2101      	movs	r1, #1
 800564c:	430a      	orrs	r2, r1
 800564e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005650:	e01c      	b.n	800568c <HAL_RCC_OscConfig+0x41c>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	2b05      	cmp	r3, #5
 8005658:	d10c      	bne.n	8005674 <HAL_RCC_OscConfig+0x404>
 800565a:	4b8e      	ldr	r3, [pc, #568]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 800565c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800565e:	4b8d      	ldr	r3, [pc, #564]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 8005660:	2104      	movs	r1, #4
 8005662:	430a      	orrs	r2, r1
 8005664:	65da      	str	r2, [r3, #92]	; 0x5c
 8005666:	4b8b      	ldr	r3, [pc, #556]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 8005668:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800566a:	4b8a      	ldr	r3, [pc, #552]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 800566c:	2101      	movs	r1, #1
 800566e:	430a      	orrs	r2, r1
 8005670:	65da      	str	r2, [r3, #92]	; 0x5c
 8005672:	e00b      	b.n	800568c <HAL_RCC_OscConfig+0x41c>
 8005674:	4b87      	ldr	r3, [pc, #540]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 8005676:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005678:	4b86      	ldr	r3, [pc, #536]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 800567a:	2101      	movs	r1, #1
 800567c:	438a      	bics	r2, r1
 800567e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005680:	4b84      	ldr	r3, [pc, #528]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 8005682:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005684:	4b83      	ldr	r3, [pc, #524]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 8005686:	2104      	movs	r1, #4
 8005688:	438a      	bics	r2, r1
 800568a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d014      	beq.n	80056be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005694:	f7fd fcec 	bl	8003070 <HAL_GetTick>
 8005698:	0003      	movs	r3, r0
 800569a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800569c:	e009      	b.n	80056b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800569e:	f7fd fce7 	bl	8003070 <HAL_GetTick>
 80056a2:	0002      	movs	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	4a7c      	ldr	r2, [pc, #496]	; (800589c <HAL_RCC_OscConfig+0x62c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e0ec      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056b2:	4b78      	ldr	r3, [pc, #480]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 80056b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b6:	2202      	movs	r2, #2
 80056b8:	4013      	ands	r3, r2
 80056ba:	d0f0      	beq.n	800569e <HAL_RCC_OscConfig+0x42e>
 80056bc:	e013      	b.n	80056e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fd fcd7 	bl	8003070 <HAL_GetTick>
 80056c2:	0003      	movs	r3, r0
 80056c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056c6:	e009      	b.n	80056dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c8:	f7fd fcd2 	bl	8003070 <HAL_GetTick>
 80056cc:	0002      	movs	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	4a72      	ldr	r2, [pc, #456]	; (800589c <HAL_RCC_OscConfig+0x62c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e0d7      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056dc:	4b6d      	ldr	r3, [pc, #436]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 80056de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e0:	2202      	movs	r2, #2
 80056e2:	4013      	ands	r3, r2
 80056e4:	d1f0      	bne.n	80056c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80056e6:	231f      	movs	r3, #31
 80056e8:	18fb      	adds	r3, r7, r3
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d105      	bne.n	80056fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80056f0:	4b68      	ldr	r3, [pc, #416]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 80056f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056f4:	4b67      	ldr	r3, [pc, #412]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 80056f6:	496a      	ldr	r1, [pc, #424]	; (80058a0 <HAL_RCC_OscConfig+0x630>)
 80056f8:	400a      	ands	r2, r1
 80056fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d100      	bne.n	8005706 <HAL_RCC_OscConfig+0x496>
 8005704:	e0c1      	b.n	800588a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005706:	4b63      	ldr	r3, [pc, #396]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	2238      	movs	r2, #56	; 0x38
 800570c:	4013      	ands	r3, r2
 800570e:	2b10      	cmp	r3, #16
 8005710:	d100      	bne.n	8005714 <HAL_RCC_OscConfig+0x4a4>
 8005712:	e081      	b.n	8005818 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d156      	bne.n	80057ca <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800571c:	4b5d      	ldr	r3, [pc, #372]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	4b5c      	ldr	r3, [pc, #368]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 8005722:	4960      	ldr	r1, [pc, #384]	; (80058a4 <HAL_RCC_OscConfig+0x634>)
 8005724:	400a      	ands	r2, r1
 8005726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005728:	f7fd fca2 	bl	8003070 <HAL_GetTick>
 800572c:	0003      	movs	r3, r0
 800572e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005732:	f7fd fc9d 	bl	8003070 <HAL_GetTick>
 8005736:	0002      	movs	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e0a3      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005744:	4b53      	ldr	r3, [pc, #332]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	2380      	movs	r3, #128	; 0x80
 800574a:	049b      	lsls	r3, r3, #18
 800574c:	4013      	ands	r3, r2
 800574e:	d1f0      	bne.n	8005732 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005750:	4b50      	ldr	r3, [pc, #320]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a54      	ldr	r2, [pc, #336]	; (80058a8 <HAL_RCC_OscConfig+0x638>)
 8005756:	4013      	ands	r3, r2
 8005758:	0019      	movs	r1, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1a      	ldr	r2, [r3, #32]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005768:	021b      	lsls	r3, r3, #8
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577c:	431a      	orrs	r2, r3
 800577e:	4b45      	ldr	r3, [pc, #276]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 8005780:	430a      	orrs	r2, r1
 8005782:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005784:	4b43      	ldr	r3, [pc, #268]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	4b42      	ldr	r3, [pc, #264]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 800578a:	2180      	movs	r1, #128	; 0x80
 800578c:	0449      	lsls	r1, r1, #17
 800578e:	430a      	orrs	r2, r1
 8005790:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005792:	4b40      	ldr	r3, [pc, #256]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	4b3f      	ldr	r3, [pc, #252]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 8005798:	2180      	movs	r1, #128	; 0x80
 800579a:	0549      	lsls	r1, r1, #21
 800579c:	430a      	orrs	r2, r1
 800579e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fd fc66 	bl	8003070 <HAL_GetTick>
 80057a4:	0003      	movs	r3, r0
 80057a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057aa:	f7fd fc61 	bl	8003070 <HAL_GetTick>
 80057ae:	0002      	movs	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e067      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057bc:	4b35      	ldr	r3, [pc, #212]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	2380      	movs	r3, #128	; 0x80
 80057c2:	049b      	lsls	r3, r3, #18
 80057c4:	4013      	ands	r3, r2
 80057c6:	d0f0      	beq.n	80057aa <HAL_RCC_OscConfig+0x53a>
 80057c8:	e05f      	b.n	800588a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ca:	4b32      	ldr	r3, [pc, #200]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	4b31      	ldr	r3, [pc, #196]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 80057d0:	4934      	ldr	r1, [pc, #208]	; (80058a4 <HAL_RCC_OscConfig+0x634>)
 80057d2:	400a      	ands	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80057d6:	4b2f      	ldr	r3, [pc, #188]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	4b2e      	ldr	r3, [pc, #184]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 80057dc:	2103      	movs	r1, #3
 80057de:	438a      	bics	r2, r1
 80057e0:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80057e2:	4b2c      	ldr	r3, [pc, #176]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	4b2b      	ldr	r3, [pc, #172]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 80057e8:	4930      	ldr	r1, [pc, #192]	; (80058ac <HAL_RCC_OscConfig+0x63c>)
 80057ea:	400a      	ands	r2, r1
 80057ec:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ee:	f7fd fc3f 	bl	8003070 <HAL_GetTick>
 80057f2:	0003      	movs	r3, r0
 80057f4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f8:	f7fd fc3a 	bl	8003070 <HAL_GetTick>
 80057fc:	0002      	movs	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e040      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800580a:	4b22      	ldr	r3, [pc, #136]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	2380      	movs	r3, #128	; 0x80
 8005810:	049b      	lsls	r3, r3, #18
 8005812:	4013      	ands	r3, r2
 8005814:	d1f0      	bne.n	80057f8 <HAL_RCC_OscConfig+0x588>
 8005816:	e038      	b.n	800588a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	69db      	ldr	r3, [r3, #28]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e033      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005824:	4b1b      	ldr	r3, [pc, #108]	; (8005894 <HAL_RCC_OscConfig+0x624>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2203      	movs	r2, #3
 800582e:	401a      	ands	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	429a      	cmp	r2, r3
 8005836:	d126      	bne.n	8005886 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2270      	movs	r2, #112	; 0x70
 800583c:	401a      	ands	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005842:	429a      	cmp	r2, r3
 8005844:	d11f      	bne.n	8005886 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	23fe      	movs	r3, #254	; 0xfe
 800584a:	01db      	lsls	r3, r3, #7
 800584c:	401a      	ands	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005852:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005854:	429a      	cmp	r2, r3
 8005856:	d116      	bne.n	8005886 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	23f8      	movs	r3, #248	; 0xf8
 800585c:	039b      	lsls	r3, r3, #14
 800585e:	401a      	ands	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005864:	429a      	cmp	r2, r3
 8005866:	d10e      	bne.n	8005886 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	23e0      	movs	r3, #224	; 0xe0
 800586c:	051b      	lsls	r3, r3, #20
 800586e:	401a      	ands	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005874:	429a      	cmp	r2, r3
 8005876:	d106      	bne.n	8005886 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	0f5b      	lsrs	r3, r3, #29
 800587c:	075a      	lsls	r2, r3, #29
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005882:	429a      	cmp	r2, r3
 8005884:	d001      	beq.n	800588a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	0018      	movs	r0, r3
 800588e:	46bd      	mov	sp, r7
 8005890:	b008      	add	sp, #32
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40021000 	.word	0x40021000
 8005898:	40007000 	.word	0x40007000
 800589c:	00001388 	.word	0x00001388
 80058a0:	efffffff 	.word	0xefffffff
 80058a4:	feffffff 	.word	0xfeffffff
 80058a8:	11c1808c 	.word	0x11c1808c
 80058ac:	eefeffff 	.word	0xeefeffff

080058b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0e9      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058c4:	4b76      	ldr	r3, [pc, #472]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2207      	movs	r2, #7
 80058ca:	4013      	ands	r3, r2
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d91e      	bls.n	8005910 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d2:	4b73      	ldr	r3, [pc, #460]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2207      	movs	r2, #7
 80058d8:	4393      	bics	r3, r2
 80058da:	0019      	movs	r1, r3
 80058dc:	4b70      	ldr	r3, [pc, #448]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058e4:	f7fd fbc4 	bl	8003070 <HAL_GetTick>
 80058e8:	0003      	movs	r3, r0
 80058ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80058ec:	e009      	b.n	8005902 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ee:	f7fd fbbf 	bl	8003070 <HAL_GetTick>
 80058f2:	0002      	movs	r2, r0
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	4a6a      	ldr	r2, [pc, #424]	; (8005aa4 <HAL_RCC_ClockConfig+0x1f4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e0ca      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005902:	4b67      	ldr	r3, [pc, #412]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2207      	movs	r2, #7
 8005908:	4013      	ands	r3, r2
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d1ee      	bne.n	80058ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2202      	movs	r2, #2
 8005916:	4013      	ands	r3, r2
 8005918:	d015      	beq.n	8005946 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2204      	movs	r2, #4
 8005920:	4013      	ands	r3, r2
 8005922:	d006      	beq.n	8005932 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005924:	4b60      	ldr	r3, [pc, #384]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	4b5f      	ldr	r3, [pc, #380]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 800592a:	21e0      	movs	r1, #224	; 0xe0
 800592c:	01c9      	lsls	r1, r1, #7
 800592e:	430a      	orrs	r2, r1
 8005930:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005932:	4b5d      	ldr	r3, [pc, #372]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	4a5d      	ldr	r2, [pc, #372]	; (8005aac <HAL_RCC_ClockConfig+0x1fc>)
 8005938:	4013      	ands	r3, r2
 800593a:	0019      	movs	r1, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	4b59      	ldr	r3, [pc, #356]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8005942:	430a      	orrs	r2, r1
 8005944:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2201      	movs	r2, #1
 800594c:	4013      	ands	r3, r2
 800594e:	d057      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d107      	bne.n	8005968 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005958:	4b53      	ldr	r3, [pc, #332]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	029b      	lsls	r3, r3, #10
 8005960:	4013      	ands	r3, r2
 8005962:	d12b      	bne.n	80059bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e097      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d107      	bne.n	8005980 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005970:	4b4d      	ldr	r3, [pc, #308]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	049b      	lsls	r3, r3, #18
 8005978:	4013      	ands	r3, r2
 800597a:	d11f      	bne.n	80059bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e08b      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d107      	bne.n	8005998 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005988:	4b47      	ldr	r3, [pc, #284]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	2380      	movs	r3, #128	; 0x80
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	4013      	ands	r3, r2
 8005992:	d113      	bne.n	80059bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e07f      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b03      	cmp	r3, #3
 800599e:	d106      	bne.n	80059ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059a0:	4b41      	ldr	r3, [pc, #260]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80059a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a4:	2202      	movs	r2, #2
 80059a6:	4013      	ands	r3, r2
 80059a8:	d108      	bne.n	80059bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e074      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ae:	4b3e      	ldr	r3, [pc, #248]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80059b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b2:	2202      	movs	r2, #2
 80059b4:	4013      	ands	r3, r2
 80059b6:	d101      	bne.n	80059bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e06d      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059bc:	4b3a      	ldr	r3, [pc, #232]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	2207      	movs	r2, #7
 80059c2:	4393      	bics	r3, r2
 80059c4:	0019      	movs	r1, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	4b37      	ldr	r3, [pc, #220]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80059cc:	430a      	orrs	r2, r1
 80059ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059d0:	f7fd fb4e 	bl	8003070 <HAL_GetTick>
 80059d4:	0003      	movs	r3, r0
 80059d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059d8:	e009      	b.n	80059ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059da:	f7fd fb49 	bl	8003070 <HAL_GetTick>
 80059de:	0002      	movs	r2, r0
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	4a2f      	ldr	r2, [pc, #188]	; (8005aa4 <HAL_RCC_ClockConfig+0x1f4>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e054      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ee:	4b2e      	ldr	r3, [pc, #184]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	2238      	movs	r2, #56	; 0x38
 80059f4:	401a      	ands	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d1ec      	bne.n	80059da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a00:	4b27      	ldr	r3, [pc, #156]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2207      	movs	r2, #7
 8005a06:	4013      	ands	r3, r2
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d21e      	bcs.n	8005a4c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a0e:	4b24      	ldr	r3, [pc, #144]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2207      	movs	r2, #7
 8005a14:	4393      	bics	r3, r2
 8005a16:	0019      	movs	r1, r3
 8005a18:	4b21      	ldr	r3, [pc, #132]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a20:	f7fd fb26 	bl	8003070 <HAL_GetTick>
 8005a24:	0003      	movs	r3, r0
 8005a26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a28:	e009      	b.n	8005a3e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a2a:	f7fd fb21 	bl	8003070 <HAL_GetTick>
 8005a2e:	0002      	movs	r2, r0
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	4a1b      	ldr	r2, [pc, #108]	; (8005aa4 <HAL_RCC_ClockConfig+0x1f4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e02c      	b.n	8005a98 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a3e:	4b18      	ldr	r3, [pc, #96]	; (8005aa0 <HAL_RCC_ClockConfig+0x1f0>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2207      	movs	r2, #7
 8005a44:	4013      	ands	r3, r2
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d1ee      	bne.n	8005a2a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2204      	movs	r2, #4
 8005a52:	4013      	ands	r3, r2
 8005a54:	d009      	beq.n	8005a6a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005a56:	4b14      	ldr	r3, [pc, #80]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <HAL_RCC_ClockConfig+0x200>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	0019      	movs	r1, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8005a66:	430a      	orrs	r2, r1
 8005a68:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005a6a:	f000 f829 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 8005a6e:	0001      	movs	r1, r0
 8005a70:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <HAL_RCC_ClockConfig+0x1f8>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	0a1b      	lsrs	r3, r3, #8
 8005a76:	220f      	movs	r2, #15
 8005a78:	401a      	ands	r2, r3
 8005a7a:	4b0e      	ldr	r3, [pc, #56]	; (8005ab4 <HAL_RCC_ClockConfig+0x204>)
 8005a7c:	0092      	lsls	r2, r2, #2
 8005a7e:	58d3      	ldr	r3, [r2, r3]
 8005a80:	221f      	movs	r2, #31
 8005a82:	4013      	ands	r3, r2
 8005a84:	000a      	movs	r2, r1
 8005a86:	40da      	lsrs	r2, r3
 8005a88:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <HAL_RCC_ClockConfig+0x208>)
 8005a8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a8c:	4b0b      	ldr	r3, [pc, #44]	; (8005abc <HAL_RCC_ClockConfig+0x20c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	0018      	movs	r0, r3
 8005a92:	f7fd fa91 	bl	8002fb8 <HAL_InitTick>
 8005a96:	0003      	movs	r3, r0
}
 8005a98:	0018      	movs	r0, r3
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	b004      	add	sp, #16
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40022000 	.word	0x40022000
 8005aa4:	00001388 	.word	0x00001388
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	fffff0ff 	.word	0xfffff0ff
 8005ab0:	ffff8fff 	.word	0xffff8fff
 8005ab4:	0800a738 	.word	0x0800a738
 8005ab8:	20003134 	.word	0x20003134
 8005abc:	20003138 	.word	0x20003138

08005ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ac6:	4b3c      	ldr	r3, [pc, #240]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2238      	movs	r2, #56	; 0x38
 8005acc:	4013      	ands	r3, r2
 8005ace:	d10f      	bne.n	8005af0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005ad0:	4b39      	ldr	r3, [pc, #228]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	0adb      	lsrs	r3, r3, #11
 8005ad6:	2207      	movs	r2, #7
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2201      	movs	r2, #1
 8005adc:	409a      	lsls	r2, r3
 8005ade:	0013      	movs	r3, r2
 8005ae0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	4835      	ldr	r0, [pc, #212]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8005ae6:	f7fa fb0d 	bl	8000104 <__udivsi3>
 8005aea:	0003      	movs	r3, r0
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	e05d      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005af0:	4b31      	ldr	r3, [pc, #196]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2238      	movs	r2, #56	; 0x38
 8005af6:	4013      	ands	r3, r2
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d102      	bne.n	8005b02 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005afc:	4b30      	ldr	r3, [pc, #192]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005afe:	613b      	str	r3, [r7, #16]
 8005b00:	e054      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b02:	4b2d      	ldr	r3, [pc, #180]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	2238      	movs	r2, #56	; 0x38
 8005b08:	4013      	ands	r3, r2
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d138      	bne.n	8005b80 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005b0e:	4b2a      	ldr	r3, [pc, #168]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	2203      	movs	r2, #3
 8005b14:	4013      	ands	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b18:	4b27      	ldr	r3, [pc, #156]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	091b      	lsrs	r3, r3, #4
 8005b1e:	2207      	movs	r2, #7
 8005b20:	4013      	ands	r3, r2
 8005b22:	3301      	adds	r3, #1
 8005b24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d10d      	bne.n	8005b48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	4824      	ldr	r0, [pc, #144]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005b30:	f7fa fae8 	bl	8000104 <__udivsi3>
 8005b34:	0003      	movs	r3, r0
 8005b36:	0019      	movs	r1, r3
 8005b38:	4b1f      	ldr	r3, [pc, #124]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	0a1b      	lsrs	r3, r3, #8
 8005b3e:	227f      	movs	r2, #127	; 0x7f
 8005b40:	4013      	ands	r3, r2
 8005b42:	434b      	muls	r3, r1
 8005b44:	617b      	str	r3, [r7, #20]
        break;
 8005b46:	e00d      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	481c      	ldr	r0, [pc, #112]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b4c:	f7fa fada 	bl	8000104 <__udivsi3>
 8005b50:	0003      	movs	r3, r0
 8005b52:	0019      	movs	r1, r3
 8005b54:	4b18      	ldr	r3, [pc, #96]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	0a1b      	lsrs	r3, r3, #8
 8005b5a:	227f      	movs	r2, #127	; 0x7f
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	434b      	muls	r3, r1
 8005b60:	617b      	str	r3, [r7, #20]
        break;
 8005b62:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005b64:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	0f5b      	lsrs	r3, r3, #29
 8005b6a:	2207      	movs	r2, #7
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	3301      	adds	r3, #1
 8005b70:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	6978      	ldr	r0, [r7, #20]
 8005b76:	f7fa fac5 	bl	8000104 <__udivsi3>
 8005b7a:	0003      	movs	r3, r0
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	e015      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005b80:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2238      	movs	r2, #56	; 0x38
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d103      	bne.n	8005b94 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	613b      	str	r3, [r7, #16]
 8005b92:	e00b      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005b94:	4b08      	ldr	r3, [pc, #32]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2238      	movs	r2, #56	; 0x38
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b18      	cmp	r3, #24
 8005b9e:	d103      	bne.n	8005ba8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005ba0:	23fa      	movs	r3, #250	; 0xfa
 8005ba2:	01db      	lsls	r3, r3, #7
 8005ba4:	613b      	str	r3, [r7, #16]
 8005ba6:	e001      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005bac:	693b      	ldr	r3, [r7, #16]
}
 8005bae:	0018      	movs	r0, r3
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	b006      	add	sp, #24
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	00f42400 	.word	0x00f42400
 8005bc0:	007a1200 	.word	0x007a1200

08005bc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bc8:	4b02      	ldr	r3, [pc, #8]	; (8005bd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bca:	681b      	ldr	r3, [r3, #0]
}
 8005bcc:	0018      	movs	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	20003134 	.word	0x20003134

08005bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd8:	b5b0      	push	{r4, r5, r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005bdc:	f7ff fff2 	bl	8005bc4 <HAL_RCC_GetHCLKFreq>
 8005be0:	0004      	movs	r4, r0
 8005be2:	f7ff fb39 	bl	8005258 <LL_RCC_GetAPB1Prescaler>
 8005be6:	0003      	movs	r3, r0
 8005be8:	0b1a      	lsrs	r2, r3, #12
 8005bea:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bec:	0092      	lsls	r2, r2, #2
 8005bee:	58d3      	ldr	r3, [r2, r3]
 8005bf0:	221f      	movs	r2, #31
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	40dc      	lsrs	r4, r3
 8005bf6:	0023      	movs	r3, r4
}
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8005bfe:	46c0      	nop			; (mov r8, r8)
 8005c00:	0800a778 	.word	0x0800a778

08005c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005c0c:	2313      	movs	r3, #19
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	2200      	movs	r2, #0
 8005c12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c14:	2312      	movs	r3, #18
 8005c16:	18fb      	adds	r3, r7, r3
 8005c18:	2200      	movs	r2, #0
 8005c1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	2380      	movs	r3, #128	; 0x80
 8005c22:	029b      	lsls	r3, r3, #10
 8005c24:	4013      	ands	r3, r2
 8005c26:	d100      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005c28:	e0a3      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c2a:	2011      	movs	r0, #17
 8005c2c:	183b      	adds	r3, r7, r0
 8005c2e:	2200      	movs	r2, #0
 8005c30:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c32:	4bc3      	ldr	r3, [pc, #780]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c36:	2380      	movs	r3, #128	; 0x80
 8005c38:	055b      	lsls	r3, r3, #21
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	d110      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c3e:	4bc0      	ldr	r3, [pc, #768]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c42:	4bbf      	ldr	r3, [pc, #764]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c44:	2180      	movs	r1, #128	; 0x80
 8005c46:	0549      	lsls	r1, r1, #21
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c4c:	4bbc      	ldr	r3, [pc, #752]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c50:	2380      	movs	r3, #128	; 0x80
 8005c52:	055b      	lsls	r3, r3, #21
 8005c54:	4013      	ands	r3, r2
 8005c56:	60bb      	str	r3, [r7, #8]
 8005c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c5a:	183b      	adds	r3, r7, r0
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c60:	4bb8      	ldr	r3, [pc, #736]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	4bb7      	ldr	r3, [pc, #732]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005c66:	2180      	movs	r1, #128	; 0x80
 8005c68:	0049      	lsls	r1, r1, #1
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c6e:	f7fd f9ff 	bl	8003070 <HAL_GetTick>
 8005c72:	0003      	movs	r3, r0
 8005c74:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c76:	e00b      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c78:	f7fd f9fa 	bl	8003070 <HAL_GetTick>
 8005c7c:	0002      	movs	r2, r0
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d904      	bls.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005c86:	2313      	movs	r3, #19
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	701a      	strb	r2, [r3, #0]
        break;
 8005c8e:	e005      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c90:	4bac      	ldr	r3, [pc, #688]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	2380      	movs	r3, #128	; 0x80
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d0ed      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005c9c:	2313      	movs	r3, #19
 8005c9e:	18fb      	adds	r3, r7, r3
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d154      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ca6:	4ba6      	ldr	r3, [pc, #664]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ca8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005caa:	23c0      	movs	r3, #192	; 0xc0
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4013      	ands	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d019      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d014      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cc2:	4b9f      	ldr	r3, [pc, #636]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc6:	4aa0      	ldr	r2, [pc, #640]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ccc:	4b9c      	ldr	r3, [pc, #624]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cd0:	4b9b      	ldr	r3, [pc, #620]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cd2:	2180      	movs	r1, #128	; 0x80
 8005cd4:	0249      	lsls	r1, r1, #9
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cda:	4b99      	ldr	r3, [pc, #612]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cde:	4b98      	ldr	r3, [pc, #608]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ce0:	499a      	ldr	r1, [pc, #616]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005ce2:	400a      	ands	r2, r1
 8005ce4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ce6:	4b96      	ldr	r3, [pc, #600]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	d016      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf4:	f7fd f9bc 	bl	8003070 <HAL_GetTick>
 8005cf8:	0003      	movs	r3, r0
 8005cfa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cfc:	e00c      	b.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cfe:	f7fd f9b7 	bl	8003070 <HAL_GetTick>
 8005d02:	0002      	movs	r2, r0
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	4a91      	ldr	r2, [pc, #580]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d904      	bls.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005d0e:	2313      	movs	r3, #19
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	2203      	movs	r2, #3
 8005d14:	701a      	strb	r2, [r3, #0]
            break;
 8005d16:	e004      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d18:	4b89      	ldr	r3, [pc, #548]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	4013      	ands	r3, r2
 8005d20:	d0ed      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005d22:	2313      	movs	r3, #19
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d2c:	4b84      	ldr	r3, [pc, #528]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d30:	4a85      	ldr	r2, [pc, #532]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	0019      	movs	r1, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d3a:	4b81      	ldr	r3, [pc, #516]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d40:	e00c      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d42:	2312      	movs	r3, #18
 8005d44:	18fb      	adds	r3, r7, r3
 8005d46:	2213      	movs	r2, #19
 8005d48:	18ba      	adds	r2, r7, r2
 8005d4a:	7812      	ldrb	r2, [r2, #0]
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	e005      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d50:	2312      	movs	r3, #18
 8005d52:	18fb      	adds	r3, r7, r3
 8005d54:	2213      	movs	r2, #19
 8005d56:	18ba      	adds	r2, r7, r2
 8005d58:	7812      	ldrb	r2, [r2, #0]
 8005d5a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d5c:	2311      	movs	r3, #17
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d105      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d66:	4b76      	ldr	r3, [pc, #472]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d6a:	4b75      	ldr	r3, [pc, #468]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d6c:	4979      	ldr	r1, [pc, #484]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005d6e:	400a      	ands	r2, r1
 8005d70:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2201      	movs	r2, #1
 8005d78:	4013      	ands	r3, r2
 8005d7a:	d009      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d7c:	4b70      	ldr	r3, [pc, #448]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d80:	2203      	movs	r2, #3
 8005d82:	4393      	bics	r3, r2
 8005d84:	0019      	movs	r1, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	4b6d      	ldr	r3, [pc, #436]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2202      	movs	r2, #2
 8005d96:	4013      	ands	r3, r2
 8005d98:	d009      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d9a:	4b69      	ldr	r3, [pc, #420]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9e:	220c      	movs	r2, #12
 8005da0:	4393      	bics	r3, r2
 8005da2:	0019      	movs	r1, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	4b65      	ldr	r3, [pc, #404]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005daa:	430a      	orrs	r2, r1
 8005dac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2210      	movs	r2, #16
 8005db4:	4013      	ands	r3, r2
 8005db6:	d009      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005db8:	4b61      	ldr	r3, [pc, #388]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dbc:	4a66      	ldr	r2, [pc, #408]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	0019      	movs	r1, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68da      	ldr	r2, [r3, #12]
 8005dc6:	4b5e      	ldr	r3, [pc, #376]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	2380      	movs	r3, #128	; 0x80
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	d009      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dd8:	4b59      	ldr	r3, [pc, #356]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ddc:	4a5f      	ldr	r2, [pc, #380]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005dde:	4013      	ands	r3, r2
 8005de0:	0019      	movs	r1, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	4b56      	ldr	r3, [pc, #344]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005de8:	430a      	orrs	r2, r1
 8005dea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	2380      	movs	r3, #128	; 0x80
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	4013      	ands	r3, r2
 8005df6:	d009      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005df8:	4b51      	ldr	r3, [pc, #324]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfc:	4a58      	ldr	r2, [pc, #352]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005dfe:	4013      	ands	r3, r2
 8005e00:	0019      	movs	r1, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69da      	ldr	r2, [r3, #28]
 8005e06:	4b4e      	ldr	r3, [pc, #312]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2220      	movs	r2, #32
 8005e12:	4013      	ands	r3, r2
 8005e14:	d009      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e16:	4b4a      	ldr	r3, [pc, #296]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1a:	4a52      	ldr	r2, [pc, #328]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	0019      	movs	r1, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	4b46      	ldr	r3, [pc, #280]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e26:	430a      	orrs	r2, r1
 8005e28:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	2380      	movs	r3, #128	; 0x80
 8005e30:	01db      	lsls	r3, r3, #7
 8005e32:	4013      	ands	r3, r2
 8005e34:	d015      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e36:	4b42      	ldr	r3, [pc, #264]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	0899      	lsrs	r1, r3, #2
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1a      	ldr	r2, [r3, #32]
 8005e42:	4b3f      	ldr	r3, [pc, #252]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e44:	430a      	orrs	r2, r1
 8005e46:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1a      	ldr	r2, [r3, #32]
 8005e4c:	2380      	movs	r3, #128	; 0x80
 8005e4e:	05db      	lsls	r3, r3, #23
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d106      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005e54:	4b3a      	ldr	r3, [pc, #232]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	4b39      	ldr	r3, [pc, #228]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e5a:	2180      	movs	r1, #128	; 0x80
 8005e5c:	0249      	lsls	r1, r1, #9
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	2380      	movs	r3, #128	; 0x80
 8005e68:	031b      	lsls	r3, r3, #12
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	d009      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e6e:	4b34      	ldr	r3, [pc, #208]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e72:	2240      	movs	r2, #64	; 0x40
 8005e74:	4393      	bics	r3, r2
 8005e76:	0019      	movs	r1, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e7c:	4b30      	ldr	r3, [pc, #192]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	039b      	lsls	r3, r3, #14
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d016      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005e8e:	4b2c      	ldr	r3, [pc, #176]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e92:	4a35      	ldr	r2, [pc, #212]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	0019      	movs	r1, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e9c:	4b28      	ldr	r3, [pc, #160]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ea6:	2380      	movs	r3, #128	; 0x80
 8005ea8:	03db      	lsls	r3, r3, #15
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d106      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005eae:	4b24      	ldr	r3, [pc, #144]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	4b23      	ldr	r3, [pc, #140]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eb4:	2180      	movs	r1, #128	; 0x80
 8005eb6:	0449      	lsls	r1, r1, #17
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	2380      	movs	r3, #128	; 0x80
 8005ec2:	03db      	lsls	r3, r3, #15
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	d016      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005ec8:	4b1d      	ldr	r3, [pc, #116]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ecc:	4a27      	ldr	r2, [pc, #156]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005ece:	4013      	ands	r3, r2
 8005ed0:	0019      	movs	r1, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed6:	4b1a      	ldr	r3, [pc, #104]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee0:	2380      	movs	r3, #128	; 0x80
 8005ee2:	045b      	lsls	r3, r3, #17
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d106      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005ee8:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eee:	2180      	movs	r1, #128	; 0x80
 8005ef0:	0449      	lsls	r1, r1, #17
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	2380      	movs	r3, #128	; 0x80
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	4013      	ands	r3, r2
 8005f00:	d016      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005f02:	4b0f      	ldr	r3, [pc, #60]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f06:	4a1a      	ldr	r2, [pc, #104]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005f08:	4013      	ands	r3, r2
 8005f0a:	0019      	movs	r1, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	695a      	ldr	r2, [r3, #20]
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f12:	430a      	orrs	r2, r1
 8005f14:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695a      	ldr	r2, [r3, #20]
 8005f1a:	2380      	movs	r3, #128	; 0x80
 8005f1c:	01db      	lsls	r3, r3, #7
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d106      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005f22:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	4b06      	ldr	r3, [pc, #24]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f28:	2180      	movs	r1, #128	; 0x80
 8005f2a:	0249      	lsls	r1, r1, #9
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005f30:	2312      	movs	r3, #18
 8005f32:	18fb      	adds	r3, r7, r3
 8005f34:	781b      	ldrb	r3, [r3, #0]
}
 8005f36:	0018      	movs	r0, r3
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	b006      	add	sp, #24
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	40021000 	.word	0x40021000
 8005f44:	40007000 	.word	0x40007000
 8005f48:	fffffcff 	.word	0xfffffcff
 8005f4c:	fffeffff 	.word	0xfffeffff
 8005f50:	00001388 	.word	0x00001388
 8005f54:	efffffff 	.word	0xefffffff
 8005f58:	fffff3ff 	.word	0xfffff3ff
 8005f5c:	fff3ffff 	.word	0xfff3ffff
 8005f60:	ffcfffff 	.word	0xffcfffff
 8005f64:	ffffcfff 	.word	0xffffcfff
 8005f68:	ffbfffff 	.word	0xffbfffff
 8005f6c:	feffffff 	.word	0xfeffffff
 8005f70:	ffff3fff 	.word	0xffff3fff

08005f74 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	2380      	movs	r3, #128	; 0x80
 8005f84:	029b      	lsls	r3, r3, #10
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d136      	bne.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005f8a:	4bcd      	ldr	r3, [pc, #820]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005f8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f8e:	23c0      	movs	r3, #192	; 0xc0
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4013      	ands	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005f96:	4bca      	ldr	r3, [pc, #808]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d108      	bne.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	2380      	movs	r3, #128	; 0x80
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d103      	bne.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	021b      	lsls	r3, r3, #8
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	e31c      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005fb4:	4bc2      	ldr	r3, [pc, #776]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb8:	2202      	movs	r2, #2
 8005fba:	4013      	ands	r3, r2
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d108      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	2380      	movs	r3, #128	; 0x80
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d103      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8005fca:	23fa      	movs	r3, #250	; 0xfa
 8005fcc:	01db      	lsls	r3, r3, #7
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	e30d      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005fd2:	4bbb      	ldr	r3, [pc, #748]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	2380      	movs	r3, #128	; 0x80
 8005fd8:	029b      	lsls	r3, r3, #10
 8005fda:	401a      	ands	r2, r3
 8005fdc:	2380      	movs	r3, #128	; 0x80
 8005fde:	029b      	lsls	r3, r3, #10
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d000      	beq.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005fe4:	e303      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	23c0      	movs	r3, #192	; 0xc0
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d000      	beq.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8005ff0:	e2fd      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8005ff2:	4bb4      	ldr	r3, [pc, #720]	; (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	e2fa      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8005ff8:	4bb1      	ldr	r3, [pc, #708]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	2203      	movs	r2, #3
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b02      	cmp	r3, #2
 8006002:	d102      	bne.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8006004:	4bb0      	ldr	r3, [pc, #704]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	e00a      	b.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 800600a:	4bad      	ldr	r3, [pc, #692]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	2203      	movs	r2, #3
 8006010:	4013      	ands	r3, r2
 8006012:	2b03      	cmp	r3, #3
 8006014:	d102      	bne.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8006016:	4bad      	ldr	r3, [pc, #692]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	e001      	b.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006020:	4ba7      	ldr	r3, [pc, #668]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	091b      	lsrs	r3, r3, #4
 8006026:	2207      	movs	r2, #7
 8006028:	4013      	ands	r3, r2
 800602a:	3301      	adds	r3, #1
 800602c:	0019      	movs	r1, r3
 800602e:	6938      	ldr	r0, [r7, #16]
 8006030:	f7fa f868 	bl	8000104 <__udivsi3>
 8006034:	0003      	movs	r3, r0
 8006036:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	2380      	movs	r3, #128	; 0x80
 800603c:	03db      	lsls	r3, r3, #15
 800603e:	429a      	cmp	r2, r3
 8006040:	d100      	bne.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8006042:	e28e      	b.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	2380      	movs	r3, #128	; 0x80
 8006048:	03db      	lsls	r3, r3, #15
 800604a:	429a      	cmp	r2, r3
 800604c:	d900      	bls.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800604e:	e2b7      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	2380      	movs	r3, #128	; 0x80
 8006054:	039b      	lsls	r3, r3, #14
 8006056:	429a      	cmp	r2, r3
 8006058:	d100      	bne.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800605a:	e253      	b.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	2380      	movs	r3, #128	; 0x80
 8006060:	039b      	lsls	r3, r3, #14
 8006062:	429a      	cmp	r2, r3
 8006064:	d900      	bls.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006066:	e2ab      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	2380      	movs	r3, #128	; 0x80
 800606c:	031b      	lsls	r3, r3, #12
 800606e:	429a      	cmp	r2, r3
 8006070:	d100      	bne.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006072:	e0b2      	b.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	2380      	movs	r3, #128	; 0x80
 8006078:	031b      	lsls	r3, r3, #12
 800607a:	429a      	cmp	r2, r3
 800607c:	d900      	bls.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800607e:	e29f      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	2380      	movs	r3, #128	; 0x80
 8006084:	01db      	lsls	r3, r3, #7
 8006086:	429a      	cmp	r2, r3
 8006088:	d100      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800608a:	e103      	b.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	2380      	movs	r3, #128	; 0x80
 8006090:	01db      	lsls	r3, r3, #7
 8006092:	429a      	cmp	r2, r3
 8006094:	d900      	bls.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006096:	e293      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	011b      	lsls	r3, r3, #4
 800609e:	429a      	cmp	r2, r3
 80060a0:	d100      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80060a2:	e165      	b.n	8006370 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	2380      	movs	r3, #128	; 0x80
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d900      	bls.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80060ae:	e287      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	2380      	movs	r3, #128	; 0x80
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d100      	bne.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80060ba:	e1e3      	b.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	2380      	movs	r3, #128	; 0x80
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d900      	bls.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80060c6:	e27b      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	2380      	movs	r3, #128	; 0x80
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d100      	bne.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80060d2:	e197      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	2380      	movs	r3, #128	; 0x80
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	429a      	cmp	r2, r3
 80060dc:	d900      	bls.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80060de:	e26f      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d100      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80060e6:	e118      	b.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	d900      	bls.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 80060ee:	e267      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b10      	cmp	r3, #16
 80060f4:	d100      	bne.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80060f6:	e093      	b.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b10      	cmp	r3, #16
 80060fc:	d900      	bls.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80060fe:	e25f      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d003      	beq.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d033      	beq.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 800610c:	e258      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800610e:	4b6c      	ldr	r3, [pc, #432]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006112:	2203      	movs	r2, #3
 8006114:	4013      	ands	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d104      	bne.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800611e:	f7ff fd5b 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8006122:	0003      	movs	r3, r0
 8006124:	617b      	str	r3, [r7, #20]
        break;
 8006126:	e24d      	b.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d104      	bne.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 800612e:	f7ff fcc7 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 8006132:	0003      	movs	r3, r0
 8006134:	617b      	str	r3, [r7, #20]
        break;
 8006136:	e245      	b.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006138:	4b61      	ldr	r3, [pc, #388]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	2380      	movs	r3, #128	; 0x80
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	401a      	ands	r2, r3
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	00db      	lsls	r3, r3, #3
 8006146:	429a      	cmp	r2, r3
 8006148:	d105      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d102      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8006150:	4b5d      	ldr	r3, [pc, #372]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006152:	617b      	str	r3, [r7, #20]
        break;
 8006154:	e236      	b.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006156:	4b5a      	ldr	r3, [pc, #360]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615a:	2202      	movs	r2, #2
 800615c:	4013      	ands	r3, r2
 800615e:	2b02      	cmp	r3, #2
 8006160:	d000      	beq.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8006162:	e22f      	b.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b03      	cmp	r3, #3
 8006168:	d000      	beq.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 800616a:	e22b      	b.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 800616c:	2380      	movs	r3, #128	; 0x80
 800616e:	021b      	lsls	r3, r3, #8
 8006170:	617b      	str	r3, [r7, #20]
        break;
 8006172:	e227      	b.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006174:	4b52      	ldr	r3, [pc, #328]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006178:	220c      	movs	r2, #12
 800617a:	4013      	ands	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d104      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006184:	f7ff fd28 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8006188:	0003      	movs	r3, r0
 800618a:	617b      	str	r3, [r7, #20]
        break;
 800618c:	e21c      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b04      	cmp	r3, #4
 8006192:	d104      	bne.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006194:	f7ff fc94 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 8006198:	0003      	movs	r3, r0
 800619a:	617b      	str	r3, [r7, #20]
        break;
 800619c:	e214      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800619e:	4b48      	ldr	r3, [pc, #288]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	2380      	movs	r3, #128	; 0x80
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	401a      	ands	r2, r3
 80061a8:	2380      	movs	r3, #128	; 0x80
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d105      	bne.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d102      	bne.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 80061b6:	4b44      	ldr	r3, [pc, #272]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80061b8:	617b      	str	r3, [r7, #20]
        break;
 80061ba:	e205      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80061bc:	4b40      	ldr	r3, [pc, #256]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c0:	2202      	movs	r2, #2
 80061c2:	4013      	ands	r3, r2
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d000      	beq.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80061c8:	e1fe      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b0c      	cmp	r3, #12
 80061ce:	d000      	beq.n	80061d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80061d0:	e1fa      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 80061d2:	2380      	movs	r3, #128	; 0x80
 80061d4:	021b      	lsls	r3, r3, #8
 80061d6:	617b      	str	r3, [r7, #20]
        break;
 80061d8:	e1f6      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80061da:	4b39      	ldr	r3, [pc, #228]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061de:	2240      	movs	r2, #64	; 0x40
 80061e0:	4013      	ands	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 80061e4:	4b36      	ldr	r3, [pc, #216]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	2380      	movs	r3, #128	; 0x80
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	401a      	ands	r2, r3
 80061ee:	2380      	movs	r3, #128	; 0x80
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d105      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d102      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 80061fc:	4b34      	ldr	r3, [pc, #208]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 80061fe:	617b      	str	r3, [r7, #20]
        break;
 8006200:	e1e4      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8006202:	4b2f      	ldr	r3, [pc, #188]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006206:	2202      	movs	r2, #2
 8006208:	4013      	ands	r3, r2
 800620a:	2b02      	cmp	r3, #2
 800620c:	d000      	beq.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800620e:	e1dd      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b40      	cmp	r3, #64	; 0x40
 8006214:	d000      	beq.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8006216:	e1d9      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8006218:	2380      	movs	r3, #128	; 0x80
 800621a:	021b      	lsls	r3, r3, #8
 800621c:	617b      	str	r3, [r7, #20]
        break;
 800621e:	e1d5      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006220:	4b27      	ldr	r3, [pc, #156]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006222:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006224:	23c0      	movs	r3, #192	; 0xc0
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	4013      	ands	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d104      	bne.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006232:	f7ff fcd1 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8006236:	0003      	movs	r3, r0
 8006238:	617b      	str	r3, [r7, #20]
        break;
 800623a:	e1c9      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	2380      	movs	r3, #128	; 0x80
 8006240:	00db      	lsls	r3, r3, #3
 8006242:	429a      	cmp	r2, r3
 8006244:	d104      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8006246:	f7ff fc3b 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 800624a:	0003      	movs	r3, r0
 800624c:	617b      	str	r3, [r7, #20]
        break;
 800624e:	e1bf      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006250:	4b1b      	ldr	r3, [pc, #108]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	2380      	movs	r3, #128	; 0x80
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	401a      	ands	r2, r3
 800625a:	2380      	movs	r3, #128	; 0x80
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	429a      	cmp	r2, r3
 8006260:	d107      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	2380      	movs	r3, #128	; 0x80
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	429a      	cmp	r2, r3
 800626a:	d102      	bne.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 800626c:	4b16      	ldr	r3, [pc, #88]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800626e:	617b      	str	r3, [r7, #20]
        break;
 8006270:	e1ae      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006272:	4b13      	ldr	r3, [pc, #76]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006276:	2202      	movs	r2, #2
 8006278:	4013      	ands	r3, r2
 800627a:	2b02      	cmp	r3, #2
 800627c:	d000      	beq.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800627e:	e1a7      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	23c0      	movs	r3, #192	; 0xc0
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	429a      	cmp	r2, r3
 8006288:	d000      	beq.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800628a:	e1a1      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 800628c:	2380      	movs	r3, #128	; 0x80
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	617b      	str	r3, [r7, #20]
        break;
 8006292:	e19d      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006294:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006298:	0f9b      	lsrs	r3, r3, #30
 800629a:	079b      	lsls	r3, r3, #30
 800629c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d104      	bne.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 80062a4:	f7ff fc0c 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 80062a8:	0003      	movs	r3, r0
 80062aa:	617b      	str	r3, [r7, #20]
        break;
 80062ac:	e192      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	2380      	movs	r3, #128	; 0x80
 80062b2:	061b      	lsls	r3, r3, #24
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d10d      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 80062b8:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80062ba:	617b      	str	r3, [r7, #20]
        break;
 80062bc:	e18a      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	40021000 	.word	0x40021000
 80062c4:	0003d090 	.word	0x0003d090
 80062c8:	00f42400 	.word	0x00f42400
 80062cc:	007a1200 	.word	0x007a1200
 80062d0:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	2380      	movs	r3, #128	; 0x80
 80062d8:	05db      	lsls	r3, r3, #23
 80062da:	429a      	cmp	r2, r3
 80062dc:	d000      	beq.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 80062de:	e179      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80062e0:	4bc5      	ldr	r3, [pc, #788]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	2380      	movs	r3, #128	; 0x80
 80062e6:	025b      	lsls	r3, r3, #9
 80062e8:	4013      	ands	r3, r2
 80062ea:	d100      	bne.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80062ec:	e172      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80062ee:	4bc2      	ldr	r3, [pc, #776]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	0a1b      	lsrs	r3, r3, #8
 80062f4:	227f      	movs	r2, #127	; 0x7f
 80062f6:	4013      	ands	r3, r2
 80062f8:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	435a      	muls	r2, r3
 8006300:	4bbd      	ldr	r3, [pc, #756]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	0c5b      	lsrs	r3, r3, #17
 8006306:	211f      	movs	r1, #31
 8006308:	400b      	ands	r3, r1
 800630a:	3301      	adds	r3, #1
 800630c:	0019      	movs	r1, r3
 800630e:	0010      	movs	r0, r2
 8006310:	f7f9 fef8 	bl	8000104 <__udivsi3>
 8006314:	0003      	movs	r3, r0
 8006316:	617b      	str	r3, [r7, #20]
        break;
 8006318:	e15c      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800631a:	4bb7      	ldr	r3, [pc, #732]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800631c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800631e:	23c0      	movs	r3, #192	; 0xc0
 8006320:	019b      	lsls	r3, r3, #6
 8006322:	4013      	ands	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800632c:	f7ff fc54 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8006330:	0003      	movs	r3, r0
 8006332:	617b      	str	r3, [r7, #20]
        break;
 8006334:	e150      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	2380      	movs	r3, #128	; 0x80
 800633a:	015b      	lsls	r3, r3, #5
 800633c:	429a      	cmp	r2, r3
 800633e:	d104      	bne.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006340:	f7ff fbbe 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 8006344:	0003      	movs	r3, r0
 8006346:	617b      	str	r3, [r7, #20]
        break;
 8006348:	e146      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800634a:	4bab      	ldr	r3, [pc, #684]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	2380      	movs	r3, #128	; 0x80
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	401a      	ands	r2, r3
 8006354:	2380      	movs	r3, #128	; 0x80
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	429a      	cmp	r2, r3
 800635a:	d000      	beq.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 800635c:	e13c      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	2380      	movs	r3, #128	; 0x80
 8006362:	019b      	lsls	r3, r3, #6
 8006364:	429a      	cmp	r2, r3
 8006366:	d000      	beq.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8006368:	e136      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 800636a:	4ba4      	ldr	r3, [pc, #656]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800636c:	617b      	str	r3, [r7, #20]
        break;
 800636e:	e133      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8006370:	4ba1      	ldr	r3, [pc, #644]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006372:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006374:	23c0      	movs	r3, #192	; 0xc0
 8006376:	021b      	lsls	r3, r3, #8
 8006378:	4013      	ands	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	2380      	movs	r3, #128	; 0x80
 8006380:	01db      	lsls	r3, r3, #7
 8006382:	429a      	cmp	r2, r3
 8006384:	d11c      	bne.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006386:	4b9c      	ldr	r3, [pc, #624]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	2380      	movs	r3, #128	; 0x80
 800638c:	025b      	lsls	r3, r3, #9
 800638e:	4013      	ands	r3, r2
 8006390:	d100      	bne.n	8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8006392:	e123      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006394:	4b98      	ldr	r3, [pc, #608]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	0a1b      	lsrs	r3, r3, #8
 800639a:	227f      	movs	r2, #127	; 0x7f
 800639c:	4013      	ands	r3, r2
 800639e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	435a      	muls	r2, r3
 80063a6:	4b94      	ldr	r3, [pc, #592]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	0c5b      	lsrs	r3, r3, #17
 80063ac:	211f      	movs	r1, #31
 80063ae:	400b      	ands	r3, r1
 80063b0:	3301      	adds	r3, #1
 80063b2:	0019      	movs	r1, r3
 80063b4:	0010      	movs	r0, r2
 80063b6:	f7f9 fea5 	bl	8000104 <__udivsi3>
 80063ba:	0003      	movs	r3, r0
 80063bc:	617b      	str	r3, [r7, #20]
        break;
 80063be:	e10d      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d104      	bne.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 80063c6:	f7ff fb7b 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 80063ca:	0003      	movs	r3, r0
 80063cc:	617b      	str	r3, [r7, #20]
        break;
 80063ce:	e105      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 80063d0:	4b89      	ldr	r3, [pc, #548]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	2380      	movs	r3, #128	; 0x80
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	401a      	ands	r2, r3
 80063da:	2380      	movs	r3, #128	; 0x80
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	429a      	cmp	r2, r3
 80063e0:	d107      	bne.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	2380      	movs	r3, #128	; 0x80
 80063e6:	021b      	lsls	r3, r3, #8
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d102      	bne.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 80063ec:	4b83      	ldr	r3, [pc, #524]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80063ee:	617b      	str	r3, [r7, #20]
        break;
 80063f0:	e0f4      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	23c0      	movs	r3, #192	; 0xc0
 80063f6:	021b      	lsls	r3, r3, #8
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d000      	beq.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80063fc:	e0ee      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 80063fe:	4b80      	ldr	r3, [pc, #512]	; (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8006400:	617b      	str	r3, [r7, #20]
        break;
 8006402:	e0eb      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006404:	4b7c      	ldr	r3, [pc, #496]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006406:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006408:	23c0      	movs	r3, #192	; 0xc0
 800640a:	031b      	lsls	r3, r3, #12
 800640c:	4013      	ands	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d104      	bne.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006416:	f7ff fbdf 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 800641a:	0003      	movs	r3, r0
 800641c:	617b      	str	r3, [r7, #20]
        break;
 800641e:	e0df      	b.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006420:	4b75      	ldr	r3, [pc, #468]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006424:	2202      	movs	r2, #2
 8006426:	4013      	ands	r3, r2
 8006428:	2b02      	cmp	r3, #2
 800642a:	d108      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	2380      	movs	r3, #128	; 0x80
 8006430:	02db      	lsls	r3, r3, #11
 8006432:	429a      	cmp	r2, r3
 8006434:	d103      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 8006436:	23fa      	movs	r3, #250	; 0xfa
 8006438:	01db      	lsls	r3, r3, #7
 800643a:	617b      	str	r3, [r7, #20]
 800643c:	e021      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800643e:	4b6e      	ldr	r3, [pc, #440]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	2380      	movs	r3, #128	; 0x80
 8006444:	00db      	lsls	r3, r3, #3
 8006446:	401a      	ands	r2, r3
 8006448:	2380      	movs	r3, #128	; 0x80
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	429a      	cmp	r2, r3
 800644e:	d107      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	2380      	movs	r3, #128	; 0x80
 8006454:	031b      	lsls	r3, r3, #12
 8006456:	429a      	cmp	r2, r3
 8006458:	d102      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 800645a:	4b68      	ldr	r3, [pc, #416]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	e010      	b.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006460:	4b65      	ldr	r3, [pc, #404]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006464:	2202      	movs	r2, #2
 8006466:	4013      	ands	r3, r2
 8006468:	2b02      	cmp	r3, #2
 800646a:	d000      	beq.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800646c:	e0b8      	b.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	23c0      	movs	r3, #192	; 0xc0
 8006472:	031b      	lsls	r3, r3, #12
 8006474:	429a      	cmp	r2, r3
 8006476:	d000      	beq.n	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006478:	e0b2      	b.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 800647a:	2380      	movs	r3, #128	; 0x80
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	617b      	str	r3, [r7, #20]
        break;
 8006480:	e0ae      	b.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006482:	e0ad      	b.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006484:	4b5c      	ldr	r3, [pc, #368]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006486:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006488:	23c0      	movs	r3, #192	; 0xc0
 800648a:	039b      	lsls	r3, r3, #14
 800648c:	4013      	ands	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d104      	bne.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006496:	f7ff fb9f 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 800649a:	0003      	movs	r3, r0
 800649c:	617b      	str	r3, [r7, #20]
        break;
 800649e:	e0a1      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80064a0:	4b55      	ldr	r3, [pc, #340]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a4:	2202      	movs	r2, #2
 80064a6:	4013      	ands	r3, r2
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d108      	bne.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	2380      	movs	r3, #128	; 0x80
 80064b0:	035b      	lsls	r3, r3, #13
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d103      	bne.n	80064be <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 80064b6:	23fa      	movs	r3, #250	; 0xfa
 80064b8:	01db      	lsls	r3, r3, #7
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	e021      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80064be:	4b4e      	ldr	r3, [pc, #312]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	2380      	movs	r3, #128	; 0x80
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	401a      	ands	r2, r3
 80064c8:	2380      	movs	r3, #128	; 0x80
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d107      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	2380      	movs	r3, #128	; 0x80
 80064d4:	039b      	lsls	r3, r3, #14
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d102      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 80064da:	4b48      	ldr	r3, [pc, #288]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	e010      	b.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80064e0:	4b45      	ldr	r3, [pc, #276]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e4:	2202      	movs	r2, #2
 80064e6:	4013      	ands	r3, r2
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d000      	beq.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80064ec:	e07a      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	23c0      	movs	r3, #192	; 0xc0
 80064f2:	039b      	lsls	r3, r3, #14
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d000      	beq.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 80064f8:	e074      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 80064fa:	2380      	movs	r3, #128	; 0x80
 80064fc:	021b      	lsls	r3, r3, #8
 80064fe:	617b      	str	r3, [r7, #20]
        break;
 8006500:	e070      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8006502:	e06f      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8006504:	4b3c      	ldr	r3, [pc, #240]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006506:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006508:	2380      	movs	r3, #128	; 0x80
 800650a:	03db      	lsls	r3, r3, #15
 800650c:	4013      	ands	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	2380      	movs	r3, #128	; 0x80
 8006514:	03db      	lsls	r3, r3, #15
 8006516:	429a      	cmp	r2, r3
 8006518:	d11b      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800651a:	4b37      	ldr	r3, [pc, #220]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	2380      	movs	r3, #128	; 0x80
 8006520:	045b      	lsls	r3, r3, #17
 8006522:	4013      	ands	r3, r2
 8006524:	d060      	beq.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006526:	4b34      	ldr	r3, [pc, #208]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	0a1b      	lsrs	r3, r3, #8
 800652c:	227f      	movs	r2, #127	; 0x7f
 800652e:	4013      	ands	r3, r2
 8006530:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	435a      	muls	r2, r3
 8006538:	4b2f      	ldr	r3, [pc, #188]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	0e5b      	lsrs	r3, r3, #25
 800653e:	2107      	movs	r1, #7
 8006540:	400b      	ands	r3, r1
 8006542:	3301      	adds	r3, #1
 8006544:	0019      	movs	r1, r3
 8006546:	0010      	movs	r0, r2
 8006548:	f7f9 fddc 	bl	8000104 <__udivsi3>
 800654c:	0003      	movs	r3, r0
 800654e:	617b      	str	r3, [r7, #20]
        break;
 8006550:	e04a      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d147      	bne.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006558:	f7ff fb3e 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 800655c:	0003      	movs	r3, r0
 800655e:	617b      	str	r3, [r7, #20]
        break;
 8006560:	e042      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 8006562:	4b25      	ldr	r3, [pc, #148]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006566:	2380      	movs	r3, #128	; 0x80
 8006568:	045b      	lsls	r3, r3, #17
 800656a:	4013      	ands	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	2380      	movs	r3, #128	; 0x80
 8006572:	045b      	lsls	r3, r3, #17
 8006574:	429a      	cmp	r2, r3
 8006576:	d11b      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006578:	4b1f      	ldr	r3, [pc, #124]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	2380      	movs	r3, #128	; 0x80
 800657e:	045b      	lsls	r3, r3, #17
 8006580:	4013      	ands	r3, r2
 8006582:	d033      	beq.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006584:	4b1c      	ldr	r3, [pc, #112]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	0a1b      	lsrs	r3, r3, #8
 800658a:	227f      	movs	r2, #127	; 0x7f
 800658c:	4013      	ands	r3, r2
 800658e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	435a      	muls	r2, r3
 8006596:	4b18      	ldr	r3, [pc, #96]	; (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	0e5b      	lsrs	r3, r3, #25
 800659c:	2107      	movs	r1, #7
 800659e:	400b      	ands	r3, r1
 80065a0:	3301      	adds	r3, #1
 80065a2:	0019      	movs	r1, r3
 80065a4:	0010      	movs	r0, r2
 80065a6:	f7f9 fdad 	bl	8000104 <__udivsi3>
 80065aa:	0003      	movs	r3, r0
 80065ac:	617b      	str	r3, [r7, #20]
        break;
 80065ae:	e01d      	b.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d11a      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065b6:	f7ff fb0f 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 80065ba:	0003      	movs	r3, r0
 80065bc:	617b      	str	r3, [r7, #20]
        break;
 80065be:	e015      	b.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 80065c0:	46c0      	nop			; (mov r8, r8)
 80065c2:	e014      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065c4:	46c0      	nop			; (mov r8, r8)
 80065c6:	e012      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065c8:	46c0      	nop			; (mov r8, r8)
 80065ca:	e010      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065cc:	46c0      	nop			; (mov r8, r8)
 80065ce:	e00e      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065d0:	46c0      	nop			; (mov r8, r8)
 80065d2:	e00c      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065d4:	46c0      	nop			; (mov r8, r8)
 80065d6:	e00a      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065d8:	46c0      	nop			; (mov r8, r8)
 80065da:	e008      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065dc:	46c0      	nop			; (mov r8, r8)
 80065de:	e006      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065e0:	46c0      	nop			; (mov r8, r8)
 80065e2:	e004      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065e4:	46c0      	nop			; (mov r8, r8)
 80065e6:	e002      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065e8:	46c0      	nop			; (mov r8, r8)
 80065ea:	e000      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065ec:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 80065ee:	697b      	ldr	r3, [r7, #20]
}
 80065f0:	0018      	movs	r0, r3
 80065f2:	46bd      	mov	sp, r7
 80065f4:	b006      	add	sp, #24
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	40021000 	.word	0x40021000
 80065fc:	00f42400 	.word	0x00f42400
 8006600:	0000bb80 	.word	0x0000bb80

08006604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e0a8      	b.n	8006768 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	d109      	bne.n	8006632 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	2382      	movs	r3, #130	; 0x82
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	429a      	cmp	r2, r3
 8006628:	d009      	beq.n	800663e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	61da      	str	r2, [r3, #28]
 8006630:	e005      	b.n	800663e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	225d      	movs	r2, #93	; 0x5d
 8006648:	5c9b      	ldrb	r3, [r3, r2]
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d107      	bne.n	8006660 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	225c      	movs	r2, #92	; 0x5c
 8006654:	2100      	movs	r1, #0
 8006656:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	0018      	movs	r0, r3
 800665c:	f7fc f96a 	bl	8002934 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	225d      	movs	r2, #93	; 0x5d
 8006664:	2102      	movs	r1, #2
 8006666:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2140      	movs	r1, #64	; 0x40
 8006674:	438a      	bics	r2, r1
 8006676:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	23e0      	movs	r3, #224	; 0xe0
 800667e:	00db      	lsls	r3, r3, #3
 8006680:	429a      	cmp	r2, r3
 8006682:	d902      	bls.n	800668a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e002      	b.n	8006690 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800668a:	2380      	movs	r3, #128	; 0x80
 800668c:	015b      	lsls	r3, r3, #5
 800668e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68da      	ldr	r2, [r3, #12]
 8006694:	23f0      	movs	r3, #240	; 0xf0
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	429a      	cmp	r2, r3
 800669a:	d008      	beq.n	80066ae <HAL_SPI_Init+0xaa>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	23e0      	movs	r3, #224	; 0xe0
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d002      	beq.n	80066ae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	2382      	movs	r3, #130	; 0x82
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	401a      	ands	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6899      	ldr	r1, [r3, #8]
 80066bc:	2384      	movs	r3, #132	; 0x84
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	400b      	ands	r3, r1
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	2102      	movs	r1, #2
 80066ca:	400b      	ands	r3, r1
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	2101      	movs	r1, #1
 80066d4:	400b      	ands	r3, r1
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6999      	ldr	r1, [r3, #24]
 80066dc:	2380      	movs	r3, #128	; 0x80
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	400b      	ands	r3, r1
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	2138      	movs	r1, #56	; 0x38
 80066ea:	400b      	ands	r3, r1
 80066ec:	431a      	orrs	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	2180      	movs	r1, #128	; 0x80
 80066f4:	400b      	ands	r3, r1
 80066f6:	431a      	orrs	r2, r3
 80066f8:	0011      	movs	r1, r2
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066fe:	2380      	movs	r3, #128	; 0x80
 8006700:	019b      	lsls	r3, r3, #6
 8006702:	401a      	ands	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	0c1b      	lsrs	r3, r3, #16
 8006712:	2204      	movs	r2, #4
 8006714:	401a      	ands	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	2110      	movs	r1, #16
 800671c:	400b      	ands	r3, r1
 800671e:	431a      	orrs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006724:	2108      	movs	r1, #8
 8006726:	400b      	ands	r3, r1
 8006728:	431a      	orrs	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68d9      	ldr	r1, [r3, #12]
 800672e:	23f0      	movs	r3, #240	; 0xf0
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	400b      	ands	r3, r1
 8006734:	431a      	orrs	r2, r3
 8006736:	0011      	movs	r1, r2
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	2380      	movs	r3, #128	; 0x80
 800673c:	015b      	lsls	r3, r3, #5
 800673e:	401a      	ands	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69da      	ldr	r2, [r3, #28]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4907      	ldr	r1, [pc, #28]	; (8006770 <HAL_SPI_Init+0x16c>)
 8006754:	400a      	ands	r2, r1
 8006756:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	225d      	movs	r2, #93	; 0x5d
 8006762:	2101      	movs	r1, #1
 8006764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	0018      	movs	r0, r3
 800676a:	46bd      	mov	sp, r7
 800676c:	b004      	add	sp, #16
 800676e:	bd80      	pop	{r7, pc}
 8006770:	fffff7ff 	.word	0xfffff7ff

08006774 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	1dbb      	adds	r3, r7, #6
 8006782:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006784:	231f      	movs	r3, #31
 8006786:	18fb      	adds	r3, r7, r3
 8006788:	2200      	movs	r2, #0
 800678a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	225c      	movs	r2, #92	; 0x5c
 8006790:	5c9b      	ldrb	r3, [r3, r2]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_SPI_Transmit+0x26>
 8006796:	2302      	movs	r3, #2
 8006798:	e140      	b.n	8006a1c <HAL_SPI_Transmit+0x2a8>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	225c      	movs	r2, #92	; 0x5c
 800679e:	2101      	movs	r1, #1
 80067a0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067a2:	f7fc fc65 	bl	8003070 <HAL_GetTick>
 80067a6:	0003      	movs	r3, r0
 80067a8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80067aa:	2316      	movs	r3, #22
 80067ac:	18fb      	adds	r3, r7, r3
 80067ae:	1dba      	adds	r2, r7, #6
 80067b0:	8812      	ldrh	r2, [r2, #0]
 80067b2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	225d      	movs	r2, #93	; 0x5d
 80067b8:	5c9b      	ldrb	r3, [r3, r2]
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d004      	beq.n	80067ca <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80067c0:	231f      	movs	r3, #31
 80067c2:	18fb      	adds	r3, r7, r3
 80067c4:	2202      	movs	r2, #2
 80067c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80067c8:	e11d      	b.n	8006a06 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <HAL_SPI_Transmit+0x64>
 80067d0:	1dbb      	adds	r3, r7, #6
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d104      	bne.n	80067e2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80067d8:	231f      	movs	r3, #31
 80067da:	18fb      	adds	r3, r7, r3
 80067dc:	2201      	movs	r2, #1
 80067de:	701a      	strb	r2, [r3, #0]
    goto error;
 80067e0:	e111      	b.n	8006a06 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	225d      	movs	r2, #93	; 0x5d
 80067e6:	2103      	movs	r1, #3
 80067e8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	1dba      	adds	r2, r7, #6
 80067fa:	8812      	ldrh	r2, [r2, #0]
 80067fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	1dba      	adds	r2, r7, #6
 8006802:	8812      	ldrh	r2, [r2, #0]
 8006804:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2244      	movs	r2, #68	; 0x44
 8006810:	2100      	movs	r1, #0
 8006812:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2246      	movs	r2, #70	; 0x46
 8006818:	2100      	movs	r1, #0
 800681a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	2380      	movs	r3, #128	; 0x80
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	429a      	cmp	r2, r3
 8006832:	d110      	bne.n	8006856 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2140      	movs	r1, #64	; 0x40
 8006840:	438a      	bics	r2, r1
 8006842:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2180      	movs	r1, #128	; 0x80
 8006850:	01c9      	lsls	r1, r1, #7
 8006852:	430a      	orrs	r2, r1
 8006854:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2240      	movs	r2, #64	; 0x40
 800685e:	4013      	ands	r3, r2
 8006860:	2b40      	cmp	r3, #64	; 0x40
 8006862:	d007      	beq.n	8006874 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2140      	movs	r1, #64	; 0x40
 8006870:	430a      	orrs	r2, r1
 8006872:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	68da      	ldr	r2, [r3, #12]
 8006878:	23e0      	movs	r3, #224	; 0xe0
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	429a      	cmp	r2, r3
 800687e:	d94e      	bls.n	800691e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <HAL_SPI_Transmit+0x11e>
 8006888:	2316      	movs	r3, #22
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d13f      	bne.n	8006912 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006896:	881a      	ldrh	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	1c9a      	adds	r2, r3, #2
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068b6:	e02c      	b.n	8006912 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	2202      	movs	r2, #2
 80068c0:	4013      	ands	r3, r2
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d112      	bne.n	80068ec <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	881a      	ldrh	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	1c9a      	adds	r2, r3, #2
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068ea:	e012      	b.n	8006912 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068ec:	f7fc fbc0 	bl	8003070 <HAL_GetTick>
 80068f0:	0002      	movs	r2, r0
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d802      	bhi.n	8006902 <HAL_SPI_Transmit+0x18e>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	3301      	adds	r3, #1
 8006900:	d102      	bne.n	8006908 <HAL_SPI_Transmit+0x194>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d104      	bne.n	8006912 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006908:	231f      	movs	r3, #31
 800690a:	18fb      	adds	r3, r7, r3
 800690c:	2203      	movs	r2, #3
 800690e:	701a      	strb	r2, [r3, #0]
          goto error;
 8006910:	e079      	b.n	8006a06 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1cd      	bne.n	80068b8 <HAL_SPI_Transmit+0x144>
 800691c:	e04f      	b.n	80069be <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d004      	beq.n	8006930 <HAL_SPI_Transmit+0x1bc>
 8006926:	2316      	movs	r3, #22
 8006928:	18fb      	adds	r3, r7, r3
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d141      	bne.n	80069b4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	330c      	adds	r3, #12
 800693a:	7812      	ldrb	r2, [r2, #0]
 800693c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006956:	e02d      	b.n	80069b4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2202      	movs	r2, #2
 8006960:	4013      	ands	r3, r2
 8006962:	2b02      	cmp	r3, #2
 8006964:	d113      	bne.n	800698e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	330c      	adds	r3, #12
 8006970:	7812      	ldrb	r2, [r2, #0]
 8006972:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006982:	b29b      	uxth	r3, r3
 8006984:	3b01      	subs	r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800698c:	e012      	b.n	80069b4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800698e:	f7fc fb6f 	bl	8003070 <HAL_GetTick>
 8006992:	0002      	movs	r2, r0
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	429a      	cmp	r2, r3
 800699c:	d802      	bhi.n	80069a4 <HAL_SPI_Transmit+0x230>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	3301      	adds	r3, #1
 80069a2:	d102      	bne.n	80069aa <HAL_SPI_Transmit+0x236>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d104      	bne.n	80069b4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80069aa:	231f      	movs	r3, #31
 80069ac:	18fb      	adds	r3, r7, r3
 80069ae:	2203      	movs	r2, #3
 80069b0:	701a      	strb	r2, [r3, #0]
          goto error;
 80069b2:	e028      	b.n	8006a06 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1cc      	bne.n	8006958 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069be:	69ba      	ldr	r2, [r7, #24]
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	0018      	movs	r0, r3
 80069c6:	f001 f9d3 	bl	8007d70 <SPI_EndRxTxTransaction>
 80069ca:	1e03      	subs	r3, r0, #0
 80069cc:	d002      	beq.n	80069d4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2220      	movs	r2, #32
 80069d2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10a      	bne.n	80069f2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069dc:	2300      	movs	r3, #0
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	613b      	str	r3, [r7, #16]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d004      	beq.n	8006a04 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80069fa:	231f      	movs	r3, #31
 80069fc:	18fb      	adds	r3, r7, r3
 80069fe:	2201      	movs	r2, #1
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	e000      	b.n	8006a06 <HAL_SPI_Transmit+0x292>
  }

error:
 8006a04:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	225d      	movs	r2, #93	; 0x5d
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	225c      	movs	r2, #92	; 0x5c
 8006a12:	2100      	movs	r1, #0
 8006a14:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006a16:	231f      	movs	r3, #31
 8006a18:	18fb      	adds	r3, r7, r3
 8006a1a:	781b      	ldrb	r3, [r3, #0]
}
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	b008      	add	sp, #32
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a24:	b590      	push	{r4, r7, lr}
 8006a26:	b089      	sub	sp, #36	; 0x24
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	1dbb      	adds	r3, r7, #6
 8006a32:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a34:	2317      	movs	r3, #23
 8006a36:	18fb      	adds	r3, r7, r3
 8006a38:	2200      	movs	r2, #0
 8006a3a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	2382      	movs	r3, #130	; 0x82
 8006a42:	005b      	lsls	r3, r3, #1
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d113      	bne.n	8006a70 <HAL_SPI_Receive+0x4c>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10f      	bne.n	8006a70 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	225d      	movs	r2, #93	; 0x5d
 8006a54:	2104      	movs	r1, #4
 8006a56:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a58:	1dbb      	adds	r3, r7, #6
 8006a5a:	881c      	ldrh	r4, [r3, #0]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	68b9      	ldr	r1, [r7, #8]
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	0023      	movs	r3, r4
 8006a68:	f000 f928 	bl	8006cbc <HAL_SPI_TransmitReceive>
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	e11c      	b.n	8006caa <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	225c      	movs	r2, #92	; 0x5c
 8006a74:	5c9b      	ldrb	r3, [r3, r2]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d101      	bne.n	8006a7e <HAL_SPI_Receive+0x5a>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	e115      	b.n	8006caa <HAL_SPI_Receive+0x286>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	225c      	movs	r2, #92	; 0x5c
 8006a82:	2101      	movs	r1, #1
 8006a84:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a86:	f7fc faf3 	bl	8003070 <HAL_GetTick>
 8006a8a:	0003      	movs	r3, r0
 8006a8c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	225d      	movs	r2, #93	; 0x5d
 8006a92:	5c9b      	ldrb	r3, [r3, r2]
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d004      	beq.n	8006aa4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8006a9a:	2317      	movs	r3, #23
 8006a9c:	18fb      	adds	r3, r7, r3
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	701a      	strb	r2, [r3, #0]
    goto error;
 8006aa2:	e0f7      	b.n	8006c94 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_SPI_Receive+0x8e>
 8006aaa:	1dbb      	adds	r3, r7, #6
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8006ab2:	2317      	movs	r3, #23
 8006ab4:	18fb      	adds	r3, r7, r3
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	701a      	strb	r2, [r3, #0]
    goto error;
 8006aba:	e0eb      	b.n	8006c94 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	225d      	movs	r2, #93	; 0x5d
 8006ac0:	2104      	movs	r1, #4
 8006ac2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	1dba      	adds	r2, r7, #6
 8006ad4:	2144      	movs	r1, #68	; 0x44
 8006ad6:	8812      	ldrh	r2, [r2, #0]
 8006ad8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	1dba      	adds	r2, r7, #6
 8006ade:	2146      	movs	r1, #70	; 0x46
 8006ae0:	8812      	ldrh	r2, [r2, #0]
 8006ae2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	23e0      	movs	r3, #224	; 0xe0
 8006b08:	00db      	lsls	r3, r3, #3
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d908      	bls.n	8006b20 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4966      	ldr	r1, [pc, #408]	; (8006cb4 <HAL_SPI_Receive+0x290>)
 8006b1a:	400a      	ands	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
 8006b1e:	e008      	b.n	8006b32 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2180      	movs	r1, #128	; 0x80
 8006b2c:	0149      	lsls	r1, r1, #5
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	2380      	movs	r3, #128	; 0x80
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d10f      	bne.n	8006b5e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2140      	movs	r1, #64	; 0x40
 8006b4a:	438a      	bics	r2, r1
 8006b4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4957      	ldr	r1, [pc, #348]	; (8006cb8 <HAL_SPI_Receive+0x294>)
 8006b5a:	400a      	ands	r2, r1
 8006b5c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2240      	movs	r2, #64	; 0x40
 8006b66:	4013      	ands	r3, r2
 8006b68:	2b40      	cmp	r3, #64	; 0x40
 8006b6a:	d007      	beq.n	8006b7c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2140      	movs	r1, #64	; 0x40
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	23e0      	movs	r3, #224	; 0xe0
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d900      	bls.n	8006b8a <HAL_SPI_Receive+0x166>
 8006b88:	e069      	b.n	8006c5e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b8a:	e031      	b.n	8006bf0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	2201      	movs	r2, #1
 8006b94:	4013      	ands	r3, r2
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d117      	bne.n	8006bca <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	330c      	adds	r3, #12
 8006ba0:	001a      	movs	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	7812      	ldrb	r2, [r2, #0]
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2246      	movs	r2, #70	; 0x46
 8006bba:	5a9b      	ldrh	r3, [r3, r2]
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b299      	uxth	r1, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2246      	movs	r2, #70	; 0x46
 8006bc6:	5299      	strh	r1, [r3, r2]
 8006bc8:	e012      	b.n	8006bf0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bca:	f7fc fa51 	bl	8003070 <HAL_GetTick>
 8006bce:	0002      	movs	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d802      	bhi.n	8006be0 <HAL_SPI_Receive+0x1bc>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	d102      	bne.n	8006be6 <HAL_SPI_Receive+0x1c2>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d104      	bne.n	8006bf0 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8006be6:	2317      	movs	r3, #23
 8006be8:	18fb      	adds	r3, r7, r3
 8006bea:	2203      	movs	r2, #3
 8006bec:	701a      	strb	r2, [r3, #0]
          goto error;
 8006bee:	e051      	b.n	8006c94 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2246      	movs	r2, #70	; 0x46
 8006bf4:	5a9b      	ldrh	r3, [r3, r2]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1c7      	bne.n	8006b8c <HAL_SPI_Receive+0x168>
 8006bfc:	e035      	b.n	8006c6a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	2201      	movs	r2, #1
 8006c06:	4013      	ands	r3, r2
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d115      	bne.n	8006c38 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68da      	ldr	r2, [r3, #12]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c16:	b292      	uxth	r2, r2
 8006c18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	1c9a      	adds	r2, r3, #2
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2246      	movs	r2, #70	; 0x46
 8006c28:	5a9b      	ldrh	r3, [r3, r2]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b299      	uxth	r1, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2246      	movs	r2, #70	; 0x46
 8006c34:	5299      	strh	r1, [r3, r2]
 8006c36:	e012      	b.n	8006c5e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c38:	f7fc fa1a 	bl	8003070 <HAL_GetTick>
 8006c3c:	0002      	movs	r2, r0
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d802      	bhi.n	8006c4e <HAL_SPI_Receive+0x22a>
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	d102      	bne.n	8006c54 <HAL_SPI_Receive+0x230>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8006c54:	2317      	movs	r3, #23
 8006c56:	18fb      	adds	r3, r7, r3
 8006c58:	2203      	movs	r2, #3
 8006c5a:	701a      	strb	r2, [r3, #0]
          goto error;
 8006c5c:	e01a      	b.n	8006c94 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2246      	movs	r2, #70	; 0x46
 8006c62:	5a9b      	ldrh	r3, [r3, r2]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1c9      	bne.n	8006bfe <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	0018      	movs	r0, r3
 8006c72:	f001 f81f 	bl	8007cb4 <SPI_EndRxTransaction>
 8006c76:	1e03      	subs	r3, r0, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d004      	beq.n	8006c92 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8006c88:	2317      	movs	r3, #23
 8006c8a:	18fb      	adds	r3, r7, r3
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	701a      	strb	r2, [r3, #0]
 8006c90:	e000      	b.n	8006c94 <HAL_SPI_Receive+0x270>
  }

error :
 8006c92:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	225d      	movs	r2, #93	; 0x5d
 8006c98:	2101      	movs	r1, #1
 8006c9a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	225c      	movs	r2, #92	; 0x5c
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006ca4:	2317      	movs	r3, #23
 8006ca6:	18fb      	adds	r3, r7, r3
 8006ca8:	781b      	ldrb	r3, [r3, #0]
}
 8006caa:	0018      	movs	r0, r3
 8006cac:	46bd      	mov	sp, r7
 8006cae:	b007      	add	sp, #28
 8006cb0:	bd90      	pop	{r4, r7, pc}
 8006cb2:	46c0      	nop			; (mov r8, r8)
 8006cb4:	ffffefff 	.word	0xffffefff
 8006cb8:	ffffbfff 	.word	0xffffbfff

08006cbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08a      	sub	sp, #40	; 0x28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	001a      	movs	r2, r3
 8006cca:	1cbb      	adds	r3, r7, #2
 8006ccc:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006cd2:	2323      	movs	r3, #35	; 0x23
 8006cd4:	18fb      	adds	r3, r7, r3
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	225c      	movs	r2, #92	; 0x5c
 8006cde:	5c9b      	ldrb	r3, [r3, r2]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d101      	bne.n	8006ce8 <HAL_SPI_TransmitReceive+0x2c>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	e1b5      	b.n	8007054 <HAL_SPI_TransmitReceive+0x398>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	225c      	movs	r2, #92	; 0x5c
 8006cec:	2101      	movs	r1, #1
 8006cee:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cf0:	f7fc f9be 	bl	8003070 <HAL_GetTick>
 8006cf4:	0003      	movs	r3, r0
 8006cf6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006cf8:	201b      	movs	r0, #27
 8006cfa:	183b      	adds	r3, r7, r0
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	215d      	movs	r1, #93	; 0x5d
 8006d00:	5c52      	ldrb	r2, [r2, r1]
 8006d02:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d0a:	2312      	movs	r3, #18
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	1cba      	adds	r2, r7, #2
 8006d10:	8812      	ldrh	r2, [r2, #0]
 8006d12:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d14:	183b      	adds	r3, r7, r0
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d011      	beq.n	8006d40 <HAL_SPI_TransmitReceive+0x84>
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	2382      	movs	r3, #130	; 0x82
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d107      	bne.n	8006d36 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d103      	bne.n	8006d36 <HAL_SPI_TransmitReceive+0x7a>
 8006d2e:	183b      	adds	r3, r7, r0
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d004      	beq.n	8006d40 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006d36:	2323      	movs	r3, #35	; 0x23
 8006d38:	18fb      	adds	r3, r7, r3
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d3e:	e17e      	b.n	800703e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d006      	beq.n	8006d54 <HAL_SPI_TransmitReceive+0x98>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <HAL_SPI_TransmitReceive+0x98>
 8006d4c:	1cbb      	adds	r3, r7, #2
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d104      	bne.n	8006d5e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006d54:	2323      	movs	r3, #35	; 0x23
 8006d56:	18fb      	adds	r3, r7, r3
 8006d58:	2201      	movs	r2, #1
 8006d5a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d5c:	e16f      	b.n	800703e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	225d      	movs	r2, #93	; 0x5d
 8006d62:	5c9b      	ldrb	r3, [r3, r2]
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	d003      	beq.n	8006d72 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	225d      	movs	r2, #93	; 0x5d
 8006d6e:	2105      	movs	r1, #5
 8006d70:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1cba      	adds	r2, r7, #2
 8006d82:	2146      	movs	r1, #70	; 0x46
 8006d84:	8812      	ldrh	r2, [r2, #0]
 8006d86:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	1cba      	adds	r2, r7, #2
 8006d8c:	2144      	movs	r1, #68	; 0x44
 8006d8e:	8812      	ldrh	r2, [r2, #0]
 8006d90:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	1cba      	adds	r2, r7, #2
 8006d9c:	8812      	ldrh	r2, [r2, #0]
 8006d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	1cba      	adds	r2, r7, #2
 8006da4:	8812      	ldrh	r2, [r2, #0]
 8006da6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	23e0      	movs	r3, #224	; 0xe0
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d908      	bls.n	8006dd2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	49a4      	ldr	r1, [pc, #656]	; (800705c <HAL_SPI_TransmitReceive+0x3a0>)
 8006dcc:	400a      	ands	r2, r1
 8006dce:	605a      	str	r2, [r3, #4]
 8006dd0:	e008      	b.n	8006de4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2180      	movs	r1, #128	; 0x80
 8006dde:	0149      	lsls	r1, r1, #5
 8006de0:	430a      	orrs	r2, r1
 8006de2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2240      	movs	r2, #64	; 0x40
 8006dec:	4013      	ands	r3, r2
 8006dee:	2b40      	cmp	r3, #64	; 0x40
 8006df0:	d007      	beq.n	8006e02 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2140      	movs	r1, #64	; 0x40
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	23e0      	movs	r3, #224	; 0xe0
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d800      	bhi.n	8006e10 <HAL_SPI_TransmitReceive+0x154>
 8006e0e:	e07f      	b.n	8006f10 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <HAL_SPI_TransmitReceive+0x168>
 8006e18:	2312      	movs	r3, #18
 8006e1a:	18fb      	adds	r3, r7, r3
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d000      	beq.n	8006e24 <HAL_SPI_TransmitReceive+0x168>
 8006e22:	e069      	b.n	8006ef8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	881a      	ldrh	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e34:	1c9a      	adds	r2, r3, #2
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	3b01      	subs	r3, #1
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e48:	e056      	b.n	8006ef8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	2202      	movs	r2, #2
 8006e52:	4013      	ands	r3, r2
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d11b      	bne.n	8006e90 <HAL_SPI_TransmitReceive+0x1d4>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d016      	beq.n	8006e90 <HAL_SPI_TransmitReceive+0x1d4>
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d113      	bne.n	8006e90 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6c:	881a      	ldrh	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	1c9a      	adds	r2, r3, #2
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	2201      	movs	r2, #1
 8006e98:	4013      	ands	r3, r2
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d11c      	bne.n	8006ed8 <HAL_SPI_TransmitReceive+0x21c>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2246      	movs	r2, #70	; 0x46
 8006ea2:	5a9b      	ldrh	r3, [r3, r2]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d016      	beq.n	8006ed8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	b292      	uxth	r2, r2
 8006eb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebc:	1c9a      	adds	r2, r3, #2
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2246      	movs	r2, #70	; 0x46
 8006ec6:	5a9b      	ldrh	r3, [r3, r2]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b299      	uxth	r1, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2246      	movs	r2, #70	; 0x46
 8006ed2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ed8:	f7fc f8ca 	bl	8003070 <HAL_GetTick>
 8006edc:	0002      	movs	r2, r0
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d807      	bhi.n	8006ef8 <HAL_SPI_TransmitReceive+0x23c>
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	3301      	adds	r3, #1
 8006eec:	d004      	beq.n	8006ef8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006eee:	2323      	movs	r3, #35	; 0x23
 8006ef0:	18fb      	adds	r3, r7, r3
 8006ef2:	2203      	movs	r2, #3
 8006ef4:	701a      	strb	r2, [r3, #0]
        goto error;
 8006ef6:	e0a2      	b.n	800703e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1a3      	bne.n	8006e4a <HAL_SPI_TransmitReceive+0x18e>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2246      	movs	r2, #70	; 0x46
 8006f06:	5a9b      	ldrh	r3, [r3, r2]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d19d      	bne.n	8006e4a <HAL_SPI_TransmitReceive+0x18e>
 8006f0e:	e085      	b.n	800701c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <HAL_SPI_TransmitReceive+0x268>
 8006f18:	2312      	movs	r3, #18
 8006f1a:	18fb      	adds	r3, r7, r3
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d000      	beq.n	8006f24 <HAL_SPI_TransmitReceive+0x268>
 8006f22:	e070      	b.n	8007006 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	7812      	ldrb	r2, [r2, #0]
 8006f30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f4a:	e05c      	b.n	8007006 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2202      	movs	r2, #2
 8006f54:	4013      	ands	r3, r2
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d11c      	bne.n	8006f94 <HAL_SPI_TransmitReceive+0x2d8>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d017      	beq.n	8006f94 <HAL_SPI_TransmitReceive+0x2d8>
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d114      	bne.n	8006f94 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	330c      	adds	r3, #12
 8006f74:	7812      	ldrb	r2, [r2, #0]
 8006f76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d11e      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x324>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2246      	movs	r2, #70	; 0x46
 8006fa6:	5a9b      	ldrh	r3, [r3, r2]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d018      	beq.n	8006fe0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	330c      	adds	r3, #12
 8006fb4:	001a      	movs	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	7812      	ldrb	r2, [r2, #0]
 8006fbc:	b2d2      	uxtb	r2, r2
 8006fbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2246      	movs	r2, #70	; 0x46
 8006fce:	5a9b      	ldrh	r3, [r3, r2]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b299      	uxth	r1, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2246      	movs	r2, #70	; 0x46
 8006fda:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fe0:	f7fc f846 	bl	8003070 <HAL_GetTick>
 8006fe4:	0002      	movs	r2, r0
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d802      	bhi.n	8006ff6 <HAL_SPI_TransmitReceive+0x33a>
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	d102      	bne.n	8006ffc <HAL_SPI_TransmitReceive+0x340>
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d104      	bne.n	8007006 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006ffc:	2323      	movs	r3, #35	; 0x23
 8006ffe:	18fb      	adds	r3, r7, r3
 8007000:	2203      	movs	r2, #3
 8007002:	701a      	strb	r2, [r3, #0]
        goto error;
 8007004:	e01b      	b.n	800703e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800700a:	b29b      	uxth	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d19d      	bne.n	8006f4c <HAL_SPI_TransmitReceive+0x290>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2246      	movs	r2, #70	; 0x46
 8007014:	5a9b      	ldrh	r3, [r3, r2]
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d197      	bne.n	8006f4c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	0018      	movs	r0, r3
 8007024:	f000 fea4 	bl	8007d70 <SPI_EndRxTxTransaction>
 8007028:	1e03      	subs	r3, r0, #0
 800702a:	d007      	beq.n	800703c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800702c:	2323      	movs	r3, #35	; 0x23
 800702e:	18fb      	adds	r3, r7, r3
 8007030:	2201      	movs	r2, #1
 8007032:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2220      	movs	r2, #32
 8007038:	661a      	str	r2, [r3, #96]	; 0x60
 800703a:	e000      	b.n	800703e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800703c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	225d      	movs	r2, #93	; 0x5d
 8007042:	2101      	movs	r1, #1
 8007044:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	225c      	movs	r2, #92	; 0x5c
 800704a:	2100      	movs	r1, #0
 800704c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800704e:	2323      	movs	r3, #35	; 0x23
 8007050:	18fb      	adds	r3, r7, r3
 8007052:	781b      	ldrb	r3, [r3, #0]
}
 8007054:	0018      	movs	r0, r3
 8007056:	46bd      	mov	sp, r7
 8007058:	b00a      	add	sp, #40	; 0x28
 800705a:	bd80      	pop	{r7, pc}
 800705c:	ffffefff 	.word	0xffffefff

08007060 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007060:	b590      	push	{r4, r7, lr}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	1dbb      	adds	r3, r7, #6
 800706c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800706e:	2317      	movs	r3, #23
 8007070:	18fb      	adds	r3, r7, r3
 8007072:	2200      	movs	r2, #0
 8007074:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d112      	bne.n	80070a4 <HAL_SPI_Receive_DMA+0x44>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	2382      	movs	r3, #130	; 0x82
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	429a      	cmp	r2, r3
 8007088:	d10c      	bne.n	80070a4 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	225d      	movs	r2, #93	; 0x5d
 800708e:	2104      	movs	r1, #4
 8007090:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007092:	1dbb      	adds	r3, r7, #6
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 f91e 	bl	80072dc <HAL_SPI_TransmitReceive_DMA>
 80070a0:	0003      	movs	r3, r0
 80070a2:	e10b      	b.n	80072bc <HAL_SPI_Receive_DMA+0x25c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	225c      	movs	r2, #92	; 0x5c
 80070a8:	5c9b      	ldrb	r3, [r3, r2]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d101      	bne.n	80070b2 <HAL_SPI_Receive_DMA+0x52>
 80070ae:	2302      	movs	r3, #2
 80070b0:	e104      	b.n	80072bc <HAL_SPI_Receive_DMA+0x25c>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	225c      	movs	r2, #92	; 0x5c
 80070b6:	2101      	movs	r1, #1
 80070b8:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	225d      	movs	r2, #93	; 0x5d
 80070be:	5c9b      	ldrb	r3, [r3, r2]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d004      	beq.n	80070d0 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80070c6:	2317      	movs	r3, #23
 80070c8:	18fb      	adds	r3, r7, r3
 80070ca:	2202      	movs	r2, #2
 80070cc:	701a      	strb	r2, [r3, #0]
    goto error;
 80070ce:	e0ee      	b.n	80072ae <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <HAL_SPI_Receive_DMA+0x7e>
 80070d6:	1dbb      	adds	r3, r7, #6
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d104      	bne.n	80070e8 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 80070de:	2317      	movs	r3, #23
 80070e0:	18fb      	adds	r3, r7, r3
 80070e2:	2201      	movs	r2, #1
 80070e4:	701a      	strb	r2, [r3, #0]
    goto error;
 80070e6:	e0e2      	b.n	80072ae <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	225d      	movs	r2, #93	; 0x5d
 80070ec:	2104      	movs	r1, #4
 80070ee:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	1dba      	adds	r2, r7, #6
 8007100:	2144      	movs	r1, #68	; 0x44
 8007102:	8812      	ldrh	r2, [r2, #0]
 8007104:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	1dba      	adds	r2, r7, #6
 800710a:	2146      	movs	r1, #70	; 0x46
 800710c:	8812      	ldrh	r2, [r2, #0]
 800710e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	2380      	movs	r3, #128	; 0x80
 800712e:	021b      	lsls	r3, r3, #8
 8007130:	429a      	cmp	r2, r3
 8007132:	d10f      	bne.n	8007154 <HAL_SPI_Receive_DMA+0xf4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2140      	movs	r1, #64	; 0x40
 8007140:	438a      	bics	r2, r1
 8007142:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	495d      	ldr	r1, [pc, #372]	; (80072c4 <HAL_SPI_Receive_DMA+0x264>)
 8007150:	400a      	ands	r2, r1
 8007152:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	495a      	ldr	r1, [pc, #360]	; (80072c8 <HAL_SPI_Receive_DMA+0x268>)
 8007160:	400a      	ands	r2, r1
 8007162:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	23e0      	movs	r3, #224	; 0xe0
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	429a      	cmp	r2, r3
 800716e:	d908      	bls.n	8007182 <HAL_SPI_Receive_DMA+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4954      	ldr	r1, [pc, #336]	; (80072cc <HAL_SPI_Receive_DMA+0x26c>)
 800717c:	400a      	ands	r2, r1
 800717e:	605a      	str	r2, [r3, #4]
 8007180:	e045      	b.n	800720e <HAL_SPI_Receive_DMA+0x1ae>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2180      	movs	r1, #128	; 0x80
 800718e:	0149      	lsls	r1, r1, #5
 8007190:	430a      	orrs	r2, r1
 8007192:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007198:	699a      	ldr	r2, [r3, #24]
 800719a:	2380      	movs	r3, #128	; 0x80
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	429a      	cmp	r2, r3
 80071a0:	d135      	bne.n	800720e <HAL_SPI_Receive_DMA+0x1ae>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4947      	ldr	r1, [pc, #284]	; (80072cc <HAL_SPI_Receive_DMA+0x26c>)
 80071ae:	400a      	ands	r2, r1
 80071b0:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2246      	movs	r2, #70	; 0x46
 80071b6:	5a9b      	ldrh	r3, [r3, r2]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	001a      	movs	r2, r3
 80071bc:	2301      	movs	r3, #1
 80071be:	4013      	ands	r3, r2
 80071c0:	d111      	bne.n	80071e6 <HAL_SPI_Receive_DMA+0x186>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	493e      	ldr	r1, [pc, #248]	; (80072c8 <HAL_SPI_Receive_DMA+0x268>)
 80071ce:	400a      	ands	r2, r1
 80071d0:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2246      	movs	r2, #70	; 0x46
 80071d6:	5a9b      	ldrh	r3, [r3, r2]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	085b      	lsrs	r3, r3, #1
 80071dc:	b299      	uxth	r1, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2246      	movs	r2, #70	; 0x46
 80071e2:	5299      	strh	r1, [r3, r2]
 80071e4:	e013      	b.n	800720e <HAL_SPI_Receive_DMA+0x1ae>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2180      	movs	r1, #128	; 0x80
 80071f2:	0189      	lsls	r1, r1, #6
 80071f4:	430a      	orrs	r2, r1
 80071f6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2246      	movs	r2, #70	; 0x46
 80071fc:	5a9b      	ldrh	r3, [r3, r2]
 80071fe:	b29b      	uxth	r3, r3
 8007200:	085b      	lsrs	r3, r3, #1
 8007202:	b29b      	uxth	r3, r3
 8007204:	3301      	adds	r3, #1
 8007206:	b299      	uxth	r1, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2246      	movs	r2, #70	; 0x46
 800720c:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007212:	4a2f      	ldr	r2, [pc, #188]	; (80072d0 <HAL_SPI_Receive_DMA+0x270>)
 8007214:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721a:	4a2e      	ldr	r2, [pc, #184]	; (80072d4 <HAL_SPI_Receive_DMA+0x274>)
 800721c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007222:	4a2d      	ldr	r2, [pc, #180]	; (80072d8 <HAL_SPI_Receive_DMA+0x278>)
 8007224:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722a:	2200      	movs	r2, #0
 800722c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	0019      	movs	r1, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2246      	movs	r2, #70	; 0x46
 8007244:	5a9b      	ldrh	r3, [r3, r2]
 8007246:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007248:	0022      	movs	r2, r4
 800724a:	f7fc fb1d 	bl	8003888 <HAL_DMA_Start_IT>
 800724e:	1e03      	subs	r3, r0, #0
 8007250:	d00e      	beq.n	8007270 <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007256:	2210      	movs	r2, #16
 8007258:	431a      	orrs	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800725e:	2317      	movs	r3, #23
 8007260:	18fb      	adds	r3, r7, r3
 8007262:	2201      	movs	r2, #1
 8007264:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	225d      	movs	r2, #93	; 0x5d
 800726a:	2101      	movs	r1, #1
 800726c:	5499      	strb	r1, [r3, r2]
    goto error;
 800726e:	e01e      	b.n	80072ae <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2240      	movs	r2, #64	; 0x40
 8007278:	4013      	ands	r3, r2
 800727a:	2b40      	cmp	r3, #64	; 0x40
 800727c:	d007      	beq.n	800728e <HAL_SPI_Receive_DMA+0x22e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2140      	movs	r1, #64	; 0x40
 800728a:	430a      	orrs	r2, r1
 800728c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685a      	ldr	r2, [r3, #4]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2120      	movs	r1, #32
 800729a:	430a      	orrs	r2, r1
 800729c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2101      	movs	r1, #1
 80072aa:	430a      	orrs	r2, r1
 80072ac:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	225c      	movs	r2, #92	; 0x5c
 80072b2:	2100      	movs	r1, #0
 80072b4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80072b6:	2317      	movs	r3, #23
 80072b8:	18fb      	adds	r3, r7, r3
 80072ba:	781b      	ldrb	r3, [r3, #0]
}
 80072bc:	0018      	movs	r0, r3
 80072be:	46bd      	mov	sp, r7
 80072c0:	b007      	add	sp, #28
 80072c2:	bd90      	pop	{r4, r7, pc}
 80072c4:	ffffbfff 	.word	0xffffbfff
 80072c8:	ffffdfff 	.word	0xffffdfff
 80072cc:	ffffefff 	.word	0xffffefff
 80072d0:	080079c3 	.word	0x080079c3
 80072d4:	0800787d 	.word	0x0800787d
 80072d8:	080079ff 	.word	0x080079ff

080072dc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80072dc:	b590      	push	{r4, r7, lr}
 80072de:	b087      	sub	sp, #28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
 80072e8:	001a      	movs	r2, r3
 80072ea:	1cbb      	adds	r3, r7, #2
 80072ec:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072ee:	2317      	movs	r3, #23
 80072f0:	18fb      	adds	r3, r7, r3
 80072f2:	2200      	movs	r2, #0
 80072f4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	225c      	movs	r2, #92	; 0x5c
 80072fa:	5c9b      	ldrb	r3, [r3, r2]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d101      	bne.n	8007304 <HAL_SPI_TransmitReceive_DMA+0x28>
 8007300:	2302      	movs	r3, #2
 8007302:	e186      	b.n	8007612 <HAL_SPI_TransmitReceive_DMA+0x336>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	225c      	movs	r2, #92	; 0x5c
 8007308:	2101      	movs	r1, #1
 800730a:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800730c:	2016      	movs	r0, #22
 800730e:	183b      	adds	r3, r7, r0
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	215d      	movs	r1, #93	; 0x5d
 8007314:	5c52      	ldrb	r2, [r2, r1]
 8007316:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800731e:	0001      	movs	r1, r0
 8007320:	187b      	adds	r3, r7, r1
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d011      	beq.n	800734c <HAL_SPI_TransmitReceive_DMA+0x70>
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	2382      	movs	r3, #130	; 0x82
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	429a      	cmp	r2, r3
 8007330:	d107      	bne.n	8007342 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d103      	bne.n	8007342 <HAL_SPI_TransmitReceive_DMA+0x66>
 800733a:	187b      	adds	r3, r7, r1
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b04      	cmp	r3, #4
 8007340:	d004      	beq.n	800734c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8007342:	2317      	movs	r3, #23
 8007344:	18fb      	adds	r3, r7, r3
 8007346:	2202      	movs	r2, #2
 8007348:	701a      	strb	r2, [r3, #0]
    goto error;
 800734a:	e15b      	b.n	8007604 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d006      	beq.n	8007360 <HAL_SPI_TransmitReceive_DMA+0x84>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_SPI_TransmitReceive_DMA+0x84>
 8007358:	1cbb      	adds	r3, r7, #2
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d104      	bne.n	800736a <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8007360:	2317      	movs	r3, #23
 8007362:	18fb      	adds	r3, r7, r3
 8007364:	2201      	movs	r2, #1
 8007366:	701a      	strb	r2, [r3, #0]
    goto error;
 8007368:	e14c      	b.n	8007604 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	225d      	movs	r2, #93	; 0x5d
 800736e:	5c9b      	ldrb	r3, [r3, r2]
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b04      	cmp	r3, #4
 8007374:	d003      	beq.n	800737e <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	225d      	movs	r2, #93	; 0x5d
 800737a:	2105      	movs	r1, #5
 800737c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	1cba      	adds	r2, r7, #2
 800738e:	8812      	ldrh	r2, [r2, #0]
 8007390:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	1cba      	adds	r2, r7, #2
 8007396:	8812      	ldrh	r2, [r2, #0]
 8007398:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	1cba      	adds	r2, r7, #2
 80073a4:	2144      	movs	r1, #68	; 0x44
 80073a6:	8812      	ldrh	r2, [r2, #0]
 80073a8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	1cba      	adds	r2, r7, #2
 80073ae:	2146      	movs	r1, #70	; 0x46
 80073b0:	8812      	ldrh	r2, [r2, #0]
 80073b2:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4994      	ldr	r1, [pc, #592]	; (800761c <HAL_SPI_TransmitReceive_DMA+0x340>)
 80073cc:	400a      	ands	r2, r1
 80073ce:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	23e0      	movs	r3, #224	; 0xe0
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	429a      	cmp	r2, r3
 80073da:	d908      	bls.n	80073ee <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	498e      	ldr	r1, [pc, #568]	; (8007620 <HAL_SPI_TransmitReceive_DMA+0x344>)
 80073e8:	400a      	ands	r2, r1
 80073ea:	605a      	str	r2, [r3, #4]
 80073ec:	e074      	b.n	80074d8 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2180      	movs	r1, #128	; 0x80
 80073fa:	0149      	lsls	r1, r1, #5
 80073fc:	430a      	orrs	r2, r1
 80073fe:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	2380      	movs	r3, #128	; 0x80
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	429a      	cmp	r2, r3
 800740c:	d127      	bne.n	800745e <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007412:	001a      	movs	r2, r3
 8007414:	2301      	movs	r3, #1
 8007416:	4013      	ands	r3, r2
 8007418:	d10f      	bne.n	800743a <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	497f      	ldr	r1, [pc, #508]	; (8007624 <HAL_SPI_TransmitReceive_DMA+0x348>)
 8007426:	400a      	ands	r2, r1
 8007428:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800742e:	b29b      	uxth	r3, r3
 8007430:	085b      	lsrs	r3, r3, #1
 8007432:	b29a      	uxth	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007438:	e011      	b.n	800745e <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2180      	movs	r1, #128	; 0x80
 8007446:	01c9      	lsls	r1, r1, #7
 8007448:	430a      	orrs	r2, r1
 800744a:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007450:	b29b      	uxth	r3, r3
 8007452:	085b      	lsrs	r3, r3, #1
 8007454:	b29b      	uxth	r3, r3
 8007456:	3301      	adds	r3, #1
 8007458:	b29a      	uxth	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007462:	699a      	ldr	r2, [r3, #24]
 8007464:	2380      	movs	r3, #128	; 0x80
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	429a      	cmp	r2, r3
 800746a:	d135      	bne.n	80074d8 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	496a      	ldr	r1, [pc, #424]	; (8007620 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8007478:	400a      	ands	r2, r1
 800747a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2246      	movs	r2, #70	; 0x46
 8007480:	5a9b      	ldrh	r3, [r3, r2]
 8007482:	b29b      	uxth	r3, r3
 8007484:	001a      	movs	r2, r3
 8007486:	2301      	movs	r3, #1
 8007488:	4013      	ands	r3, r2
 800748a:	d111      	bne.n	80074b0 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4964      	ldr	r1, [pc, #400]	; (8007628 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8007498:	400a      	ands	r2, r1
 800749a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2246      	movs	r2, #70	; 0x46
 80074a0:	5a9b      	ldrh	r3, [r3, r2]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	085b      	lsrs	r3, r3, #1
 80074a6:	b299      	uxth	r1, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2246      	movs	r2, #70	; 0x46
 80074ac:	5299      	strh	r1, [r3, r2]
 80074ae:	e013      	b.n	80074d8 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2180      	movs	r1, #128	; 0x80
 80074bc:	0189      	lsls	r1, r1, #6
 80074be:	430a      	orrs	r2, r1
 80074c0:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2246      	movs	r2, #70	; 0x46
 80074c6:	5a9b      	ldrh	r3, [r3, r2]
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	085b      	lsrs	r3, r3, #1
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	3301      	adds	r3, #1
 80074d0:	b299      	uxth	r1, r3
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2246      	movs	r2, #70	; 0x46
 80074d6:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	225d      	movs	r2, #93	; 0x5d
 80074dc:	5c9b      	ldrb	r3, [r3, r2]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d108      	bne.n	80074f6 <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e8:	4a50      	ldr	r2, [pc, #320]	; (800762c <HAL_SPI_TransmitReceive_DMA+0x350>)
 80074ea:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f0:	4a4f      	ldr	r2, [pc, #316]	; (8007630 <HAL_SPI_TransmitReceive_DMA+0x354>)
 80074f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80074f4:	e007      	b.n	8007506 <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fa:	4a4e      	ldr	r2, [pc, #312]	; (8007634 <HAL_SPI_TransmitReceive_DMA+0x358>)
 80074fc:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007502:	4a4d      	ldr	r2, [pc, #308]	; (8007638 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 8007504:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800750a:	4a4c      	ldr	r2, [pc, #304]	; (800763c <HAL_SPI_TransmitReceive_DMA+0x360>)
 800750c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007512:	2200      	movs	r2, #0
 8007514:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	330c      	adds	r3, #12
 8007520:	0019      	movs	r1, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2246      	movs	r2, #70	; 0x46
 800752c:	5a9b      	ldrh	r3, [r3, r2]
 800752e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007530:	0022      	movs	r2, r4
 8007532:	f7fc f9a9 	bl	8003888 <HAL_DMA_Start_IT>
 8007536:	1e03      	subs	r3, r0, #0
 8007538:	d00e      	beq.n	8007558 <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800753e:	2210      	movs	r2, #16
 8007540:	431a      	orrs	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007546:	2317      	movs	r3, #23
 8007548:	18fb      	adds	r3, r7, r3
 800754a:	2201      	movs	r2, #1
 800754c:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	225d      	movs	r2, #93	; 0x5d
 8007552:	2101      	movs	r1, #1
 8007554:	5499      	strb	r1, [r3, r2]
    goto error;
 8007556:	e055      	b.n	8007604 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2101      	movs	r1, #1
 8007564:	430a      	orrs	r2, r1
 8007566:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756c:	2200      	movs	r2, #0
 800756e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007574:	2200      	movs	r2, #0
 8007576:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757c:	2200      	movs	r2, #0
 800757e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007584:	2200      	movs	r2, #0
 8007586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	0019      	movs	r1, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	330c      	adds	r3, #12
 8007598:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800759e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80075a0:	f7fc f972 	bl	8003888 <HAL_DMA_Start_IT>
 80075a4:	1e03      	subs	r3, r0, #0
 80075a6:	d00e      	beq.n	80075c6 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ac:	2210      	movs	r2, #16
 80075ae:	431a      	orrs	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80075b4:	2317      	movs	r3, #23
 80075b6:	18fb      	adds	r3, r7, r3
 80075b8:	2201      	movs	r2, #1
 80075ba:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	225d      	movs	r2, #93	; 0x5d
 80075c0:	2101      	movs	r1, #1
 80075c2:	5499      	strb	r1, [r3, r2]
    goto error;
 80075c4:	e01e      	b.n	8007604 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2240      	movs	r2, #64	; 0x40
 80075ce:	4013      	ands	r3, r2
 80075d0:	2b40      	cmp	r3, #64	; 0x40
 80075d2:	d007      	beq.n	80075e4 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2140      	movs	r1, #64	; 0x40
 80075e0:	430a      	orrs	r2, r1
 80075e2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2120      	movs	r1, #32
 80075f0:	430a      	orrs	r2, r1
 80075f2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2102      	movs	r1, #2
 8007600:	430a      	orrs	r2, r1
 8007602:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	225c      	movs	r2, #92	; 0x5c
 8007608:	2100      	movs	r1, #0
 800760a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800760c:	2317      	movs	r3, #23
 800760e:	18fb      	adds	r3, r7, r3
 8007610:	781b      	ldrb	r3, [r3, #0]
}
 8007612:	0018      	movs	r0, r3
 8007614:	46bd      	mov	sp, r7
 8007616:	b007      	add	sp, #28
 8007618:	bd90      	pop	{r4, r7, pc}
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	ffff9fff 	.word	0xffff9fff
 8007620:	ffffefff 	.word	0xffffefff
 8007624:	ffffbfff 	.word	0xffffbfff
 8007628:	ffffdfff 	.word	0xffffdfff
 800762c:	080079c3 	.word	0x080079c3
 8007630:	0800787d 	.word	0x0800787d
 8007634:	080079e1 	.word	0x080079e1
 8007638:	0800792d 	.word	0x0800792d
 800763c:	080079ff 	.word	0x080079ff

08007640 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	099b      	lsrs	r3, r3, #6
 800765c:	001a      	movs	r2, r3
 800765e:	2301      	movs	r3, #1
 8007660:	4013      	ands	r3, r2
 8007662:	d10f      	bne.n	8007684 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	2201      	movs	r2, #1
 8007668:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800766a:	d00b      	beq.n	8007684 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	099b      	lsrs	r3, r3, #6
 8007670:	001a      	movs	r2, r3
 8007672:	2301      	movs	r3, #1
 8007674:	4013      	ands	r3, r2
 8007676:	d005      	beq.n	8007684 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	0010      	movs	r0, r2
 8007680:	4798      	blx	r3
    return;
 8007682:	e0d5      	b.n	8007830 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	085b      	lsrs	r3, r3, #1
 8007688:	001a      	movs	r2, r3
 800768a:	2301      	movs	r3, #1
 800768c:	4013      	ands	r3, r2
 800768e:	d00b      	beq.n	80076a8 <HAL_SPI_IRQHandler+0x68>
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	09db      	lsrs	r3, r3, #7
 8007694:	001a      	movs	r2, r3
 8007696:	2301      	movs	r3, #1
 8007698:	4013      	ands	r3, r2
 800769a:	d005      	beq.n	80076a8 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	0010      	movs	r0, r2
 80076a4:	4798      	blx	r3
    return;
 80076a6:	e0c3      	b.n	8007830 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	095b      	lsrs	r3, r3, #5
 80076ac:	001a      	movs	r2, r3
 80076ae:	2301      	movs	r3, #1
 80076b0:	4013      	ands	r3, r2
 80076b2:	d10c      	bne.n	80076ce <HAL_SPI_IRQHandler+0x8e>
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	099b      	lsrs	r3, r3, #6
 80076b8:	001a      	movs	r2, r3
 80076ba:	2301      	movs	r3, #1
 80076bc:	4013      	ands	r3, r2
 80076be:	d106      	bne.n	80076ce <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	0a1b      	lsrs	r3, r3, #8
 80076c4:	001a      	movs	r2, r3
 80076c6:	2301      	movs	r3, #1
 80076c8:	4013      	ands	r3, r2
 80076ca:	d100      	bne.n	80076ce <HAL_SPI_IRQHandler+0x8e>
 80076cc:	e0b0      	b.n	8007830 <HAL_SPI_IRQHandler+0x1f0>
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	095b      	lsrs	r3, r3, #5
 80076d2:	001a      	movs	r2, r3
 80076d4:	2301      	movs	r3, #1
 80076d6:	4013      	ands	r3, r2
 80076d8:	d100      	bne.n	80076dc <HAL_SPI_IRQHandler+0x9c>
 80076da:	e0a9      	b.n	8007830 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	099b      	lsrs	r3, r3, #6
 80076e0:	001a      	movs	r2, r3
 80076e2:	2301      	movs	r3, #1
 80076e4:	4013      	ands	r3, r2
 80076e6:	d023      	beq.n	8007730 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	225d      	movs	r2, #93	; 0x5d
 80076ec:	5c9b      	ldrb	r3, [r3, r2]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d011      	beq.n	8007718 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076f8:	2204      	movs	r2, #4
 80076fa:	431a      	orrs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007700:	2300      	movs	r3, #0
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	e00b      	b.n	8007730 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007718:	2300      	movs	r3, #0
 800771a:	613b      	str	r3, [r7, #16]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	613b      	str	r3, [r7, #16]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	613b      	str	r3, [r7, #16]
 800772c:	693b      	ldr	r3, [r7, #16]
        return;
 800772e:	e07f      	b.n	8007830 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	095b      	lsrs	r3, r3, #5
 8007734:	001a      	movs	r2, r3
 8007736:	2301      	movs	r3, #1
 8007738:	4013      	ands	r3, r2
 800773a:	d014      	beq.n	8007766 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007740:	2201      	movs	r2, #1
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007748:	2300      	movs	r3, #0
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2140      	movs	r1, #64	; 0x40
 8007760:	438a      	bics	r2, r1
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	0a1b      	lsrs	r3, r3, #8
 800776a:	001a      	movs	r2, r3
 800776c:	2301      	movs	r3, #1
 800776e:	4013      	ands	r3, r2
 8007770:	d00c      	beq.n	800778c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007776:	2208      	movs	r2, #8
 8007778:	431a      	orrs	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800777e:	2300      	movs	r3, #0
 8007780:	60bb      	str	r3, [r7, #8]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	60bb      	str	r3, [r7, #8]
 800778a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007790:	2b00      	cmp	r3, #0
 8007792:	d04c      	beq.n	800782e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	21e0      	movs	r1, #224	; 0xe0
 80077a0:	438a      	bics	r2, r1
 80077a2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	225d      	movs	r2, #93	; 0x5d
 80077a8:	2101      	movs	r1, #1
 80077aa:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	2202      	movs	r2, #2
 80077b0:	4013      	ands	r3, r2
 80077b2:	d103      	bne.n	80077bc <HAL_SPI_IRQHandler+0x17c>
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	2201      	movs	r2, #1
 80077b8:	4013      	ands	r3, r2
 80077ba:	d032      	beq.n	8007822 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2103      	movs	r1, #3
 80077c8:	438a      	bics	r2, r1
 80077ca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d010      	beq.n	80077f6 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d8:	4a17      	ldr	r2, [pc, #92]	; (8007838 <HAL_SPI_IRQHandler+0x1f8>)
 80077da:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e0:	0018      	movs	r0, r3
 80077e2:	f7fc f8d7 	bl	8003994 <HAL_DMA_Abort_IT>
 80077e6:	1e03      	subs	r3, r0, #0
 80077e8:	d005      	beq.n	80077f6 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ee:	2240      	movs	r2, #64	; 0x40
 80077f0:	431a      	orrs	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d016      	beq.n	800782c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007802:	4a0d      	ldr	r2, [pc, #52]	; (8007838 <HAL_SPI_IRQHandler+0x1f8>)
 8007804:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780a:	0018      	movs	r0, r3
 800780c:	f7fc f8c2 	bl	8003994 <HAL_DMA_Abort_IT>
 8007810:	1e03      	subs	r3, r0, #0
 8007812:	d00b      	beq.n	800782c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007818:	2240      	movs	r2, #64	; 0x40
 800781a:	431a      	orrs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007820:	e004      	b.n	800782c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	0018      	movs	r0, r3
 8007826:	f000 f821 	bl	800786c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800782a:	e000      	b.n	800782e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800782c:	46c0      	nop			; (mov r8, r8)
    return;
 800782e:	46c0      	nop			; (mov r8, r8)
  }
}
 8007830:	46bd      	mov	sp, r7
 8007832:	b008      	add	sp, #32
 8007834:	bd80      	pop	{r7, pc}
 8007836:	46c0      	nop			; (mov r8, r8)
 8007838:	08007a41 	.word	0x08007a41

0800783c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007844:	46c0      	nop			; (mov r8, r8)
 8007846:	46bd      	mov	sp, r7
 8007848:	b002      	add	sp, #8
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007854:	46c0      	nop			; (mov r8, r8)
 8007856:	46bd      	mov	sp, r7
 8007858:	b002      	add	sp, #8
 800785a:	bd80      	pop	{r7, pc}

0800785c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007864:	46c0      	nop			; (mov r8, r8)
 8007866:	46bd      	mov	sp, r7
 8007868:	b002      	add	sp, #8
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007874:	46c0      	nop			; (mov r8, r8)
 8007876:	46bd      	mov	sp, r7
 8007878:	b002      	add	sp, #8
 800787a:	bd80      	pop	{r7, pc}

0800787c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007888:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800788a:	f7fb fbf1 	bl	8003070 <HAL_GetTick>
 800788e:	0003      	movs	r3, r0
 8007890:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2220      	movs	r2, #32
 800789a:	4013      	ands	r3, r2
 800789c:	2b20      	cmp	r3, #32
 800789e:	d03e      	beq.n	800791e <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2120      	movs	r1, #32
 80078ac:	438a      	bics	r2, r1
 80078ae:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10e      	bne.n	80078d6 <SPI_DMAReceiveCplt+0x5a>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	2382      	movs	r3, #130	; 0x82
 80078be:	005b      	lsls	r3, r3, #1
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d108      	bne.n	80078d6 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2103      	movs	r1, #3
 80078d0:	438a      	bics	r2, r1
 80078d2:	605a      	str	r2, [r3, #4]
 80078d4:	e007      	b.n	80078e6 <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2101      	movs	r1, #1
 80078e2:	438a      	bics	r2, r1
 80078e4:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2164      	movs	r1, #100	; 0x64
 80078ec:	0018      	movs	r0, r3
 80078ee:	f000 f9e1 	bl	8007cb4 <SPI_EndRxTransaction>
 80078f2:	1e03      	subs	r3, r0, #0
 80078f4:	d002      	beq.n	80078fc <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2220      	movs	r2, #32
 80078fa:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2246      	movs	r2, #70	; 0x46
 8007900:	2100      	movs	r1, #0
 8007902:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	225d      	movs	r2, #93	; 0x5d
 8007908:	2101      	movs	r1, #1
 800790a:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007910:	2b00      	cmp	r3, #0
 8007912:	d004      	beq.n	800791e <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	0018      	movs	r0, r3
 8007918:	f7ff ffa8 	bl	800786c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800791c:	e003      	b.n	8007926 <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	0018      	movs	r0, r3
 8007922:	f7f9 fb65 	bl	8000ff0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007926:	46bd      	mov	sp, r7
 8007928:	b004      	add	sp, #16
 800792a:	bd80      	pop	{r7, pc}

0800792c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007938:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800793a:	f7fb fb99 	bl	8003070 <HAL_GetTick>
 800793e:	0003      	movs	r3, r0
 8007940:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2220      	movs	r2, #32
 800794a:	4013      	ands	r3, r2
 800794c:	2b20      	cmp	r3, #32
 800794e:	d031      	beq.n	80079b4 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2120      	movs	r1, #32
 800795c:	438a      	bics	r2, r1
 800795e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2164      	movs	r1, #100	; 0x64
 8007966:	0018      	movs	r0, r3
 8007968:	f000 fa02 	bl	8007d70 <SPI_EndRxTxTransaction>
 800796c:	1e03      	subs	r3, r0, #0
 800796e:	d005      	beq.n	800797c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007974:	2220      	movs	r2, #32
 8007976:	431a      	orrs	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2103      	movs	r1, #3
 8007988:	438a      	bics	r2, r1
 800798a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2246      	movs	r2, #70	; 0x46
 8007996:	2100      	movs	r1, #0
 8007998:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	225d      	movs	r2, #93	; 0x5d
 800799e:	2101      	movs	r1, #1
 80079a0:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d004      	beq.n	80079b4 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	0018      	movs	r0, r3
 80079ae:	f7ff ff5d 	bl	800786c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80079b2:	e003      	b.n	80079bc <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	0018      	movs	r0, r3
 80079b8:	f7ff ff40 	bl	800783c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079bc:	46bd      	mov	sp, r7
 80079be:	b004      	add	sp, #16
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	0018      	movs	r0, r3
 80079d4:	f7ff ff3a 	bl	800784c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079d8:	46c0      	nop			; (mov r8, r8)
 80079da:	46bd      	mov	sp, r7
 80079dc:	b004      	add	sp, #16
 80079de:	bd80      	pop	{r7, pc}

080079e0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ec:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	0018      	movs	r0, r3
 80079f2:	f7ff ff33 	bl	800785c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079f6:	46c0      	nop			; (mov r8, r8)
 80079f8:	46bd      	mov	sp, r7
 80079fa:	b004      	add	sp, #16
 80079fc:	bd80      	pop	{r7, pc}

080079fe <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2103      	movs	r1, #3
 8007a18:	438a      	bics	r2, r1
 8007a1a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a20:	2210      	movs	r2, #16
 8007a22:	431a      	orrs	r2, r3
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	225d      	movs	r2, #93	; 0x5d
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	0018      	movs	r0, r3
 8007a34:	f7ff ff1a 	bl	800786c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a38:	46c0      	nop			; (mov r8, r8)
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	b004      	add	sp, #16
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2246      	movs	r2, #70	; 0x46
 8007a52:	2100      	movs	r1, #0
 8007a54:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	0018      	movs	r0, r3
 8007a60:	f7ff ff04 	bl	800786c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a64:	46c0      	nop			; (mov r8, r8)
 8007a66:	46bd      	mov	sp, r7
 8007a68:	b004      	add	sp, #16
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b088      	sub	sp, #32
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	603b      	str	r3, [r7, #0]
 8007a78:	1dfb      	adds	r3, r7, #7
 8007a7a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a7c:	f7fb faf8 	bl	8003070 <HAL_GetTick>
 8007a80:	0002      	movs	r2, r0
 8007a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	18d3      	adds	r3, r2, r3
 8007a8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a8c:	f7fb faf0 	bl	8003070 <HAL_GetTick>
 8007a90:	0003      	movs	r3, r0
 8007a92:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a94:	4b3a      	ldr	r3, [pc, #232]	; (8007b80 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	015b      	lsls	r3, r3, #5
 8007a9a:	0d1b      	lsrs	r3, r3, #20
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	4353      	muls	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aa2:	e058      	b.n	8007b56 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	d055      	beq.n	8007b56 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007aaa:	f7fb fae1 	bl	8003070 <HAL_GetTick>
 8007aae:	0002      	movs	r2, r0
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	69fa      	ldr	r2, [r7, #28]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d902      	bls.n	8007ac0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d142      	bne.n	8007b46 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	21e0      	movs	r1, #224	; 0xe0
 8007acc:	438a      	bics	r2, r1
 8007ace:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	2382      	movs	r3, #130	; 0x82
 8007ad6:	005b      	lsls	r3, r3, #1
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d113      	bne.n	8007b04 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	2380      	movs	r3, #128	; 0x80
 8007ae2:	021b      	lsls	r3, r3, #8
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d005      	beq.n	8007af4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	689a      	ldr	r2, [r3, #8]
 8007aec:	2380      	movs	r3, #128	; 0x80
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d107      	bne.n	8007b04 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2140      	movs	r1, #64	; 0x40
 8007b00:	438a      	bics	r2, r1
 8007b02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b08:	2380      	movs	r3, #128	; 0x80
 8007b0a:	019b      	lsls	r3, r3, #6
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d110      	bne.n	8007b32 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	491a      	ldr	r1, [pc, #104]	; (8007b84 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007b1c:	400a      	ands	r2, r1
 8007b1e:	601a      	str	r2, [r3, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2180      	movs	r1, #128	; 0x80
 8007b2c:	0189      	lsls	r1, r1, #6
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	225d      	movs	r2, #93	; 0x5d
 8007b36:	2101      	movs	r1, #1
 8007b38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	225c      	movs	r2, #92	; 0x5c
 8007b3e:	2100      	movs	r1, #0
 8007b40:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e017      	b.n	8007b76 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	3b01      	subs	r3, #1
 8007b54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	4013      	ands	r3, r2
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	425a      	negs	r2, r3
 8007b66:	4153      	adcs	r3, r2
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	001a      	movs	r2, r3
 8007b6c:	1dfb      	adds	r3, r7, #7
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d197      	bne.n	8007aa4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	0018      	movs	r0, r3
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	b008      	add	sp, #32
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	46c0      	nop			; (mov r8, r8)
 8007b80:	20003134 	.word	0x20003134
 8007b84:	ffffdfff 	.word	0xffffdfff

08007b88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b088      	sub	sp, #32
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
 8007b94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007b96:	f7fb fa6b 	bl	8003070 <HAL_GetTick>
 8007b9a:	0002      	movs	r2, r0
 8007b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9e:	1a9b      	subs	r3, r3, r2
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	18d3      	adds	r3, r2, r3
 8007ba4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ba6:	f7fb fa63 	bl	8003070 <HAL_GetTick>
 8007baa:	0003      	movs	r3, r0
 8007bac:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007bae:	4b3f      	ldr	r3, [pc, #252]	; (8007cac <SPI_WaitFifoStateUntilTimeout+0x124>)
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	0013      	movs	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	189b      	adds	r3, r3, r2
 8007bb8:	00da      	lsls	r2, r3, #3
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	0d1b      	lsrs	r3, r3, #20
 8007bbe:	69fa      	ldr	r2, [r7, #28]
 8007bc0:	4353      	muls	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007bc4:	e064      	b.n	8007c90 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	23c0      	movs	r3, #192	; 0xc0
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d106      	bne.n	8007bde <SPI_WaitFifoStateUntilTimeout+0x56>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d103      	bne.n	8007bde <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	330c      	adds	r3, #12
 8007bdc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	3301      	adds	r3, #1
 8007be2:	d055      	beq.n	8007c90 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007be4:	f7fb fa44 	bl	8003070 <HAL_GetTick>
 8007be8:	0002      	movs	r2, r0
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d902      	bls.n	8007bfa <SPI_WaitFifoStateUntilTimeout+0x72>
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d142      	bne.n	8007c80 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	21e0      	movs	r1, #224	; 0xe0
 8007c06:	438a      	bics	r2, r1
 8007c08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	2382      	movs	r3, #130	; 0x82
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d113      	bne.n	8007c3e <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	689a      	ldr	r2, [r3, #8]
 8007c1a:	2380      	movs	r3, #128	; 0x80
 8007c1c:	021b      	lsls	r3, r3, #8
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d005      	beq.n	8007c2e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	2380      	movs	r3, #128	; 0x80
 8007c28:	00db      	lsls	r3, r3, #3
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d107      	bne.n	8007c3e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2140      	movs	r1, #64	; 0x40
 8007c3a:	438a      	bics	r2, r1
 8007c3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c42:	2380      	movs	r3, #128	; 0x80
 8007c44:	019b      	lsls	r3, r3, #6
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d110      	bne.n	8007c6c <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4916      	ldr	r1, [pc, #88]	; (8007cb0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007c56:	400a      	ands	r2, r1
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2180      	movs	r1, #128	; 0x80
 8007c66:	0189      	lsls	r1, r1, #6
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	225d      	movs	r2, #93	; 0x5d
 8007c70:	2101      	movs	r1, #1
 8007c72:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	225c      	movs	r2, #92	; 0x5c
 8007c78:	2100      	movs	r1, #0
 8007c7a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e010      	b.n	8007ca2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d101      	bne.n	8007c8a <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	4013      	ands	r3, r2
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d192      	bne.n	8007bc6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	b008      	add	sp, #32
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	46c0      	nop			; (mov r8, r8)
 8007cac:	20003134 	.word	0x20003134
 8007cb0:	ffffdfff 	.word	0xffffdfff

08007cb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	2382      	movs	r3, #130	; 0x82
 8007cc6:	005b      	lsls	r3, r3, #1
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d113      	bne.n	8007cf4 <SPI_EndRxTransaction+0x40>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	2380      	movs	r3, #128	; 0x80
 8007cd2:	021b      	lsls	r3, r3, #8
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d005      	beq.n	8007ce4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	2380      	movs	r3, #128	; 0x80
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d107      	bne.n	8007cf4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2140      	movs	r1, #64	; 0x40
 8007cf0:	438a      	bics	r2, r1
 8007cf2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	0013      	movs	r3, r2
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2180      	movs	r1, #128	; 0x80
 8007d02:	f7ff feb3 	bl	8007a6c <SPI_WaitFlagStateUntilTimeout>
 8007d06:	1e03      	subs	r3, r0, #0
 8007d08:	d007      	beq.n	8007d1a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d0e:	2220      	movs	r2, #32
 8007d10:	431a      	orrs	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e026      	b.n	8007d68 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	2382      	movs	r3, #130	; 0x82
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d11f      	bne.n	8007d66 <SPI_EndRxTransaction+0xb2>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	689a      	ldr	r2, [r3, #8]
 8007d2a:	2380      	movs	r3, #128	; 0x80
 8007d2c:	021b      	lsls	r3, r3, #8
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d005      	beq.n	8007d3e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	2380      	movs	r3, #128	; 0x80
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d113      	bne.n	8007d66 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	23c0      	movs	r3, #192	; 0xc0
 8007d42:	00d9      	lsls	r1, r3, #3
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	0013      	movs	r3, r2
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f7ff ff1b 	bl	8007b88 <SPI_WaitFifoStateUntilTimeout>
 8007d52:	1e03      	subs	r3, r0, #0
 8007d54:	d007      	beq.n	8007d66 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e000      	b.n	8007d68 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	0018      	movs	r0, r3
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	b004      	add	sp, #16
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	23c0      	movs	r3, #192	; 0xc0
 8007d80:	0159      	lsls	r1, r3, #5
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	0013      	movs	r3, r2
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f7ff fefc 	bl	8007b88 <SPI_WaitFifoStateUntilTimeout>
 8007d90:	1e03      	subs	r3, r0, #0
 8007d92:	d007      	beq.n	8007da4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d98:	2220      	movs	r2, #32
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e027      	b.n	8007df4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	9300      	str	r3, [sp, #0]
 8007dac:	0013      	movs	r3, r2
 8007dae:	2200      	movs	r2, #0
 8007db0:	2180      	movs	r1, #128	; 0x80
 8007db2:	f7ff fe5b 	bl	8007a6c <SPI_WaitFlagStateUntilTimeout>
 8007db6:	1e03      	subs	r3, r0, #0
 8007db8:	d007      	beq.n	8007dca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dbe:	2220      	movs	r2, #32
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e014      	b.n	8007df4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	23c0      	movs	r3, #192	; 0xc0
 8007dce:	00d9      	lsls	r1, r3, #3
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	0013      	movs	r3, r2
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f7ff fed5 	bl	8007b88 <SPI_WaitFifoStateUntilTimeout>
 8007dde:	1e03      	subs	r3, r0, #0
 8007de0:	d007      	beq.n	8007df2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de6:	2220      	movs	r2, #32
 8007de8:	431a      	orrs	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e000      	b.n	8007df4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	0018      	movs	r0, r3
 8007df6:	46bd      	mov	sp, r7
 8007df8:	b004      	add	sp, #16
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e04a      	b.n	8007ea4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	223d      	movs	r2, #61	; 0x3d
 8007e12:	5c9b      	ldrb	r3, [r3, r2]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d107      	bne.n	8007e2a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	223c      	movs	r2, #60	; 0x3c
 8007e1e:	2100      	movs	r1, #0
 8007e20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	0018      	movs	r0, r3
 8007e26:	f7fa fe4b 	bl	8002ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	223d      	movs	r2, #61	; 0x3d
 8007e2e:	2102      	movs	r1, #2
 8007e30:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	0019      	movs	r1, r3
 8007e3c:	0010      	movs	r0, r2
 8007e3e:	f000 fb41 	bl	80084c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2248      	movs	r2, #72	; 0x48
 8007e46:	2101      	movs	r1, #1
 8007e48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	223e      	movs	r2, #62	; 0x3e
 8007e4e:	2101      	movs	r1, #1
 8007e50:	5499      	strb	r1, [r3, r2]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	223f      	movs	r2, #63	; 0x3f
 8007e56:	2101      	movs	r1, #1
 8007e58:	5499      	strb	r1, [r3, r2]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2240      	movs	r2, #64	; 0x40
 8007e5e:	2101      	movs	r1, #1
 8007e60:	5499      	strb	r1, [r3, r2]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2241      	movs	r2, #65	; 0x41
 8007e66:	2101      	movs	r1, #1
 8007e68:	5499      	strb	r1, [r3, r2]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2242      	movs	r2, #66	; 0x42
 8007e6e:	2101      	movs	r1, #1
 8007e70:	5499      	strb	r1, [r3, r2]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2243      	movs	r2, #67	; 0x43
 8007e76:	2101      	movs	r1, #1
 8007e78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2244      	movs	r2, #68	; 0x44
 8007e7e:	2101      	movs	r1, #1
 8007e80:	5499      	strb	r1, [r3, r2]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2245      	movs	r2, #69	; 0x45
 8007e86:	2101      	movs	r1, #1
 8007e88:	5499      	strb	r1, [r3, r2]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2246      	movs	r2, #70	; 0x46
 8007e8e:	2101      	movs	r1, #1
 8007e90:	5499      	strb	r1, [r3, r2]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2247      	movs	r2, #71	; 0x47
 8007e96:	2101      	movs	r1, #1
 8007e98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	223d      	movs	r2, #61	; 0x3d
 8007e9e:	2101      	movs	r1, #1
 8007ea0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	0018      	movs	r0, r3
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	b002      	add	sp, #8
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e04a      	b.n	8007f54 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	223d      	movs	r2, #61	; 0x3d
 8007ec2:	5c9b      	ldrb	r3, [r3, r2]
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d107      	bne.n	8007eda <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	223c      	movs	r2, #60	; 0x3c
 8007ece:	2100      	movs	r1, #0
 8007ed0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	f000 f841 	bl	8007f5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	223d      	movs	r2, #61	; 0x3d
 8007ede:	2102      	movs	r1, #2
 8007ee0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	3304      	adds	r3, #4
 8007eea:	0019      	movs	r1, r3
 8007eec:	0010      	movs	r0, r2
 8007eee:	f000 fae9 	bl	80084c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2248      	movs	r2, #72	; 0x48
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	223e      	movs	r2, #62	; 0x3e
 8007efe:	2101      	movs	r1, #1
 8007f00:	5499      	strb	r1, [r3, r2]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	223f      	movs	r2, #63	; 0x3f
 8007f06:	2101      	movs	r1, #1
 8007f08:	5499      	strb	r1, [r3, r2]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2240      	movs	r2, #64	; 0x40
 8007f0e:	2101      	movs	r1, #1
 8007f10:	5499      	strb	r1, [r3, r2]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2241      	movs	r2, #65	; 0x41
 8007f16:	2101      	movs	r1, #1
 8007f18:	5499      	strb	r1, [r3, r2]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2242      	movs	r2, #66	; 0x42
 8007f1e:	2101      	movs	r1, #1
 8007f20:	5499      	strb	r1, [r3, r2]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2243      	movs	r2, #67	; 0x43
 8007f26:	2101      	movs	r1, #1
 8007f28:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2244      	movs	r2, #68	; 0x44
 8007f2e:	2101      	movs	r1, #1
 8007f30:	5499      	strb	r1, [r3, r2]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2245      	movs	r2, #69	; 0x45
 8007f36:	2101      	movs	r1, #1
 8007f38:	5499      	strb	r1, [r3, r2]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2246      	movs	r2, #70	; 0x46
 8007f3e:	2101      	movs	r1, #1
 8007f40:	5499      	strb	r1, [r3, r2]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2247      	movs	r2, #71	; 0x47
 8007f46:	2101      	movs	r1, #1
 8007f48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	223d      	movs	r2, #61	; 0x3d
 8007f4e:	2101      	movs	r1, #1
 8007f50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	0018      	movs	r0, r3
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b002      	add	sp, #8
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f64:	46c0      	nop			; (mov r8, r8)
 8007f66:	46bd      	mov	sp, r7
 8007f68:	b002      	add	sp, #8
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d108      	bne.n	8007f8e <HAL_TIM_PWM_Start+0x22>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	223e      	movs	r2, #62	; 0x3e
 8007f80:	5c9b      	ldrb	r3, [r3, r2]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	3b01      	subs	r3, #1
 8007f86:	1e5a      	subs	r2, r3, #1
 8007f88:	4193      	sbcs	r3, r2
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	e037      	b.n	8007ffe <HAL_TIM_PWM_Start+0x92>
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b04      	cmp	r3, #4
 8007f92:	d108      	bne.n	8007fa6 <HAL_TIM_PWM_Start+0x3a>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	223f      	movs	r2, #63	; 0x3f
 8007f98:	5c9b      	ldrb	r3, [r3, r2]
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	1e5a      	subs	r2, r3, #1
 8007fa0:	4193      	sbcs	r3, r2
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	e02b      	b.n	8007ffe <HAL_TIM_PWM_Start+0x92>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d108      	bne.n	8007fbe <HAL_TIM_PWM_Start+0x52>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2240      	movs	r2, #64	; 0x40
 8007fb0:	5c9b      	ldrb	r3, [r3, r2]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	1e5a      	subs	r2, r3, #1
 8007fb8:	4193      	sbcs	r3, r2
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	e01f      	b.n	8007ffe <HAL_TIM_PWM_Start+0x92>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b0c      	cmp	r3, #12
 8007fc2:	d108      	bne.n	8007fd6 <HAL_TIM_PWM_Start+0x6a>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2241      	movs	r2, #65	; 0x41
 8007fc8:	5c9b      	ldrb	r3, [r3, r2]
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	1e5a      	subs	r2, r3, #1
 8007fd0:	4193      	sbcs	r3, r2
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	e013      	b.n	8007ffe <HAL_TIM_PWM_Start+0x92>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b10      	cmp	r3, #16
 8007fda:	d108      	bne.n	8007fee <HAL_TIM_PWM_Start+0x82>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2242      	movs	r2, #66	; 0x42
 8007fe0:	5c9b      	ldrb	r3, [r3, r2]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	1e5a      	subs	r2, r3, #1
 8007fe8:	4193      	sbcs	r3, r2
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	e007      	b.n	8007ffe <HAL_TIM_PWM_Start+0x92>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2243      	movs	r2, #67	; 0x43
 8007ff2:	5c9b      	ldrb	r3, [r3, r2]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	1e5a      	subs	r2, r3, #1
 8007ffa:	4193      	sbcs	r3, r2
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e08b      	b.n	800811e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d104      	bne.n	8008016 <HAL_TIM_PWM_Start+0xaa>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	223e      	movs	r2, #62	; 0x3e
 8008010:	2102      	movs	r1, #2
 8008012:	5499      	strb	r1, [r3, r2]
 8008014:	e023      	b.n	800805e <HAL_TIM_PWM_Start+0xf2>
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b04      	cmp	r3, #4
 800801a:	d104      	bne.n	8008026 <HAL_TIM_PWM_Start+0xba>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	223f      	movs	r2, #63	; 0x3f
 8008020:	2102      	movs	r1, #2
 8008022:	5499      	strb	r1, [r3, r2]
 8008024:	e01b      	b.n	800805e <HAL_TIM_PWM_Start+0xf2>
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b08      	cmp	r3, #8
 800802a:	d104      	bne.n	8008036 <HAL_TIM_PWM_Start+0xca>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2240      	movs	r2, #64	; 0x40
 8008030:	2102      	movs	r1, #2
 8008032:	5499      	strb	r1, [r3, r2]
 8008034:	e013      	b.n	800805e <HAL_TIM_PWM_Start+0xf2>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b0c      	cmp	r3, #12
 800803a:	d104      	bne.n	8008046 <HAL_TIM_PWM_Start+0xda>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2241      	movs	r2, #65	; 0x41
 8008040:	2102      	movs	r1, #2
 8008042:	5499      	strb	r1, [r3, r2]
 8008044:	e00b      	b.n	800805e <HAL_TIM_PWM_Start+0xf2>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b10      	cmp	r3, #16
 800804a:	d104      	bne.n	8008056 <HAL_TIM_PWM_Start+0xea>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2242      	movs	r2, #66	; 0x42
 8008050:	2102      	movs	r1, #2
 8008052:	5499      	strb	r1, [r3, r2]
 8008054:	e003      	b.n	800805e <HAL_TIM_PWM_Start+0xf2>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2243      	movs	r2, #67	; 0x43
 800805a:	2102      	movs	r1, #2
 800805c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	2201      	movs	r2, #1
 8008066:	0018      	movs	r0, r3
 8008068:	f000 fe0c 	bl	8008c84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a2d      	ldr	r2, [pc, #180]	; (8008128 <HAL_TIM_PWM_Start+0x1bc>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d00e      	beq.n	8008094 <HAL_TIM_PWM_Start+0x128>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a2c      	ldr	r2, [pc, #176]	; (800812c <HAL_TIM_PWM_Start+0x1c0>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d009      	beq.n	8008094 <HAL_TIM_PWM_Start+0x128>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a2a      	ldr	r2, [pc, #168]	; (8008130 <HAL_TIM_PWM_Start+0x1c4>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d004      	beq.n	8008094 <HAL_TIM_PWM_Start+0x128>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a29      	ldr	r2, [pc, #164]	; (8008134 <HAL_TIM_PWM_Start+0x1c8>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d101      	bne.n	8008098 <HAL_TIM_PWM_Start+0x12c>
 8008094:	2301      	movs	r3, #1
 8008096:	e000      	b.n	800809a <HAL_TIM_PWM_Start+0x12e>
 8008098:	2300      	movs	r3, #0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d008      	beq.n	80080b0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2180      	movs	r1, #128	; 0x80
 80080aa:	0209      	lsls	r1, r1, #8
 80080ac:	430a      	orrs	r2, r1
 80080ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a1c      	ldr	r2, [pc, #112]	; (8008128 <HAL_TIM_PWM_Start+0x1bc>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00f      	beq.n	80080da <HAL_TIM_PWM_Start+0x16e>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	2380      	movs	r3, #128	; 0x80
 80080c0:	05db      	lsls	r3, r3, #23
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d009      	beq.n	80080da <HAL_TIM_PWM_Start+0x16e>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a1b      	ldr	r2, [pc, #108]	; (8008138 <HAL_TIM_PWM_Start+0x1cc>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d004      	beq.n	80080da <HAL_TIM_PWM_Start+0x16e>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a15      	ldr	r2, [pc, #84]	; (800812c <HAL_TIM_PWM_Start+0x1c0>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d116      	bne.n	8008108 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	4a16      	ldr	r2, [pc, #88]	; (800813c <HAL_TIM_PWM_Start+0x1d0>)
 80080e2:	4013      	ands	r3, r2
 80080e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b06      	cmp	r3, #6
 80080ea:	d016      	beq.n	800811a <HAL_TIM_PWM_Start+0x1ae>
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	2380      	movs	r3, #128	; 0x80
 80080f0:	025b      	lsls	r3, r3, #9
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d011      	beq.n	800811a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2101      	movs	r1, #1
 8008102:	430a      	orrs	r2, r1
 8008104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008106:	e008      	b.n	800811a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2101      	movs	r1, #1
 8008114:	430a      	orrs	r2, r1
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	e000      	b.n	800811c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800811a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	0018      	movs	r0, r3
 8008120:	46bd      	mov	sp, r7
 8008122:	b004      	add	sp, #16
 8008124:	bd80      	pop	{r7, pc}
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	40012c00 	.word	0x40012c00
 800812c:	40014000 	.word	0x40014000
 8008130:	40014400 	.word	0x40014400
 8008134:	40014800 	.word	0x40014800
 8008138:	40000400 	.word	0x40000400
 800813c:	00010007 	.word	0x00010007

08008140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	223c      	movs	r2, #60	; 0x3c
 8008150:	5c9b      	ldrb	r3, [r3, r2]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d101      	bne.n	800815a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008156:	2302      	movs	r3, #2
 8008158:	e0df      	b.n	800831a <HAL_TIM_PWM_ConfigChannel+0x1da>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	223c      	movs	r2, #60	; 0x3c
 800815e:	2101      	movs	r1, #1
 8008160:	5499      	strb	r1, [r3, r2]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b14      	cmp	r3, #20
 8008166:	d900      	bls.n	800816a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8008168:	e0d1      	b.n	800830e <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	009a      	lsls	r2, r3, #2
 800816e:	4b6d      	ldr	r3, [pc, #436]	; (8008324 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8008170:	18d3      	adds	r3, r2, r3
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	0011      	movs	r1, r2
 800817e:	0018      	movs	r0, r3
 8008180:	f000 fa20 	bl	80085c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699a      	ldr	r2, [r3, #24]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2108      	movs	r1, #8
 8008190:	430a      	orrs	r2, r1
 8008192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	699a      	ldr	r2, [r3, #24]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2104      	movs	r1, #4
 80081a0:	438a      	bics	r2, r1
 80081a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6999      	ldr	r1, [r3, #24]
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	691a      	ldr	r2, [r3, #16]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	619a      	str	r2, [r3, #24]
      break;
 80081b6:	e0ab      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	0011      	movs	r1, r2
 80081c0:	0018      	movs	r0, r3
 80081c2:	f000 fa89 	bl	80086d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	699a      	ldr	r2, [r3, #24]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2180      	movs	r1, #128	; 0x80
 80081d2:	0109      	lsls	r1, r1, #4
 80081d4:	430a      	orrs	r2, r1
 80081d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4951      	ldr	r1, [pc, #324]	; (8008328 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80081e4:	400a      	ands	r2, r1
 80081e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6999      	ldr	r1, [r3, #24]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	021a      	lsls	r2, r3, #8
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	430a      	orrs	r2, r1
 80081fa:	619a      	str	r2, [r3, #24]
      break;
 80081fc:	e088      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	0011      	movs	r1, r2
 8008206:	0018      	movs	r0, r3
 8008208:	f000 faea 	bl	80087e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	69da      	ldr	r2, [r3, #28]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2108      	movs	r1, #8
 8008218:	430a      	orrs	r2, r1
 800821a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	69da      	ldr	r2, [r3, #28]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2104      	movs	r1, #4
 8008228:	438a      	bics	r2, r1
 800822a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	69d9      	ldr	r1, [r3, #28]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	691a      	ldr	r2, [r3, #16]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	61da      	str	r2, [r3, #28]
      break;
 800823e:	e067      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	0011      	movs	r1, r2
 8008248:	0018      	movs	r0, r3
 800824a:	f000 fb51 	bl	80088f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69da      	ldr	r2, [r3, #28]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2180      	movs	r1, #128	; 0x80
 800825a:	0109      	lsls	r1, r1, #4
 800825c:	430a      	orrs	r2, r1
 800825e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	69da      	ldr	r2, [r3, #28]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	492f      	ldr	r1, [pc, #188]	; (8008328 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800826c:	400a      	ands	r2, r1
 800826e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	69d9      	ldr	r1, [r3, #28]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	021a      	lsls	r2, r3, #8
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	430a      	orrs	r2, r1
 8008282:	61da      	str	r2, [r3, #28]
      break;
 8008284:	e044      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	0011      	movs	r1, r2
 800828e:	0018      	movs	r0, r3
 8008290:	f000 fb98 	bl	80089c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2108      	movs	r1, #8
 80082a0:	430a      	orrs	r2, r1
 80082a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2104      	movs	r1, #4
 80082b0:	438a      	bics	r2, r1
 80082b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80082c6:	e023      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	0011      	movs	r1, r2
 80082d0:	0018      	movs	r0, r3
 80082d2:	f000 fbd7 	bl	8008a84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2180      	movs	r1, #128	; 0x80
 80082e2:	0109      	lsls	r1, r1, #4
 80082e4:	430a      	orrs	r2, r1
 80082e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	490d      	ldr	r1, [pc, #52]	; (8008328 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80082f4:	400a      	ands	r2, r1
 80082f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	021a      	lsls	r2, r3, #8
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	430a      	orrs	r2, r1
 800830a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800830c:	e000      	b.n	8008310 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800830e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	223c      	movs	r2, #60	; 0x3c
 8008314:	2100      	movs	r1, #0
 8008316:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	0018      	movs	r0, r3
 800831c:	46bd      	mov	sp, r7
 800831e:	b004      	add	sp, #16
 8008320:	bd80      	pop	{r7, pc}
 8008322:	46c0      	nop			; (mov r8, r8)
 8008324:	0800a798 	.word	0x0800a798
 8008328:	fffffbff 	.word	0xfffffbff

0800832c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	223c      	movs	r2, #60	; 0x3c
 800833a:	5c9b      	ldrb	r3, [r3, r2]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d101      	bne.n	8008344 <HAL_TIM_ConfigClockSource+0x18>
 8008340:	2302      	movs	r3, #2
 8008342:	e0b7      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x188>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	223c      	movs	r2, #60	; 0x3c
 8008348:	2101      	movs	r1, #1
 800834a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	223d      	movs	r2, #61	; 0x3d
 8008350:	2102      	movs	r1, #2
 8008352:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4a57      	ldr	r2, [pc, #348]	; (80084bc <HAL_TIM_ConfigClockSource+0x190>)
 8008360:	4013      	ands	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4a56      	ldr	r2, [pc, #344]	; (80084c0 <HAL_TIM_ConfigClockSource+0x194>)
 8008368:	4013      	ands	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2280      	movs	r2, #128	; 0x80
 800837a:	0192      	lsls	r2, r2, #6
 800837c:	4293      	cmp	r3, r2
 800837e:	d040      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0xd6>
 8008380:	2280      	movs	r2, #128	; 0x80
 8008382:	0192      	lsls	r2, r2, #6
 8008384:	4293      	cmp	r3, r2
 8008386:	d900      	bls.n	800838a <HAL_TIM_ConfigClockSource+0x5e>
 8008388:	e088      	b.n	800849c <HAL_TIM_ConfigClockSource+0x170>
 800838a:	2280      	movs	r2, #128	; 0x80
 800838c:	0152      	lsls	r2, r2, #5
 800838e:	4293      	cmp	r3, r2
 8008390:	d100      	bne.n	8008394 <HAL_TIM_ConfigClockSource+0x68>
 8008392:	e085      	b.n	80084a0 <HAL_TIM_ConfigClockSource+0x174>
 8008394:	2280      	movs	r2, #128	; 0x80
 8008396:	0152      	lsls	r2, r2, #5
 8008398:	4293      	cmp	r3, r2
 800839a:	d900      	bls.n	800839e <HAL_TIM_ConfigClockSource+0x72>
 800839c:	e07e      	b.n	800849c <HAL_TIM_ConfigClockSource+0x170>
 800839e:	2b70      	cmp	r3, #112	; 0x70
 80083a0:	d018      	beq.n	80083d4 <HAL_TIM_ConfigClockSource+0xa8>
 80083a2:	d900      	bls.n	80083a6 <HAL_TIM_ConfigClockSource+0x7a>
 80083a4:	e07a      	b.n	800849c <HAL_TIM_ConfigClockSource+0x170>
 80083a6:	2b60      	cmp	r3, #96	; 0x60
 80083a8:	d04f      	beq.n	800844a <HAL_TIM_ConfigClockSource+0x11e>
 80083aa:	d900      	bls.n	80083ae <HAL_TIM_ConfigClockSource+0x82>
 80083ac:	e076      	b.n	800849c <HAL_TIM_ConfigClockSource+0x170>
 80083ae:	2b50      	cmp	r3, #80	; 0x50
 80083b0:	d03b      	beq.n	800842a <HAL_TIM_ConfigClockSource+0xfe>
 80083b2:	d900      	bls.n	80083b6 <HAL_TIM_ConfigClockSource+0x8a>
 80083b4:	e072      	b.n	800849c <HAL_TIM_ConfigClockSource+0x170>
 80083b6:	2b40      	cmp	r3, #64	; 0x40
 80083b8:	d057      	beq.n	800846a <HAL_TIM_ConfigClockSource+0x13e>
 80083ba:	d900      	bls.n	80083be <HAL_TIM_ConfigClockSource+0x92>
 80083bc:	e06e      	b.n	800849c <HAL_TIM_ConfigClockSource+0x170>
 80083be:	2b30      	cmp	r3, #48	; 0x30
 80083c0:	d063      	beq.n	800848a <HAL_TIM_ConfigClockSource+0x15e>
 80083c2:	d86b      	bhi.n	800849c <HAL_TIM_ConfigClockSource+0x170>
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	d060      	beq.n	800848a <HAL_TIM_ConfigClockSource+0x15e>
 80083c8:	d868      	bhi.n	800849c <HAL_TIM_ConfigClockSource+0x170>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d05d      	beq.n	800848a <HAL_TIM_ConfigClockSource+0x15e>
 80083ce:	2b10      	cmp	r3, #16
 80083d0:	d05b      	beq.n	800848a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80083d2:	e063      	b.n	800849c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	6899      	ldr	r1, [r3, #8]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	f000 fc2e 	bl	8008c44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2277      	movs	r2, #119	; 0x77
 80083f4:	4313      	orrs	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	609a      	str	r2, [r3, #8]
      break;
 8008400:	e04f      	b.n	80084a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6818      	ldr	r0, [r3, #0]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	6899      	ldr	r1, [r3, #8]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	f000 fc17 	bl	8008c44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2180      	movs	r1, #128	; 0x80
 8008422:	01c9      	lsls	r1, r1, #7
 8008424:	430a      	orrs	r2, r1
 8008426:	609a      	str	r2, [r3, #8]
      break;
 8008428:	e03b      	b.n	80084a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	6859      	ldr	r1, [r3, #4]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	001a      	movs	r2, r3
 8008438:	f000 fb88 	bl	8008b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2150      	movs	r1, #80	; 0x50
 8008442:	0018      	movs	r0, r3
 8008444:	f000 fbe2 	bl	8008c0c <TIM_ITRx_SetConfig>
      break;
 8008448:	e02b      	b.n	80084a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6818      	ldr	r0, [r3, #0]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	6859      	ldr	r1, [r3, #4]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	001a      	movs	r2, r3
 8008458:	f000 fba6 	bl	8008ba8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2160      	movs	r1, #96	; 0x60
 8008462:	0018      	movs	r0, r3
 8008464:	f000 fbd2 	bl	8008c0c <TIM_ITRx_SetConfig>
      break;
 8008468:	e01b      	b.n	80084a2 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	6859      	ldr	r1, [r3, #4]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	001a      	movs	r2, r3
 8008478:	f000 fb68 	bl	8008b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2140      	movs	r1, #64	; 0x40
 8008482:	0018      	movs	r0, r3
 8008484:	f000 fbc2 	bl	8008c0c <TIM_ITRx_SetConfig>
      break;
 8008488:	e00b      	b.n	80084a2 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	0019      	movs	r1, r3
 8008494:	0010      	movs	r0, r2
 8008496:	f000 fbb9 	bl	8008c0c <TIM_ITRx_SetConfig>
        break;
 800849a:	e002      	b.n	80084a2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800849c:	46c0      	nop			; (mov r8, r8)
 800849e:	e000      	b.n	80084a2 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80084a0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	223d      	movs	r2, #61	; 0x3d
 80084a6:	2101      	movs	r1, #1
 80084a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	223c      	movs	r2, #60	; 0x3c
 80084ae:	2100      	movs	r1, #0
 80084b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	0018      	movs	r0, r3
 80084b6:	46bd      	mov	sp, r7
 80084b8:	b004      	add	sp, #16
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	ffceff88 	.word	0xffceff88
 80084c0:	ffff00ff 	.word	0xffff00ff

080084c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a34      	ldr	r2, [pc, #208]	; (80085a8 <TIM_Base_SetConfig+0xe4>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d008      	beq.n	80084ee <TIM_Base_SetConfig+0x2a>
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	2380      	movs	r3, #128	; 0x80
 80084e0:	05db      	lsls	r3, r3, #23
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d003      	beq.n	80084ee <TIM_Base_SetConfig+0x2a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a30      	ldr	r2, [pc, #192]	; (80085ac <TIM_Base_SetConfig+0xe8>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d108      	bne.n	8008500 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2270      	movs	r2, #112	; 0x70
 80084f2:	4393      	bics	r3, r2
 80084f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a29      	ldr	r2, [pc, #164]	; (80085a8 <TIM_Base_SetConfig+0xe4>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d018      	beq.n	800853a <TIM_Base_SetConfig+0x76>
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	2380      	movs	r3, #128	; 0x80
 800850c:	05db      	lsls	r3, r3, #23
 800850e:	429a      	cmp	r2, r3
 8008510:	d013      	beq.n	800853a <TIM_Base_SetConfig+0x76>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a25      	ldr	r2, [pc, #148]	; (80085ac <TIM_Base_SetConfig+0xe8>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00f      	beq.n	800853a <TIM_Base_SetConfig+0x76>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a24      	ldr	r2, [pc, #144]	; (80085b0 <TIM_Base_SetConfig+0xec>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00b      	beq.n	800853a <TIM_Base_SetConfig+0x76>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a23      	ldr	r2, [pc, #140]	; (80085b4 <TIM_Base_SetConfig+0xf0>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d007      	beq.n	800853a <TIM_Base_SetConfig+0x76>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a22      	ldr	r2, [pc, #136]	; (80085b8 <TIM_Base_SetConfig+0xf4>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d003      	beq.n	800853a <TIM_Base_SetConfig+0x76>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a21      	ldr	r2, [pc, #132]	; (80085bc <TIM_Base_SetConfig+0xf8>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d108      	bne.n	800854c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	4a20      	ldr	r2, [pc, #128]	; (80085c0 <TIM_Base_SetConfig+0xfc>)
 800853e:	4013      	ands	r3, r2
 8008540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	4313      	orrs	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2280      	movs	r2, #128	; 0x80
 8008550:	4393      	bics	r3, r2
 8008552:	001a      	movs	r2, r3
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	695b      	ldr	r3, [r3, #20]
 8008558:	4313      	orrs	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	689a      	ldr	r2, [r3, #8]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a0c      	ldr	r2, [pc, #48]	; (80085a8 <TIM_Base_SetConfig+0xe4>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00b      	beq.n	8008592 <TIM_Base_SetConfig+0xce>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a0d      	ldr	r2, [pc, #52]	; (80085b4 <TIM_Base_SetConfig+0xf0>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d007      	beq.n	8008592 <TIM_Base_SetConfig+0xce>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a0c      	ldr	r2, [pc, #48]	; (80085b8 <TIM_Base_SetConfig+0xf4>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d003      	beq.n	8008592 <TIM_Base_SetConfig+0xce>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a0b      	ldr	r2, [pc, #44]	; (80085bc <TIM_Base_SetConfig+0xf8>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d103      	bne.n	800859a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	691a      	ldr	r2, [r3, #16]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	615a      	str	r2, [r3, #20]
}
 80085a0:	46c0      	nop			; (mov r8, r8)
 80085a2:	46bd      	mov	sp, r7
 80085a4:	b004      	add	sp, #16
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	40012c00 	.word	0x40012c00
 80085ac:	40000400 	.word	0x40000400
 80085b0:	40002000 	.word	0x40002000
 80085b4:	40014000 	.word	0x40014000
 80085b8:	40014400 	.word	0x40014400
 80085bc:	40014800 	.word	0x40014800
 80085c0:	fffffcff 	.word	0xfffffcff

080085c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	2201      	movs	r2, #1
 80085d4:	4393      	bics	r3, r2
 80085d6:	001a      	movs	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a1b      	ldr	r3, [r3, #32]
 80085e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	4a32      	ldr	r2, [pc, #200]	; (80086bc <TIM_OC1_SetConfig+0xf8>)
 80085f2:	4013      	ands	r3, r2
 80085f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2203      	movs	r2, #3
 80085fa:	4393      	bics	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	4313      	orrs	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	2202      	movs	r2, #2
 800860c:	4393      	bics	r3, r2
 800860e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	4313      	orrs	r3, r2
 8008618:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a28      	ldr	r2, [pc, #160]	; (80086c0 <TIM_OC1_SetConfig+0xfc>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d00b      	beq.n	800863a <TIM_OC1_SetConfig+0x76>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a27      	ldr	r2, [pc, #156]	; (80086c4 <TIM_OC1_SetConfig+0x100>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d007      	beq.n	800863a <TIM_OC1_SetConfig+0x76>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a26      	ldr	r2, [pc, #152]	; (80086c8 <TIM_OC1_SetConfig+0x104>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d003      	beq.n	800863a <TIM_OC1_SetConfig+0x76>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a25      	ldr	r2, [pc, #148]	; (80086cc <TIM_OC1_SetConfig+0x108>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d10c      	bne.n	8008654 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2208      	movs	r2, #8
 800863e:	4393      	bics	r3, r2
 8008640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	2204      	movs	r2, #4
 8008650:	4393      	bics	r3, r2
 8008652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a1a      	ldr	r2, [pc, #104]	; (80086c0 <TIM_OC1_SetConfig+0xfc>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00b      	beq.n	8008674 <TIM_OC1_SetConfig+0xb0>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a19      	ldr	r2, [pc, #100]	; (80086c4 <TIM_OC1_SetConfig+0x100>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d007      	beq.n	8008674 <TIM_OC1_SetConfig+0xb0>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a18      	ldr	r2, [pc, #96]	; (80086c8 <TIM_OC1_SetConfig+0x104>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d003      	beq.n	8008674 <TIM_OC1_SetConfig+0xb0>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a17      	ldr	r2, [pc, #92]	; (80086cc <TIM_OC1_SetConfig+0x108>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d111      	bne.n	8008698 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	4a16      	ldr	r2, [pc, #88]	; (80086d0 <TIM_OC1_SetConfig+0x10c>)
 8008678:	4013      	ands	r3, r2
 800867a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	4a15      	ldr	r2, [pc, #84]	; (80086d4 <TIM_OC1_SetConfig+0x110>)
 8008680:	4013      	ands	r3, r2
 8008682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	4313      	orrs	r3, r2
 800868c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	4313      	orrs	r3, r2
 8008696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	621a      	str	r2, [r3, #32]
}
 80086b2:	46c0      	nop			; (mov r8, r8)
 80086b4:	46bd      	mov	sp, r7
 80086b6:	b006      	add	sp, #24
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	46c0      	nop			; (mov r8, r8)
 80086bc:	fffeff8f 	.word	0xfffeff8f
 80086c0:	40012c00 	.word	0x40012c00
 80086c4:	40014000 	.word	0x40014000
 80086c8:	40014400 	.word	0x40014400
 80086cc:	40014800 	.word	0x40014800
 80086d0:	fffffeff 	.word	0xfffffeff
 80086d4:	fffffdff 	.word	0xfffffdff

080086d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	2210      	movs	r2, #16
 80086e8:	4393      	bics	r3, r2
 80086ea:	001a      	movs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
 80086f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	4a2e      	ldr	r2, [pc, #184]	; (80087c0 <TIM_OC2_SetConfig+0xe8>)
 8008706:	4013      	ands	r3, r2
 8008708:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	4a2d      	ldr	r2, [pc, #180]	; (80087c4 <TIM_OC2_SetConfig+0xec>)
 800870e:	4013      	ands	r3, r2
 8008710:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	021b      	lsls	r3, r3, #8
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	4313      	orrs	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2220      	movs	r2, #32
 8008722:	4393      	bics	r3, r2
 8008724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	011b      	lsls	r3, r3, #4
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	4313      	orrs	r3, r2
 8008730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a24      	ldr	r2, [pc, #144]	; (80087c8 <TIM_OC2_SetConfig+0xf0>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d10d      	bne.n	8008756 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2280      	movs	r2, #128	; 0x80
 800873e:	4393      	bics	r3, r2
 8008740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	4313      	orrs	r3, r2
 800874c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2240      	movs	r2, #64	; 0x40
 8008752:	4393      	bics	r3, r2
 8008754:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a1b      	ldr	r2, [pc, #108]	; (80087c8 <TIM_OC2_SetConfig+0xf0>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d00b      	beq.n	8008776 <TIM_OC2_SetConfig+0x9e>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a1a      	ldr	r2, [pc, #104]	; (80087cc <TIM_OC2_SetConfig+0xf4>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d007      	beq.n	8008776 <TIM_OC2_SetConfig+0x9e>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a19      	ldr	r2, [pc, #100]	; (80087d0 <TIM_OC2_SetConfig+0xf8>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d003      	beq.n	8008776 <TIM_OC2_SetConfig+0x9e>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a18      	ldr	r2, [pc, #96]	; (80087d4 <TIM_OC2_SetConfig+0xfc>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d113      	bne.n	800879e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	4a17      	ldr	r2, [pc, #92]	; (80087d8 <TIM_OC2_SetConfig+0x100>)
 800877a:	4013      	ands	r3, r2
 800877c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	4a16      	ldr	r2, [pc, #88]	; (80087dc <TIM_OC2_SetConfig+0x104>)
 8008782:	4013      	ands	r3, r2
 8008784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	4313      	orrs	r3, r2
 8008790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	4313      	orrs	r3, r2
 800879c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	693a      	ldr	r2, [r7, #16]
 80087a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	685a      	ldr	r2, [r3, #4]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	621a      	str	r2, [r3, #32]
}
 80087b8:	46c0      	nop			; (mov r8, r8)
 80087ba:	46bd      	mov	sp, r7
 80087bc:	b006      	add	sp, #24
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	feff8fff 	.word	0xfeff8fff
 80087c4:	fffffcff 	.word	0xfffffcff
 80087c8:	40012c00 	.word	0x40012c00
 80087cc:	40014000 	.word	0x40014000
 80087d0:	40014400 	.word	0x40014400
 80087d4:	40014800 	.word	0x40014800
 80087d8:	fffffbff 	.word	0xfffffbff
 80087dc:	fffff7ff 	.word	0xfffff7ff

080087e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	4a35      	ldr	r2, [pc, #212]	; (80088c4 <TIM_OC3_SetConfig+0xe4>)
 80087f0:	401a      	ands	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4a2f      	ldr	r2, [pc, #188]	; (80088c8 <TIM_OC3_SetConfig+0xe8>)
 800880c:	4013      	ands	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2203      	movs	r2, #3
 8008814:	4393      	bics	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	4a29      	ldr	r2, [pc, #164]	; (80088cc <TIM_OC3_SetConfig+0xec>)
 8008826:	4013      	ands	r3, r2
 8008828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	021b      	lsls	r3, r3, #8
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	4313      	orrs	r3, r2
 8008834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a25      	ldr	r2, [pc, #148]	; (80088d0 <TIM_OC3_SetConfig+0xf0>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d10d      	bne.n	800885a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	4a24      	ldr	r2, [pc, #144]	; (80088d4 <TIM_OC3_SetConfig+0xf4>)
 8008842:	4013      	ands	r3, r2
 8008844:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	021b      	lsls	r3, r3, #8
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	4313      	orrs	r3, r2
 8008850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	4a20      	ldr	r2, [pc, #128]	; (80088d8 <TIM_OC3_SetConfig+0xf8>)
 8008856:	4013      	ands	r3, r2
 8008858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a1c      	ldr	r2, [pc, #112]	; (80088d0 <TIM_OC3_SetConfig+0xf0>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d00b      	beq.n	800887a <TIM_OC3_SetConfig+0x9a>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a1d      	ldr	r2, [pc, #116]	; (80088dc <TIM_OC3_SetConfig+0xfc>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d007      	beq.n	800887a <TIM_OC3_SetConfig+0x9a>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a1c      	ldr	r2, [pc, #112]	; (80088e0 <TIM_OC3_SetConfig+0x100>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d003      	beq.n	800887a <TIM_OC3_SetConfig+0x9a>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a1b      	ldr	r2, [pc, #108]	; (80088e4 <TIM_OC3_SetConfig+0x104>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d113      	bne.n	80088a2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	4a1a      	ldr	r2, [pc, #104]	; (80088e8 <TIM_OC3_SetConfig+0x108>)
 800887e:	4013      	ands	r3, r2
 8008880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	4a19      	ldr	r2, [pc, #100]	; (80088ec <TIM_OC3_SetConfig+0x10c>)
 8008886:	4013      	ands	r3, r2
 8008888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	4313      	orrs	r3, r2
 8008894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	011b      	lsls	r3, r3, #4
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	4313      	orrs	r3, r2
 80088a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	621a      	str	r2, [r3, #32]
}
 80088bc:	46c0      	nop			; (mov r8, r8)
 80088be:	46bd      	mov	sp, r7
 80088c0:	b006      	add	sp, #24
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	fffffeff 	.word	0xfffffeff
 80088c8:	fffeff8f 	.word	0xfffeff8f
 80088cc:	fffffdff 	.word	0xfffffdff
 80088d0:	40012c00 	.word	0x40012c00
 80088d4:	fffff7ff 	.word	0xfffff7ff
 80088d8:	fffffbff 	.word	0xfffffbff
 80088dc:	40014000 	.word	0x40014000
 80088e0:	40014400 	.word	0x40014400
 80088e4:	40014800 	.word	0x40014800
 80088e8:	ffffefff 	.word	0xffffefff
 80088ec:	ffffdfff 	.word	0xffffdfff

080088f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	4a28      	ldr	r2, [pc, #160]	; (80089a0 <TIM_OC4_SetConfig+0xb0>)
 8008900:	401a      	ands	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4a22      	ldr	r2, [pc, #136]	; (80089a4 <TIM_OC4_SetConfig+0xb4>)
 800891c:	4013      	ands	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4a21      	ldr	r2, [pc, #132]	; (80089a8 <TIM_OC4_SetConfig+0xb8>)
 8008924:	4013      	ands	r3, r2
 8008926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	021b      	lsls	r3, r3, #8
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	4313      	orrs	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	4a1d      	ldr	r2, [pc, #116]	; (80089ac <TIM_OC4_SetConfig+0xbc>)
 8008938:	4013      	ands	r3, r2
 800893a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	031b      	lsls	r3, r3, #12
 8008942:	693a      	ldr	r2, [r7, #16]
 8008944:	4313      	orrs	r3, r2
 8008946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a19      	ldr	r2, [pc, #100]	; (80089b0 <TIM_OC4_SetConfig+0xc0>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d00b      	beq.n	8008968 <TIM_OC4_SetConfig+0x78>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a18      	ldr	r2, [pc, #96]	; (80089b4 <TIM_OC4_SetConfig+0xc4>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d007      	beq.n	8008968 <TIM_OC4_SetConfig+0x78>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4a17      	ldr	r2, [pc, #92]	; (80089b8 <TIM_OC4_SetConfig+0xc8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d003      	beq.n	8008968 <TIM_OC4_SetConfig+0x78>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a16      	ldr	r2, [pc, #88]	; (80089bc <TIM_OC4_SetConfig+0xcc>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d109      	bne.n	800897c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	4a15      	ldr	r2, [pc, #84]	; (80089c0 <TIM_OC4_SetConfig+0xd0>)
 800896c:	4013      	ands	r3, r2
 800896e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	019b      	lsls	r3, r3, #6
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4313      	orrs	r3, r2
 800897a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	621a      	str	r2, [r3, #32]
}
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	46bd      	mov	sp, r7
 800899a:	b006      	add	sp, #24
 800899c:	bd80      	pop	{r7, pc}
 800899e:	46c0      	nop			; (mov r8, r8)
 80089a0:	ffffefff 	.word	0xffffefff
 80089a4:	feff8fff 	.word	0xfeff8fff
 80089a8:	fffffcff 	.word	0xfffffcff
 80089ac:	ffffdfff 	.word	0xffffdfff
 80089b0:	40012c00 	.word	0x40012c00
 80089b4:	40014000 	.word	0x40014000
 80089b8:	40014400 	.word	0x40014400
 80089bc:	40014800 	.word	0x40014800
 80089c0:	ffffbfff 	.word	0xffffbfff

080089c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	4a25      	ldr	r2, [pc, #148]	; (8008a68 <TIM_OC5_SetConfig+0xa4>)
 80089d4:	401a      	ands	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	4a1f      	ldr	r2, [pc, #124]	; (8008a6c <TIM_OC5_SetConfig+0xa8>)
 80089f0:	4013      	ands	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	4a1b      	ldr	r2, [pc, #108]	; (8008a70 <TIM_OC5_SetConfig+0xac>)
 8008a02:	4013      	ands	r3, r2
 8008a04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	041b      	lsls	r3, r3, #16
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4a17      	ldr	r2, [pc, #92]	; (8008a74 <TIM_OC5_SetConfig+0xb0>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d00b      	beq.n	8008a32 <TIM_OC5_SetConfig+0x6e>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a16      	ldr	r2, [pc, #88]	; (8008a78 <TIM_OC5_SetConfig+0xb4>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d007      	beq.n	8008a32 <TIM_OC5_SetConfig+0x6e>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a15      	ldr	r2, [pc, #84]	; (8008a7c <TIM_OC5_SetConfig+0xb8>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d003      	beq.n	8008a32 <TIM_OC5_SetConfig+0x6e>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a14      	ldr	r2, [pc, #80]	; (8008a80 <TIM_OC5_SetConfig+0xbc>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d109      	bne.n	8008a46 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	4a0c      	ldr	r2, [pc, #48]	; (8008a68 <TIM_OC5_SetConfig+0xa4>)
 8008a36:	4013      	ands	r3, r2
 8008a38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	021b      	lsls	r3, r3, #8
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68fa      	ldr	r2, [r7, #12]
 8008a50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	621a      	str	r2, [r3, #32]
}
 8008a60:	46c0      	nop			; (mov r8, r8)
 8008a62:	46bd      	mov	sp, r7
 8008a64:	b006      	add	sp, #24
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	fffeffff 	.word	0xfffeffff
 8008a6c:	fffeff8f 	.word	0xfffeff8f
 8008a70:	fffdffff 	.word	0xfffdffff
 8008a74:	40012c00 	.word	0x40012c00
 8008a78:	40014000 	.word	0x40014000
 8008a7c:	40014400 	.word	0x40014400
 8008a80:	40014800 	.word	0x40014800

08008a84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	4a26      	ldr	r2, [pc, #152]	; (8008b2c <TIM_OC6_SetConfig+0xa8>)
 8008a94:	401a      	ands	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4a20      	ldr	r2, [pc, #128]	; (8008b30 <TIM_OC6_SetConfig+0xac>)
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	021b      	lsls	r3, r3, #8
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	4a1c      	ldr	r2, [pc, #112]	; (8008b34 <TIM_OC6_SetConfig+0xb0>)
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	051b      	lsls	r3, r3, #20
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a18      	ldr	r2, [pc, #96]	; (8008b38 <TIM_OC6_SetConfig+0xb4>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d00b      	beq.n	8008af4 <TIM_OC6_SetConfig+0x70>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a17      	ldr	r2, [pc, #92]	; (8008b3c <TIM_OC6_SetConfig+0xb8>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d007      	beq.n	8008af4 <TIM_OC6_SetConfig+0x70>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a16      	ldr	r2, [pc, #88]	; (8008b40 <TIM_OC6_SetConfig+0xbc>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d003      	beq.n	8008af4 <TIM_OC6_SetConfig+0x70>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a15      	ldr	r2, [pc, #84]	; (8008b44 <TIM_OC6_SetConfig+0xc0>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d109      	bne.n	8008b08 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	4a14      	ldr	r2, [pc, #80]	; (8008b48 <TIM_OC6_SetConfig+0xc4>)
 8008af8:	4013      	ands	r3, r2
 8008afa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	029b      	lsls	r3, r3, #10
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	621a      	str	r2, [r3, #32]
}
 8008b22:	46c0      	nop			; (mov r8, r8)
 8008b24:	46bd      	mov	sp, r7
 8008b26:	b006      	add	sp, #24
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	46c0      	nop			; (mov r8, r8)
 8008b2c:	ffefffff 	.word	0xffefffff
 8008b30:	feff8fff 	.word	0xfeff8fff
 8008b34:	ffdfffff 	.word	0xffdfffff
 8008b38:	40012c00 	.word	0x40012c00
 8008b3c:	40014000 	.word	0x40014000
 8008b40:	40014400 	.word	0x40014400
 8008b44:	40014800 	.word	0x40014800
 8008b48:	fffbffff 	.word	0xfffbffff

08008b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6a1b      	ldr	r3, [r3, #32]
 8008b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	2201      	movs	r2, #1
 8008b64:	4393      	bics	r3, r2
 8008b66:	001a      	movs	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	22f0      	movs	r2, #240	; 0xf0
 8008b76:	4393      	bics	r3, r2
 8008b78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	011b      	lsls	r3, r3, #4
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	220a      	movs	r2, #10
 8008b88:	4393      	bics	r3, r2
 8008b8a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	621a      	str	r2, [r3, #32]
}
 8008ba0:	46c0      	nop			; (mov r8, r8)
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	b006      	add	sp, #24
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b086      	sub	sp, #24
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	2210      	movs	r2, #16
 8008bba:	4393      	bics	r3, r2
 8008bbc:	001a      	movs	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	4a0d      	ldr	r2, [pc, #52]	; (8008c08 <TIM_TI2_ConfigInputStage+0x60>)
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	031b      	lsls	r3, r3, #12
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	22a0      	movs	r2, #160	; 0xa0
 8008be4:	4393      	bics	r3, r2
 8008be6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	011b      	lsls	r3, r3, #4
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	697a      	ldr	r2, [r7, #20]
 8008bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	621a      	str	r2, [r3, #32]
}
 8008bfe:	46c0      	nop			; (mov r8, r8)
 8008c00:	46bd      	mov	sp, r7
 8008c02:	b006      	add	sp, #24
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	46c0      	nop			; (mov r8, r8)
 8008c08:	ffff0fff 	.word	0xffff0fff

08008c0c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4a08      	ldr	r2, [pc, #32]	; (8008c40 <TIM_ITRx_SetConfig+0x34>)
 8008c20:	4013      	ands	r3, r2
 8008c22:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	2207      	movs	r2, #7
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	609a      	str	r2, [r3, #8]
}
 8008c36:	46c0      	nop			; (mov r8, r8)
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	b004      	add	sp, #16
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	46c0      	nop			; (mov r8, r8)
 8008c40:	ffcfff8f 	.word	0xffcfff8f

08008c44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
 8008c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	4a09      	ldr	r2, [pc, #36]	; (8008c80 <TIM_ETR_SetConfig+0x3c>)
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	021a      	lsls	r2, r3, #8
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	431a      	orrs	r2, r3
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	697a      	ldr	r2, [r7, #20]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	609a      	str	r2, [r3, #8]
}
 8008c78:	46c0      	nop			; (mov r8, r8)
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	b006      	add	sp, #24
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	ffff00ff 	.word	0xffff00ff

08008c84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	221f      	movs	r2, #31
 8008c94:	4013      	ands	r3, r2
 8008c96:	2201      	movs	r2, #1
 8008c98:	409a      	lsls	r2, r3
 8008c9a:	0013      	movs	r3, r2
 8008c9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	43d2      	mvns	r2, r2
 8008ca6:	401a      	ands	r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6a1a      	ldr	r2, [r3, #32]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	211f      	movs	r1, #31
 8008cb4:	400b      	ands	r3, r1
 8008cb6:	6879      	ldr	r1, [r7, #4]
 8008cb8:	4099      	lsls	r1, r3
 8008cba:	000b      	movs	r3, r1
 8008cbc:	431a      	orrs	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	621a      	str	r2, [r3, #32]
}
 8008cc2:	46c0      	nop			; (mov r8, r8)
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	b006      	add	sp, #24
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	223c      	movs	r2, #60	; 0x3c
 8008cda:	5c9b      	ldrb	r3, [r3, r2]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d101      	bne.n	8008ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	e055      	b.n	8008d90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	223c      	movs	r2, #60	; 0x3c
 8008ce8:	2101      	movs	r1, #1
 8008cea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	223d      	movs	r2, #61	; 0x3d
 8008cf0:	2102      	movs	r1, #2
 8008cf2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a23      	ldr	r2, [pc, #140]	; (8008d98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d108      	bne.n	8008d20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	4a22      	ldr	r2, [pc, #136]	; (8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008d12:	4013      	ands	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2270      	movs	r2, #112	; 0x70
 8008d24:	4393      	bics	r3, r2
 8008d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a16      	ldr	r2, [pc, #88]	; (8008d98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d00f      	beq.n	8008d64 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	2380      	movs	r3, #128	; 0x80
 8008d4a:	05db      	lsls	r3, r3, #23
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d009      	beq.n	8008d64 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a12      	ldr	r2, [pc, #72]	; (8008da0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d004      	beq.n	8008d64 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a11      	ldr	r2, [pc, #68]	; (8008da4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d10c      	bne.n	8008d7e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	2280      	movs	r2, #128	; 0x80
 8008d68:	4393      	bics	r3, r2
 8008d6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	223d      	movs	r2, #61	; 0x3d
 8008d82:	2101      	movs	r1, #1
 8008d84:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	223c      	movs	r2, #60	; 0x3c
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	0018      	movs	r0, r3
 8008d92:	46bd      	mov	sp, r7
 8008d94:	b004      	add	sp, #16
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	40012c00 	.word	0x40012c00
 8008d9c:	ff0fffff 	.word	0xff0fffff
 8008da0:	40000400 	.word	0x40000400
 8008da4:	40014000 	.word	0x40014000

08008da8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	223c      	movs	r2, #60	; 0x3c
 8008dba:	5c9b      	ldrb	r3, [r3, r2]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d101      	bne.n	8008dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e079      	b.n	8008eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	223c      	movs	r2, #60	; 0x3c
 8008dc8:	2101      	movs	r1, #1
 8008dca:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	22ff      	movs	r2, #255	; 0xff
 8008dd0:	4393      	bics	r3, r2
 8008dd2:	001a      	movs	r2, r3
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	4a38      	ldr	r2, [pc, #224]	; (8008ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008de0:	401a      	ands	r2, r3
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4a35      	ldr	r2, [pc, #212]	; (8008ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008dee:	401a      	ands	r2, r3
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4a33      	ldr	r2, [pc, #204]	; (8008ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008dfc:	401a      	ands	r2, r3
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4a30      	ldr	r2, [pc, #192]	; (8008ecc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008e0a:	401a      	ands	r2, r3
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4a2e      	ldr	r2, [pc, #184]	; (8008ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008e18:	401a      	ands	r2, r3
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	4a2b      	ldr	r2, [pc, #172]	; (8008ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008e26:	401a      	ands	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4a29      	ldr	r2, [pc, #164]	; (8008ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008e34:	401a      	ands	r2, r3
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	041b      	lsls	r3, r3, #16
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a25      	ldr	r2, [pc, #148]	; (8008edc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d106      	bne.n	8008e58 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4a24      	ldr	r2, [pc, #144]	; (8008ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008e4e:	401a      	ands	r2, r3
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a1f      	ldr	r2, [pc, #124]	; (8008edc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d121      	bne.n	8008ea6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	4a1f      	ldr	r2, [pc, #124]	; (8008ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008e66:	401a      	ands	r2, r3
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6c:	051b      	lsls	r3, r3, #20
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	4a1c      	ldr	r2, [pc, #112]	; (8008ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8008e76:	401a      	ands	r2, r3
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4a1a      	ldr	r2, [pc, #104]	; (8008eec <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008e84:	401a      	ands	r2, r3
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a12      	ldr	r2, [pc, #72]	; (8008edc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d106      	bne.n	8008ea6 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4a15      	ldr	r2, [pc, #84]	; (8008ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008e9c:	401a      	ands	r2, r3
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	223c      	movs	r2, #60	; 0x3c
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	0018      	movs	r0, r3
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	b004      	add	sp, #16
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	fffffcff 	.word	0xfffffcff
 8008ec4:	fffffbff 	.word	0xfffffbff
 8008ec8:	fffff7ff 	.word	0xfffff7ff
 8008ecc:	ffffefff 	.word	0xffffefff
 8008ed0:	ffffdfff 	.word	0xffffdfff
 8008ed4:	ffffbfff 	.word	0xffffbfff
 8008ed8:	fff0ffff 	.word	0xfff0ffff
 8008edc:	40012c00 	.word	0x40012c00
 8008ee0:	efffffff 	.word	0xefffffff
 8008ee4:	ff0fffff 	.word	0xff0fffff
 8008ee8:	feffffff 	.word	0xfeffffff
 8008eec:	fdffffff 	.word	0xfdffffff
 8008ef0:	dfffffff 	.word	0xdfffffff

08008ef4 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08a      	sub	sp, #40	; 0x28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	223c      	movs	r2, #60	; 0x3c
 8008f04:	5c9b      	ldrb	r3, [r3, r2]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d101      	bne.n	8008f0e <HAL_TIMEx_ConfigBreakInput+0x1a>
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	e08e      	b.n	800902c <HAL_TIMEx_ConfigBreakInput+0x138>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	223c      	movs	r2, #60	; 0x3c
 8008f12:	2101      	movs	r1, #1
 8008f14:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	d019      	beq.n	8008f52 <HAL_TIMEx_ConfigBreakInput+0x5e>
 8008f1e:	d822      	bhi.n	8008f66 <HAL_TIMEx_ConfigBreakInput+0x72>
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d002      	beq.n	8008f2a <HAL_TIMEx_ConfigBreakInput+0x36>
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d00a      	beq.n	8008f3e <HAL_TIMEx_ConfigBreakInput+0x4a>
 8008f28:	e01d      	b.n	8008f66 <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008f32:	2380      	movs	r3, #128	; 0x80
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008f38:	2309      	movs	r3, #9
 8008f3a:	61bb      	str	r3, [r7, #24]
      break;
 8008f3c:	e01c      	b.n	8008f78 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008f3e:	2302      	movs	r3, #2
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008f42:	2301      	movs	r3, #1
 8008f44:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8008f46:	2380      	movs	r3, #128	; 0x80
 8008f48:	00db      	lsls	r3, r3, #3
 8008f4a:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008f4c:	230a      	movs	r3, #10
 8008f4e:	61bb      	str	r3, [r7, #24]
      break;
 8008f50:	e012      	b.n	8008f78 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8008f52:	2304      	movs	r3, #4
 8008f54:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8008f56:	2302      	movs	r3, #2
 8008f58:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8008f5a:	2380      	movs	r3, #128	; 0x80
 8008f5c:	011b      	lsls	r3, r3, #4
 8008f5e:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008f60:	230b      	movs	r3, #11
 8008f62:	61bb      	str	r3, [r7, #24]
      break;
 8008f64:	e008      	b.n	8008f78 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008f72:	2300      	movs	r3, #0
 8008f74:	61bb      	str	r3, [r7, #24]
      break;
 8008f76:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d003      	beq.n	8008f86 <HAL_TIMEx_ConfigBreakInput+0x92>
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d027      	beq.n	8008fd4 <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 8008f84:	e04d      	b.n	8009022 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f8c:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f90:	43da      	mvns	r2, r3
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	4013      	ands	r3, r2
 8008f96:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	409a      	lsls	r2, r3
 8008fa0:	0013      	movs	r3, r2
 8008fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	43da      	mvns	r2, r3
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689a      	ldr	r2, [r3, #8]
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	409a      	lsls	r2, r3
 8008fbe:	0013      	movs	r3, r2
 8008fc0:	6a3a      	ldr	r2, [r7, #32]
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8008fd2:	e026      	b.n	8009022 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fda:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fde:	43da      	mvns	r2, r3
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	685a      	ldr	r2, [r3, #4]
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	409a      	lsls	r2, r3
 8008fee:	0013      	movs	r3, r2
 8008ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8008ffa:	6a3b      	ldr	r3, [r7, #32]
 8008ffc:	43da      	mvns	r2, r3
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	4013      	ands	r3, r2
 8009002:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	689a      	ldr	r2, [r3, #8]
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	409a      	lsls	r2, r3
 800900c:	0013      	movs	r3, r2
 800900e:	6a3a      	ldr	r2, [r7, #32]
 8009010:	4013      	ands	r3, r2
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	4313      	orrs	r3, r2
 8009016:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8009020:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	223c      	movs	r2, #60	; 0x3c
 8009026:	2100      	movs	r1, #0
 8009028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	0018      	movs	r0, r3
 800902e:	46bd      	mov	sp, r7
 8009030:	b00a      	add	sp, #40	; 0x28
 8009032:	bd80      	pop	{r7, pc}

08009034 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e03f      	b.n	80090c6 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2259      	movs	r2, #89	; 0x59
 800904a:	5c9b      	ldrb	r3, [r3, r2]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d107      	bne.n	8009062 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2258      	movs	r2, #88	; 0x58
 8009056:	2100      	movs	r1, #0
 8009058:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	0018      	movs	r0, r3
 800905e:	f7f9 fd8d 	bl	8002b7c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2259      	movs	r2, #89	; 0x59
 8009066:	2102      	movs	r1, #2
 8009068:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2101      	movs	r1, #1
 8009076:	438a      	bics	r2, r1
 8009078:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	0018      	movs	r0, r3
 800907e:	f000 fbdb 	bl	8009838 <USART_SetConfig>
 8009082:	0003      	movs	r3, r0
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e01c      	b.n	80090c6 <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	490e      	ldr	r1, [pc, #56]	; (80090d0 <HAL_USART_Init+0x9c>)
 8009098:	400a      	ands	r2, r1
 800909a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689a      	ldr	r2, [r3, #8]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	212a      	movs	r1, #42	; 0x2a
 80090a8:	438a      	bics	r2, r1
 80090aa:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2101      	movs	r1, #1
 80090b8:	430a      	orrs	r2, r1
 80090ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	0018      	movs	r0, r3
 80090c0:	f000 fe56 	bl	8009d70 <USART_CheckIdleState>
 80090c4:	0003      	movs	r3, r0
}
 80090c6:	0018      	movs	r0, r3
 80090c8:	46bd      	mov	sp, r7
 80090ca:	b002      	add	sp, #8
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	46c0      	nop			; (mov r8, r8)
 80090d0:	ffffbfff 	.word	0xffffbfff

080090d4 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b08a      	sub	sp, #40	; 0x28
 80090d8:	af02      	add	r7, sp, #8
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	603b      	str	r3, [r7, #0]
 80090e0:	1dbb      	adds	r3, r7, #6
 80090e2:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2259      	movs	r2, #89	; 0x59
 80090e8:	5c9b      	ldrb	r3, [r3, r2]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d000      	beq.n	80090f2 <HAL_USART_Transmit+0x1e>
 80090f0:	e0a9      	b.n	8009246 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d003      	beq.n	8009100 <HAL_USART_Transmit+0x2c>
 80090f8:	1dbb      	adds	r3, r7, #6
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e0a1      	b.n	8009248 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	2380      	movs	r3, #128	; 0x80
 800910a:	015b      	lsls	r3, r3, #5
 800910c:	429a      	cmp	r2, r3
 800910e:	d109      	bne.n	8009124 <HAL_USART_Transmit+0x50>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d105      	bne.n	8009124 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2201      	movs	r2, #1
 800911c:	4013      	ands	r3, r2
 800911e:	d001      	beq.n	8009124 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e091      	b.n	8009248 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2258      	movs	r2, #88	; 0x58
 8009128:	5c9b      	ldrb	r3, [r3, r2]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d101      	bne.n	8009132 <HAL_USART_Transmit+0x5e>
 800912e:	2302      	movs	r3, #2
 8009130:	e08a      	b.n	8009248 <HAL_USART_Transmit+0x174>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2258      	movs	r2, #88	; 0x58
 8009136:	2101      	movs	r1, #1
 8009138:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2259      	movs	r2, #89	; 0x59
 8009144:	2112      	movs	r1, #18
 8009146:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009148:	f7f9 ff92 	bl	8003070 <HAL_GetTick>
 800914c:	0003      	movs	r3, r0
 800914e:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	1dba      	adds	r2, r7, #6
 8009154:	8812      	ldrh	r2, [r2, #0]
 8009156:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	1dba      	adds	r2, r7, #6
 800915c:	8812      	ldrh	r2, [r2, #0]
 800915e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	689a      	ldr	r2, [r3, #8]
 8009164:	2380      	movs	r3, #128	; 0x80
 8009166:	015b      	lsls	r3, r3, #5
 8009168:	429a      	cmp	r2, r3
 800916a:	d108      	bne.n	800917e <HAL_USART_Transmit+0xaa>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d104      	bne.n	800917e <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8009174:	2300      	movs	r3, #0
 8009176:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	61bb      	str	r3, [r7, #24]
 800917c:	e003      	b.n	8009186 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8009182:	2300      	movs	r3, #0
 8009184:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8009186:	e02a      	b.n	80091de <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	9300      	str	r3, [sp, #0]
 8009190:	0013      	movs	r3, r2
 8009192:	2200      	movs	r2, #0
 8009194:	2180      	movs	r1, #128	; 0x80
 8009196:	f000 fb19 	bl	80097cc <USART_WaitOnFlagUntilTimeout>
 800919a:	1e03      	subs	r3, r0, #0
 800919c:	d001      	beq.n	80091a2 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e052      	b.n	8009248 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10b      	bne.n	80091c0 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	881b      	ldrh	r3, [r3, #0]
 80091ac:	001a      	movs	r2, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	05d2      	lsls	r2, r2, #23
 80091b4:	0dd2      	lsrs	r2, r2, #23
 80091b6:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	3302      	adds	r3, #2
 80091bc:	61bb      	str	r3, [r7, #24]
 80091be:	e007      	b.n	80091d0 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	781a      	ldrb	r2, [r3, #0]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	3301      	adds	r3, #1
 80091ce:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	3b01      	subs	r3, #1
 80091d8:	b29a      	uxth	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d1cf      	bne.n	8009188 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	0013      	movs	r3, r2
 80091f2:	2200      	movs	r2, #0
 80091f4:	2140      	movs	r1, #64	; 0x40
 80091f6:	f000 fae9 	bl	80097cc <USART_WaitOnFlagUntilTimeout>
 80091fa:	1e03      	subs	r3, r0, #0
 80091fc:	d001      	beq.n	8009202 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	e022      	b.n	8009248 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2240      	movs	r2, #64	; 0x40
 8009208:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2208      	movs	r2, #8
 8009210:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	699a      	ldr	r2, [r3, #24]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2108      	movs	r1, #8
 800921e:	430a      	orrs	r2, r1
 8009220:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	699a      	ldr	r2, [r3, #24]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2110      	movs	r1, #16
 800922e:	430a      	orrs	r2, r1
 8009230:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2259      	movs	r2, #89	; 0x59
 8009236:	2101      	movs	r1, #1
 8009238:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2258      	movs	r2, #88	; 0x58
 800923e:	2100      	movs	r1, #0
 8009240:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	e000      	b.n	8009248 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009246:	2302      	movs	r3, #2
  }
}
 8009248:	0018      	movs	r0, r3
 800924a:	46bd      	mov	sp, r7
 800924c:	b008      	add	sp, #32
 800924e:	bd80      	pop	{r7, pc}

08009250 <HAL_USART_Transmit_DMA>:
  * @param  pTxData pointer to data buffer (u8 or u16 data elements).
  * @param  Size amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 8009250:	b590      	push	{r4, r7, lr}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	1dbb      	adds	r3, r7, #6
 800925c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800925e:	2317      	movs	r3, #23
 8009260:	18fb      	adds	r3, r7, r3
 8009262:	2200      	movs	r2, #0
 8009264:	701a      	strb	r2, [r3, #0]
  uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2259      	movs	r2, #89	; 0x59
 800926a:	5c9b      	ldrb	r3, [r3, r2]
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b01      	cmp	r3, #1
 8009270:	d000      	beq.n	8009274 <HAL_USART_Transmit_DMA+0x24>
 8009272:	e07d      	b.n	8009370 <HAL_USART_Transmit_DMA+0x120>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d003      	beq.n	8009282 <HAL_USART_Transmit_DMA+0x32>
 800927a:	1dbb      	adds	r3, r7, #6
 800927c:	881b      	ldrh	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <HAL_USART_Transmit_DMA+0x36>
    {
      return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e075      	b.n	8009372 <HAL_USART_Transmit_DMA+0x122>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	689a      	ldr	r2, [r3, #8]
 800928a:	2380      	movs	r3, #128	; 0x80
 800928c:	015b      	lsls	r3, r3, #5
 800928e:	429a      	cmp	r2, r3
 8009290:	d10a      	bne.n	80092a8 <HAL_USART_Transmit_DMA+0x58>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d106      	bne.n	80092a8 <HAL_USART_Transmit_DMA+0x58>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	001a      	movs	r2, r3
 800929e:	2301      	movs	r3, #1
 80092a0:	4013      	ands	r3, r2
 80092a2:	d001      	beq.n	80092a8 <HAL_USART_Transmit_DMA+0x58>
      {
        return  HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e064      	b.n	8009372 <HAL_USART_Transmit_DMA+0x122>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2258      	movs	r2, #88	; 0x58
 80092ac:	5c9b      	ldrb	r3, [r3, r2]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d101      	bne.n	80092b6 <HAL_USART_Transmit_DMA+0x66>
 80092b2:	2302      	movs	r3, #2
 80092b4:	e05d      	b.n	8009372 <HAL_USART_Transmit_DMA+0x122>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2258      	movs	r2, #88	; 0x58
 80092ba:	2101      	movs	r1, #1
 80092bc:	5499      	strb	r1, [r3, r2]

    husart->pTxBuffPtr = pTxData;
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	629a      	str	r2, [r3, #40]	; 0x28
    husart->TxXferSize = Size;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	1dba      	adds	r2, r7, #6
 80092c8:	8812      	ldrh	r2, [r2, #0]
 80092ca:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	1dba      	adds	r2, r7, #6
 80092d0:	8812      	ldrh	r2, [r2, #0]
 80092d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2200      	movs	r2, #0
 80092d8:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2259      	movs	r2, #89	; 0x59
 80092de:	2112      	movs	r1, #18
 80092e0:	5499      	strb	r1, [r3, r2]

    if (husart->hdmatx != NULL)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d01e      	beq.n	8009328 <HAL_USART_Transmit_DMA+0xd8>
    {
      /* Set the USART DMA transfer complete callback */
      husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ee:	4a23      	ldr	r2, [pc, #140]	; (800937c <HAL_USART_Transmit_DMA+0x12c>)
 80092f0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the USART DMA Half transfer complete callback */
      husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f6:	4a22      	ldr	r2, [pc, #136]	; (8009380 <HAL_USART_Transmit_DMA+0x130>)
 80092f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      husart->hdmatx->XferErrorCallback = USART_DMAError;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092fe:	4a21      	ldr	r2, [pc, #132]	; (8009384 <HAL_USART_Transmit_DMA+0x134>)
 8009300:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the USART transmit DMA channel */
      tmp = (uint32_t *)&pTxData;
 8009302:	2308      	movs	r3, #8
 8009304:	18fb      	adds	r3, r7, r3
 8009306:	613b      	str	r3, [r7, #16]
      status = HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->TDR, Size);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	6819      	ldr	r1, [r3, #0]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3328      	adds	r3, #40	; 0x28
 8009316:	001a      	movs	r2, r3
 8009318:	1dbb      	adds	r3, r7, #6
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	2417      	movs	r4, #23
 800931e:	193c      	adds	r4, r7, r4
 8009320:	f7fa fab2 	bl	8003888 <HAL_DMA_Start_IT>
 8009324:	0003      	movs	r3, r0
 8009326:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8009328:	2317      	movs	r3, #23
 800932a:	18fb      	adds	r3, r7, r3
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d111      	bne.n	8009356 <HAL_USART_Transmit_DMA+0x106>
    {
      /* Clear the TC flag in the ICR register */
      __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2240      	movs	r2, #64	; 0x40
 8009338:	621a      	str	r2, [r3, #32]

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2258      	movs	r2, #88	; 0x58
 800933e:	2100      	movs	r1, #0
 8009340:	5499      	strb	r1, [r3, r2]

      /* Enable the DMA transfer for transmit request by setting the DMAT bit
         in the USART CR3 register */
      SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689a      	ldr	r2, [r3, #8]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2180      	movs	r1, #128	; 0x80
 800934e:	430a      	orrs	r2, r1
 8009350:	609a      	str	r2, [r3, #8]

      return HAL_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	e00d      	b.n	8009372 <HAL_USART_Transmit_DMA+0x122>
    }
    else
    {
      /* Set error code to DMA */
      husart->ErrorCode = HAL_USART_ERROR_DMA;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2210      	movs	r2, #16
 800935a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2258      	movs	r2, #88	; 0x58
 8009360:	2100      	movs	r1, #0
 8009362:	5499      	strb	r1, [r3, r2]

      /* Restore husart->State to ready */
      husart->State = HAL_USART_STATE_READY;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2259      	movs	r2, #89	; 0x59
 8009368:	2101      	movs	r1, #1
 800936a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e000      	b.n	8009372 <HAL_USART_Transmit_DMA+0x122>
    }
  }
  else
  {
    return HAL_BUSY;
 8009370:	2302      	movs	r3, #2
  }
}
 8009372:	0018      	movs	r0, r3
 8009374:	46bd      	mov	sp, r7
 8009376:	b007      	add	sp, #28
 8009378:	bd90      	pop	{r4, r7, pc}
 800937a:	46c0      	nop			; (mov r8, r8)
 800937c:	080096d5 	.word	0x080096d5
 8009380:	0800973f 	.word	0x0800973f
 8009384:	0800975d 	.word	0x0800975d

08009388 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	69db      	ldr	r3, [r3, #28]
 8009396:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	4aab      	ldr	r2, [pc, #684]	; (8009658 <HAL_USART_IRQHandler+0x2d0>)
 80093ac:	4013      	ands	r3, r2
 80093ae:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d117      	bne.n	80093e6 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	2220      	movs	r2, #32
 80093ba:	4013      	ands	r3, r2
 80093bc:	d013      	beq.n	80093e6 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	2220      	movs	r2, #32
 80093c2:	4013      	ands	r3, r2
 80093c4:	d104      	bne.n	80093d0 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	2380      	movs	r3, #128	; 0x80
 80093ca:	055b      	lsls	r3, r3, #21
 80093cc:	4013      	ands	r3, r2
 80093ce:	d00a      	beq.n	80093e6 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d100      	bne.n	80093da <HAL_USART_IRQHandler+0x52>
 80093d8:	e135      	b.n	8009646 <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	0010      	movs	r0, r2
 80093e2:	4798      	blx	r3
      }
      return;
 80093e4:	e12f      	b.n	8009646 <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d100      	bne.n	80093ee <HAL_USART_IRQHandler+0x66>
 80093ec:	e0eb      	b.n	80095c6 <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	4a9a      	ldr	r2, [pc, #616]	; (800965c <HAL_USART_IRQHandler+0x2d4>)
 80093f2:	4013      	ands	r3, r2
 80093f4:	d105      	bne.n	8009402 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 80093f6:	69ba      	ldr	r2, [r7, #24]
 80093f8:	2390      	movs	r3, #144	; 0x90
 80093fa:	005b      	lsls	r3, r3, #1
 80093fc:	4013      	ands	r3, r2
 80093fe:	d100      	bne.n	8009402 <HAL_USART_IRQHandler+0x7a>
 8009400:	e0e1      	b.n	80095c6 <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	2201      	movs	r2, #1
 8009406:	4013      	ands	r3, r2
 8009408:	d00e      	beq.n	8009428 <HAL_USART_IRQHandler+0xa0>
 800940a:	69ba      	ldr	r2, [r7, #24]
 800940c:	2380      	movs	r3, #128	; 0x80
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	4013      	ands	r3, r2
 8009412:	d009      	beq.n	8009428 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2201      	movs	r2, #1
 800941a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009420:	2201      	movs	r2, #1
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	2202      	movs	r2, #2
 800942c:	4013      	ands	r3, r2
 800942e:	d00d      	beq.n	800944c <HAL_USART_IRQHandler+0xc4>
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	2201      	movs	r2, #1
 8009434:	4013      	ands	r3, r2
 8009436:	d009      	beq.n	800944c <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2202      	movs	r2, #2
 800943e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009444:	2204      	movs	r2, #4
 8009446:	431a      	orrs	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	2204      	movs	r2, #4
 8009450:	4013      	ands	r3, r2
 8009452:	d00d      	beq.n	8009470 <HAL_USART_IRQHandler+0xe8>
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	2201      	movs	r2, #1
 8009458:	4013      	ands	r3, r2
 800945a:	d009      	beq.n	8009470 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2204      	movs	r2, #4
 8009462:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009468:	2202      	movs	r2, #2
 800946a:	431a      	orrs	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	2208      	movs	r2, #8
 8009474:	4013      	ands	r3, r2
 8009476:	d011      	beq.n	800949c <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	2220      	movs	r2, #32
 800947c:	4013      	ands	r3, r2
 800947e:	d103      	bne.n	8009488 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	4a76      	ldr	r2, [pc, #472]	; (800965c <HAL_USART_IRQHandler+0x2d4>)
 8009484:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009486:	d009      	beq.n	800949c <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2208      	movs	r2, #8
 800948e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009494:	2208      	movs	r2, #8
 8009496:	431a      	orrs	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800949c:	69fa      	ldr	r2, [r7, #28]
 800949e:	2380      	movs	r3, #128	; 0x80
 80094a0:	019b      	lsls	r3, r3, #6
 80094a2:	4013      	ands	r3, r2
 80094a4:	d01a      	beq.n	80094dc <HAL_USART_IRQHandler+0x154>
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	2201      	movs	r2, #1
 80094aa:	4013      	ands	r3, r2
 80094ac:	d016      	beq.n	80094dc <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2259      	movs	r2, #89	; 0x59
 80094b2:	5c9b      	ldrb	r3, [r3, r2]
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	2b22      	cmp	r3, #34	; 0x22
 80094b8:	d105      	bne.n	80094c6 <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2280      	movs	r2, #128	; 0x80
 80094c0:	0192      	lsls	r2, r2, #6
 80094c2:	621a      	str	r2, [r3, #32]
        return;
 80094c4:	e0c4      	b.n	8009650 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2280      	movs	r2, #128	; 0x80
 80094cc:	0192      	lsls	r2, r2, #6
 80094ce:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094d4:	2220      	movs	r2, #32
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d100      	bne.n	80094e6 <HAL_USART_IRQHandler+0x15e>
 80094e4:	e0b1      	b.n	800964a <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	2220      	movs	r2, #32
 80094ea:	4013      	ands	r3, r2
 80094ec:	d011      	beq.n	8009512 <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	2220      	movs	r2, #32
 80094f2:	4013      	ands	r3, r2
 80094f4:	d104      	bne.n	8009500 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	2380      	movs	r3, #128	; 0x80
 80094fa:	055b      	lsls	r3, r3, #21
 80094fc:	4013      	ands	r3, r2
 80094fe:	d008      	beq.n	8009512 <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009504:	2b00      	cmp	r3, #0
 8009506:	d004      	beq.n	8009512 <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	0010      	movs	r0, r2
 8009510:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009516:	2208      	movs	r2, #8
 8009518:	4013      	ands	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	2240      	movs	r2, #64	; 0x40
 8009524:	4013      	ands	r3, r2
 8009526:	2b40      	cmp	r3, #64	; 0x40
 8009528:	d002      	beq.n	8009530 <HAL_USART_IRQHandler+0x1a8>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d040      	beq.n	80095b2 <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	0018      	movs	r0, r3
 8009534:	f000 f8ae 	bl	8009694 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	2240      	movs	r2, #64	; 0x40
 8009540:	4013      	ands	r3, r2
 8009542:	2b40      	cmp	r3, #64	; 0x40
 8009544:	d130      	bne.n	80095a8 <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2140      	movs	r1, #64	; 0x40
 8009552:	438a      	bics	r2, r1
 8009554:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800955a:	2b00      	cmp	r3, #0
 800955c:	d008      	beq.n	8009570 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009562:	2200      	movs	r2, #0
 8009564:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956a:	0018      	movs	r0, r3
 800956c:	f7fa fa12 	bl	8003994 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009574:	2b00      	cmp	r3, #0
 8009576:	d012      	beq.n	800959e <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800957c:	4a38      	ldr	r2, [pc, #224]	; (8009660 <HAL_USART_IRQHandler+0x2d8>)
 800957e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009584:	0018      	movs	r0, r3
 8009586:	f7fa fa05 	bl	8003994 <HAL_DMA_Abort_IT>
 800958a:	1e03      	subs	r3, r0, #0
 800958c:	d019      	beq.n	80095c2 <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009598:	0018      	movs	r0, r3
 800959a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800959c:	e011      	b.n	80095c2 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	0018      	movs	r0, r3
 80095a2:	f000 f86f 	bl	8009684 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095a6:	e00c      	b.n	80095c2 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	0018      	movs	r0, r3
 80095ac:	f000 f86a 	bl	8009684 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095b0:	e007      	b.n	80095c2 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	0018      	movs	r0, r3
 80095b6:	f000 f865 	bl	8009684 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 80095c0:	e043      	b.n	800964a <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095c2:	46c0      	nop			; (mov r8, r8)
    return;
 80095c4:	e041      	b.n	800964a <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	2280      	movs	r2, #128	; 0x80
 80095ca:	4013      	ands	r3, r2
 80095cc:	d012      	beq.n	80095f4 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	2280      	movs	r2, #128	; 0x80
 80095d2:	4013      	ands	r3, r2
 80095d4:	d104      	bne.n	80095e0 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	2380      	movs	r3, #128	; 0x80
 80095da:	041b      	lsls	r3, r3, #16
 80095dc:	4013      	ands	r3, r2
 80095de:	d009      	beq.n	80095f4 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d032      	beq.n	800964e <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	0010      	movs	r0, r2
 80095f0:	4798      	blx	r3
    }
    return;
 80095f2:	e02c      	b.n	800964e <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	2240      	movs	r2, #64	; 0x40
 80095f8:	4013      	ands	r3, r2
 80095fa:	d008      	beq.n	800960e <HAL_USART_IRQHandler+0x286>
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	2240      	movs	r2, #64	; 0x40
 8009600:	4013      	ands	r3, r2
 8009602:	d004      	beq.n	800960e <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	0018      	movs	r0, r3
 8009608:	f000 fbf6 	bl	8009df8 <USART_EndTransmit_IT>
    return;
 800960c:	e020      	b.n	8009650 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800960e:	69fa      	ldr	r2, [r7, #28]
 8009610:	2380      	movs	r3, #128	; 0x80
 8009612:	041b      	lsls	r3, r3, #16
 8009614:	4013      	ands	r3, r2
 8009616:	d009      	beq.n	800962c <HAL_USART_IRQHandler+0x2a4>
 8009618:	69ba      	ldr	r2, [r7, #24]
 800961a:	2380      	movs	r3, #128	; 0x80
 800961c:	05db      	lsls	r3, r3, #23
 800961e:	4013      	ands	r3, r2
 8009620:	d004      	beq.n	800962c <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	0018      	movs	r0, r3
 8009626:	f000 fc32 	bl	8009e8e <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800962a:	e011      	b.n	8009650 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800962c:	69fa      	ldr	r2, [r7, #28]
 800962e:	2380      	movs	r3, #128	; 0x80
 8009630:	045b      	lsls	r3, r3, #17
 8009632:	4013      	ands	r3, r2
 8009634:	d00c      	beq.n	8009650 <HAL_USART_IRQHandler+0x2c8>
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	2b00      	cmp	r3, #0
 800963a:	da09      	bge.n	8009650 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	0018      	movs	r0, r3
 8009640:	f000 fc1d 	bl	8009e7e <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8009644:	e004      	b.n	8009650 <HAL_USART_IRQHandler+0x2c8>
      return;
 8009646:	46c0      	nop			; (mov r8, r8)
 8009648:	e002      	b.n	8009650 <HAL_USART_IRQHandler+0x2c8>
    return;
 800964a:	46c0      	nop			; (mov r8, r8)
 800964c:	e000      	b.n	8009650 <HAL_USART_IRQHandler+0x2c8>
    return;
 800964e:	46c0      	nop			; (mov r8, r8)
  }
}
 8009650:	46bd      	mov	sp, r7
 8009652:	b008      	add	sp, #32
 8009654:	bd80      	pop	{r7, pc}
 8009656:	46c0      	nop			; (mov r8, r8)
 8009658:	0000200f 	.word	0x0000200f
 800965c:	10000001 	.word	0x10000001
 8009660:	080097a3 	.word	0x080097a3

08009664 <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800966c:	46c0      	nop			; (mov r8, r8)
 800966e:	46bd      	mov	sp, r7
 8009670:	b002      	add	sp, #8
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800967c:	46c0      	nop			; (mov r8, r8)
 800967e:	46bd      	mov	sp, r7
 8009680:	b002      	add	sp, #8
 8009682:	bd80      	pop	{r7, pc}

08009684 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800968c:	46c0      	nop			; (mov r8, r8)
 800968e:	46bd      	mov	sp, r7
 8009690:	b002      	add	sp, #8
 8009692:	bd80      	pop	{r7, pc}

08009694 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4909      	ldr	r1, [pc, #36]	; (80096cc <USART_EndTransfer+0x38>)
 80096a8:	400a      	ands	r2, r1
 80096aa:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	689a      	ldr	r2, [r3, #8]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4906      	ldr	r1, [pc, #24]	; (80096d0 <USART_EndTransfer+0x3c>)
 80096b8:	400a      	ands	r2, r1
 80096ba:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2259      	movs	r2, #89	; 0x59
 80096c0:	2101      	movs	r1, #1
 80096c2:	5499      	strb	r1, [r3, r2]
}
 80096c4:	46c0      	nop			; (mov r8, r8)
 80096c6:	46bd      	mov	sp, r7
 80096c8:	b002      	add	sp, #8
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	fffffe1f 	.word	0xfffffe1f
 80096d0:	ef7ffffe 	.word	0xef7ffffe

080096d4 <USART_DMATransmitCplt>:
  * @brief DMA USART transmit process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2220      	movs	r2, #32
 80096ea:	4013      	ands	r3, r2
 80096ec:	d119      	bne.n	8009722 <USART_DMATransmitCplt+0x4e>
  {
    husart->TxXferCount = 0U;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    if (husart->State == HAL_USART_STATE_BUSY_TX)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2259      	movs	r2, #89	; 0x59
 80096f8:	5c9b      	ldrb	r3, [r3, r2]
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b12      	cmp	r3, #18
 80096fe:	d11a      	bne.n	8009736 <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	689a      	ldr	r2, [r3, #8]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2180      	movs	r1, #128	; 0x80
 800970c:	438a      	bics	r2, r1
 800970e:	609a      	str	r2, [r3, #8]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2140      	movs	r1, #64	; 0x40
 800971c:	430a      	orrs	r2, r1
 800971e:	601a      	str	r2, [r3, #0]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 8009720:	e009      	b.n	8009736 <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2259      	movs	r2, #89	; 0x59
 8009726:	5c9b      	ldrb	r3, [r3, r2]
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b12      	cmp	r3, #18
 800972c:	d103      	bne.n	8009736 <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	0018      	movs	r0, r3
 8009732:	f7f7 fc7f 	bl	8001034 <HAL_USART_TxCpltCallback>
}
 8009736:	46c0      	nop			; (mov r8, r8)
 8009738:	46bd      	mov	sp, r7
 800973a:	b004      	add	sp, #16
 800973c:	bd80      	pop	{r7, pc}

0800973e <USART_DMATxHalfCplt>:
  * @brief DMA USART transmit process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b084      	sub	sp, #16
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	0018      	movs	r0, r3
 8009750:	f7ff ff88 	bl	8009664 <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8009754:	46c0      	nop			; (mov r8, r8)
 8009756:	46bd      	mov	sp, r7
 8009758:	b004      	add	sp, #16
 800975a:	bd80      	pop	{r7, pc}

0800975c <USART_DMAError>:
  * @brief DMA USART communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009768:	60fb      	str	r3, [r7, #12]

  husart->RxXferCount = 0U;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2200      	movs	r2, #0
 800976e:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	85da      	strh	r2, [r3, #46]	; 0x2e
  USART_EndTransfer(husart);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	0018      	movs	r0, r3
 800977a:	f7ff ff8b 	bl	8009694 <USART_EndTransfer>

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009782:	2210      	movs	r2, #16
 8009784:	431a      	orrs	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	65da      	str	r2, [r3, #92]	; 0x5c
  husart->State = HAL_USART_STATE_READY;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2259      	movs	r2, #89	; 0x59
 800978e:	2101      	movs	r1, #1
 8009790:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	0018      	movs	r0, r3
 8009796:	f7ff ff75 	bl	8009684 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800979a:	46c0      	nop			; (mov r8, r8)
 800979c:	46bd      	mov	sp, r7
 800979e:	b004      	add	sp, #16
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ae:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	0018      	movs	r0, r3
 80097c0:	f7ff ff60 	bl	8009684 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80097c4:	46c0      	nop			; (mov r8, r8)
 80097c6:	46bd      	mov	sp, r7
 80097c8:	b004      	add	sp, #16
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	603b      	str	r3, [r7, #0]
 80097d8:	1dfb      	adds	r3, r7, #7
 80097da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80097dc:	e017      	b.n	800980e <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	3301      	adds	r3, #1
 80097e2:	d014      	beq.n	800980e <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097e4:	f7f9 fc44 	bl	8003070 <HAL_GetTick>
 80097e8:	0002      	movs	r2, r0
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	69ba      	ldr	r2, [r7, #24]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d302      	bcc.n	80097fa <USART_WaitOnFlagUntilTimeout+0x2e>
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d109      	bne.n	800980e <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2259      	movs	r2, #89	; 0x59
 80097fe:	2101      	movs	r1, #1
 8009800:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2258      	movs	r2, #88	; 0x58
 8009806:	2100      	movs	r1, #0
 8009808:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	e00f      	b.n	800982e <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	69db      	ldr	r3, [r3, #28]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	4013      	ands	r3, r2
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	425a      	negs	r2, r3
 800981e:	4153      	adcs	r3, r2
 8009820:	b2db      	uxtb	r3, r3
 8009822:	001a      	movs	r2, r3
 8009824:	1dfb      	adds	r3, r7, #7
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	429a      	cmp	r2, r3
 800982a:	d0d8      	beq.n	80097de <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	0018      	movs	r0, r3
 8009830:	46bd      	mov	sp, r7
 8009832:	b004      	add	sp, #16
 8009834:	bd80      	pop	{r7, pc}
	...

08009838 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b088      	sub	sp, #32
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8009840:	231e      	movs	r3, #30
 8009842:	18fb      	adds	r3, r7, r3
 8009844:	2200      	movs	r2, #0
 8009846:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8009848:	2300      	movs	r3, #0
 800984a:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	689a      	ldr	r2, [r3, #8]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	431a      	orrs	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	695b      	ldr	r3, [r3, #20]
 800985a:	4313      	orrs	r3, r2
 800985c:	2280      	movs	r2, #128	; 0x80
 800985e:	0212      	lsls	r2, r2, #8
 8009860:	4313      	orrs	r3, r2
 8009862:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4ab1      	ldr	r2, [pc, #708]	; (8009b30 <USART_SetConfig+0x2f8>)
 800986c:	4013      	ands	r3, r2
 800986e:	0019      	movs	r1, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	430a      	orrs	r2, r1
 8009878:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800987a:	2380      	movs	r3, #128	; 0x80
 800987c:	011b      	lsls	r3, r3, #4
 800987e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a1b      	ldr	r3, [r3, #32]
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	4313      	orrs	r3, r2
 8009888:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	699a      	ldr	r2, [r3, #24]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	69db      	ldr	r3, [r3, #28]
 8009892:	4313      	orrs	r3, r2
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	4313      	orrs	r3, r2
 8009898:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	4aa2      	ldr	r2, [pc, #648]	; (8009b34 <USART_SetConfig+0x2fc>)
 80098ac:	4013      	ands	r3, r2
 80098ae:	0019      	movs	r1, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	430a      	orrs	r2, r1
 80098b8:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c0:	220f      	movs	r2, #15
 80098c2:	4393      	bics	r3, r2
 80098c4:	0019      	movs	r1, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	430a      	orrs	r2, r1
 80098d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a98      	ldr	r2, [pc, #608]	; (8009b38 <USART_SetConfig+0x300>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d127      	bne.n	800992c <USART_SetConfig+0xf4>
 80098dc:	4b97      	ldr	r3, [pc, #604]	; (8009b3c <USART_SetConfig+0x304>)
 80098de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e0:	2203      	movs	r2, #3
 80098e2:	4013      	ands	r3, r2
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	d017      	beq.n	8009918 <USART_SetConfig+0xe0>
 80098e8:	d81b      	bhi.n	8009922 <USART_SetConfig+0xea>
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d00a      	beq.n	8009904 <USART_SetConfig+0xcc>
 80098ee:	d818      	bhi.n	8009922 <USART_SetConfig+0xea>
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <USART_SetConfig+0xc2>
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d00a      	beq.n	800990e <USART_SetConfig+0xd6>
 80098f8:	e013      	b.n	8009922 <USART_SetConfig+0xea>
 80098fa:	231f      	movs	r3, #31
 80098fc:	18fb      	adds	r3, r7, r3
 80098fe:	2200      	movs	r2, #0
 8009900:	701a      	strb	r2, [r3, #0]
 8009902:	e058      	b.n	80099b6 <USART_SetConfig+0x17e>
 8009904:	231f      	movs	r3, #31
 8009906:	18fb      	adds	r3, r7, r3
 8009908:	2202      	movs	r2, #2
 800990a:	701a      	strb	r2, [r3, #0]
 800990c:	e053      	b.n	80099b6 <USART_SetConfig+0x17e>
 800990e:	231f      	movs	r3, #31
 8009910:	18fb      	adds	r3, r7, r3
 8009912:	2204      	movs	r2, #4
 8009914:	701a      	strb	r2, [r3, #0]
 8009916:	e04e      	b.n	80099b6 <USART_SetConfig+0x17e>
 8009918:	231f      	movs	r3, #31
 800991a:	18fb      	adds	r3, r7, r3
 800991c:	2208      	movs	r2, #8
 800991e:	701a      	strb	r2, [r3, #0]
 8009920:	e049      	b.n	80099b6 <USART_SetConfig+0x17e>
 8009922:	231f      	movs	r3, #31
 8009924:	18fb      	adds	r3, r7, r3
 8009926:	2210      	movs	r2, #16
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	e044      	b.n	80099b6 <USART_SetConfig+0x17e>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a83      	ldr	r2, [pc, #524]	; (8009b40 <USART_SetConfig+0x308>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d127      	bne.n	8009986 <USART_SetConfig+0x14e>
 8009936:	4b81      	ldr	r3, [pc, #516]	; (8009b3c <USART_SetConfig+0x304>)
 8009938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993a:	220c      	movs	r2, #12
 800993c:	4013      	ands	r3, r2
 800993e:	2b0c      	cmp	r3, #12
 8009940:	d017      	beq.n	8009972 <USART_SetConfig+0x13a>
 8009942:	d81b      	bhi.n	800997c <USART_SetConfig+0x144>
 8009944:	2b08      	cmp	r3, #8
 8009946:	d00a      	beq.n	800995e <USART_SetConfig+0x126>
 8009948:	d818      	bhi.n	800997c <USART_SetConfig+0x144>
 800994a:	2b00      	cmp	r3, #0
 800994c:	d002      	beq.n	8009954 <USART_SetConfig+0x11c>
 800994e:	2b04      	cmp	r3, #4
 8009950:	d00a      	beq.n	8009968 <USART_SetConfig+0x130>
 8009952:	e013      	b.n	800997c <USART_SetConfig+0x144>
 8009954:	231f      	movs	r3, #31
 8009956:	18fb      	adds	r3, r7, r3
 8009958:	2200      	movs	r2, #0
 800995a:	701a      	strb	r2, [r3, #0]
 800995c:	e02b      	b.n	80099b6 <USART_SetConfig+0x17e>
 800995e:	231f      	movs	r3, #31
 8009960:	18fb      	adds	r3, r7, r3
 8009962:	2202      	movs	r2, #2
 8009964:	701a      	strb	r2, [r3, #0]
 8009966:	e026      	b.n	80099b6 <USART_SetConfig+0x17e>
 8009968:	231f      	movs	r3, #31
 800996a:	18fb      	adds	r3, r7, r3
 800996c:	2204      	movs	r2, #4
 800996e:	701a      	strb	r2, [r3, #0]
 8009970:	e021      	b.n	80099b6 <USART_SetConfig+0x17e>
 8009972:	231f      	movs	r3, #31
 8009974:	18fb      	adds	r3, r7, r3
 8009976:	2208      	movs	r2, #8
 8009978:	701a      	strb	r2, [r3, #0]
 800997a:	e01c      	b.n	80099b6 <USART_SetConfig+0x17e>
 800997c:	231f      	movs	r3, #31
 800997e:	18fb      	adds	r3, r7, r3
 8009980:	2210      	movs	r2, #16
 8009982:	701a      	strb	r2, [r3, #0]
 8009984:	e017      	b.n	80099b6 <USART_SetConfig+0x17e>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a6e      	ldr	r2, [pc, #440]	; (8009b44 <USART_SetConfig+0x30c>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d104      	bne.n	800999a <USART_SetConfig+0x162>
 8009990:	231f      	movs	r3, #31
 8009992:	18fb      	adds	r3, r7, r3
 8009994:	2200      	movs	r2, #0
 8009996:	701a      	strb	r2, [r3, #0]
 8009998:	e00d      	b.n	80099b6 <USART_SetConfig+0x17e>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a6a      	ldr	r2, [pc, #424]	; (8009b48 <USART_SetConfig+0x310>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d104      	bne.n	80099ae <USART_SetConfig+0x176>
 80099a4:	231f      	movs	r3, #31
 80099a6:	18fb      	adds	r3, r7, r3
 80099a8:	2200      	movs	r2, #0
 80099aa:	701a      	strb	r2, [r3, #0]
 80099ac:	e003      	b.n	80099b6 <USART_SetConfig+0x17e>
 80099ae:	231f      	movs	r3, #31
 80099b0:	18fb      	adds	r3, r7, r3
 80099b2:	2210      	movs	r2, #16
 80099b4:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 80099b6:	231f      	movs	r3, #31
 80099b8:	18fb      	adds	r3, r7, r3
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	2b08      	cmp	r3, #8
 80099be:	d100      	bne.n	80099c2 <USART_SetConfig+0x18a>
 80099c0:	e139      	b.n	8009c36 <USART_SetConfig+0x3fe>
 80099c2:	dd00      	ble.n	80099c6 <USART_SetConfig+0x18e>
 80099c4:	e195      	b.n	8009cf2 <USART_SetConfig+0x4ba>
 80099c6:	2b04      	cmp	r3, #4
 80099c8:	d100      	bne.n	80099cc <USART_SetConfig+0x194>
 80099ca:	e0d3      	b.n	8009b74 <USART_SetConfig+0x33c>
 80099cc:	dd00      	ble.n	80099d0 <USART_SetConfig+0x198>
 80099ce:	e190      	b.n	8009cf2 <USART_SetConfig+0x4ba>
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <USART_SetConfig+0x1a4>
 80099d4:	2b02      	cmp	r3, #2
 80099d6:	d100      	bne.n	80099da <USART_SetConfig+0x1a2>
 80099d8:	e061      	b.n	8009a9e <USART_SetConfig+0x266>
 80099da:	e18a      	b.n	8009cf2 <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80099dc:	f7fc f8fc 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 80099e0:	0003      	movs	r3, r0
 80099e2:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d044      	beq.n	8009a76 <USART_SetConfig+0x23e>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d03e      	beq.n	8009a72 <USART_SetConfig+0x23a>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d038      	beq.n	8009a6e <USART_SetConfig+0x236>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d032      	beq.n	8009a6a <USART_SetConfig+0x232>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	d02c      	beq.n	8009a66 <USART_SetConfig+0x22e>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	2b05      	cmp	r3, #5
 8009a12:	d026      	beq.n	8009a62 <USART_SetConfig+0x22a>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	2b06      	cmp	r3, #6
 8009a1a:	d020      	beq.n	8009a5e <USART_SetConfig+0x226>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	2b07      	cmp	r3, #7
 8009a22:	d01a      	beq.n	8009a5a <USART_SetConfig+0x222>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	2b08      	cmp	r3, #8
 8009a2a:	d014      	beq.n	8009a56 <USART_SetConfig+0x21e>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	2b09      	cmp	r3, #9
 8009a32:	d00e      	beq.n	8009a52 <USART_SetConfig+0x21a>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	2b0a      	cmp	r3, #10
 8009a3a:	d008      	beq.n	8009a4e <USART_SetConfig+0x216>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	2b0b      	cmp	r3, #11
 8009a42:	d102      	bne.n	8009a4a <USART_SetConfig+0x212>
 8009a44:	2380      	movs	r3, #128	; 0x80
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	e016      	b.n	8009a78 <USART_SetConfig+0x240>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e014      	b.n	8009a78 <USART_SetConfig+0x240>
 8009a4e:	2380      	movs	r3, #128	; 0x80
 8009a50:	e012      	b.n	8009a78 <USART_SetConfig+0x240>
 8009a52:	2340      	movs	r3, #64	; 0x40
 8009a54:	e010      	b.n	8009a78 <USART_SetConfig+0x240>
 8009a56:	2320      	movs	r3, #32
 8009a58:	e00e      	b.n	8009a78 <USART_SetConfig+0x240>
 8009a5a:	2310      	movs	r3, #16
 8009a5c:	e00c      	b.n	8009a78 <USART_SetConfig+0x240>
 8009a5e:	230c      	movs	r3, #12
 8009a60:	e00a      	b.n	8009a78 <USART_SetConfig+0x240>
 8009a62:	230a      	movs	r3, #10
 8009a64:	e008      	b.n	8009a78 <USART_SetConfig+0x240>
 8009a66:	2308      	movs	r3, #8
 8009a68:	e006      	b.n	8009a78 <USART_SetConfig+0x240>
 8009a6a:	2306      	movs	r3, #6
 8009a6c:	e004      	b.n	8009a78 <USART_SetConfig+0x240>
 8009a6e:	2304      	movs	r3, #4
 8009a70:	e002      	b.n	8009a78 <USART_SetConfig+0x240>
 8009a72:	2302      	movs	r3, #2
 8009a74:	e000      	b.n	8009a78 <USART_SetConfig+0x240>
 8009a76:	2301      	movs	r3, #1
 8009a78:	0019      	movs	r1, r3
 8009a7a:	6938      	ldr	r0, [r7, #16]
 8009a7c:	f7f6 fb42 	bl	8000104 <__udivsi3>
 8009a80:	0003      	movs	r3, r0
 8009a82:	005a      	lsls	r2, r3, #1
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	085b      	lsrs	r3, r3, #1
 8009a8a:	18d2      	adds	r2, r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	0019      	movs	r1, r3
 8009a92:	0010      	movs	r0, r2
 8009a94:	f7f6 fb36 	bl	8000104 <__udivsi3>
 8009a98:	0003      	movs	r3, r0
 8009a9a:	61bb      	str	r3, [r7, #24]
      break;
 8009a9c:	e12e      	b.n	8009cfc <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d052      	beq.n	8009b4c <USART_SetConfig+0x314>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d03e      	beq.n	8009b2c <USART_SetConfig+0x2f4>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d038      	beq.n	8009b28 <USART_SetConfig+0x2f0>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d032      	beq.n	8009b24 <USART_SetConfig+0x2ec>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	d02c      	beq.n	8009b20 <USART_SetConfig+0x2e8>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aca:	2b05      	cmp	r3, #5
 8009acc:	d026      	beq.n	8009b1c <USART_SetConfig+0x2e4>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	2b06      	cmp	r3, #6
 8009ad4:	d020      	beq.n	8009b18 <USART_SetConfig+0x2e0>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ada:	2b07      	cmp	r3, #7
 8009adc:	d01a      	beq.n	8009b14 <USART_SetConfig+0x2dc>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	2b08      	cmp	r3, #8
 8009ae4:	d014      	beq.n	8009b10 <USART_SetConfig+0x2d8>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aea:	2b09      	cmp	r3, #9
 8009aec:	d00e      	beq.n	8009b0c <USART_SetConfig+0x2d4>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	2b0a      	cmp	r3, #10
 8009af4:	d008      	beq.n	8009b08 <USART_SetConfig+0x2d0>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afa:	2b0b      	cmp	r3, #11
 8009afc:	d102      	bne.n	8009b04 <USART_SetConfig+0x2cc>
 8009afe:	2380      	movs	r3, #128	; 0x80
 8009b00:	005b      	lsls	r3, r3, #1
 8009b02:	e024      	b.n	8009b4e <USART_SetConfig+0x316>
 8009b04:	2301      	movs	r3, #1
 8009b06:	e022      	b.n	8009b4e <USART_SetConfig+0x316>
 8009b08:	2380      	movs	r3, #128	; 0x80
 8009b0a:	e020      	b.n	8009b4e <USART_SetConfig+0x316>
 8009b0c:	2340      	movs	r3, #64	; 0x40
 8009b0e:	e01e      	b.n	8009b4e <USART_SetConfig+0x316>
 8009b10:	2320      	movs	r3, #32
 8009b12:	e01c      	b.n	8009b4e <USART_SetConfig+0x316>
 8009b14:	2310      	movs	r3, #16
 8009b16:	e01a      	b.n	8009b4e <USART_SetConfig+0x316>
 8009b18:	230c      	movs	r3, #12
 8009b1a:	e018      	b.n	8009b4e <USART_SetConfig+0x316>
 8009b1c:	230a      	movs	r3, #10
 8009b1e:	e016      	b.n	8009b4e <USART_SetConfig+0x316>
 8009b20:	2308      	movs	r3, #8
 8009b22:	e014      	b.n	8009b4e <USART_SetConfig+0x316>
 8009b24:	2306      	movs	r3, #6
 8009b26:	e012      	b.n	8009b4e <USART_SetConfig+0x316>
 8009b28:	2304      	movs	r3, #4
 8009b2a:	e010      	b.n	8009b4e <USART_SetConfig+0x316>
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e00e      	b.n	8009b4e <USART_SetConfig+0x316>
 8009b30:	cfff69f3 	.word	0xcfff69f3
 8009b34:	ffffc0f6 	.word	0xffffc0f6
 8009b38:	40013800 	.word	0x40013800
 8009b3c:	40021000 	.word	0x40021000
 8009b40:	40004400 	.word	0x40004400
 8009b44:	40004800 	.word	0x40004800
 8009b48:	40004c00 	.word	0x40004c00
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	0019      	movs	r1, r3
 8009b50:	4886      	ldr	r0, [pc, #536]	; (8009d6c <USART_SetConfig+0x534>)
 8009b52:	f7f6 fad7 	bl	8000104 <__udivsi3>
 8009b56:	0003      	movs	r3, r0
 8009b58:	005a      	lsls	r2, r3, #1
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	085b      	lsrs	r3, r3, #1
 8009b60:	18d2      	adds	r2, r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	0019      	movs	r1, r3
 8009b68:	0010      	movs	r0, r2
 8009b6a:	f7f6 facb 	bl	8000104 <__udivsi3>
 8009b6e:	0003      	movs	r3, r0
 8009b70:	61bb      	str	r3, [r7, #24]
      break;
 8009b72:	e0c3      	b.n	8009cfc <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8009b74:	f7fb ffa4 	bl	8005ac0 <HAL_RCC_GetSysClockFreq>
 8009b78:	0003      	movs	r3, r0
 8009b7a:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d044      	beq.n	8009c0e <USART_SetConfig+0x3d6>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d03e      	beq.n	8009c0a <USART_SetConfig+0x3d2>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d038      	beq.n	8009c06 <USART_SetConfig+0x3ce>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b98:	2b03      	cmp	r3, #3
 8009b9a:	d032      	beq.n	8009c02 <USART_SetConfig+0x3ca>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba0:	2b04      	cmp	r3, #4
 8009ba2:	d02c      	beq.n	8009bfe <USART_SetConfig+0x3c6>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba8:	2b05      	cmp	r3, #5
 8009baa:	d026      	beq.n	8009bfa <USART_SetConfig+0x3c2>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb0:	2b06      	cmp	r3, #6
 8009bb2:	d020      	beq.n	8009bf6 <USART_SetConfig+0x3be>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb8:	2b07      	cmp	r3, #7
 8009bba:	d01a      	beq.n	8009bf2 <USART_SetConfig+0x3ba>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc0:	2b08      	cmp	r3, #8
 8009bc2:	d014      	beq.n	8009bee <USART_SetConfig+0x3b6>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc8:	2b09      	cmp	r3, #9
 8009bca:	d00e      	beq.n	8009bea <USART_SetConfig+0x3b2>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd0:	2b0a      	cmp	r3, #10
 8009bd2:	d008      	beq.n	8009be6 <USART_SetConfig+0x3ae>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd8:	2b0b      	cmp	r3, #11
 8009bda:	d102      	bne.n	8009be2 <USART_SetConfig+0x3aa>
 8009bdc:	2380      	movs	r3, #128	; 0x80
 8009bde:	005b      	lsls	r3, r3, #1
 8009be0:	e016      	b.n	8009c10 <USART_SetConfig+0x3d8>
 8009be2:	2301      	movs	r3, #1
 8009be4:	e014      	b.n	8009c10 <USART_SetConfig+0x3d8>
 8009be6:	2380      	movs	r3, #128	; 0x80
 8009be8:	e012      	b.n	8009c10 <USART_SetConfig+0x3d8>
 8009bea:	2340      	movs	r3, #64	; 0x40
 8009bec:	e010      	b.n	8009c10 <USART_SetConfig+0x3d8>
 8009bee:	2320      	movs	r3, #32
 8009bf0:	e00e      	b.n	8009c10 <USART_SetConfig+0x3d8>
 8009bf2:	2310      	movs	r3, #16
 8009bf4:	e00c      	b.n	8009c10 <USART_SetConfig+0x3d8>
 8009bf6:	230c      	movs	r3, #12
 8009bf8:	e00a      	b.n	8009c10 <USART_SetConfig+0x3d8>
 8009bfa:	230a      	movs	r3, #10
 8009bfc:	e008      	b.n	8009c10 <USART_SetConfig+0x3d8>
 8009bfe:	2308      	movs	r3, #8
 8009c00:	e006      	b.n	8009c10 <USART_SetConfig+0x3d8>
 8009c02:	2306      	movs	r3, #6
 8009c04:	e004      	b.n	8009c10 <USART_SetConfig+0x3d8>
 8009c06:	2304      	movs	r3, #4
 8009c08:	e002      	b.n	8009c10 <USART_SetConfig+0x3d8>
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	e000      	b.n	8009c10 <USART_SetConfig+0x3d8>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	0019      	movs	r1, r3
 8009c12:	6938      	ldr	r0, [r7, #16]
 8009c14:	f7f6 fa76 	bl	8000104 <__udivsi3>
 8009c18:	0003      	movs	r3, r0
 8009c1a:	005a      	lsls	r2, r3, #1
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	085b      	lsrs	r3, r3, #1
 8009c22:	18d2      	adds	r2, r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	0019      	movs	r1, r3
 8009c2a:	0010      	movs	r0, r2
 8009c2c:	f7f6 fa6a 	bl	8000104 <__udivsi3>
 8009c30:	0003      	movs	r3, r0
 8009c32:	61bb      	str	r3, [r7, #24]
      break;
 8009c34:	e062      	b.n	8009cfc <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d044      	beq.n	8009cc8 <USART_SetConfig+0x490>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d03e      	beq.n	8009cc4 <USART_SetConfig+0x48c>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d038      	beq.n	8009cc0 <USART_SetConfig+0x488>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c52:	2b03      	cmp	r3, #3
 8009c54:	d032      	beq.n	8009cbc <USART_SetConfig+0x484>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	2b04      	cmp	r3, #4
 8009c5c:	d02c      	beq.n	8009cb8 <USART_SetConfig+0x480>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c62:	2b05      	cmp	r3, #5
 8009c64:	d026      	beq.n	8009cb4 <USART_SetConfig+0x47c>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	2b06      	cmp	r3, #6
 8009c6c:	d020      	beq.n	8009cb0 <USART_SetConfig+0x478>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	2b07      	cmp	r3, #7
 8009c74:	d01a      	beq.n	8009cac <USART_SetConfig+0x474>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7a:	2b08      	cmp	r3, #8
 8009c7c:	d014      	beq.n	8009ca8 <USART_SetConfig+0x470>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c82:	2b09      	cmp	r3, #9
 8009c84:	d00e      	beq.n	8009ca4 <USART_SetConfig+0x46c>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8a:	2b0a      	cmp	r3, #10
 8009c8c:	d008      	beq.n	8009ca0 <USART_SetConfig+0x468>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c92:	2b0b      	cmp	r3, #11
 8009c94:	d102      	bne.n	8009c9c <USART_SetConfig+0x464>
 8009c96:	2380      	movs	r3, #128	; 0x80
 8009c98:	005b      	lsls	r3, r3, #1
 8009c9a:	e016      	b.n	8009cca <USART_SetConfig+0x492>
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e014      	b.n	8009cca <USART_SetConfig+0x492>
 8009ca0:	2380      	movs	r3, #128	; 0x80
 8009ca2:	e012      	b.n	8009cca <USART_SetConfig+0x492>
 8009ca4:	2340      	movs	r3, #64	; 0x40
 8009ca6:	e010      	b.n	8009cca <USART_SetConfig+0x492>
 8009ca8:	2320      	movs	r3, #32
 8009caa:	e00e      	b.n	8009cca <USART_SetConfig+0x492>
 8009cac:	2310      	movs	r3, #16
 8009cae:	e00c      	b.n	8009cca <USART_SetConfig+0x492>
 8009cb0:	230c      	movs	r3, #12
 8009cb2:	e00a      	b.n	8009cca <USART_SetConfig+0x492>
 8009cb4:	230a      	movs	r3, #10
 8009cb6:	e008      	b.n	8009cca <USART_SetConfig+0x492>
 8009cb8:	2308      	movs	r3, #8
 8009cba:	e006      	b.n	8009cca <USART_SetConfig+0x492>
 8009cbc:	2306      	movs	r3, #6
 8009cbe:	e004      	b.n	8009cca <USART_SetConfig+0x492>
 8009cc0:	2304      	movs	r3, #4
 8009cc2:	e002      	b.n	8009cca <USART_SetConfig+0x492>
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	e000      	b.n	8009cca <USART_SetConfig+0x492>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	0019      	movs	r1, r3
 8009ccc:	2380      	movs	r3, #128	; 0x80
 8009cce:	0218      	lsls	r0, r3, #8
 8009cd0:	f7f6 fa18 	bl	8000104 <__udivsi3>
 8009cd4:	0003      	movs	r3, r0
 8009cd6:	005a      	lsls	r2, r3, #1
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	085b      	lsrs	r3, r3, #1
 8009cde:	18d2      	adds	r2, r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	0019      	movs	r1, r3
 8009ce6:	0010      	movs	r0, r2
 8009ce8:	f7f6 fa0c 	bl	8000104 <__udivsi3>
 8009cec:	0003      	movs	r3, r0
 8009cee:	61bb      	str	r3, [r7, #24]
      break;
 8009cf0:	e004      	b.n	8009cfc <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 8009cf2:	231e      	movs	r3, #30
 8009cf4:	18fb      	adds	r3, r7, r3
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	701a      	strb	r2, [r3, #0]
      break;
 8009cfa:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	2b0f      	cmp	r3, #15
 8009d00:	d91c      	bls.n	8009d3c <USART_SetConfig+0x504>
 8009d02:	69ba      	ldr	r2, [r7, #24]
 8009d04:	2380      	movs	r3, #128	; 0x80
 8009d06:	025b      	lsls	r3, r3, #9
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d217      	bcs.n	8009d3c <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	200e      	movs	r0, #14
 8009d12:	183b      	adds	r3, r7, r0
 8009d14:	210f      	movs	r1, #15
 8009d16:	438a      	bics	r2, r1
 8009d18:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	085b      	lsrs	r3, r3, #1
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	2207      	movs	r2, #7
 8009d22:	4013      	ands	r3, r2
 8009d24:	b299      	uxth	r1, r3
 8009d26:	183b      	adds	r3, r7, r0
 8009d28:	183a      	adds	r2, r7, r0
 8009d2a:	8812      	ldrh	r2, [r2, #0]
 8009d2c:	430a      	orrs	r2, r1
 8009d2e:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	183a      	adds	r2, r7, r0
 8009d36:	8812      	ldrh	r2, [r2, #0]
 8009d38:	60da      	str	r2, [r3, #12]
 8009d3a:	e003      	b.n	8009d44 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 8009d3c:	231e      	movs	r3, #30
 8009d3e:	18fb      	adds	r3, r7, r3
 8009d40:	2201      	movs	r2, #1
 8009d42:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8009d5c:	231e      	movs	r3, #30
 8009d5e:	18fb      	adds	r3, r7, r3
 8009d60:	781b      	ldrb	r3, [r3, #0]
}
 8009d62:	0018      	movs	r0, r3
 8009d64:	46bd      	mov	sp, r7
 8009d66:	b008      	add	sp, #32
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	46c0      	nop			; (mov r8, r8)
 8009d6c:	00f42400 	.word	0x00f42400

08009d70 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af02      	add	r7, sp, #8
 8009d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d7e:	f7f9 f977 	bl	8003070 <HAL_GetTick>
 8009d82:	0003      	movs	r3, r0
 8009d84:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2208      	movs	r2, #8
 8009d8e:	4013      	ands	r3, r2
 8009d90:	2b08      	cmp	r3, #8
 8009d92:	d10e      	bne.n	8009db2 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	2380      	movs	r3, #128	; 0x80
 8009d98:	0399      	lsls	r1, r3, #14
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	23fa      	movs	r3, #250	; 0xfa
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	0013      	movs	r3, r2
 8009da4:	2200      	movs	r2, #0
 8009da6:	f7ff fd11 	bl	80097cc <USART_WaitOnFlagUntilTimeout>
 8009daa:	1e03      	subs	r3, r0, #0
 8009dac:	d001      	beq.n	8009db2 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dae:	2303      	movs	r3, #3
 8009db0:	e01e      	b.n	8009df0 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2204      	movs	r2, #4
 8009dba:	4013      	ands	r3, r2
 8009dbc:	2b04      	cmp	r3, #4
 8009dbe:	d10e      	bne.n	8009dde <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	2380      	movs	r3, #128	; 0x80
 8009dc4:	03d9      	lsls	r1, r3, #15
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	23fa      	movs	r3, #250	; 0xfa
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	9300      	str	r3, [sp, #0]
 8009dce:	0013      	movs	r3, r2
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f7ff fcfb 	bl	80097cc <USART_WaitOnFlagUntilTimeout>
 8009dd6:	1e03      	subs	r3, r0, #0
 8009dd8:	d001      	beq.n	8009dde <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e008      	b.n	8009df0 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2259      	movs	r2, #89	; 0x59
 8009de2:	2101      	movs	r1, #1
 8009de4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2258      	movs	r2, #88	; 0x58
 8009dea:	2100      	movs	r1, #0
 8009dec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	0018      	movs	r0, r3
 8009df2:	46bd      	mov	sp, r7
 8009df4:	b004      	add	sp, #16
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2140      	movs	r1, #64	; 0x40
 8009e0c:	438a      	bics	r2, r1
 8009e0e:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	689a      	ldr	r2, [r3, #8]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2101      	movs	r1, #1
 8009e1c:	438a      	bics	r2, r1
 8009e1e:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2259      	movs	r2, #89	; 0x59
 8009e2a:	5c9b      	ldrb	r3, [r3, r2]
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	2b12      	cmp	r3, #18
 8009e30:	d114      	bne.n	8009e5c <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2208      	movs	r2, #8
 8009e38:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	699a      	ldr	r2, [r3, #24]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2108      	movs	r1, #8
 8009e46:	430a      	orrs	r2, r1
 8009e48:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2259      	movs	r2, #89	; 0x59
 8009e4e:	2101      	movs	r1, #1
 8009e50:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	0018      	movs	r0, r3
 8009e56:	f7f7 f8ed 	bl	8001034 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009e5a:	e00c      	b.n	8009e76 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d107      	bne.n	8009e76 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2259      	movs	r2, #89	; 0x59
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	0018      	movs	r0, r3
 8009e72:	f7ff fbff 	bl	8009674 <HAL_USART_TxRxCpltCallback>
}
 8009e76:	46c0      	nop			; (mov r8, r8)
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	b002      	add	sp, #8
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b082      	sub	sp, #8
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e86:	46c0      	nop			; (mov r8, r8)
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	b002      	add	sp, #8
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b082      	sub	sp, #8
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e96:	46c0      	nop			; (mov r8, r8)
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	b002      	add	sp, #8
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <LL_GPIO_SetPinMode>:
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6819      	ldr	r1, [r3, #0]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	435b      	muls	r3, r3
 8009eb2:	001a      	movs	r2, r3
 8009eb4:	0013      	movs	r3, r2
 8009eb6:	005b      	lsls	r3, r3, #1
 8009eb8:	189b      	adds	r3, r3, r2
 8009eba:	43db      	mvns	r3, r3
 8009ebc:	400b      	ands	r3, r1
 8009ebe:	001a      	movs	r2, r3
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	435b      	muls	r3, r3
 8009ec4:	6879      	ldr	r1, [r7, #4]
 8009ec6:	434b      	muls	r3, r1
 8009ec8:	431a      	orrs	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	601a      	str	r2, [r3, #0]
}
 8009ece:	46c0      	nop			; (mov r8, r8)
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	b004      	add	sp, #16
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <LL_GPIO_SetPinOutputType>:
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	60b9      	str	r1, [r7, #8]
 8009ee0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	43d2      	mvns	r2, r2
 8009eea:	401a      	ands	r2, r3
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	6879      	ldr	r1, [r7, #4]
 8009ef0:	434b      	muls	r3, r1
 8009ef2:	431a      	orrs	r2, r3
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	605a      	str	r2, [r3, #4]
}
 8009ef8:	46c0      	nop			; (mov r8, r8)
 8009efa:	46bd      	mov	sp, r7
 8009efc:	b004      	add	sp, #16
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <LL_GPIO_SetPinSpeed>:
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6899      	ldr	r1, [r3, #8]
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	435b      	muls	r3, r3
 8009f14:	001a      	movs	r2, r3
 8009f16:	0013      	movs	r3, r2
 8009f18:	005b      	lsls	r3, r3, #1
 8009f1a:	189b      	adds	r3, r3, r2
 8009f1c:	43db      	mvns	r3, r3
 8009f1e:	400b      	ands	r3, r1
 8009f20:	001a      	movs	r2, r3
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	435b      	muls	r3, r3
 8009f26:	6879      	ldr	r1, [r7, #4]
 8009f28:	434b      	muls	r3, r1
 8009f2a:	431a      	orrs	r2, r3
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	609a      	str	r2, [r3, #8]
}
 8009f30:	46c0      	nop			; (mov r8, r8)
 8009f32:	46bd      	mov	sp, r7
 8009f34:	b004      	add	sp, #16
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <LL_GPIO_SetPinPull>:
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	68d9      	ldr	r1, [r3, #12]
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	435b      	muls	r3, r3
 8009f4c:	001a      	movs	r2, r3
 8009f4e:	0013      	movs	r3, r2
 8009f50:	005b      	lsls	r3, r3, #1
 8009f52:	189b      	adds	r3, r3, r2
 8009f54:	43db      	mvns	r3, r3
 8009f56:	400b      	ands	r3, r1
 8009f58:	001a      	movs	r2, r3
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	435b      	muls	r3, r3
 8009f5e:	6879      	ldr	r1, [r7, #4]
 8009f60:	434b      	muls	r3, r1
 8009f62:	431a      	orrs	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	60da      	str	r2, [r3, #12]
}
 8009f68:	46c0      	nop			; (mov r8, r8)
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	b004      	add	sp, #16
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <LL_GPIO_SetAFPin_0_7>:
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6a19      	ldr	r1, [r3, #32]
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	435b      	muls	r3, r3
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	4353      	muls	r3, r2
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	435a      	muls	r2, r3
 8009f8c:	0013      	movs	r3, r2
 8009f8e:	011b      	lsls	r3, r3, #4
 8009f90:	1a9b      	subs	r3, r3, r2
 8009f92:	43db      	mvns	r3, r3
 8009f94:	400b      	ands	r3, r1
 8009f96:	001a      	movs	r2, r3
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	435b      	muls	r3, r3
 8009f9c:	68b9      	ldr	r1, [r7, #8]
 8009f9e:	434b      	muls	r3, r1
 8009fa0:	68b9      	ldr	r1, [r7, #8]
 8009fa2:	434b      	muls	r3, r1
 8009fa4:	6879      	ldr	r1, [r7, #4]
 8009fa6:	434b      	muls	r3, r1
 8009fa8:	431a      	orrs	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	621a      	str	r2, [r3, #32]
}
 8009fae:	46c0      	nop			; (mov r8, r8)
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	b004      	add	sp, #16
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <LL_GPIO_SetAFPin_8_15>:
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b084      	sub	sp, #16
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	60f8      	str	r0, [r7, #12]
 8009fbe:	60b9      	str	r1, [r7, #8]
 8009fc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	0a1b      	lsrs	r3, r3, #8
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	0a12      	lsrs	r2, r2, #8
 8009fce:	4353      	muls	r3, r2
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	0a12      	lsrs	r2, r2, #8
 8009fd4:	4353      	muls	r3, r2
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	0a12      	lsrs	r2, r2, #8
 8009fda:	435a      	muls	r2, r3
 8009fdc:	0013      	movs	r3, r2
 8009fde:	011b      	lsls	r3, r3, #4
 8009fe0:	1a9b      	subs	r3, r3, r2
 8009fe2:	43db      	mvns	r3, r3
 8009fe4:	400b      	ands	r3, r1
 8009fe6:	001a      	movs	r2, r3
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	0a1b      	lsrs	r3, r3, #8
 8009fec:	68b9      	ldr	r1, [r7, #8]
 8009fee:	0a09      	lsrs	r1, r1, #8
 8009ff0:	434b      	muls	r3, r1
 8009ff2:	68b9      	ldr	r1, [r7, #8]
 8009ff4:	0a09      	lsrs	r1, r1, #8
 8009ff6:	434b      	muls	r3, r1
 8009ff8:	68b9      	ldr	r1, [r7, #8]
 8009ffa:	0a09      	lsrs	r1, r1, #8
 8009ffc:	434b      	muls	r3, r1
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	434b      	muls	r3, r1
 800a002:	431a      	orrs	r2, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a008:	46c0      	nop			; (mov r8, r8)
 800a00a:	46bd      	mov	sp, r7
 800a00c:	b004      	add	sp, #16
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800a01a:	2300      	movs	r3, #0
 800a01c:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a01e:	e047      	b.n	800a0b0 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2101      	movs	r1, #1
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4091      	lsls	r1, r2
 800a02a:	000a      	movs	r2, r1
 800a02c:	4013      	ands	r3, r2
 800a02e:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d039      	beq.n	800a0aa <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d003      	beq.n	800a046 <LL_GPIO_Init+0x36>
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	2b02      	cmp	r3, #2
 800a044:	d10d      	bne.n	800a062 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	68b9      	ldr	r1, [r7, #8]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	0018      	movs	r0, r3
 800a050:	f7ff ff56 	bl	8009f00 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	68da      	ldr	r2, [r3, #12]
 800a058:	68b9      	ldr	r1, [r7, #8]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	0018      	movs	r0, r3
 800a05e:	f7ff ff3a 	bl	8009ed6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	691a      	ldr	r2, [r3, #16]
 800a066:	68b9      	ldr	r1, [r7, #8]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	0018      	movs	r0, r3
 800a06c:	f7ff ff64 	bl	8009f38 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	2b02      	cmp	r3, #2
 800a076:	d111      	bne.n	800a09c <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	2bff      	cmp	r3, #255	; 0xff
 800a07c:	d807      	bhi.n	800a08e <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	695a      	ldr	r2, [r3, #20]
 800a082:	68b9      	ldr	r1, [r7, #8]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	0018      	movs	r0, r3
 800a088:	f7ff ff72 	bl	8009f70 <LL_GPIO_SetAFPin_0_7>
 800a08c:	e006      	b.n	800a09c <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	695a      	ldr	r2, [r3, #20]
 800a092:	68b9      	ldr	r1, [r7, #8]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	0018      	movs	r0, r3
 800a098:	f7ff ff8d 	bl	8009fb6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	68b9      	ldr	r1, [r7, #8]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	0018      	movs	r0, r3
 800a0a6:	f7ff fefa 	bl	8009e9e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	40da      	lsrs	r2, r3
 800a0b8:	1e13      	subs	r3, r2, #0
 800a0ba:	d1b1      	bne.n	800a020 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	0018      	movs	r0, r3
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	b004      	add	sp, #16
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <LL_RCC_HSI_IsReady>:
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a0cc:	4b07      	ldr	r3, [pc, #28]	; (800a0ec <LL_RCC_HSI_IsReady+0x24>)
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	2380      	movs	r3, #128	; 0x80
 800a0d2:	00db      	lsls	r3, r3, #3
 800a0d4:	401a      	ands	r2, r3
 800a0d6:	2380      	movs	r3, #128	; 0x80
 800a0d8:	00db      	lsls	r3, r3, #3
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d101      	bne.n	800a0e2 <LL_RCC_HSI_IsReady+0x1a>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e000      	b.n	800a0e4 <LL_RCC_HSI_IsReady+0x1c>
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	0018      	movs	r0, r3
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
 800a0ea:	46c0      	nop			; (mov r8, r8)
 800a0ec:	40021000 	.word	0x40021000

0800a0f0 <LL_RCC_LSE_IsReady>:
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a0f4:	4b05      	ldr	r3, [pc, #20]	; (800a10c <LL_RCC_LSE_IsReady+0x1c>)
 800a0f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d101      	bne.n	800a104 <LL_RCC_LSE_IsReady+0x14>
 800a100:	2301      	movs	r3, #1
 800a102:	e000      	b.n	800a106 <LL_RCC_LSE_IsReady+0x16>
 800a104:	2300      	movs	r3, #0
}
 800a106:	0018      	movs	r0, r3
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	40021000 	.word	0x40021000

0800a110 <LL_RCC_GetSysClkSource>:
{
 800a110:	b580      	push	{r7, lr}
 800a112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a114:	4b03      	ldr	r3, [pc, #12]	; (800a124 <LL_RCC_GetSysClkSource+0x14>)
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	2238      	movs	r2, #56	; 0x38
 800a11a:	4013      	ands	r3, r2
}
 800a11c:	0018      	movs	r0, r3
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	46c0      	nop			; (mov r8, r8)
 800a124:	40021000 	.word	0x40021000

0800a128 <LL_RCC_GetAHBPrescaler>:
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a12c:	4b03      	ldr	r3, [pc, #12]	; (800a13c <LL_RCC_GetAHBPrescaler+0x14>)
 800a12e:	689a      	ldr	r2, [r3, #8]
 800a130:	23f0      	movs	r3, #240	; 0xf0
 800a132:	011b      	lsls	r3, r3, #4
 800a134:	4013      	ands	r3, r2
}
 800a136:	0018      	movs	r0, r3
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	40021000 	.word	0x40021000

0800a140 <LL_RCC_GetAPB1Prescaler>:
{
 800a140:	b580      	push	{r7, lr}
 800a142:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a144:	4b03      	ldr	r3, [pc, #12]	; (800a154 <LL_RCC_GetAPB1Prescaler+0x14>)
 800a146:	689a      	ldr	r2, [r3, #8]
 800a148:	23e0      	movs	r3, #224	; 0xe0
 800a14a:	01db      	lsls	r3, r3, #7
 800a14c:	4013      	ands	r3, r2
}
 800a14e:	0018      	movs	r0, r3
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	40021000 	.word	0x40021000

0800a158 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a160:	4b05      	ldr	r3, [pc, #20]	; (800a178 <LL_RCC_GetUSARTClockSource+0x20>)
 800a162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	401a      	ands	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	041b      	lsls	r3, r3, #16
 800a16c:	4313      	orrs	r3, r2
}
 800a16e:	0018      	movs	r0, r3
 800a170:	46bd      	mov	sp, r7
 800a172:	b002      	add	sp, #8
 800a174:	bd80      	pop	{r7, pc}
 800a176:	46c0      	nop			; (mov r8, r8)
 800a178:	40021000 	.word	0x40021000

0800a17c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a180:	4b03      	ldr	r3, [pc, #12]	; (800a190 <LL_RCC_PLL_GetN+0x14>)
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	0a1b      	lsrs	r3, r3, #8
 800a186:	227f      	movs	r2, #127	; 0x7f
 800a188:	4013      	ands	r3, r2
}
 800a18a:	0018      	movs	r0, r3
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	40021000 	.word	0x40021000

0800a194 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a198:	4b03      	ldr	r3, [pc, #12]	; (800a1a8 <LL_RCC_PLL_GetR+0x14>)
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	0f5b      	lsrs	r3, r3, #29
 800a19e:	075b      	lsls	r3, r3, #29
}
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	46c0      	nop			; (mov r8, r8)
 800a1a8:	40021000 	.word	0x40021000

0800a1ac <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a1b0:	4b03      	ldr	r3, [pc, #12]	; (800a1c0 <LL_RCC_PLL_GetMainSource+0x14>)
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	2203      	movs	r2, #3
 800a1b6:	4013      	ands	r3, r2
}
 800a1b8:	0018      	movs	r0, r3
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	46c0      	nop			; (mov r8, r8)
 800a1c0:	40021000 	.word	0x40021000

0800a1c4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a1c8:	4b03      	ldr	r3, [pc, #12]	; (800a1d8 <LL_RCC_PLL_GetDivider+0x14>)
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	2270      	movs	r2, #112	; 0x70
 800a1ce:	4013      	ands	r3, r2
}
 800a1d0:	0018      	movs	r0, r3
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	46c0      	nop			; (mov r8, r8)
 800a1d8:	40021000 	.word	0x40021000

0800a1dc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800a1e4:	f000 f8a8 	bl	800a338 <RCC_GetSystemClockFreq>
 800a1e8:	0002      	movs	r2, r0
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	0018      	movs	r0, r3
 800a1f4:	f000 f8ce 	bl	800a394 <RCC_GetHCLKClockFreq>
 800a1f8:	0002      	movs	r2, r0
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	0018      	movs	r0, r3
 800a204:	f000 f8de 	bl	800a3c4 <RCC_GetPCLK1ClockFreq>
 800a208:	0002      	movs	r2, r0
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	609a      	str	r2, [r3, #8]
}
 800a20e:	46c0      	nop			; (mov r8, r8)
 800a210:	46bd      	mov	sp, r7
 800a212:	b002      	add	sp, #8
 800a214:	bd80      	pop	{r7, pc}
	...

0800a218 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a220:	2300      	movs	r3, #0
 800a222:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b03      	cmp	r3, #3
 800a228:	d134      	bne.n	800a294 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	0018      	movs	r0, r3
 800a22e:	f7ff ff93 	bl	800a158 <LL_RCC_GetUSARTClockSource>
 800a232:	0003      	movs	r3, r0
 800a234:	4a39      	ldr	r2, [pc, #228]	; (800a31c <LL_RCC_GetUSARTClockFreq+0x104>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d016      	beq.n	800a268 <LL_RCC_GetUSARTClockFreq+0x50>
 800a23a:	4a38      	ldr	r2, [pc, #224]	; (800a31c <LL_RCC_GetUSARTClockFreq+0x104>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d81c      	bhi.n	800a27a <LL_RCC_GetUSARTClockFreq+0x62>
 800a240:	4a37      	ldr	r2, [pc, #220]	; (800a320 <LL_RCC_GetUSARTClockFreq+0x108>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d003      	beq.n	800a24e <LL_RCC_GetUSARTClockFreq+0x36>
 800a246:	4a37      	ldr	r2, [pc, #220]	; (800a324 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d005      	beq.n	800a258 <LL_RCC_GetUSARTClockFreq+0x40>
 800a24c:	e015      	b.n	800a27a <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a24e:	f000 f873 	bl	800a338 <RCC_GetSystemClockFreq>
 800a252:	0003      	movs	r3, r0
 800a254:	60fb      	str	r3, [r7, #12]
        break;
 800a256:	e05c      	b.n	800a312 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a258:	f7ff ff36 	bl	800a0c8 <LL_RCC_HSI_IsReady>
 800a25c:	0003      	movs	r3, r0
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d150      	bne.n	800a304 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800a262:	4b31      	ldr	r3, [pc, #196]	; (800a328 <LL_RCC_GetUSARTClockFreq+0x110>)
 800a264:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a266:	e04d      	b.n	800a304 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a268:	f7ff ff42 	bl	800a0f0 <LL_RCC_LSE_IsReady>
 800a26c:	0003      	movs	r3, r0
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d14a      	bne.n	800a308 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800a272:	2380      	movs	r3, #128	; 0x80
 800a274:	021b      	lsls	r3, r3, #8
 800a276:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a278:	e046      	b.n	800a308 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a27a:	f000 f85d 	bl	800a338 <RCC_GetSystemClockFreq>
 800a27e:	0003      	movs	r3, r0
 800a280:	0018      	movs	r0, r3
 800a282:	f000 f887 	bl	800a394 <RCC_GetHCLKClockFreq>
 800a286:	0003      	movs	r3, r0
 800a288:	0018      	movs	r0, r3
 800a28a:	f000 f89b 	bl	800a3c4 <RCC_GetPCLK1ClockFreq>
 800a28e:	0003      	movs	r3, r0
 800a290:	60fb      	str	r3, [r7, #12]
        break;
 800a292:	e03e      	b.n	800a312 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b0c      	cmp	r3, #12
 800a298:	d13b      	bne.n	800a312 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	0018      	movs	r0, r3
 800a29e:	f7ff ff5b 	bl	800a158 <LL_RCC_GetUSARTClockSource>
 800a2a2:	0003      	movs	r3, r0
 800a2a4:	4a21      	ldr	r2, [pc, #132]	; (800a32c <LL_RCC_GetUSARTClockFreq+0x114>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d016      	beq.n	800a2d8 <LL_RCC_GetUSARTClockFreq+0xc0>
 800a2aa:	4a20      	ldr	r2, [pc, #128]	; (800a32c <LL_RCC_GetUSARTClockFreq+0x114>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d81c      	bhi.n	800a2ea <LL_RCC_GetUSARTClockFreq+0xd2>
 800a2b0:	4a1f      	ldr	r2, [pc, #124]	; (800a330 <LL_RCC_GetUSARTClockFreq+0x118>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d003      	beq.n	800a2be <LL_RCC_GetUSARTClockFreq+0xa6>
 800a2b6:	4a1f      	ldr	r2, [pc, #124]	; (800a334 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d005      	beq.n	800a2c8 <LL_RCC_GetUSARTClockFreq+0xb0>
 800a2bc:	e015      	b.n	800a2ea <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a2be:	f000 f83b 	bl	800a338 <RCC_GetSystemClockFreq>
 800a2c2:	0003      	movs	r3, r0
 800a2c4:	60fb      	str	r3, [r7, #12]
        break;
 800a2c6:	e024      	b.n	800a312 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a2c8:	f7ff fefe 	bl	800a0c8 <LL_RCC_HSI_IsReady>
 800a2cc:	0003      	movs	r3, r0
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d11c      	bne.n	800a30c <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800a2d2:	4b15      	ldr	r3, [pc, #84]	; (800a328 <LL_RCC_GetUSARTClockFreq+0x110>)
 800a2d4:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a2d6:	e019      	b.n	800a30c <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a2d8:	f7ff ff0a 	bl	800a0f0 <LL_RCC_LSE_IsReady>
 800a2dc:	0003      	movs	r3, r0
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d116      	bne.n	800a310 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800a2e2:	2380      	movs	r3, #128	; 0x80
 800a2e4:	021b      	lsls	r3, r3, #8
 800a2e6:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a2e8:	e012      	b.n	800a310 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a2ea:	f000 f825 	bl	800a338 <RCC_GetSystemClockFreq>
 800a2ee:	0003      	movs	r3, r0
 800a2f0:	0018      	movs	r0, r3
 800a2f2:	f000 f84f 	bl	800a394 <RCC_GetHCLKClockFreq>
 800a2f6:	0003      	movs	r3, r0
 800a2f8:	0018      	movs	r0, r3
 800a2fa:	f000 f863 	bl	800a3c4 <RCC_GetPCLK1ClockFreq>
 800a2fe:	0003      	movs	r3, r0
 800a300:	60fb      	str	r3, [r7, #12]
        break;
 800a302:	e006      	b.n	800a312 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a304:	46c0      	nop			; (mov r8, r8)
 800a306:	e004      	b.n	800a312 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a308:	46c0      	nop			; (mov r8, r8)
 800a30a:	e002      	b.n	800a312 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a30c:	46c0      	nop			; (mov r8, r8)
 800a30e:	e000      	b.n	800a312 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a310:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800a312:	68fb      	ldr	r3, [r7, #12]
}
 800a314:	0018      	movs	r0, r3
 800a316:	46bd      	mov	sp, r7
 800a318:	b004      	add	sp, #16
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	00030003 	.word	0x00030003
 800a320:	00030001 	.word	0x00030001
 800a324:	00030002 	.word	0x00030002
 800a328:	00f42400 	.word	0x00f42400
 800a32c:	000c000c 	.word	0x000c000c
 800a330:	000c0004 	.word	0x000c0004
 800a334:	000c0008 	.word	0x000c0008

0800a338 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800a33e:	f7ff fee7 	bl	800a110 <LL_RCC_GetSysClkSource>
 800a342:	0003      	movs	r3, r0
 800a344:	2b08      	cmp	r3, #8
 800a346:	d002      	beq.n	800a34e <RCC_GetSystemClockFreq+0x16>
 800a348:	2b10      	cmp	r3, #16
 800a34a:	d003      	beq.n	800a354 <RCC_GetSystemClockFreq+0x1c>
 800a34c:	e007      	b.n	800a35e <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800a34e:	4b0e      	ldr	r3, [pc, #56]	; (800a388 <RCC_GetSystemClockFreq+0x50>)
 800a350:	607b      	str	r3, [r7, #4]
      break;
 800a352:	e014      	b.n	800a37e <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800a354:	f000 f84c 	bl	800a3f0 <RCC_PLL_GetFreqDomain_SYS>
 800a358:	0003      	movs	r3, r0
 800a35a:	607b      	str	r3, [r7, #4]
      break;
 800a35c:	e00f      	b.n	800a37e <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a35e:	4b0b      	ldr	r3, [pc, #44]	; (800a38c <RCC_GetSystemClockFreq+0x54>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	0adb      	lsrs	r3, r3, #11
 800a364:	2207      	movs	r2, #7
 800a366:	4013      	ands	r3, r2
 800a368:	2201      	movs	r2, #1
 800a36a:	409a      	lsls	r2, r3
 800a36c:	0013      	movs	r3, r2
 800a36e:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800a370:	6839      	ldr	r1, [r7, #0]
 800a372:	4807      	ldr	r0, [pc, #28]	; (800a390 <RCC_GetSystemClockFreq+0x58>)
 800a374:	f7f5 fec6 	bl	8000104 <__udivsi3>
 800a378:	0003      	movs	r3, r0
 800a37a:	607b      	str	r3, [r7, #4]
      break;
 800a37c:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800a37e:	687b      	ldr	r3, [r7, #4]
}
 800a380:	0018      	movs	r0, r3
 800a382:	46bd      	mov	sp, r7
 800a384:	b002      	add	sp, #8
 800a386:	bd80      	pop	{r7, pc}
 800a388:	007a1200 	.word	0x007a1200
 800a38c:	40021000 	.word	0x40021000
 800a390:	00f42400 	.word	0x00f42400

0800a394 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800a39c:	f7ff fec4 	bl	800a128 <LL_RCC_GetAHBPrescaler>
 800a3a0:	0003      	movs	r3, r0
 800a3a2:	0a1b      	lsrs	r3, r3, #8
 800a3a4:	220f      	movs	r2, #15
 800a3a6:	401a      	ands	r2, r3
 800a3a8:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <RCC_GetHCLKClockFreq+0x2c>)
 800a3aa:	0092      	lsls	r2, r2, #2
 800a3ac:	58d3      	ldr	r3, [r2, r3]
 800a3ae:	221f      	movs	r2, #31
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	40da      	lsrs	r2, r3
 800a3b6:	0013      	movs	r3, r2
}
 800a3b8:	0018      	movs	r0, r3
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	b002      	add	sp, #8
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	0800a738 	.word	0x0800a738

0800a3c4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800a3cc:	f7ff feb8 	bl	800a140 <LL_RCC_GetAPB1Prescaler>
 800a3d0:	0003      	movs	r3, r0
 800a3d2:	0b1a      	lsrs	r2, r3, #12
 800a3d4:	4b05      	ldr	r3, [pc, #20]	; (800a3ec <RCC_GetPCLK1ClockFreq+0x28>)
 800a3d6:	0092      	lsls	r2, r2, #2
 800a3d8:	58d3      	ldr	r3, [r2, r3]
 800a3da:	221f      	movs	r2, #31
 800a3dc:	4013      	ands	r3, r2
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	40da      	lsrs	r2, r3
 800a3e2:	0013      	movs	r3, r2
}
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	b002      	add	sp, #8
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	0800a778 	.word	0x0800a778

0800a3f0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800a3f0:	b590      	push	{r4, r7, lr}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800a3f6:	f7ff fed9 	bl	800a1ac <LL_RCC_PLL_GetMainSource>
 800a3fa:	0003      	movs	r3, r0
 800a3fc:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	2b02      	cmp	r3, #2
 800a402:	d003      	beq.n	800a40c <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	2b03      	cmp	r3, #3
 800a408:	d003      	beq.n	800a412 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800a40a:	e005      	b.n	800a418 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800a40c:	4b13      	ldr	r3, [pc, #76]	; (800a45c <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a40e:	607b      	str	r3, [r7, #4]
      break;
 800a410:	e005      	b.n	800a41e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800a412:	4b13      	ldr	r3, [pc, #76]	; (800a460 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800a414:	607b      	str	r3, [r7, #4]
      break;
 800a416:	e002      	b.n	800a41e <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800a418:	4b10      	ldr	r3, [pc, #64]	; (800a45c <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a41a:	607b      	str	r3, [r7, #4]
      break;
 800a41c:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800a41e:	f7ff fead 	bl	800a17c <LL_RCC_PLL_GetN>
 800a422:	0002      	movs	r2, r0
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4353      	muls	r3, r2
 800a428:	001c      	movs	r4, r3
 800a42a:	f7ff fecb 	bl	800a1c4 <LL_RCC_PLL_GetDivider>
 800a42e:	0003      	movs	r3, r0
 800a430:	091b      	lsrs	r3, r3, #4
 800a432:	3301      	adds	r3, #1
 800a434:	0019      	movs	r1, r3
 800a436:	0020      	movs	r0, r4
 800a438:	f7f5 fe64 	bl	8000104 <__udivsi3>
 800a43c:	0003      	movs	r3, r0
 800a43e:	001c      	movs	r4, r3
 800a440:	f7ff fea8 	bl	800a194 <LL_RCC_PLL_GetR>
 800a444:	0003      	movs	r3, r0
 800a446:	0f5b      	lsrs	r3, r3, #29
 800a448:	3301      	adds	r3, #1
 800a44a:	0019      	movs	r1, r3
 800a44c:	0020      	movs	r0, r4
 800a44e:	f7f5 fe59 	bl	8000104 <__udivsi3>
 800a452:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800a454:	0018      	movs	r0, r3
 800a456:	46bd      	mov	sp, r7
 800a458:	b003      	add	sp, #12
 800a45a:	bd90      	pop	{r4, r7, pc}
 800a45c:	00f42400 	.word	0x00f42400
 800a460:	007a1200 	.word	0x007a1200

0800a464 <LL_USART_IsEnabled>:
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2201      	movs	r2, #1
 800a472:	4013      	ands	r3, r2
 800a474:	2b01      	cmp	r3, #1
 800a476:	d101      	bne.n	800a47c <LL_USART_IsEnabled+0x18>
 800a478:	2301      	movs	r3, #1
 800a47a:	e000      	b.n	800a47e <LL_USART_IsEnabled+0x1a>
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	0018      	movs	r0, r3
 800a480:	46bd      	mov	sp, r7
 800a482:	b002      	add	sp, #8
 800a484:	bd80      	pop	{r7, pc}

0800a486 <LL_USART_SetPrescaler>:
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b082      	sub	sp, #8
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a494:	220f      	movs	r2, #15
 800a496:	4393      	bics	r3, r2
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	b292      	uxth	r2, r2
 800a49c:	431a      	orrs	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a4a2:	46c0      	nop			; (mov r8, r8)
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	b002      	add	sp, #8
 800a4a8:	bd80      	pop	{r7, pc}
	...

0800a4ac <LL_USART_SetStopBitsLength>:
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	4a05      	ldr	r2, [pc, #20]	; (800a4d0 <LL_USART_SetStopBitsLength+0x24>)
 800a4bc:	401a      	ands	r2, r3
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	431a      	orrs	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	605a      	str	r2, [r3, #4]
}
 800a4c6:	46c0      	nop			; (mov r8, r8)
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	b002      	add	sp, #8
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	46c0      	nop			; (mov r8, r8)
 800a4d0:	ffffcfff 	.word	0xffffcfff

0800a4d4 <LL_USART_SetHWFlowCtrl>:
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	4a05      	ldr	r2, [pc, #20]	; (800a4f8 <LL_USART_SetHWFlowCtrl+0x24>)
 800a4e4:	401a      	ands	r2, r3
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	431a      	orrs	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	609a      	str	r2, [r3, #8]
}
 800a4ee:	46c0      	nop			; (mov r8, r8)
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	b002      	add	sp, #8
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	46c0      	nop			; (mov r8, r8)
 800a4f8:	fffffcff 	.word	0xfffffcff

0800a4fc <LL_USART_SetBaudRate>:
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b0b      	cmp	r3, #11
 800a50e:	d843      	bhi.n	800a598 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	2380      	movs	r3, #128	; 0x80
 800a514:	021b      	lsls	r3, r3, #8
 800a516:	429a      	cmp	r2, r3
 800a518:	d126      	bne.n	800a568 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	001a      	movs	r2, r3
 800a520:	4b1f      	ldr	r3, [pc, #124]	; (800a5a0 <LL_USART_SetBaudRate+0xa4>)
 800a522:	0092      	lsls	r2, r2, #2
 800a524:	58d3      	ldr	r3, [r2, r3]
 800a526:	0019      	movs	r1, r3
 800a528:	68b8      	ldr	r0, [r7, #8]
 800a52a:	f7f5 fdeb 	bl	8000104 <__udivsi3>
 800a52e:	0003      	movs	r3, r0
 800a530:	005a      	lsls	r2, r3, #1
 800a532:	6a3b      	ldr	r3, [r7, #32]
 800a534:	085b      	lsrs	r3, r3, #1
 800a536:	18d3      	adds	r3, r2, r3
 800a538:	6a39      	ldr	r1, [r7, #32]
 800a53a:	0018      	movs	r0, r3
 800a53c:	f7f5 fde2 	bl	8000104 <__udivsi3>
 800a540:	0003      	movs	r3, r0
 800a542:	b29b      	uxth	r3, r3
 800a544:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	4a16      	ldr	r2, [pc, #88]	; (800a5a4 <LL_USART_SetBaudRate+0xa8>)
 800a54a:	4013      	ands	r3, r2
 800a54c:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	085b      	lsrs	r3, r3, #1
 800a552:	b29b      	uxth	r3, r3
 800a554:	001a      	movs	r2, r3
 800a556:	2307      	movs	r3, #7
 800a558:	4013      	ands	r3, r2
 800a55a:	693a      	ldr	r2, [r7, #16]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	693a      	ldr	r2, [r7, #16]
 800a564:	60da      	str	r2, [r3, #12]
}
 800a566:	e017      	b.n	800a598 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	001a      	movs	r2, r3
 800a56e:	4b0c      	ldr	r3, [pc, #48]	; (800a5a0 <LL_USART_SetBaudRate+0xa4>)
 800a570:	0092      	lsls	r2, r2, #2
 800a572:	58d3      	ldr	r3, [r2, r3]
 800a574:	0019      	movs	r1, r3
 800a576:	68b8      	ldr	r0, [r7, #8]
 800a578:	f7f5 fdc4 	bl	8000104 <__udivsi3>
 800a57c:	0003      	movs	r3, r0
 800a57e:	001a      	movs	r2, r3
 800a580:	6a3b      	ldr	r3, [r7, #32]
 800a582:	085b      	lsrs	r3, r3, #1
 800a584:	18d3      	adds	r3, r2, r3
 800a586:	6a39      	ldr	r1, [r7, #32]
 800a588:	0018      	movs	r0, r3
 800a58a:	f7f5 fdbb 	bl	8000104 <__udivsi3>
 800a58e:	0003      	movs	r3, r0
 800a590:	b29b      	uxth	r3, r3
 800a592:	001a      	movs	r2, r3
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	60da      	str	r2, [r3, #12]
}
 800a598:	46c0      	nop			; (mov r8, r8)
 800a59a:	46bd      	mov	sp, r7
 800a59c:	b006      	add	sp, #24
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	0800a7ec 	.word	0x0800a7ec
 800a5a4:	0000fff0 	.word	0x0000fff0

0800a5a8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800a5a8:	b590      	push	{r4, r7, lr}
 800a5aa:	b08b      	sub	sp, #44	; 0x2c
 800a5ac:	af02      	add	r7, sp, #8
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a5b2:	231f      	movs	r3, #31
 800a5b4:	18fb      	adds	r3, r7, r3
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	0018      	movs	r0, r3
 800a5c2:	f7ff ff4f 	bl	800a464 <LL_USART_IsEnabled>
 800a5c6:	1e03      	subs	r3, r0, #0
 800a5c8:	d16a      	bne.n	800a6a0 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a38      	ldr	r2, [pc, #224]	; (800a6b0 <LL_USART_Init+0x108>)
 800a5d0:	401a      	ands	r2, r3
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	6899      	ldr	r1, [r3, #8]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	4319      	orrs	r1, r3
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	4319      	orrs	r1, r3
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	69db      	ldr	r3, [r3, #28]
 800a5e6:	430b      	orrs	r3, r1
 800a5e8:	431a      	orrs	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	68da      	ldr	r2, [r3, #12]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	0011      	movs	r1, r2
 800a5f6:	0018      	movs	r0, r3
 800a5f8:	f7ff ff58 	bl	800a4ac <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	699a      	ldr	r2, [r3, #24]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	0011      	movs	r1, r2
 800a604:	0018      	movs	r0, r3
 800a606:	f7ff ff65 	bl	800a4d4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a29      	ldr	r2, [pc, #164]	; (800a6b4 <LL_USART_Init+0x10c>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d105      	bne.n	800a61e <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800a612:	2003      	movs	r0, #3
 800a614:	f7ff fe00 	bl	800a218 <LL_RCC_GetUSARTClockFreq>
 800a618:	0003      	movs	r3, r0
 800a61a:	61bb      	str	r3, [r7, #24]
 800a61c:	e022      	b.n	800a664 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a25      	ldr	r2, [pc, #148]	; (800a6b8 <LL_USART_Init+0x110>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d105      	bne.n	800a632 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800a626:	200c      	movs	r0, #12
 800a628:	f7ff fdf6 	bl	800a218 <LL_RCC_GetUSARTClockFreq>
 800a62c:	0003      	movs	r3, r0
 800a62e:	61bb      	str	r3, [r7, #24]
 800a630:	e018      	b.n	800a664 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a21      	ldr	r2, [pc, #132]	; (800a6bc <LL_USART_Init+0x114>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d108      	bne.n	800a64c <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a63a:	240c      	movs	r4, #12
 800a63c:	193b      	adds	r3, r7, r4
 800a63e:	0018      	movs	r0, r3
 800a640:	f7ff fdcc 	bl	800a1dc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a644:	193b      	adds	r3, r7, r4
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	61bb      	str	r3, [r7, #24]
 800a64a:	e00b      	b.n	800a664 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a1c      	ldr	r2, [pc, #112]	; (800a6c0 <LL_USART_Init+0x118>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d107      	bne.n	800a664 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a654:	240c      	movs	r4, #12
 800a656:	193b      	adds	r3, r7, r4
 800a658:	0018      	movs	r0, r3
 800a65a:	f7ff fdbf 	bl	800a1dc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a65e:	193b      	adds	r3, r7, r4
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d013      	beq.n	800a692 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00f      	beq.n	800a692 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800a672:	231f      	movs	r3, #31
 800a674:	18fb      	adds	r3, r7, r3
 800a676:	2200      	movs	r2, #0
 800a678:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	69dc      	ldr	r4, [r3, #28]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	69b9      	ldr	r1, [r7, #24]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	9300      	str	r3, [sp, #0]
 800a68c:	0023      	movs	r3, r4
 800a68e:	f7ff ff35 	bl	800a4fc <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	0011      	movs	r1, r2
 800a69a:	0018      	movs	r0, r3
 800a69c:	f7ff fef3 	bl	800a486 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a6a0:	231f      	movs	r3, #31
 800a6a2:	18fb      	adds	r3, r7, r3
 800a6a4:	781b      	ldrb	r3, [r3, #0]
}
 800a6a6:	0018      	movs	r0, r3
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	b009      	add	sp, #36	; 0x24
 800a6ac:	bd90      	pop	{r4, r7, pc}
 800a6ae:	46c0      	nop			; (mov r8, r8)
 800a6b0:	efff69f3 	.word	0xefff69f3
 800a6b4:	40013800 	.word	0x40013800
 800a6b8:	40004400 	.word	0x40004400
 800a6bc:	40004800 	.word	0x40004800
 800a6c0:	40004c00 	.word	0x40004c00

0800a6c4 <__libc_init_array>:
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	2600      	movs	r6, #0
 800a6c8:	4d0c      	ldr	r5, [pc, #48]	; (800a6fc <__libc_init_array+0x38>)
 800a6ca:	4c0d      	ldr	r4, [pc, #52]	; (800a700 <__libc_init_array+0x3c>)
 800a6cc:	1b64      	subs	r4, r4, r5
 800a6ce:	10a4      	asrs	r4, r4, #2
 800a6d0:	42a6      	cmp	r6, r4
 800a6d2:	d109      	bne.n	800a6e8 <__libc_init_array+0x24>
 800a6d4:	2600      	movs	r6, #0
 800a6d6:	f000 f821 	bl	800a71c <_init>
 800a6da:	4d0a      	ldr	r5, [pc, #40]	; (800a704 <__libc_init_array+0x40>)
 800a6dc:	4c0a      	ldr	r4, [pc, #40]	; (800a708 <__libc_init_array+0x44>)
 800a6de:	1b64      	subs	r4, r4, r5
 800a6e0:	10a4      	asrs	r4, r4, #2
 800a6e2:	42a6      	cmp	r6, r4
 800a6e4:	d105      	bne.n	800a6f2 <__libc_init_array+0x2e>
 800a6e6:	bd70      	pop	{r4, r5, r6, pc}
 800a6e8:	00b3      	lsls	r3, r6, #2
 800a6ea:	58eb      	ldr	r3, [r5, r3]
 800a6ec:	4798      	blx	r3
 800a6ee:	3601      	adds	r6, #1
 800a6f0:	e7ee      	b.n	800a6d0 <__libc_init_array+0xc>
 800a6f2:	00b3      	lsls	r3, r6, #2
 800a6f4:	58eb      	ldr	r3, [r5, r3]
 800a6f6:	4798      	blx	r3
 800a6f8:	3601      	adds	r6, #1
 800a6fa:	e7f2      	b.n	800a6e2 <__libc_init_array+0x1e>
 800a6fc:	0800a81c 	.word	0x0800a81c
 800a700:	0800a81c 	.word	0x0800a81c
 800a704:	0800a81c 	.word	0x0800a81c
 800a708:	0800a820 	.word	0x0800a820

0800a70c <memset>:
 800a70c:	0003      	movs	r3, r0
 800a70e:	1882      	adds	r2, r0, r2
 800a710:	4293      	cmp	r3, r2
 800a712:	d100      	bne.n	800a716 <memset+0xa>
 800a714:	4770      	bx	lr
 800a716:	7019      	strb	r1, [r3, #0]
 800a718:	3301      	adds	r3, #1
 800a71a:	e7f9      	b.n	800a710 <memset+0x4>

0800a71c <_init>:
 800a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71e:	46c0      	nop			; (mov r8, r8)
 800a720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a722:	bc08      	pop	{r3}
 800a724:	469e      	mov	lr, r3
 800a726:	4770      	bx	lr

0800a728 <_fini>:
 800a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72a:	46c0      	nop			; (mov r8, r8)
 800a72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a72e:	bc08      	pop	{r3}
 800a730:	469e      	mov	lr, r3
 800a732:	4770      	bx	lr
