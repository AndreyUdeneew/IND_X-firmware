
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad4c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800ae08  0800ae08  0001ae08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aef0  0800aef0  00023140  2**0
                  CONTENTS
  4 .ARM          00000000  0800aef0  0800aef0  00023140  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aef0  0800aef0  00023140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aef0  0800aef0  0001aef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aef4  0800aef4  0001aef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003140  20000000  0800aef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c4  20003140  0800e038  00023140  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005604  0800e038  00025604  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00023140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019dda  00000000  00000000  00023168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d5  00000000  00000000  0003cf42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00040418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001720  00000000  00000000  00041cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c403  00000000  00000000  000433d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d148  00000000  00000000  0005f7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae28d  00000000  00000000  0007c91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012aba8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f4  00000000  00000000  0012abfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20003140 	.word	0x20003140
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800adf0 	.word	0x0800adf0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20003144 	.word	0x20003144
 8000100:	0800adf0 	.word	0x0800adf0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800050e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	430a      	orrs	r2, r1
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800051a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	4013      	ands	r3, r2
 8000520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000522:	68fb      	ldr	r3, [r7, #12]
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b004      	add	sp, #16
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 8000536:	231e      	movs	r3, #30
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	2200      	movs	r2, #0
 800053c:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 800053e:	231c      	movs	r3, #28
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	2200      	movs	r2, #0
 8000544:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8000546:	231a      	movs	r3, #26
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	2200      	movs	r2, #0
 800054c:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 800054e:	2318      	movs	r3, #24
 8000550:	18fb      	adds	r3, r7, r3
 8000552:	2200      	movs	r2, #0
 8000554:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 8000556:	2316      	movs	r3, #22
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	2201      	movs	r2, #1
 800055c:	4252      	negs	r2, r2
 800055e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f002 fe1e 	bl	80031a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f87e 	bl	8000664 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	4b38      	ldr	r3, [pc, #224]	; (800064c <main+0x11c>)
 800056a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800056c:	4b37      	ldr	r3, [pc, #220]	; (800064c <main+0x11c>)
 800056e:	2101      	movs	r1, #1
 8000570:	430a      	orrs	r2, r1
 8000572:	635a      	str	r2, [r3, #52]	; 0x34
 8000574:	4b35      	ldr	r3, [pc, #212]	; (800064c <main+0x11c>)
 8000576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000578:	2201      	movs	r2, #1
 800057a:	4013      	ands	r3, r2
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000580:	4b32      	ldr	r3, [pc, #200]	; (800064c <main+0x11c>)
 8000582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000584:	4b31      	ldr	r3, [pc, #196]	; (800064c <main+0x11c>)
 8000586:	2102      	movs	r1, #2
 8000588:	430a      	orrs	r2, r1
 800058a:	635a      	str	r2, [r3, #52]	; 0x34
 800058c:	4b2f      	ldr	r3, [pc, #188]	; (800064c <main+0x11c>)
 800058e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000590:	2202      	movs	r2, #2
 8000592:	4013      	ands	r3, r2
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000598:	4b2c      	ldr	r3, [pc, #176]	; (800064c <main+0x11c>)
 800059a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800059c:	4b2b      	ldr	r3, [pc, #172]	; (800064c <main+0x11c>)
 800059e:	2104      	movs	r1, #4
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <main+0x11c>)
 80005a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a8:	2204      	movs	r2, #4
 80005aa:	4013      	ands	r3, r2
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fbc0 	bl	8000d34 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b4:	f000 fb90 	bl	8000cd8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 faae 	bl	8000b18 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 80005bc:	f000 f8d2 	bl	8000764 <MX_COMP1_Init>
  MX_TIM1_Init();
 80005c0:	f000 f9b0 	bl	8000924 <MX_TIM1_Init>
  MX_USART3_Init();
 80005c4:	f000 fb46 	bl	8000c54 <MX_USART3_Init>
  MX_I2S1_Init();
 80005c8:	f000 f93e 	bl	8000848 <MX_I2S1_Init>
  MX_I2C1_Init();
 80005cc:	f000 f8fc 	bl	80007c8 <MX_I2C1_Init>
  MX_SPI2_Init();
 80005d0:	f000 f964 	bl	800089c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <main+0x120>)
 80005d6:	0018      	movs	r0, r3
 80005d8:	f003 f8b0 	bl	800373c <HAL_COMP_Start>
	HAL_Delay(100);
 80005dc:	2064      	movs	r0, #100	; 0x64
 80005de:	f002 fe65 	bl	80032ac <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005e2:	f001 fce3 	bl	8001fac <MEM_Reset>

	weoInit();
 80005e6:	f000 fe29 	bl	800123c <weoInit>
	HAL_Delay(1);
 80005ea:	2001      	movs	r0, #1
 80005ec:	f002 fe5e 	bl	80032ac <HAL_Delay>
	weoClear();
 80005f0:	f000 fe90 	bl	8001314 <weoClear>
	MEM_GetID();
 80005f4:	f001 ff6a 	bl	80024cc <MEM_GetID>
//	soundSetup();

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <main+0x124>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <main+0x124>)
 80005fe:	4916      	ldr	r1, [pc, #88]	; (8000658 <main+0x128>)
 8000600:	430a      	orrs	r2, r1
 8000602:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <main+0x124>)
 8000606:	0018      	movs	r0, r3
 8000608:	f7ff ff14 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <main+0x124>)
 800060e:	0018      	movs	r0, r3
 8000610:	f7ff ff1e 	bl	8000450 <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <main+0x124>)
 8000616:	6a1a      	ldr	r2, [r3, #32]
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <main+0x124>)
 800061a:	2108      	movs	r1, #8
 800061c:	430a      	orrs	r2, r1
 800061e:	621a      	str	r2, [r3, #32]

	uint8_t x=0x05;
 8000620:	2315      	movs	r3, #21
 8000622:	18fb      	adds	r3, r7, r3
 8000624:	2205      	movs	r2, #5
 8000626:	701a      	strb	r2, [r3, #0]
	uint8_t y=0x03;
 8000628:	2314      	movs	r3, #20
 800062a:	18fb      	adds	r3, r7, r3
 800062c:	2203      	movs	r2, #3
 800062e:	701a      	strb	r2, [r3, #0]
////	I2C_SOUND_ChangePage(0x00);
//	I2C_SOUND_ChangePage(0x01);
//	WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//	WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available

	GPIOC->ODR |= 1 << 6;
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <main+0x12c>)
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <main+0x12c>)
 8000636:	2140      	movs	r1, #64	; 0x40
 8000638:	430a      	orrs	r2, r1
 800063a:	615a      	str	r2, [r3, #20]
	while (1) {
		cmdExecute(cmd2Execute);
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <main+0x130>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	0018      	movs	r0, r3
 8000642:	f001 ffab 	bl	800259c <cmdExecute>
//		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,
//		                               HAL_MAX_DELAY);
//		I2C_SOUND_ChangePage(0x00);
		Scount();
 8000646:	f001 ffa3 	bl	8002590 <Scount>
		cmdExecute(cmd2Execute);
 800064a:	e7f7      	b.n	800063c <main+0x10c>
 800064c:	40021000 	.word	0x40021000
 8000650:	20003354 	.word	0x20003354
 8000654:	40004400 	.word	0x40004400
 8000658:	1000100d 	.word	0x1000100d
 800065c:	50000800 	.word	0x50000800
 8000660:	2000345e 	.word	0x2000345e

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b0a1      	sub	sp, #132	; 0x84
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	2448      	movs	r4, #72	; 0x48
 800066c:	193b      	adds	r3, r7, r4
 800066e:	0018      	movs	r0, r3
 8000670:	2338      	movs	r3, #56	; 0x38
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f00a fbb3 	bl	800ade0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067a:	2338      	movs	r3, #56	; 0x38
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	0018      	movs	r0, r3
 8000680:	2310      	movs	r3, #16
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f00a fbab 	bl	800ade0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	0018      	movs	r0, r3
 800068e:	2334      	movs	r3, #52	; 0x34
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f00a fba4 	bl	800ade0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	0018      	movs	r0, r3
 800069e:	f005 f90d 	bl	80058bc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2202      	movs	r2, #2
 80006a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	0052      	lsls	r2, r2, #1
 80006ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006b0:	0021      	movs	r1, r4
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2240      	movs	r2, #64	; 0x40
 80006bc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2202      	movs	r2, #2
 80006c2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2202      	movs	r2, #2
 80006c8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2208      	movs	r2, #8
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	0292      	lsls	r2, r2, #10
 80006dc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2280      	movs	r2, #128	; 0x80
 80006e2:	0492      	lsls	r2, r2, #18
 80006e4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	0592      	lsls	r2, r2, #22
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	0018      	movs	r0, r3
 80006f2:	f005 f92f 	bl	8005954 <HAL_RCC_OscConfig>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006fa:	f002 f8cf 	bl	800289c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	2138      	movs	r1, #56	; 0x38
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2207      	movs	r2, #7
 8000704:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2202      	movs	r2, #2
 800070a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2102      	movs	r1, #2
 800071c:	0018      	movs	r0, r3
 800071e:	f005 fc39 	bl	8005f94 <HAL_RCC_ClockConfig>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000726:	f002 f8b9 	bl	800289c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <SystemClock_Config+0xfc>)
 800072e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	0018      	movs	r0, r3
 800074c:	f005 fdcc 	bl	80062e8 <HAL_RCCEx_PeriphCLKConfig>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000754:	f002 f8a2 	bl	800289c <Error_Handler>
  }
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b021      	add	sp, #132	; 0x84
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	00200822 	.word	0x00200822

08000764 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_COMP1_Init+0x5c>)
 800076a:	4a16      	ldr	r2, [pc, #88]	; (80007c4 <MX_COMP1_Init+0x60>)
 800076c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_COMP1_Init+0x5c>)
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_COMP1_Init+0x5c>)
 8000778:	2230      	movs	r2, #48	; 0x30
 800077a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_COMP1_Init+0x5c>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_COMP1_Init+0x5c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <MX_COMP1_Init+0x5c>)
 800078a:	2200      	movs	r2, #0
 800078c:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_COMP1_Init+0x5c>)
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	0392      	lsls	r2, r2, #14
 8000794:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_COMP1_Init+0x5c>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_COMP1_Init+0x5c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 80007a2:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_COMP1_Init+0x5c>)
 80007a4:	2212      	movs	r2, #18
 80007a6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <MX_COMP1_Init+0x5c>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f002 fe64 	bl	8003478 <HAL_COMP_Init>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 80007b4:	f002 f872 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20003354 	.word	0x20003354
 80007c4:	40010200 	.word	0x40010200

080007c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_I2C1_Init+0x74>)
 80007ce:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <MX_I2C1_Init+0x78>)
 80007d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_I2C1_Init+0x74>)
 80007d4:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <MX_I2C1_Init+0x7c>)
 80007d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_I2C1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_I2C1_Init+0x74>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_I2C1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_I2C1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_I2C1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_I2C1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_I2C1_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_I2C1_Init+0x74>)
 8000804:	0018      	movs	r0, r3
 8000806:	f003 fcf5 	bl	80041f4 <HAL_I2C_Init>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800080e:	f002 f845 	bl	800289c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_I2C1_Init+0x74>)
 8000814:	2100      	movs	r1, #0
 8000816:	0018      	movs	r0, r3
 8000818:	f004 fde0 	bl	80053dc <HAL_I2CEx_ConfigAnalogFilter>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000820:	f002 f83c 	bl	800289c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <MX_I2C1_Init+0x74>)
 8000826:	2100      	movs	r1, #0
 8000828:	0018      	movs	r0, r3
 800082a:	f004 fe23 	bl	8005474 <HAL_I2CEx_ConfigDigitalFilter>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000832:	f002 f833 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20003234 	.word	0x20003234
 8000840:	40005400 	.word	0x40005400
 8000844:	1094102c 	.word	0x1094102c

08000848 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_I2S1_Init+0x4c>)
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <MX_I2S1_Init+0x50>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_I2S1_Init+0x4c>)
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	0092      	lsls	r2, r2, #2
 8000858:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_I2S1_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_I2S1_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_I2S1_Init+0x4c>)
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	0092      	lsls	r2, r2, #2
 800086c:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_I2S1_Init+0x4c>)
 8000870:	22fa      	movs	r2, #250	; 0xfa
 8000872:	0192      	lsls	r2, r2, #6
 8000874:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_I2S1_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <MX_I2S1_Init+0x4c>)
 800087e:	0018      	movs	r0, r3
 8000880:	f004 fe44 	bl	800550c <HAL_I2S_Init>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000888:	f002 f808 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	20003460 	.word	0x20003460
 8000898:	40013000 	.word	0x40013000

0800089c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_SPI2_Init+0x80>)
 80008a2:	2208      	movs	r2, #8
 80008a4:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_SPI2_Init+0x80>)
 80008a8:	4a1d      	ldr	r2, [pc, #116]	; (8000920 <MX_SPI2_Init+0x84>)
 80008aa:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_SPI2_Init+0x80>)
 80008ae:	2282      	movs	r2, #130	; 0x82
 80008b0:	0052      	lsls	r2, r2, #1
 80008b2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_SPI2_Init+0x80>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_SPI2_Init+0x80>)
 80008bc:	22e0      	movs	r2, #224	; 0xe0
 80008be:	00d2      	lsls	r2, r2, #3
 80008c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_SPI2_Init+0x80>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_SPI2_Init+0x80>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_SPI2_Init+0x80>)
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	0092      	lsls	r2, r2, #2
 80008d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_SPI2_Init+0x80>)
 80008d8:	2208      	movs	r2, #8
 80008da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_SPI2_Init+0x80>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_SPI2_Init+0x80>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_SPI2_Init+0x80>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_SPI2_Init+0x80>)
 80008f0:	2207      	movs	r2, #7
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_SPI2_Init+0x80>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_SPI2_Init+0x80>)
 80008fc:	2208      	movs	r2, #8
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_SPI2_Init+0x80>)
 8000902:	0018      	movs	r0, r3
 8000904:	f006 f9f0 	bl	8006ce8 <HAL_SPI_Init>
 8000908:	1e03      	subs	r3, r0, #0
 800090a:	d001      	beq.n	8000910 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 800090c:	f001 ffc6 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000910:	4b02      	ldr	r3, [pc, #8]	; (800091c <MX_SPI2_Init+0x80>)
 8000912:	2208      	movs	r2, #8
 8000914:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200031b0 	.word	0x200031b0
 8000920:	40003800 	.word	0x40003800

08000924 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09e      	sub	sp, #120	; 0x78
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092a:	2368      	movs	r3, #104	; 0x68
 800092c:	18fb      	adds	r3, r7, r3
 800092e:	0018      	movs	r0, r3
 8000930:	2310      	movs	r3, #16
 8000932:	001a      	movs	r2, r3
 8000934:	2100      	movs	r1, #0
 8000936:	f00a fa53 	bl	800ade0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093a:	235c      	movs	r3, #92	; 0x5c
 800093c:	18fb      	adds	r3, r7, r3
 800093e:	0018      	movs	r0, r3
 8000940:	230c      	movs	r3, #12
 8000942:	001a      	movs	r2, r3
 8000944:	2100      	movs	r1, #0
 8000946:	f00a fa4b 	bl	800ade0 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800094a:	2350      	movs	r3, #80	; 0x50
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	0018      	movs	r0, r3
 8000950:	230c      	movs	r3, #12
 8000952:	001a      	movs	r2, r3
 8000954:	2100      	movs	r1, #0
 8000956:	f00a fa43 	bl	800ade0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095a:	2334      	movs	r3, #52	; 0x34
 800095c:	18fb      	adds	r3, r7, r3
 800095e:	0018      	movs	r0, r3
 8000960:	231c      	movs	r3, #28
 8000962:	001a      	movs	r2, r3
 8000964:	2100      	movs	r1, #0
 8000966:	f00a fa3b 	bl	800ade0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800096a:	003b      	movs	r3, r7
 800096c:	0018      	movs	r0, r3
 800096e:	2334      	movs	r3, #52	; 0x34
 8000970:	001a      	movs	r2, r3
 8000972:	2100      	movs	r1, #0
 8000974:	f00a fa34 	bl	800ade0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000978:	4b64      	ldr	r3, [pc, #400]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 800097a:	4a65      	ldr	r2, [pc, #404]	; (8000b10 <MX_TIM1_Init+0x1ec>)
 800097c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800097e:	4b63      	ldr	r3, [pc, #396]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000984:	4b61      	ldr	r3, [pc, #388]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 800098a:	4b60      	ldr	r3, [pc, #384]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 800098c:	4a61      	ldr	r2, [pc, #388]	; (8000b14 <MX_TIM1_Init+0x1f0>)
 800098e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b5e      	ldr	r3, [pc, #376]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000996:	4b5d      	ldr	r3, [pc, #372]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800099c:	4b5b      	ldr	r3, [pc, #364]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009a2:	4b5a      	ldr	r3, [pc, #360]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f007 fd93 	bl	80084d0 <HAL_TIM_Base_Init>
 80009aa:	1e03      	subs	r3, r0, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80009ae:	f001 ff75 	bl	800289c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b2:	2168      	movs	r1, #104	; 0x68
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	0152      	lsls	r2, r2, #5
 80009ba:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009bc:	187a      	adds	r2, r7, r1
 80009be:	4b53      	ldr	r3, [pc, #332]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 80009c0:	0011      	movs	r1, r2
 80009c2:	0018      	movs	r0, r3
 80009c4:	f008 f81c 	bl	8008a00 <HAL_TIM_ConfigClockSource>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009cc:	f001 ff66 	bl	800289c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009d0:	4b4e      	ldr	r3, [pc, #312]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f007 fdd4 	bl	8008580 <HAL_TIM_PWM_Init>
 80009d8:	1e03      	subs	r3, r0, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009dc:	f001 ff5e 	bl	800289c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e0:	215c      	movs	r1, #92	; 0x5c
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f4:	187a      	adds	r2, r7, r1
 80009f6:	4b45      	ldr	r3, [pc, #276]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 80009f8:	0011      	movs	r1, r2
 80009fa:	0018      	movs	r0, r3
 80009fc:	f008 fcd0 	bl	80093a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000a04:	f001 ff4a 	bl	800289c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000a08:	2150      	movs	r1, #80	; 0x50
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2201      	movs	r2, #1
 8000a14:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000a1c:	187a      	adds	r2, r7, r1
 8000a1e:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 8000a20:	2101      	movs	r1, #1
 8000a22:	0018      	movs	r0, r3
 8000a24:	f008 fdd0 	bl	80095c8 <HAL_TIMEx_ConfigBreakInput>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a2c:	f001 ff36 	bl	800289c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a30:	2134      	movs	r1, #52	; 0x34
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2260      	movs	r2, #96	; 0x60
 8000a36:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2296      	movs	r2, #150	; 0x96
 8000a3c:	0052      	lsls	r2, r2, #1
 8000a3e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2204      	movs	r2, #4
 8000a50:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5e:	1879      	adds	r1, r7, r1
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	0018      	movs	r0, r3
 8000a66:	f007 fed5 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a6e:	f001 ff15 	bl	800289c <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a72:	2134      	movs	r1, #52	; 0x34
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2232      	movs	r2, #50	; 0x32
 8000a78:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a7a:	1879      	adds	r1, r7, r1
 8000a7c:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 8000a7e:	2210      	movs	r2, #16
 8000a80:	0018      	movs	r0, r3
 8000a82:	f007 fec7 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a8a:	f001 ff07 	bl	800289c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a8e:	003b      	movs	r3, r7
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a96:	003b      	movs	r3, r7
 8000a98:	2280      	movs	r2, #128	; 0x80
 8000a9a:	00d2      	lsls	r2, r2, #3
 8000a9c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aa4:	003b      	movs	r3, r7
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	0152      	lsls	r2, r2, #5
 8000ab0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	0192      	lsls	r2, r2, #6
 8000ab8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000aba:	003b      	movs	r3, r7
 8000abc:	220a      	movs	r2, #10
 8000abe:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ac0:	003b      	movs	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ac6:	003b      	movs	r3, r7
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000acc:	003b      	movs	r3, r7
 8000ace:	2280      	movs	r2, #128	; 0x80
 8000ad0:	0492      	lsls	r2, r2, #18
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ada:	003b      	movs	r3, r7
 8000adc:	2200      	movs	r2, #0
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000ae0:	003b      	movs	r3, r7
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	01d2      	lsls	r2, r2, #7
 8000ae6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ae8:	003a      	movs	r2, r7
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 8000aec:	0011      	movs	r1, r2
 8000aee:	0018      	movs	r0, r3
 8000af0:	f008 fcc4 	bl	800947c <HAL_TIMEx_ConfigBreakDeadTime>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000af8:	f001 fed0 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <MX_TIM1_Init+0x1e8>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f002 f912 	bl	8002d28 <HAL_TIM_MspPostInit>

}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b01e      	add	sp, #120	; 0x78
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20003408 	.word	0x20003408
 8000b10:	40012c00 	.word	0x40012c00
 8000b14:	0000027f 	.word	0x0000027f

08000b18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b08f      	sub	sp, #60	; 0x3c
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000b1e:	2418      	movs	r4, #24
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	0018      	movs	r0, r3
 8000b24:	2320      	movs	r3, #32
 8000b26:	001a      	movs	r2, r3
 8000b28:	2100      	movs	r1, #0
 8000b2a:	f00a f959 	bl	800ade0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	003b      	movs	r3, r7
 8000b30:	0018      	movs	r0, r3
 8000b32:	2318      	movs	r3, #24
 8000b34:	001a      	movs	r2, r3
 8000b36:	2100      	movs	r1, #0
 8000b38:	f00a f952 	bl	800ade0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	029b      	lsls	r3, r3, #10
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff fcc9 	bl	80004d8 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f7ff fcdc 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b4c:	003b      	movs	r3, r7
 8000b4e:	2204      	movs	r2, #4
 8000b50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b52:	003b      	movs	r3, r7
 8000b54:	2202      	movs	r2, #2
 8000b56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b58:	003b      	movs	r3, r7
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b5e:	003b      	movs	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b64:	003b      	movs	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b6a:	003b      	movs	r3, r7
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	003a      	movs	r2, r7
 8000b72:	23a0      	movs	r3, #160	; 0xa0
 8000b74:	05db      	lsls	r3, r3, #23
 8000b76:	0011      	movs	r1, r2
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f009 fdb3 	bl	800a6e4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b7e:	003b      	movs	r3, r7
 8000b80:	2208      	movs	r2, #8
 8000b82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b84:	003b      	movs	r3, r7
 8000b86:	2202      	movs	r2, #2
 8000b88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b8a:	003b      	movs	r3, r7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b90:	003b      	movs	r3, r7
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b96:	003b      	movs	r3, r7
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b9c:	003b      	movs	r3, r7
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	003a      	movs	r2, r7
 8000ba4:	23a0      	movs	r3, #160	; 0xa0
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	0011      	movs	r1, r2
 8000baa:	0018      	movs	r0, r3
 8000bac:	f009 fd9a 	bl	800a6e4 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	201c      	movs	r0, #28
 8000bb4:	f7ff fb4c 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000bb8:	201c      	movs	r0, #28
 8000bba:	f7ff fb2f 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	22e1      	movs	r2, #225	; 0xe1
 8000bc8:	0212      	lsls	r2, r2, #8
 8000bca:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	2280      	movs	r2, #128	; 0x80
 8000bd0:	0152      	lsls	r2, r2, #5
 8000bd2:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000bd4:	0021      	movs	r1, r4
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	220c      	movs	r2, #12
 8000be6:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <MX_USART2_UART_Init+0x138>)
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	0010      	movs	r0, r2
 8000bfc:	f00a f83e 	bl	800ac7c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_USART2_UART_Init+0x138>)
 8000c02:	2100      	movs	r1, #0
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff fbaf 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <MX_USART2_UART_Init+0x138>)
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff fbbc 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <MX_USART2_UART_Init+0x138>)
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff fb96 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_USART2_UART_Init+0x138>)
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f7ff fbc8 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <MX_USART2_UART_Init+0x138>)
 8000c26:	0018      	movs	r0, r3
 8000c28:	f7ff fb80 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <MX_USART2_UART_Init+0x138>)
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff fbd7 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d0f9      	beq.n	8000c2e <MX_USART2_UART_Init+0x116>
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <MX_USART2_UART_Init+0x138>)
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff fbe5 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000c42:	1e03      	subs	r3, r0, #0
 8000c44:	d0f3      	beq.n	8000c2e <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b00f      	add	sp, #60	; 0x3c
 8000c4e:	bd90      	pop	{r4, r7, pc}
 8000c50:	40004400 	.word	0x40004400

08000c54 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000c58:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_USART3_Init+0x78>)
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <MX_USART3_Init+0x78>)
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	0309      	lsls	r1, r1, #12
 8000c62:	430a      	orrs	r2, r1
 8000c64:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_USART3_Init+0x7c>)
 8000c68:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <MX_USART3_Init+0x78>)
 8000c6a:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8100000;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_USART3_Init+0x7c>)
 8000c6e:	4a19      	ldr	r2, [pc, #100]	; (8000cd4 <MX_USART3_Init+0x80>)
 8000c70:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_USART3_Init+0x7c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_USART3_Init+0x7c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_USART3_Init+0x7c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_USART3_Init+0x7c>)
 8000c86:	2208      	movs	r2, #8
 8000c88:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_USART3_Init+0x7c>)
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	00d2      	lsls	r2, r2, #3
 8000c90:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_USART3_Init+0x7c>)
 8000c94:	2280      	movs	r2, #128	; 0x80
 8000c96:	0092      	lsls	r2, r2, #2
 8000c98:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <MX_USART3_Init+0x7c>)
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	0052      	lsls	r2, r2, #1
 8000ca0:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USART3_Init+0x7c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_USART3_Init+0x7c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_USART3_Init+0x7c>)
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f008 fd29 	bl	8009708 <HAL_USART_Init>
 8000cb6:	1e03      	subs	r3, r0, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000cba:	f001 fdef 	bl	800289c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8100000;
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <MX_USART3_Init+0x7c>)
 8000cc0:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <MX_USART3_Init+0x80>)
 8000cc2:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	40004800 	.word	0x40004800
 8000cd0:	20003394 	.word	0x20003394
 8000cd4:	007b98a0 	.word	0x007b98a0

08000cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_DMA_Init+0x58>)
 8000ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <MX_DMA_Init+0x58>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	639a      	str	r2, [r3, #56]	; 0x38
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_DMA_Init+0x58>)
 8000cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2009      	movs	r0, #9
 8000cfc:	f002 fe1c 	bl	8003938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d00:	2009      	movs	r0, #9
 8000d02:	f002 fe2e 	bl	8003962 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	200a      	movs	r0, #10
 8000d0c:	f002 fe14 	bl	8003938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000d10:	200a      	movs	r0, #10
 8000d12:	f002 fe26 	bl	8003962 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	200b      	movs	r0, #11
 8000d1c:	f002 fe0c 	bl	8003938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000d20:	200b      	movs	r0, #11
 8000d22:	f002 fe1e 	bl	8003962 <HAL_NVIC_EnableIRQ>

}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b002      	add	sp, #8
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	40021000 	.word	0x40021000

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	003b      	movs	r3, r7
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	2318      	movs	r3, #24
 8000d40:	001a      	movs	r2, r3
 8000d42:	2100      	movs	r1, #0
 8000d44:	f00a f84c 	bl	800ade0 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f7ff fbdb 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000d4e:	2004      	movs	r0, #4
 8000d50:	f7ff fbd8 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d54:	2001      	movs	r0, #1
 8000d56:	f7ff fbd5 	bl	8000504 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4aa0      	ldr	r2, [pc, #640]	; (8000fe0 <MX_GPIO_Init+0x2ac>)
 8000d60:	0019      	movs	r1, r3
 8000d62:	0010      	movs	r0, r2
 8000d64:	f7ff fba0 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	01db      	lsls	r3, r3, #7
 8000d6c:	4a9d      	ldr	r2, [pc, #628]	; (8000fe4 <MX_GPIO_Init+0x2b0>)
 8000d6e:	0019      	movs	r1, r3
 8000d70:	0010      	movs	r0, r2
 8000d72:	f7ff fb99 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	4a9a      	ldr	r2, [pc, #616]	; (8000fe4 <MX_GPIO_Init+0x2b0>)
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	0010      	movs	r0, r2
 8000d80:	f7ff fb92 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d84:	23a0      	movs	r3, #160	; 0xa0
 8000d86:	05db      	lsls	r3, r3, #23
 8000d88:	2140      	movs	r1, #64	; 0x40
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff fb8c 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000d90:	23a0      	movs	r3, #160	; 0xa0
 8000d92:	05db      	lsls	r3, r3, #23
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff fb86 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000d9c:	4b91      	ldr	r3, [pc, #580]	; (8000fe4 <MX_GPIO_Init+0x2b0>)
 8000d9e:	2140      	movs	r1, #64	; 0x40
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff fb81 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	011a      	lsls	r2, r3, #4
 8000daa:	23a0      	movs	r3, #160	; 0xa0
 8000dac:	05db      	lsls	r3, r3, #23
 8000dae:	0011      	movs	r1, r2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff fb85 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000db6:	2380      	movs	r3, #128	; 0x80
 8000db8:	015a      	lsls	r2, r3, #5
 8000dba:	23a0      	movs	r3, #160	; 0xa0
 8000dbc:	05db      	lsls	r3, r3, #23
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f7ff fb7d 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000dc6:	003b      	movs	r3, r7
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dce:	003b      	movs	r3, r7
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	003b      	movs	r3, r7
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dda:	003b      	movs	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de0:	003b      	movs	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000de6:	003b      	movs	r3, r7
 8000de8:	4a7d      	ldr	r2, [pc, #500]	; (8000fe0 <MX_GPIO_Init+0x2ac>)
 8000dea:	0019      	movs	r1, r3
 8000dec:	0010      	movs	r0, r2
 8000dee:	f009 fc79 	bl	800a6e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000df2:	003b      	movs	r3, r7
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	01d2      	lsls	r2, r2, #7
 8000df8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e00:	003b      	movs	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000e12:	003b      	movs	r3, r7
 8000e14:	4a73      	ldr	r2, [pc, #460]	; (8000fe4 <MX_GPIO_Init+0x2b0>)
 8000e16:	0019      	movs	r1, r3
 8000e18:	0010      	movs	r0, r2
 8000e1a:	f009 fc63 	bl	800a6e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000e1e:	003b      	movs	r3, r7
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	0212      	lsls	r2, r2, #8
 8000e24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e26:	003b      	movs	r3, r7
 8000e28:	2201      	movs	r2, #1
 8000e2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e32:	003b      	movs	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e38:	003b      	movs	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	003b      	movs	r3, r7
 8000e40:	4a68      	ldr	r2, [pc, #416]	; (8000fe4 <MX_GPIO_Init+0x2b0>)
 8000e42:	0019      	movs	r1, r3
 8000e44:	0010      	movs	r0, r2
 8000e46:	f009 fc4d 	bl	800a6e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e50:	003b      	movs	r3, r7
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e56:	003b      	movs	r3, r7
 8000e58:	2201      	movs	r2, #1
 8000e5a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	003a      	movs	r2, r7
 8000e5e:	23a0      	movs	r3, #160	; 0xa0
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	0011      	movs	r1, r2
 8000e64:	0018      	movs	r0, r3
 8000e66:	f009 fc3d 	bl	800a6e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e70:	003b      	movs	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e76:	003b      	movs	r3, r7
 8000e78:	2201      	movs	r2, #1
 8000e7a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	003a      	movs	r2, r7
 8000e7e:	23a0      	movs	r3, #160	; 0xa0
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	0011      	movs	r1, r2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f009 fc2d 	bl	800a6e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2210      	movs	r2, #16
 8000e8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e90:	003b      	movs	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e96:	003b      	movs	r3, r7
 8000e98:	2201      	movs	r2, #1
 8000e9a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	003a      	movs	r2, r7
 8000e9e:	23a0      	movs	r3, #160	; 0xa0
 8000ea0:	05db      	lsls	r3, r3, #23
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f009 fc1d 	bl	800a6e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000eaa:	003b      	movs	r3, r7
 8000eac:	2240      	movs	r2, #64	; 0x40
 8000eae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2203      	movs	r2, #3
 8000eba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ec2:	003b      	movs	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	003a      	movs	r2, r7
 8000eca:	23a0      	movs	r3, #160	; 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f009 fc07 	bl	800a6e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2280      	movs	r2, #128	; 0x80
 8000eda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2201      	movs	r2, #1
 8000ee0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ee8:	003b      	movs	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	003a      	movs	r2, r7
 8000ef6:	23a0      	movs	r3, #160	; 0xa0
 8000ef8:	05db      	lsls	r3, r3, #23
 8000efa:	0011      	movs	r1, r2
 8000efc:	0018      	movs	r0, r3
 8000efe:	f009 fbf1 	bl	800a6e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000f02:	003b      	movs	r3, r7
 8000f04:	2240      	movs	r2, #64	; 0x40
 8000f06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f08:	003b      	movs	r3, r7
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2203      	movs	r2, #3
 8000f12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f14:	003b      	movs	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f1a:	003b      	movs	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000f20:	003b      	movs	r3, r7
 8000f22:	4a30      	ldr	r2, [pc, #192]	; (8000fe4 <MX_GPIO_Init+0x2b0>)
 8000f24:	0019      	movs	r1, r3
 8000f26:	0010      	movs	r0, r2
 8000f28:	f009 fbdc 	bl	800a6e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8000f2c:	003b      	movs	r3, r7
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f34:	003b      	movs	r3, r7
 8000f36:	2201      	movs	r2, #1
 8000f38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f40:	003b      	movs	r3, r7
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f46:	003b      	movs	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8000f4c:	003a      	movs	r2, r7
 8000f4e:	23a0      	movs	r3, #160	; 0xa0
 8000f50:	05db      	lsls	r3, r3, #23
 8000f52:	0011      	movs	r1, r2
 8000f54:	0018      	movs	r0, r3
 8000f56:	f009 fbc5 	bl	800a6e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8000f5a:	003b      	movs	r3, r7
 8000f5c:	2280      	movs	r2, #128	; 0x80
 8000f5e:	0152      	lsls	r2, r2, #5
 8000f60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f62:	003b      	movs	r3, r7
 8000f64:	2201      	movs	r2, #1
 8000f66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	003b      	movs	r3, r7
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f6e:	003b      	movs	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f74:	003b      	movs	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	003a      	movs	r2, r7
 8000f7c:	23a0      	movs	r3, #160	; 0xa0
 8000f7e:	05db      	lsls	r3, r3, #23
 8000f80:	0011      	movs	r1, r2
 8000f82:	0018      	movs	r0, r3
 8000f84:	f009 fbae 	bl	800a6e4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = KEY_4_Pin;
 8000f88:	003b      	movs	r3, r7
 8000f8a:	2280      	movs	r2, #128	; 0x80
 8000f8c:	0192      	lsls	r2, r2, #6
 8000f8e:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f90:	003b      	movs	r3, r7
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f96:	003b      	movs	r3, r7
 8000f98:	2201      	movs	r2, #1
 8000f9a:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000f9c:	003a      	movs	r2, r7
 8000f9e:	23a0      	movs	r3, #160	; 0xa0
 8000fa0:	05db      	lsls	r3, r3, #23
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f009 fb9d 	bl	800a6e4 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8000faa:	003b      	movs	r3, r7
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	01d2      	lsls	r2, r2, #7
 8000fb0:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fb2:	003b      	movs	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000fb8:	003b      	movs	r3, r7
 8000fba:	2201      	movs	r2, #1
 8000fbc:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	003a      	movs	r2, r7
 8000fc0:	23a0      	movs	r3, #160	; 0xa0
 8000fc2:	05db      	lsls	r3, r3, #23
 8000fc4:	0011      	movs	r1, r2
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f009 fb8c 	bl	800a6e4 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	031b      	lsls	r3, r3, #12
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff fa59 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b006      	add	sp, #24
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	50000400 	.word	0x50000400
 8000fe4:	50000800 	.word	0x50000800

08000fe8 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <USART2_RX_Callback+0x60>)
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f7ff fa3c 	bl	800046c <LL_USART_ReceiveData9>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <USART2_RX_Callback+0x64>)
 8000ffa:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <USART2_RX_Callback+0x60>)
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	b29b      	uxth	r3, r3
 8001002:	05db      	lsls	r3, r3, #23
 8001004:	0ddb      	lsrs	r3, r3, #23
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <USART2_RX_Callback+0x64>)
 800100a:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <USART2_RX_Callback+0x68>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <USART2_RX_Callback+0x64>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	2bff      	cmp	r3, #255	; 0xff
 8001018:	d90a      	bls.n	8001030 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <USART2_RX_Callback+0x64>)
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <USART2_RX_Callback+0x6c>)
 8001022:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <USART2_RX_Callback+0x70>)
 8001026:	2200      	movs	r2, #0
 8001028:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <USART2_RX_Callback+0x74>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <USART2_RX_Callback+0x74>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d104      	bne.n	8001042 <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <USART2_RX_Callback+0x64>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	0018      	movs	r0, r3
 800103e:	f000 f87f 	bl	8001140 <cmdReceive>
  }
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40004400 	.word	0x40004400
 800104c:	200035de 	.word	0x200035de
 8001050:	20003160 	.word	0x20003160
 8001054:	200055e4 	.word	0x200055e4
 8001058:	20003162 	.word	0x20003162
 800105c:	20003161 	.word	0x20003161

08001060 <HAL_SPI_RxHalfCpltCallback>:
//====================================================================================================================
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  	GPIOA->ODR |= 1 << 11;	//set test 1
 8001068:	23a0      	movs	r3, #160	; 0xa0
 800106a:	05db      	lsls	r3, r3, #23
 800106c:	695a      	ldr	r2, [r3, #20]
 800106e:	23a0      	movs	r3, #160	; 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	2180      	movs	r1, #128	; 0x80
 8001074:	0109      	lsls	r1, r1, #4
 8001076:	430a      	orrs	r2, r1
 8001078:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 11);	//reset test 1
 800107a:	23a0      	movs	r3, #160	; 0xa0
 800107c:	05db      	lsls	r3, r3, #23
 800107e:	695a      	ldr	r2, [r3, #20]
 8001080:	23a0      	movs	r3, #160	; 0xa0
 8001082:	05db      	lsls	r3, r3, #23
 8001084:	490e      	ldr	r1, [pc, #56]	; (80010c0 <HAL_SPI_RxHalfCpltCallback+0x60>)
 8001086:	400a      	ands	r2, r1
 8001088:	615a      	str	r2, [r3, #20]
//  	if(cmd2Execute==0x11){
  	GPIOA->ODR &= ~(1 << 6);	//reset cs of DISPLAY
 800108a:	23a0      	movs	r3, #160	; 0xa0
 800108c:	05db      	lsls	r3, r3, #23
 800108e:	695a      	ldr	r2, [r3, #20]
 8001090:	23a0      	movs	r3, #160	; 0xa0
 8001092:	05db      	lsls	r3, r3, #23
 8001094:	2140      	movs	r1, #64	; 0x40
 8001096:	438a      	bics	r2, r1
 8001098:	615a      	str	r2, [r3, #20]
  		GPIOA->ODR |= 1 << 7;	//set   dc of DISPLAY
 800109a:	23a0      	movs	r3, #160	; 0xa0
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	695a      	ldr	r2, [r3, #20]
 80010a0:	23a0      	movs	r3, #160	; 0xa0
 80010a2:	05db      	lsls	r3, r3, #23
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	430a      	orrs	r2, r1
 80010a8:	615a      	str	r2, [r3, #20]
  		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,len);
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_SPI_RxHalfCpltCallback+0x64>)
 80010ac:	881a      	ldrh	r2, [r3, #0]
 80010ae:	4906      	ldr	r1, [pc, #24]	; (80010c8 <HAL_SPI_RxHalfCpltCallback+0x68>)
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_SPI_RxHalfCpltCallback+0x6c>)
 80010b2:	0018      	movs	r0, r3
 80010b4:	f008 fc36 	bl	8009924 <HAL_USART_Transmit_DMA>
//  	if(cmd2Execute==0x13){
//
////  	  		HAL_SPI_Transmit_DMA(&hspi1, MEM_Buffer,len);
//  	  	}

}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	fffff7ff 	.word	0xfffff7ff
 80010c4:	200035dc 	.word	0x200035dc
 80010c8:	200035e4 	.word	0x200035e4
 80010cc:	20003394 	.word	0x20003394

080010d0 <HAL_SPI_RxCpltCallback>:
//==========================================================
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi2)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
//	if(cmd2Execute==0x11){
		GPIOC->ODR |= 1 << 15; // set cs
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_SPI_RxCpltCallback+0x20>)
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <HAL_SPI_RxCpltCallback+0x20>)
 80010de:	2180      	movs	r1, #128	; 0x80
 80010e0:	0209      	lsls	r1, r1, #8
 80010e2:	430a      	orrs	r2, r1
 80010e4:	615a      	str	r2, [r3, #20]
//	}
//	if(cmd2Execute==0x13){
//
//	}
}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	50000800 	.word	0x50000800

080010f4 <HAL_USART_TxCpltCallback>:
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 80010fc:	23a0      	movs	r3, #160	; 0xa0
 80010fe:	05db      	lsls	r3, r3, #23
 8001100:	695a      	ldr	r2, [r3, #20]
 8001102:	23a0      	movs	r3, #160	; 0xa0
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	438a      	bics	r2, r1
 800110a:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 800110c:	23a0      	movs	r3, #160	; 0xa0
 800110e:	05db      	lsls	r3, r3, #23
 8001110:	695a      	ldr	r2, [r3, #20]
 8001112:	23a0      	movs	r3, #160	; 0xa0
 8001114:	05db      	lsls	r3, r3, #23
 8001116:	2140      	movs	r1, #64	; 0x40
 8001118:	430a      	orrs	r2, r1
 800111a:	615a      	str	r2, [r3, #20]

	GPIOC->ODR |= 1 << 6;	//set BF
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_USART_TxCpltCallback+0x44>)
 800111e:	695a      	ldr	r2, [r3, #20]
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_USART_TxCpltCallback+0x44>)
 8001122:	2140      	movs	r1, #64	; 0x40
 8001124:	430a      	orrs	r2, r1
 8001126:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <HAL_USART_TxCpltCallback+0x48>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b002      	add	sp, #8
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	50000800 	.word	0x50000800
 800113c:	2000345e 	.word	0x2000345e

08001140 <cmdReceive>:
//	GPIOC->ODR |= 1 << 6;	//set BF
//	cmd2Execute=0;
}
//==============================================================
	void cmdReceive (uint16_t dt1)
	{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	0002      	movs	r2, r0
 8001148:	1dbb      	adds	r3, r7, #6
 800114a:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 800114c:	230f      	movs	r3, #15
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <cmdReceive+0xc4>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0fb      	beq.n	8001156 <cmdReceive+0x16>
	  ByteReceived=0;
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <cmdReceive+0xc4>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <cmdReceive+0xc8>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	001a      	movs	r2, r3
 800116a:	1dbb      	adds	r3, r7, #6
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	b2d9      	uxtb	r1, r3
 8001170:	4b26      	ldr	r3, [pc, #152]	; (800120c <cmdReceive+0xcc>)
 8001172:	5499      	strb	r1, [r3, r2]
	  ind++;
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <cmdReceive+0xc8>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	b29a      	uxth	r2, r3
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <cmdReceive+0xc8>)
 800117e:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001180:	4b21      	ldr	r3, [pc, #132]	; (8001208 <cmdReceive+0xc8>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d033      	beq.n	80011f0 <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <cmdReceive+0xc8>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	001a      	movs	r2, r3
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <cmdReceive+0xcc>)
 8001190:	785b      	ldrb	r3, [r3, #1]
 8001192:	3301      	adds	r3, #1
 8001194:	429a      	cmp	r2, r3
 8001196:	dd2b      	ble.n	80011f0 <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001198:	230f      	movs	r3, #15
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e00f      	b.n	80011c2 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 80011a2:	210f      	movs	r1, #15
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4a18      	ldr	r2, [pc, #96]	; (800120c <cmdReceive+0xcc>)
 80011aa:	5cd2      	ldrb	r2, [r2, r3]
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <cmdReceive+0xd0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	18d3      	adds	r3, r2, r3
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <cmdReceive+0xd0>)
 80011b6:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	3201      	adds	r2, #1
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <cmdReceive+0xcc>)
 80011c4:	785b      	ldrb	r3, [r3, #1]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	210f      	movs	r1, #15
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	dae7      	bge.n	80011a2 <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <cmdReceive+0xd0>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10a      	bne.n	80011f0 <cmdReceive+0xb0>
 80011da:	187b      	adds	r3, r7, r1
 80011dc:	781a      	ldrb	r2, [r3, #0]
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <cmdReceive+0xcc>)
 80011e0:	785b      	ldrb	r3, [r3, #1]
 80011e2:	3302      	adds	r3, #2
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d103      	bne.n	80011f0 <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <cmdReceive+0xcc>)
 80011ea:	0018      	movs	r0, r3
 80011ec:	f000 fa9a 	bl	8001724 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <cmdReceive+0xd4>)
 80011f2:	6a1a      	ldr	r2, [r3, #32]
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <cmdReceive+0xd4>)
 80011f6:	2108      	movs	r1, #8
 80011f8:	430a      	orrs	r2, r1
 80011fa:	621a      	str	r2, [r3, #32]
	}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b004      	add	sp, #16
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20003160 	.word	0x20003160
 8001208:	20003162 	.word	0x20003162
 800120c:	200055e4 	.word	0x200055e4
 8001210:	20003164 	.word	0x20003164
 8001214:	40004400 	.word	0x40004400

08001218 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	0002      	movs	r2, r0
 8001220:	1dfb      	adds	r3, r7, #7
 8001222:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8001224:	1df9      	adds	r1, r7, #7
 8001226:	4804      	ldr	r0, [pc, #16]	; (8001238 <USART_AS_SPI_sendCMD+0x20>)
 8001228:	230a      	movs	r3, #10
 800122a:	2201      	movs	r2, #1
 800122c:	f008 fabc 	bl	80097a8 <HAL_USART_Transmit>
		}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	b002      	add	sp, #8
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20003394 	.word	0x20003394

0800123c <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 8001240:	4b32      	ldr	r3, [pc, #200]	; (800130c <weoInit+0xd0>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <weoInit+0xd0>)
 8001246:	2101      	movs	r1, #1
 8001248:	438a      	bics	r2, r1
 800124a:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 800124c:	4b2f      	ldr	r3, [pc, #188]	; (800130c <weoInit+0xd0>)
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	4b2e      	ldr	r3, [pc, #184]	; (800130c <weoInit+0xd0>)
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	0309      	lsls	r1, r1, #12
 8001256:	430a      	orrs	r2, r1
 8001258:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <weoInit+0xd0>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b2b      	ldr	r3, [pc, #172]	; (800130c <weoInit+0xd0>)
 8001260:	2101      	movs	r1, #1
 8001262:	430a      	orrs	r2, r1
 8001264:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 8001266:	2001      	movs	r0, #1
 8001268:	f002 f820 	bl	80032ac <HAL_Delay>
		HAL_Delay(1);
 800126c:	2001      	movs	r0, #1
 800126e:	f002 f81d 	bl	80032ac <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001272:	4b27      	ldr	r3, [pc, #156]	; (8001310 <weoInit+0xd4>)
 8001274:	2100      	movs	r1, #0
 8001276:	0018      	movs	r0, r3
 8001278:	f007 f9e2 	bl	8008640 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 800127c:	2001      	movs	r0, #1
 800127e:	f002 f815 	bl	80032ac <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001282:	23a0      	movs	r3, #160	; 0xa0
 8001284:	05db      	lsls	r3, r3, #23
 8001286:	695a      	ldr	r2, [r3, #20]
 8001288:	23a0      	movs	r3, #160	; 0xa0
 800128a:	05db      	lsls	r3, r3, #23
 800128c:	2140      	movs	r1, #64	; 0x40
 800128e:	438a      	bics	r2, r1
 8001290:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001292:	23a0      	movs	r3, #160	; 0xa0
 8001294:	05db      	lsls	r3, r3, #23
 8001296:	695a      	ldr	r2, [r3, #20]
 8001298:	23a0      	movs	r3, #160	; 0xa0
 800129a:	05db      	lsls	r3, r3, #23
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	438a      	bics	r2, r1
 80012a0:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 80012a2:	20af      	movs	r0, #175	; 0xaf
 80012a4:	f7ff ffb8 	bl	8001218 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 80012a8:	20a0      	movs	r0, #160	; 0xa0
 80012aa:	f7ff ffb5 	bl	8001218 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 80012ae:	2051      	movs	r0, #81	; 0x51
 80012b0:	f7ff ffb2 	bl	8001218 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 80012b4:	2081      	movs	r0, #129	; 0x81
 80012b6:	f7ff ffaf 	bl	8001218 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 80012ba:	20ff      	movs	r0, #255	; 0xff
 80012bc:	f7ff ffac 	bl	8001218 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 80012c0:	20a1      	movs	r0, #161	; 0xa1
 80012c2:	f7ff ffa9 	bl	8001218 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff ffa6 	bl	8001218 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 80012cc:	20a2      	movs	r0, #162	; 0xa2
 80012ce:	f7ff ffa3 	bl	8001218 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f7ff ffa0 	bl	8001218 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 80012d8:	20a8      	movs	r0, #168	; 0xa8
 80012da:	f7ff ff9d 	bl	8001218 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80012de:	207f      	movs	r0, #127	; 0x7f
 80012e0:	f7ff ff9a 	bl	8001218 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 80012e4:	23a0      	movs	r3, #160	; 0xa0
 80012e6:	05db      	lsls	r3, r3, #23
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	23a0      	movs	r3, #160	; 0xa0
 80012ec:	05db      	lsls	r3, r3, #23
 80012ee:	2180      	movs	r1, #128	; 0x80
 80012f0:	430a      	orrs	r2, r1
 80012f2:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 80012f4:	23a0      	movs	r3, #160	; 0xa0
 80012f6:	05db      	lsls	r3, r3, #23
 80012f8:	695a      	ldr	r2, [r3, #20]
 80012fa:	23a0      	movs	r3, #160	; 0xa0
 80012fc:	05db      	lsls	r3, r3, #23
 80012fe:	2140      	movs	r1, #64	; 0x40
 8001300:	430a      	orrs	r2, r1
 8001302:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	40004800 	.word	0x40004800
 8001310:	20003408 	.word	0x20003408

08001314 <weoClear>:
	void weoClear(void) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800131a:	23a0      	movs	r3, #160	; 0xa0
 800131c:	05db      	lsls	r3, r3, #23
 800131e:	695a      	ldr	r2, [r3, #20]
 8001320:	23a0      	movs	r3, #160	; 0xa0
 8001322:	05db      	lsls	r3, r3, #23
 8001324:	2140      	movs	r1, #64	; 0x40
 8001326:	438a      	bics	r2, r1
 8001328:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 800132a:	23a0      	movs	r3, #160	; 0xa0
 800132c:	05db      	lsls	r3, r3, #23
 800132e:	695a      	ldr	r2, [r3, #20]
 8001330:	23a0      	movs	r3, #160	; 0xa0
 8001332:	05db      	lsls	r3, r3, #23
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	438a      	bics	r2, r1
 8001338:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800133a:	2075      	movs	r0, #117	; 0x75
 800133c:	f7ff ff6c 	bl	8001218 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8001340:	2000      	movs	r0, #0
 8001342:	f7ff ff69 	bl	8001218 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001346:	207f      	movs	r0, #127	; 0x7f
 8001348:	f7ff ff66 	bl	8001218 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800134c:	2015      	movs	r0, #21
 800134e:	f7ff ff63 	bl	8001218 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff ff60 	bl	8001218 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001358:	207f      	movs	r0, #127	; 0x7f
 800135a:	f7ff ff5d 	bl	8001218 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800135e:	23a0      	movs	r3, #160	; 0xa0
 8001360:	05db      	lsls	r3, r3, #23
 8001362:	695a      	ldr	r2, [r3, #20]
 8001364:	23a0      	movs	r3, #160	; 0xa0
 8001366:	05db      	lsls	r3, r3, #23
 8001368:	2140      	movs	r1, #64	; 0x40
 800136a:	438a      	bics	r2, r1
 800136c:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 800136e:	23a0      	movs	r3, #160	; 0xa0
 8001370:	05db      	lsls	r3, r3, #23
 8001372:	695a      	ldr	r2, [r3, #20]
 8001374:	23a0      	movs	r3, #160	; 0xa0
 8001376:	05db      	lsls	r3, r3, #23
 8001378:	2180      	movs	r1, #128	; 0x80
 800137a:	430a      	orrs	r2, r1
 800137c:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 800137e:	1dbb      	adds	r3, r7, #6
 8001380:	2200      	movs	r2, #0
 8001382:	801a      	strh	r2, [r3, #0]
 8001384:	e00d      	b.n	80013a2 <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <weoClear+0xc0>)
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	4013      	ands	r3, r2
 8001390:	d0fa      	beq.n	8001388 <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <weoClear+0xc0>)
 8001394:	2200      	movs	r2, #0
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8001398:	1dbb      	adds	r3, r7, #6
 800139a:	881a      	ldrh	r2, [r3, #0]
 800139c:	1dbb      	adds	r3, r7, #6
 800139e:	3201      	adds	r2, #1
 80013a0:	801a      	strh	r2, [r3, #0]
 80013a2:	1dbb      	adds	r3, r7, #6
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	4a0c      	ldr	r2, [pc, #48]	; (80013d8 <weoClear+0xc4>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d9ec      	bls.n	8001386 <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 80013ac:	23a0      	movs	r3, #160	; 0xa0
 80013ae:	05db      	lsls	r3, r3, #23
 80013b0:	695a      	ldr	r2, [r3, #20]
 80013b2:	23a0      	movs	r3, #160	; 0xa0
 80013b4:	05db      	lsls	r3, r3, #23
 80013b6:	2180      	movs	r1, #128	; 0x80
 80013b8:	438a      	bics	r2, r1
 80013ba:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 80013bc:	23a0      	movs	r3, #160	; 0xa0
 80013be:	05db      	lsls	r3, r3, #23
 80013c0:	695a      	ldr	r2, [r3, #20]
 80013c2:	23a0      	movs	r3, #160	; 0xa0
 80013c4:	05db      	lsls	r3, r3, #23
 80013c6:	2140      	movs	r1, #64	; 0x40
 80013c8:	430a      	orrs	r2, r1
 80013ca:	615a      	str	r2, [r3, #20]
	}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b002      	add	sp, #8
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40004800 	.word	0x40004800
 80013d8:	00002001 	.word	0x00002001

080013dc <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80013dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	0005      	movs	r5, r0
 80013e4:	000c      	movs	r4, r1
 80013e6:	0010      	movs	r0, r2
 80013e8:	0019      	movs	r1, r3
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	1c2a      	adds	r2, r5, #0
 80013ee:	701a      	strb	r2, [r3, #0]
 80013f0:	1dbb      	adds	r3, r7, #6
 80013f2:	1c22      	adds	r2, r4, #0
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	1d7b      	adds	r3, r7, #5
 80013f8:	1c02      	adds	r2, r0, #0
 80013fa:	701a      	strb	r2, [r3, #0]
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	1c0a      	adds	r2, r1, #0
 8001400:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001402:	240e      	movs	r4, #14
 8001404:	193b      	adds	r3, r7, r4
 8001406:	2200      	movs	r2, #0
 8001408:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25b      	sxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	da00      	bge.n	8001416 <weoDrawRectangleFilled+0x3a>
 8001414:	e0b7      	b.n	8001586 <weoDrawRectangleFilled+0x1aa>
 8001416:	1dbb      	adds	r3, r7, #6
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b25b      	sxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	da00      	bge.n	8001422 <weoDrawRectangleFilled+0x46>
 8001420:	e0b1      	b.n	8001586 <weoDrawRectangleFilled+0x1aa>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8001422:	1d7b      	adds	r3, r7, #5
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b25b      	sxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	da00      	bge.n	800142e <weoDrawRectangleFilled+0x52>
 800142c:	e0ab      	b.n	8001586 <weoDrawRectangleFilled+0x1aa>
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b25b      	sxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	da00      	bge.n	800143a <weoDrawRectangleFilled+0x5e>
 8001438:	e0a5      	b.n	8001586 <weoDrawRectangleFilled+0x1aa>
				return;
			}


			start_x_New=start_x;
 800143a:	250d      	movs	r5, #13
 800143c:	197b      	adds	r3, r7, r5
 800143e:	1dfa      	adds	r2, r7, #7
 8001440:	7812      	ldrb	r2, [r2, #0]
 8001442:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001444:	260c      	movs	r6, #12
 8001446:	19bb      	adds	r3, r7, r6
 8001448:	1d3a      	adds	r2, r7, #4
 800144a:	7812      	ldrb	r2, [r2, #0]
 800144c:	217f      	movs	r1, #127	; 0x7f
 800144e:	1a8a      	subs	r2, r1, r2
 8001450:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8001452:	230b      	movs	r3, #11
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	1d7a      	adds	r2, r7, #5
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 800145c:	220a      	movs	r2, #10
 800145e:	18bb      	adds	r3, r7, r2
 8001460:	1dba      	adds	r2, r7, #6
 8001462:	7812      	ldrb	r2, [r2, #0]
 8001464:	217f      	movs	r1, #127	; 0x7f
 8001466:	1a8a      	subs	r2, r1, r2
 8001468:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800146a:	23a0      	movs	r3, #160	; 0xa0
 800146c:	05db      	lsls	r3, r3, #23
 800146e:	695a      	ldr	r2, [r3, #20]
 8001470:	23a0      	movs	r3, #160	; 0xa0
 8001472:	05db      	lsls	r3, r3, #23
 8001474:	2140      	movs	r1, #64	; 0x40
 8001476:	438a      	bics	r2, r1
 8001478:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800147a:	23a0      	movs	r3, #160	; 0xa0
 800147c:	05db      	lsls	r3, r3, #23
 800147e:	695a      	ldr	r2, [r3, #20]
 8001480:	23a0      	movs	r3, #160	; 0xa0
 8001482:	05db      	lsls	r3, r3, #23
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	438a      	bics	r2, r1
 8001488:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800148a:	2075      	movs	r0, #117	; 0x75
 800148c:	f7ff fec4 	bl	8001218 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001490:	197b      	adds	r3, r7, r5
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff febf 	bl	8001218 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800149a:	230b      	movs	r3, #11
 800149c:	18fb      	adds	r3, r7, r3
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff feb9 	bl	8001218 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80014a6:	2015      	movs	r0, #21
 80014a8:	f7ff feb6 	bl	8001218 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 80014ac:	19bb      	adds	r3, r7, r6
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	085b      	lsrs	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff feaf 	bl	8001218 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80014ba:	220a      	movs	r2, #10
 80014bc:	18bb      	adds	r3, r7, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	085b      	lsrs	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff fea7 	bl	8001218 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 80014ca:	23a0      	movs	r3, #160	; 0xa0
 80014cc:	05db      	lsls	r3, r3, #23
 80014ce:	695a      	ldr	r2, [r3, #20]
 80014d0:	23a0      	movs	r3, #160	; 0xa0
 80014d2:	05db      	lsls	r3, r3, #23
 80014d4:	2180      	movs	r1, #128	; 0x80
 80014d6:	430a      	orrs	r2, r1
 80014d8:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80014da:	23a0      	movs	r3, #160	; 0xa0
 80014dc:	05db      	lsls	r3, r3, #23
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	23a0      	movs	r3, #160	; 0xa0
 80014e2:	05db      	lsls	r3, r3, #23
 80014e4:	2140      	movs	r1, #64	; 0x40
 80014e6:	430a      	orrs	r2, r1
 80014e8:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014ea:	23a0      	movs	r3, #160	; 0xa0
 80014ec:	05db      	lsls	r3, r3, #23
 80014ee:	695a      	ldr	r2, [r3, #20]
 80014f0:	23a0      	movs	r3, #160	; 0xa0
 80014f2:	05db      	lsls	r3, r3, #23
 80014f4:	2140      	movs	r1, #64	; 0x40
 80014f6:	438a      	bics	r2, r1
 80014f8:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80014fa:	23a0      	movs	r3, #160	; 0xa0
 80014fc:	05db      	lsls	r3, r3, #23
 80014fe:	695a      	ldr	r2, [r3, #20]
 8001500:	23a0      	movs	r3, #160	; 0xa0
 8001502:	05db      	lsls	r3, r3, #23
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	430a      	orrs	r2, r1
 8001508:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800150a:	193b      	adds	r3, r7, r4
 800150c:	2200      	movs	r2, #0
 800150e:	801a      	strh	r2, [r3, #0]
 8001510:	e012      	b.n	8001538 <weoDrawRectangleFilled+0x15c>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <weoDrawRectangleFilled+0x1b4>)
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	2280      	movs	r2, #128	; 0x80
 800151a:	4013      	ands	r3, r2
 800151c:	d0fa      	beq.n	8001514 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 800151e:	210e      	movs	r1, #14
 8001520:	187b      	adds	r3, r7, r1
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001526:	18d3      	adds	r3, r2, r3
 8001528:	781a      	ldrb	r2, [r3, #0]
 800152a:	4b19      	ldr	r3, [pc, #100]	; (8001590 <weoDrawRectangleFilled+0x1b4>)
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800152e:	187b      	adds	r3, r7, r1
 8001530:	881a      	ldrh	r2, [r3, #0]
 8001532:	187b      	adds	r3, r7, r1
 8001534:	3201      	adds	r2, #1
 8001536:	801a      	strh	r2, [r3, #0]
 8001538:	230e      	movs	r3, #14
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	881a      	ldrh	r2, [r3, #0]
 800153e:	230b      	movs	r3, #11
 8001540:	18fb      	adds	r3, r7, r3
 8001542:	7819      	ldrb	r1, [r3, #0]
 8001544:	230d      	movs	r3, #13
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	1acb      	subs	r3, r1, r3
 800154c:	3301      	adds	r3, #1
 800154e:	210a      	movs	r1, #10
 8001550:	1879      	adds	r1, r7, r1
 8001552:	7809      	ldrb	r1, [r1, #0]
 8001554:	0849      	lsrs	r1, r1, #1
 8001556:	b2c9      	uxtb	r1, r1
 8001558:	0008      	movs	r0, r1
 800155a:	210c      	movs	r1, #12
 800155c:	1879      	adds	r1, r7, r1
 800155e:	7809      	ldrb	r1, [r1, #0]
 8001560:	0849      	lsrs	r1, r1, #1
 8001562:	b2c9      	uxtb	r1, r1
 8001564:	1a41      	subs	r1, r0, r1
 8001566:	3101      	adds	r1, #1
 8001568:	434b      	muls	r3, r1
 800156a:	429a      	cmp	r2, r3
 800156c:	dbd1      	blt.n	8001512 <weoDrawRectangleFilled+0x136>
			}
//			while(!(USART3->ISR & USART_ISR_TXE)){};
			HAL_Delay(1);
 800156e:	2001      	movs	r0, #1
 8001570:	f001 fe9c 	bl	80032ac <HAL_Delay>
//			GPIOA->ODR &= ~(1 << 7);	//reset dc
			GPIOA->ODR |= 1 << 6;	//set cs
 8001574:	23a0      	movs	r3, #160	; 0xa0
 8001576:	05db      	lsls	r3, r3, #23
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	23a0      	movs	r3, #160	; 0xa0
 800157c:	05db      	lsls	r3, r3, #23
 800157e:	2140      	movs	r1, #64	; 0x40
 8001580:	430a      	orrs	r2, r1
 8001582:	615a      	str	r2, [r3, #20]
 8001584:	e000      	b.n	8001588 <weoDrawRectangleFilled+0x1ac>
				return;
 8001586:	46c0      	nop			; (mov r8, r8)
		}
 8001588:	46bd      	mov	sp, r7
 800158a:	b005      	add	sp, #20
 800158c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	40004800 	.word	0x40004800

08001594 <weoDrawRectangleInit>:
//========================================================================================================================
	void weoDrawRectangleInit(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y) {
 8001594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	0005      	movs	r5, r0
 800159c:	000c      	movs	r4, r1
 800159e:	0010      	movs	r0, r2
 80015a0:	0019      	movs	r1, r3
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	1c2a      	adds	r2, r5, #0
 80015a6:	701a      	strb	r2, [r3, #0]
 80015a8:	1dbb      	adds	r3, r7, #6
 80015aa:	1c22      	adds	r2, r4, #0
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	1d7b      	adds	r3, r7, #5
 80015b0:	1c02      	adds	r2, r0, #0
 80015b2:	701a      	strb	r2, [r3, #0]
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	1c0a      	adds	r2, r1, #0
 80015b8:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80015ba:	230e      	movs	r3, #14
 80015bc:	18fb      	adds	r3, r7, r3
 80015be:	2200      	movs	r2, #0
 80015c0:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80015c2:	1dfb      	adds	r3, r7, #7
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	db66      	blt.n	800169a <weoDrawRectangleInit+0x106>
 80015cc:	1dbb      	adds	r3, r7, #6
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db61      	blt.n	800169a <weoDrawRectangleInit+0x106>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80015d6:	1d7b      	adds	r3, r7, #5
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db5c      	blt.n	800169a <weoDrawRectangleInit+0x106>
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	db57      	blt.n	800169a <weoDrawRectangleInit+0x106>
				return;
			}
			start_x_New=start_x;
 80015ea:	240d      	movs	r4, #13
 80015ec:	193b      	adds	r3, r7, r4
 80015ee:	1dfa      	adds	r2, r7, #7
 80015f0:	7812      	ldrb	r2, [r2, #0]
 80015f2:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 80015f4:	250c      	movs	r5, #12
 80015f6:	197b      	adds	r3, r7, r5
 80015f8:	1d3a      	adds	r2, r7, #4
 80015fa:	7812      	ldrb	r2, [r2, #0]
 80015fc:	217f      	movs	r1, #127	; 0x7f
 80015fe:	1a8a      	subs	r2, r1, r2
 8001600:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8001602:	260b      	movs	r6, #11
 8001604:	19bb      	adds	r3, r7, r6
 8001606:	1d7a      	adds	r2, r7, #5
 8001608:	7812      	ldrb	r2, [r2, #0]
 800160a:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 800160c:	230a      	movs	r3, #10
 800160e:	18fb      	adds	r3, r7, r3
 8001610:	1dba      	adds	r2, r7, #6
 8001612:	7812      	ldrb	r2, [r2, #0]
 8001614:	217f      	movs	r1, #127	; 0x7f
 8001616:	1a8a      	subs	r2, r1, r2
 8001618:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800161a:	23a0      	movs	r3, #160	; 0xa0
 800161c:	05db      	lsls	r3, r3, #23
 800161e:	695a      	ldr	r2, [r3, #20]
 8001620:	23a0      	movs	r3, #160	; 0xa0
 8001622:	05db      	lsls	r3, r3, #23
 8001624:	2140      	movs	r1, #64	; 0x40
 8001626:	438a      	bics	r2, r1
 8001628:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800162a:	23a0      	movs	r3, #160	; 0xa0
 800162c:	05db      	lsls	r3, r3, #23
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	23a0      	movs	r3, #160	; 0xa0
 8001632:	05db      	lsls	r3, r3, #23
 8001634:	2180      	movs	r1, #128	; 0x80
 8001636:	438a      	bics	r2, r1
 8001638:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800163a:	2075      	movs	r0, #117	; 0x75
 800163c:	f7ff fdec 	bl	8001218 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001640:	193b      	adds	r3, r7, r4
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff fde7 	bl	8001218 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800164a:	19bb      	adds	r3, r7, r6
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	0018      	movs	r0, r3
 8001650:	f7ff fde2 	bl	8001218 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001654:	2015      	movs	r0, #21
 8001656:	f7ff fddf 	bl	8001218 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 800165a:	197b      	adds	r3, r7, r5
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	085b      	lsrs	r3, r3, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	0018      	movs	r0, r3
 8001664:	f7ff fdd8 	bl	8001218 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 8001668:	230a      	movs	r3, #10
 800166a:	18fb      	adds	r3, r7, r3
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	0018      	movs	r0, r3
 8001674:	f7ff fdd0 	bl	8001218 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 8001678:	23a0      	movs	r3, #160	; 0xa0
 800167a:	05db      	lsls	r3, r3, #23
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	23a0      	movs	r3, #160	; 0xa0
 8001680:	05db      	lsls	r3, r3, #23
 8001682:	2180      	movs	r1, #128	; 0x80
 8001684:	430a      	orrs	r2, r1
 8001686:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001688:	23a0      	movs	r3, #160	; 0xa0
 800168a:	05db      	lsls	r3, r3, #23
 800168c:	695a      	ldr	r2, [r3, #20]
 800168e:	23a0      	movs	r3, #160	; 0xa0
 8001690:	05db      	lsls	r3, r3, #23
 8001692:	2140      	movs	r1, #64	; 0x40
 8001694:	430a      	orrs	r2, r1
 8001696:	615a      	str	r2, [r3, #20]
 8001698:	e000      	b.n	800169c <weoDrawRectangleInit+0x108>
				return;
 800169a:	46c0      	nop			; (mov r8, r8)
		}
 800169c:	46bd      	mov	sp, r7
 800169e:	b005      	add	sp, #20
 80016a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080016a4 <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	0002      	movs	r2, r0
 80016ac:	1dfb      	adds	r3, r7, #7
 80016ae:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 80016b0:	210c      	movs	r1, #12
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	1dfa      	adds	r2, r7, #7
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 80016c0:	187a      	adds	r2, r7, r1
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <I2C_SOUND_ChangePage+0x38>)
 80016c4:	23fa      	movs	r3, #250	; 0xfa
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2302      	movs	r3, #2
 80016cc:	2130      	movs	r1, #48	; 0x30
 80016ce:	f002 fe27 	bl	8004320 <HAL_I2C_Master_Transmit>
	}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b004      	add	sp, #16
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	20003234 	.word	0x20003234

080016e0 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	0002      	movs	r2, r0
 80016e8:	1dfb      	adds	r3, r7, #7
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	1dbb      	adds	r3, r7, #6
 80016ee:	1c0a      	adds	r2, r1, #0
 80016f0:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 80016f2:	210c      	movs	r1, #12
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	1dfa      	adds	r2, r7, #7
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	1dba      	adds	r2, r7, #6
 8001700:	7812      	ldrb	r2, [r2, #0]
 8001702:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 8001704:	187a      	adds	r2, r7, r1
 8001706:	4806      	ldr	r0, [pc, #24]	; (8001720 <WriteReg_I2C_SOUND+0x40>)
 8001708:	23fa      	movs	r3, #250	; 0xfa
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2302      	movs	r3, #2
 8001710:	2130      	movs	r1, #48	; 0x30
 8001712:	f002 fe05 	bl	8004320 <HAL_I2C_Master_Transmit>
	}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	46bd      	mov	sp, r7
 800171a:	b004      	add	sp, #16
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	20003234 	.word	0x20003234

08001724 <answer2CPU>:
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 800172c:	230f      	movs	r3, #15
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	22ff      	movs	r2, #255	; 0xff
 8001732:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 8001734:	230d      	movs	r3, #13
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 800173c:	230a      	movs	r3, #10
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	2200      	movs	r2, #0
 8001742:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 8001744:	4bd3      	ldr	r3, [pc, #844]	; (8001a94 <answer2CPU+0x370>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b11      	cmp	r3, #17
 8001750:	d00b      	beq.n	800176a <answer2CPU+0x46>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b12      	cmp	r3, #18
 8001758:	d007      	beq.n	800176a <answer2CPU+0x46>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b13      	cmp	r3, #19
 8001760:	d003      	beq.n	800176a <answer2CPU+0x46>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b14      	cmp	r3, #20
 8001768:	d105      	bne.n	8001776 <answer2CPU+0x52>
 800176a:	4bcb      	ldr	r3, [pc, #812]	; (8001a98 <answer2CPU+0x374>)
 800176c:	695a      	ldr	r2, [r3, #20]
 800176e:	4bca      	ldr	r3, [pc, #808]	; (8001a98 <answer2CPU+0x374>)
 8001770:	2140      	movs	r1, #64	; 0x40
 8001772:	438a      	bics	r2, r1
 8001774:	615a      	str	r2, [r3, #20]
		ans[0] = cmd[0]|0x80;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	4252      	negs	r2, r2
 800177e:	4313      	orrs	r3, r2
 8001780:	b2db      	uxtb	r3, r3
 8001782:	b29a      	uxth	r2, r3
 8001784:	4bc5      	ldr	r3, [pc, #788]	; (8001a9c <answer2CPU+0x378>)
 8001786:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d800      	bhi.n	8001792 <answer2CPU+0x6e>
 8001790:	e150      	b.n	8001a34 <answer2CPU+0x310>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b15      	cmp	r3, #21
 8001798:	d900      	bls.n	800179c <answer2CPU+0x78>
 800179a:	e14b      	b.n	8001a34 <answer2CPU+0x310>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 800179c:	23a0      	movs	r3, #160	; 0xa0
 800179e:	05db      	lsls	r3, r3, #23
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	2201      	movs	r2, #1
 80017a4:	4013      	ands	r3, r2
 80017a6:	d106      	bne.n	80017b6 <answer2CPU+0x92>
					keyboard &= 0b11111110;
 80017a8:	220f      	movs	r2, #15
 80017aa:	18bb      	adds	r3, r7, r2
 80017ac:	18ba      	adds	r2, r7, r2
 80017ae:	7812      	ldrb	r2, [r2, #0]
 80017b0:	2101      	movs	r1, #1
 80017b2:	438a      	bics	r2, r1
 80017b4:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 80017b6:	23a0      	movs	r3, #160	; 0xa0
 80017b8:	05db      	lsls	r3, r3, #23
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	2202      	movs	r2, #2
 80017be:	4013      	ands	r3, r2
 80017c0:	d106      	bne.n	80017d0 <answer2CPU+0xac>
					keyboard &= 0b11111101;
 80017c2:	220f      	movs	r2, #15
 80017c4:	18bb      	adds	r3, r7, r2
 80017c6:	18ba      	adds	r2, r7, r2
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	2102      	movs	r1, #2
 80017cc:	438a      	bics	r2, r1
 80017ce:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 80017d0:	23a0      	movs	r3, #160	; 0xa0
 80017d2:	05db      	lsls	r3, r3, #23
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	2210      	movs	r2, #16
 80017d8:	4013      	ands	r3, r2
 80017da:	d106      	bne.n	80017ea <answer2CPU+0xc6>
					keyboard &= 0b11111011;
 80017dc:	220f      	movs	r2, #15
 80017de:	18bb      	adds	r3, r7, r2
 80017e0:	18ba      	adds	r2, r7, r2
 80017e2:	7812      	ldrb	r2, [r2, #0]
 80017e4:	2104      	movs	r1, #4
 80017e6:	438a      	bics	r2, r1
 80017e8:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 80017ea:	23a0      	movs	r3, #160	; 0xa0
 80017ec:	05db      	lsls	r3, r3, #23
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	019b      	lsls	r3, r3, #6
 80017f4:	4013      	ands	r3, r2
 80017f6:	d106      	bne.n	8001806 <answer2CPU+0xe2>
					keyboard &= 0b11110111;
 80017f8:	220f      	movs	r2, #15
 80017fa:	18bb      	adds	r3, r7, r2
 80017fc:	18ba      	adds	r2, r7, r2
 80017fe:	7812      	ldrb	r2, [r2, #0]
 8001800:	2108      	movs	r1, #8
 8001802:	438a      	bics	r2, r1
 8001804:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8001806:	23a0      	movs	r3, #160	; 0xa0
 8001808:	05db      	lsls	r3, r3, #23
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	01db      	lsls	r3, r3, #7
 8001810:	4013      	ands	r3, r2
 8001812:	d106      	bne.n	8001822 <answer2CPU+0xfe>
					keyboard &= 0b11101111;
 8001814:	220f      	movs	r2, #15
 8001816:	18bb      	adds	r3, r7, r2
 8001818:	18ba      	adds	r2, r7, r2
 800181a:	7812      	ldrb	r2, [r2, #0]
 800181c:	2110      	movs	r1, #16
 800181e:	438a      	bics	r2, r1
 8001820:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8001822:	210f      	movs	r1, #15
 8001824:	187b      	adds	r3, r7, r1
 8001826:	187a      	adds	r2, r7, r1
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	43d2      	mvns	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 800182e:	2009      	movs	r0, #9
 8001830:	183b      	adds	r3, r7, r0
 8001832:	2204      	movs	r2, #4
 8001834:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001836:	183b      	adds	r3, r7, r0
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b29b      	uxth	r3, r3
 800183c:	3b02      	subs	r3, #2
 800183e:	b29a      	uxth	r2, r3
 8001840:	4b96      	ldr	r3, [pc, #600]	; (8001a9c <answer2CPU+0x378>)
 8001842:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 8001844:	187b      	adds	r3, r7, r1
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b94      	ldr	r3, [pc, #592]	; (8001a9c <answer2CPU+0x378>)
 800184c:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 800184e:	230e      	movs	r3, #14
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	e011      	b.n	800187c <answer2CPU+0x158>
					myCS = myCS + ans[i];
 8001858:	200e      	movs	r0, #14
 800185a:	183b      	adds	r3, r7, r0
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	4b8f      	ldr	r3, [pc, #572]	; (8001a9c <answer2CPU+0x378>)
 8001860:	0052      	lsls	r2, r2, #1
 8001862:	5ad3      	ldrh	r3, [r2, r3]
 8001864:	b2d9      	uxtb	r1, r3
 8001866:	220d      	movs	r2, #13
 8001868:	18bb      	adds	r3, r7, r2
 800186a:	18ba      	adds	r2, r7, r2
 800186c:	7812      	ldrb	r2, [r2, #0]
 800186e:	188a      	adds	r2, r1, r2
 8001870:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001872:	183b      	adds	r3, r7, r0
 8001874:	781a      	ldrb	r2, [r3, #0]
 8001876:	183b      	adds	r3, r7, r0
 8001878:	3201      	adds	r2, #1
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	200e      	movs	r0, #14
 800187e:	183b      	adds	r3, r7, r0
 8001880:	781a      	ldrb	r2, [r3, #0]
 8001882:	2309      	movs	r3, #9
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	3b01      	subs	r3, #1
 800188a:	429a      	cmp	r2, r3
 800188c:	dbe4      	blt.n	8001858 <answer2CPU+0x134>
				}
				myCS = 0 - myCS;
 800188e:	210d      	movs	r1, #13
 8001890:	187b      	adds	r3, r7, r1
 8001892:	187a      	adds	r2, r7, r1
 8001894:	7812      	ldrb	r2, [r2, #0]
 8001896:	4252      	negs	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 800189a:	187b      	adds	r3, r7, r1
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b7e      	ldr	r3, [pc, #504]	; (8001a9c <answer2CPU+0x378>)
 80018a2:	80da      	strh	r2, [r3, #6]
				i=0;
 80018a4:	183b      	adds	r3, r7, r0
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	4b7c      	ldr	r3, [pc, #496]	; (8001aa0 <answer2CPU+0x37c>)
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	4013      	ands	r3, r2
 80018b4:	d0fa      	beq.n	80018ac <answer2CPU+0x188>
				USART2->TDR = ans[0]|0x0100;
 80018b6:	4b79      	ldr	r3, [pc, #484]	; (8001a9c <answer2CPU+0x378>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	0052      	lsls	r2, r2, #1
 80018be:	4313      	orrs	r3, r2
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	4b77      	ldr	r3, [pc, #476]	; (8001aa0 <answer2CPU+0x37c>)
 80018c4:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80018c6:	230e      	movs	r3, #14
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	e013      	b.n	80018f8 <answer2CPU+0x1d4>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80018d0:	46c0      	nop			; (mov r8, r8)
 80018d2:	4b73      	ldr	r3, [pc, #460]	; (8001aa0 <answer2CPU+0x37c>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	2280      	movs	r2, #128	; 0x80
 80018d8:	4013      	ands	r3, r2
 80018da:	d0fa      	beq.n	80018d2 <answer2CPU+0x1ae>
				    USART2->TDR = (uint8_t)ans[i];
 80018dc:	210e      	movs	r1, #14
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	781a      	ldrb	r2, [r3, #0]
 80018e2:	4b6e      	ldr	r3, [pc, #440]	; (8001a9c <answer2CPU+0x378>)
 80018e4:	0052      	lsls	r2, r2, #1
 80018e6:	5ad3      	ldrh	r3, [r2, r3]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b6d      	ldr	r3, [pc, #436]	; (8001aa0 <answer2CPU+0x37c>)
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80018ee:	187b      	adds	r3, r7, r1
 80018f0:	781a      	ldrb	r2, [r3, #0]
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	3201      	adds	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	230e      	movs	r3, #14
 80018fa:	18fa      	adds	r2, r7, r3
 80018fc:	2309      	movs	r3, #9
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3e3      	bcc.n	80018d0 <answer2CPU+0x1ac>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b11      	cmp	r3, #17
 800190e:	d109      	bne.n	8001924 <answer2CPU+0x200>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	789a      	ldrb	r2, [r3, #2]
 8001914:	4b63      	ldr	r3, [pc, #396]	; (8001aa4 <answer2CPU+0x380>)
 8001916:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001918:	4b5e      	ldr	r3, [pc, #376]	; (8001a94 <answer2CPU+0x370>)
 800191a:	2211      	movs	r2, #17
 800191c:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800191e:	4b62      	ldr	r3, [pc, #392]	; (8001aa8 <answer2CPU+0x384>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b12      	cmp	r3, #18
 800192a:	d115      	bne.n	8001958 <answer2CPU+0x234>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3302      	adds	r3, #2
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	001a      	movs	r2, r3
 8001934:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <answer2CPU+0x388>)
 8001936:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3303      	adds	r3, #3
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	001a      	movs	r2, r3
 8001940:	4b5b      	ldr	r3, [pc, #364]	; (8001ab0 <answer2CPU+0x38c>)
 8001942:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	791a      	ldrb	r2, [r3, #4]
 8001948:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <answer2CPU+0x380>)
 800194a:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 800194c:	4b51      	ldr	r3, [pc, #324]	; (8001a94 <answer2CPU+0x370>)
 800194e:	2212      	movs	r2, #18
 8001950:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001952:	4b55      	ldr	r3, [pc, #340]	; (8001aa8 <answer2CPU+0x384>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b13      	cmp	r3, #19
 800195e:	d134      	bne.n	80019ca <answer2CPU+0x2a6>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3302      	adds	r3, #2
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	001a      	movs	r2, r3
 8001968:	4b50      	ldr	r3, [pc, #320]	; (8001aac <answer2CPU+0x388>)
 800196a:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3303      	adds	r3, #3
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	001a      	movs	r2, r3
 8001974:	4b4e      	ldr	r3, [pc, #312]	; (8001ab0 <answer2CPU+0x38c>)
 8001976:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3301      	adds	r3, #1
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	3b03      	subs	r3, #3
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b4c      	ldr	r3, [pc, #304]	; (8001ab4 <answer2CPU+0x390>)
 8001984:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001986:	230e      	movs	r3, #14
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
 800198e:	e00f      	b.n	80019b0 <answer2CPU+0x28c>
					dataASCII[i] = cmd[i+4];
 8001990:	200e      	movs	r0, #14
 8001992:	183b      	adds	r3, r7, r0
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	3304      	adds	r3, #4
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	18d2      	adds	r2, r2, r3
 800199c:	183b      	adds	r3, r7, r0
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	7811      	ldrb	r1, [r2, #0]
 80019a2:	4a45      	ldr	r2, [pc, #276]	; (8001ab8 <answer2CPU+0x394>)
 80019a4:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 80019a6:	183b      	adds	r3, r7, r0
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	183b      	adds	r3, r7, r0
 80019ac:	3201      	adds	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
 80019b0:	4b40      	ldr	r3, [pc, #256]	; (8001ab4 <answer2CPU+0x390>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	220e      	movs	r2, #14
 80019b6:	18ba      	adds	r2, r7, r2
 80019b8:	7812      	ldrb	r2, [r2, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d3e8      	bcc.n	8001990 <answer2CPU+0x26c>
				}
					cmd2Execute=0x13;
 80019be:	4b35      	ldr	r3, [pc, #212]	; (8001a94 <answer2CPU+0x370>)
 80019c0:	2213      	movs	r2, #19
 80019c2:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80019c4:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <answer2CPU+0x384>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b14      	cmp	r3, #20
 80019d0:	d10c      	bne.n	80019ec <answer2CPU+0x2c8>
					numSound = cmd[3];
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	78da      	ldrb	r2, [r3, #3]
 80019d6:	4b39      	ldr	r3, [pc, #228]	; (8001abc <answer2CPU+0x398>)
 80019d8:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 80019da:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <answer2CPU+0x370>)
 80019dc:	2214      	movs	r2, #20
 80019de:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	22ff      	movs	r2, #255	; 0xff
 80019e4:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 80019e6:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <answer2CPU+0x384>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b15      	cmp	r3, #21
 80019f2:	d10d      	bne.n	8001a10 <answer2CPU+0x2ec>
					volume = cmd[2];
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	789a      	ldrb	r2, [r3, #2]
 80019f8:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <answer2CPU+0x39c>)
 80019fa:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	78da      	ldrb	r2, [r3, #3]
 8001a00:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <answer2CPU+0x3a0>)
 8001a02:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <answer2CPU+0x370>)
 8001a06:	2215      	movs	r2, #21
 8001a08:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001a0a:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <answer2CPU+0x384>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b16      	cmp	r3, #22
 8001a16:	d10d      	bne.n	8001a34 <answer2CPU+0x310>
					volume = cmd[3];
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	78da      	ldrb	r2, [r3, #3]
 8001a1c:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <answer2CPU+0x39c>)
 8001a1e:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	791a      	ldrb	r2, [r3, #4]
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <answer2CPU+0x3a0>)
 8001a26:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8001a28:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <answer2CPU+0x370>)
 8001a2a:	2216      	movs	r2, #22
 8001a2c:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <answer2CPU+0x384>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d000      	beq.n	8001a3e <answer2CPU+0x31a>
 8001a3c:	e09c      	b.n	8001b78 <answer2CPU+0x454>
				myLength = 0x14; //20 bytes length answer
 8001a3e:	2109      	movs	r1, #9
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	2214      	movs	r2, #20
 8001a44:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001a46:	187b      	adds	r3, r7, r1
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b02      	subs	r3, #2
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <answer2CPU+0x378>)
 8001a52:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001a54:	230e      	movs	r3, #14
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	e010      	b.n	8001a80 <answer2CPU+0x35c>
					ans[i + 2] = PCB_type[i];
 8001a5e:	200e      	movs	r0, #14
 8001a60:	183b      	adds	r3, r7, r0
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4a18      	ldr	r2, [pc, #96]	; (8001ac8 <answer2CPU+0x3a4>)
 8001a66:	5cd1      	ldrb	r1, [r2, r3]
 8001a68:	183b      	adds	r3, r7, r0
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	1c9a      	adds	r2, r3, #2
 8001a6e:	b289      	uxth	r1, r1
 8001a70:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <answer2CPU+0x378>)
 8001a72:	0052      	lsls	r2, r2, #1
 8001a74:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001a76:	183b      	adds	r3, r7, r0
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	183b      	adds	r3, r7, r0
 8001a7c:	3201      	adds	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
 8001a80:	220e      	movs	r2, #14
 8001a82:	18bb      	adds	r3, r7, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d9e9      	bls.n	8001a5e <answer2CPU+0x33a>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001a8a:	18bb      	adds	r3, r7, r2
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e02e      	b.n	8001af0 <answer2CPU+0x3cc>
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	2000345e 	.word	0x2000345e
 8001a98:	50000800 	.word	0x50000800
 8001a9c:	200034a0 	.word	0x200034a0
 8001aa0:	40004400 	.word	0x40004400
 8001aa4:	2000345d 	.word	0x2000345d
 8001aa8:	200034b4 	.word	0x200034b4
 8001aac:	200032f4 	.word	0x200032f4
 8001ab0:	20003388 	.word	0x20003388
 8001ab4:	2000349d 	.word	0x2000349d
 8001ab8:	200031a0 	.word	0x200031a0
 8001abc:	2000351d 	.word	0x2000351d
 8001ac0:	200032f1 	.word	0x200032f1
 8001ac4:	200033f4 	.word	0x200033f4
 8001ac8:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 8001acc:	200e      	movs	r0, #14
 8001ace:	183b      	adds	r3, r7, r0
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	4bdb      	ldr	r3, [pc, #876]	; (8001e40 <answer2CPU+0x71c>)
 8001ad4:	0052      	lsls	r2, r2, #1
 8001ad6:	5ad3      	ldrh	r3, [r2, r3]
 8001ad8:	b2d9      	uxtb	r1, r3
 8001ada:	220d      	movs	r2, #13
 8001adc:	18bb      	adds	r3, r7, r2
 8001ade:	18ba      	adds	r2, r7, r2
 8001ae0:	7812      	ldrb	r2, [r2, #0]
 8001ae2:	188a      	adds	r2, r1, r2
 8001ae4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001ae6:	183b      	adds	r3, r7, r0
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	183b      	adds	r3, r7, r0
 8001aec:	3201      	adds	r2, #1
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	230e      	movs	r3, #14
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	2009      	movs	r0, #9
 8001af8:	183b      	adds	r3, r7, r0
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	429a      	cmp	r2, r3
 8001b00:	dbe4      	blt.n	8001acc <answer2CPU+0x3a8>
				}
				myCS = 0 - myCS;
 8001b02:	210d      	movs	r1, #13
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	187a      	adds	r2, r7, r1
 8001b08:	7812      	ldrb	r2, [r2, #0]
 8001b0a:	4252      	negs	r2, r2
 8001b0c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001b0e:	183b      	adds	r3, r7, r0
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	1e5a      	subs	r2, r3, #1
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b299      	uxth	r1, r3
 8001b1a:	4bc9      	ldr	r3, [pc, #804]	; (8001e40 <answer2CPU+0x71c>)
 8001b1c:	0052      	lsls	r2, r2, #1
 8001b1e:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b20:	46c0      	nop			; (mov r8, r8)
 8001b22:	4bc8      	ldr	r3, [pc, #800]	; (8001e44 <answer2CPU+0x720>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	2280      	movs	r2, #128	; 0x80
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d0fa      	beq.n	8001b22 <answer2CPU+0x3fe>
				USART2->TDR = ans[0]|0x0100;
 8001b2c:	4bc4      	ldr	r3, [pc, #784]	; (8001e40 <answer2CPU+0x71c>)
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	2280      	movs	r2, #128	; 0x80
 8001b32:	0052      	lsls	r2, r2, #1
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	4bc2      	ldr	r3, [pc, #776]	; (8001e44 <answer2CPU+0x720>)
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001b3c:	e014      	b.n	8001b68 <answer2CPU+0x444>
				  {
				    i++;
 8001b3e:	210e      	movs	r1, #14
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	187b      	adds	r3, r7, r1
 8001b46:	3201      	adds	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	4bbd      	ldr	r3, [pc, #756]	; (8001e44 <answer2CPU+0x720>)
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	4013      	ands	r3, r2
 8001b54:	d0fa      	beq.n	8001b4c <answer2CPU+0x428>
				    USART2->TDR = (uint8_t)ans[i];
 8001b56:	230e      	movs	r3, #14
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	781a      	ldrb	r2, [r3, #0]
 8001b5c:	4bb8      	ldr	r3, [pc, #736]	; (8001e40 <answer2CPU+0x71c>)
 8001b5e:	0052      	lsls	r2, r2, #1
 8001b60:	5ad3      	ldrh	r3, [r2, r3]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	4bb7      	ldr	r3, [pc, #732]	; (8001e44 <answer2CPU+0x720>)
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001b68:	230e      	movs	r3, #14
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	781a      	ldrb	r2, [r3, #0]
 8001b6e:	4bb4      	ldr	r3, [pc, #720]	; (8001e40 <answer2CPU+0x71c>)
 8001b70:	0052      	lsls	r2, r2, #1
 8001b72:	5ad3      	ldrh	r3, [r2, r3]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1e2      	bne.n	8001b3e <answer2CPU+0x41a>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d000      	beq.n	8001b82 <answer2CPU+0x45e>
 8001b80:	e07f      	b.n	8001c82 <answer2CPU+0x55e>
				myLength = 0x0B; //19 bytes length answer
 8001b82:	2109      	movs	r1, #9
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	220b      	movs	r2, #11
 8001b88:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b8a:	187b      	adds	r3, r7, r1
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b02      	subs	r3, #2
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	4baa      	ldr	r3, [pc, #680]	; (8001e40 <answer2CPU+0x71c>)
 8001b96:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001b98:	230e      	movs	r3, #14
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	e010      	b.n	8001bc4 <answer2CPU+0x4a0>
					ans[i + 2] = PCB_rev[i];
 8001ba2:	200e      	movs	r0, #14
 8001ba4:	183b      	adds	r3, r7, r0
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4aa7      	ldr	r2, [pc, #668]	; (8001e48 <answer2CPU+0x724>)
 8001baa:	5cd1      	ldrb	r1, [r2, r3]
 8001bac:	183b      	adds	r3, r7, r0
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	1c9a      	adds	r2, r3, #2
 8001bb2:	b289      	uxth	r1, r1
 8001bb4:	4ba2      	ldr	r3, [pc, #648]	; (8001e40 <answer2CPU+0x71c>)
 8001bb6:	0052      	lsls	r2, r2, #1
 8001bb8:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001bba:	183b      	adds	r3, r7, r0
 8001bbc:	781a      	ldrb	r2, [r3, #0]
 8001bbe:	183b      	adds	r3, r7, r0
 8001bc0:	3201      	adds	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
 8001bc4:	220e      	movs	r2, #14
 8001bc6:	18bb      	adds	r3, r7, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b10      	cmp	r3, #16
 8001bcc:	d9e9      	bls.n	8001ba2 <answer2CPU+0x47e>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001bce:	18bb      	adds	r3, r7, r2
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	e011      	b.n	8001bfa <answer2CPU+0x4d6>
					myCS = myCS + ans[i];
 8001bd6:	200e      	movs	r0, #14
 8001bd8:	183b      	adds	r3, r7, r0
 8001bda:	781a      	ldrb	r2, [r3, #0]
 8001bdc:	4b98      	ldr	r3, [pc, #608]	; (8001e40 <answer2CPU+0x71c>)
 8001bde:	0052      	lsls	r2, r2, #1
 8001be0:	5ad3      	ldrh	r3, [r2, r3]
 8001be2:	b2d9      	uxtb	r1, r3
 8001be4:	220d      	movs	r2, #13
 8001be6:	18bb      	adds	r3, r7, r2
 8001be8:	18ba      	adds	r2, r7, r2
 8001bea:	7812      	ldrb	r2, [r2, #0]
 8001bec:	188a      	adds	r2, r1, r2
 8001bee:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001bf0:	183b      	adds	r3, r7, r0
 8001bf2:	781a      	ldrb	r2, [r3, #0]
 8001bf4:	183b      	adds	r3, r7, r0
 8001bf6:	3201      	adds	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]
 8001bfa:	230e      	movs	r3, #14
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	2009      	movs	r0, #9
 8001c02:	183b      	adds	r3, r7, r0
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	dbe4      	blt.n	8001bd6 <answer2CPU+0x4b2>
				}
				myCS = 0 - myCS;
 8001c0c:	210d      	movs	r1, #13
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	187a      	adds	r2, r7, r1
 8001c12:	7812      	ldrb	r2, [r2, #0]
 8001c14:	4252      	negs	r2, r2
 8001c16:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c18:	183b      	adds	r3, r7, r0
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	1e5a      	subs	r2, r3, #1
 8001c1e:	187b      	adds	r3, r7, r1
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b299      	uxth	r1, r3
 8001c24:	4b86      	ldr	r3, [pc, #536]	; (8001e40 <answer2CPU+0x71c>)
 8001c26:	0052      	lsls	r2, r2, #1
 8001c28:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	4b85      	ldr	r3, [pc, #532]	; (8001e44 <answer2CPU+0x720>)
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	2280      	movs	r2, #128	; 0x80
 8001c32:	4013      	ands	r3, r2
 8001c34:	d0fa      	beq.n	8001c2c <answer2CPU+0x508>
				USART2->TDR = ans[0]|0x0100;
 8001c36:	4b82      	ldr	r3, [pc, #520]	; (8001e40 <answer2CPU+0x71c>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	2280      	movs	r2, #128	; 0x80
 8001c3c:	0052      	lsls	r2, r2, #1
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	4b80      	ldr	r3, [pc, #512]	; (8001e44 <answer2CPU+0x720>)
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001c46:	e014      	b.n	8001c72 <answer2CPU+0x54e>
					  {
					    i++;
 8001c48:	210e      	movs	r1, #14
 8001c4a:	187b      	adds	r3, r7, r1
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	187b      	adds	r3, r7, r1
 8001c50:	3201      	adds	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	4b7b      	ldr	r3, [pc, #492]	; (8001e44 <answer2CPU+0x720>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d0fa      	beq.n	8001c56 <answer2CPU+0x532>
					    USART2->TDR = (uint8_t)ans[i];
 8001c60:	230e      	movs	r3, #14
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	781a      	ldrb	r2, [r3, #0]
 8001c66:	4b76      	ldr	r3, [pc, #472]	; (8001e40 <answer2CPU+0x71c>)
 8001c68:	0052      	lsls	r2, r2, #1
 8001c6a:	5ad3      	ldrh	r3, [r2, r3]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b75      	ldr	r3, [pc, #468]	; (8001e44 <answer2CPU+0x720>)
 8001c70:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001c72:	230e      	movs	r3, #14
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	781a      	ldrb	r2, [r3, #0]
 8001c78:	4b71      	ldr	r3, [pc, #452]	; (8001e40 <answer2CPU+0x71c>)
 8001c7a:	0052      	lsls	r2, r2, #1
 8001c7c:	5ad3      	ldrh	r3, [r2, r3]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1e2      	bne.n	8001c48 <answer2CPU+0x524>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d000      	beq.n	8001c8c <answer2CPU+0x568>
 8001c8a:	e07f      	b.n	8001d8c <answer2CPU+0x668>
				myLength = 0x13; //19 bytes length answer
 8001c8c:	2109      	movs	r1, #9
 8001c8e:	187b      	adds	r3, r7, r1
 8001c90:	2213      	movs	r2, #19
 8001c92:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	3b02      	subs	r3, #2
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	4b68      	ldr	r3, [pc, #416]	; (8001e40 <answer2CPU+0x71c>)
 8001ca0:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001ca2:	230e      	movs	r3, #14
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	e010      	b.n	8001cce <answer2CPU+0x5aa>
					ans[i + 2] = EmitterSN[i];
 8001cac:	200e      	movs	r0, #14
 8001cae:	183b      	adds	r3, r7, r0
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	4a66      	ldr	r2, [pc, #408]	; (8001e4c <answer2CPU+0x728>)
 8001cb4:	5cd1      	ldrb	r1, [r2, r3]
 8001cb6:	183b      	adds	r3, r7, r0
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	1c9a      	adds	r2, r3, #2
 8001cbc:	b289      	uxth	r1, r1
 8001cbe:	4b60      	ldr	r3, [pc, #384]	; (8001e40 <answer2CPU+0x71c>)
 8001cc0:	0052      	lsls	r2, r2, #1
 8001cc2:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001cc4:	183b      	adds	r3, r7, r0
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	183b      	adds	r3, r7, r0
 8001cca:	3201      	adds	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	220e      	movs	r2, #14
 8001cd0:	18bb      	adds	r3, r7, r2
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b10      	cmp	r3, #16
 8001cd6:	d9e9      	bls.n	8001cac <answer2CPU+0x588>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001cd8:	18bb      	adds	r3, r7, r2
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	e011      	b.n	8001d04 <answer2CPU+0x5e0>
					myCS = myCS + ans[i];
 8001ce0:	200e      	movs	r0, #14
 8001ce2:	183b      	adds	r3, r7, r0
 8001ce4:	781a      	ldrb	r2, [r3, #0]
 8001ce6:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <answer2CPU+0x71c>)
 8001ce8:	0052      	lsls	r2, r2, #1
 8001cea:	5ad3      	ldrh	r3, [r2, r3]
 8001cec:	b2d9      	uxtb	r1, r3
 8001cee:	220d      	movs	r2, #13
 8001cf0:	18bb      	adds	r3, r7, r2
 8001cf2:	18ba      	adds	r2, r7, r2
 8001cf4:	7812      	ldrb	r2, [r2, #0]
 8001cf6:	188a      	adds	r2, r1, r2
 8001cf8:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001cfa:	183b      	adds	r3, r7, r0
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	183b      	adds	r3, r7, r0
 8001d00:	3201      	adds	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	230e      	movs	r3, #14
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	781a      	ldrb	r2, [r3, #0]
 8001d0a:	2009      	movs	r0, #9
 8001d0c:	183b      	adds	r3, r7, r0
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	429a      	cmp	r2, r3
 8001d14:	dbe4      	blt.n	8001ce0 <answer2CPU+0x5bc>
				}
				myCS = 0 - myCS;
 8001d16:	210d      	movs	r1, #13
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	187a      	adds	r2, r7, r1
 8001d1c:	7812      	ldrb	r2, [r2, #0]
 8001d1e:	4252      	negs	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001d22:	183b      	adds	r3, r7, r0
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	1e5a      	subs	r2, r3, #1
 8001d28:	187b      	adds	r3, r7, r1
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	b299      	uxth	r1, r3
 8001d2e:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <answer2CPU+0x71c>)
 8001d30:	0052      	lsls	r2, r2, #1
 8001d32:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <answer2CPU+0x720>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	2280      	movs	r2, #128	; 0x80
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d0fa      	beq.n	8001d36 <answer2CPU+0x612>
				USART2->TDR = ans[0]|0x0100;
 8001d40:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <answer2CPU+0x71c>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	2280      	movs	r2, #128	; 0x80
 8001d46:	0052      	lsls	r2, r2, #1
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <answer2CPU+0x720>)
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001d50:	e014      	b.n	8001d7c <answer2CPU+0x658>
				  {
				    i++;
 8001d52:	210e      	movs	r1, #14
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	3201      	adds	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <answer2CPU+0x720>)
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	2280      	movs	r2, #128	; 0x80
 8001d66:	4013      	ands	r3, r2
 8001d68:	d0fa      	beq.n	8001d60 <answer2CPU+0x63c>
				    	USART2->TDR = (uint8_t)ans[i];
 8001d6a:	230e      	movs	r3, #14
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	4b33      	ldr	r3, [pc, #204]	; (8001e40 <answer2CPU+0x71c>)
 8001d72:	0052      	lsls	r2, r2, #1
 8001d74:	5ad3      	ldrh	r3, [r2, r3]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <answer2CPU+0x720>)
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001d7c:	230e      	movs	r3, #14
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <answer2CPU+0x71c>)
 8001d84:	0052      	lsls	r2, r2, #1
 8001d86:	5ad3      	ldrh	r3, [r2, r3]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1e2      	bne.n	8001d52 <answer2CPU+0x62e>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d000      	beq.n	8001d96 <answer2CPU+0x672>
 8001d94:	e07b      	b.n	8001e8e <answer2CPU+0x76a>
				myLength = 0x04; //4 bytes length answer
 8001d96:	2109      	movs	r1, #9
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b02      	subs	r3, #2
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <answer2CPU+0x71c>)
 8001daa:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001dac:	4b28      	ldr	r3, [pc, #160]	; (8001e50 <answer2CPU+0x72c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <answer2CPU+0x71c>)
 8001db4:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001db6:	230d      	movs	r3, #13
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <answer2CPU+0x71c>)
 8001dc0:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001dc2:	230e      	movs	r3, #14
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	e011      	b.n	8001df0 <answer2CPU+0x6cc>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001dcc:	200e      	movs	r0, #14
 8001dce:	183b      	adds	r3, r7, r0
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <answer2CPU+0x71c>)
 8001dd4:	0052      	lsls	r2, r2, #1
 8001dd6:	5ad3      	ldrh	r3, [r2, r3]
 8001dd8:	b2d9      	uxtb	r1, r3
 8001dda:	220d      	movs	r2, #13
 8001ddc:	18bb      	adds	r3, r7, r2
 8001dde:	18ba      	adds	r2, r7, r2
 8001de0:	7812      	ldrb	r2, [r2, #0]
 8001de2:	188a      	adds	r2, r1, r2
 8001de4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001de6:	183b      	adds	r3, r7, r0
 8001de8:	781a      	ldrb	r2, [r3, #0]
 8001dea:	183b      	adds	r3, r7, r0
 8001dec:	3201      	adds	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	230e      	movs	r3, #14
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	2009      	movs	r0, #9
 8001df8:	183b      	adds	r3, r7, r0
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	dbe4      	blt.n	8001dcc <answer2CPU+0x6a8>
				}
				myCS = 0 - myCS;
 8001e02:	210d      	movs	r1, #13
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	187a      	adds	r2, r7, r1
 8001e08:	7812      	ldrb	r2, [r2, #0]
 8001e0a:	4252      	negs	r2, r2
 8001e0c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001e0e:	183b      	adds	r3, r7, r0
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	1e5a      	subs	r2, r3, #1
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b299      	uxth	r1, r3
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <answer2CPU+0x71c>)
 8001e1c:	0052      	lsls	r2, r2, #1
 8001e1e:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e20:	46c0      	nop			; (mov r8, r8)
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <answer2CPU+0x720>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	2280      	movs	r2, #128	; 0x80
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d0fa      	beq.n	8001e22 <answer2CPU+0x6fe>
					USART2->TDR = ans[0]|0x0100;
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <answer2CPU+0x71c>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	0052      	lsls	r2, r2, #1
 8001e34:	4313      	orrs	r3, r2
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <answer2CPU+0x720>)
 8001e3a:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001e3c:	e01f      	b.n	8001e7e <answer2CPU+0x75a>
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	200034a0 	.word	0x200034a0
 8001e44:	40004400 	.word	0x40004400
 8001e48:	20003114 	.word	0x20003114
 8001e4c:	20003120 	.word	0x20003120
 8001e50:	2000311c 	.word	0x2000311c
						{
						  i++;
 8001e54:	210e      	movs	r1, #14
 8001e56:	187b      	adds	r3, r7, r1
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	187b      	adds	r3, r7, r1
 8001e5c:	3201      	adds	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e60:	46c0      	nop			; (mov r8, r8)
 8001e62:	4b4e      	ldr	r3, [pc, #312]	; (8001f9c <answer2CPU+0x878>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d0fa      	beq.n	8001e62 <answer2CPU+0x73e>
						     USART2->TDR = (uint8_t)ans[i];
 8001e6c:	230e      	movs	r3, #14
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	4b4b      	ldr	r3, [pc, #300]	; (8001fa0 <answer2CPU+0x87c>)
 8001e74:	0052      	lsls	r2, r2, #1
 8001e76:	5ad3      	ldrh	r3, [r2, r3]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4b48      	ldr	r3, [pc, #288]	; (8001f9c <answer2CPU+0x878>)
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001e7e:	230e      	movs	r3, #14
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <answer2CPU+0x87c>)
 8001e86:	0052      	lsls	r2, r2, #1
 8001e88:	5ad3      	ldrh	r3, [r2, r3]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1e2      	bne.n	8001e54 <answer2CPU+0x730>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d000      	beq.n	8001e98 <answer2CPU+0x774>
 8001e96:	e076      	b.n	8001f86 <answer2CPU+0x862>
				myLength = 0x04; //4 bytes length answer
 8001e98:	2109      	movs	r1, #9
 8001e9a:	187b      	adds	r3, r7, r1
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001ea0:	187b      	adds	r3, r7, r1
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b02      	subs	r3, #2
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <answer2CPU+0x87c>)
 8001eac:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	001a      	movs	r2, r3
 8001eb6:	4b3b      	ldr	r3, [pc, #236]	; (8001fa4 <answer2CPU+0x880>)
 8001eb8:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001eba:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <answer2CPU+0x884>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b37      	ldr	r3, [pc, #220]	; (8001fa0 <answer2CPU+0x87c>)
 8001ec2:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001ec4:	230d      	movs	r3, #13
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <answer2CPU+0x87c>)
 8001ece:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001ed0:	230e      	movs	r3, #14
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	e011      	b.n	8001efe <answer2CPU+0x7da>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001eda:	200e      	movs	r0, #14
 8001edc:	183b      	adds	r3, r7, r0
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	4b2f      	ldr	r3, [pc, #188]	; (8001fa0 <answer2CPU+0x87c>)
 8001ee2:	0052      	lsls	r2, r2, #1
 8001ee4:	5ad3      	ldrh	r3, [r2, r3]
 8001ee6:	b2d9      	uxtb	r1, r3
 8001ee8:	220d      	movs	r2, #13
 8001eea:	18bb      	adds	r3, r7, r2
 8001eec:	18ba      	adds	r2, r7, r2
 8001eee:	7812      	ldrb	r2, [r2, #0]
 8001ef0:	188a      	adds	r2, r1, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001ef4:	183b      	adds	r3, r7, r0
 8001ef6:	781a      	ldrb	r2, [r3, #0]
 8001ef8:	183b      	adds	r3, r7, r0
 8001efa:	3201      	adds	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
 8001efe:	230e      	movs	r3, #14
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	781a      	ldrb	r2, [r3, #0]
 8001f04:	2009      	movs	r0, #9
 8001f06:	183b      	adds	r3, r7, r0
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dbe4      	blt.n	8001eda <answer2CPU+0x7b6>
				}
				myCS = 0 - myCS;
 8001f10:	210d      	movs	r1, #13
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	187a      	adds	r2, r7, r1
 8001f16:	7812      	ldrb	r2, [r2, #0]
 8001f18:	4252      	negs	r2, r2
 8001f1a:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001f1c:	183b      	adds	r3, r7, r0
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	1e5a      	subs	r2, r3, #1
 8001f22:	187b      	adds	r3, r7, r1
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b299      	uxth	r1, r3
 8001f28:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <answer2CPU+0x87c>)
 8001f2a:	0052      	lsls	r2, r2, #1
 8001f2c:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <answer2CPU+0x878>)
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	4013      	ands	r3, r2
 8001f38:	d0fa      	beq.n	8001f30 <answer2CPU+0x80c>
				USART2->TDR = ans[0]|0x0100;
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <answer2CPU+0x87c>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	0052      	lsls	r2, r2, #1
 8001f42:	4313      	orrs	r3, r2
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <answer2CPU+0x878>)
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001f4a:	e014      	b.n	8001f76 <answer2CPU+0x852>
				{
				  i++;
 8001f4c:	210e      	movs	r1, #14
 8001f4e:	187b      	adds	r3, r7, r1
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	187b      	adds	r3, r7, r1
 8001f54:	3201      	adds	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <answer2CPU+0x878>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	2280      	movs	r2, #128	; 0x80
 8001f60:	4013      	ands	r3, r2
 8001f62:	d0fa      	beq.n	8001f5a <answer2CPU+0x836>
				  USART2->TDR = (uint8_t)ans[i];
 8001f64:	230e      	movs	r3, #14
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <answer2CPU+0x87c>)
 8001f6c:	0052      	lsls	r2, r2, #1
 8001f6e:	5ad3      	ldrh	r3, [r2, r3]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <answer2CPU+0x878>)
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001f76:	230e      	movs	r3, #14
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <answer2CPU+0x87c>)
 8001f7e:	0052      	lsls	r2, r2, #1
 8001f80:	5ad3      	ldrh	r3, [r2, r3]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1e2      	bne.n	8001f4c <answer2CPU+0x828>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001f86:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <answer2CPU+0x878>)
 8001f88:	6a1a      	ldr	r2, [r3, #32]
 8001f8a:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <answer2CPU+0x878>)
 8001f8c:	2108      	movs	r1, #8
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	621a      	str	r2, [r3, #32]
}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	0018      	movs	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b004      	add	sp, #16
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40004400 	.word	0x40004400
 8001fa0:	200034a0 	.word	0x200034a0
 8001fa4:	200033fc 	.word	0x200033fc
 8001fa8:	200032f2 	.word	0x200032f2

08001fac <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f001 f97a 	bl	80032ac <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <MEM_Reset+0xb0>)
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <MEM_Reset+0xb0>)
 8001fbe:	4928      	ldr	r1, [pc, #160]	; (8002060 <MEM_Reset+0xb4>)
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001fc4:	1dfb      	adds	r3, r7, #7
 8001fc6:	2266      	movs	r2, #102	; 0x66
 8001fc8:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001fca:	1df9      	adds	r1, r7, #7
 8001fcc:	4825      	ldr	r0, [pc, #148]	; (8002064 <MEM_Reset+0xb8>)
 8001fce:	2305      	movs	r3, #5
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f004 ff41 	bl	8006e58 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001fd6:	4b21      	ldr	r3, [pc, #132]	; (800205c <MEM_Reset+0xb0>)
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <MEM_Reset+0xb0>)
 8001fdc:	2180      	movs	r1, #128	; 0x80
 8001fde:	0209      	lsls	r1, r1, #8
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001fe4:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001fe6:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001fe8:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001fea:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001fec:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001fee:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <MEM_Reset+0xb0>)
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <MEM_Reset+0xb0>)
 8001ff6:	491a      	ldr	r1, [pc, #104]	; (8002060 <MEM_Reset+0xb4>)
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001ffc:	1dfb      	adds	r3, r7, #7
 8001ffe:	2299      	movs	r2, #153	; 0x99
 8002000:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8002002:	1df9      	adds	r1, r7, #7
 8002004:	4817      	ldr	r0, [pc, #92]	; (8002064 <MEM_Reset+0xb8>)
 8002006:	2305      	movs	r3, #5
 8002008:	2201      	movs	r2, #1
 800200a:	f004 ff25 	bl	8006e58 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <MEM_Reset+0xb0>)
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <MEM_Reset+0xb0>)
 8002014:	2180      	movs	r1, #128	; 0x80
 8002016:	0209      	lsls	r1, r1, #8
 8002018:	430a      	orrs	r2, r1
 800201a:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 800201c:	2001      	movs	r0, #1
 800201e:	f001 f945 	bl	80032ac <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	22b7      	movs	r2, #183	; 0xb7
 8002026:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <MEM_Reset+0xb0>)
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <MEM_Reset+0xb0>)
 800202e:	490c      	ldr	r1, [pc, #48]	; (8002060 <MEM_Reset+0xb4>)
 8002030:	400a      	ands	r2, r1
 8002032:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8002034:	1df9      	adds	r1, r7, #7
 8002036:	480b      	ldr	r0, [pc, #44]	; (8002064 <MEM_Reset+0xb8>)
 8002038:	2305      	movs	r3, #5
 800203a:	2201      	movs	r2, #1
 800203c:	f004 ff0c 	bl	8006e58 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <MEM_Reset+0xb0>)
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <MEM_Reset+0xb0>)
 8002046:	2180      	movs	r1, #128	; 0x80
 8002048:	0209      	lsls	r1, r1, #8
 800204a:	430a      	orrs	r2, r1
 800204c:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 800204e:	2001      	movs	r0, #1
 8002050:	f001 f92c 	bl	80032ac <HAL_Delay>
	}
 8002054:	46c0      	nop			; (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	b002      	add	sp, #8
 800205a:	bd80      	pop	{r7, pc}
 800205c:	50000800 	.word	0x50000800
 8002060:	ffff7fff 	.word	0xffff7fff
 8002064:	200031b0 	.word	0x200031b0

08002068 <weoShowFullScreenDMA>:
		GPIOC->ODR |= 1 << 6;	//set BF
		cmd2Execute=0;
	}
//==========================================================================================================================

	uint8_t weoShowFullScreenDMA(uint8_t picNum) {
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	4c41      	ldr	r4, [pc, #260]	; (8002170 <weoShowFullScreenDMA+0x108>)
 800206c:	44a5      	add	sp, r4
 800206e:	af00      	add	r7, sp, #0
 8002070:	0002      	movs	r2, r0
 8002072:	4b40      	ldr	r3, [pc, #256]	; (8002174 <weoShowFullScreenDMA+0x10c>)
 8002074:	4940      	ldr	r1, [pc, #256]	; (8002178 <weoShowFullScreenDMA+0x110>)
 8002076:	468c      	mov	ip, r1
 8002078:	44bc      	add	ip, r7
 800207a:	4463      	add	r3, ip
 800207c:	701a      	strb	r2, [r3, #0]
//		uint8_t MEM_Buffer[8192];
		uint8_t DUMMY_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i;
		uint32_t addrInfo,addr;

		weoDrawRectangleInit(0x00, 0x00, 0x7F, 0x7F); // Здесь ещё работает
 800207e:	237f      	movs	r3, #127	; 0x7f
 8002080:	227f      	movs	r2, #127	; 0x7f
 8002082:	2100      	movs	r1, #0
 8002084:	2000      	movs	r0, #0
 8002086:	f7ff fa85 	bl	8001594 <weoDrawRectangleInit>

		len=8192;
 800208a:	4b3c      	ldr	r3, [pc, #240]	; (800217c <weoShowFullScreenDMA+0x114>)
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	0192      	lsls	r2, r2, #6
 8002090:	801a      	strh	r2, [r3, #0]
		dma_spi_cnt=len;
 8002092:	4b3a      	ldr	r3, [pc, #232]	; (800217c <weoShowFullScreenDMA+0x114>)
 8002094:	881a      	ldrh	r2, [r3, #0]
 8002096:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <weoShowFullScreenDMA+0x118>)
 8002098:	801a      	strh	r2, [r3, #0]
		memCMD = 0x13; //read command with 4-byte address
 800209a:	483a      	ldr	r0, [pc, #232]	; (8002184 <weoShowFullScreenDMA+0x11c>)
 800209c:	183b      	adds	r3, r7, r0
 800209e:	2213      	movs	r2, #19
 80020a0:	701a      	strb	r2, [r3, #0]

		addr=((picNum)*0x2000);
 80020a2:	4b34      	ldr	r3, [pc, #208]	; (8002174 <weoShowFullScreenDMA+0x10c>)
 80020a4:	4a34      	ldr	r2, [pc, #208]	; (8002178 <weoShowFullScreenDMA+0x110>)
 80020a6:	4694      	mov	ip, r2
 80020a8:	44bc      	add	ip, r7
 80020aa:	4463      	add	r3, ip
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	035b      	lsls	r3, r3, #13
 80020b0:	4935      	ldr	r1, [pc, #212]	; (8002188 <weoShowFullScreenDMA+0x120>)
 80020b2:	187a      	adds	r2, r7, r1
 80020b4:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 80020b6:	187b      	adds	r3, r7, r1
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	4b33      	ldr	r3, [pc, #204]	; (800218c <weoShowFullScreenDMA+0x124>)
 80020be:	4c2e      	ldr	r4, [pc, #184]	; (8002178 <weoShowFullScreenDMA+0x110>)
 80020c0:	46a4      	mov	ip, r4
 80020c2:	44bc      	add	ip, r7
 80020c4:	4463      	add	r3, ip
 80020c6:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80020c8:	187b      	adds	r3, r7, r1
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b2e      	ldr	r3, [pc, #184]	; (800218c <weoShowFullScreenDMA+0x124>)
 80020d2:	4c29      	ldr	r4, [pc, #164]	; (8002178 <weoShowFullScreenDMA+0x110>)
 80020d4:	46a4      	mov	ip, r4
 80020d6:	44bc      	add	ip, r7
 80020d8:	4463      	add	r3, ip
 80020da:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80020dc:	187b      	adds	r3, r7, r1
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	0c1b      	lsrs	r3, r3, #16
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	4b29      	ldr	r3, [pc, #164]	; (800218c <weoShowFullScreenDMA+0x124>)
 80020e6:	4c24      	ldr	r4, [pc, #144]	; (8002178 <weoShowFullScreenDMA+0x110>)
 80020e8:	46a4      	mov	ip, r4
 80020ea:	44bc      	add	ip, r7
 80020ec:	4463      	add	r3, ip
 80020ee:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	0e1b      	lsrs	r3, r3, #24
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	4b24      	ldr	r3, [pc, #144]	; (800218c <weoShowFullScreenDMA+0x124>)
 80020fa:	491f      	ldr	r1, [pc, #124]	; (8002178 <weoShowFullScreenDMA+0x110>)
 80020fc:	468c      	mov	ip, r1
 80020fe:	44bc      	add	ip, r7
 8002100:	4463      	add	r3, ip
 8002102:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <weoShowFullScreenDMA+0x128>)
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	4b21      	ldr	r3, [pc, #132]	; (8002190 <weoShowFullScreenDMA+0x128>)
 800210a:	4922      	ldr	r1, [pc, #136]	; (8002194 <weoShowFullScreenDMA+0x12c>)
 800210c:	400a      	ands	r2, r1
 800210e:	615a      	str	r2, [r3, #20]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002110:	1839      	adds	r1, r7, r0
 8002112:	4821      	ldr	r0, [pc, #132]	; (8002198 <weoShowFullScreenDMA+0x130>)
 8002114:	2332      	movs	r3, #50	; 0x32
 8002116:	2201      	movs	r2, #1
 8002118:	f004 fe9e 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 800211c:	2408      	movs	r4, #8
 800211e:	193b      	adds	r3, r7, r4
 8002120:	1cd9      	adds	r1, r3, #3
 8002122:	481d      	ldr	r0, [pc, #116]	; (8002198 <weoShowFullScreenDMA+0x130>)
 8002124:	2332      	movs	r3, #50	; 0x32
 8002126:	2201      	movs	r2, #1
 8002128:	f004 fe96 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 800212c:	193b      	adds	r3, r7, r4
 800212e:	1c99      	adds	r1, r3, #2
 8002130:	4819      	ldr	r0, [pc, #100]	; (8002198 <weoShowFullScreenDMA+0x130>)
 8002132:	2332      	movs	r3, #50	; 0x32
 8002134:	2201      	movs	r2, #1
 8002136:	f004 fe8f 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 800213a:	193b      	adds	r3, r7, r4
 800213c:	1c59      	adds	r1, r3, #1
 800213e:	4816      	ldr	r0, [pc, #88]	; (8002198 <weoShowFullScreenDMA+0x130>)
 8002140:	2332      	movs	r3, #50	; 0x32
 8002142:	2201      	movs	r2, #1
 8002144:	f004 fe88 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002148:	1939      	adds	r1, r7, r4
 800214a:	4813      	ldr	r0, [pc, #76]	; (8002198 <weoShowFullScreenDMA+0x130>)
 800214c:	2332      	movs	r3, #50	; 0x32
 800214e:	2201      	movs	r2, #1
 8002150:	f004 fe82 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <weoShowFullScreenDMA+0x114>)
 8002156:	881a      	ldrh	r2, [r3, #0]
 8002158:	4910      	ldr	r1, [pc, #64]	; (800219c <weoShowFullScreenDMA+0x134>)
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <weoShowFullScreenDMA+0x130>)
 800215c:	0018      	movs	r0, r3
 800215e:	f005 faf1 	bl	8007744 <HAL_SPI_Receive_DMA>
	}
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <weoShowFullScreenDMA+0x138>)
 800216a:	449d      	add	sp, r3
 800216c:	bd90      	pop	{r4, r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	ffffdfe4 	.word	0xffffdfe4
 8002174:	ffffdfef 	.word	0xffffdfef
 8002178:	00002018 	.word	0x00002018
 800217c:	200035dc 	.word	0x200035dc
 8002180:	20003132 	.word	0x20003132
 8002184:	00002013 	.word	0x00002013
 8002188:	00002014 	.word	0x00002014
 800218c:	ffffdff0 	.word	0xffffdff0
 8002190:	50000800 	.word	0x50000800
 8002194:	ffff7fff 	.word	0xffff7fff
 8002198:	200031b0 	.word	0x200031b0
 800219c:	200035e4 	.word	0x200035e4
 80021a0:	0000201c 	.word	0x0000201c

080021a4 <weoShowSmallImage>:
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	4cb4      	ldr	r4, [pc, #720]	; (8002478 <weoShowSmallImage+0x2d4>)
 80021a8:	44a5      	add	sp, r4
 80021aa:	af02      	add	r7, sp, #8
 80021ac:	0004      	movs	r4, r0
 80021ae:	0008      	movs	r0, r1
 80021b0:	0011      	movs	r1, r2
 80021b2:	4bb2      	ldr	r3, [pc, #712]	; (800247c <weoShowSmallImage+0x2d8>)
 80021b4:	4ab2      	ldr	r2, [pc, #712]	; (8002480 <weoShowSmallImage+0x2dc>)
 80021b6:	4694      	mov	ip, r2
 80021b8:	44bc      	add	ip, r7
 80021ba:	4463      	add	r3, ip
 80021bc:	1c22      	adds	r2, r4, #0
 80021be:	701a      	strb	r2, [r3, #0]
 80021c0:	4bb0      	ldr	r3, [pc, #704]	; (8002484 <weoShowSmallImage+0x2e0>)
 80021c2:	4aaf      	ldr	r2, [pc, #700]	; (8002480 <weoShowSmallImage+0x2dc>)
 80021c4:	4694      	mov	ip, r2
 80021c6:	44bc      	add	ip, r7
 80021c8:	4463      	add	r3, ip
 80021ca:	1c02      	adds	r2, r0, #0
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	4bae      	ldr	r3, [pc, #696]	; (8002488 <weoShowSmallImage+0x2e4>)
 80021d0:	4aab      	ldr	r2, [pc, #684]	; (8002480 <weoShowSmallImage+0x2dc>)
 80021d2:	4694      	mov	ip, r2
 80021d4:	44bc      	add	ip, r7
 80021d6:	4463      	add	r3, ip
 80021d8:	1c0a      	adds	r2, r1, #0
 80021da:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H,decY;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 80021dc:	2300      	movs	r3, #0
 80021de:	49ab      	ldr	r1, [pc, #684]	; (800248c <weoShowSmallImage+0x2e8>)
 80021e0:	187a      	adds	r2, r7, r1
 80021e2:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 80021e4:	48aa      	ldr	r0, [pc, #680]	; (8002490 <weoShowSmallImage+0x2ec>)
 80021e6:	183b      	adds	r3, r7, r0
 80021e8:	2213      	movs	r2, #19
 80021ea:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 80021ec:	4ba3      	ldr	r3, [pc, #652]	; (800247c <weoShowSmallImage+0x2d8>)
 80021ee:	4aa4      	ldr	r2, [pc, #656]	; (8002480 <weoShowSmallImage+0x2dc>)
 80021f0:	4694      	mov	ip, r2
 80021f2:	44bc      	add	ip, r7
 80021f4:	4463      	add	r3, ip
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	33ff      	adds	r3, #255	; 0xff
 80021fc:	035b      	lsls	r3, r3, #13
 80021fe:	187a      	adds	r2, r7, r1
 8002200:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 8002202:	187b      	adds	r3, r7, r1
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	4ba2      	ldr	r3, [pc, #648]	; (8002494 <weoShowSmallImage+0x2f0>)
 800220a:	4c9d      	ldr	r4, [pc, #628]	; (8002480 <weoShowSmallImage+0x2dc>)
 800220c:	46a4      	mov	ip, r4
 800220e:	44bc      	add	ip, r7
 8002210:	4463      	add	r3, ip
 8002212:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002214:	187b      	adds	r3, r7, r1
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	b2da      	uxtb	r2, r3
 800221c:	4b9d      	ldr	r3, [pc, #628]	; (8002494 <weoShowSmallImage+0x2f0>)
 800221e:	4c98      	ldr	r4, [pc, #608]	; (8002480 <weoShowSmallImage+0x2dc>)
 8002220:	46a4      	mov	ip, r4
 8002222:	44bc      	add	ip, r7
 8002224:	4463      	add	r3, ip
 8002226:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002228:	187b      	adds	r3, r7, r1
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b98      	ldr	r3, [pc, #608]	; (8002494 <weoShowSmallImage+0x2f0>)
 8002232:	4c93      	ldr	r4, [pc, #588]	; (8002480 <weoShowSmallImage+0x2dc>)
 8002234:	46a4      	mov	ip, r4
 8002236:	44bc      	add	ip, r7
 8002238:	4463      	add	r3, ip
 800223a:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 800223c:	187b      	adds	r3, r7, r1
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0e1b      	lsrs	r3, r3, #24
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b93      	ldr	r3, [pc, #588]	; (8002494 <weoShowSmallImage+0x2f0>)
 8002246:	498e      	ldr	r1, [pc, #568]	; (8002480 <weoShowSmallImage+0x2dc>)
 8002248:	468c      	mov	ip, r1
 800224a:	44bc      	add	ip, r7
 800224c:	4463      	add	r3, ip
 800224e:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8002250:	4b91      	ldr	r3, [pc, #580]	; (8002498 <weoShowSmallImage+0x2f4>)
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	4b90      	ldr	r3, [pc, #576]	; (8002498 <weoShowSmallImage+0x2f4>)
 8002256:	4991      	ldr	r1, [pc, #580]	; (800249c <weoShowSmallImage+0x2f8>)
 8002258:	400a      	ands	r2, r1
 800225a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 800225c:	1839      	adds	r1, r7, r0
 800225e:	4890      	ldr	r0, [pc, #576]	; (80024a0 <weoShowSmallImage+0x2fc>)
 8002260:	2332      	movs	r3, #50	; 0x32
 8002262:	2201      	movs	r2, #1
 8002264:	f004 fdf8 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8002268:	240c      	movs	r4, #12
 800226a:	193b      	adds	r3, r7, r4
 800226c:	1cd9      	adds	r1, r3, #3
 800226e:	488c      	ldr	r0, [pc, #560]	; (80024a0 <weoShowSmallImage+0x2fc>)
 8002270:	2332      	movs	r3, #50	; 0x32
 8002272:	2201      	movs	r2, #1
 8002274:	f004 fdf0 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002278:	193b      	adds	r3, r7, r4
 800227a:	1c99      	adds	r1, r3, #2
 800227c:	4888      	ldr	r0, [pc, #544]	; (80024a0 <weoShowSmallImage+0x2fc>)
 800227e:	2332      	movs	r3, #50	; 0x32
 8002280:	2201      	movs	r2, #1
 8002282:	f004 fde9 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8002286:	193b      	adds	r3, r7, r4
 8002288:	1c59      	adds	r1, r3, #1
 800228a:	4885      	ldr	r0, [pc, #532]	; (80024a0 <weoShowSmallImage+0x2fc>)
 800228c:	2332      	movs	r3, #50	; 0x32
 800228e:	2201      	movs	r2, #1
 8002290:	f004 fde2 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002294:	1939      	adds	r1, r7, r4
 8002296:	4882      	ldr	r0, [pc, #520]	; (80024a0 <weoShowSmallImage+0x2fc>)
 8002298:	2332      	movs	r3, #50	; 0x32
 800229a:	2201      	movs	r2, #1
 800229c:	f004 fddc 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 80022a0:	4b80      	ldr	r3, [pc, #512]	; (80024a4 <weoShowSmallImage+0x300>)
 80022a2:	2210      	movs	r2, #16
 80022a4:	18b9      	adds	r1, r7, r2
 80022a6:	487e      	ldr	r0, [pc, #504]	; (80024a0 <weoShowSmallImage+0x2fc>)
 80022a8:	2202      	movs	r2, #2
 80022aa:	f004 ff2d 	bl	8007108 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 80022ae:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <weoShowSmallImage+0x2f4>)
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	4b79      	ldr	r3, [pc, #484]	; (8002498 <weoShowSmallImage+0x2f4>)
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	0209      	lsls	r1, r1, #8
 80022b8:	430a      	orrs	r2, r1
 80022ba:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 80022bc:	497a      	ldr	r1, [pc, #488]	; (80024a8 <weoShowSmallImage+0x304>)
 80022be:	187b      	adds	r3, r7, r1
 80022c0:	4a7a      	ldr	r2, [pc, #488]	; (80024ac <weoShowSmallImage+0x308>)
 80022c2:	486f      	ldr	r0, [pc, #444]	; (8002480 <weoShowSmallImage+0x2dc>)
 80022c4:	4684      	mov	ip, r0
 80022c6:	44bc      	add	ip, r7
 80022c8:	4462      	add	r2, ip
 80022ca:	7812      	ldrb	r2, [r2, #0]
 80022cc:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 80022ce:	4878      	ldr	r0, [pc, #480]	; (80024b0 <weoShowSmallImage+0x30c>)
 80022d0:	183b      	adds	r3, r7, r0
 80022d2:	4a76      	ldr	r2, [pc, #472]	; (80024ac <weoShowSmallImage+0x308>)
 80022d4:	4c6a      	ldr	r4, [pc, #424]	; (8002480 <weoShowSmallImage+0x2dc>)
 80022d6:	46a4      	mov	ip, r4
 80022d8:	44bc      	add	ip, r7
 80022da:	4462      	add	r2, ip
 80022dc:	7852      	ldrb	r2, [r2, #1]
 80022de:	701a      	strb	r2, [r3, #0]

		len=width*height/2;
 80022e0:	187b      	adds	r3, r7, r1
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	183a      	adds	r2, r7, r0
 80022e6:	7812      	ldrb	r2, [r2, #0]
 80022e8:	4353      	muls	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	da00      	bge.n	80022f0 <weoShowSmallImage+0x14c>
 80022ee:	3301      	adds	r3, #1
 80022f0:	105b      	asrs	r3, r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	4b6f      	ldr	r3, [pc, #444]	; (80024b4 <weoShowSmallImage+0x310>)
 80022f6:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 80022f8:	4b64      	ldr	r3, [pc, #400]	; (800248c <weoShowSmallImage+0x2e8>)
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3302      	adds	r3, #2
 8002300:	496d      	ldr	r1, [pc, #436]	; (80024b8 <weoShowSmallImage+0x314>)
 8002302:	187a      	adds	r2, r7, r1
 8002304:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 8002306:	187b      	adds	r3, r7, r1
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	4b61      	ldr	r3, [pc, #388]	; (8002494 <weoShowSmallImage+0x2f0>)
 800230e:	485c      	ldr	r0, [pc, #368]	; (8002480 <weoShowSmallImage+0x2dc>)
 8002310:	4684      	mov	ip, r0
 8002312:	44bc      	add	ip, r7
 8002314:	4463      	add	r3, ip
 8002316:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 8002318:	187b      	adds	r3, r7, r1
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b5c      	ldr	r3, [pc, #368]	; (8002494 <weoShowSmallImage+0x2f0>)
 8002322:	4857      	ldr	r0, [pc, #348]	; (8002480 <weoShowSmallImage+0x2dc>)
 8002324:	4684      	mov	ip, r0
 8002326:	44bc      	add	ip, r7
 8002328:	4463      	add	r3, ip
 800232a:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 800232c:	187b      	adds	r3, r7, r1
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	b2da      	uxtb	r2, r3
 8002334:	4b57      	ldr	r3, [pc, #348]	; (8002494 <weoShowSmallImage+0x2f0>)
 8002336:	4852      	ldr	r0, [pc, #328]	; (8002480 <weoShowSmallImage+0x2dc>)
 8002338:	4684      	mov	ip, r0
 800233a:	44bc      	add	ip, r7
 800233c:	4463      	add	r3, ip
 800233e:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 8002340:	187b      	adds	r3, r7, r1
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	0e1b      	lsrs	r3, r3, #24
 8002346:	b2da      	uxtb	r2, r3
 8002348:	4b52      	ldr	r3, [pc, #328]	; (8002494 <weoShowSmallImage+0x2f0>)
 800234a:	494d      	ldr	r1, [pc, #308]	; (8002480 <weoShowSmallImage+0x2dc>)
 800234c:	468c      	mov	ip, r1
 800234e:	44bc      	add	ip, r7
 8002350:	4463      	add	r3, ip
 8002352:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 8002354:	4b59      	ldr	r3, [pc, #356]	; (80024bc <weoShowSmallImage+0x318>)
 8002356:	6a1a      	ldr	r2, [r3, #32]
 8002358:	4b58      	ldr	r3, [pc, #352]	; (80024bc <weoShowSmallImage+0x318>)
 800235a:	2108      	movs	r1, #8
 800235c:	430a      	orrs	r2, r1
 800235e:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8002360:	484b      	ldr	r0, [pc, #300]	; (8002490 <weoShowSmallImage+0x2ec>)
 8002362:	183b      	adds	r3, r7, r0
 8002364:	2213      	movs	r2, #19
 8002366:	701a      	strb	r2, [r3, #0]

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 8002368:	4b4b      	ldr	r3, [pc, #300]	; (8002498 <weoShowSmallImage+0x2f4>)
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	4b4a      	ldr	r3, [pc, #296]	; (8002498 <weoShowSmallImage+0x2f4>)
 800236e:	494b      	ldr	r1, [pc, #300]	; (800249c <weoShowSmallImage+0x2f8>)
 8002370:	400a      	ands	r2, r1
 8002372:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 8002374:	1839      	adds	r1, r7, r0
 8002376:	484a      	ldr	r0, [pc, #296]	; (80024a0 <weoShowSmallImage+0x2fc>)
 8002378:	2332      	movs	r3, #50	; 0x32
 800237a:	2201      	movs	r2, #1
 800237c:	f004 fd6c 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 8002380:	240c      	movs	r4, #12
 8002382:	193b      	adds	r3, r7, r4
 8002384:	1cd9      	adds	r1, r3, #3
 8002386:	4846      	ldr	r0, [pc, #280]	; (80024a0 <weoShowSmallImage+0x2fc>)
 8002388:	2332      	movs	r3, #50	; 0x32
 800238a:	2201      	movs	r2, #1
 800238c:	f004 fd64 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 8002390:	193b      	adds	r3, r7, r4
 8002392:	1c99      	adds	r1, r3, #2
 8002394:	4842      	ldr	r0, [pc, #264]	; (80024a0 <weoShowSmallImage+0x2fc>)
 8002396:	2332      	movs	r3, #50	; 0x32
 8002398:	2201      	movs	r2, #1
 800239a:	f004 fd5d 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 800239e:	193b      	adds	r3, r7, r4
 80023a0:	1c59      	adds	r1, r3, #1
 80023a2:	483f      	ldr	r0, [pc, #252]	; (80024a0 <weoShowSmallImage+0x2fc>)
 80023a4:	2332      	movs	r3, #50	; 0x32
 80023a6:	2201      	movs	r2, #1
 80023a8:	f004 fd56 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80023ac:	1939      	adds	r1, r7, r4
 80023ae:	483c      	ldr	r0, [pc, #240]	; (80024a0 <weoShowSmallImage+0x2fc>)
 80023b0:	2332      	movs	r3, #50	; 0x32
 80023b2:	2201      	movs	r2, #1
 80023b4:	f004 fd50 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80023b8:	4b3e      	ldr	r3, [pc, #248]	; (80024b4 <weoShowSmallImage+0x310>)
 80023ba:	881a      	ldrh	r2, [r3, #0]
 80023bc:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <weoShowSmallImage+0x300>)
 80023be:	2114      	movs	r1, #20
 80023c0:	1879      	adds	r1, r7, r1
 80023c2:	4837      	ldr	r0, [pc, #220]	; (80024a0 <weoShowSmallImage+0x2fc>)
 80023c4:	f004 fea0 	bl	8007108 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 80023c8:	4b33      	ldr	r3, [pc, #204]	; (8002498 <weoShowSmallImage+0x2f4>)
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	4b32      	ldr	r3, [pc, #200]	; (8002498 <weoShowSmallImage+0x2f4>)
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	0209      	lsls	r1, r1, #8
 80023d2:	430a      	orrs	r2, r1
 80023d4:	615a      	str	r2, [r3, #20]

		decY=0x01;
 80023d6:	493a      	ldr	r1, [pc, #232]	; (80024c0 <weoShowSmallImage+0x31c>)
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
		if(imY % 2 !=0){
 80023de:	4b2a      	ldr	r3, [pc, #168]	; (8002488 <weoShowSmallImage+0x2e4>)
 80023e0:	4a27      	ldr	r2, [pc, #156]	; (8002480 <weoShowSmallImage+0x2dc>)
 80023e2:	4694      	mov	ip, r2
 80023e4:	44bc      	add	ip, r7
 80023e6:	4463      	add	r3, ip
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2201      	movs	r2, #1
 80023ec:	4013      	ands	r3, r2
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <weoShowSmallImage+0x256>
			decY=0x02;
 80023f4:	187b      	adds	r3, r7, r1
 80023f6:	2202      	movs	r2, #2
 80023f8:	701a      	strb	r2, [r3, #0]
		}
		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 80023fa:	4b22      	ldr	r3, [pc, #136]	; (8002484 <weoShowSmallImage+0x2e0>)
 80023fc:	4920      	ldr	r1, [pc, #128]	; (8002480 <weoShowSmallImage+0x2dc>)
 80023fe:	187a      	adds	r2, r7, r1
 8002400:	18d2      	adds	r2, r2, r3
 8002402:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <weoShowSmallImage+0x304>)
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	7812      	ldrb	r2, [r2, #0]
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	18d3      	adds	r3, r2, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b2dc      	uxtb	r4, r3
 8002412:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <weoShowSmallImage+0x2e4>)
 8002414:	187a      	adds	r2, r7, r1
 8002416:	18d2      	adds	r2, r2, r3
 8002418:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <weoShowSmallImage+0x30c>)
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	7812      	ldrb	r2, [r2, #0]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	18d3      	adds	r3, r2, r3
 8002422:	b2da      	uxtb	r2, r3
 8002424:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <weoShowSmallImage+0x31c>)
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <weoShowSmallImage+0x2e4>)
 8002430:	4913      	ldr	r1, [pc, #76]	; (8002480 <weoShowSmallImage+0x2dc>)
 8002432:	468c      	mov	ip, r1
 8002434:	44bc      	add	ip, r7
 8002436:	4463      	add	r3, ip
 8002438:	7819      	ldrb	r1, [r3, #0]
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <weoShowSmallImage+0x2e0>)
 800243c:	4810      	ldr	r0, [pc, #64]	; (8002480 <weoShowSmallImage+0x2dc>)
 800243e:	4684      	mov	ip, r0
 8002440:	44bc      	add	ip, r7
 8002442:	4463      	add	r3, ip
 8002444:	7818      	ldrb	r0, [r3, #0]
 8002446:	2314      	movs	r3, #20
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	23ff      	movs	r3, #255	; 0xff
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	0013      	movs	r3, r2
 8002452:	0022      	movs	r2, r4
 8002454:	f7fe ffc2 	bl	80013dc <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <weoShowSmallImage+0x2f4>)
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <weoShowSmallImage+0x2f4>)
 800245e:	2140      	movs	r1, #64	; 0x40
 8002460:	430a      	orrs	r2, r1
 8002462:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 8002464:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <weoShowSmallImage+0x320>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
	}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <weoShowSmallImage+0x324>)
 8002472:	449d      	add	sp, r3
 8002474:	bd90      	pop	{r4, r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	ffffdfcc 	.word	0xffffdfcc
 800247c:	ffffdfdf 	.word	0xffffdfdf
 8002480:	00002028 	.word	0x00002028
 8002484:	ffffdfde 	.word	0xffffdfde
 8002488:	ffffdfdd 	.word	0xffffdfdd
 800248c:	00002020 	.word	0x00002020
 8002490:	00002017 	.word	0x00002017
 8002494:	ffffdfe4 	.word	0xffffdfe4
 8002498:	50000800 	.word	0x50000800
 800249c:	ffff7fff 	.word	0xffff7fff
 80024a0:	200031b0 	.word	0x200031b0
 80024a4:	00001388 	.word	0x00001388
 80024a8:	0000201f 	.word	0x0000201f
 80024ac:	ffffdfe8 	.word	0xffffdfe8
 80024b0:	0000201e 	.word	0x0000201e
 80024b4:	200035dc 	.word	0x200035dc
 80024b8:	00002018 	.word	0x00002018
 80024bc:	40004400 	.word	0x40004400
 80024c0:	00002027 	.word	0x00002027
 80024c4:	2000345e 	.word	0x2000345e
 80024c8:	0000202c 	.word	0x0000202c

080024cc <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	4a29      	ldr	r2, [pc, #164]	; (800257c <MEM_GetID+0xb0>)
 80024d6:	7812      	ldrb	r2, [r2, #0]
 80024d8:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 80024da:	1dfb      	adds	r3, r7, #7
 80024dc:	229e      	movs	r2, #158	; 0x9e
 80024de:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80024e0:	4b27      	ldr	r3, [pc, #156]	; (8002580 <MEM_GetID+0xb4>)
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	4b26      	ldr	r3, [pc, #152]	; (8002580 <MEM_GetID+0xb4>)
 80024e6:	4927      	ldr	r1, [pc, #156]	; (8002584 <MEM_GetID+0xb8>)
 80024e8:	400a      	ands	r2, r1
 80024ea:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 80024ec:	1df9      	adds	r1, r7, #7
 80024ee:	4826      	ldr	r0, [pc, #152]	; (8002588 <MEM_GetID+0xbc>)
 80024f0:	2332      	movs	r3, #50	; 0x32
 80024f2:	2201      	movs	r2, #1
 80024f4:	f004 fcb0 	bl	8006e58 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80024f8:	23fa      	movs	r3, #250	; 0xfa
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	1d39      	adds	r1, r7, #4
 80024fe:	4822      	ldr	r0, [pc, #136]	; (8002588 <MEM_GetID+0xbc>)
 8002500:	2201      	movs	r2, #1
 8002502:	f004 fe01 	bl	8007108 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	001a      	movs	r2, r3
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <MEM_GetID+0xc0>)
 800250e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002510:	4b1e      	ldr	r3, [pc, #120]	; (800258c <MEM_GetID+0xc0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	021a      	lsls	r2, r3, #8
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <MEM_GetID+0xc0>)
 8002518:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800251a:	23fa      	movs	r3, #250	; 0xfa
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	1d39      	adds	r1, r7, #4
 8002520:	4819      	ldr	r0, [pc, #100]	; (8002588 <MEM_GetID+0xbc>)
 8002522:	2201      	movs	r2, #1
 8002524:	f004 fdf0 	bl	8007108 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002528:	1d3b      	adds	r3, r7, #4
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	001a      	movs	r2, r3
 800252e:	4b17      	ldr	r3, [pc, #92]	; (800258c <MEM_GetID+0xc0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	18d2      	adds	r2, r2, r3
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <MEM_GetID+0xc0>)
 8002536:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002538:	4b14      	ldr	r3, [pc, #80]	; (800258c <MEM_GetID+0xc0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	021a      	lsls	r2, r3, #8
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <MEM_GetID+0xc0>)
 8002540:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002542:	23fa      	movs	r3, #250	; 0xfa
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	1d39      	adds	r1, r7, #4
 8002548:	480f      	ldr	r0, [pc, #60]	; (8002588 <MEM_GetID+0xbc>)
 800254a:	2201      	movs	r2, #1
 800254c:	f004 fddc 	bl	8007108 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	001a      	movs	r2, r3
 8002556:	4b0d      	ldr	r3, [pc, #52]	; (800258c <MEM_GetID+0xc0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	18d2      	adds	r2, r2, r3
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <MEM_GetID+0xc0>)
 800255e:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <MEM_GetID+0xb4>)
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <MEM_GetID+0xb4>)
 8002566:	2180      	movs	r1, #128	; 0x80
 8002568:	0209      	lsls	r1, r1, #8
 800256a:	430a      	orrs	r2, r1
 800256c:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 800256e:	4b07      	ldr	r3, [pc, #28]	; (800258c <MEM_GetID+0xc0>)
 8002570:	681b      	ldr	r3, [r3, #0]
	}
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b002      	add	sp, #8
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	0800ae08 	.word	0x0800ae08
 8002580:	50000800 	.word	0x50000800
 8002584:	ffff7fff 	.word	0xffff7fff
 8002588:	200031b0 	.word	0x200031b0
 800258c:	2000315c 	.word	0x2000315c

08002590 <Scount>:
		GPIOC->ODR |= 1 << 15;    // set cs
		//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
//==================================================================================================================================

	uint16_t Scount(void){
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0

	}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <cmdExecute>:
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	0002      	movs	r2, r0
 80025a4:	1dfb      	adds	r3, r7, #7
 80025a6:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 80025a8:	4b55      	ldr	r3, [pc, #340]	; (8002700 <cmdExecute+0x164>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	d100      	bne.n	80025b2 <cmdExecute+0x16>
 80025b0:	e09f      	b.n	80026f2 <cmdExecute+0x156>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 80025b2:	4b54      	ldr	r3, [pc, #336]	; (8002704 <cmdExecute+0x168>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d000      	beq.n	80025bc <cmdExecute+0x20>
 80025ba:	e09c      	b.n	80026f6 <cmdExecute+0x15a>
		USART2->ICR|=USART_ICR_ORECF;
 80025bc:	4b52      	ldr	r3, [pc, #328]	; (8002708 <cmdExecute+0x16c>)
 80025be:	6a1a      	ldr	r2, [r3, #32]
 80025c0:	4b51      	ldr	r3, [pc, #324]	; (8002708 <cmdExecute+0x16c>)
 80025c2:	2108      	movs	r1, #8
 80025c4:	430a      	orrs	r2, r1
 80025c6:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 80025c8:	1dfb      	adds	r3, r7, #7
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b11      	cmp	r3, #17
 80025ce:	d107      	bne.n	80025e0 <cmdExecute+0x44>
			bf4me=0x11;	//set BF flag 4 me
 80025d0:	4b4c      	ldr	r3, [pc, #304]	; (8002704 <cmdExecute+0x168>)
 80025d2:	2211      	movs	r2, #17
 80025d4:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowFullScreen(picNum);
			weoShowFullScreenDMA(picNum);
 80025d6:	4b4d      	ldr	r3, [pc, #308]	; (800270c <cmdExecute+0x170>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7ff fd44 	bl	8002068 <weoShowFullScreenDMA>
				}
		if(cmd2Execute==0x12){
 80025e0:	1dfb      	adds	r3, r7, #7
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b12      	cmp	r3, #18
 80025e6:	d10d      	bne.n	8002604 <cmdExecute+0x68>
			bf4me=0x12;	//set BF flag 4 me
 80025e8:	4b46      	ldr	r3, [pc, #280]	; (8002704 <cmdExecute+0x168>)
 80025ea:	2212      	movs	r2, #18
 80025ec:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 80025ee:	4b47      	ldr	r3, [pc, #284]	; (800270c <cmdExecute+0x170>)
 80025f0:	7818      	ldrb	r0, [r3, #0]
 80025f2:	4b47      	ldr	r3, [pc, #284]	; (8002710 <cmdExecute+0x174>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	b2d9      	uxtb	r1, r3
 80025f8:	4b46      	ldr	r3, [pc, #280]	; (8002714 <cmdExecute+0x178>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	001a      	movs	r2, r3
 8002600:	f7ff fdd0 	bl	80021a4 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 8002604:	1dfb      	adds	r3, r7, #7
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b13      	cmp	r3, #19
 800260a:	d10d      	bne.n	8002628 <cmdExecute+0x8c>
			bf4me=0x13;	//set BF flag 4 me
 800260c:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <cmdExecute+0x168>)
 800260e:	2213      	movs	r2, #19
 8002610:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 8002612:	4b3f      	ldr	r3, [pc, #252]	; (8002710 <cmdExecute+0x174>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	b2d8      	uxtb	r0, r3
 8002618:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <cmdExecute+0x178>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	b2d9      	uxtb	r1, r3
 800261e:	4b3e      	ldr	r3, [pc, #248]	; (8002718 <cmdExecute+0x17c>)
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	4b3e      	ldr	r3, [pc, #248]	; (800271c <cmdExecute+0x180>)
 8002624:	f000 f880 	bl	8002728 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002628:	1dfb      	adds	r3, r7, #7
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b14      	cmp	r3, #20
 800262e:	d102      	bne.n	8002636 <cmdExecute+0x9a>
			bf4me=0x14;	//set BF flag 4 me
 8002630:	4b34      	ldr	r3, [pc, #208]	; (8002704 <cmdExecute+0x168>)
 8002632:	2214      	movs	r2, #20
 8002634:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF


				}
		if(cmd2Execute==0x15){
 8002636:	1dfb      	adds	r3, r7, #7
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b15      	cmp	r3, #21
 800263c:	d148      	bne.n	80026d0 <cmdExecute+0x134>
			I2C_SOUND_ChangePage(0x01);
 800263e:	2001      	movs	r0, #1
 8002640:	f7ff f830 	bl	80016a4 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8002644:	2100      	movs	r1, #0
 8002646:	2010      	movs	r0, #16
 8002648:	f7ff f84a 	bl	80016e0 <WriteReg_I2C_SOUND>
			if(volume==0x00){
 800264c:	4b34      	ldr	r3, [pc, #208]	; (8002720 <cmdExecute+0x184>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d103      	bne.n	800265c <cmdExecute+0xc0>
				WriteReg_I2C_SOUND(0x2E,0xFF);//mute
 8002654:	21ff      	movs	r1, #255	; 0xff
 8002656:	202e      	movs	r0, #46	; 0x2e
 8002658:	f7ff f842 	bl	80016e0 <WriteReg_I2C_SOUND>
			}
			WriteReg_I2C_SOUND(0x2E, volume);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 800265c:	4b30      	ldr	r3, [pc, #192]	; (8002720 <cmdExecute+0x184>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	0019      	movs	r1, r3
 8002662:	202e      	movs	r0, #46	; 0x2e
 8002664:	f7ff f83c 	bl	80016e0 <WriteReg_I2C_SOUND>

			if(contrast==0x00){
 8002668:	4b2e      	ldr	r3, [pc, #184]	; (8002724 <cmdExecute+0x188>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <cmdExecute+0xda>
				weoClear();
 8002670:	f7fe fe50 	bl	8001314 <weoClear>
 8002674:	e029      	b.n	80026ca <cmdExecute+0x12e>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 8002676:	23a0      	movs	r3, #160	; 0xa0
 8002678:	05db      	lsls	r3, r3, #23
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	23a0      	movs	r3, #160	; 0xa0
 800267e:	05db      	lsls	r3, r3, #23
 8002680:	2140      	movs	r1, #64	; 0x40
 8002682:	438a      	bics	r2, r1
 8002684:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 8002686:	23a0      	movs	r3, #160	; 0xa0
 8002688:	05db      	lsls	r3, r3, #23
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	23a0      	movs	r3, #160	; 0xa0
 800268e:	05db      	lsls	r3, r3, #23
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	438a      	bics	r2, r1
 8002694:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8002696:	2081      	movs	r0, #129	; 0x81
 8002698:	f7fe fdbe 	bl	8001218 <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast<<1);
 800269c:	4b21      	ldr	r3, [pc, #132]	; (8002724 <cmdExecute+0x188>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	18db      	adds	r3, r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7fe fdb7 	bl	8001218 <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 80026aa:	23a0      	movs	r3, #160	; 0xa0
 80026ac:	05db      	lsls	r3, r3, #23
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	23a0      	movs	r3, #160	; 0xa0
 80026b2:	05db      	lsls	r3, r3, #23
 80026b4:	2180      	movs	r1, #128	; 0x80
 80026b6:	430a      	orrs	r2, r1
 80026b8:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 80026ba:	23a0      	movs	r3, #160	; 0xa0
 80026bc:	05db      	lsls	r3, r3, #23
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	23a0      	movs	r3, #160	; 0xa0
 80026c2:	05db      	lsls	r3, r3, #23
 80026c4:	2140      	movs	r1, #64	; 0x40
 80026c6:	430a      	orrs	r2, r1
 80026c8:	615a      	str	r2, [r3, #20]
			}
			bf4me=0x15;	//set BF flag 4 me
 80026ca:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <cmdExecute+0x168>)
 80026cc:	2215      	movs	r2, #21
 80026ce:	701a      	strb	r2, [r3, #0]
		}
		if(cmd2Execute==0x16){
 80026d0:	1dfb      	adds	r3, r7, #7
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b16      	cmp	r3, #22
 80026d6:	d102      	bne.n	80026de <cmdExecute+0x142>
			bf4me=0x16;	//set BF flag 4 me
 80026d8:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <cmdExecute+0x168>)
 80026da:	2216      	movs	r2, #22
 80026dc:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 80026de:	1dfb      	adds	r3, r7, #7
 80026e0:	2200      	movs	r2, #0
 80026e2:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <cmdExecute+0x16c>)
 80026e6:	6a1a      	ldr	r2, [r3, #32]
 80026e8:	4b07      	ldr	r3, [pc, #28]	; (8002708 <cmdExecute+0x16c>)
 80026ea:	2108      	movs	r1, #8
 80026ec:	430a      	orrs	r2, r1
 80026ee:	621a      	str	r2, [r3, #32]
 80026f0:	e002      	b.n	80026f8 <cmdExecute+0x15c>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	e000      	b.n	80026f8 <cmdExecute+0x15c>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 80026f6:	46c0      	nop			; (mov r8, r8)
	}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b002      	add	sp, #8
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	200055e4 	.word	0x200055e4
 8002704:	200034b4 	.word	0x200034b4
 8002708:	40004400 	.word	0x40004400
 800270c:	2000345d 	.word	0x2000345d
 8002710:	200032f4 	.word	0x200032f4
 8002714:	20003388 	.word	0x20003388
 8002718:	2000349d 	.word	0x2000349d
 800271c:	200031a0 	.word	0x200031a0
 8002720:	200032f1 	.word	0x200032f1
 8002724:	200033f4 	.word	0x200033f4

08002728 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 8002728:	b5b0      	push	{r4, r5, r7, lr}
 800272a:	b092      	sub	sp, #72	; 0x48
 800272c:	af02      	add	r7, sp, #8
 800272e:	0004      	movs	r4, r0
 8002730:	0008      	movs	r0, r1
 8002732:	0011      	movs	r1, r2
 8002734:	603b      	str	r3, [r7, #0]
 8002736:	1dfb      	adds	r3, r7, #7
 8002738:	1c22      	adds	r2, r4, #0
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	1dbb      	adds	r3, r7, #6
 800273e:	1c02      	adds	r2, r0, #0
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	1d7b      	adds	r3, r7, #5
 8002744:	1c0a      	adds	r2, r1, #0
 8002746:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X,decY;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 8002748:	233e      	movs	r3, #62	; 0x3e
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	1dfa      	adds	r2, r7, #7
 800274e:	7812      	ldrb	r2, [r2, #0]
 8002750:	701a      	strb	r2, [r3, #0]

			len=49;
 8002752:	4b4c      	ldr	r3, [pc, #304]	; (8002884 <printASCIIarray+0x15c>)
 8002754:	2231      	movs	r2, #49	; 0x31
 8002756:	801a      	strh	r2, [r3, #0]

			decY=0x01;
 8002758:	213d      	movs	r1, #61	; 0x3d
 800275a:	187b      	adds	r3, r7, r1
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
			if(imY % 2 !=0){
 8002760:	1dbb      	adds	r3, r7, #6
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2201      	movs	r2, #1
 8002766:	4013      	ands	r3, r2
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <printASCIIarray+0x4c>
				decY=0x02;
 800276e:	187b      	adds	r3, r7, r1
 8002770:	2202      	movs	r2, #2
 8002772:	701a      	strb	r2, [r3, #0]
			}

			for (i=0;i<strLen;i++){
 8002774:	233a      	movs	r3, #58	; 0x3a
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2200      	movs	r2, #0
 800277a:	801a      	strh	r2, [r3, #0]
 800277c:	e054      	b.n	8002828 <printASCIIarray+0x100>
				for(j=0;j<49;j++){
 800277e:	233f      	movs	r3, #63	; 0x3f
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	e01b      	b.n	80027c0 <printASCIIarray+0x98>
					weoBuffer[j]=FONT_X[dataASCII[i]][j];
 8002788:	233a      	movs	r3, #58	; 0x3a
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	18d3      	adds	r3, r2, r3
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	001a      	movs	r2, r3
 8002796:	253f      	movs	r5, #63	; 0x3f
 8002798:	197b      	adds	r3, r7, r5
 800279a:	7818      	ldrb	r0, [r3, #0]
 800279c:	197b      	adds	r3, r7, r5
 800279e:	7819      	ldrb	r1, [r3, #0]
 80027a0:	4c39      	ldr	r4, [pc, #228]	; (8002888 <printASCIIarray+0x160>)
 80027a2:	0013      	movs	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	00da      	lsls	r2, r3, #3
 80027aa:	1ad2      	subs	r2, r2, r3
 80027ac:	18a3      	adds	r3, r4, r2
 80027ae:	5c1a      	ldrb	r2, [r3, r0]
 80027b0:	2308      	movs	r3, #8
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 80027b6:	197b      	adds	r3, r7, r5
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	197b      	adds	r3, r7, r5
 80027bc:	3201      	adds	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	233f      	movs	r3, #63	; 0x3f
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b30      	cmp	r3, #48	; 0x30
 80027c8:	d9de      	bls.n	8002788 <printASCIIarray+0x60>
					}
				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-decY,0xFF,weoBuffer);
 80027ca:	4b30      	ldr	r3, [pc, #192]	; (800288c <printASCIIarray+0x164>)
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	203e      	movs	r0, #62	; 0x3e
 80027d0:	183b      	adds	r3, r7, r0
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	18d3      	adds	r3, r2, r3
 80027d6:	b2dc      	uxtb	r4, r3
 80027d8:	4b2d      	ldr	r3, [pc, #180]	; (8002890 <printASCIIarray+0x168>)
 80027da:	781a      	ldrb	r2, [r3, #0]
 80027dc:	1dbb      	adds	r3, r7, #6
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	18d3      	adds	r3, r2, r3
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	233d      	movs	r3, #61	; 0x3d
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	1dbb      	adds	r3, r7, #6
 80027f0:	7819      	ldrb	r1, [r3, #0]
 80027f2:	0005      	movs	r5, r0
 80027f4:	183b      	adds	r3, r7, r0
 80027f6:	7818      	ldrb	r0, [r3, #0]
 80027f8:	2308      	movs	r3, #8
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	23ff      	movs	r3, #255	; 0xff
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	0013      	movs	r3, r2
 8002804:	0022      	movs	r2, r4
 8002806:	f7fe fde9 	bl	80013dc <weoDrawRectangleFilled>
				ASCII_X += X_increment+1;
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <printASCIIarray+0x164>)
 800280c:	781a      	ldrb	r2, [r3, #0]
 800280e:	197b      	adds	r3, r7, r5
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	18d3      	adds	r3, r2, r3
 8002814:	b2da      	uxtb	r2, r3
 8002816:	197b      	adds	r3, r7, r5
 8002818:	3201      	adds	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 800281c:	213a      	movs	r1, #58	; 0x3a
 800281e:	187b      	adds	r3, r7, r1
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	187b      	adds	r3, r7, r1
 8002824:	3201      	adds	r2, #1
 8002826:	801a      	strh	r2, [r3, #0]
 8002828:	1d7b      	adds	r3, r7, #5
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b29b      	uxth	r3, r3
 800282e:	213a      	movs	r1, #58	; 0x3a
 8002830:	187a      	adds	r2, r7, r1
 8002832:	8812      	ldrh	r2, [r2, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d3a2      	bcc.n	800277e <printASCIIarray+0x56>
			}
			for(i=0;i<len;i++){
 8002838:	187b      	adds	r3, r7, r1
 800283a:	2200      	movs	r2, #0
 800283c:	801a      	strh	r2, [r3, #0]
 800283e:	e00c      	b.n	800285a <printASCIIarray+0x132>
					weoBuffer[j]=0x00;
 8002840:	233f      	movs	r3, #63	; 0x3f
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2208      	movs	r2, #8
 8002848:	18ba      	adds	r2, r7, r2
 800284a:	2100      	movs	r1, #0
 800284c:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<len;i++){
 800284e:	213a      	movs	r1, #58	; 0x3a
 8002850:	187b      	adds	r3, r7, r1
 8002852:	881a      	ldrh	r2, [r3, #0]
 8002854:	187b      	adds	r3, r7, r1
 8002856:	3201      	adds	r2, #1
 8002858:	801a      	strh	r2, [r3, #0]
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <printASCIIarray+0x15c>)
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	223a      	movs	r2, #58	; 0x3a
 8002860:	18ba      	adds	r2, r7, r2
 8002862:	8812      	ldrh	r2, [r2, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d3eb      	bcc.n	8002840 <printASCIIarray+0x118>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <printASCIIarray+0x16c>)
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <printASCIIarray+0x16c>)
 800286e:	2140      	movs	r1, #64	; 0x40
 8002870:	430a      	orrs	r2, r1
 8002872:	615a      	str	r2, [r3, #20]
			cmd2Execute=0;
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <printASCIIarray+0x170>)
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]
		}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	b010      	add	sp, #64	; 0x40
 8002882:	bdb0      	pop	{r4, r5, r7, pc}
 8002884:	200035dc 	.word	0x200035dc
 8002888:	20000000 	.word	0x20000000
 800288c:	20003130 	.word	0x20003130
 8002890:	20003131 	.word	0x20003131
 8002894:	50000800 	.word	0x50000800
 8002898:	2000345e 	.word	0x2000345e

0800289c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <HAL_MspInit+0x4c>)
 80028b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <HAL_MspInit+0x4c>)
 80028b4:	2101      	movs	r1, #1
 80028b6:	430a      	orrs	r2, r1
 80028b8:	641a      	str	r2, [r3, #64]	; 0x40
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <HAL_MspInit+0x4c>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2201      	movs	r2, #1
 80028c0:	4013      	ands	r3, r2
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_MspInit+0x4c>)
 80028c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_MspInit+0x4c>)
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	0549      	lsls	r1, r1, #21
 80028d0:	430a      	orrs	r2, r1
 80028d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80028d4:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <HAL_MspInit+0x4c>)
 80028d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	055b      	lsls	r3, r3, #21
 80028dc:	4013      	ands	r3, r2
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 fd04 	bl	80032f4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b002      	add	sp, #8
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000

080028f8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80028f8:	b590      	push	{r4, r7, lr}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	240c      	movs	r4, #12
 8002902:	193b      	adds	r3, r7, r4
 8002904:	0018      	movs	r0, r3
 8002906:	2314      	movs	r3, #20
 8002908:	001a      	movs	r2, r3
 800290a:	2100      	movs	r1, #0
 800290c:	f008 fa68 	bl	800ade0 <memset>
  if(hcomp->Instance==COMP1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a10      	ldr	r2, [pc, #64]	; (8002958 <HAL_COMP_MspInit+0x60>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d11a      	bne.n	8002950 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <HAL_COMP_MspInit+0x64>)
 800291c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800291e:	4b0f      	ldr	r3, [pc, #60]	; (800295c <HAL_COMP_MspInit+0x64>)
 8002920:	2102      	movs	r1, #2
 8002922:	430a      	orrs	r2, r1
 8002924:	635a      	str	r2, [r3, #52]	; 0x34
 8002926:	4b0d      	ldr	r3, [pc, #52]	; (800295c <HAL_COMP_MspInit+0x64>)
 8002928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292a:	2202      	movs	r2, #2
 800292c:	4013      	ands	r3, r2
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002932:	193b      	adds	r3, r7, r4
 8002934:	2204      	movs	r2, #4
 8002936:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002938:	193b      	adds	r3, r7, r4
 800293a:	2203      	movs	r2, #3
 800293c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	193b      	adds	r3, r7, r4
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002944:	193b      	adds	r3, r7, r4
 8002946:	4a06      	ldr	r2, [pc, #24]	; (8002960 <HAL_COMP_MspInit+0x68>)
 8002948:	0019      	movs	r1, r3
 800294a:	0010      	movs	r0, r2
 800294c:	f001 faee 	bl	8003f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b009      	add	sp, #36	; 0x24
 8002956:	bd90      	pop	{r4, r7, pc}
 8002958:	40010200 	.word	0x40010200
 800295c:	40021000 	.word	0x40021000
 8002960:	50000400 	.word	0x50000400

08002964 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b08b      	sub	sp, #44	; 0x2c
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	2414      	movs	r4, #20
 800296e:	193b      	adds	r3, r7, r4
 8002970:	0018      	movs	r0, r3
 8002972:	2314      	movs	r3, #20
 8002974:	001a      	movs	r2, r3
 8002976:	2100      	movs	r1, #0
 8002978:	f008 fa32 	bl	800ade0 <memset>
  if(hi2c->Instance==I2C1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a20      	ldr	r2, [pc, #128]	; (8002a04 <HAL_I2C_MspInit+0xa0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d139      	bne.n	80029fa <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <HAL_I2C_MspInit+0xa4>)
 8002988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800298a:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <HAL_I2C_MspInit+0xa4>)
 800298c:	2101      	movs	r1, #1
 800298e:	430a      	orrs	r2, r1
 8002990:	635a      	str	r2, [r3, #52]	; 0x34
 8002992:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <HAL_I2C_MspInit+0xa4>)
 8002994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002996:	2201      	movs	r2, #1
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800299e:	193b      	adds	r3, r7, r4
 80029a0:	22c0      	movs	r2, #192	; 0xc0
 80029a2:	00d2      	lsls	r2, r2, #3
 80029a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029a6:	0021      	movs	r1, r4
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	2212      	movs	r2, #18
 80029ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	2201      	movs	r2, #1
 80029b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	2200      	movs	r2, #0
 80029b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	2206      	movs	r2, #6
 80029be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c0:	187a      	adds	r2, r7, r1
 80029c2:	23a0      	movs	r3, #160	; 0xa0
 80029c4:	05db      	lsls	r3, r3, #23
 80029c6:	0011      	movs	r1, r2
 80029c8:	0018      	movs	r0, r3
 80029ca:	f001 faaf 	bl	8003f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <HAL_I2C_MspInit+0xa4>)
 80029d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <HAL_I2C_MspInit+0xa4>)
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	0389      	lsls	r1, r1, #14
 80029d8:	430a      	orrs	r2, r1
 80029da:	63da      	str	r2, [r3, #60]	; 0x3c
 80029dc:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_I2C_MspInit+0xa4>)
 80029de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	039b      	lsls	r3, r3, #14
 80029e4:	4013      	ands	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	2017      	movs	r0, #23
 80029f0:	f000 ffa2 	bl	8003938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80029f4:	2017      	movs	r0, #23
 80029f6:	f000 ffb4 	bl	8003962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b00b      	add	sp, #44	; 0x2c
 8002a00:	bd90      	pop	{r4, r7, pc}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	40005400 	.word	0x40005400
 8002a08:	40021000 	.word	0x40021000

08002a0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002a0c:	b590      	push	{r4, r7, lr}
 8002a0e:	b08b      	sub	sp, #44	; 0x2c
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	2414      	movs	r4, #20
 8002a16:	193b      	adds	r3, r7, r4
 8002a18:	0018      	movs	r0, r3
 8002a1a:	2314      	movs	r3, #20
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	2100      	movs	r1, #0
 8002a20:	f008 f9de 	bl	800ade0 <memset>
  if(hi2s->Instance==SPI1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a47      	ldr	r2, [pc, #284]	; (8002b48 <HAL_I2S_MspInit+0x13c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d000      	beq.n	8002a30 <HAL_I2S_MspInit+0x24>
 8002a2e:	e086      	b.n	8002b3e <HAL_I2S_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a30:	4b46      	ldr	r3, [pc, #280]	; (8002b4c <HAL_I2S_MspInit+0x140>)
 8002a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a34:	4b45      	ldr	r3, [pc, #276]	; (8002b4c <HAL_I2S_MspInit+0x140>)
 8002a36:	2180      	movs	r1, #128	; 0x80
 8002a38:	0149      	lsls	r1, r1, #5
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8002a3e:	4b43      	ldr	r3, [pc, #268]	; (8002b4c <HAL_I2S_MspInit+0x140>)
 8002a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	015b      	lsls	r3, r3, #5
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4c:	4b3f      	ldr	r3, [pc, #252]	; (8002b4c <HAL_I2S_MspInit+0x140>)
 8002a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a50:	4b3e      	ldr	r3, [pc, #248]	; (8002b4c <HAL_I2S_MspInit+0x140>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	430a      	orrs	r2, r1
 8002a56:	635a      	str	r2, [r3, #52]	; 0x34
 8002a58:	4b3c      	ldr	r3, [pc, #240]	; (8002b4c <HAL_I2S_MspInit+0x140>)
 8002a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a64:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <HAL_I2S_MspInit+0x140>)
 8002a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a68:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <HAL_I2S_MspInit+0x140>)
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	635a      	str	r2, [r3, #52]	; 0x34
 8002a70:	4b36      	ldr	r3, [pc, #216]	; (8002b4c <HAL_I2S_MspInit+0x140>)
 8002a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a74:	2202      	movs	r2, #2
 8002a76:	4013      	ands	r3, r2
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a7c:	193b      	adds	r3, r7, r4
 8002a7e:	2280      	movs	r2, #128	; 0x80
 8002a80:	0212      	lsls	r2, r2, #8
 8002a82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	2202      	movs	r2, #2
 8002a88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	2200      	movs	r2, #0
 8002a94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	2200      	movs	r2, #0
 8002a9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9c:	193a      	adds	r2, r7, r4
 8002a9e:	23a0      	movs	r3, #160	; 0xa0
 8002aa0:	05db      	lsls	r3, r3, #23
 8002aa2:	0011      	movs	r1, r2
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f001 fa41 	bl	8003f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002aaa:	0021      	movs	r1, r4
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	2238      	movs	r2, #56	; 0x38
 8002ab0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <HAL_I2S_MspInit+0x144>)
 8002ace:	0019      	movs	r1, r3
 8002ad0:	0010      	movs	r0, r2
 8002ad2:	f001 fa2b 	bl	8003f2c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <HAL_I2S_MspInit+0x148>)
 8002ad8:	4a1f      	ldr	r2, [pc, #124]	; (8002b58 <HAL_I2S_MspInit+0x14c>)
 8002ada:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002adc:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <HAL_I2S_MspInit+0x148>)
 8002ade:	2211      	movs	r2, #17
 8002ae0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <HAL_I2S_MspInit+0x148>)
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae8:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <HAL_I2S_MspInit+0x148>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002aee:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_I2S_MspInit+0x148>)
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002af4:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <HAL_I2S_MspInit+0x148>)
 8002af6:	2280      	movs	r2, #128	; 0x80
 8002af8:	0052      	lsls	r2, r2, #1
 8002afa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002afc:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_I2S_MspInit+0x148>)
 8002afe:	2280      	movs	r2, #128	; 0x80
 8002b00:	00d2      	lsls	r2, r2, #3
 8002b02:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <HAL_I2S_MspInit+0x148>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_I2S_MspInit+0x148>)
 8002b0c:	22c0      	movs	r2, #192	; 0xc0
 8002b0e:	0192      	lsls	r2, r2, #6
 8002b10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <HAL_I2S_MspInit+0x148>)
 8002b14:	0018      	movs	r0, r3
 8002b16:	f000 ff41 	bl	800399c <HAL_DMA_Init>
 8002b1a:	1e03      	subs	r3, r0, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 8002b1e:	f7ff febd 	bl	800289c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a0b      	ldr	r2, [pc, #44]	; (8002b54 <HAL_I2S_MspInit+0x148>)
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_I2S_MspInit+0x148>)
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2100      	movs	r1, #0
 8002b32:	2019      	movs	r0, #25
 8002b34:	f000 ff00 	bl	8003938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b38:	2019      	movs	r0, #25
 8002b3a:	f000 ff12 	bl	8003962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b00b      	add	sp, #44	; 0x2c
 8002b44:	bd90      	pop	{r4, r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	40013000 	.word	0x40013000
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	50000400 	.word	0x50000400
 8002b54:	20003580 	.word	0x20003580
 8002b58:	40020008 	.word	0x40020008

08002b5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b08b      	sub	sp, #44	; 0x2c
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	2414      	movs	r4, #20
 8002b66:	193b      	adds	r3, r7, r4
 8002b68:	0018      	movs	r0, r3
 8002b6a:	2314      	movs	r3, #20
 8002b6c:	001a      	movs	r2, r3
 8002b6e:	2100      	movs	r1, #0
 8002b70:	f008 f936 	bl	800ade0 <memset>
  if(hspi->Instance==SPI2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a54      	ldr	r2, [pc, #336]	; (8002ccc <HAL_SPI_MspInit+0x170>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d000      	beq.n	8002b80 <HAL_SPI_MspInit+0x24>
 8002b7e:	e0a0      	b.n	8002cc2 <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b80:	4b53      	ldr	r3, [pc, #332]	; (8002cd0 <HAL_SPI_MspInit+0x174>)
 8002b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b84:	4b52      	ldr	r3, [pc, #328]	; (8002cd0 <HAL_SPI_MspInit+0x174>)
 8002b86:	2180      	movs	r1, #128	; 0x80
 8002b88:	01c9      	lsls	r1, r1, #7
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b8e:	4b50      	ldr	r3, [pc, #320]	; (8002cd0 <HAL_SPI_MspInit+0x174>)
 8002b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	01db      	lsls	r3, r3, #7
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9c:	4b4c      	ldr	r3, [pc, #304]	; (8002cd0 <HAL_SPI_MspInit+0x174>)
 8002b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba0:	4b4b      	ldr	r3, [pc, #300]	; (8002cd0 <HAL_SPI_MspInit+0x174>)
 8002ba2:	2102      	movs	r1, #2
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ba8:	4b49      	ldr	r3, [pc, #292]	; (8002cd0 <HAL_SPI_MspInit+0x174>)
 8002baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bac:	2202      	movs	r2, #2
 8002bae:	4013      	ands	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bb4:	193b      	adds	r3, r7, r4
 8002bb6:	2240      	movs	r2, #64	; 0x40
 8002bb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bba:	193b      	adds	r3, r7, r4
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	193b      	adds	r3, r7, r4
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc6:	193b      	adds	r3, r7, r4
 8002bc8:	2200      	movs	r2, #0
 8002bca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8002bcc:	193b      	adds	r3, r7, r4
 8002bce:	2204      	movs	r2, #4
 8002bd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd2:	193b      	adds	r3, r7, r4
 8002bd4:	4a3f      	ldr	r2, [pc, #252]	; (8002cd4 <HAL_SPI_MspInit+0x178>)
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	0010      	movs	r0, r2
 8002bda:	f001 f9a7 	bl	8003f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002bde:	0021      	movs	r1, r4
 8002be0:	187b      	adds	r3, r7, r1
 8002be2:	22c0      	movs	r2, #192	; 0xc0
 8002be4:	0052      	lsls	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	187b      	adds	r3, r7, r1
 8002bea:	2202      	movs	r2, #2
 8002bec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf4:	187b      	adds	r3, r7, r1
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002bfa:	187b      	adds	r3, r7, r1
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c00:	187b      	adds	r3, r7, r1
 8002c02:	4a34      	ldr	r2, [pc, #208]	; (8002cd4 <HAL_SPI_MspInit+0x178>)
 8002c04:	0019      	movs	r1, r3
 8002c06:	0010      	movs	r0, r2
 8002c08:	f001 f990 	bl	8003f2c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8002c0c:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <HAL_SPI_MspInit+0x17c>)
 8002c0e:	4a33      	ldr	r2, [pc, #204]	; (8002cdc <HAL_SPI_MspInit+0x180>)
 8002c10:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002c12:	4b31      	ldr	r3, [pc, #196]	; (8002cd8 <HAL_SPI_MspInit+0x17c>)
 8002c14:	2212      	movs	r2, #18
 8002c16:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c18:	4b2f      	ldr	r3, [pc, #188]	; (8002cd8 <HAL_SPI_MspInit+0x17c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c1e:	4b2e      	ldr	r3, [pc, #184]	; (8002cd8 <HAL_SPI_MspInit+0x17c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c24:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <HAL_SPI_MspInit+0x17c>)
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c2a:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_SPI_MspInit+0x17c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c30:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_SPI_MspInit+0x17c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002c36:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <HAL_SPI_MspInit+0x17c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c3c:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <HAL_SPI_MspInit+0x17c>)
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	0192      	lsls	r2, r2, #6
 8002c42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002c44:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <HAL_SPI_MspInit+0x17c>)
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 fea8 	bl	800399c <HAL_DMA_Init>
 8002c4c:	1e03      	subs	r3, r0, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8002c50:	f7ff fe24 	bl	800289c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <HAL_SPI_MspInit+0x17c>)
 8002c58:	659a      	str	r2, [r3, #88]	; 0x58
 8002c5a:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <HAL_SPI_MspInit+0x17c>)
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8002c60:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_SPI_MspInit+0x184>)
 8002c62:	4a20      	ldr	r2, [pc, #128]	; (8002ce4 <HAL_SPI_MspInit+0x188>)
 8002c64:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002c66:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <HAL_SPI_MspInit+0x184>)
 8002c68:	2213      	movs	r2, #19
 8002c6a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <HAL_SPI_MspInit+0x184>)
 8002c6e:	2210      	movs	r2, #16
 8002c70:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c72:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <HAL_SPI_MspInit+0x184>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_SPI_MspInit+0x184>)
 8002c7a:	2280      	movs	r2, #128	; 0x80
 8002c7c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <HAL_SPI_MspInit+0x184>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c84:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <HAL_SPI_MspInit+0x184>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_SPI_MspInit+0x184>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_SPI_MspInit+0x184>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_SPI_MspInit+0x184>)
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f000 fe7f 	bl	800399c <HAL_DMA_Init>
 8002c9e:	1e03      	subs	r3, r0, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8002ca2:	f7ff fdfb 	bl	800289c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	; (8002ce0 <HAL_SPI_MspInit+0x184>)
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_SPI_MspInit+0x184>)
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	201a      	movs	r0, #26
 8002cb8:	f000 fe3e 	bl	8003938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002cbc:	201a      	movs	r0, #26
 8002cbe:	f000 fe50 	bl	8003962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b00b      	add	sp, #44	; 0x2c
 8002cc8:	bd90      	pop	{r4, r7, pc}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	40003800 	.word	0x40003800
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	50000400 	.word	0x50000400
 8002cd8:	20003294 	.word	0x20003294
 8002cdc:	4002001c 	.word	0x4002001c
 8002ce0:	20003520 	.word	0x20003520
 8002ce4:	40020030 	.word	0x40020030

08002ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <HAL_TIM_Base_MspInit+0x38>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d10d      	bne.n	8002d16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_TIM_Base_MspInit+0x3c>)
 8002cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_TIM_Base_MspInit+0x3c>)
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	0109      	lsls	r1, r1, #4
 8002d04:	430a      	orrs	r2, r1
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_TIM_Base_MspInit+0x3c>)
 8002d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	4013      	ands	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	40012c00 	.word	0x40012c00
 8002d24:	40021000 	.word	0x40021000

08002d28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	240c      	movs	r4, #12
 8002d32:	193b      	adds	r3, r7, r4
 8002d34:	0018      	movs	r0, r3
 8002d36:	2314      	movs	r3, #20
 8002d38:	001a      	movs	r2, r3
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	f008 f850 	bl	800ade0 <memset>
  if(htim->Instance==TIM1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a15      	ldr	r2, [pc, #84]	; (8002d9c <HAL_TIM_MspPostInit+0x74>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d123      	bne.n	8002d92 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4a:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <HAL_TIM_MspPostInit+0x78>)
 8002d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d4e:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <HAL_TIM_MspPostInit+0x78>)
 8002d50:	2101      	movs	r1, #1
 8002d52:	430a      	orrs	r2, r1
 8002d54:	635a      	str	r2, [r3, #52]	; 0x34
 8002d56:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_TIM_MspPostInit+0x78>)
 8002d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d62:	193b      	adds	r3, r7, r4
 8002d64:	2280      	movs	r2, #128	; 0x80
 8002d66:	0052      	lsls	r2, r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	0021      	movs	r1, r4
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	2202      	movs	r2, #2
 8002d70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	2202      	movs	r2, #2
 8002d76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d78:	187b      	adds	r3, r7, r1
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	2202      	movs	r2, #2
 8002d82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d84:	187a      	adds	r2, r7, r1
 8002d86:	23a0      	movs	r3, #160	; 0xa0
 8002d88:	05db      	lsls	r3, r3, #23
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f001 f8cd 	bl	8003f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b009      	add	sp, #36	; 0x24
 8002d98:	bd90      	pop	{r4, r7, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40021000 	.word	0x40021000

08002da4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b08b      	sub	sp, #44	; 0x2c
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	2414      	movs	r4, #20
 8002dae:	193b      	adds	r3, r7, r4
 8002db0:	0018      	movs	r0, r3
 8002db2:	2314      	movs	r3, #20
 8002db4:	001a      	movs	r2, r3
 8002db6:	2100      	movs	r1, #0
 8002db8:	f008 f812 	bl	800ade0 <memset>
  if(husart->Instance==USART3)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a45      	ldr	r2, [pc, #276]	; (8002ed8 <HAL_USART_MspInit+0x134>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d000      	beq.n	8002dc8 <HAL_USART_MspInit+0x24>
 8002dc6:	e083      	b.n	8002ed0 <HAL_USART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dc8:	4b44      	ldr	r3, [pc, #272]	; (8002edc <HAL_USART_MspInit+0x138>)
 8002dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dcc:	4b43      	ldr	r3, [pc, #268]	; (8002edc <HAL_USART_MspInit+0x138>)
 8002dce:	2180      	movs	r1, #128	; 0x80
 8002dd0:	02c9      	lsls	r1, r1, #11
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dd6:	4b41      	ldr	r3, [pc, #260]	; (8002edc <HAL_USART_MspInit+0x138>)
 8002dd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	02db      	lsls	r3, r3, #11
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de4:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <HAL_USART_MspInit+0x138>)
 8002de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002de8:	4b3c      	ldr	r3, [pc, #240]	; (8002edc <HAL_USART_MspInit+0x138>)
 8002dea:	2101      	movs	r1, #1
 8002dec:	430a      	orrs	r2, r1
 8002dee:	635a      	str	r2, [r3, #52]	; 0x34
 8002df0:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <HAL_USART_MspInit+0x138>)
 8002df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df4:	2201      	movs	r2, #1
 8002df6:	4013      	ands	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfc:	4b37      	ldr	r3, [pc, #220]	; (8002edc <HAL_USART_MspInit+0x138>)
 8002dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e00:	4b36      	ldr	r3, [pc, #216]	; (8002edc <HAL_USART_MspInit+0x138>)
 8002e02:	2102      	movs	r1, #2
 8002e04:	430a      	orrs	r2, r1
 8002e06:	635a      	str	r2, [r3, #52]	; 0x34
 8002e08:	4b34      	ldr	r3, [pc, #208]	; (8002edc <HAL_USART_MspInit+0x138>)
 8002e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	4013      	ands	r3, r2
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002e14:	193b      	adds	r3, r7, r4
 8002e16:	2220      	movs	r2, #32
 8002e18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	193b      	adds	r3, r7, r4
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	193b      	adds	r3, r7, r4
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e26:	193b      	adds	r3, r7, r4
 8002e28:	2203      	movs	r2, #3
 8002e2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002e2c:	193b      	adds	r3, r7, r4
 8002e2e:	2204      	movs	r2, #4
 8002e30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e32:	193a      	adds	r2, r7, r4
 8002e34:	23a0      	movs	r3, #160	; 0xa0
 8002e36:	05db      	lsls	r3, r3, #23
 8002e38:	0011      	movs	r1, r2
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f001 f876 	bl	8003f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e40:	0021      	movs	r1, r4
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	2203      	movs	r2, #3
 8002e46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e48:	187b      	adds	r3, r7, r1
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4e:	187b      	adds	r3, r7, r1
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	2203      	movs	r2, #3
 8002e58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002e5a:	187b      	adds	r3, r7, r1
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e60:	187b      	adds	r3, r7, r1
 8002e62:	4a1f      	ldr	r2, [pc, #124]	; (8002ee0 <HAL_USART_MspInit+0x13c>)
 8002e64:	0019      	movs	r1, r3
 8002e66:	0010      	movs	r0, r2
 8002e68:	f001 f860 	bl	8003f2c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <HAL_USART_MspInit+0x140>)
 8002e6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ee8 <HAL_USART_MspInit+0x144>)
 8002e70:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002e72:	4b1c      	ldr	r3, [pc, #112]	; (8002ee4 <HAL_USART_MspInit+0x140>)
 8002e74:	2237      	movs	r2, #55	; 0x37
 8002e76:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_USART_MspInit+0x140>)
 8002e7a:	2210      	movs	r2, #16
 8002e7c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e7e:	4b19      	ldr	r3, [pc, #100]	; (8002ee4 <HAL_USART_MspInit+0x140>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e84:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <HAL_USART_MspInit+0x140>)
 8002e86:	2280      	movs	r2, #128	; 0x80
 8002e88:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e8a:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <HAL_USART_MspInit+0x140>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e90:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <HAL_USART_MspInit+0x140>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002e96:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <HAL_USART_MspInit+0x140>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <HAL_USART_MspInit+0x140>)
 8002e9e:	2280      	movs	r2, #128	; 0x80
 8002ea0:	0192      	lsls	r2, r2, #6
 8002ea2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_USART_MspInit+0x140>)
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f000 fd78 	bl	800399c <HAL_DMA_Init>
 8002eac:	1e03      	subs	r3, r0, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8002eb0:	f7ff fcf4 	bl	800289c <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a0b      	ldr	r2, [pc, #44]	; (8002ee4 <HAL_USART_MspInit+0x140>)
 8002eb8:	651a      	str	r2, [r3, #80]	; 0x50
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_USART_MspInit+0x140>)
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	201d      	movs	r0, #29
 8002ec6:	f000 fd37 	bl	8003938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002eca:	201d      	movs	r0, #29
 8002ecc:	f000 fd49 	bl	8003962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b00b      	add	sp, #44	; 0x2c
 8002ed6:	bd90      	pop	{r4, r7, pc}
 8002ed8:	40004800 	.word	0x40004800
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	50000400 	.word	0x50000400
 8002ee4:	200032f8 	.word	0x200032f8
 8002ee8:	40020044 	.word	0x40020044

08002eec <LL_USART_IsActiveFlag_FE>:
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d101      	bne.n	8002f04 <LL_USART_IsActiveFlag_FE+0x18>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <LL_USART_IsActiveFlag_FE+0x1a>
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	0018      	movs	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b002      	add	sp, #8
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <LL_USART_IsActiveFlag_NE>:
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d101      	bne.n	8002f26 <LL_USART_IsActiveFlag_NE+0x18>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <LL_USART_IsActiveFlag_NE+0x1a>
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b002      	add	sp, #8
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <LL_USART_IsActiveFlag_ORE>:
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d101      	bne.n	8002f48 <LL_USART_IsActiveFlag_ORE+0x18>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <LL_USART_IsActiveFlag_ORE+0x1a>
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b002      	add	sp, #8
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d101      	bne.n	8002f6a <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b002      	add	sp, #8
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2220      	movs	r2, #32
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d101      	bne.n	8002f8c <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b002      	add	sp, #8
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa4:	e7fe      	b.n	8002fa4 <HardFault_Handler+0x4>

08002fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fbe:	f000 f959 	bl	8003274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <DMA1_Channel1_IRQHandler+0x14>)
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f000 fe5e 	bl	8003c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	20003580 	.word	0x20003580

08002fe0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f000 fe52 	bl	8003c90 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002fec:	4b04      	ldr	r3, [pc, #16]	; (8003000 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 fe4e 	bl	8003c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	20003294 	.word	0x20003294
 8003000:	20003520 	.word	0x20003520

08003004 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003008:	4b03      	ldr	r3, [pc, #12]	; (8003018 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 800300a:	0018      	movs	r0, r3
 800300c:	f000 fe40 	bl	8003c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	200032f8 	.word	0x200032f8

0800301c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8003020:	4b09      	ldr	r3, [pc, #36]	; (8003048 <I2C1_IRQHandler+0x2c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	23e0      	movs	r3, #224	; 0xe0
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4013      	ands	r3, r2
 800302c:	d004      	beq.n	8003038 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <I2C1_IRQHandler+0x2c>)
 8003030:	0018      	movs	r0, r3
 8003032:	f001 fa97 	bl	8004564 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8003036:	e003      	b.n	8003040 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <I2C1_IRQHandler+0x2c>)
 800303a:	0018      	movs	r0, r3
 800303c:	f001 fa78 	bl	8004530 <HAL_I2C_EV_IRQHandler>
}
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	20003234 	.word	0x20003234

0800304c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <SPI1_IRQHandler+0x14>)
 8003052:	0018      	movs	r0, r3
 8003054:	f002 fb50 	bl	80056f8 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	20003460 	.word	0x20003460

08003064 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <SPI2_IRQHandler+0x14>)
 800306a:	0018      	movs	r0, r3
 800306c:	f004 fe5a 	bl	8007d24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	200031b0 	.word	0x200031b0

0800307c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8003080:	4b25      	ldr	r3, [pc, #148]	; (8003118 <USART2_IRQHandler+0x9c>)
 8003082:	6a1a      	ldr	r2, [r3, #32]
 8003084:	4b24      	ldr	r3, [pc, #144]	; (8003118 <USART2_IRQHandler+0x9c>)
 8003086:	2108      	movs	r1, #8
 8003088:	430a      	orrs	r2, r1
 800308a:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 800308c:	4b22      	ldr	r3, [pc, #136]	; (8003118 <USART2_IRQHandler+0x9c>)
 800308e:	6a1a      	ldr	r2, [r3, #32]
 8003090:	4b21      	ldr	r3, [pc, #132]	; (8003118 <USART2_IRQHandler+0x9c>)
 8003092:	2102      	movs	r1, #2
 8003094:	430a      	orrs	r2, r1
 8003096:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8003098:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <USART2_IRQHandler+0x9c>)
 800309a:	6a1a      	ldr	r2, [r3, #32]
 800309c:	4b1e      	ldr	r3, [pc, #120]	; (8003118 <USART2_IRQHandler+0x9c>)
 800309e:	2104      	movs	r1, #4
 80030a0:	430a      	orrs	r2, r1
 80030a2:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <USART2_IRQHandler+0x9c>)
 80030a6:	0018      	movs	r0, r3
 80030a8:	f7ff ff53 	bl	8002f52 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80030ac:	1e03      	subs	r3, r0, #0
 80030ae:	d009      	beq.n	80030c4 <USART2_IRQHandler+0x48>
 80030b0:	4b19      	ldr	r3, [pc, #100]	; (8003118 <USART2_IRQHandler+0x9c>)
 80030b2:	0018      	movs	r0, r3
 80030b4:	f7ff ff5e 	bl	8002f74 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 80030b8:	1e03      	subs	r3, r0, #0
 80030ba:	d003      	beq.n	80030c4 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 80030bc:	f7fd ff94 	bl	8000fe8 <USART2_RX_Callback>
	  {
 80030c0:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030c2:	e025      	b.n	8003110 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <USART2_IRQHandler+0x9c>)
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	4b13      	ldr	r3, [pc, #76]	; (8003118 <USART2_IRQHandler+0x9c>)
 80030ca:	2108      	movs	r1, #8
 80030cc:	430a      	orrs	r2, r1
 80030ce:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <USART2_IRQHandler+0x9c>)
 80030d2:	0018      	movs	r0, r3
 80030d4:	f7ff ff2c 	bl	8002f30 <LL_USART_IsActiveFlag_ORE>
 80030d8:	1e03      	subs	r3, r0, #0
 80030da:	d008      	beq.n	80030ee <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 80030dc:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <USART2_IRQHandler+0x9c>)
 80030de:	6a1a      	ldr	r2, [r3, #32]
 80030e0:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <USART2_IRQHandler+0x9c>)
 80030e2:	2108      	movs	r1, #8
 80030e4:	430a      	orrs	r2, r1
 80030e6:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <USART2_IRQHandler+0x9c>)
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80030ec:	e010      	b.n	8003110 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <USART2_IRQHandler+0x9c>)
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7ff fefb 	bl	8002eec <LL_USART_IsActiveFlag_FE>
 80030f6:	1e03      	subs	r3, r0, #0
 80030f8:	d002      	beq.n	8003100 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <USART2_IRQHandler+0x9c>)
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80030fe:	e007      	b.n	8003110 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <USART2_IRQHandler+0x9c>)
 8003102:	0018      	movs	r0, r3
 8003104:	f7ff ff03 	bl	8002f0e <LL_USART_IsActiveFlag_NE>
 8003108:	1e03      	subs	r3, r0, #0
 800310a:	d001      	beq.n	8003110 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 800310c:	4b02      	ldr	r3, [pc, #8]	; (8003118 <USART2_IRQHandler+0x9c>)
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003110:	46c0      	nop			; (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	40004400 	.word	0x40004400

0800311c <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <USART3_4_LPUART1_IRQHandler+0x14>)
 8003122:	0018      	movs	r0, r3
 8003124:	f006 fc9a 	bl	8009a5c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8003128:	46c0      	nop			; (mov r8, r8)
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	20003394 	.word	0x20003394

08003134 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <SystemInit+0x14>)
 800313a:	2280      	movs	r2, #128	; 0x80
 800313c:	0512      	lsls	r2, r2, #20
 800313e:	609a      	str	r2, [r3, #8]
#endif
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800314c:	480d      	ldr	r0, [pc, #52]	; (8003184 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800314e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003150:	f7ff fff0 	bl	8003134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003154:	480c      	ldr	r0, [pc, #48]	; (8003188 <LoopForever+0x6>)
  ldr r1, =_edata
 8003156:	490d      	ldr	r1, [pc, #52]	; (800318c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003158:	4a0d      	ldr	r2, [pc, #52]	; (8003190 <LoopForever+0xe>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800315c:	e002      	b.n	8003164 <LoopCopyDataInit>

0800315e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800315e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003162:	3304      	adds	r3, #4

08003164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003168:	d3f9      	bcc.n	800315e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800316a:	4a0a      	ldr	r2, [pc, #40]	; (8003194 <LoopForever+0x12>)
  ldr r4, =_ebss
 800316c:	4c0a      	ldr	r4, [pc, #40]	; (8003198 <LoopForever+0x16>)
  movs r3, #0
 800316e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003170:	e001      	b.n	8003176 <LoopFillZerobss>

08003172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003174:	3204      	adds	r2, #4

08003176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003178:	d3fb      	bcc.n	8003172 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800317a:	f007 fe0d 	bl	800ad98 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800317e:	f7fd f9d7 	bl	8000530 <main>

08003182 <LoopForever>:

LoopForever:
  b LoopForever
 8003182:	e7fe      	b.n	8003182 <LoopForever>
  ldr   r0, =_estack
 8003184:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800318c:	20003140 	.word	0x20003140
  ldr r2, =_sidata
 8003190:	0800aef8 	.word	0x0800aef8
  ldr r2, =_sbss
 8003194:	20003140 	.word	0x20003140
  ldr r4, =_ebss
 8003198:	20005604 	.word	0x20005604

0800319c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800319c:	e7fe      	b.n	800319c <ADC1_COMP_IRQHandler>
	...

080031a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031a6:	1dfb      	adds	r3, r7, #7
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_Init+0x3c>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_Init+0x3c>)
 80031b2:	2180      	movs	r1, #128	; 0x80
 80031b4:	0049      	lsls	r1, r1, #1
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031ba:	2000      	movs	r0, #0
 80031bc:	f000 f810 	bl	80031e0 <HAL_InitTick>
 80031c0:	1e03      	subs	r3, r0, #0
 80031c2:	d003      	beq.n	80031cc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80031c4:	1dfb      	adds	r3, r7, #7
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	e001      	b.n	80031d0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80031cc:	f7ff fb6c 	bl	80028a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031d0:	1dfb      	adds	r3, r7, #7
 80031d2:	781b      	ldrb	r3, [r3, #0]
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40022000 	.word	0x40022000

080031e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031e8:	230f      	movs	r3, #15
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_InitTick+0x88>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d02b      	beq.n	8003250 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80031f8:	4b1c      	ldr	r3, [pc, #112]	; (800326c <HAL_InitTick+0x8c>)
 80031fa:	681c      	ldr	r4, [r3, #0]
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_InitTick+0x88>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	0019      	movs	r1, r3
 8003202:	23fa      	movs	r3, #250	; 0xfa
 8003204:	0098      	lsls	r0, r3, #2
 8003206:	f7fc ff7d 	bl	8000104 <__udivsi3>
 800320a:	0003      	movs	r3, r0
 800320c:	0019      	movs	r1, r3
 800320e:	0020      	movs	r0, r4
 8003210:	f7fc ff78 	bl	8000104 <__udivsi3>
 8003214:	0003      	movs	r3, r0
 8003216:	0018      	movs	r0, r3
 8003218:	f000 fbb3 	bl	8003982 <HAL_SYSTICK_Config>
 800321c:	1e03      	subs	r3, r0, #0
 800321e:	d112      	bne.n	8003246 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b03      	cmp	r3, #3
 8003224:	d80a      	bhi.n	800323c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	2301      	movs	r3, #1
 800322a:	425b      	negs	r3, r3
 800322c:	2200      	movs	r2, #0
 800322e:	0018      	movs	r0, r3
 8003230:	f000 fb82 	bl	8003938 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003234:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <HAL_InitTick+0x90>)
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e00d      	b.n	8003258 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800323c:	230f      	movs	r3, #15
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	2201      	movs	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	e008      	b.n	8003258 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003246:	230f      	movs	r3, #15
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	e003      	b.n	8003258 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003250:	230f      	movs	r3, #15
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003258:	230f      	movs	r3, #15
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	781b      	ldrb	r3, [r3, #0]
}
 800325e:	0018      	movs	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	b005      	add	sp, #20
 8003264:	bd90      	pop	{r4, r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	2000313c 	.word	0x2000313c
 800326c:	20003134 	.word	0x20003134
 8003270:	20003138 	.word	0x20003138

08003274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_IncTick+0x1c>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	001a      	movs	r2, r3
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_IncTick+0x20>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	18d2      	adds	r2, r2, r3
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <HAL_IncTick+0x20>)
 8003286:	601a      	str	r2, [r3, #0]
}
 8003288:	46c0      	nop			; (mov r8, r8)
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	2000313c 	.word	0x2000313c
 8003294:	20005600 	.word	0x20005600

08003298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  return uwTick;
 800329c:	4b02      	ldr	r3, [pc, #8]	; (80032a8 <HAL_GetTick+0x10>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	0018      	movs	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	20005600 	.word	0x20005600

080032ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032b4:	f7ff fff0 	bl	8003298 <HAL_GetTick>
 80032b8:	0003      	movs	r3, r0
 80032ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3301      	adds	r3, #1
 80032c4:	d005      	beq.n	80032d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <HAL_Delay+0x44>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	001a      	movs	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	189b      	adds	r3, r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	f7ff ffe0 	bl	8003298 <HAL_GetTick>
 80032d8:	0002      	movs	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d8f7      	bhi.n	80032d4 <HAL_Delay+0x28>
  {
  }
}
 80032e4:	46c0      	nop			; (mov r8, r8)
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b004      	add	sp, #16
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	2000313c 	.word	0x2000313c

080032f4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80032fc:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a06      	ldr	r2, [pc, #24]	; (800331c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003302:	4013      	ands	r3, r2
 8003304:	0019      	movs	r1, r3
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	430a      	orrs	r2, r1
 800330c:	601a      	str	r2, [r3, #0]
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b002      	add	sp, #8
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	40010000 	.word	0x40010000
 800331c:	fffff9ff 	.word	0xfffff9ff

08003320 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003328:	4a05      	ldr	r2, [pc, #20]	; (8003340 <LL_EXTI_EnableIT_0_31+0x20>)
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	58d2      	ldr	r2, [r2, r3]
 800332e:	4904      	ldr	r1, [pc, #16]	; (8003340 <LL_EXTI_EnableIT_0_31+0x20>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4313      	orrs	r3, r2
 8003334:	2280      	movs	r2, #128	; 0x80
 8003336:	508b      	str	r3, [r1, r2]
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b002      	add	sp, #8
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40021800 	.word	0x40021800

08003344 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800334c:	4a06      	ldr	r2, [pc, #24]	; (8003368 <LL_EXTI_DisableIT_0_31+0x24>)
 800334e:	2380      	movs	r3, #128	; 0x80
 8003350:	58d3      	ldr	r3, [r2, r3]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	43d2      	mvns	r2, r2
 8003356:	4904      	ldr	r1, [pc, #16]	; (8003368 <LL_EXTI_DisableIT_0_31+0x24>)
 8003358:	4013      	ands	r3, r2
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	508b      	str	r3, [r1, r2]
}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	46bd      	mov	sp, r7
 8003362:	b002      	add	sp, #8
 8003364:	bd80      	pop	{r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	40021800 	.word	0x40021800

0800336c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003374:	4a05      	ldr	r2, [pc, #20]	; (800338c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003376:	2384      	movs	r3, #132	; 0x84
 8003378:	58d2      	ldr	r2, [r2, r3]
 800337a:	4904      	ldr	r1, [pc, #16]	; (800338c <LL_EXTI_EnableEvent_0_31+0x20>)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4313      	orrs	r3, r2
 8003380:	2284      	movs	r2, #132	; 0x84
 8003382:	508b      	str	r3, [r1, r2]

}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b002      	add	sp, #8
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40021800 	.word	0x40021800

08003390 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003398:	4a06      	ldr	r2, [pc, #24]	; (80033b4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800339a:	2384      	movs	r3, #132	; 0x84
 800339c:	58d3      	ldr	r3, [r2, r3]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	43d2      	mvns	r2, r2
 80033a2:	4904      	ldr	r1, [pc, #16]	; (80033b4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80033a4:	4013      	ands	r3, r2
 80033a6:	2284      	movs	r2, #132	; 0x84
 80033a8:	508b      	str	r3, [r1, r2]
}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b002      	add	sp, #8
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	40021800 	.word	0x40021800

080033b8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80033c0:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80033c2:	6819      	ldr	r1, [r3, #0]
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]

}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b002      	add	sp, #8
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021800 	.word	0x40021800

080033d8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	43d9      	mvns	r1, r3
 80033e8:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80033ea:	400a      	ands	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]

}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b002      	add	sp, #8
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	40021800 	.word	0x40021800

080033fc <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003404:	4b04      	ldr	r3, [pc, #16]	; (8003418 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8003406:	6859      	ldr	r1, [r3, #4]
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	430a      	orrs	r2, r1
 800340e:	605a      	str	r2, [r3, #4]
}
 8003410:	46c0      	nop			; (mov r8, r8)
 8003412:	46bd      	mov	sp, r7
 8003414:	b002      	add	sp, #8
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021800 	.word	0x40021800

0800341c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	43d9      	mvns	r1, r3
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800342e:	400a      	ands	r2, r1
 8003430:	605a      	str	r2, [r3, #4]
}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	46bd      	mov	sp, r7
 8003436:	b002      	add	sp, #8
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	40021800 	.word	0x40021800

08003440 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8003448:	4b03      	ldr	r3, [pc, #12]	; (8003458 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	611a      	str	r2, [r3, #16]
}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b002      	add	sp, #8
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	40021800 	.word	0x40021800

0800345c <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8003464:	4b03      	ldr	r3, [pc, #12]	; (8003474 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	60da      	str	r2, [r3, #12]
}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	46bd      	mov	sp, r7
 800346e:	b002      	add	sp, #8
 8003470:	bd80      	pop	{r7, pc}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	40021800 	.word	0x40021800

08003478 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003484:	211f      	movs	r1, #31
 8003486:	187b      	adds	r3, r7, r1
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d103      	bne.n	800349a <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8003492:	187b      	adds	r3, r7, r1
 8003494:	2201      	movs	r2, #1
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	e13d      	b.n	8003716 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	0fdb      	lsrs	r3, r3, #31
 80034a2:	07da      	lsls	r2, r3, #31
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	061b      	lsls	r3, r3, #24
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d104      	bne.n	80034b6 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 80034ac:	231f      	movs	r3, #31
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e12f      	b.n	8003716 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2229      	movs	r2, #41	; 0x29
 80034ba:	5c9b      	ldrb	r3, [r3, r2]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10a      	bne.n	80034d8 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2228      	movs	r2, #40	; 0x28
 80034c6:	2100      	movs	r1, #0
 80034c8:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	0018      	movs	r0, r3
 80034d4:	f7ff fa10 	bl	80028f8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2230      	movs	r2, #48	; 0x30
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a85      	ldr	r2, [pc, #532]	; (8003724 <HAL_COMP_Init+0x2ac>)
 8003510:	4013      	ands	r3, r2
 8003512:	0019      	movs	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	430a      	orrs	r2, r1
 800351c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	429a      	cmp	r2, r3
 8003528:	d10d      	bne.n	8003546 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800352a:	4b7f      	ldr	r3, [pc, #508]	; (8003728 <HAL_COMP_Init+0x2b0>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4b7e      	ldr	r3, [pc, #504]	; (8003728 <HAL_COMP_Init+0x2b0>)
 8003530:	497e      	ldr	r1, [pc, #504]	; (800372c <HAL_COMP_Init+0x2b4>)
 8003532:	400a      	ands	r2, r1
 8003534:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003536:	4b7c      	ldr	r3, [pc, #496]	; (8003728 <HAL_COMP_Init+0x2b0>)
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	4b7b      	ldr	r3, [pc, #492]	; (8003728 <HAL_COMP_Init+0x2b0>)
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	0109      	lsls	r1, r1, #4
 8003540:	430a      	orrs	r2, r1
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	e01f      	b.n	8003586 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	23c0      	movs	r3, #192	; 0xc0
 800354c:	015b      	lsls	r3, r3, #5
 800354e:	429a      	cmp	r2, r3
 8003550:	d10d      	bne.n	800356e <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003552:	4b75      	ldr	r3, [pc, #468]	; (8003728 <HAL_COMP_Init+0x2b0>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4b74      	ldr	r3, [pc, #464]	; (8003728 <HAL_COMP_Init+0x2b0>)
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	0109      	lsls	r1, r1, #4
 800355c:	430a      	orrs	r2, r1
 800355e:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003560:	4b71      	ldr	r3, [pc, #452]	; (8003728 <HAL_COMP_Init+0x2b0>)
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	4b70      	ldr	r3, [pc, #448]	; (8003728 <HAL_COMP_Init+0x2b0>)
 8003566:	4971      	ldr	r1, [pc, #452]	; (800372c <HAL_COMP_Init+0x2b4>)
 8003568:	400a      	ands	r2, r1
 800356a:	605a      	str	r2, [r3, #4]
 800356c:	e00b      	b.n	8003586 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800356e:	4b6e      	ldr	r3, [pc, #440]	; (8003728 <HAL_COMP_Init+0x2b0>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4b6d      	ldr	r3, [pc, #436]	; (8003728 <HAL_COMP_Init+0x2b0>)
 8003574:	496d      	ldr	r1, [pc, #436]	; (800372c <HAL_COMP_Init+0x2b4>)
 8003576:	400a      	ands	r2, r1
 8003578:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800357a:	4b6b      	ldr	r3, [pc, #428]	; (8003728 <HAL_COMP_Init+0x2b0>)
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	4b6a      	ldr	r3, [pc, #424]	; (8003728 <HAL_COMP_Init+0x2b0>)
 8003580:	496a      	ldr	r1, [pc, #424]	; (800372c <HAL_COMP_Init+0x2b4>)
 8003582:	400a      	ands	r2, r1
 8003584:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	22a0      	movs	r2, #160	; 0xa0
 800358c:	01d2      	lsls	r2, r2, #7
 800358e:	4293      	cmp	r3, r2
 8003590:	d017      	beq.n	80035c2 <HAL_COMP_Init+0x14a>
 8003592:	22a0      	movs	r2, #160	; 0xa0
 8003594:	01d2      	lsls	r2, r2, #7
 8003596:	4293      	cmp	r3, r2
 8003598:	d830      	bhi.n	80035fc <HAL_COMP_Init+0x184>
 800359a:	2b01      	cmp	r3, #1
 800359c:	d01f      	beq.n	80035de <HAL_COMP_Init+0x166>
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	01d2      	lsls	r2, r2, #7
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d12a      	bne.n	80035fc <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80035a6:	4b60      	ldr	r3, [pc, #384]	; (8003728 <HAL_COMP_Init+0x2b0>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	4b5f      	ldr	r3, [pc, #380]	; (8003728 <HAL_COMP_Init+0x2b0>)
 80035ac:	2180      	movs	r1, #128	; 0x80
 80035ae:	01c9      	lsls	r1, r1, #7
 80035b0:	430a      	orrs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80035b4:	4b5c      	ldr	r3, [pc, #368]	; (8003728 <HAL_COMP_Init+0x2b0>)
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	4b5b      	ldr	r3, [pc, #364]	; (8003728 <HAL_COMP_Init+0x2b0>)
 80035ba:	495d      	ldr	r1, [pc, #372]	; (8003730 <HAL_COMP_Init+0x2b8>)
 80035bc:	400a      	ands	r2, r1
 80035be:	605a      	str	r2, [r3, #4]
        break;
 80035c0:	e029      	b.n	8003616 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80035c2:	4b59      	ldr	r3, [pc, #356]	; (8003728 <HAL_COMP_Init+0x2b0>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4b58      	ldr	r3, [pc, #352]	; (8003728 <HAL_COMP_Init+0x2b0>)
 80035c8:	4959      	ldr	r1, [pc, #356]	; (8003730 <HAL_COMP_Init+0x2b8>)
 80035ca:	400a      	ands	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80035ce:	4b56      	ldr	r3, [pc, #344]	; (8003728 <HAL_COMP_Init+0x2b0>)
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	4b55      	ldr	r3, [pc, #340]	; (8003728 <HAL_COMP_Init+0x2b0>)
 80035d4:	2180      	movs	r1, #128	; 0x80
 80035d6:	01c9      	lsls	r1, r1, #7
 80035d8:	430a      	orrs	r2, r1
 80035da:	605a      	str	r2, [r3, #4]
        break;
 80035dc:	e01b      	b.n	8003616 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80035de:	4b52      	ldr	r3, [pc, #328]	; (8003728 <HAL_COMP_Init+0x2b0>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4b51      	ldr	r3, [pc, #324]	; (8003728 <HAL_COMP_Init+0x2b0>)
 80035e4:	2180      	movs	r1, #128	; 0x80
 80035e6:	01c9      	lsls	r1, r1, #7
 80035e8:	430a      	orrs	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80035ec:	4b4e      	ldr	r3, [pc, #312]	; (8003728 <HAL_COMP_Init+0x2b0>)
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	4b4d      	ldr	r3, [pc, #308]	; (8003728 <HAL_COMP_Init+0x2b0>)
 80035f2:	2180      	movs	r1, #128	; 0x80
 80035f4:	01c9      	lsls	r1, r1, #7
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
        break;
 80035fa:	e00c      	b.n	8003616 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80035fc:	4b4a      	ldr	r3, [pc, #296]	; (8003728 <HAL_COMP_Init+0x2b0>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b49      	ldr	r3, [pc, #292]	; (8003728 <HAL_COMP_Init+0x2b0>)
 8003602:	494b      	ldr	r1, [pc, #300]	; (8003730 <HAL_COMP_Init+0x2b8>)
 8003604:	400a      	ands	r2, r1
 8003606:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003608:	4b47      	ldr	r3, [pc, #284]	; (8003728 <HAL_COMP_Init+0x2b0>)
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	4b46      	ldr	r3, [pc, #280]	; (8003728 <HAL_COMP_Init+0x2b0>)
 800360e:	4948      	ldr	r1, [pc, #288]	; (8003730 <HAL_COMP_Init+0x2b8>)
 8003610:	400a      	ands	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
        break;
 8003614:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2230      	movs	r2, #48	; 0x30
 800361e:	4013      	ands	r3, r2
 8003620:	d016      	beq.n	8003650 <HAL_COMP_Init+0x1d8>
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d113      	bne.n	8003650 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003628:	4b42      	ldr	r3, [pc, #264]	; (8003734 <HAL_COMP_Init+0x2bc>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4942      	ldr	r1, [pc, #264]	; (8003738 <HAL_COMP_Init+0x2c0>)
 800362e:	0018      	movs	r0, r3
 8003630:	f7fc fd68 	bl	8000104 <__udivsi3>
 8003634:	0003      	movs	r3, r0
 8003636:	001a      	movs	r2, r3
 8003638:	0013      	movs	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	189b      	adds	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003642:	e002      	b.n	800364a <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3b01      	subs	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f9      	bne.n	8003644 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a34      	ldr	r2, [pc, #208]	; (8003728 <HAL_COMP_Init+0x2b0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d102      	bne.n	8003660 <HAL_COMP_Init+0x1e8>
 800365a:	2380      	movs	r3, #128	; 0x80
 800365c:	029b      	lsls	r3, r3, #10
 800365e:	e001      	b.n	8003664 <HAL_COMP_Init+0x1ec>
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	02db      	lsls	r3, r3, #11
 8003664:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2203      	movs	r2, #3
 800366c:	4013      	ands	r3, r2
 800366e:	d040      	beq.n	80036f2 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	2210      	movs	r2, #16
 8003676:	4013      	ands	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	0018      	movs	r0, r3
 800367e:	f7ff fe9b 	bl	80033b8 <LL_EXTI_EnableRisingTrig_0_31>
 8003682:	e003      	b.n	800368c <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	0018      	movs	r0, r3
 8003688:	f7ff fea6 	bl	80033d8 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	2220      	movs	r2, #32
 8003692:	4013      	ands	r3, r2
 8003694:	d004      	beq.n	80036a0 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	0018      	movs	r0, r3
 800369a:	f7ff feaf 	bl	80033fc <LL_EXTI_EnableFallingTrig_0_31>
 800369e:	e003      	b.n	80036a8 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	0018      	movs	r0, r3
 80036a4:	f7ff feba 	bl	800341c <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	0018      	movs	r0, r3
 80036ac:	f7ff fed6 	bl	800345c <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	0018      	movs	r0, r3
 80036b4:	f7ff fec4 	bl	8003440 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	2202      	movs	r2, #2
 80036be:	4013      	ands	r3, r2
 80036c0:	d004      	beq.n	80036cc <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	0018      	movs	r0, r3
 80036c6:	f7ff fe51 	bl	800336c <LL_EXTI_EnableEvent_0_31>
 80036ca:	e003      	b.n	80036d4 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	0018      	movs	r0, r3
 80036d0:	f7ff fe5e 	bl	8003390 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	2201      	movs	r2, #1
 80036da:	4013      	ands	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	0018      	movs	r0, r3
 80036e2:	f7ff fe1d 	bl	8003320 <LL_EXTI_EnableIT_0_31>
 80036e6:	e00c      	b.n	8003702 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff fe2a 	bl	8003344 <LL_EXTI_DisableIT_0_31>
 80036f0:	e007      	b.n	8003702 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f7ff fe4b 	bl	8003390 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7ff fe21 	bl	8003344 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2229      	movs	r2, #41	; 0x29
 8003706:	5c9b      	ldrb	r3, [r3, r2]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2229      	movs	r2, #41	; 0x29
 8003712:	2101      	movs	r1, #1
 8003714:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003716:	231f      	movs	r3, #31
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	781b      	ldrb	r3, [r3, #0]
}
 800371c:	0018      	movs	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	b008      	add	sp, #32
 8003722:	bd80      	pop	{r7, pc}
 8003724:	fe00740f 	.word	0xfe00740f
 8003728:	40010200 	.word	0x40010200
 800372c:	fffff7ff 	.word	0xfffff7ff
 8003730:	ffffbfff 	.word	0xffffbfff
 8003734:	20003134 	.word	0x20003134
 8003738:	00030d40 	.word	0x00030d40

0800373c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003744:	2300      	movs	r3, #0
 8003746:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003748:	210f      	movs	r1, #15
 800374a:	187b      	adds	r3, r7, r1
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8003756:	187b      	adds	r3, r7, r1
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
 800375c:	e034      	b.n	80037c8 <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	0fdb      	lsrs	r3, r3, #31
 8003766:	07da      	lsls	r2, r3, #31
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	061b      	lsls	r3, r3, #24
 800376c:	429a      	cmp	r2, r3
 800376e:	d104      	bne.n	800377a <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8003770:	230f      	movs	r3, #15
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	2201      	movs	r2, #1
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	e026      	b.n	80037c8 <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2229      	movs	r2, #41	; 0x29
 800377e:	5c9b      	ldrb	r3, [r3, r2]
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d11c      	bne.n	80037c0 <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2101      	movs	r1, #1
 8003792:	430a      	orrs	r2, r1
 8003794:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2229      	movs	r2, #41	; 0x29
 800379a:	2102      	movs	r1, #2
 800379c:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800379e:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <HAL_COMP_Start+0x9c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	490e      	ldr	r1, [pc, #56]	; (80037dc <HAL_COMP_Start+0xa0>)
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7fc fcad 	bl	8000104 <__udivsi3>
 80037aa:	0003      	movs	r3, r0
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80037b0:	e002      	b.n	80037b8 <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f9      	bne.n	80037b2 <HAL_COMP_Start+0x76>
 80037be:	e003      	b.n	80037c8 <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037c0:	230f      	movs	r3, #15
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	2201      	movs	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80037c8:	230f      	movs	r3, #15
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	781b      	ldrb	r3, [r3, #0]
}
 80037ce:	0018      	movs	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b004      	add	sp, #16
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	20003134 	.word	0x20003134
 80037dc:	00030d40 	.word	0x00030d40

080037e0 <__NVIC_EnableIRQ>:
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	0002      	movs	r2, r0
 80037e8:	1dfb      	adds	r3, r7, #7
 80037ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037ec:	1dfb      	adds	r3, r7, #7
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b7f      	cmp	r3, #127	; 0x7f
 80037f2:	d809      	bhi.n	8003808 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037f4:	1dfb      	adds	r3, r7, #7
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	001a      	movs	r2, r3
 80037fa:	231f      	movs	r3, #31
 80037fc:	401a      	ands	r2, r3
 80037fe:	4b04      	ldr	r3, [pc, #16]	; (8003810 <__NVIC_EnableIRQ+0x30>)
 8003800:	2101      	movs	r1, #1
 8003802:	4091      	lsls	r1, r2
 8003804:	000a      	movs	r2, r1
 8003806:	601a      	str	r2, [r3, #0]
}
 8003808:	46c0      	nop			; (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}
 8003810:	e000e100 	.word	0xe000e100

08003814 <__NVIC_SetPriority>:
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	0002      	movs	r2, r0
 800381c:	6039      	str	r1, [r7, #0]
 800381e:	1dfb      	adds	r3, r7, #7
 8003820:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003822:	1dfb      	adds	r3, r7, #7
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b7f      	cmp	r3, #127	; 0x7f
 8003828:	d828      	bhi.n	800387c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800382a:	4a2f      	ldr	r2, [pc, #188]	; (80038e8 <__NVIC_SetPriority+0xd4>)
 800382c:	1dfb      	adds	r3, r7, #7
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	b25b      	sxtb	r3, r3
 8003832:	089b      	lsrs	r3, r3, #2
 8003834:	33c0      	adds	r3, #192	; 0xc0
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	589b      	ldr	r3, [r3, r2]
 800383a:	1dfa      	adds	r2, r7, #7
 800383c:	7812      	ldrb	r2, [r2, #0]
 800383e:	0011      	movs	r1, r2
 8003840:	2203      	movs	r2, #3
 8003842:	400a      	ands	r2, r1
 8003844:	00d2      	lsls	r2, r2, #3
 8003846:	21ff      	movs	r1, #255	; 0xff
 8003848:	4091      	lsls	r1, r2
 800384a:	000a      	movs	r2, r1
 800384c:	43d2      	mvns	r2, r2
 800384e:	401a      	ands	r2, r3
 8003850:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	019b      	lsls	r3, r3, #6
 8003856:	22ff      	movs	r2, #255	; 0xff
 8003858:	401a      	ands	r2, r3
 800385a:	1dfb      	adds	r3, r7, #7
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	0018      	movs	r0, r3
 8003860:	2303      	movs	r3, #3
 8003862:	4003      	ands	r3, r0
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003868:	481f      	ldr	r0, [pc, #124]	; (80038e8 <__NVIC_SetPriority+0xd4>)
 800386a:	1dfb      	adds	r3, r7, #7
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	b25b      	sxtb	r3, r3
 8003870:	089b      	lsrs	r3, r3, #2
 8003872:	430a      	orrs	r2, r1
 8003874:	33c0      	adds	r3, #192	; 0xc0
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	501a      	str	r2, [r3, r0]
}
 800387a:	e031      	b.n	80038e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800387c:	4a1b      	ldr	r2, [pc, #108]	; (80038ec <__NVIC_SetPriority+0xd8>)
 800387e:	1dfb      	adds	r3, r7, #7
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	0019      	movs	r1, r3
 8003884:	230f      	movs	r3, #15
 8003886:	400b      	ands	r3, r1
 8003888:	3b08      	subs	r3, #8
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	3306      	adds	r3, #6
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	18d3      	adds	r3, r2, r3
 8003892:	3304      	adds	r3, #4
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	1dfa      	adds	r2, r7, #7
 8003898:	7812      	ldrb	r2, [r2, #0]
 800389a:	0011      	movs	r1, r2
 800389c:	2203      	movs	r2, #3
 800389e:	400a      	ands	r2, r1
 80038a0:	00d2      	lsls	r2, r2, #3
 80038a2:	21ff      	movs	r1, #255	; 0xff
 80038a4:	4091      	lsls	r1, r2
 80038a6:	000a      	movs	r2, r1
 80038a8:	43d2      	mvns	r2, r2
 80038aa:	401a      	ands	r2, r3
 80038ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	019b      	lsls	r3, r3, #6
 80038b2:	22ff      	movs	r2, #255	; 0xff
 80038b4:	401a      	ands	r2, r3
 80038b6:	1dfb      	adds	r3, r7, #7
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	0018      	movs	r0, r3
 80038bc:	2303      	movs	r3, #3
 80038be:	4003      	ands	r3, r0
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038c4:	4809      	ldr	r0, [pc, #36]	; (80038ec <__NVIC_SetPriority+0xd8>)
 80038c6:	1dfb      	adds	r3, r7, #7
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	001c      	movs	r4, r3
 80038cc:	230f      	movs	r3, #15
 80038ce:	4023      	ands	r3, r4
 80038d0:	3b08      	subs	r3, #8
 80038d2:	089b      	lsrs	r3, r3, #2
 80038d4:	430a      	orrs	r2, r1
 80038d6:	3306      	adds	r3, #6
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	18c3      	adds	r3, r0, r3
 80038dc:	3304      	adds	r3, #4
 80038de:	601a      	str	r2, [r3, #0]
}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b003      	add	sp, #12
 80038e6:	bd90      	pop	{r4, r7, pc}
 80038e8:	e000e100 	.word	0xe000e100
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	1e5a      	subs	r2, r3, #1
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	045b      	lsls	r3, r3, #17
 8003900:	429a      	cmp	r2, r3
 8003902:	d301      	bcc.n	8003908 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003904:	2301      	movs	r3, #1
 8003906:	e010      	b.n	800392a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <SysTick_Config+0x44>)
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	3a01      	subs	r2, #1
 800390e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003910:	2301      	movs	r3, #1
 8003912:	425b      	negs	r3, r3
 8003914:	2103      	movs	r1, #3
 8003916:	0018      	movs	r0, r3
 8003918:	f7ff ff7c 	bl	8003814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <SysTick_Config+0x44>)
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003922:	4b04      	ldr	r3, [pc, #16]	; (8003934 <SysTick_Config+0x44>)
 8003924:	2207      	movs	r2, #7
 8003926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003928:	2300      	movs	r3, #0
}
 800392a:	0018      	movs	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	b002      	add	sp, #8
 8003930:	bd80      	pop	{r7, pc}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	e000e010 	.word	0xe000e010

08003938 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	210f      	movs	r1, #15
 8003944:	187b      	adds	r3, r7, r1
 8003946:	1c02      	adds	r2, r0, #0
 8003948:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	187b      	adds	r3, r7, r1
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	b25b      	sxtb	r3, r3
 8003952:	0011      	movs	r1, r2
 8003954:	0018      	movs	r0, r3
 8003956:	f7ff ff5d 	bl	8003814 <__NVIC_SetPriority>
}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	46bd      	mov	sp, r7
 800395e:	b004      	add	sp, #16
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	0002      	movs	r2, r0
 800396a:	1dfb      	adds	r3, r7, #7
 800396c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800396e:	1dfb      	adds	r3, r7, #7
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	b25b      	sxtb	r3, r3
 8003974:	0018      	movs	r0, r3
 8003976:	f7ff ff33 	bl	80037e0 <__NVIC_EnableIRQ>
}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	46bd      	mov	sp, r7
 800397e:	b002      	add	sp, #8
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	0018      	movs	r0, r3
 800398e:	f7ff ffaf 	bl	80038f0 <SysTick_Config>
 8003992:	0003      	movs	r3, r0
}
 8003994:	0018      	movs	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	b002      	add	sp, #8
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e077      	b.n	8003a9e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a3d      	ldr	r2, [pc, #244]	; (8003aa8 <HAL_DMA_Init+0x10c>)
 80039b4:	4694      	mov	ip, r2
 80039b6:	4463      	add	r3, ip
 80039b8:	2114      	movs	r1, #20
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7fc fba2 	bl	8000104 <__udivsi3>
 80039c0:	0003      	movs	r3, r0
 80039c2:	009a      	lsls	r2, r3, #2
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2225      	movs	r2, #37	; 0x25
 80039cc:	2102      	movs	r1, #2
 80039ce:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4934      	ldr	r1, [pc, #208]	; (8003aac <HAL_DMA_Init+0x110>)
 80039dc:	400a      	ands	r2, r1
 80039de:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6819      	ldr	r1, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 fa37 	bl	8003e8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	01db      	lsls	r3, r3, #7
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d102      	bne.n	8003a30 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a38:	213f      	movs	r1, #63	; 0x3f
 8003a3a:	400a      	ands	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a46:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d011      	beq.n	8003a74 <HAL_DMA_Init+0xd8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d80d      	bhi.n	8003a74 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 fa42 	bl	8003ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003a70:	605a      	str	r2, [r3, #4]
 8003a72:	e008      	b.n	8003a86 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2225      	movs	r2, #37	; 0x25
 8003a90:	2101      	movs	r1, #1
 8003a92:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	; 0x24
 8003a98:	2100      	movs	r1, #0
 8003a9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b002      	add	sp, #8
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	bffdfff8 	.word	0xbffdfff8
 8003aac:	ffff800f 	.word	0xffff800f

08003ab0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003abe:	2317      	movs	r3, #23
 8003ac0:	18fb      	adds	r3, r7, r3
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2224      	movs	r2, #36	; 0x24
 8003aca:	5c9b      	ldrb	r3, [r3, r2]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_DMA_Start_IT+0x24>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e06f      	b.n	8003bb4 <HAL_DMA_Start_IT+0x104>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2224      	movs	r2, #36	; 0x24
 8003ad8:	2101      	movs	r1, #1
 8003ada:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2225      	movs	r2, #37	; 0x25
 8003ae0:	5c9b      	ldrb	r3, [r3, r2]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d157      	bne.n	8003b98 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2225      	movs	r2, #37	; 0x25
 8003aec:	2102      	movs	r1, #2
 8003aee:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2101      	movs	r1, #1
 8003b02:	438a      	bics	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f97d 	bl	8003e0c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	210e      	movs	r1, #14
 8003b26:	430a      	orrs	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e00f      	b.n	8003b4c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2104      	movs	r1, #4
 8003b38:	438a      	bics	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	210a      	movs	r1, #10
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	025b      	lsls	r3, r3, #9
 8003b56:	4013      	ands	r3, r2
 8003b58:	d008      	beq.n	8003b6c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	0049      	lsls	r1, r1, #1
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7e:	2180      	movs	r1, #128	; 0x80
 8003b80:	0049      	lsls	r1, r1, #1
 8003b82:	430a      	orrs	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2101      	movs	r1, #1
 8003b92:	430a      	orrs	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e00a      	b.n	8003bae <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2280      	movs	r2, #128	; 0x80
 8003b9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2224      	movs	r2, #36	; 0x24
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003ba6:	2317      	movs	r3, #23
 8003ba8:	18fb      	adds	r3, r7, r3
 8003baa:	2201      	movs	r2, #1
 8003bac:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003bae:	2317      	movs	r3, #23
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	781b      	ldrb	r3, [r3, #0]
}
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b006      	add	sp, #24
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc4:	210f      	movs	r1, #15
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2225      	movs	r2, #37	; 0x25
 8003bd0:	5c9b      	ldrb	r3, [r3, r2]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d006      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2204      	movs	r2, #4
 8003bdc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003bde:	187b      	adds	r3, r7, r1
 8003be0:	2201      	movs	r2, #1
 8003be2:	701a      	strb	r2, [r3, #0]
 8003be4:	e049      	b.n	8003c7a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	210e      	movs	r1, #14
 8003bf2:	438a      	bics	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2101      	movs	r1, #1
 8003c02:	438a      	bics	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	491d      	ldr	r1, [pc, #116]	; (8003c88 <HAL_DMA_Abort_IT+0xcc>)
 8003c12:	400a      	ands	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003c16:	4b1d      	ldr	r3, [pc, #116]	; (8003c8c <HAL_DMA_Abort_IT+0xd0>)
 8003c18:	6859      	ldr	r1, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	221c      	movs	r2, #28
 8003c20:	4013      	ands	r3, r2
 8003c22:	2201      	movs	r2, #1
 8003c24:	409a      	lsls	r2, r3
 8003c26:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <HAL_DMA_Abort_IT+0xd0>)
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c34:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00c      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	490f      	ldr	r1, [pc, #60]	; (8003c88 <HAL_DMA_Abort_IT+0xcc>)
 8003c4a:	400a      	ands	r2, r1
 8003c4c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003c56:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2225      	movs	r2, #37	; 0x25
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2224      	movs	r2, #36	; 0x24
 8003c64:	2100      	movs	r1, #0
 8003c66:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d004      	beq.n	8003c7a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	0010      	movs	r0, r2
 8003c78:	4798      	blx	r3
    }
  }
  return status;
 8003c7a:	230f      	movs	r3, #15
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	781b      	ldrb	r3, [r3, #0]
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b004      	add	sp, #16
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	fffffeff 	.word	0xfffffeff
 8003c8c:	40020000 	.word	0x40020000

08003c90 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003c98:	4b55      	ldr	r3, [pc, #340]	; (8003df0 <HAL_DMA_IRQHandler+0x160>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	221c      	movs	r2, #28
 8003cac:	4013      	ands	r3, r2
 8003cae:	2204      	movs	r2, #4
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	0013      	movs	r3, r2
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d027      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x7a>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d023      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d107      	bne.n	8003cde <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2104      	movs	r1, #4
 8003cda:	438a      	bics	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003cde:	4b44      	ldr	r3, [pc, #272]	; (8003df0 <HAL_DMA_IRQHandler+0x160>)
 8003ce0:	6859      	ldr	r1, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	221c      	movs	r2, #28
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2204      	movs	r2, #4
 8003cec:	409a      	lsls	r2, r3
 8003cee:	4b40      	ldr	r3, [pc, #256]	; (8003df0 <HAL_DMA_IRQHandler+0x160>)
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d100      	bne.n	8003cfe <HAL_DMA_IRQHandler+0x6e>
 8003cfc:	e073      	b.n	8003de6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	0010      	movs	r0, r2
 8003d06:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003d08:	e06d      	b.n	8003de6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	221c      	movs	r2, #28
 8003d10:	4013      	ands	r3, r2
 8003d12:	2202      	movs	r2, #2
 8003d14:	409a      	lsls	r2, r3
 8003d16:	0013      	movs	r3, r2
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d02e      	beq.n	8003d7c <HAL_DMA_IRQHandler+0xec>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2202      	movs	r2, #2
 8003d22:	4013      	ands	r3, r2
 8003d24:	d02a      	beq.n	8003d7c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d10b      	bne.n	8003d4a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	210a      	movs	r1, #10
 8003d3e:	438a      	bics	r2, r1
 8003d40:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2225      	movs	r2, #37	; 0x25
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003d4a:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <HAL_DMA_IRQHandler+0x160>)
 8003d4c:	6859      	ldr	r1, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	221c      	movs	r2, #28
 8003d54:	4013      	ands	r3, r2
 8003d56:	2202      	movs	r2, #2
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <HAL_DMA_IRQHandler+0x160>)
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2224      	movs	r2, #36	; 0x24
 8003d64:	2100      	movs	r1, #0
 8003d66:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d03a      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	0010      	movs	r0, r2
 8003d78:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003d7a:	e034      	b.n	8003de6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	221c      	movs	r2, #28
 8003d82:	4013      	ands	r3, r2
 8003d84:	2208      	movs	r2, #8
 8003d86:	409a      	lsls	r2, r3
 8003d88:	0013      	movs	r3, r2
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d02b      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x158>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2208      	movs	r2, #8
 8003d94:	4013      	ands	r3, r2
 8003d96:	d027      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	210e      	movs	r1, #14
 8003da4:	438a      	bics	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003da8:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <HAL_DMA_IRQHandler+0x160>)
 8003daa:	6859      	ldr	r1, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	221c      	movs	r2, #28
 8003db2:	4013      	ands	r3, r2
 8003db4:	2201      	movs	r2, #1
 8003db6:	409a      	lsls	r2, r3
 8003db8:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <HAL_DMA_IRQHandler+0x160>)
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2225      	movs	r2, #37	; 0x25
 8003dc8:	2101      	movs	r1, #1
 8003dca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2224      	movs	r2, #36	; 0x24
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	0010      	movs	r0, r2
 8003de4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	46c0      	nop			; (mov r8, r8)
}
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b004      	add	sp, #16
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40020000 	.word	0x40020000

08003df4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2225      	movs	r2, #37	; 0x25
 8003e00:	5c9b      	ldrb	r3, [r3, r2]
 8003e02:	b2db      	uxtb	r3, r3
}
 8003e04:	0018      	movs	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
 8003e18:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003e22:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003e34:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003e36:	4b14      	ldr	r3, [pc, #80]	; (8003e88 <DMA_SetConfig+0x7c>)
 8003e38:	6859      	ldr	r1, [r3, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	221c      	movs	r2, #28
 8003e40:	4013      	ands	r3, r2
 8003e42:	2201      	movs	r2, #1
 8003e44:	409a      	lsls	r2, r3
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <DMA_SetConfig+0x7c>)
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d108      	bne.n	8003e6e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e6c:	e007      	b.n	8003e7e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	60da      	str	r2, [r3, #12]
}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b004      	add	sp, #16
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	40020000 	.word	0x40020000

08003e8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	089b      	lsrs	r3, r3, #2
 8003e9a:	4a10      	ldr	r2, [pc, #64]	; (8003edc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003e9c:	4694      	mov	ip, r2
 8003e9e:	4463      	add	r3, ip
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	001a      	movs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	001a      	movs	r2, r3
 8003eae:	23ff      	movs	r3, #255	; 0xff
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	3b08      	subs	r3, #8
 8003eb4:	2114      	movs	r1, #20
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7fc f924 	bl	8000104 <__udivsi3>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a07      	ldr	r2, [pc, #28]	; (8003ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003ec4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	221f      	movs	r2, #31
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2201      	movs	r2, #1
 8003ece:	409a      	lsls	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003ed4:	46c0      	nop			; (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b004      	add	sp, #16
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	10008200 	.word	0x10008200
 8003ee0:	40020880 	.word	0x40020880

08003ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	223f      	movs	r2, #63	; 0x3f
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003efa:	4694      	mov	ip, r2
 8003efc:	4463      	add	r3, ip
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	001a      	movs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a07      	ldr	r2, [pc, #28]	; (8003f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	2203      	movs	r2, #3
 8003f12:	4013      	ands	r3, r2
 8003f14:	2201      	movs	r2, #1
 8003f16:	409a      	lsls	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003f1c:	46c0      	nop			; (mov r8, r8)
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b004      	add	sp, #16
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	1000823f 	.word	0x1000823f
 8003f28:	40020940 	.word	0x40020940

08003f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f3a:	e147      	b.n	80041cc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2101      	movs	r1, #1
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4091      	lsls	r1, r2
 8003f46:	000a      	movs	r2, r1
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d100      	bne.n	8003f54 <HAL_GPIO_Init+0x28>
 8003f52:	e138      	b.n	80041c6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d00b      	beq.n	8003f74 <HAL_GPIO_Init+0x48>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d007      	beq.n	8003f74 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f68:	2b11      	cmp	r3, #17
 8003f6a:	d003      	beq.n	8003f74 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b12      	cmp	r3, #18
 8003f72:	d130      	bne.n	8003fd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	2203      	movs	r2, #3
 8003f80:	409a      	lsls	r2, r3
 8003f82:	0013      	movs	r3, r2
 8003f84:	43da      	mvns	r2, r3
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	409a      	lsls	r2, r3
 8003f96:	0013      	movs	r3, r2
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003faa:	2201      	movs	r2, #1
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	0013      	movs	r3, r2
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	091b      	lsrs	r3, r3, #4
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	0013      	movs	r3, r2
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	0013      	movs	r3, r2
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	4013      	ands	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	0013      	movs	r3, r2
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_Init+0xea>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b12      	cmp	r3, #18
 8004014:	d123      	bne.n	800405e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	08da      	lsrs	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3208      	adds	r2, #8
 800401e:	0092      	lsls	r2, r2, #2
 8004020:	58d3      	ldr	r3, [r2, r3]
 8004022:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2207      	movs	r2, #7
 8004028:	4013      	ands	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	220f      	movs	r2, #15
 800402e:	409a      	lsls	r2, r3
 8004030:	0013      	movs	r3, r2
 8004032:	43da      	mvns	r2, r3
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	4013      	ands	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	691a      	ldr	r2, [r3, #16]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2107      	movs	r1, #7
 8004042:	400b      	ands	r3, r1
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	409a      	lsls	r2, r3
 8004048:	0013      	movs	r3, r2
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	08da      	lsrs	r2, r3, #3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3208      	adds	r2, #8
 8004058:	0092      	lsls	r2, r2, #2
 800405a:	6939      	ldr	r1, [r7, #16]
 800405c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	2203      	movs	r2, #3
 800406a:	409a      	lsls	r2, r3
 800406c:	0013      	movs	r3, r2
 800406e:	43da      	mvns	r2, r3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4013      	ands	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2203      	movs	r2, #3
 800407c:	401a      	ands	r2, r3
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	409a      	lsls	r2, r3
 8004084:	0013      	movs	r3, r2
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	2380      	movs	r3, #128	; 0x80
 8004098:	055b      	lsls	r3, r3, #21
 800409a:	4013      	ands	r3, r2
 800409c:	d100      	bne.n	80040a0 <HAL_GPIO_Init+0x174>
 800409e:	e092      	b.n	80041c6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80040a0:	4a50      	ldr	r2, [pc, #320]	; (80041e4 <HAL_GPIO_Init+0x2b8>)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	089b      	lsrs	r3, r3, #2
 80040a6:	3318      	adds	r3, #24
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	589b      	ldr	r3, [r3, r2]
 80040ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2203      	movs	r2, #3
 80040b2:	4013      	ands	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	220f      	movs	r2, #15
 80040b8:	409a      	lsls	r2, r3
 80040ba:	0013      	movs	r3, r2
 80040bc:	43da      	mvns	r2, r3
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4013      	ands	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	23a0      	movs	r3, #160	; 0xa0
 80040c8:	05db      	lsls	r3, r3, #23
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d013      	beq.n	80040f6 <HAL_GPIO_Init+0x1ca>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a45      	ldr	r2, [pc, #276]	; (80041e8 <HAL_GPIO_Init+0x2bc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00d      	beq.n	80040f2 <HAL_GPIO_Init+0x1c6>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a44      	ldr	r2, [pc, #272]	; (80041ec <HAL_GPIO_Init+0x2c0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d007      	beq.n	80040ee <HAL_GPIO_Init+0x1c2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a43      	ldr	r2, [pc, #268]	; (80041f0 <HAL_GPIO_Init+0x2c4>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d101      	bne.n	80040ea <HAL_GPIO_Init+0x1be>
 80040e6:	2303      	movs	r3, #3
 80040e8:	e006      	b.n	80040f8 <HAL_GPIO_Init+0x1cc>
 80040ea:	2305      	movs	r3, #5
 80040ec:	e004      	b.n	80040f8 <HAL_GPIO_Init+0x1cc>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e002      	b.n	80040f8 <HAL_GPIO_Init+0x1cc>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <HAL_GPIO_Init+0x1cc>
 80040f6:	2300      	movs	r3, #0
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	2103      	movs	r1, #3
 80040fc:	400a      	ands	r2, r1
 80040fe:	00d2      	lsls	r2, r2, #3
 8004100:	4093      	lsls	r3, r2
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004108:	4936      	ldr	r1, [pc, #216]	; (80041e4 <HAL_GPIO_Init+0x2b8>)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	089b      	lsrs	r3, r3, #2
 800410e:	3318      	adds	r3, #24
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004116:	4a33      	ldr	r2, [pc, #204]	; (80041e4 <HAL_GPIO_Init+0x2b8>)
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	58d3      	ldr	r3, [r2, r3]
 800411c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	43da      	mvns	r2, r3
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4013      	ands	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	025b      	lsls	r3, r3, #9
 8004130:	4013      	ands	r3, r2
 8004132:	d003      	beq.n	800413c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800413c:	4929      	ldr	r1, [pc, #164]	; (80041e4 <HAL_GPIO_Init+0x2b8>)
 800413e:	2280      	movs	r2, #128	; 0x80
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004144:	4a27      	ldr	r2, [pc, #156]	; (80041e4 <HAL_GPIO_Init+0x2b8>)
 8004146:	2384      	movs	r3, #132	; 0x84
 8004148:	58d3      	ldr	r3, [r2, r3]
 800414a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	43da      	mvns	r2, r3
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	4013      	ands	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	2380      	movs	r3, #128	; 0x80
 800415c:	029b      	lsls	r3, r3, #10
 800415e:	4013      	ands	r3, r2
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800416a:	491e      	ldr	r1, [pc, #120]	; (80041e4 <HAL_GPIO_Init+0x2b8>)
 800416c:	2284      	movs	r2, #132	; 0x84
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004172:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <HAL_GPIO_Init+0x2b8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	43da      	mvns	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4013      	ands	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	2380      	movs	r3, #128	; 0x80
 8004188:	035b      	lsls	r3, r3, #13
 800418a:	4013      	ands	r3, r2
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004196:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <HAL_GPIO_Init+0x2b8>)
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800419c:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <HAL_GPIO_Init+0x2b8>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	43da      	mvns	r2, r3
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	039b      	lsls	r3, r3, #14
 80041b4:	4013      	ands	r3, r2
 80041b6:	d003      	beq.n	80041c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041c0:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <HAL_GPIO_Init+0x2b8>)
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	3301      	adds	r3, #1
 80041ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	40da      	lsrs	r2, r3
 80041d4:	1e13      	subs	r3, r2, #0
 80041d6:	d000      	beq.n	80041da <HAL_GPIO_Init+0x2ae>
 80041d8:	e6b0      	b.n	8003f3c <HAL_GPIO_Init+0x10>
  }
}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	46c0      	nop			; (mov r8, r8)
 80041de:	46bd      	mov	sp, r7
 80041e0:	b006      	add	sp, #24
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40021800 	.word	0x40021800
 80041e8:	50000400 	.word	0x50000400
 80041ec:	50000800 	.word	0x50000800
 80041f0:	50000c00 	.word	0x50000c00

080041f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e082      	b.n	800430c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2241      	movs	r2, #65	; 0x41
 800420a:	5c9b      	ldrb	r3, [r3, r2]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d107      	bne.n	8004222 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2240      	movs	r2, #64	; 0x40
 8004216:	2100      	movs	r1, #0
 8004218:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	0018      	movs	r0, r3
 800421e:	f7fe fba1 	bl	8002964 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2241      	movs	r2, #65	; 0x41
 8004226:	2124      	movs	r1, #36	; 0x24
 8004228:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2101      	movs	r1, #1
 8004236:	438a      	bics	r2, r1
 8004238:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4934      	ldr	r1, [pc, #208]	; (8004314 <HAL_I2C_Init+0x120>)
 8004244:	400a      	ands	r2, r1
 8004246:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4931      	ldr	r1, [pc, #196]	; (8004318 <HAL_I2C_Init+0x124>)
 8004254:	400a      	ands	r2, r1
 8004256:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d108      	bne.n	8004272 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2180      	movs	r1, #128	; 0x80
 800426a:	0209      	lsls	r1, r1, #8
 800426c:	430a      	orrs	r2, r1
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	e007      	b.n	8004282 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2184      	movs	r1, #132	; 0x84
 800427c:	0209      	lsls	r1, r1, #8
 800427e:	430a      	orrs	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d104      	bne.n	8004294 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2280      	movs	r2, #128	; 0x80
 8004290:	0112      	lsls	r2, r2, #4
 8004292:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	491f      	ldr	r1, [pc, #124]	; (800431c <HAL_I2C_Init+0x128>)
 80042a0:	430a      	orrs	r2, r1
 80042a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	491a      	ldr	r1, [pc, #104]	; (8004318 <HAL_I2C_Init+0x124>)
 80042b0:	400a      	ands	r2, r1
 80042b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	431a      	orrs	r2, r3
 80042be:	0011      	movs	r1, r2
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	021a      	lsls	r2, r3, #8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69d9      	ldr	r1, [r3, #28]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1a      	ldr	r2, [r3, #32]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2101      	movs	r1, #1
 80042ea:	430a      	orrs	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2241      	movs	r2, #65	; 0x41
 80042f8:	2120      	movs	r1, #32
 80042fa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2242      	movs	r2, #66	; 0x42
 8004306:	2100      	movs	r1, #0
 8004308:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	0018      	movs	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	b002      	add	sp, #8
 8004312:	bd80      	pop	{r7, pc}
 8004314:	f0ffffff 	.word	0xf0ffffff
 8004318:	ffff7fff 	.word	0xffff7fff
 800431c:	02008000 	.word	0x02008000

08004320 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	0008      	movs	r0, r1
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	0019      	movs	r1, r3
 800432e:	230a      	movs	r3, #10
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	1c02      	adds	r2, r0, #0
 8004334:	801a      	strh	r2, [r3, #0]
 8004336:	2308      	movs	r3, #8
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	1c0a      	adds	r2, r1, #0
 800433c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2241      	movs	r2, #65	; 0x41
 8004342:	5c9b      	ldrb	r3, [r3, r2]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b20      	cmp	r3, #32
 8004348:	d000      	beq.n	800434c <HAL_I2C_Master_Transmit+0x2c>
 800434a:	e0e7      	b.n	800451c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2240      	movs	r2, #64	; 0x40
 8004350:	5c9b      	ldrb	r3, [r3, r2]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_I2C_Master_Transmit+0x3a>
 8004356:	2302      	movs	r3, #2
 8004358:	e0e1      	b.n	800451e <HAL_I2C_Master_Transmit+0x1fe>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2240      	movs	r2, #64	; 0x40
 800435e:	2101      	movs	r1, #1
 8004360:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004362:	f7fe ff99 	bl	8003298 <HAL_GetTick>
 8004366:	0003      	movs	r3, r0
 8004368:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	0219      	lsls	r1, r3, #8
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	2319      	movs	r3, #25
 8004376:	2201      	movs	r2, #1
 8004378:	f000 fe76 	bl	8005068 <I2C_WaitOnFlagUntilTimeout>
 800437c:	1e03      	subs	r3, r0, #0
 800437e:	d001      	beq.n	8004384 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0cc      	b.n	800451e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2241      	movs	r2, #65	; 0x41
 8004388:	2121      	movs	r1, #33	; 0x21
 800438a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2242      	movs	r2, #66	; 0x42
 8004390:	2110      	movs	r1, #16
 8004392:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2208      	movs	r2, #8
 80043a4:	18ba      	adds	r2, r7, r2
 80043a6:	8812      	ldrh	r2, [r2, #0]
 80043a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2bff      	cmp	r3, #255	; 0xff
 80043b8:	d911      	bls.n	80043de <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	22ff      	movs	r2, #255	; 0xff
 80043be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	045c      	lsls	r4, r3, #17
 80043ca:	230a      	movs	r3, #10
 80043cc:	18fb      	adds	r3, r7, r3
 80043ce:	8819      	ldrh	r1, [r3, #0]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	4b55      	ldr	r3, [pc, #340]	; (8004528 <HAL_I2C_Master_Transmit+0x208>)
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	0023      	movs	r3, r4
 80043d8:	f000 ff66 	bl	80052a8 <I2C_TransferConfig>
 80043dc:	e075      	b.n	80044ca <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	049c      	lsls	r4, r3, #18
 80043f2:	230a      	movs	r3, #10
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	8819      	ldrh	r1, [r3, #0]
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	4b4b      	ldr	r3, [pc, #300]	; (8004528 <HAL_I2C_Master_Transmit+0x208>)
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	0023      	movs	r3, r4
 8004400:	f000 ff52 	bl	80052a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004404:	e061      	b.n	80044ca <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	0018      	movs	r0, r3
 800440e:	f000 fe6a 	bl	80050e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004412:	1e03      	subs	r3, r0, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e081      	b.n	800451e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	781a      	ldrb	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d03a      	beq.n	80044ca <HAL_I2C_Master_Transmit+0x1aa>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	d136      	bne.n	80044ca <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800445c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	0013      	movs	r3, r2
 8004466:	2200      	movs	r2, #0
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	f000 fdfd 	bl	8005068 <I2C_WaitOnFlagUntilTimeout>
 800446e:	1e03      	subs	r3, r0, #0
 8004470:	d001      	beq.n	8004476 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e053      	b.n	800451e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447a:	b29b      	uxth	r3, r3
 800447c:	2bff      	cmp	r3, #255	; 0xff
 800447e:	d911      	bls.n	80044a4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	22ff      	movs	r2, #255	; 0xff
 8004484:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448a:	b2da      	uxtb	r2, r3
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	045c      	lsls	r4, r3, #17
 8004490:	230a      	movs	r3, #10
 8004492:	18fb      	adds	r3, r7, r3
 8004494:	8819      	ldrh	r1, [r3, #0]
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	2300      	movs	r3, #0
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	0023      	movs	r3, r4
 800449e:	f000 ff03 	bl	80052a8 <I2C_TransferConfig>
 80044a2:	e012      	b.n	80044ca <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	2380      	movs	r3, #128	; 0x80
 80044b6:	049c      	lsls	r4, r3, #18
 80044b8:	230a      	movs	r3, #10
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	8819      	ldrh	r1, [r3, #0]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	2300      	movs	r3, #0
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	0023      	movs	r3, r4
 80044c6:	f000 feef 	bl	80052a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d198      	bne.n	8004406 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	0018      	movs	r0, r3
 80044dc:	f000 fe42 	bl	8005164 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044e0:	1e03      	subs	r3, r0, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e01a      	b.n	800451e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2220      	movs	r2, #32
 80044ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	490c      	ldr	r1, [pc, #48]	; (800452c <HAL_I2C_Master_Transmit+0x20c>)
 80044fc:	400a      	ands	r2, r1
 80044fe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2241      	movs	r2, #65	; 0x41
 8004504:	2120      	movs	r1, #32
 8004506:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2242      	movs	r2, #66	; 0x42
 800450c:	2100      	movs	r1, #0
 800450e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2240      	movs	r2, #64	; 0x40
 8004514:	2100      	movs	r1, #0
 8004516:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	e000      	b.n	800451e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
  }
}
 800451e:	0018      	movs	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	b007      	add	sp, #28
 8004524:	bd90      	pop	{r4, r7, pc}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	80002000 	.word	0x80002000
 800452c:	fe00e800 	.word	0xfe00e800

08004530 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	68f9      	ldr	r1, [r7, #12]
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	4798      	blx	r3
  }
}
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	46bd      	mov	sp, r7
 8004560:	b004      	add	sp, #16
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	0a1b      	lsrs	r3, r3, #8
 8004580:	001a      	movs	r2, r3
 8004582:	2301      	movs	r3, #1
 8004584:	4013      	ands	r3, r2
 8004586:	d010      	beq.n	80045aa <HAL_I2C_ER_IRQHandler+0x46>
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	09db      	lsrs	r3, r3, #7
 800458c:	001a      	movs	r2, r3
 800458e:	2301      	movs	r3, #1
 8004590:	4013      	ands	r3, r2
 8004592:	d00a      	beq.n	80045aa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004598:	2201      	movs	r2, #1
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2280      	movs	r2, #128	; 0x80
 80045a6:	0052      	lsls	r2, r2, #1
 80045a8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	0a9b      	lsrs	r3, r3, #10
 80045ae:	001a      	movs	r2, r3
 80045b0:	2301      	movs	r3, #1
 80045b2:	4013      	ands	r3, r2
 80045b4:	d010      	beq.n	80045d8 <HAL_I2C_ER_IRQHandler+0x74>
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	09db      	lsrs	r3, r3, #7
 80045ba:	001a      	movs	r2, r3
 80045bc:	2301      	movs	r3, #1
 80045be:	4013      	ands	r3, r2
 80045c0:	d00a      	beq.n	80045d8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	2208      	movs	r2, #8
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2280      	movs	r2, #128	; 0x80
 80045d4:	00d2      	lsls	r2, r2, #3
 80045d6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	0a5b      	lsrs	r3, r3, #9
 80045dc:	001a      	movs	r2, r3
 80045de:	2301      	movs	r3, #1
 80045e0:	4013      	ands	r3, r2
 80045e2:	d010      	beq.n	8004606 <HAL_I2C_ER_IRQHandler+0xa2>
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	09db      	lsrs	r3, r3, #7
 80045e8:	001a      	movs	r2, r3
 80045ea:	2301      	movs	r3, #1
 80045ec:	4013      	ands	r3, r2
 80045ee:	d00a      	beq.n	8004606 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f4:	2202      	movs	r2, #2
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2280      	movs	r2, #128	; 0x80
 8004602:	0092      	lsls	r2, r2, #2
 8004604:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	220b      	movs	r2, #11
 8004610:	4013      	ands	r3, r2
 8004612:	d005      	beq.n	8004620 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	0011      	movs	r1, r2
 800461a:	0018      	movs	r0, r3
 800461c:	f000 fbd8 	bl	8004dd0 <I2C_ITError>
  }
}
 8004620:	46c0      	nop			; (mov r8, r8)
 8004622:	46bd      	mov	sp, r7
 8004624:	b006      	add	sp, #24
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004630:	46c0      	nop			; (mov r8, r8)
 8004632:	46bd      	mov	sp, r7
 8004634:	b002      	add	sp, #8
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004640:	46c0      	nop			; (mov r8, r8)
 8004642:	46bd      	mov	sp, r7
 8004644:	b002      	add	sp, #8
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	0008      	movs	r0, r1
 8004652:	0011      	movs	r1, r2
 8004654:	1cfb      	adds	r3, r7, #3
 8004656:	1c02      	adds	r2, r0, #0
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	003b      	movs	r3, r7
 800465c:	1c0a      	adds	r2, r1, #0
 800465e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004660:	46c0      	nop			; (mov r8, r8)
 8004662:	46bd      	mov	sp, r7
 8004664:	b002      	add	sp, #8
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	46bd      	mov	sp, r7
 8004674:	b002      	add	sp, #8
 8004676:	bd80      	pop	{r7, pc}

08004678 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004680:	46c0      	nop			; (mov r8, r8)
 8004682:	46bd      	mov	sp, r7
 8004684:	b002      	add	sp, #8
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004690:	46c0      	nop			; (mov r8, r8)
 8004692:	46bd      	mov	sp, r7
 8004694:	b002      	add	sp, #8
 8004696:	bd80      	pop	{r7, pc}

08004698 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2240      	movs	r2, #64	; 0x40
 80046b2:	5c9b      	ldrb	r3, [r3, r2]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <I2C_Slave_ISR_IT+0x24>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e0fa      	b.n	80048b2 <I2C_Slave_ISR_IT+0x21a>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2240      	movs	r2, #64	; 0x40
 80046c0:	2101      	movs	r1, #1
 80046c2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	095b      	lsrs	r3, r3, #5
 80046c8:	001a      	movs	r2, r3
 80046ca:	2301      	movs	r3, #1
 80046cc:	4013      	ands	r3, r2
 80046ce:	d00b      	beq.n	80046e8 <I2C_Slave_ISR_IT+0x50>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	001a      	movs	r2, r3
 80046d6:	2301      	movs	r3, #1
 80046d8:	4013      	ands	r3, r2
 80046da:	d005      	beq.n	80046e8 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	0011      	movs	r1, r2
 80046e2:	0018      	movs	r0, r3
 80046e4:	f000 f9f6 	bl	8004ad4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	091b      	lsrs	r3, r3, #4
 80046ec:	001a      	movs	r2, r3
 80046ee:	2301      	movs	r3, #1
 80046f0:	4013      	ands	r3, r2
 80046f2:	d054      	beq.n	800479e <I2C_Slave_ISR_IT+0x106>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	001a      	movs	r2, r3
 80046fa:	2301      	movs	r3, #1
 80046fc:	4013      	ands	r3, r2
 80046fe:	d04e      	beq.n	800479e <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d12d      	bne.n	8004766 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2241      	movs	r2, #65	; 0x41
 800470e:	5c9b      	ldrb	r3, [r3, r2]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b28      	cmp	r3, #40	; 0x28
 8004714:	d10b      	bne.n	800472e <I2C_Slave_ISR_IT+0x96>
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	049b      	lsls	r3, r3, #18
 800471c:	429a      	cmp	r2, r3
 800471e:	d106      	bne.n	800472e <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	0011      	movs	r1, r2
 8004726:	0018      	movs	r0, r3
 8004728:	f000 faf8 	bl	8004d1c <I2C_ITListenCplt>
 800472c:	e036      	b.n	800479c <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2241      	movs	r2, #65	; 0x41
 8004732:	5c9b      	ldrb	r3, [r3, r2]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b29      	cmp	r3, #41	; 0x29
 8004738:	d110      	bne.n	800475c <I2C_Slave_ISR_IT+0xc4>
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	4a5f      	ldr	r2, [pc, #380]	; (80048bc <I2C_Slave_ISR_IT+0x224>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00c      	beq.n	800475c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2210      	movs	r2, #16
 8004748:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	0018      	movs	r0, r3
 800474e:	f000 fc4a 	bl	8004fe6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	0018      	movs	r0, r3
 8004756:	f000 f957 	bl	8004a08 <I2C_ITSlaveSeqCplt>
 800475a:	e01f      	b.n	800479c <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2210      	movs	r2, #16
 8004762:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004764:	e09d      	b.n	80048a2 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2210      	movs	r2, #16
 800476c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004772:	2204      	movs	r2, #4
 8004774:	431a      	orrs	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <I2C_Slave_ISR_IT+0xf4>
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	2380      	movs	r3, #128	; 0x80
 8004784:	045b      	lsls	r3, r3, #17
 8004786:	429a      	cmp	r2, r3
 8004788:	d000      	beq.n	800478c <I2C_Slave_ISR_IT+0xf4>
 800478a:	e08a      	b.n	80048a2 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	0011      	movs	r1, r2
 8004794:	0018      	movs	r0, r3
 8004796:	f000 fb1b 	bl	8004dd0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800479a:	e082      	b.n	80048a2 <I2C_Slave_ISR_IT+0x20a>
 800479c:	e081      	b.n	80048a2 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	089b      	lsrs	r3, r3, #2
 80047a2:	001a      	movs	r2, r3
 80047a4:	2301      	movs	r3, #1
 80047a6:	4013      	ands	r3, r2
 80047a8:	d031      	beq.n	800480e <I2C_Slave_ISR_IT+0x176>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	089b      	lsrs	r3, r3, #2
 80047ae:	001a      	movs	r2, r3
 80047b0:	2301      	movs	r3, #1
 80047b2:	4013      	ands	r3, r2
 80047b4:	d02b      	beq.n	800480e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d018      	beq.n	80047f2 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d154      	bne.n	80048a6 <I2C_Slave_ISR_IT+0x20e>
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	4a2f      	ldr	r2, [pc, #188]	; (80048bc <I2C_Slave_ISR_IT+0x224>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d050      	beq.n	80048a6 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	0018      	movs	r0, r3
 8004808:	f000 f8fe 	bl	8004a08 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800480c:	e04b      	b.n	80048a6 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	08db      	lsrs	r3, r3, #3
 8004812:	001a      	movs	r2, r3
 8004814:	2301      	movs	r3, #1
 8004816:	4013      	ands	r3, r2
 8004818:	d00c      	beq.n	8004834 <I2C_Slave_ISR_IT+0x19c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	08db      	lsrs	r3, r3, #3
 800481e:	001a      	movs	r2, r3
 8004820:	2301      	movs	r3, #1
 8004822:	4013      	ands	r3, r2
 8004824:	d006      	beq.n	8004834 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	0011      	movs	r1, r2
 800482c:	0018      	movs	r0, r3
 800482e:	f000 f847 	bl	80048c0 <I2C_ITAddrCplt>
 8004832:	e039      	b.n	80048a8 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	085b      	lsrs	r3, r3, #1
 8004838:	001a      	movs	r2, r3
 800483a:	2301      	movs	r3, #1
 800483c:	4013      	ands	r3, r2
 800483e:	d033      	beq.n	80048a8 <I2C_Slave_ISR_IT+0x210>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	001a      	movs	r2, r3
 8004846:	2301      	movs	r3, #1
 8004848:	4013      	ands	r3, r2
 800484a:	d02d      	beq.n	80048a8 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d018      	beq.n	8004888 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	781a      	ldrb	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	851a      	strh	r2, [r3, #40]	; 0x28
 8004886:	e00f      	b.n	80048a8 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	2380      	movs	r3, #128	; 0x80
 800488c:	045b      	lsls	r3, r3, #17
 800488e:	429a      	cmp	r2, r3
 8004890:	d002      	beq.n	8004898 <I2C_Slave_ISR_IT+0x200>
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d107      	bne.n	80048a8 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	0018      	movs	r0, r3
 800489c:	f000 f8b4 	bl	8004a08 <I2C_ITSlaveSeqCplt>
 80048a0:	e002      	b.n	80048a8 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	e000      	b.n	80048a8 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80048a6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2240      	movs	r2, #64	; 0x40
 80048ac:	2100      	movs	r1, #0
 80048ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	0018      	movs	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b006      	add	sp, #24
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	ffff0000 	.word	0xffff0000

080048c0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80048c0:	b5b0      	push	{r4, r5, r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2241      	movs	r2, #65	; 0x41
 80048ce:	5c9b      	ldrb	r3, [r3, r2]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	001a      	movs	r2, r3
 80048d4:	2328      	movs	r3, #40	; 0x28
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b28      	cmp	r3, #40	; 0x28
 80048da:	d000      	beq.n	80048de <I2C_ITAddrCplt+0x1e>
 80048dc:	e088      	b.n	80049f0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	0c1b      	lsrs	r3, r3, #16
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	250f      	movs	r5, #15
 80048ea:	197b      	adds	r3, r7, r5
 80048ec:	2101      	movs	r1, #1
 80048ee:	400a      	ands	r2, r1
 80048f0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	0c1b      	lsrs	r3, r3, #16
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	200c      	movs	r0, #12
 80048fe:	183b      	adds	r3, r7, r0
 8004900:	21fe      	movs	r1, #254	; 0xfe
 8004902:	400a      	ands	r2, r1
 8004904:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	b29a      	uxth	r2, r3
 800490e:	240a      	movs	r4, #10
 8004910:	193b      	adds	r3, r7, r4
 8004912:	0592      	lsls	r2, r2, #22
 8004914:	0d92      	lsrs	r2, r2, #22
 8004916:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	b29a      	uxth	r2, r3
 8004920:	2308      	movs	r3, #8
 8004922:	18fb      	adds	r3, r7, r3
 8004924:	21fe      	movs	r1, #254	; 0xfe
 8004926:	400a      	ands	r2, r1
 8004928:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d148      	bne.n	80049c4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004932:	0021      	movs	r1, r4
 8004934:	187b      	adds	r3, r7, r1
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	09db      	lsrs	r3, r3, #7
 800493a:	b29a      	uxth	r2, r3
 800493c:	183b      	adds	r3, r7, r0
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	4053      	eors	r3, r2
 8004942:	b29b      	uxth	r3, r3
 8004944:	001a      	movs	r2, r3
 8004946:	2306      	movs	r3, #6
 8004948:	4013      	ands	r3, r2
 800494a:	d120      	bne.n	800498e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800494c:	183b      	adds	r3, r7, r0
 800494e:	187a      	adds	r2, r7, r1
 8004950:	8812      	ldrh	r2, [r2, #0]
 8004952:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004962:	2b02      	cmp	r3, #2
 8004964:	d14c      	bne.n	8004a00 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2208      	movs	r2, #8
 8004972:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2240      	movs	r2, #64	; 0x40
 8004978:	2100      	movs	r1, #0
 800497a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800497c:	183b      	adds	r3, r7, r0
 800497e:	881a      	ldrh	r2, [r3, #0]
 8004980:	197b      	adds	r3, r7, r5
 8004982:	7819      	ldrb	r1, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	0018      	movs	r0, r3
 8004988:	f7ff fe5e 	bl	8004648 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800498c:	e038      	b.n	8004a00 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800498e:	240c      	movs	r4, #12
 8004990:	193b      	adds	r3, r7, r4
 8004992:	2208      	movs	r2, #8
 8004994:	18ba      	adds	r2, r7, r2
 8004996:	8812      	ldrh	r2, [r2, #0]
 8004998:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	021a      	lsls	r2, r3, #8
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0011      	movs	r1, r2
 80049a2:	0018      	movs	r0, r3
 80049a4:	f000 fcb6 	bl	8005314 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2240      	movs	r2, #64	; 0x40
 80049ac:	2100      	movs	r1, #0
 80049ae:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80049b0:	193b      	adds	r3, r7, r4
 80049b2:	881a      	ldrh	r2, [r3, #0]
 80049b4:	230f      	movs	r3, #15
 80049b6:	18fb      	adds	r3, r7, r3
 80049b8:	7819      	ldrb	r1, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	0018      	movs	r0, r3
 80049be:	f7ff fe43 	bl	8004648 <HAL_I2C_AddrCallback>
}
 80049c2:	e01d      	b.n	8004a00 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	021a      	lsls	r2, r3, #8
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	0011      	movs	r1, r2
 80049cc:	0018      	movs	r0, r3
 80049ce:	f000 fca1 	bl	8005314 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2240      	movs	r2, #64	; 0x40
 80049d6:	2100      	movs	r1, #0
 80049d8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80049da:	230c      	movs	r3, #12
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	881a      	ldrh	r2, [r3, #0]
 80049e0:	230f      	movs	r3, #15
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	7819      	ldrb	r1, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	0018      	movs	r0, r3
 80049ea:	f7ff fe2d 	bl	8004648 <HAL_I2C_AddrCallback>
}
 80049ee:	e007      	b.n	8004a00 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2208      	movs	r2, #8
 80049f6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2240      	movs	r2, #64	; 0x40
 80049fc:	2100      	movs	r1, #0
 80049fe:	5499      	strb	r1, [r3, r2]
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b004      	add	sp, #16
 8004a06:	bdb0      	pop	{r4, r5, r7, pc}

08004a08 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2242      	movs	r2, #66	; 0x42
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	0b9b      	lsrs	r3, r3, #14
 8004a24:	001a      	movs	r2, r3
 8004a26:	2301      	movs	r3, #1
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d008      	beq.n	8004a3e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4925      	ldr	r1, [pc, #148]	; (8004acc <I2C_ITSlaveSeqCplt+0xc4>)
 8004a38:	400a      	ands	r2, r1
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	e00d      	b.n	8004a5a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	0bdb      	lsrs	r3, r3, #15
 8004a42:	001a      	movs	r2, r3
 8004a44:	2301      	movs	r3, #1
 8004a46:	4013      	ands	r3, r2
 8004a48:	d007      	beq.n	8004a5a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	491e      	ldr	r1, [pc, #120]	; (8004ad0 <I2C_ITSlaveSeqCplt+0xc8>)
 8004a56:	400a      	ands	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2241      	movs	r2, #65	; 0x41
 8004a5e:	5c9b      	ldrb	r3, [r3, r2]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b29      	cmp	r3, #41	; 0x29
 8004a64:	d114      	bne.n	8004a90 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2241      	movs	r2, #65	; 0x41
 8004a6a:	2128      	movs	r1, #40	; 0x28
 8004a6c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2221      	movs	r2, #33	; 0x21
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2101      	movs	r1, #1
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f000 fc4b 	bl	8005314 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2240      	movs	r2, #64	; 0x40
 8004a82:	2100      	movs	r1, #0
 8004a84:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f7ff fdcd 	bl	8004628 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a8e:	e019      	b.n	8004ac4 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2241      	movs	r2, #65	; 0x41
 8004a94:	5c9b      	ldrb	r3, [r3, r2]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b2a      	cmp	r3, #42	; 0x2a
 8004a9a:	d113      	bne.n	8004ac4 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2241      	movs	r2, #65	; 0x41
 8004aa0:	2128      	movs	r1, #40	; 0x28
 8004aa2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2222      	movs	r2, #34	; 0x22
 8004aa8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2102      	movs	r1, #2
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f000 fc30 	bl	8005314 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2240      	movs	r2, #64	; 0x40
 8004ab8:	2100      	movs	r1, #0
 8004aba:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f7ff fdba 	bl	8004638 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ac4:	46c0      	nop			; (mov r8, r8)
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b004      	add	sp, #16
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	ffffbfff 	.word	0xffffbfff
 8004ad0:	ffff7fff 	.word	0xffff7fff

08004ad4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004aea:	200f      	movs	r0, #15
 8004aec:	183b      	adds	r3, r7, r0
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	2141      	movs	r1, #65	; 0x41
 8004af2:	5c52      	ldrb	r2, [r2, r1]
 8004af4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2220      	movs	r2, #32
 8004afc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004afe:	183b      	adds	r3, r7, r0
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b21      	cmp	r3, #33	; 0x21
 8004b04:	d003      	beq.n	8004b0e <I2C_ITSlaveCplt+0x3a>
 8004b06:	183b      	adds	r3, r7, r0
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b29      	cmp	r3, #41	; 0x29
 8004b0c:	d109      	bne.n	8004b22 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004b0e:	4a7d      	ldr	r2, [pc, #500]	; (8004d04 <I2C_ITSlaveCplt+0x230>)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	0011      	movs	r1, r2
 8004b14:	0018      	movs	r0, r3
 8004b16:	f000 fbfd 	bl	8005314 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2221      	movs	r2, #33	; 0x21
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8004b20:	e011      	b.n	8004b46 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b22:	220f      	movs	r2, #15
 8004b24:	18bb      	adds	r3, r7, r2
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b22      	cmp	r3, #34	; 0x22
 8004b2a:	d003      	beq.n	8004b34 <I2C_ITSlaveCplt+0x60>
 8004b2c:	18bb      	adds	r3, r7, r2
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b2a      	cmp	r3, #42	; 0x2a
 8004b32:	d108      	bne.n	8004b46 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004b34:	4a74      	ldr	r2, [pc, #464]	; (8004d08 <I2C_ITSlaveCplt+0x234>)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	0011      	movs	r1, r2
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f000 fbea 	bl	8005314 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2222      	movs	r2, #34	; 0x22
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2180      	movs	r1, #128	; 0x80
 8004b52:	0209      	lsls	r1, r1, #8
 8004b54:	430a      	orrs	r2, r1
 8004b56:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	496a      	ldr	r1, [pc, #424]	; (8004d0c <I2C_ITSlaveCplt+0x238>)
 8004b64:	400a      	ands	r2, r1
 8004b66:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f000 fa3b 	bl	8004fe6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	0b9b      	lsrs	r3, r3, #14
 8004b74:	001a      	movs	r2, r3
 8004b76:	2301      	movs	r3, #1
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d013      	beq.n	8004ba4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4962      	ldr	r1, [pc, #392]	; (8004d10 <I2C_ITSlaveCplt+0x23c>)
 8004b88:	400a      	ands	r2, r1
 8004b8a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d020      	beq.n	8004bd6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ba2:	e018      	b.n	8004bd6 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	0bdb      	lsrs	r3, r3, #15
 8004ba8:	001a      	movs	r2, r3
 8004baa:	2301      	movs	r3, #1
 8004bac:	4013      	ands	r3, r2
 8004bae:	d012      	beq.n	8004bd6 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4956      	ldr	r1, [pc, #344]	; (8004d14 <I2C_ITSlaveCplt+0x240>)
 8004bbc:	400a      	ands	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d006      	beq.n	8004bd6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	089b      	lsrs	r3, r3, #2
 8004bda:	001a      	movs	r2, r3
 8004bdc:	2301      	movs	r3, #1
 8004bde:	4013      	ands	r3, r2
 8004be0:	d020      	beq.n	8004c24 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2204      	movs	r2, #4
 8004be6:	4393      	bics	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00c      	beq.n	8004c24 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d005      	beq.n	8004c3a <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c32:	2204      	movs	r2, #4
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2242      	movs	r2, #66	; 0x42
 8004c3e:	2100      	movs	r1, #0
 8004c40:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d013      	beq.n	8004c78 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	0011      	movs	r1, r2
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f000 f8b9 	bl	8004dd0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2241      	movs	r2, #65	; 0x41
 8004c62:	5c9b      	ldrb	r3, [r3, r2]
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b28      	cmp	r3, #40	; 0x28
 8004c68:	d147      	bne.n	8004cfa <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	0011      	movs	r1, r2
 8004c70:	0018      	movs	r0, r3
 8004c72:	f000 f853 	bl	8004d1c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c76:	e040      	b.n	8004cfa <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	4a26      	ldr	r2, [pc, #152]	; (8004d18 <I2C_ITSlaveCplt+0x244>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d016      	beq.n	8004cb0 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f7ff febf 	bl	8004a08 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a22      	ldr	r2, [pc, #136]	; (8004d18 <I2C_ITSlaveCplt+0x244>)
 8004c8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2241      	movs	r2, #65	; 0x41
 8004c94:	2120      	movs	r1, #32
 8004c96:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2240      	movs	r2, #64	; 0x40
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f7ff fcdd 	bl	8004668 <HAL_I2C_ListenCpltCallback>
}
 8004cae:	e024      	b.n	8004cfa <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2241      	movs	r2, #65	; 0x41
 8004cb4:	5c9b      	ldrb	r3, [r3, r2]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b22      	cmp	r3, #34	; 0x22
 8004cba:	d10f      	bne.n	8004cdc <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2241      	movs	r2, #65	; 0x41
 8004cc0:	2120      	movs	r1, #32
 8004cc2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2240      	movs	r2, #64	; 0x40
 8004cce:	2100      	movs	r1, #0
 8004cd0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f7ff fcaf 	bl	8004638 <HAL_I2C_SlaveRxCpltCallback>
}
 8004cda:	e00e      	b.n	8004cfa <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2241      	movs	r2, #65	; 0x41
 8004ce0:	2120      	movs	r1, #32
 8004ce2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2240      	movs	r2, #64	; 0x40
 8004cee:	2100      	movs	r1, #0
 8004cf0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f7ff fc97 	bl	8004628 <HAL_I2C_SlaveTxCpltCallback>
}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b006      	add	sp, #24
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	00008001 	.word	0x00008001
 8004d08:	00008002 	.word	0x00008002
 8004d0c:	fe00e800 	.word	0xfe00e800
 8004d10:	ffffbfff 	.word	0xffffbfff
 8004d14:	ffff7fff 	.word	0xffff7fff
 8004d18:	ffff0000 	.word	0xffff0000

08004d1c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a27      	ldr	r2, [pc, #156]	; (8004dc8 <I2C_ITListenCplt+0xac>)
 8004d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2241      	movs	r2, #65	; 0x41
 8004d36:	2120      	movs	r1, #32
 8004d38:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2242      	movs	r2, #66	; 0x42
 8004d3e:	2100      	movs	r1, #0
 8004d40:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	089b      	lsrs	r3, r3, #2
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4013      	ands	r3, r2
 8004d52:	d022      	beq.n	8004d9a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d012      	beq.n	8004d9a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	2204      	movs	r2, #4
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d9a:	4a0c      	ldr	r2, [pc, #48]	; (8004dcc <I2C_ITListenCplt+0xb0>)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	0011      	movs	r1, r2
 8004da0:	0018      	movs	r0, r3
 8004da2:	f000 fab7 	bl	8005314 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2210      	movs	r2, #16
 8004dac:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2240      	movs	r2, #64	; 0x40
 8004db2:	2100      	movs	r1, #0
 8004db4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	0018      	movs	r0, r3
 8004dba:	f7ff fc55 	bl	8004668 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b002      	add	sp, #8
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	ffff0000 	.word	0xffff0000
 8004dcc:	00008003 	.word	0x00008003

08004dd0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004dda:	200f      	movs	r0, #15
 8004ddc:	183b      	adds	r3, r7, r0
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	2141      	movs	r1, #65	; 0x41
 8004de2:	5c52      	ldrb	r2, [r2, r1]
 8004de4:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2242      	movs	r2, #66	; 0x42
 8004dea:	2100      	movs	r1, #0
 8004dec:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a62      	ldr	r2, [pc, #392]	; (8004f7c <I2C_ITError+0x1ac>)
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004e06:	183b      	adds	r3, r7, r0
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b28      	cmp	r3, #40	; 0x28
 8004e0c:	d007      	beq.n	8004e1e <I2C_ITError+0x4e>
 8004e0e:	183b      	adds	r3, r7, r0
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b29      	cmp	r3, #41	; 0x29
 8004e14:	d003      	beq.n	8004e1e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004e16:	183b      	adds	r3, r7, r0
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e1c:	d10c      	bne.n	8004e38 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2103      	movs	r1, #3
 8004e22:	0018      	movs	r0, r3
 8004e24:	f000 fa76 	bl	8005314 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2241      	movs	r2, #65	; 0x41
 8004e2c:	2128      	movs	r1, #40	; 0x28
 8004e2e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a53      	ldr	r2, [pc, #332]	; (8004f80 <I2C_ITError+0x1b0>)
 8004e34:	635a      	str	r2, [r3, #52]	; 0x34
 8004e36:	e012      	b.n	8004e5e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e38:	4a52      	ldr	r2, [pc, #328]	; (8004f84 <I2C_ITError+0x1b4>)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	0011      	movs	r1, r2
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f000 fa68 	bl	8005314 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2241      	movs	r2, #65	; 0x41
 8004e48:	5c9b      	ldrb	r3, [r3, r2]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b60      	cmp	r3, #96	; 0x60
 8004e4e:	d003      	beq.n	8004e58 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2241      	movs	r2, #65	; 0x41
 8004e54:	2120      	movs	r1, #32
 8004e56:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d03b      	beq.n	8004ee4 <I2C_ITError+0x114>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2b11      	cmp	r3, #17
 8004e70:	d002      	beq.n	8004e78 <I2C_ITError+0xa8>
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b21      	cmp	r3, #33	; 0x21
 8004e76:	d135      	bne.n	8004ee4 <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	01db      	lsls	r3, r3, #7
 8004e82:	401a      	ands	r2, r3
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	01db      	lsls	r3, r3, #7
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d107      	bne.n	8004e9c <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	493c      	ldr	r1, [pc, #240]	; (8004f88 <I2C_ITError+0x1b8>)
 8004e98:	400a      	ands	r2, r1
 8004e9a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f7fe ffa7 	bl	8003df4 <HAL_DMA_GetState>
 8004ea6:	0003      	movs	r3, r0
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d016      	beq.n	8004eda <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	4a36      	ldr	r2, [pc, #216]	; (8004f8c <I2C_ITError+0x1bc>)
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2240      	movs	r2, #64	; 0x40
 8004eb8:	2100      	movs	r1, #0
 8004eba:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	f7fe fe7b 	bl	8003bbc <HAL_DMA_Abort_IT>
 8004ec6:	1e03      	subs	r3, r0, #0
 8004ec8:	d051      	beq.n	8004f6e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ed8:	e049      	b.n	8004f6e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	0018      	movs	r0, r3
 8004ede:	f000 f859 	bl	8004f94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ee2:	e044      	b.n	8004f6e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d03b      	beq.n	8004f64 <I2C_ITError+0x194>
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b12      	cmp	r3, #18
 8004ef0:	d002      	beq.n	8004ef8 <I2C_ITError+0x128>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b22      	cmp	r3, #34	; 0x22
 8004ef6:	d135      	bne.n	8004f64 <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	2380      	movs	r3, #128	; 0x80
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	401a      	ands	r2, r3
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d107      	bne.n	8004f1c <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	491e      	ldr	r1, [pc, #120]	; (8004f90 <I2C_ITError+0x1c0>)
 8004f18:	400a      	ands	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f20:	0018      	movs	r0, r3
 8004f22:	f7fe ff67 	bl	8003df4 <HAL_DMA_GetState>
 8004f26:	0003      	movs	r3, r0
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d016      	beq.n	8004f5a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f30:	4a16      	ldr	r2, [pc, #88]	; (8004f8c <I2C_ITError+0x1bc>)
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2240      	movs	r2, #64	; 0x40
 8004f38:	2100      	movs	r1, #0
 8004f3a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f40:	0018      	movs	r0, r3
 8004f42:	f7fe fe3b 	bl	8003bbc <HAL_DMA_Abort_IT>
 8004f46:	1e03      	subs	r3, r0, #0
 8004f48:	d013      	beq.n	8004f72 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f54:	0018      	movs	r0, r3
 8004f56:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f58:	e00b      	b.n	8004f72 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f000 f819 	bl	8004f94 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f62:	e006      	b.n	8004f72 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	0018      	movs	r0, r3
 8004f68:	f000 f814 	bl	8004f94 <I2C_TreatErrorCallback>
  }
}
 8004f6c:	e002      	b.n	8004f74 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	e000      	b.n	8004f74 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f72:	46c0      	nop			; (mov r8, r8)
}
 8004f74:	46c0      	nop			; (mov r8, r8)
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b004      	add	sp, #16
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	ffff0000 	.word	0xffff0000
 8004f80:	08004699 	.word	0x08004699
 8004f84:	00008003 	.word	0x00008003
 8004f88:	ffffbfff 	.word	0xffffbfff
 8004f8c:	0800502b 	.word	0x0800502b
 8004f90:	ffff7fff 	.word	0xffff7fff

08004f94 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2241      	movs	r2, #65	; 0x41
 8004fa0:	5c9b      	ldrb	r3, [r3, r2]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b60      	cmp	r3, #96	; 0x60
 8004fa6:	d10f      	bne.n	8004fc8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2241      	movs	r2, #65	; 0x41
 8004fac:	2120      	movs	r1, #32
 8004fae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2240      	movs	r2, #64	; 0x40
 8004fba:	2100      	movs	r1, #0
 8004fbc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	f7ff fb61 	bl	8004688 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fc6:	e00a      	b.n	8004fde <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2240      	movs	r2, #64	; 0x40
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f7ff fb4d 	bl	8004678 <HAL_I2C_ErrorCallback>
}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b002      	add	sp, #8
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d103      	bne.n	8005004 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2200      	movs	r2, #0
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2201      	movs	r2, #1
 800500c:	4013      	ands	r3, r2
 800500e:	2b01      	cmp	r3, #1
 8005010:	d007      	beq.n	8005022 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699a      	ldr	r2, [r3, #24]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2101      	movs	r1, #1
 800501e:	430a      	orrs	r2, r1
 8005020:	619a      	str	r2, [r3, #24]
  }
}
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	46bd      	mov	sp, r7
 8005026:	b002      	add	sp, #8
 8005028:	bd80      	pop	{r7, pc}

0800502a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	2200      	movs	r2, #0
 8005046:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005054:	2200      	movs	r2, #0
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	0018      	movs	r0, r3
 800505c:	f7ff ff9a 	bl	8004f94 <I2C_TreatErrorCallback>
}
 8005060:	46c0      	nop			; (mov r8, r8)
 8005062:	46bd      	mov	sp, r7
 8005064:	b004      	add	sp, #16
 8005066:	bd80      	pop	{r7, pc}

08005068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	603b      	str	r3, [r7, #0]
 8005074:	1dfb      	adds	r3, r7, #7
 8005076:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005078:	e021      	b.n	80050be <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	d01e      	beq.n	80050be <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005080:	f7fe f90a 	bl	8003298 <HAL_GetTick>
 8005084:	0002      	movs	r2, r0
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d302      	bcc.n	8005096 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d113      	bne.n	80050be <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509a:	2220      	movs	r2, #32
 800509c:	431a      	orrs	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2241      	movs	r2, #65	; 0x41
 80050a6:	2120      	movs	r1, #32
 80050a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2242      	movs	r2, #66	; 0x42
 80050ae:	2100      	movs	r1, #0
 80050b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2240      	movs	r2, #64	; 0x40
 80050b6:	2100      	movs	r1, #0
 80050b8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e00f      	b.n	80050de <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	4013      	ands	r3, r2
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	425a      	negs	r2, r3
 80050ce:	4153      	adcs	r3, r2
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	001a      	movs	r2, r3
 80050d4:	1dfb      	adds	r3, r7, #7
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d0ce      	beq.n	800507a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	0018      	movs	r0, r3
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b004      	add	sp, #16
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050f2:	e02b      	b.n	800514c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	68b9      	ldr	r1, [r7, #8]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	0018      	movs	r0, r3
 80050fc:	f000 f86e 	bl	80051dc <I2C_IsAcknowledgeFailed>
 8005100:	1e03      	subs	r3, r0, #0
 8005102:	d001      	beq.n	8005108 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e029      	b.n	800515c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	3301      	adds	r3, #1
 800510c:	d01e      	beq.n	800514c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510e:	f7fe f8c3 	bl	8003298 <HAL_GetTick>
 8005112:	0002      	movs	r2, r0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	429a      	cmp	r2, r3
 800511c:	d302      	bcc.n	8005124 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d113      	bne.n	800514c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005128:	2220      	movs	r2, #32
 800512a:	431a      	orrs	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2241      	movs	r2, #65	; 0x41
 8005134:	2120      	movs	r1, #32
 8005136:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2242      	movs	r2, #66	; 0x42
 800513c:	2100      	movs	r1, #0
 800513e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2240      	movs	r2, #64	; 0x40
 8005144:	2100      	movs	r1, #0
 8005146:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e007      	b.n	800515c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	2202      	movs	r2, #2
 8005154:	4013      	ands	r3, r2
 8005156:	2b02      	cmp	r3, #2
 8005158:	d1cc      	bne.n	80050f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	0018      	movs	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	b004      	add	sp, #16
 8005162:	bd80      	pop	{r7, pc}

08005164 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005170:	e028      	b.n	80051c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	0018      	movs	r0, r3
 800517a:	f000 f82f 	bl	80051dc <I2C_IsAcknowledgeFailed>
 800517e:	1e03      	subs	r3, r0, #0
 8005180:	d001      	beq.n	8005186 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e026      	b.n	80051d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005186:	f7fe f887 	bl	8003298 <HAL_GetTick>
 800518a:	0002      	movs	r2, r0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	d302      	bcc.n	800519c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d113      	bne.n	80051c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a0:	2220      	movs	r2, #32
 80051a2:	431a      	orrs	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2241      	movs	r2, #65	; 0x41
 80051ac:	2120      	movs	r1, #32
 80051ae:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2242      	movs	r2, #66	; 0x42
 80051b4:	2100      	movs	r1, #0
 80051b6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2240      	movs	r2, #64	; 0x40
 80051bc:	2100      	movs	r1, #0
 80051be:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e007      	b.n	80051d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	2220      	movs	r2, #32
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d1cf      	bne.n	8005172 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	0018      	movs	r0, r3
 80051d6:	46bd      	mov	sp, r7
 80051d8:	b004      	add	sp, #16
 80051da:	bd80      	pop	{r7, pc}

080051dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	2210      	movs	r2, #16
 80051f0:	4013      	ands	r3, r2
 80051f2:	2b10      	cmp	r3, #16
 80051f4:	d151      	bne.n	800529a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051f6:	e021      	b.n	800523c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	3301      	adds	r3, #1
 80051fc:	d01e      	beq.n	800523c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fe:	f7fe f84b 	bl	8003298 <HAL_GetTick>
 8005202:	0002      	movs	r2, r0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	429a      	cmp	r2, r3
 800520c:	d302      	bcc.n	8005214 <I2C_IsAcknowledgeFailed+0x38>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d113      	bne.n	800523c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005218:	2220      	movs	r2, #32
 800521a:	431a      	orrs	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2241      	movs	r2, #65	; 0x41
 8005224:	2120      	movs	r1, #32
 8005226:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2242      	movs	r2, #66	; 0x42
 800522c:	2100      	movs	r1, #0
 800522e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2240      	movs	r2, #64	; 0x40
 8005234:	2100      	movs	r1, #0
 8005236:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e02f      	b.n	800529c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	2220      	movs	r2, #32
 8005244:	4013      	ands	r3, r2
 8005246:	2b20      	cmp	r3, #32
 8005248:	d1d6      	bne.n	80051f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2210      	movs	r2, #16
 8005250:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2220      	movs	r2, #32
 8005258:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	0018      	movs	r0, r3
 800525e:	f7ff fec2 	bl	8004fe6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	490d      	ldr	r1, [pc, #52]	; (80052a4 <I2C_IsAcknowledgeFailed+0xc8>)
 800526e:	400a      	ands	r2, r1
 8005270:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005276:	2204      	movs	r2, #4
 8005278:	431a      	orrs	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2241      	movs	r2, #65	; 0x41
 8005282:	2120      	movs	r1, #32
 8005284:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2242      	movs	r2, #66	; 0x42
 800528a:	2100      	movs	r1, #0
 800528c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2240      	movs	r2, #64	; 0x40
 8005292:	2100      	movs	r1, #0
 8005294:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	0018      	movs	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	b004      	add	sp, #16
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	fe00e800 	.word	0xfe00e800

080052a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80052a8:	b590      	push	{r4, r7, lr}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	0008      	movs	r0, r1
 80052b2:	0011      	movs	r1, r2
 80052b4:	607b      	str	r3, [r7, #4]
 80052b6:	240a      	movs	r4, #10
 80052b8:	193b      	adds	r3, r7, r4
 80052ba:	1c02      	adds	r2, r0, #0
 80052bc:	801a      	strh	r2, [r3, #0]
 80052be:	2009      	movs	r0, #9
 80052c0:	183b      	adds	r3, r7, r0
 80052c2:	1c0a      	adds	r2, r1, #0
 80052c4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	6a3a      	ldr	r2, [r7, #32]
 80052ce:	0d51      	lsrs	r1, r2, #21
 80052d0:	2280      	movs	r2, #128	; 0x80
 80052d2:	00d2      	lsls	r2, r2, #3
 80052d4:	400a      	ands	r2, r1
 80052d6:	490e      	ldr	r1, [pc, #56]	; (8005310 <I2C_TransferConfig+0x68>)
 80052d8:	430a      	orrs	r2, r1
 80052da:	43d2      	mvns	r2, r2
 80052dc:	401a      	ands	r2, r3
 80052de:	0011      	movs	r1, r2
 80052e0:	193b      	adds	r3, r7, r4
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	059b      	lsls	r3, r3, #22
 80052e6:	0d9a      	lsrs	r2, r3, #22
 80052e8:	183b      	adds	r3, r7, r0
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	0418      	lsls	r0, r3, #16
 80052ee:	23ff      	movs	r3, #255	; 0xff
 80052f0:	041b      	lsls	r3, r3, #16
 80052f2:	4003      	ands	r3, r0
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	431a      	orrs	r2, r3
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	431a      	orrs	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	46bd      	mov	sp, r7
 800530a:	b005      	add	sp, #20
 800530c:	bd90      	pop	{r4, r7, pc}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	03ff63ff 	.word	0x03ff63ff

08005314 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	000a      	movs	r2, r1
 800531e:	1cbb      	adds	r3, r7, #2
 8005320:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005326:	1cbb      	adds	r3, r7, #2
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	2201      	movs	r2, #1
 800532c:	4013      	ands	r3, r2
 800532e:	d010      	beq.n	8005352 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2242      	movs	r2, #66	; 0x42
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2241      	movs	r2, #65	; 0x41
 800533c:	5c9b      	ldrb	r3, [r3, r2]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	001a      	movs	r2, r3
 8005342:	2328      	movs	r3, #40	; 0x28
 8005344:	4013      	ands	r3, r2
 8005346:	2b28      	cmp	r3, #40	; 0x28
 8005348:	d003      	beq.n	8005352 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	22b0      	movs	r2, #176	; 0xb0
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005352:	1cbb      	adds	r3, r7, #2
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	2202      	movs	r2, #2
 8005358:	4013      	ands	r3, r2
 800535a:	d010      	beq.n	800537e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2244      	movs	r2, #68	; 0x44
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2241      	movs	r2, #65	; 0x41
 8005368:	5c9b      	ldrb	r3, [r3, r2]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	001a      	movs	r2, r3
 800536e:	2328      	movs	r3, #40	; 0x28
 8005370:	4013      	ands	r3, r2
 8005372:	2b28      	cmp	r3, #40	; 0x28
 8005374:	d003      	beq.n	800537e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	22b0      	movs	r2, #176	; 0xb0
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800537e:	1cbb      	adds	r3, r7, #2
 8005380:	2200      	movs	r2, #0
 8005382:	5e9b      	ldrsh	r3, [r3, r2]
 8005384:	2b00      	cmp	r3, #0
 8005386:	da03      	bge.n	8005390 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	22b8      	movs	r2, #184	; 0xb8
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005390:	1cbb      	adds	r3, r7, #2
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	2b10      	cmp	r3, #16
 8005396:	d103      	bne.n	80053a0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2290      	movs	r2, #144	; 0x90
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80053a0:	1cbb      	adds	r3, r7, #2
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d103      	bne.n	80053b0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80053b0:	1cbb      	adds	r3, r7, #2
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d103      	bne.n	80053c0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2240      	movs	r2, #64	; 0x40
 80053bc:	4313      	orrs	r3, r2
 80053be:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	43d9      	mvns	r1, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	400a      	ands	r2, r1
 80053d0:	601a      	str	r2, [r3, #0]
}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b004      	add	sp, #16
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2241      	movs	r2, #65	; 0x41
 80053ea:	5c9b      	ldrb	r3, [r3, r2]
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d138      	bne.n	8005464 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2240      	movs	r2, #64	; 0x40
 80053f6:	5c9b      	ldrb	r3, [r3, r2]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e032      	b.n	8005466 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2240      	movs	r2, #64	; 0x40
 8005404:	2101      	movs	r1, #1
 8005406:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2241      	movs	r2, #65	; 0x41
 800540c:	2124      	movs	r1, #36	; 0x24
 800540e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2101      	movs	r1, #1
 800541c:	438a      	bics	r2, r1
 800541e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4911      	ldr	r1, [pc, #68]	; (8005470 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800542c:	400a      	ands	r2, r1
 800542e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6819      	ldr	r1, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2101      	movs	r1, #1
 800544c:	430a      	orrs	r2, r1
 800544e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2241      	movs	r2, #65	; 0x41
 8005454:	2120      	movs	r1, #32
 8005456:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2240      	movs	r2, #64	; 0x40
 800545c:	2100      	movs	r1, #0
 800545e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	e000      	b.n	8005466 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005464:	2302      	movs	r3, #2
  }
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b002      	add	sp, #8
 800546c:	bd80      	pop	{r7, pc}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	ffffefff 	.word	0xffffefff

08005474 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2241      	movs	r2, #65	; 0x41
 8005482:	5c9b      	ldrb	r3, [r3, r2]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b20      	cmp	r3, #32
 8005488:	d139      	bne.n	80054fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2240      	movs	r2, #64	; 0x40
 800548e:	5c9b      	ldrb	r3, [r3, r2]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005494:	2302      	movs	r3, #2
 8005496:	e033      	b.n	8005500 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2240      	movs	r2, #64	; 0x40
 800549c:	2101      	movs	r1, #1
 800549e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2241      	movs	r2, #65	; 0x41
 80054a4:	2124      	movs	r1, #36	; 0x24
 80054a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2101      	movs	r1, #1
 80054b4:	438a      	bics	r2, r1
 80054b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a11      	ldr	r2, [pc, #68]	; (8005508 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80054c4:	4013      	ands	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2101      	movs	r1, #1
 80054e6:	430a      	orrs	r2, r1
 80054e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2241      	movs	r2, #65	; 0x41
 80054ee:	2120      	movs	r1, #32
 80054f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2240      	movs	r2, #64	; 0x40
 80054f6:	2100      	movs	r1, #0
 80054f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	e000      	b.n	8005500 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
  }
}
 8005500:	0018      	movs	r0, r3
 8005502:	46bd      	mov	sp, r7
 8005504:	b004      	add	sp, #16
 8005506:	bd80      	pop	{r7, pc}
 8005508:	fffff0ff 	.word	0xfffff0ff

0800550c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e0e5      	b.n	80056ea <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2235      	movs	r2, #53	; 0x35
 8005522:	5c9b      	ldrb	r3, [r3, r2]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d107      	bne.n	800553a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2234      	movs	r2, #52	; 0x34
 800552e:	2100      	movs	r1, #0
 8005530:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	0018      	movs	r0, r3
 8005536:	f7fd fa69 	bl	8002a0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2235      	movs	r2, #53	; 0x35
 800553e:	2102      	movs	r1, #2
 8005540:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4969      	ldr	r1, [pc, #420]	; (80056f4 <HAL_I2S_Init+0x1e8>)
 800554e:	400a      	ands	r2, r1
 8005550:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2202      	movs	r2, #2
 8005558:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	2b02      	cmp	r3, #2
 8005560:	d100      	bne.n	8005564 <HAL_I2S_Init+0x58>
 8005562:	e076      	b.n	8005652 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d102      	bne.n	8005572 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800556c:	2310      	movs	r3, #16
 800556e:	617b      	str	r3, [r7, #20]
 8005570:	e001      	b.n	8005576 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005572:	2320      	movs	r3, #32
 8005574:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2b20      	cmp	r3, #32
 800557c:	d802      	bhi.n	8005584 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8005584:	2380      	movs	r3, #128	; 0x80
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	0018      	movs	r0, r3
 800558a:	f001 f865 	bl	8006658 <HAL_RCCEx_GetPeriphCLKFreq>
 800558e:	0003      	movs	r3, r0
 8005590:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	429a      	cmp	r2, r3
 800559c:	d131      	bne.n	8005602 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d016      	beq.n	80055d4 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	0019      	movs	r1, r3
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f7fa fda9 	bl	8000104 <__udivsi3>
 80055b2:	0003      	movs	r3, r0
 80055b4:	001a      	movs	r2, r3
 80055b6:	0013      	movs	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	189b      	adds	r3, r3, r2
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	001a      	movs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	0019      	movs	r1, r3
 80055c6:	0010      	movs	r0, r2
 80055c8:	f7fa fd9c 	bl	8000104 <__udivsi3>
 80055cc:	0003      	movs	r3, r0
 80055ce:	3305      	adds	r3, #5
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	e02a      	b.n	800562a <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	0019      	movs	r1, r3
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f7fa fd92 	bl	8000104 <__udivsi3>
 80055e0:	0003      	movs	r3, r0
 80055e2:	001a      	movs	r2, r3
 80055e4:	0013      	movs	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	189b      	adds	r3, r3, r2
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	001a      	movs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	0019      	movs	r1, r3
 80055f4:	0010      	movs	r0, r2
 80055f6:	f7fa fd85 	bl	8000104 <__udivsi3>
 80055fa:	0003      	movs	r3, r0
 80055fc:	3305      	adds	r3, #5
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	e013      	b.n	800562a <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005602:	6979      	ldr	r1, [r7, #20]
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7fa fd7d 	bl	8000104 <__udivsi3>
 800560a:	0003      	movs	r3, r0
 800560c:	001a      	movs	r2, r3
 800560e:	0013      	movs	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	189b      	adds	r3, r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	001a      	movs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	0019      	movs	r1, r3
 800561e:	0010      	movs	r0, r2
 8005620:	f7fa fd70 	bl	8000104 <__udivsi3>
 8005624:	0003      	movs	r3, r0
 8005626:	3305      	adds	r3, #5
 8005628:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	210a      	movs	r1, #10
 800562e:	0018      	movs	r0, r3
 8005630:	f7fa fd68 	bl	8000104 <__udivsi3>
 8005634:	0003      	movs	r3, r0
 8005636:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2201      	movs	r2, #1
 800563c:	4013      	ands	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	61bb      	str	r3, [r7, #24]
 8005650:	e003      	b.n	800565a <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005652:	2302      	movs	r3, #2
 8005654:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d902      	bls.n	8005666 <HAL_I2S_Init+0x15a>
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	2bff      	cmp	r3, #255	; 0xff
 8005664:	d907      	bls.n	8005676 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	2210      	movs	r2, #16
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e039      	b.n	80056ea <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	431a      	orrs	r2, r3
 800567e:	0011      	movs	r1, r2
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	430a      	orrs	r2, r1
 8005688:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	4a18      	ldr	r2, [pc, #96]	; (80056f4 <HAL_I2S_Init+0x1e8>)
 8005692:	401a      	ands	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6859      	ldr	r1, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	4319      	orrs	r1, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	4319      	orrs	r1, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	430b      	orrs	r3, r1
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2180      	movs	r1, #128	; 0x80
 80056b2:	0109      	lsls	r1, r1, #4
 80056b4:	430a      	orrs	r2, r1
 80056b6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b30      	cmp	r3, #48	; 0x30
 80056be:	d003      	beq.n	80056c8 <HAL_I2S_Init+0x1bc>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	2bb0      	cmp	r3, #176	; 0xb0
 80056c6:	d108      	bne.n	80056da <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69da      	ldr	r2, [r3, #28]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2180      	movs	r1, #128	; 0x80
 80056d4:	0149      	lsls	r1, r1, #5
 80056d6:	430a      	orrs	r2, r1
 80056d8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2235      	movs	r2, #53	; 0x35
 80056e4:	2101      	movs	r1, #1
 80056e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	0018      	movs	r0, r3
 80056ec:	46bd      	mov	sp, r7
 80056ee:	b008      	add	sp, #32
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	fffff040 	.word	0xfffff040

080056f8 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	099b      	lsrs	r3, r3, #6
 8005714:	001a      	movs	r2, r3
 8005716:	2301      	movs	r3, #1
 8005718:	4013      	ands	r3, r2
 800571a:	d10e      	bne.n	800573a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2201      	movs	r2, #1
 8005720:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8005722:	d00a      	beq.n	800573a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	099b      	lsrs	r3, r3, #6
 8005728:	001a      	movs	r2, r3
 800572a:	2301      	movs	r3, #1
 800572c:	4013      	ands	r3, r2
 800572e:	d004      	beq.n	800573a <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	0018      	movs	r0, r3
 8005734:	f000 f892 	bl	800585c <I2S_Receive_IT>
    return;
 8005738:	e046      	b.n	80057c8 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	085b      	lsrs	r3, r3, #1
 800573e:	001a      	movs	r2, r3
 8005740:	2301      	movs	r3, #1
 8005742:	4013      	ands	r3, r2
 8005744:	d00a      	beq.n	800575c <HAL_I2S_IRQHandler+0x64>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	09db      	lsrs	r3, r3, #7
 800574a:	001a      	movs	r2, r3
 800574c:	2301      	movs	r3, #1
 800574e:	4013      	ands	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	0018      	movs	r0, r3
 8005756:	f000 f852 	bl	80057fe <I2S_Transmit_IT>
    return;
 800575a:	e035      	b.n	80057c8 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	095b      	lsrs	r3, r3, #5
 8005760:	001a      	movs	r2, r3
 8005762:	2301      	movs	r3, #1
 8005764:	4013      	ands	r3, r2
 8005766:	d02f      	beq.n	80057c8 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	099b      	lsrs	r3, r3, #6
 800576c:	001a      	movs	r2, r3
 800576e:	2301      	movs	r3, #1
 8005770:	4013      	ands	r3, r2
 8005772:	d00d      	beq.n	8005790 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2160      	movs	r1, #96	; 0x60
 8005780:	438a      	bics	r2, r1
 8005782:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	2202      	movs	r2, #2
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	08db      	lsrs	r3, r3, #3
 8005794:	001a      	movs	r2, r3
 8005796:	2301      	movs	r3, #1
 8005798:	4013      	ands	r3, r2
 800579a:	d00d      	beq.n	80057b8 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	21a0      	movs	r1, #160	; 0xa0
 80057a8:	438a      	bics	r2, r1
 80057aa:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	2204      	movs	r2, #4
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2235      	movs	r2, #53	; 0x35
 80057bc:	2101      	movs	r1, #1
 80057be:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	0018      	movs	r0, r3
 80057c4:	f000 f813 	bl	80057ee <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b004      	add	sp, #16
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b082      	sub	sp, #8
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80057d6:	46c0      	nop			; (mov r8, r8)
 80057d8:	46bd      	mov	sp, r7
 80057da:	b002      	add	sp, #8
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b002      	add	sp, #8
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b002      	add	sp, #8
 80057fc:	bd80      	pop	{r7, pc}

080057fe <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	881a      	ldrh	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	1c9a      	adds	r2, r3, #2
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10f      	bne.n	8005854 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	21a0      	movs	r1, #160	; 0xa0
 8005840:	438a      	bics	r2, r1
 8005842:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2235      	movs	r2, #53	; 0x35
 8005848:	2101      	movs	r1, #1
 800584a:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	0018      	movs	r0, r3
 8005850:	f7ff ffbd 	bl	80057ce <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005854:	46c0      	nop			; (mov r8, r8)
 8005856:	46bd      	mov	sp, r7
 8005858:	b002      	add	sp, #8
 800585a:	bd80      	pop	{r7, pc}

0800585c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	b292      	uxth	r2, r2
 8005870:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	1c9a      	adds	r2, r3, #2
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10f      	bne.n	80058b4 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2160      	movs	r1, #96	; 0x60
 80058a0:	438a      	bics	r2, r1
 80058a2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2235      	movs	r2, #53	; 0x35
 80058a8:	2101      	movs	r1, #1
 80058aa:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	0018      	movs	r0, r3
 80058b0:	f7ff ff95 	bl	80057de <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80058b4:	46c0      	nop			; (mov r8, r8)
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b002      	add	sp, #8
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80058c4:	4b19      	ldr	r3, [pc, #100]	; (800592c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a19      	ldr	r2, [pc, #100]	; (8005930 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	0019      	movs	r1, r3
 80058ce:	4b17      	ldr	r3, [pc, #92]	; (800592c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	2380      	movs	r3, #128	; 0x80
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	429a      	cmp	r2, r3
 80058de:	d11f      	bne.n	8005920 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80058e0:	4b14      	ldr	r3, [pc, #80]	; (8005934 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	0013      	movs	r3, r2
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	189b      	adds	r3, r3, r2
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	4912      	ldr	r1, [pc, #72]	; (8005938 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80058ee:	0018      	movs	r0, r3
 80058f0:	f7fa fc08 	bl	8000104 <__udivsi3>
 80058f4:	0003      	movs	r3, r0
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058fa:	e008      	b.n	800590e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3b01      	subs	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e001      	b.n	800590e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e009      	b.n	8005922 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800590e:	4b07      	ldr	r3, [pc, #28]	; (800592c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005910:	695a      	ldr	r2, [r3, #20]
 8005912:	2380      	movs	r3, #128	; 0x80
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	401a      	ands	r2, r3
 8005918:	2380      	movs	r3, #128	; 0x80
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	429a      	cmp	r2, r3
 800591e:	d0ed      	beq.n	80058fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	0018      	movs	r0, r3
 8005924:	46bd      	mov	sp, r7
 8005926:	b004      	add	sp, #16
 8005928:	bd80      	pop	{r7, pc}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	40007000 	.word	0x40007000
 8005930:	fffff9ff 	.word	0xfffff9ff
 8005934:	20003134 	.word	0x20003134
 8005938:	000f4240 	.word	0x000f4240

0800593c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005940:	4b03      	ldr	r3, [pc, #12]	; (8005950 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	23e0      	movs	r3, #224	; 0xe0
 8005946:	01db      	lsls	r3, r3, #7
 8005948:	4013      	ands	r3, r2
}
 800594a:	0018      	movs	r0, r3
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40021000 	.word	0x40021000

08005954 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e304      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2201      	movs	r2, #1
 800596c:	4013      	ands	r3, r2
 800596e:	d100      	bne.n	8005972 <HAL_RCC_OscConfig+0x1e>
 8005970:	e07c      	b.n	8005a6c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005972:	4bc3      	ldr	r3, [pc, #780]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2238      	movs	r2, #56	; 0x38
 8005978:	4013      	ands	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800597c:	4bc0      	ldr	r3, [pc, #768]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2203      	movs	r2, #3
 8005982:	4013      	ands	r3, r2
 8005984:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b10      	cmp	r3, #16
 800598a:	d102      	bne.n	8005992 <HAL_RCC_OscConfig+0x3e>
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	2b03      	cmp	r3, #3
 8005990:	d002      	beq.n	8005998 <HAL_RCC_OscConfig+0x44>
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b08      	cmp	r3, #8
 8005996:	d10b      	bne.n	80059b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005998:	4bb9      	ldr	r3, [pc, #740]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	2380      	movs	r3, #128	; 0x80
 800599e:	029b      	lsls	r3, r3, #10
 80059a0:	4013      	ands	r3, r2
 80059a2:	d062      	beq.n	8005a6a <HAL_RCC_OscConfig+0x116>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d15e      	bne.n	8005a6a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e2df      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	2380      	movs	r3, #128	; 0x80
 80059b6:	025b      	lsls	r3, r3, #9
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d107      	bne.n	80059cc <HAL_RCC_OscConfig+0x78>
 80059bc:	4bb0      	ldr	r3, [pc, #704]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	4baf      	ldr	r3, [pc, #700]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 80059c2:	2180      	movs	r1, #128	; 0x80
 80059c4:	0249      	lsls	r1, r1, #9
 80059c6:	430a      	orrs	r2, r1
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	e020      	b.n	8005a0e <HAL_RCC_OscConfig+0xba>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	23a0      	movs	r3, #160	; 0xa0
 80059d2:	02db      	lsls	r3, r3, #11
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d10e      	bne.n	80059f6 <HAL_RCC_OscConfig+0xa2>
 80059d8:	4ba9      	ldr	r3, [pc, #676]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	4ba8      	ldr	r3, [pc, #672]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 80059de:	2180      	movs	r1, #128	; 0x80
 80059e0:	02c9      	lsls	r1, r1, #11
 80059e2:	430a      	orrs	r2, r1
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	4ba6      	ldr	r3, [pc, #664]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	4ba5      	ldr	r3, [pc, #660]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 80059ec:	2180      	movs	r1, #128	; 0x80
 80059ee:	0249      	lsls	r1, r1, #9
 80059f0:	430a      	orrs	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	e00b      	b.n	8005a0e <HAL_RCC_OscConfig+0xba>
 80059f6:	4ba2      	ldr	r3, [pc, #648]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	4ba1      	ldr	r3, [pc, #644]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 80059fc:	49a1      	ldr	r1, [pc, #644]	; (8005c84 <HAL_RCC_OscConfig+0x330>)
 80059fe:	400a      	ands	r2, r1
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	4b9f      	ldr	r3, [pc, #636]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	4b9e      	ldr	r3, [pc, #632]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005a08:	499f      	ldr	r1, [pc, #636]	; (8005c88 <HAL_RCC_OscConfig+0x334>)
 8005a0a:	400a      	ands	r2, r1
 8005a0c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d014      	beq.n	8005a40 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a16:	f7fd fc3f 	bl	8003298 <HAL_GetTick>
 8005a1a:	0003      	movs	r3, r0
 8005a1c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a1e:	e008      	b.n	8005a32 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a20:	f7fd fc3a 	bl	8003298 <HAL_GetTick>
 8005a24:	0002      	movs	r2, r0
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b64      	cmp	r3, #100	; 0x64
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e29e      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a32:	4b93      	ldr	r3, [pc, #588]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	2380      	movs	r3, #128	; 0x80
 8005a38:	029b      	lsls	r3, r3, #10
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d0f0      	beq.n	8005a20 <HAL_RCC_OscConfig+0xcc>
 8005a3e:	e015      	b.n	8005a6c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fd fc2a 	bl	8003298 <HAL_GetTick>
 8005a44:	0003      	movs	r3, r0
 8005a46:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a48:	e008      	b.n	8005a5c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a4a:	f7fd fc25 	bl	8003298 <HAL_GetTick>
 8005a4e:	0002      	movs	r2, r0
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b64      	cmp	r3, #100	; 0x64
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e289      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a5c:	4b88      	ldr	r3, [pc, #544]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	2380      	movs	r3, #128	; 0x80
 8005a62:	029b      	lsls	r3, r3, #10
 8005a64:	4013      	ands	r3, r2
 8005a66:	d1f0      	bne.n	8005a4a <HAL_RCC_OscConfig+0xf6>
 8005a68:	e000      	b.n	8005a6c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a6a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2202      	movs	r2, #2
 8005a72:	4013      	ands	r3, r2
 8005a74:	d100      	bne.n	8005a78 <HAL_RCC_OscConfig+0x124>
 8005a76:	e099      	b.n	8005bac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a78:	4b81      	ldr	r3, [pc, #516]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2238      	movs	r2, #56	; 0x38
 8005a7e:	4013      	ands	r3, r2
 8005a80:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a82:	4b7f      	ldr	r3, [pc, #508]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2203      	movs	r2, #3
 8005a88:	4013      	ands	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	2b10      	cmp	r3, #16
 8005a90:	d102      	bne.n	8005a98 <HAL_RCC_OscConfig+0x144>
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d002      	beq.n	8005a9e <HAL_RCC_OscConfig+0x14a>
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d135      	bne.n	8005b0a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a9e:	4b78      	ldr	r3, [pc, #480]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	2380      	movs	r3, #128	; 0x80
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	d005      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x162>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e25c      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ab6:	4b72      	ldr	r3, [pc, #456]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	4a74      	ldr	r2, [pc, #464]	; (8005c8c <HAL_RCC_OscConfig+0x338>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	0019      	movs	r1, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	021a      	lsls	r2, r3, #8
 8005ac6:	4b6e      	ldr	r3, [pc, #440]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d112      	bne.n	8005af8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005ad2:	4b6b      	ldr	r3, [pc, #428]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a6e      	ldr	r2, [pc, #440]	; (8005c90 <HAL_RCC_OscConfig+0x33c>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	0019      	movs	r1, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	4b67      	ldr	r3, [pc, #412]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005ae6:	4b66      	ldr	r3, [pc, #408]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	0adb      	lsrs	r3, r3, #11
 8005aec:	2207      	movs	r2, #7
 8005aee:	4013      	ands	r3, r2
 8005af0:	4a68      	ldr	r2, [pc, #416]	; (8005c94 <HAL_RCC_OscConfig+0x340>)
 8005af2:	40da      	lsrs	r2, r3
 8005af4:	4b68      	ldr	r3, [pc, #416]	; (8005c98 <HAL_RCC_OscConfig+0x344>)
 8005af6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005af8:	4b68      	ldr	r3, [pc, #416]	; (8005c9c <HAL_RCC_OscConfig+0x348>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	0018      	movs	r0, r3
 8005afe:	f7fd fb6f 	bl	80031e0 <HAL_InitTick>
 8005b02:	1e03      	subs	r3, r0, #0
 8005b04:	d051      	beq.n	8005baa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e232      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d030      	beq.n	8005b74 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005b12:	4b5b      	ldr	r3, [pc, #364]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a5e      	ldr	r2, [pc, #376]	; (8005c90 <HAL_RCC_OscConfig+0x33c>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	0019      	movs	r1, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	4b57      	ldr	r3, [pc, #348]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005b22:	430a      	orrs	r2, r1
 8005b24:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005b26:	4b56      	ldr	r3, [pc, #344]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b55      	ldr	r3, [pc, #340]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005b2c:	2180      	movs	r1, #128	; 0x80
 8005b2e:	0049      	lsls	r1, r1, #1
 8005b30:	430a      	orrs	r2, r1
 8005b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b34:	f7fd fbb0 	bl	8003298 <HAL_GetTick>
 8005b38:	0003      	movs	r3, r0
 8005b3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b3c:	e008      	b.n	8005b50 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b3e:	f7fd fbab 	bl	8003298 <HAL_GetTick>
 8005b42:	0002      	movs	r2, r0
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e20f      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b50:	4b4b      	ldr	r3, [pc, #300]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	2380      	movs	r3, #128	; 0x80
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	4013      	ands	r3, r2
 8005b5a:	d0f0      	beq.n	8005b3e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b5c:	4b48      	ldr	r3, [pc, #288]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	4a4a      	ldr	r2, [pc, #296]	; (8005c8c <HAL_RCC_OscConfig+0x338>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	0019      	movs	r1, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	021a      	lsls	r2, r3, #8
 8005b6c:	4b44      	ldr	r3, [pc, #272]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	e01b      	b.n	8005bac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005b74:	4b42      	ldr	r3, [pc, #264]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	4b41      	ldr	r3, [pc, #260]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005b7a:	4949      	ldr	r1, [pc, #292]	; (8005ca0 <HAL_RCC_OscConfig+0x34c>)
 8005b7c:	400a      	ands	r2, r1
 8005b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b80:	f7fd fb8a 	bl	8003298 <HAL_GetTick>
 8005b84:	0003      	movs	r3, r0
 8005b86:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b88:	e008      	b.n	8005b9c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b8a:	f7fd fb85 	bl	8003298 <HAL_GetTick>
 8005b8e:	0002      	movs	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e1e9      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b9c:	4b38      	ldr	r3, [pc, #224]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	2380      	movs	r3, #128	; 0x80
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	d1f0      	bne.n	8005b8a <HAL_RCC_OscConfig+0x236>
 8005ba8:	e000      	b.n	8005bac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005baa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d047      	beq.n	8005c46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005bb6:	4b32      	ldr	r3, [pc, #200]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	2238      	movs	r2, #56	; 0x38
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	2b18      	cmp	r3, #24
 8005bc0:	d10a      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005bc2:	4b2f      	ldr	r3, [pc, #188]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	4013      	ands	r3, r2
 8005bca:	d03c      	beq.n	8005c46 <HAL_RCC_OscConfig+0x2f2>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d138      	bne.n	8005c46 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e1cb      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d019      	beq.n	8005c14 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005be0:	4b27      	ldr	r3, [pc, #156]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005be2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005be4:	4b26      	ldr	r3, [pc, #152]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005be6:	2101      	movs	r1, #1
 8005be8:	430a      	orrs	r2, r1
 8005bea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fd fb54 	bl	8003298 <HAL_GetTick>
 8005bf0:	0003      	movs	r3, r0
 8005bf2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bf6:	f7fd fb4f 	bl	8003298 <HAL_GetTick>
 8005bfa:	0002      	movs	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e1b3      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c08:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	4013      	ands	r3, r2
 8005c10:	d0f1      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x2a2>
 8005c12:	e018      	b.n	8005c46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005c14:	4b1a      	ldr	r3, [pc, #104]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005c16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c18:	4b19      	ldr	r3, [pc, #100]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	438a      	bics	r2, r1
 8005c1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c20:	f7fd fb3a 	bl	8003298 <HAL_GetTick>
 8005c24:	0003      	movs	r3, r0
 8005c26:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c2a:	f7fd fb35 	bl	8003298 <HAL_GetTick>
 8005c2e:	0002      	movs	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e199      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c3c:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c40:	2202      	movs	r2, #2
 8005c42:	4013      	ands	r3, r2
 8005c44:	d1f1      	bne.n	8005c2a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2204      	movs	r2, #4
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	d100      	bne.n	8005c52 <HAL_RCC_OscConfig+0x2fe>
 8005c50:	e0c6      	b.n	8005de0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c52:	231f      	movs	r3, #31
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005c5a:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2238      	movs	r2, #56	; 0x38
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	d11e      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005c66:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <HAL_RCC_OscConfig+0x32c>)
 8005c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	d100      	bne.n	8005c72 <HAL_RCC_OscConfig+0x31e>
 8005c70:	e0b6      	b.n	8005de0 <HAL_RCC_OscConfig+0x48c>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d000      	beq.n	8005c7c <HAL_RCC_OscConfig+0x328>
 8005c7a:	e0b1      	b.n	8005de0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e177      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
 8005c80:	40021000 	.word	0x40021000
 8005c84:	fffeffff 	.word	0xfffeffff
 8005c88:	fffbffff 	.word	0xfffbffff
 8005c8c:	ffff80ff 	.word	0xffff80ff
 8005c90:	ffffc7ff 	.word	0xffffc7ff
 8005c94:	00f42400 	.word	0x00f42400
 8005c98:	20003134 	.word	0x20003134
 8005c9c:	20003138 	.word	0x20003138
 8005ca0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ca4:	4bb4      	ldr	r3, [pc, #720]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	055b      	lsls	r3, r3, #21
 8005cac:	4013      	ands	r3, r2
 8005cae:	d101      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x360>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCC_OscConfig+0x362>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d011      	beq.n	8005cde <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005cba:	4baf      	ldr	r3, [pc, #700]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cbe:	4bae      	ldr	r3, [pc, #696]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005cc0:	2180      	movs	r1, #128	; 0x80
 8005cc2:	0549      	lsls	r1, r1, #21
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8005cc8:	4bab      	ldr	r3, [pc, #684]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ccc:	2380      	movs	r3, #128	; 0x80
 8005cce:	055b      	lsls	r3, r3, #21
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005cd6:	231f      	movs	r3, #31
 8005cd8:	18fb      	adds	r3, r7, r3
 8005cda:	2201      	movs	r2, #1
 8005cdc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cde:	4ba7      	ldr	r3, [pc, #668]	; (8005f7c <HAL_RCC_OscConfig+0x628>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	2380      	movs	r3, #128	; 0x80
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d11a      	bne.n	8005d20 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cea:	4ba4      	ldr	r3, [pc, #656]	; (8005f7c <HAL_RCC_OscConfig+0x628>)
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	4ba3      	ldr	r3, [pc, #652]	; (8005f7c <HAL_RCC_OscConfig+0x628>)
 8005cf0:	2180      	movs	r1, #128	; 0x80
 8005cf2:	0049      	lsls	r1, r1, #1
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005cf8:	f7fd face 	bl	8003298 <HAL_GetTick>
 8005cfc:	0003      	movs	r3, r0
 8005cfe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d00:	e008      	b.n	8005d14 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d02:	f7fd fac9 	bl	8003298 <HAL_GetTick>
 8005d06:	0002      	movs	r2, r0
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d901      	bls.n	8005d14 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e12d      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d14:	4b99      	ldr	r3, [pc, #612]	; (8005f7c <HAL_RCC_OscConfig+0x628>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	2380      	movs	r3, #128	; 0x80
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	d0f0      	beq.n	8005d02 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d106      	bne.n	8005d36 <HAL_RCC_OscConfig+0x3e2>
 8005d28:	4b93      	ldr	r3, [pc, #588]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005d2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d2c:	4b92      	ldr	r3, [pc, #584]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005d2e:	2101      	movs	r1, #1
 8005d30:	430a      	orrs	r2, r1
 8005d32:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d34:	e01c      	b.n	8005d70 <HAL_RCC_OscConfig+0x41c>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	d10c      	bne.n	8005d58 <HAL_RCC_OscConfig+0x404>
 8005d3e:	4b8e      	ldr	r3, [pc, #568]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005d40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d42:	4b8d      	ldr	r3, [pc, #564]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005d44:	2104      	movs	r1, #4
 8005d46:	430a      	orrs	r2, r1
 8005d48:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d4a:	4b8b      	ldr	r3, [pc, #556]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005d4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d4e:	4b8a      	ldr	r3, [pc, #552]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005d50:	2101      	movs	r1, #1
 8005d52:	430a      	orrs	r2, r1
 8005d54:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d56:	e00b      	b.n	8005d70 <HAL_RCC_OscConfig+0x41c>
 8005d58:	4b87      	ldr	r3, [pc, #540]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005d5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d5c:	4b86      	ldr	r3, [pc, #536]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005d5e:	2101      	movs	r1, #1
 8005d60:	438a      	bics	r2, r1
 8005d62:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d64:	4b84      	ldr	r3, [pc, #528]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005d66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d68:	4b83      	ldr	r3, [pc, #524]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005d6a:	2104      	movs	r1, #4
 8005d6c:	438a      	bics	r2, r1
 8005d6e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d014      	beq.n	8005da2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d78:	f7fd fa8e 	bl	8003298 <HAL_GetTick>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d80:	e009      	b.n	8005d96 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d82:	f7fd fa89 	bl	8003298 <HAL_GetTick>
 8005d86:	0002      	movs	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	4a7c      	ldr	r2, [pc, #496]	; (8005f80 <HAL_RCC_OscConfig+0x62c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e0ec      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d96:	4b78      	ldr	r3, [pc, #480]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d0f0      	beq.n	8005d82 <HAL_RCC_OscConfig+0x42e>
 8005da0:	e013      	b.n	8005dca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da2:	f7fd fa79 	bl	8003298 <HAL_GetTick>
 8005da6:	0003      	movs	r3, r0
 8005da8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005daa:	e009      	b.n	8005dc0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dac:	f7fd fa74 	bl	8003298 <HAL_GetTick>
 8005db0:	0002      	movs	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	4a72      	ldr	r2, [pc, #456]	; (8005f80 <HAL_RCC_OscConfig+0x62c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e0d7      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005dc0:	4b6d      	ldr	r3, [pc, #436]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d1f0      	bne.n	8005dac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005dca:	231f      	movs	r3, #31
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d105      	bne.n	8005de0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005dd4:	4b68      	ldr	r3, [pc, #416]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dd8:	4b67      	ldr	r3, [pc, #412]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005dda:	496a      	ldr	r1, [pc, #424]	; (8005f84 <HAL_RCC_OscConfig+0x630>)
 8005ddc:	400a      	ands	r2, r1
 8005dde:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d100      	bne.n	8005dea <HAL_RCC_OscConfig+0x496>
 8005de8:	e0c1      	b.n	8005f6e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005dea:	4b63      	ldr	r3, [pc, #396]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	2238      	movs	r2, #56	; 0x38
 8005df0:	4013      	ands	r3, r2
 8005df2:	2b10      	cmp	r3, #16
 8005df4:	d100      	bne.n	8005df8 <HAL_RCC_OscConfig+0x4a4>
 8005df6:	e081      	b.n	8005efc <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d156      	bne.n	8005eae <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e00:	4b5d      	ldr	r3, [pc, #372]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4b5c      	ldr	r3, [pc, #368]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005e06:	4960      	ldr	r1, [pc, #384]	; (8005f88 <HAL_RCC_OscConfig+0x634>)
 8005e08:	400a      	ands	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0c:	f7fd fa44 	bl	8003298 <HAL_GetTick>
 8005e10:	0003      	movs	r3, r0
 8005e12:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e16:	f7fd fa3f 	bl	8003298 <HAL_GetTick>
 8005e1a:	0002      	movs	r2, r0
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e0a3      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e28:	4b53      	ldr	r3, [pc, #332]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	049b      	lsls	r3, r3, #18
 8005e30:	4013      	ands	r3, r2
 8005e32:	d1f0      	bne.n	8005e16 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e34:	4b50      	ldr	r3, [pc, #320]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	4a54      	ldr	r2, [pc, #336]	; (8005f8c <HAL_RCC_OscConfig+0x638>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	0019      	movs	r1, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1a      	ldr	r2, [r3, #32]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4c:	021b      	lsls	r3, r3, #8
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e60:	431a      	orrs	r2, r3
 8005e62:	4b45      	ldr	r3, [pc, #276]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005e64:	430a      	orrs	r2, r1
 8005e66:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e68:	4b43      	ldr	r3, [pc, #268]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	4b42      	ldr	r3, [pc, #264]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005e6e:	2180      	movs	r1, #128	; 0x80
 8005e70:	0449      	lsls	r1, r1, #17
 8005e72:	430a      	orrs	r2, r1
 8005e74:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005e76:	4b40      	ldr	r3, [pc, #256]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005e78:	68da      	ldr	r2, [r3, #12]
 8005e7a:	4b3f      	ldr	r3, [pc, #252]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005e7c:	2180      	movs	r1, #128	; 0x80
 8005e7e:	0549      	lsls	r1, r1, #21
 8005e80:	430a      	orrs	r2, r1
 8005e82:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e84:	f7fd fa08 	bl	8003298 <HAL_GetTick>
 8005e88:	0003      	movs	r3, r0
 8005e8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e8c:	e008      	b.n	8005ea0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e8e:	f7fd fa03 	bl	8003298 <HAL_GetTick>
 8005e92:	0002      	movs	r2, r0
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e067      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ea0:	4b35      	ldr	r3, [pc, #212]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	2380      	movs	r3, #128	; 0x80
 8005ea6:	049b      	lsls	r3, r3, #18
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	d0f0      	beq.n	8005e8e <HAL_RCC_OscConfig+0x53a>
 8005eac:	e05f      	b.n	8005f6e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eae:	4b32      	ldr	r3, [pc, #200]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4b31      	ldr	r3, [pc, #196]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005eb4:	4934      	ldr	r1, [pc, #208]	; (8005f88 <HAL_RCC_OscConfig+0x634>)
 8005eb6:	400a      	ands	r2, r1
 8005eb8:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005eba:	4b2f      	ldr	r3, [pc, #188]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	4b2e      	ldr	r3, [pc, #184]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005ec0:	2103      	movs	r1, #3
 8005ec2:	438a      	bics	r2, r1
 8005ec4:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005ec6:	4b2c      	ldr	r3, [pc, #176]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	4b2b      	ldr	r3, [pc, #172]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005ecc:	4930      	ldr	r1, [pc, #192]	; (8005f90 <HAL_RCC_OscConfig+0x63c>)
 8005ece:	400a      	ands	r2, r1
 8005ed0:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed2:	f7fd f9e1 	bl	8003298 <HAL_GetTick>
 8005ed6:	0003      	movs	r3, r0
 8005ed8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005edc:	f7fd f9dc 	bl	8003298 <HAL_GetTick>
 8005ee0:	0002      	movs	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e040      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005eee:	4b22      	ldr	r3, [pc, #136]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	2380      	movs	r3, #128	; 0x80
 8005ef4:	049b      	lsls	r3, r3, #18
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	d1f0      	bne.n	8005edc <HAL_RCC_OscConfig+0x588>
 8005efa:	e038      	b.n	8005f6e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e033      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005f08:	4b1b      	ldr	r3, [pc, #108]	; (8005f78 <HAL_RCC_OscConfig+0x624>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2203      	movs	r2, #3
 8005f12:	401a      	ands	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d126      	bne.n	8005f6a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2270      	movs	r2, #112	; 0x70
 8005f20:	401a      	ands	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d11f      	bne.n	8005f6a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	23fe      	movs	r3, #254	; 0xfe
 8005f2e:	01db      	lsls	r3, r3, #7
 8005f30:	401a      	ands	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d116      	bne.n	8005f6a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	23f8      	movs	r3, #248	; 0xf8
 8005f40:	039b      	lsls	r3, r3, #14
 8005f42:	401a      	ands	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d10e      	bne.n	8005f6a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	23e0      	movs	r3, #224	; 0xe0
 8005f50:	051b      	lsls	r3, r3, #20
 8005f52:	401a      	ands	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d106      	bne.n	8005f6a <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	0f5b      	lsrs	r3, r3, #29
 8005f60:	075a      	lsls	r2, r3, #29
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d001      	beq.n	8005f6e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	0018      	movs	r0, r3
 8005f72:	46bd      	mov	sp, r7
 8005f74:	b008      	add	sp, #32
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	40007000 	.word	0x40007000
 8005f80:	00001388 	.word	0x00001388
 8005f84:	efffffff 	.word	0xefffffff
 8005f88:	feffffff 	.word	0xfeffffff
 8005f8c:	11c1808c 	.word	0x11c1808c
 8005f90:	eefeffff 	.word	0xeefeffff

08005f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0e9      	b.n	800617c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa8:	4b76      	ldr	r3, [pc, #472]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2207      	movs	r2, #7
 8005fae:	4013      	ands	r3, r2
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d91e      	bls.n	8005ff4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb6:	4b73      	ldr	r3, [pc, #460]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2207      	movs	r2, #7
 8005fbc:	4393      	bics	r3, r2
 8005fbe:	0019      	movs	r1, r3
 8005fc0:	4b70      	ldr	r3, [pc, #448]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005fc8:	f7fd f966 	bl	8003298 <HAL_GetTick>
 8005fcc:	0003      	movs	r3, r0
 8005fce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005fd0:	e009      	b.n	8005fe6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd2:	f7fd f961 	bl	8003298 <HAL_GetTick>
 8005fd6:	0002      	movs	r2, r0
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	4a6a      	ldr	r2, [pc, #424]	; (8006188 <HAL_RCC_ClockConfig+0x1f4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e0ca      	b.n	800617c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005fe6:	4b67      	ldr	r3, [pc, #412]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2207      	movs	r2, #7
 8005fec:	4013      	ands	r3, r2
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d1ee      	bne.n	8005fd2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	d015      	beq.n	800602a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2204      	movs	r2, #4
 8006004:	4013      	ands	r3, r2
 8006006:	d006      	beq.n	8006016 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006008:	4b60      	ldr	r3, [pc, #384]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	4b5f      	ldr	r3, [pc, #380]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 800600e:	21e0      	movs	r1, #224	; 0xe0
 8006010:	01c9      	lsls	r1, r1, #7
 8006012:	430a      	orrs	r2, r1
 8006014:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006016:	4b5d      	ldr	r3, [pc, #372]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	4a5d      	ldr	r2, [pc, #372]	; (8006190 <HAL_RCC_ClockConfig+0x1fc>)
 800601c:	4013      	ands	r3, r2
 800601e:	0019      	movs	r1, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	4b59      	ldr	r3, [pc, #356]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 8006026:	430a      	orrs	r2, r1
 8006028:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2201      	movs	r2, #1
 8006030:	4013      	ands	r3, r2
 8006032:	d057      	beq.n	80060e4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d107      	bne.n	800604c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800603c:	4b53      	ldr	r3, [pc, #332]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	2380      	movs	r3, #128	; 0x80
 8006042:	029b      	lsls	r3, r3, #10
 8006044:	4013      	ands	r3, r2
 8006046:	d12b      	bne.n	80060a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e097      	b.n	800617c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d107      	bne.n	8006064 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006054:	4b4d      	ldr	r3, [pc, #308]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	2380      	movs	r3, #128	; 0x80
 800605a:	049b      	lsls	r3, r3, #18
 800605c:	4013      	ands	r3, r2
 800605e:	d11f      	bne.n	80060a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e08b      	b.n	800617c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d107      	bne.n	800607c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800606c:	4b47      	ldr	r3, [pc, #284]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	2380      	movs	r3, #128	; 0x80
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	4013      	ands	r3, r2
 8006076:	d113      	bne.n	80060a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e07f      	b.n	800617c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b03      	cmp	r3, #3
 8006082:	d106      	bne.n	8006092 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006084:	4b41      	ldr	r3, [pc, #260]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 8006086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006088:	2202      	movs	r2, #2
 800608a:	4013      	ands	r3, r2
 800608c:	d108      	bne.n	80060a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e074      	b.n	800617c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006092:	4b3e      	ldr	r3, [pc, #248]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 8006094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006096:	2202      	movs	r2, #2
 8006098:	4013      	ands	r3, r2
 800609a:	d101      	bne.n	80060a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e06d      	b.n	800617c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060a0:	4b3a      	ldr	r3, [pc, #232]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	2207      	movs	r2, #7
 80060a6:	4393      	bics	r3, r2
 80060a8:	0019      	movs	r1, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	4b37      	ldr	r3, [pc, #220]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 80060b0:	430a      	orrs	r2, r1
 80060b2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b4:	f7fd f8f0 	bl	8003298 <HAL_GetTick>
 80060b8:	0003      	movs	r3, r0
 80060ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060bc:	e009      	b.n	80060d2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060be:	f7fd f8eb 	bl	8003298 <HAL_GetTick>
 80060c2:	0002      	movs	r2, r0
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	4a2f      	ldr	r2, [pc, #188]	; (8006188 <HAL_RCC_ClockConfig+0x1f4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e054      	b.n	800617c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d2:	4b2e      	ldr	r3, [pc, #184]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2238      	movs	r2, #56	; 0x38
 80060d8:	401a      	ands	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d1ec      	bne.n	80060be <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060e4:	4b27      	ldr	r3, [pc, #156]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2207      	movs	r2, #7
 80060ea:	4013      	ands	r3, r2
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d21e      	bcs.n	8006130 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f2:	4b24      	ldr	r3, [pc, #144]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2207      	movs	r2, #7
 80060f8:	4393      	bics	r3, r2
 80060fa:	0019      	movs	r1, r3
 80060fc:	4b21      	ldr	r3, [pc, #132]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006104:	f7fd f8c8 	bl	8003298 <HAL_GetTick>
 8006108:	0003      	movs	r3, r0
 800610a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800610c:	e009      	b.n	8006122 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800610e:	f7fd f8c3 	bl	8003298 <HAL_GetTick>
 8006112:	0002      	movs	r2, r0
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	4a1b      	ldr	r2, [pc, #108]	; (8006188 <HAL_RCC_ClockConfig+0x1f4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e02c      	b.n	800617c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006122:	4b18      	ldr	r3, [pc, #96]	; (8006184 <HAL_RCC_ClockConfig+0x1f0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2207      	movs	r2, #7
 8006128:	4013      	ands	r3, r2
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	429a      	cmp	r2, r3
 800612e:	d1ee      	bne.n	800610e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2204      	movs	r2, #4
 8006136:	4013      	ands	r3, r2
 8006138:	d009      	beq.n	800614e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800613a:	4b14      	ldr	r3, [pc, #80]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	4a15      	ldr	r2, [pc, #84]	; (8006194 <HAL_RCC_ClockConfig+0x200>)
 8006140:	4013      	ands	r3, r2
 8006142:	0019      	movs	r1, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	4b10      	ldr	r3, [pc, #64]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 800614a:	430a      	orrs	r2, r1
 800614c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800614e:	f000 f829 	bl	80061a4 <HAL_RCC_GetSysClockFreq>
 8006152:	0001      	movs	r1, r0
 8006154:	4b0d      	ldr	r3, [pc, #52]	; (800618c <HAL_RCC_ClockConfig+0x1f8>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	0a1b      	lsrs	r3, r3, #8
 800615a:	220f      	movs	r2, #15
 800615c:	401a      	ands	r2, r3
 800615e:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <HAL_RCC_ClockConfig+0x204>)
 8006160:	0092      	lsls	r2, r2, #2
 8006162:	58d3      	ldr	r3, [r2, r3]
 8006164:	221f      	movs	r2, #31
 8006166:	4013      	ands	r3, r2
 8006168:	000a      	movs	r2, r1
 800616a:	40da      	lsrs	r2, r3
 800616c:	4b0b      	ldr	r3, [pc, #44]	; (800619c <HAL_RCC_ClockConfig+0x208>)
 800616e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006170:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <HAL_RCC_ClockConfig+0x20c>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	0018      	movs	r0, r3
 8006176:	f7fd f833 	bl	80031e0 <HAL_InitTick>
 800617a:	0003      	movs	r3, r0
}
 800617c:	0018      	movs	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	b004      	add	sp, #16
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40022000 	.word	0x40022000
 8006188:	00001388 	.word	0x00001388
 800618c:	40021000 	.word	0x40021000
 8006190:	fffff0ff 	.word	0xfffff0ff
 8006194:	ffff8fff 	.word	0xffff8fff
 8006198:	0800ae0c 	.word	0x0800ae0c
 800619c:	20003134 	.word	0x20003134
 80061a0:	20003138 	.word	0x20003138

080061a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061aa:	4b3c      	ldr	r3, [pc, #240]	; (800629c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2238      	movs	r2, #56	; 0x38
 80061b0:	4013      	ands	r3, r2
 80061b2:	d10f      	bne.n	80061d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80061b4:	4b39      	ldr	r3, [pc, #228]	; (800629c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	0adb      	lsrs	r3, r3, #11
 80061ba:	2207      	movs	r2, #7
 80061bc:	4013      	ands	r3, r2
 80061be:	2201      	movs	r2, #1
 80061c0:	409a      	lsls	r2, r3
 80061c2:	0013      	movs	r3, r2
 80061c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	4835      	ldr	r0, [pc, #212]	; (80062a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80061ca:	f7f9 ff9b 	bl	8000104 <__udivsi3>
 80061ce:	0003      	movs	r3, r0
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	e05d      	b.n	8006290 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061d4:	4b31      	ldr	r3, [pc, #196]	; (800629c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2238      	movs	r2, #56	; 0x38
 80061da:	4013      	ands	r3, r2
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d102      	bne.n	80061e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061e0:	4b30      	ldr	r3, [pc, #192]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x100>)
 80061e2:	613b      	str	r3, [r7, #16]
 80061e4:	e054      	b.n	8006290 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061e6:	4b2d      	ldr	r3, [pc, #180]	; (800629c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	2238      	movs	r2, #56	; 0x38
 80061ec:	4013      	ands	r3, r2
 80061ee:	2b10      	cmp	r3, #16
 80061f0:	d138      	bne.n	8006264 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80061f2:	4b2a      	ldr	r3, [pc, #168]	; (800629c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	2203      	movs	r2, #3
 80061f8:	4013      	ands	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061fc:	4b27      	ldr	r3, [pc, #156]	; (800629c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	091b      	lsrs	r3, r3, #4
 8006202:	2207      	movs	r2, #7
 8006204:	4013      	ands	r3, r2
 8006206:	3301      	adds	r3, #1
 8006208:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b03      	cmp	r3, #3
 800620e:	d10d      	bne.n	800622c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	4824      	ldr	r0, [pc, #144]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x100>)
 8006214:	f7f9 ff76 	bl	8000104 <__udivsi3>
 8006218:	0003      	movs	r3, r0
 800621a:	0019      	movs	r1, r3
 800621c:	4b1f      	ldr	r3, [pc, #124]	; (800629c <HAL_RCC_GetSysClockFreq+0xf8>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	0a1b      	lsrs	r3, r3, #8
 8006222:	227f      	movs	r2, #127	; 0x7f
 8006224:	4013      	ands	r3, r2
 8006226:	434b      	muls	r3, r1
 8006228:	617b      	str	r3, [r7, #20]
        break;
 800622a:	e00d      	b.n	8006248 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	481c      	ldr	r0, [pc, #112]	; (80062a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006230:	f7f9 ff68 	bl	8000104 <__udivsi3>
 8006234:	0003      	movs	r3, r0
 8006236:	0019      	movs	r1, r3
 8006238:	4b18      	ldr	r3, [pc, #96]	; (800629c <HAL_RCC_GetSysClockFreq+0xf8>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	0a1b      	lsrs	r3, r3, #8
 800623e:	227f      	movs	r2, #127	; 0x7f
 8006240:	4013      	ands	r3, r2
 8006242:	434b      	muls	r3, r1
 8006244:	617b      	str	r3, [r7, #20]
        break;
 8006246:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006248:	4b14      	ldr	r3, [pc, #80]	; (800629c <HAL_RCC_GetSysClockFreq+0xf8>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	0f5b      	lsrs	r3, r3, #29
 800624e:	2207      	movs	r2, #7
 8006250:	4013      	ands	r3, r2
 8006252:	3301      	adds	r3, #1
 8006254:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	6978      	ldr	r0, [r7, #20]
 800625a:	f7f9 ff53 	bl	8000104 <__udivsi3>
 800625e:	0003      	movs	r3, r0
 8006260:	613b      	str	r3, [r7, #16]
 8006262:	e015      	b.n	8006290 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006264:	4b0d      	ldr	r3, [pc, #52]	; (800629c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2238      	movs	r2, #56	; 0x38
 800626a:	4013      	ands	r3, r2
 800626c:	2b20      	cmp	r3, #32
 800626e:	d103      	bne.n	8006278 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006270:	2380      	movs	r3, #128	; 0x80
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	e00b      	b.n	8006290 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006278:	4b08      	ldr	r3, [pc, #32]	; (800629c <HAL_RCC_GetSysClockFreq+0xf8>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	2238      	movs	r2, #56	; 0x38
 800627e:	4013      	ands	r3, r2
 8006280:	2b18      	cmp	r3, #24
 8006282:	d103      	bne.n	800628c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006284:	23fa      	movs	r3, #250	; 0xfa
 8006286:	01db      	lsls	r3, r3, #7
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	e001      	b.n	8006290 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006290:	693b      	ldr	r3, [r7, #16]
}
 8006292:	0018      	movs	r0, r3
 8006294:	46bd      	mov	sp, r7
 8006296:	b006      	add	sp, #24
 8006298:	bd80      	pop	{r7, pc}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	40021000 	.word	0x40021000
 80062a0:	00f42400 	.word	0x00f42400
 80062a4:	007a1200 	.word	0x007a1200

080062a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062ac:	4b02      	ldr	r3, [pc, #8]	; (80062b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80062ae:	681b      	ldr	r3, [r3, #0]
}
 80062b0:	0018      	movs	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	20003134 	.word	0x20003134

080062bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062bc:	b5b0      	push	{r4, r5, r7, lr}
 80062be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80062c0:	f7ff fff2 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 80062c4:	0004      	movs	r4, r0
 80062c6:	f7ff fb39 	bl	800593c <LL_RCC_GetAPB1Prescaler>
 80062ca:	0003      	movs	r3, r0
 80062cc:	0b1a      	lsrs	r2, r3, #12
 80062ce:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062d0:	0092      	lsls	r2, r2, #2
 80062d2:	58d3      	ldr	r3, [r2, r3]
 80062d4:	221f      	movs	r2, #31
 80062d6:	4013      	ands	r3, r2
 80062d8:	40dc      	lsrs	r4, r3
 80062da:	0023      	movs	r3, r4
}
 80062dc:	0018      	movs	r0, r3
 80062de:	46bd      	mov	sp, r7
 80062e0:	bdb0      	pop	{r4, r5, r7, pc}
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	0800ae4c 	.word	0x0800ae4c

080062e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80062f0:	2313      	movs	r3, #19
 80062f2:	18fb      	adds	r3, r7, r3
 80062f4:	2200      	movs	r2, #0
 80062f6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062f8:	2312      	movs	r3, #18
 80062fa:	18fb      	adds	r3, r7, r3
 80062fc:	2200      	movs	r2, #0
 80062fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	2380      	movs	r3, #128	; 0x80
 8006306:	029b      	lsls	r3, r3, #10
 8006308:	4013      	ands	r3, r2
 800630a:	d100      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800630c:	e0a3      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800630e:	2011      	movs	r0, #17
 8006310:	183b      	adds	r3, r7, r0
 8006312:	2200      	movs	r2, #0
 8006314:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006316:	4bc3      	ldr	r3, [pc, #780]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800631a:	2380      	movs	r3, #128	; 0x80
 800631c:	055b      	lsls	r3, r3, #21
 800631e:	4013      	ands	r3, r2
 8006320:	d110      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006322:	4bc0      	ldr	r3, [pc, #768]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006324:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006326:	4bbf      	ldr	r3, [pc, #764]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006328:	2180      	movs	r1, #128	; 0x80
 800632a:	0549      	lsls	r1, r1, #21
 800632c:	430a      	orrs	r2, r1
 800632e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006330:	4bbc      	ldr	r3, [pc, #752]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006334:	2380      	movs	r3, #128	; 0x80
 8006336:	055b      	lsls	r3, r3, #21
 8006338:	4013      	ands	r3, r2
 800633a:	60bb      	str	r3, [r7, #8]
 800633c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800633e:	183b      	adds	r3, r7, r0
 8006340:	2201      	movs	r2, #1
 8006342:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006344:	4bb8      	ldr	r3, [pc, #736]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	4bb7      	ldr	r3, [pc, #732]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800634a:	2180      	movs	r1, #128	; 0x80
 800634c:	0049      	lsls	r1, r1, #1
 800634e:	430a      	orrs	r2, r1
 8006350:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006352:	f7fc ffa1 	bl	8003298 <HAL_GetTick>
 8006356:	0003      	movs	r3, r0
 8006358:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800635a:	e00b      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800635c:	f7fc ff9c 	bl	8003298 <HAL_GetTick>
 8006360:	0002      	movs	r2, r0
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d904      	bls.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800636a:	2313      	movs	r3, #19
 800636c:	18fb      	adds	r3, r7, r3
 800636e:	2203      	movs	r2, #3
 8006370:	701a      	strb	r2, [r3, #0]
        break;
 8006372:	e005      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006374:	4bac      	ldr	r3, [pc, #688]	; (8006628 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	2380      	movs	r3, #128	; 0x80
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	4013      	ands	r3, r2
 800637e:	d0ed      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006380:	2313      	movs	r3, #19
 8006382:	18fb      	adds	r3, r7, r3
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d154      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800638a:	4ba6      	ldr	r3, [pc, #664]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800638c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800638e:	23c0      	movs	r3, #192	; 0xc0
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4013      	ands	r3, r2
 8006394:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d019      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d014      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063a6:	4b9f      	ldr	r3, [pc, #636]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063aa:	4aa0      	ldr	r2, [pc, #640]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063b0:	4b9c      	ldr	r3, [pc, #624]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063b4:	4b9b      	ldr	r3, [pc, #620]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063b6:	2180      	movs	r1, #128	; 0x80
 80063b8:	0249      	lsls	r1, r1, #9
 80063ba:	430a      	orrs	r2, r1
 80063bc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063be:	4b99      	ldr	r3, [pc, #612]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063c2:	4b98      	ldr	r3, [pc, #608]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063c4:	499a      	ldr	r1, [pc, #616]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80063c6:	400a      	ands	r2, r1
 80063c8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063ca:	4b96      	ldr	r3, [pc, #600]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2201      	movs	r2, #1
 80063d4:	4013      	ands	r3, r2
 80063d6:	d016      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d8:	f7fc ff5e 	bl	8003298 <HAL_GetTick>
 80063dc:	0003      	movs	r3, r0
 80063de:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063e0:	e00c      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063e2:	f7fc ff59 	bl	8003298 <HAL_GetTick>
 80063e6:	0002      	movs	r2, r0
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	4a91      	ldr	r2, [pc, #580]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d904      	bls.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80063f2:	2313      	movs	r3, #19
 80063f4:	18fb      	adds	r3, r7, r3
 80063f6:	2203      	movs	r2, #3
 80063f8:	701a      	strb	r2, [r3, #0]
            break;
 80063fa:	e004      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063fc:	4b89      	ldr	r3, [pc, #548]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006400:	2202      	movs	r2, #2
 8006402:	4013      	ands	r3, r2
 8006404:	d0ed      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006406:	2313      	movs	r3, #19
 8006408:	18fb      	adds	r3, r7, r3
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006410:	4b84      	ldr	r3, [pc, #528]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006414:	4a85      	ldr	r2, [pc, #532]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006416:	4013      	ands	r3, r2
 8006418:	0019      	movs	r1, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800641e:	4b81      	ldr	r3, [pc, #516]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006420:	430a      	orrs	r2, r1
 8006422:	65da      	str	r2, [r3, #92]	; 0x5c
 8006424:	e00c      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006426:	2312      	movs	r3, #18
 8006428:	18fb      	adds	r3, r7, r3
 800642a:	2213      	movs	r2, #19
 800642c:	18ba      	adds	r2, r7, r2
 800642e:	7812      	ldrb	r2, [r2, #0]
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	e005      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006434:	2312      	movs	r3, #18
 8006436:	18fb      	adds	r3, r7, r3
 8006438:	2213      	movs	r2, #19
 800643a:	18ba      	adds	r2, r7, r2
 800643c:	7812      	ldrb	r2, [r2, #0]
 800643e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006440:	2311      	movs	r3, #17
 8006442:	18fb      	adds	r3, r7, r3
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d105      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800644a:	4b76      	ldr	r3, [pc, #472]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800644c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800644e:	4b75      	ldr	r3, [pc, #468]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006450:	4979      	ldr	r1, [pc, #484]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8006452:	400a      	ands	r2, r1
 8006454:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2201      	movs	r2, #1
 800645c:	4013      	ands	r3, r2
 800645e:	d009      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006460:	4b70      	ldr	r3, [pc, #448]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006464:	2203      	movs	r2, #3
 8006466:	4393      	bics	r3, r2
 8006468:	0019      	movs	r1, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	4b6d      	ldr	r3, [pc, #436]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006470:	430a      	orrs	r2, r1
 8006472:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2202      	movs	r2, #2
 800647a:	4013      	ands	r3, r2
 800647c:	d009      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800647e:	4b69      	ldr	r3, [pc, #420]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	220c      	movs	r2, #12
 8006484:	4393      	bics	r3, r2
 8006486:	0019      	movs	r1, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	4b65      	ldr	r3, [pc, #404]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800648e:	430a      	orrs	r2, r1
 8006490:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2210      	movs	r2, #16
 8006498:	4013      	ands	r3, r2
 800649a:	d009      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800649c:	4b61      	ldr	r3, [pc, #388]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800649e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a0:	4a66      	ldr	r2, [pc, #408]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	0019      	movs	r1, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	4b5e      	ldr	r3, [pc, #376]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064ac:	430a      	orrs	r2, r1
 80064ae:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	2380      	movs	r3, #128	; 0x80
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4013      	ands	r3, r2
 80064ba:	d009      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064bc:	4b59      	ldr	r3, [pc, #356]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c0:	4a5f      	ldr	r2, [pc, #380]	; (8006640 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	0019      	movs	r1, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	4b56      	ldr	r3, [pc, #344]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064cc:	430a      	orrs	r2, r1
 80064ce:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	2380      	movs	r3, #128	; 0x80
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	4013      	ands	r3, r2
 80064da:	d009      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064dc:	4b51      	ldr	r3, [pc, #324]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e0:	4a58      	ldr	r2, [pc, #352]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064e2:	4013      	ands	r3, r2
 80064e4:	0019      	movs	r1, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69da      	ldr	r2, [r3, #28]
 80064ea:	4b4e      	ldr	r3, [pc, #312]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064ec:	430a      	orrs	r2, r1
 80064ee:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2220      	movs	r2, #32
 80064f6:	4013      	ands	r3, r2
 80064f8:	d009      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064fa:	4b4a      	ldr	r3, [pc, #296]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80064fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064fe:	4a52      	ldr	r2, [pc, #328]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8006500:	4013      	ands	r3, r2
 8006502:	0019      	movs	r1, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	4b46      	ldr	r3, [pc, #280]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800650a:	430a      	orrs	r2, r1
 800650c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	2380      	movs	r3, #128	; 0x80
 8006514:	01db      	lsls	r3, r3, #7
 8006516:	4013      	ands	r3, r2
 8006518:	d015      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800651a:	4b42      	ldr	r3, [pc, #264]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800651c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	0899      	lsrs	r1, r3, #2
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	4b3f      	ldr	r3, [pc, #252]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006528:	430a      	orrs	r2, r1
 800652a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a1a      	ldr	r2, [r3, #32]
 8006530:	2380      	movs	r3, #128	; 0x80
 8006532:	05db      	lsls	r3, r3, #23
 8006534:	429a      	cmp	r2, r3
 8006536:	d106      	bne.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006538:	4b3a      	ldr	r3, [pc, #232]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	4b39      	ldr	r3, [pc, #228]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800653e:	2180      	movs	r1, #128	; 0x80
 8006540:	0249      	lsls	r1, r1, #9
 8006542:	430a      	orrs	r2, r1
 8006544:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	2380      	movs	r3, #128	; 0x80
 800654c:	031b      	lsls	r3, r3, #12
 800654e:	4013      	ands	r3, r2
 8006550:	d009      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006552:	4b34      	ldr	r3, [pc, #208]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006556:	2240      	movs	r2, #64	; 0x40
 8006558:	4393      	bics	r3, r2
 800655a:	0019      	movs	r1, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006560:	4b30      	ldr	r3, [pc, #192]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006562:	430a      	orrs	r2, r1
 8006564:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	2380      	movs	r3, #128	; 0x80
 800656c:	039b      	lsls	r3, r3, #14
 800656e:	4013      	ands	r3, r2
 8006570:	d016      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006572:	4b2c      	ldr	r3, [pc, #176]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006576:	4a35      	ldr	r2, [pc, #212]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006578:	4013      	ands	r3, r2
 800657a:	0019      	movs	r1, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006580:	4b28      	ldr	r3, [pc, #160]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006582:	430a      	orrs	r2, r1
 8006584:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800658a:	2380      	movs	r3, #128	; 0x80
 800658c:	03db      	lsls	r3, r3, #15
 800658e:	429a      	cmp	r2, r3
 8006590:	d106      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006592:	4b24      	ldr	r3, [pc, #144]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	4b23      	ldr	r3, [pc, #140]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006598:	2180      	movs	r1, #128	; 0x80
 800659a:	0449      	lsls	r1, r1, #17
 800659c:	430a      	orrs	r2, r1
 800659e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	2380      	movs	r3, #128	; 0x80
 80065a6:	03db      	lsls	r3, r3, #15
 80065a8:	4013      	ands	r3, r2
 80065aa:	d016      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80065ac:	4b1d      	ldr	r3, [pc, #116]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b0:	4a27      	ldr	r2, [pc, #156]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80065b2:	4013      	ands	r3, r2
 80065b4:	0019      	movs	r1, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ba:	4b1a      	ldr	r3, [pc, #104]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065bc:	430a      	orrs	r2, r1
 80065be:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c4:	2380      	movs	r3, #128	; 0x80
 80065c6:	045b      	lsls	r3, r3, #17
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d106      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80065cc:	4b15      	ldr	r3, [pc, #84]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	4b14      	ldr	r3, [pc, #80]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065d2:	2180      	movs	r1, #128	; 0x80
 80065d4:	0449      	lsls	r1, r1, #17
 80065d6:	430a      	orrs	r2, r1
 80065d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	2380      	movs	r3, #128	; 0x80
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	4013      	ands	r3, r2
 80065e4:	d016      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80065e6:	4b0f      	ldr	r3, [pc, #60]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ea:	4a1a      	ldr	r2, [pc, #104]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	0019      	movs	r1, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695a      	ldr	r2, [r3, #20]
 80065f4:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065f6:	430a      	orrs	r2, r1
 80065f8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695a      	ldr	r2, [r3, #20]
 80065fe:	2380      	movs	r3, #128	; 0x80
 8006600:	01db      	lsls	r3, r3, #7
 8006602:	429a      	cmp	r2, r3
 8006604:	d106      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006606:	4b07      	ldr	r3, [pc, #28]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	4b06      	ldr	r3, [pc, #24]	; (8006624 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800660c:	2180      	movs	r1, #128	; 0x80
 800660e:	0249      	lsls	r1, r1, #9
 8006610:	430a      	orrs	r2, r1
 8006612:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006614:	2312      	movs	r3, #18
 8006616:	18fb      	adds	r3, r7, r3
 8006618:	781b      	ldrb	r3, [r3, #0]
}
 800661a:	0018      	movs	r0, r3
 800661c:	46bd      	mov	sp, r7
 800661e:	b006      	add	sp, #24
 8006620:	bd80      	pop	{r7, pc}
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	40021000 	.word	0x40021000
 8006628:	40007000 	.word	0x40007000
 800662c:	fffffcff 	.word	0xfffffcff
 8006630:	fffeffff 	.word	0xfffeffff
 8006634:	00001388 	.word	0x00001388
 8006638:	efffffff 	.word	0xefffffff
 800663c:	fffff3ff 	.word	0xfffff3ff
 8006640:	fff3ffff 	.word	0xfff3ffff
 8006644:	ffcfffff 	.word	0xffcfffff
 8006648:	ffffcfff 	.word	0xffffcfff
 800664c:	ffbfffff 	.word	0xffbfffff
 8006650:	feffffff 	.word	0xfeffffff
 8006654:	ffff3fff 	.word	0xffff3fff

08006658 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	2380      	movs	r3, #128	; 0x80
 8006668:	029b      	lsls	r3, r3, #10
 800666a:	429a      	cmp	r2, r3
 800666c:	d136      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800666e:	4bcd      	ldr	r3, [pc, #820]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006670:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006672:	23c0      	movs	r3, #192	; 0xc0
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4013      	ands	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800667a:	4bca      	ldr	r3, [pc, #808]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800667c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667e:	2202      	movs	r2, #2
 8006680:	4013      	ands	r3, r2
 8006682:	2b02      	cmp	r3, #2
 8006684:	d108      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	2380      	movs	r3, #128	; 0x80
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	429a      	cmp	r2, r3
 800668e:	d103      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8006690:	2380      	movs	r3, #128	; 0x80
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	617b      	str	r3, [r7, #20]
 8006696:	e31c      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006698:	4bc2      	ldr	r3, [pc, #776]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800669a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800669c:	2202      	movs	r2, #2
 800669e:	4013      	ands	r3, r2
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d108      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	2380      	movs	r3, #128	; 0x80
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d103      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 80066ae:	23fa      	movs	r3, #250	; 0xfa
 80066b0:	01db      	lsls	r3, r3, #7
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	e30d      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80066b6:	4bbb      	ldr	r3, [pc, #748]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	2380      	movs	r3, #128	; 0x80
 80066bc:	029b      	lsls	r3, r3, #10
 80066be:	401a      	ands	r2, r3
 80066c0:	2380      	movs	r3, #128	; 0x80
 80066c2:	029b      	lsls	r3, r3, #10
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d000      	beq.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80066c8:	e303      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	23c0      	movs	r3, #192	; 0xc0
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d000      	beq.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 80066d4:	e2fd      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 80066d6:	4bb4      	ldr	r3, [pc, #720]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	e2fa      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 80066dc:	4bb1      	ldr	r3, [pc, #708]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	2203      	movs	r2, #3
 80066e2:	4013      	ands	r3, r2
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d102      	bne.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 80066e8:	4bb0      	ldr	r3, [pc, #704]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80066ea:	613b      	str	r3, [r7, #16]
 80066ec:	e00a      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 80066ee:	4bad      	ldr	r3, [pc, #692]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	2203      	movs	r2, #3
 80066f4:	4013      	ands	r3, r2
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d102      	bne.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 80066fa:	4bad      	ldr	r3, [pc, #692]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	e001      	b.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006704:	4ba7      	ldr	r3, [pc, #668]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	091b      	lsrs	r3, r3, #4
 800670a:	2207      	movs	r2, #7
 800670c:	4013      	ands	r3, r2
 800670e:	3301      	adds	r3, #1
 8006710:	0019      	movs	r1, r3
 8006712:	6938      	ldr	r0, [r7, #16]
 8006714:	f7f9 fcf6 	bl	8000104 <__udivsi3>
 8006718:	0003      	movs	r3, r0
 800671a:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	2380      	movs	r3, #128	; 0x80
 8006720:	03db      	lsls	r3, r3, #15
 8006722:	429a      	cmp	r2, r3
 8006724:	d100      	bne.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8006726:	e28e      	b.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	2380      	movs	r3, #128	; 0x80
 800672c:	03db      	lsls	r3, r3, #15
 800672e:	429a      	cmp	r2, r3
 8006730:	d900      	bls.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006732:	e2b7      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	2380      	movs	r3, #128	; 0x80
 8006738:	039b      	lsls	r3, r3, #14
 800673a:	429a      	cmp	r2, r3
 800673c:	d100      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800673e:	e253      	b.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	2380      	movs	r3, #128	; 0x80
 8006744:	039b      	lsls	r3, r3, #14
 8006746:	429a      	cmp	r2, r3
 8006748:	d900      	bls.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800674a:	e2ab      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	2380      	movs	r3, #128	; 0x80
 8006750:	031b      	lsls	r3, r3, #12
 8006752:	429a      	cmp	r2, r3
 8006754:	d100      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006756:	e0b2      	b.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	2380      	movs	r3, #128	; 0x80
 800675c:	031b      	lsls	r3, r3, #12
 800675e:	429a      	cmp	r2, r3
 8006760:	d900      	bls.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006762:	e29f      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	2380      	movs	r3, #128	; 0x80
 8006768:	01db      	lsls	r3, r3, #7
 800676a:	429a      	cmp	r2, r3
 800676c:	d100      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800676e:	e103      	b.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	2380      	movs	r3, #128	; 0x80
 8006774:	01db      	lsls	r3, r3, #7
 8006776:	429a      	cmp	r2, r3
 8006778:	d900      	bls.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800677a:	e293      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	2380      	movs	r3, #128	; 0x80
 8006780:	011b      	lsls	r3, r3, #4
 8006782:	429a      	cmp	r2, r3
 8006784:	d100      	bne.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8006786:	e165      	b.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	2380      	movs	r3, #128	; 0x80
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	429a      	cmp	r2, r3
 8006790:	d900      	bls.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8006792:	e287      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	2380      	movs	r3, #128	; 0x80
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	429a      	cmp	r2, r3
 800679c:	d100      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800679e:	e1e3      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	2380      	movs	r3, #128	; 0x80
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d900      	bls.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80067aa:	e27b      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	2380      	movs	r3, #128	; 0x80
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d100      	bne.n	80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80067b6:	e197      	b.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	2380      	movs	r3, #128	; 0x80
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	429a      	cmp	r2, r3
 80067c0:	d900      	bls.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80067c2:	e26f      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b20      	cmp	r3, #32
 80067c8:	d100      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80067ca:	e118      	b.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	d900      	bls.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 80067d2:	e267      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b10      	cmp	r3, #16
 80067d8:	d100      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80067da:	e093      	b.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b10      	cmp	r3, #16
 80067e0:	d900      	bls.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80067e2:	e25f      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d003      	beq.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d033      	beq.n	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 80067f0:	e258      	b.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80067f2:	4b6c      	ldr	r3, [pc, #432]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80067f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f6:	2203      	movs	r2, #3
 80067f8:	4013      	ands	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d104      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006802:	f7ff fd5b 	bl	80062bc <HAL_RCC_GetPCLK1Freq>
 8006806:	0003      	movs	r3, r0
 8006808:	617b      	str	r3, [r7, #20]
        break;
 800680a:	e24d      	b.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d104      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006812:	f7ff fcc7 	bl	80061a4 <HAL_RCC_GetSysClockFreq>
 8006816:	0003      	movs	r3, r0
 8006818:	617b      	str	r3, [r7, #20]
        break;
 800681a:	e245      	b.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800681c:	4b61      	ldr	r3, [pc, #388]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	2380      	movs	r3, #128	; 0x80
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	401a      	ands	r2, r3
 8006826:	2380      	movs	r3, #128	; 0x80
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	429a      	cmp	r2, r3
 800682c:	d105      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d102      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8006834:	4b5d      	ldr	r3, [pc, #372]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006836:	617b      	str	r3, [r7, #20]
        break;
 8006838:	e236      	b.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800683a:	4b5a      	ldr	r3, [pc, #360]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800683c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683e:	2202      	movs	r2, #2
 8006840:	4013      	ands	r3, r2
 8006842:	2b02      	cmp	r3, #2
 8006844:	d000      	beq.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8006846:	e22f      	b.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b03      	cmp	r3, #3
 800684c:	d000      	beq.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 800684e:	e22b      	b.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8006850:	2380      	movs	r3, #128	; 0x80
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	617b      	str	r3, [r7, #20]
        break;
 8006856:	e227      	b.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006858:	4b52      	ldr	r3, [pc, #328]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800685a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685c:	220c      	movs	r2, #12
 800685e:	4013      	ands	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d104      	bne.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006868:	f7ff fd28 	bl	80062bc <HAL_RCC_GetPCLK1Freq>
 800686c:	0003      	movs	r3, r0
 800686e:	617b      	str	r3, [r7, #20]
        break;
 8006870:	e21c      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b04      	cmp	r3, #4
 8006876:	d104      	bne.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006878:	f7ff fc94 	bl	80061a4 <HAL_RCC_GetSysClockFreq>
 800687c:	0003      	movs	r3, r0
 800687e:	617b      	str	r3, [r7, #20]
        break;
 8006880:	e214      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006882:	4b48      	ldr	r3, [pc, #288]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	2380      	movs	r3, #128	; 0x80
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	401a      	ands	r2, r3
 800688c:	2380      	movs	r3, #128	; 0x80
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	429a      	cmp	r2, r3
 8006892:	d105      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b08      	cmp	r3, #8
 8006898:	d102      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 800689a:	4b44      	ldr	r3, [pc, #272]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800689c:	617b      	str	r3, [r7, #20]
        break;
 800689e:	e205      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80068a0:	4b40      	ldr	r3, [pc, #256]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80068a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a4:	2202      	movs	r2, #2
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d000      	beq.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80068ac:	e1fe      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b0c      	cmp	r3, #12
 80068b2:	d000      	beq.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80068b4:	e1fa      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 80068b6:	2380      	movs	r3, #128	; 0x80
 80068b8:	021b      	lsls	r3, r3, #8
 80068ba:	617b      	str	r3, [r7, #20]
        break;
 80068bc:	e1f6      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80068be:	4b39      	ldr	r3, [pc, #228]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80068c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c2:	2240      	movs	r2, #64	; 0x40
 80068c4:	4013      	ands	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 80068c8:	4b36      	ldr	r3, [pc, #216]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	2380      	movs	r3, #128	; 0x80
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	401a      	ands	r2, r3
 80068d2:	2380      	movs	r3, #128	; 0x80
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d105      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d102      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 80068e0:	4b34      	ldr	r3, [pc, #208]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 80068e2:	617b      	str	r3, [r7, #20]
        break;
 80068e4:	e1e4      	b.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80068e6:	4b2f      	ldr	r3, [pc, #188]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80068e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ea:	2202      	movs	r2, #2
 80068ec:	4013      	ands	r3, r2
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d000      	beq.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 80068f2:	e1dd      	b.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b40      	cmp	r3, #64	; 0x40
 80068f8:	d000      	beq.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 80068fa:	e1d9      	b.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 80068fc:	2380      	movs	r3, #128	; 0x80
 80068fe:	021b      	lsls	r3, r3, #8
 8006900:	617b      	str	r3, [r7, #20]
        break;
 8006902:	e1d5      	b.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006904:	4b27      	ldr	r3, [pc, #156]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006906:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006908:	23c0      	movs	r3, #192	; 0xc0
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	4013      	ands	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006916:	f7ff fcd1 	bl	80062bc <HAL_RCC_GetPCLK1Freq>
 800691a:	0003      	movs	r3, r0
 800691c:	617b      	str	r3, [r7, #20]
        break;
 800691e:	e1c9      	b.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	2380      	movs	r3, #128	; 0x80
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	429a      	cmp	r2, r3
 8006928:	d104      	bne.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800692a:	f7ff fc3b 	bl	80061a4 <HAL_RCC_GetSysClockFreq>
 800692e:	0003      	movs	r3, r0
 8006930:	617b      	str	r3, [r7, #20]
        break;
 8006932:	e1bf      	b.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006934:	4b1b      	ldr	r3, [pc, #108]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	2380      	movs	r3, #128	; 0x80
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	401a      	ands	r2, r3
 800693e:	2380      	movs	r3, #128	; 0x80
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	429a      	cmp	r2, r3
 8006944:	d107      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	2380      	movs	r3, #128	; 0x80
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	429a      	cmp	r2, r3
 800694e:	d102      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8006950:	4b16      	ldr	r3, [pc, #88]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006952:	617b      	str	r3, [r7, #20]
        break;
 8006954:	e1ae      	b.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006956:	4b13      	ldr	r3, [pc, #76]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695a:	2202      	movs	r2, #2
 800695c:	4013      	ands	r3, r2
 800695e:	2b02      	cmp	r3, #2
 8006960:	d000      	beq.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8006962:	e1a7      	b.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	23c0      	movs	r3, #192	; 0xc0
 8006968:	011b      	lsls	r3, r3, #4
 800696a:	429a      	cmp	r2, r3
 800696c:	d000      	beq.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800696e:	e1a1      	b.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8006970:	2380      	movs	r3, #128	; 0x80
 8006972:	021b      	lsls	r3, r3, #8
 8006974:	617b      	str	r3, [r7, #20]
        break;
 8006976:	e19d      	b.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006978:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800697a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697c:	0f9b      	lsrs	r3, r3, #30
 800697e:	079b      	lsls	r3, r3, #30
 8006980:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d104      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8006988:	f7ff fc0c 	bl	80061a4 <HAL_RCC_GetSysClockFreq>
 800698c:	0003      	movs	r3, r0
 800698e:	617b      	str	r3, [r7, #20]
        break;
 8006990:	e192      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	2380      	movs	r3, #128	; 0x80
 8006996:	061b      	lsls	r3, r3, #24
 8006998:	429a      	cmp	r2, r3
 800699a:	d10d      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 800699c:	4b03      	ldr	r3, [pc, #12]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800699e:	617b      	str	r3, [r7, #20]
        break;
 80069a0:	e18a      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80069a2:	46c0      	nop			; (mov r8, r8)
 80069a4:	40021000 	.word	0x40021000
 80069a8:	0003d090 	.word	0x0003d090
 80069ac:	00f42400 	.word	0x00f42400
 80069b0:	007a1200 	.word	0x007a1200
 80069b4:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	2380      	movs	r3, #128	; 0x80
 80069bc:	05db      	lsls	r3, r3, #23
 80069be:	429a      	cmp	r2, r3
 80069c0:	d000      	beq.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 80069c2:	e179      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80069c4:	4bc5      	ldr	r3, [pc, #788]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	2380      	movs	r3, #128	; 0x80
 80069ca:	025b      	lsls	r3, r3, #9
 80069cc:	4013      	ands	r3, r2
 80069ce:	d100      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80069d0:	e172      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80069d2:	4bc2      	ldr	r3, [pc, #776]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	0a1b      	lsrs	r3, r3, #8
 80069d8:	227f      	movs	r2, #127	; 0x7f
 80069da:	4013      	ands	r3, r2
 80069dc:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	435a      	muls	r2, r3
 80069e4:	4bbd      	ldr	r3, [pc, #756]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	0c5b      	lsrs	r3, r3, #17
 80069ea:	211f      	movs	r1, #31
 80069ec:	400b      	ands	r3, r1
 80069ee:	3301      	adds	r3, #1
 80069f0:	0019      	movs	r1, r3
 80069f2:	0010      	movs	r0, r2
 80069f4:	f7f9 fb86 	bl	8000104 <__udivsi3>
 80069f8:	0003      	movs	r3, r0
 80069fa:	617b      	str	r3, [r7, #20]
        break;
 80069fc:	e15c      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80069fe:	4bb7      	ldr	r3, [pc, #732]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a02:	23c0      	movs	r3, #192	; 0xc0
 8006a04:	019b      	lsls	r3, r3, #6
 8006a06:	4013      	ands	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a10:	f7ff fc54 	bl	80062bc <HAL_RCC_GetPCLK1Freq>
 8006a14:	0003      	movs	r3, r0
 8006a16:	617b      	str	r3, [r7, #20]
        break;
 8006a18:	e150      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	2380      	movs	r3, #128	; 0x80
 8006a1e:	015b      	lsls	r3, r3, #5
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d104      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006a24:	f7ff fbbe 	bl	80061a4 <HAL_RCC_GetSysClockFreq>
 8006a28:	0003      	movs	r3, r0
 8006a2a:	617b      	str	r3, [r7, #20]
        break;
 8006a2c:	e146      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006a2e:	4bab      	ldr	r3, [pc, #684]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	2380      	movs	r3, #128	; 0x80
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	401a      	ands	r2, r3
 8006a38:	2380      	movs	r3, #128	; 0x80
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d000      	beq.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8006a40:	e13c      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	2380      	movs	r3, #128	; 0x80
 8006a46:	019b      	lsls	r3, r3, #6
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d000      	beq.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8006a4c:	e136      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8006a4e:	4ba4      	ldr	r3, [pc, #656]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006a50:	617b      	str	r3, [r7, #20]
        break;
 8006a52:	e133      	b.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8006a54:	4ba1      	ldr	r3, [pc, #644]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006a56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a58:	23c0      	movs	r3, #192	; 0xc0
 8006a5a:	021b      	lsls	r3, r3, #8
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	2380      	movs	r3, #128	; 0x80
 8006a64:	01db      	lsls	r3, r3, #7
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d11c      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006a6a:	4b9c      	ldr	r3, [pc, #624]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	2380      	movs	r3, #128	; 0x80
 8006a70:	025b      	lsls	r3, r3, #9
 8006a72:	4013      	ands	r3, r2
 8006a74:	d100      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8006a76:	e123      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006a78:	4b98      	ldr	r3, [pc, #608]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	0a1b      	lsrs	r3, r3, #8
 8006a7e:	227f      	movs	r2, #127	; 0x7f
 8006a80:	4013      	ands	r3, r2
 8006a82:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	435a      	muls	r2, r3
 8006a8a:	4b94      	ldr	r3, [pc, #592]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	0c5b      	lsrs	r3, r3, #17
 8006a90:	211f      	movs	r1, #31
 8006a92:	400b      	ands	r3, r1
 8006a94:	3301      	adds	r3, #1
 8006a96:	0019      	movs	r1, r3
 8006a98:	0010      	movs	r0, r2
 8006a9a:	f7f9 fb33 	bl	8000104 <__udivsi3>
 8006a9e:	0003      	movs	r3, r0
 8006aa0:	617b      	str	r3, [r7, #20]
        break;
 8006aa2:	e10d      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d104      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 8006aaa:	f7ff fb7b 	bl	80061a4 <HAL_RCC_GetSysClockFreq>
 8006aae:	0003      	movs	r3, r0
 8006ab0:	617b      	str	r3, [r7, #20]
        break;
 8006ab2:	e105      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8006ab4:	4b89      	ldr	r3, [pc, #548]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	2380      	movs	r3, #128	; 0x80
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	401a      	ands	r2, r3
 8006abe:	2380      	movs	r3, #128	; 0x80
 8006ac0:	00db      	lsls	r3, r3, #3
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d107      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	2380      	movs	r3, #128	; 0x80
 8006aca:	021b      	lsls	r3, r3, #8
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d102      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8006ad0:	4b83      	ldr	r3, [pc, #524]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006ad2:	617b      	str	r3, [r7, #20]
        break;
 8006ad4:	e0f4      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	23c0      	movs	r3, #192	; 0xc0
 8006ada:	021b      	lsls	r3, r3, #8
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d000      	beq.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006ae0:	e0ee      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8006ae2:	4b80      	ldr	r3, [pc, #512]	; (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8006ae4:	617b      	str	r3, [r7, #20]
        break;
 8006ae6:	e0eb      	b.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006ae8:	4b7c      	ldr	r3, [pc, #496]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006aea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aec:	23c0      	movs	r3, #192	; 0xc0
 8006aee:	031b      	lsls	r3, r3, #12
 8006af0:	4013      	ands	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d104      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006afa:	f7ff fbdf 	bl	80062bc <HAL_RCC_GetPCLK1Freq>
 8006afe:	0003      	movs	r3, r0
 8006b00:	617b      	str	r3, [r7, #20]
        break;
 8006b02:	e0df      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006b04:	4b75      	ldr	r3, [pc, #468]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b08:	2202      	movs	r2, #2
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d108      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	2380      	movs	r3, #128	; 0x80
 8006b14:	02db      	lsls	r3, r3, #11
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d103      	bne.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 8006b1a:	23fa      	movs	r3, #250	; 0xfa
 8006b1c:	01db      	lsls	r3, r3, #7
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	e021      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006b22:	4b6e      	ldr	r3, [pc, #440]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	2380      	movs	r3, #128	; 0x80
 8006b28:	00db      	lsls	r3, r3, #3
 8006b2a:	401a      	ands	r2, r3
 8006b2c:	2380      	movs	r3, #128	; 0x80
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d107      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	2380      	movs	r3, #128	; 0x80
 8006b38:	031b      	lsls	r3, r3, #12
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d102      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 8006b3e:	4b68      	ldr	r3, [pc, #416]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006b40:	617b      	str	r3, [r7, #20]
 8006b42:	e010      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006b44:	4b65      	ldr	r3, [pc, #404]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b48:	2202      	movs	r2, #2
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d000      	beq.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006b50:	e0b8      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	23c0      	movs	r3, #192	; 0xc0
 8006b56:	031b      	lsls	r3, r3, #12
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d000      	beq.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006b5c:	e0b2      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 8006b5e:	2380      	movs	r3, #128	; 0x80
 8006b60:	021b      	lsls	r3, r3, #8
 8006b62:	617b      	str	r3, [r7, #20]
        break;
 8006b64:	e0ae      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006b66:	e0ad      	b.n	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006b68:	4b5c      	ldr	r3, [pc, #368]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006b6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b6c:	23c0      	movs	r3, #192	; 0xc0
 8006b6e:	039b      	lsls	r3, r3, #14
 8006b70:	4013      	ands	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d104      	bne.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b7a:	f7ff fb9f 	bl	80062bc <HAL_RCC_GetPCLK1Freq>
 8006b7e:	0003      	movs	r3, r0
 8006b80:	617b      	str	r3, [r7, #20]
        break;
 8006b82:	e0a1      	b.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006b84:	4b55      	ldr	r3, [pc, #340]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b88:	2202      	movs	r2, #2
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d108      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	2380      	movs	r3, #128	; 0x80
 8006b94:	035b      	lsls	r3, r3, #13
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d103      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 8006b9a:	23fa      	movs	r3, #250	; 0xfa
 8006b9c:	01db      	lsls	r3, r3, #7
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	e021      	b.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006ba2:	4b4e      	ldr	r3, [pc, #312]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	2380      	movs	r3, #128	; 0x80
 8006ba8:	00db      	lsls	r3, r3, #3
 8006baa:	401a      	ands	r2, r3
 8006bac:	2380      	movs	r3, #128	; 0x80
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d107      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	2380      	movs	r3, #128	; 0x80
 8006bb8:	039b      	lsls	r3, r3, #14
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d102      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 8006bbe:	4b48      	ldr	r3, [pc, #288]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006bc0:	617b      	str	r3, [r7, #20]
 8006bc2:	e010      	b.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006bc4:	4b45      	ldr	r3, [pc, #276]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc8:	2202      	movs	r2, #2
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d000      	beq.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006bd0:	e07a      	b.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	23c0      	movs	r3, #192	; 0xc0
 8006bd6:	039b      	lsls	r3, r3, #14
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d000      	beq.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8006bdc:	e074      	b.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 8006bde:	2380      	movs	r3, #128	; 0x80
 8006be0:	021b      	lsls	r3, r3, #8
 8006be2:	617b      	str	r3, [r7, #20]
        break;
 8006be4:	e070      	b.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8006be6:	e06f      	b.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8006be8:	4b3c      	ldr	r3, [pc, #240]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006bea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bec:	2380      	movs	r3, #128	; 0x80
 8006bee:	03db      	lsls	r3, r3, #15
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	2380      	movs	r3, #128	; 0x80
 8006bf8:	03db      	lsls	r3, r3, #15
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d11b      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006bfe:	4b37      	ldr	r3, [pc, #220]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	2380      	movs	r3, #128	; 0x80
 8006c04:	045b      	lsls	r3, r3, #17
 8006c06:	4013      	ands	r3, r2
 8006c08:	d060      	beq.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006c0a:	4b34      	ldr	r3, [pc, #208]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	0a1b      	lsrs	r3, r3, #8
 8006c10:	227f      	movs	r2, #127	; 0x7f
 8006c12:	4013      	ands	r3, r2
 8006c14:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	435a      	muls	r2, r3
 8006c1c:	4b2f      	ldr	r3, [pc, #188]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	0e5b      	lsrs	r3, r3, #25
 8006c22:	2107      	movs	r1, #7
 8006c24:	400b      	ands	r3, r1
 8006c26:	3301      	adds	r3, #1
 8006c28:	0019      	movs	r1, r3
 8006c2a:	0010      	movs	r0, r2
 8006c2c:	f7f9 fa6a 	bl	8000104 <__udivsi3>
 8006c30:	0003      	movs	r3, r0
 8006c32:	617b      	str	r3, [r7, #20]
        break;
 8006c34:	e04a      	b.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d147      	bne.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c3c:	f7ff fb3e 	bl	80062bc <HAL_RCC_GetPCLK1Freq>
 8006c40:	0003      	movs	r3, r0
 8006c42:	617b      	str	r3, [r7, #20]
        break;
 8006c44:	e042      	b.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 8006c46:	4b25      	ldr	r3, [pc, #148]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c4a:	2380      	movs	r3, #128	; 0x80
 8006c4c:	045b      	lsls	r3, r3, #17
 8006c4e:	4013      	ands	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	2380      	movs	r3, #128	; 0x80
 8006c56:	045b      	lsls	r3, r3, #17
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d11b      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006c5c:	4b1f      	ldr	r3, [pc, #124]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006c5e:	68da      	ldr	r2, [r3, #12]
 8006c60:	2380      	movs	r3, #128	; 0x80
 8006c62:	045b      	lsls	r3, r3, #17
 8006c64:	4013      	ands	r3, r2
 8006c66:	d033      	beq.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006c68:	4b1c      	ldr	r3, [pc, #112]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	0a1b      	lsrs	r3, r3, #8
 8006c6e:	227f      	movs	r2, #127	; 0x7f
 8006c70:	4013      	ands	r3, r2
 8006c72:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	435a      	muls	r2, r3
 8006c7a:	4b18      	ldr	r3, [pc, #96]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	0e5b      	lsrs	r3, r3, #25
 8006c80:	2107      	movs	r1, #7
 8006c82:	400b      	ands	r3, r1
 8006c84:	3301      	adds	r3, #1
 8006c86:	0019      	movs	r1, r3
 8006c88:	0010      	movs	r0, r2
 8006c8a:	f7f9 fa3b 	bl	8000104 <__udivsi3>
 8006c8e:	0003      	movs	r3, r0
 8006c90:	617b      	str	r3, [r7, #20]
        break;
 8006c92:	e01d      	b.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d11a      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c9a:	f7ff fb0f 	bl	80062bc <HAL_RCC_GetPCLK1Freq>
 8006c9e:	0003      	movs	r3, r0
 8006ca0:	617b      	str	r3, [r7, #20]
        break;
 8006ca2:	e015      	b.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8006ca4:	46c0      	nop			; (mov r8, r8)
 8006ca6:	e014      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006ca8:	46c0      	nop			; (mov r8, r8)
 8006caa:	e012      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006cac:	46c0      	nop			; (mov r8, r8)
 8006cae:	e010      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006cb0:	46c0      	nop			; (mov r8, r8)
 8006cb2:	e00e      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006cb4:	46c0      	nop			; (mov r8, r8)
 8006cb6:	e00c      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006cb8:	46c0      	nop			; (mov r8, r8)
 8006cba:	e00a      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006cbc:	46c0      	nop			; (mov r8, r8)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006cc0:	46c0      	nop			; (mov r8, r8)
 8006cc2:	e006      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006cc4:	46c0      	nop			; (mov r8, r8)
 8006cc6:	e004      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006cc8:	46c0      	nop			; (mov r8, r8)
 8006cca:	e002      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006ccc:	46c0      	nop			; (mov r8, r8)
 8006cce:	e000      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006cd0:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8006cd2:	697b      	ldr	r3, [r7, #20]
}
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	b006      	add	sp, #24
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40021000 	.word	0x40021000
 8006ce0:	00f42400 	.word	0x00f42400
 8006ce4:	0000bb80 	.word	0x0000bb80

08006ce8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e0a8      	b.n	8006e4c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d109      	bne.n	8006d16 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	2382      	movs	r3, #130	; 0x82
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d009      	beq.n	8006d22 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	61da      	str	r2, [r3, #28]
 8006d14:	e005      	b.n	8006d22 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	225d      	movs	r2, #93	; 0x5d
 8006d2c:	5c9b      	ldrb	r3, [r3, r2]
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d107      	bne.n	8006d44 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	225c      	movs	r2, #92	; 0x5c
 8006d38:	2100      	movs	r1, #0
 8006d3a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f7fb ff0c 	bl	8002b5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	225d      	movs	r2, #93	; 0x5d
 8006d48:	2102      	movs	r1, #2
 8006d4a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2140      	movs	r1, #64	; 0x40
 8006d58:	438a      	bics	r2, r1
 8006d5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68da      	ldr	r2, [r3, #12]
 8006d60:	23e0      	movs	r3, #224	; 0xe0
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d902      	bls.n	8006d6e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	e002      	b.n	8006d74 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d6e:	2380      	movs	r3, #128	; 0x80
 8006d70:	015b      	lsls	r3, r3, #5
 8006d72:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	23f0      	movs	r3, #240	; 0xf0
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d008      	beq.n	8006d92 <HAL_SPI_Init+0xaa>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	23e0      	movs	r3, #224	; 0xe0
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d002      	beq.n	8006d92 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	2382      	movs	r3, #130	; 0x82
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	401a      	ands	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6899      	ldr	r1, [r3, #8]
 8006da0:	2384      	movs	r3, #132	; 0x84
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	400b      	ands	r3, r1
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	2102      	movs	r1, #2
 8006dae:	400b      	ands	r3, r1
 8006db0:	431a      	orrs	r2, r3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	2101      	movs	r1, #1
 8006db8:	400b      	ands	r3, r1
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6999      	ldr	r1, [r3, #24]
 8006dc0:	2380      	movs	r3, #128	; 0x80
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	400b      	ands	r3, r1
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	2138      	movs	r1, #56	; 0x38
 8006dce:	400b      	ands	r3, r1
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	2180      	movs	r1, #128	; 0x80
 8006dd8:	400b      	ands	r3, r1
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	0011      	movs	r1, r2
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006de2:	2380      	movs	r3, #128	; 0x80
 8006de4:	019b      	lsls	r3, r3, #6
 8006de6:	401a      	ands	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	0c1b      	lsrs	r3, r3, #16
 8006df6:	2204      	movs	r2, #4
 8006df8:	401a      	ands	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	2110      	movs	r1, #16
 8006e00:	400b      	ands	r3, r1
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e08:	2108      	movs	r1, #8
 8006e0a:	400b      	ands	r3, r1
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68d9      	ldr	r1, [r3, #12]
 8006e12:	23f0      	movs	r3, #240	; 0xf0
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	400b      	ands	r3, r1
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	0011      	movs	r1, r2
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	2380      	movs	r3, #128	; 0x80
 8006e20:	015b      	lsls	r3, r3, #5
 8006e22:	401a      	ands	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69da      	ldr	r2, [r3, #28]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4907      	ldr	r1, [pc, #28]	; (8006e54 <HAL_SPI_Init+0x16c>)
 8006e38:	400a      	ands	r2, r1
 8006e3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	225d      	movs	r2, #93	; 0x5d
 8006e46:	2101      	movs	r1, #1
 8006e48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	b004      	add	sp, #16
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	fffff7ff 	.word	0xfffff7ff

08006e58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b088      	sub	sp, #32
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	1dbb      	adds	r3, r7, #6
 8006e66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e68:	231f      	movs	r3, #31
 8006e6a:	18fb      	adds	r3, r7, r3
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	225c      	movs	r2, #92	; 0x5c
 8006e74:	5c9b      	ldrb	r3, [r3, r2]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d101      	bne.n	8006e7e <HAL_SPI_Transmit+0x26>
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	e140      	b.n	8007100 <HAL_SPI_Transmit+0x2a8>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	225c      	movs	r2, #92	; 0x5c
 8006e82:	2101      	movs	r1, #1
 8006e84:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e86:	f7fc fa07 	bl	8003298 <HAL_GetTick>
 8006e8a:	0003      	movs	r3, r0
 8006e8c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006e8e:	2316      	movs	r3, #22
 8006e90:	18fb      	adds	r3, r7, r3
 8006e92:	1dba      	adds	r2, r7, #6
 8006e94:	8812      	ldrh	r2, [r2, #0]
 8006e96:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	225d      	movs	r2, #93	; 0x5d
 8006e9c:	5c9b      	ldrb	r3, [r3, r2]
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d004      	beq.n	8006eae <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006ea4:	231f      	movs	r3, #31
 8006ea6:	18fb      	adds	r3, r7, r3
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	701a      	strb	r2, [r3, #0]
    goto error;
 8006eac:	e11d      	b.n	80070ea <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <HAL_SPI_Transmit+0x64>
 8006eb4:	1dbb      	adds	r3, r7, #6
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d104      	bne.n	8006ec6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006ebc:	231f      	movs	r3, #31
 8006ebe:	18fb      	adds	r3, r7, r3
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ec4:	e111      	b.n	80070ea <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	225d      	movs	r2, #93	; 0x5d
 8006eca:	2103      	movs	r1, #3
 8006ecc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	1dba      	adds	r2, r7, #6
 8006ede:	8812      	ldrh	r2, [r2, #0]
 8006ee0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	1dba      	adds	r2, r7, #6
 8006ee6:	8812      	ldrh	r2, [r2, #0]
 8006ee8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2244      	movs	r2, #68	; 0x44
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2246      	movs	r2, #70	; 0x46
 8006efc:	2100      	movs	r1, #0
 8006efe:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	2380      	movs	r3, #128	; 0x80
 8006f12:	021b      	lsls	r3, r3, #8
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d110      	bne.n	8006f3a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2140      	movs	r1, #64	; 0x40
 8006f24:	438a      	bics	r2, r1
 8006f26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2180      	movs	r1, #128	; 0x80
 8006f34:	01c9      	lsls	r1, r1, #7
 8006f36:	430a      	orrs	r2, r1
 8006f38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2240      	movs	r2, #64	; 0x40
 8006f42:	4013      	ands	r3, r2
 8006f44:	2b40      	cmp	r3, #64	; 0x40
 8006f46:	d007      	beq.n	8006f58 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2140      	movs	r1, #64	; 0x40
 8006f54:	430a      	orrs	r2, r1
 8006f56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	68da      	ldr	r2, [r3, #12]
 8006f5c:	23e0      	movs	r3, #224	; 0xe0
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d94e      	bls.n	8007002 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <HAL_SPI_Transmit+0x11e>
 8006f6c:	2316      	movs	r3, #22
 8006f6e:	18fb      	adds	r3, r7, r3
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d13f      	bne.n	8006ff6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7a:	881a      	ldrh	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	1c9a      	adds	r2, r3, #2
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f9a:	e02c      	b.n	8006ff6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d112      	bne.n	8006fd0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fae:	881a      	ldrh	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fba:	1c9a      	adds	r2, r3, #2
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fce:	e012      	b.n	8006ff6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fd0:	f7fc f962 	bl	8003298 <HAL_GetTick>
 8006fd4:	0002      	movs	r2, r0
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d802      	bhi.n	8006fe6 <HAL_SPI_Transmit+0x18e>
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	d102      	bne.n	8006fec <HAL_SPI_Transmit+0x194>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d104      	bne.n	8006ff6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006fec:	231f      	movs	r3, #31
 8006fee:	18fb      	adds	r3, r7, r3
 8006ff0:	2203      	movs	r2, #3
 8006ff2:	701a      	strb	r2, [r3, #0]
          goto error;
 8006ff4:	e079      	b.n	80070ea <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1cd      	bne.n	8006f9c <HAL_SPI_Transmit+0x144>
 8007000:	e04f      	b.n	80070a2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <HAL_SPI_Transmit+0x1bc>
 800700a:	2316      	movs	r3, #22
 800700c:	18fb      	adds	r3, r7, r3
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d141      	bne.n	8007098 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	330c      	adds	r3, #12
 800701e:	7812      	ldrb	r2, [r2, #0]
 8007020:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	b29a      	uxth	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800703a:	e02d      	b.n	8007098 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	2202      	movs	r2, #2
 8007044:	4013      	ands	r3, r2
 8007046:	2b02      	cmp	r3, #2
 8007048:	d113      	bne.n	8007072 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	330c      	adds	r3, #12
 8007054:	7812      	ldrb	r2, [r2, #0]
 8007056:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007066:	b29b      	uxth	r3, r3
 8007068:	3b01      	subs	r3, #1
 800706a:	b29a      	uxth	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007070:	e012      	b.n	8007098 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007072:	f7fc f911 	bl	8003298 <HAL_GetTick>
 8007076:	0002      	movs	r2, r0
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d802      	bhi.n	8007088 <HAL_SPI_Transmit+0x230>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	3301      	adds	r3, #1
 8007086:	d102      	bne.n	800708e <HAL_SPI_Transmit+0x236>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d104      	bne.n	8007098 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800708e:	231f      	movs	r3, #31
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	2203      	movs	r2, #3
 8007094:	701a      	strb	r2, [r3, #0]
          goto error;
 8007096:	e028      	b.n	80070ea <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800709c:	b29b      	uxth	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1cc      	bne.n	800703c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	0018      	movs	r0, r3
 80070aa:	f001 f9cb 	bl	8008444 <SPI_EndRxTxTransaction>
 80070ae:	1e03      	subs	r3, r0, #0
 80070b0:	d002      	beq.n	80070b8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2220      	movs	r2, #32
 80070b6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070c0:	2300      	movs	r3, #0
 80070c2:	613b      	str	r3, [r7, #16]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	613b      	str	r3, [r7, #16]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	613b      	str	r3, [r7, #16]
 80070d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d004      	beq.n	80070e8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80070de:	231f      	movs	r3, #31
 80070e0:	18fb      	adds	r3, r7, r3
 80070e2:	2201      	movs	r2, #1
 80070e4:	701a      	strb	r2, [r3, #0]
 80070e6:	e000      	b.n	80070ea <HAL_SPI_Transmit+0x292>
  }

error:
 80070e8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	225d      	movs	r2, #93	; 0x5d
 80070ee:	2101      	movs	r1, #1
 80070f0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	225c      	movs	r2, #92	; 0x5c
 80070f6:	2100      	movs	r1, #0
 80070f8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80070fa:	231f      	movs	r3, #31
 80070fc:	18fb      	adds	r3, r7, r3
 80070fe:	781b      	ldrb	r3, [r3, #0]
}
 8007100:	0018      	movs	r0, r3
 8007102:	46bd      	mov	sp, r7
 8007104:	b008      	add	sp, #32
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007108:	b590      	push	{r4, r7, lr}
 800710a:	b089      	sub	sp, #36	; 0x24
 800710c:	af02      	add	r7, sp, #8
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	1dbb      	adds	r3, r7, #6
 8007116:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007118:	2317      	movs	r3, #23
 800711a:	18fb      	adds	r3, r7, r3
 800711c:	2200      	movs	r2, #0
 800711e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	2382      	movs	r3, #130	; 0x82
 8007126:	005b      	lsls	r3, r3, #1
 8007128:	429a      	cmp	r2, r3
 800712a:	d113      	bne.n	8007154 <HAL_SPI_Receive+0x4c>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10f      	bne.n	8007154 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	225d      	movs	r2, #93	; 0x5d
 8007138:	2104      	movs	r1, #4
 800713a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800713c:	1dbb      	adds	r3, r7, #6
 800713e:	881c      	ldrh	r4, [r3, #0]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	68b9      	ldr	r1, [r7, #8]
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	0023      	movs	r3, r4
 800714c:	f000 f928 	bl	80073a0 <HAL_SPI_TransmitReceive>
 8007150:	0003      	movs	r3, r0
 8007152:	e11c      	b.n	800738e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	225c      	movs	r2, #92	; 0x5c
 8007158:	5c9b      	ldrb	r3, [r3, r2]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d101      	bne.n	8007162 <HAL_SPI_Receive+0x5a>
 800715e:	2302      	movs	r3, #2
 8007160:	e115      	b.n	800738e <HAL_SPI_Receive+0x286>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	225c      	movs	r2, #92	; 0x5c
 8007166:	2101      	movs	r1, #1
 8007168:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800716a:	f7fc f895 	bl	8003298 <HAL_GetTick>
 800716e:	0003      	movs	r3, r0
 8007170:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	225d      	movs	r2, #93	; 0x5d
 8007176:	5c9b      	ldrb	r3, [r3, r2]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b01      	cmp	r3, #1
 800717c:	d004      	beq.n	8007188 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800717e:	2317      	movs	r3, #23
 8007180:	18fb      	adds	r3, r7, r3
 8007182:	2202      	movs	r2, #2
 8007184:	701a      	strb	r2, [r3, #0]
    goto error;
 8007186:	e0f7      	b.n	8007378 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <HAL_SPI_Receive+0x8e>
 800718e:	1dbb      	adds	r3, r7, #6
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d104      	bne.n	80071a0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8007196:	2317      	movs	r3, #23
 8007198:	18fb      	adds	r3, r7, r3
 800719a:	2201      	movs	r2, #1
 800719c:	701a      	strb	r2, [r3, #0]
    goto error;
 800719e:	e0eb      	b.n	8007378 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	225d      	movs	r2, #93	; 0x5d
 80071a4:	2104      	movs	r1, #4
 80071a6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	1dba      	adds	r2, r7, #6
 80071b8:	2144      	movs	r1, #68	; 0x44
 80071ba:	8812      	ldrh	r2, [r2, #0]
 80071bc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	1dba      	adds	r2, r7, #6
 80071c2:	2146      	movs	r1, #70	; 0x46
 80071c4:	8812      	ldrh	r2, [r2, #0]
 80071c6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	68da      	ldr	r2, [r3, #12]
 80071ea:	23e0      	movs	r3, #224	; 0xe0
 80071ec:	00db      	lsls	r3, r3, #3
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d908      	bls.n	8007204 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4966      	ldr	r1, [pc, #408]	; (8007398 <HAL_SPI_Receive+0x290>)
 80071fe:	400a      	ands	r2, r1
 8007200:	605a      	str	r2, [r3, #4]
 8007202:	e008      	b.n	8007216 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2180      	movs	r1, #128	; 0x80
 8007210:	0149      	lsls	r1, r1, #5
 8007212:	430a      	orrs	r2, r1
 8007214:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	689a      	ldr	r2, [r3, #8]
 800721a:	2380      	movs	r3, #128	; 0x80
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	429a      	cmp	r2, r3
 8007220:	d10f      	bne.n	8007242 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2140      	movs	r1, #64	; 0x40
 800722e:	438a      	bics	r2, r1
 8007230:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4957      	ldr	r1, [pc, #348]	; (800739c <HAL_SPI_Receive+0x294>)
 800723e:	400a      	ands	r2, r1
 8007240:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2240      	movs	r2, #64	; 0x40
 800724a:	4013      	ands	r3, r2
 800724c:	2b40      	cmp	r3, #64	; 0x40
 800724e:	d007      	beq.n	8007260 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2140      	movs	r1, #64	; 0x40
 800725c:	430a      	orrs	r2, r1
 800725e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	23e0      	movs	r3, #224	; 0xe0
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	429a      	cmp	r2, r3
 800726a:	d900      	bls.n	800726e <HAL_SPI_Receive+0x166>
 800726c:	e069      	b.n	8007342 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800726e:	e031      	b.n	80072d4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2201      	movs	r2, #1
 8007278:	4013      	ands	r3, r2
 800727a:	2b01      	cmp	r3, #1
 800727c:	d117      	bne.n	80072ae <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	330c      	adds	r3, #12
 8007284:	001a      	movs	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	7812      	ldrb	r2, [r2, #0]
 800728c:	b2d2      	uxtb	r2, r2
 800728e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2246      	movs	r2, #70	; 0x46
 800729e:	5a9b      	ldrh	r3, [r3, r2]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b299      	uxth	r1, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2246      	movs	r2, #70	; 0x46
 80072aa:	5299      	strh	r1, [r3, r2]
 80072ac:	e012      	b.n	80072d4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072ae:	f7fb fff3 	bl	8003298 <HAL_GetTick>
 80072b2:	0002      	movs	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d802      	bhi.n	80072c4 <HAL_SPI_Receive+0x1bc>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	3301      	adds	r3, #1
 80072c2:	d102      	bne.n	80072ca <HAL_SPI_Receive+0x1c2>
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d104      	bne.n	80072d4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80072ca:	2317      	movs	r3, #23
 80072cc:	18fb      	adds	r3, r7, r3
 80072ce:	2203      	movs	r2, #3
 80072d0:	701a      	strb	r2, [r3, #0]
          goto error;
 80072d2:	e051      	b.n	8007378 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2246      	movs	r2, #70	; 0x46
 80072d8:	5a9b      	ldrh	r3, [r3, r2]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1c7      	bne.n	8007270 <HAL_SPI_Receive+0x168>
 80072e0:	e035      	b.n	800734e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	2201      	movs	r2, #1
 80072ea:	4013      	ands	r3, r2
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d115      	bne.n	800731c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	b292      	uxth	r2, r2
 80072fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	1c9a      	adds	r2, r3, #2
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2246      	movs	r2, #70	; 0x46
 800730c:	5a9b      	ldrh	r3, [r3, r2]
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b299      	uxth	r1, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2246      	movs	r2, #70	; 0x46
 8007318:	5299      	strh	r1, [r3, r2]
 800731a:	e012      	b.n	8007342 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800731c:	f7fb ffbc 	bl	8003298 <HAL_GetTick>
 8007320:	0002      	movs	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d802      	bhi.n	8007332 <HAL_SPI_Receive+0x22a>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	3301      	adds	r3, #1
 8007330:	d102      	bne.n	8007338 <HAL_SPI_Receive+0x230>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d104      	bne.n	8007342 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8007338:	2317      	movs	r3, #23
 800733a:	18fb      	adds	r3, r7, r3
 800733c:	2203      	movs	r2, #3
 800733e:	701a      	strb	r2, [r3, #0]
          goto error;
 8007340:	e01a      	b.n	8007378 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2246      	movs	r2, #70	; 0x46
 8007346:	5a9b      	ldrh	r3, [r3, r2]
 8007348:	b29b      	uxth	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1c9      	bne.n	80072e2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	0018      	movs	r0, r3
 8007356:	f001 f817 	bl	8008388 <SPI_EndRxTransaction>
 800735a:	1e03      	subs	r3, r0, #0
 800735c:	d002      	beq.n	8007364 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2220      	movs	r2, #32
 8007362:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007368:	2b00      	cmp	r3, #0
 800736a:	d004      	beq.n	8007376 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800736c:	2317      	movs	r3, #23
 800736e:	18fb      	adds	r3, r7, r3
 8007370:	2201      	movs	r2, #1
 8007372:	701a      	strb	r2, [r3, #0]
 8007374:	e000      	b.n	8007378 <HAL_SPI_Receive+0x270>
  }

error :
 8007376:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	225d      	movs	r2, #93	; 0x5d
 800737c:	2101      	movs	r1, #1
 800737e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	225c      	movs	r2, #92	; 0x5c
 8007384:	2100      	movs	r1, #0
 8007386:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007388:	2317      	movs	r3, #23
 800738a:	18fb      	adds	r3, r7, r3
 800738c:	781b      	ldrb	r3, [r3, #0]
}
 800738e:	0018      	movs	r0, r3
 8007390:	46bd      	mov	sp, r7
 8007392:	b007      	add	sp, #28
 8007394:	bd90      	pop	{r4, r7, pc}
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	ffffefff 	.word	0xffffefff
 800739c:	ffffbfff 	.word	0xffffbfff

080073a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08a      	sub	sp, #40	; 0x28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	001a      	movs	r2, r3
 80073ae:	1cbb      	adds	r3, r7, #2
 80073b0:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80073b2:	2301      	movs	r3, #1
 80073b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80073b6:	2323      	movs	r3, #35	; 0x23
 80073b8:	18fb      	adds	r3, r7, r3
 80073ba:	2200      	movs	r2, #0
 80073bc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	225c      	movs	r2, #92	; 0x5c
 80073c2:	5c9b      	ldrb	r3, [r3, r2]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d101      	bne.n	80073cc <HAL_SPI_TransmitReceive+0x2c>
 80073c8:	2302      	movs	r3, #2
 80073ca:	e1b5      	b.n	8007738 <HAL_SPI_TransmitReceive+0x398>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	225c      	movs	r2, #92	; 0x5c
 80073d0:	2101      	movs	r1, #1
 80073d2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073d4:	f7fb ff60 	bl	8003298 <HAL_GetTick>
 80073d8:	0003      	movs	r3, r0
 80073da:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80073dc:	201b      	movs	r0, #27
 80073de:	183b      	adds	r3, r7, r0
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	215d      	movs	r1, #93	; 0x5d
 80073e4:	5c52      	ldrb	r2, [r2, r1]
 80073e6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80073ee:	2312      	movs	r3, #18
 80073f0:	18fb      	adds	r3, r7, r3
 80073f2:	1cba      	adds	r2, r7, #2
 80073f4:	8812      	ldrh	r2, [r2, #0]
 80073f6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073f8:	183b      	adds	r3, r7, r0
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d011      	beq.n	8007424 <HAL_SPI_TransmitReceive+0x84>
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	2382      	movs	r3, #130	; 0x82
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	429a      	cmp	r2, r3
 8007408:	d107      	bne.n	800741a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d103      	bne.n	800741a <HAL_SPI_TransmitReceive+0x7a>
 8007412:	183b      	adds	r3, r7, r0
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b04      	cmp	r3, #4
 8007418:	d004      	beq.n	8007424 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800741a:	2323      	movs	r3, #35	; 0x23
 800741c:	18fb      	adds	r3, r7, r3
 800741e:	2202      	movs	r2, #2
 8007420:	701a      	strb	r2, [r3, #0]
    goto error;
 8007422:	e17e      	b.n	8007722 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d006      	beq.n	8007438 <HAL_SPI_TransmitReceive+0x98>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <HAL_SPI_TransmitReceive+0x98>
 8007430:	1cbb      	adds	r3, r7, #2
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d104      	bne.n	8007442 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007438:	2323      	movs	r3, #35	; 0x23
 800743a:	18fb      	adds	r3, r7, r3
 800743c:	2201      	movs	r2, #1
 800743e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007440:	e16f      	b.n	8007722 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	225d      	movs	r2, #93	; 0x5d
 8007446:	5c9b      	ldrb	r3, [r3, r2]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b04      	cmp	r3, #4
 800744c:	d003      	beq.n	8007456 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	225d      	movs	r2, #93	; 0x5d
 8007452:	2105      	movs	r1, #5
 8007454:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	1cba      	adds	r2, r7, #2
 8007466:	2146      	movs	r1, #70	; 0x46
 8007468:	8812      	ldrh	r2, [r2, #0]
 800746a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	1cba      	adds	r2, r7, #2
 8007470:	2144      	movs	r1, #68	; 0x44
 8007472:	8812      	ldrh	r2, [r2, #0]
 8007474:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	1cba      	adds	r2, r7, #2
 8007480:	8812      	ldrh	r2, [r2, #0]
 8007482:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	1cba      	adds	r2, r7, #2
 8007488:	8812      	ldrh	r2, [r2, #0]
 800748a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	68da      	ldr	r2, [r3, #12]
 800749c:	23e0      	movs	r3, #224	; 0xe0
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d908      	bls.n	80074b6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	49a4      	ldr	r1, [pc, #656]	; (8007740 <HAL_SPI_TransmitReceive+0x3a0>)
 80074b0:	400a      	ands	r2, r1
 80074b2:	605a      	str	r2, [r3, #4]
 80074b4:	e008      	b.n	80074c8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2180      	movs	r1, #128	; 0x80
 80074c2:	0149      	lsls	r1, r1, #5
 80074c4:	430a      	orrs	r2, r1
 80074c6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2240      	movs	r2, #64	; 0x40
 80074d0:	4013      	ands	r3, r2
 80074d2:	2b40      	cmp	r3, #64	; 0x40
 80074d4:	d007      	beq.n	80074e6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2140      	movs	r1, #64	; 0x40
 80074e2:	430a      	orrs	r2, r1
 80074e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	23e0      	movs	r3, #224	; 0xe0
 80074ec:	00db      	lsls	r3, r3, #3
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d800      	bhi.n	80074f4 <HAL_SPI_TransmitReceive+0x154>
 80074f2:	e07f      	b.n	80075f4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d005      	beq.n	8007508 <HAL_SPI_TransmitReceive+0x168>
 80074fc:	2312      	movs	r3, #18
 80074fe:	18fb      	adds	r3, r7, r3
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d000      	beq.n	8007508 <HAL_SPI_TransmitReceive+0x168>
 8007506:	e069      	b.n	80075dc <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750c:	881a      	ldrh	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007518:	1c9a      	adds	r2, r3, #2
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007522:	b29b      	uxth	r3, r3
 8007524:	3b01      	subs	r3, #1
 8007526:	b29a      	uxth	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800752c:	e056      	b.n	80075dc <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	2202      	movs	r2, #2
 8007536:	4013      	ands	r3, r2
 8007538:	2b02      	cmp	r3, #2
 800753a:	d11b      	bne.n	8007574 <HAL_SPI_TransmitReceive+0x1d4>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007540:	b29b      	uxth	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d016      	beq.n	8007574 <HAL_SPI_TransmitReceive+0x1d4>
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	2b01      	cmp	r3, #1
 800754a:	d113      	bne.n	8007574 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007550:	881a      	ldrh	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	1c9a      	adds	r2, r3, #2
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007566:	b29b      	uxth	r3, r3
 8007568:	3b01      	subs	r3, #1
 800756a:	b29a      	uxth	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	2201      	movs	r2, #1
 800757c:	4013      	ands	r3, r2
 800757e:	2b01      	cmp	r3, #1
 8007580:	d11c      	bne.n	80075bc <HAL_SPI_TransmitReceive+0x21c>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2246      	movs	r2, #70	; 0x46
 8007586:	5a9b      	ldrh	r3, [r3, r2]
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d016      	beq.n	80075bc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68da      	ldr	r2, [r3, #12]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	b292      	uxth	r2, r2
 800759a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	1c9a      	adds	r2, r3, #2
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2246      	movs	r2, #70	; 0x46
 80075aa:	5a9b      	ldrh	r3, [r3, r2]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b299      	uxth	r1, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2246      	movs	r2, #70	; 0x46
 80075b6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075b8:	2301      	movs	r3, #1
 80075ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80075bc:	f7fb fe6c 	bl	8003298 <HAL_GetTick>
 80075c0:	0002      	movs	r2, r0
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d807      	bhi.n	80075dc <HAL_SPI_TransmitReceive+0x23c>
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	3301      	adds	r3, #1
 80075d0:	d004      	beq.n	80075dc <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80075d2:	2323      	movs	r3, #35	; 0x23
 80075d4:	18fb      	adds	r3, r7, r3
 80075d6:	2203      	movs	r2, #3
 80075d8:	701a      	strb	r2, [r3, #0]
        goto error;
 80075da:	e0a2      	b.n	8007722 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1a3      	bne.n	800752e <HAL_SPI_TransmitReceive+0x18e>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2246      	movs	r2, #70	; 0x46
 80075ea:	5a9b      	ldrh	r3, [r3, r2]
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d19d      	bne.n	800752e <HAL_SPI_TransmitReceive+0x18e>
 80075f2:	e085      	b.n	8007700 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d005      	beq.n	8007608 <HAL_SPI_TransmitReceive+0x268>
 80075fc:	2312      	movs	r3, #18
 80075fe:	18fb      	adds	r3, r7, r3
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d000      	beq.n	8007608 <HAL_SPI_TransmitReceive+0x268>
 8007606:	e070      	b.n	80076ea <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	330c      	adds	r3, #12
 8007612:	7812      	ldrb	r2, [r2, #0]
 8007614:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007624:	b29b      	uxth	r3, r3
 8007626:	3b01      	subs	r3, #1
 8007628:	b29a      	uxth	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800762e:	e05c      	b.n	80076ea <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	2202      	movs	r2, #2
 8007638:	4013      	ands	r3, r2
 800763a:	2b02      	cmp	r3, #2
 800763c:	d11c      	bne.n	8007678 <HAL_SPI_TransmitReceive+0x2d8>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007642:	b29b      	uxth	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	d017      	beq.n	8007678 <HAL_SPI_TransmitReceive+0x2d8>
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	2b01      	cmp	r3, #1
 800764c:	d114      	bne.n	8007678 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	330c      	adds	r3, #12
 8007658:	7812      	ldrb	r2, [r2, #0]
 800765a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2201      	movs	r2, #1
 8007680:	4013      	ands	r3, r2
 8007682:	2b01      	cmp	r3, #1
 8007684:	d11e      	bne.n	80076c4 <HAL_SPI_TransmitReceive+0x324>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2246      	movs	r2, #70	; 0x46
 800768a:	5a9b      	ldrh	r3, [r3, r2]
 800768c:	b29b      	uxth	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d018      	beq.n	80076c4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	330c      	adds	r3, #12
 8007698:	001a      	movs	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	7812      	ldrb	r2, [r2, #0]
 80076a0:	b2d2      	uxtb	r2, r2
 80076a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2246      	movs	r2, #70	; 0x46
 80076b2:	5a9b      	ldrh	r3, [r3, r2]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	3b01      	subs	r3, #1
 80076b8:	b299      	uxth	r1, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2246      	movs	r2, #70	; 0x46
 80076be:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076c0:	2301      	movs	r3, #1
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80076c4:	f7fb fde8 	bl	8003298 <HAL_GetTick>
 80076c8:	0002      	movs	r2, r0
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d802      	bhi.n	80076da <HAL_SPI_TransmitReceive+0x33a>
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	3301      	adds	r3, #1
 80076d8:	d102      	bne.n	80076e0 <HAL_SPI_TransmitReceive+0x340>
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80076e0:	2323      	movs	r3, #35	; 0x23
 80076e2:	18fb      	adds	r3, r7, r3
 80076e4:	2203      	movs	r2, #3
 80076e6:	701a      	strb	r2, [r3, #0]
        goto error;
 80076e8:	e01b      	b.n	8007722 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d19d      	bne.n	8007630 <HAL_SPI_TransmitReceive+0x290>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2246      	movs	r2, #70	; 0x46
 80076f8:	5a9b      	ldrh	r3, [r3, r2]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d197      	bne.n	8007630 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007700:	69fa      	ldr	r2, [r7, #28]
 8007702:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	0018      	movs	r0, r3
 8007708:	f000 fe9c 	bl	8008444 <SPI_EndRxTxTransaction>
 800770c:	1e03      	subs	r3, r0, #0
 800770e:	d007      	beq.n	8007720 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8007710:	2323      	movs	r3, #35	; 0x23
 8007712:	18fb      	adds	r3, r7, r3
 8007714:	2201      	movs	r2, #1
 8007716:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2220      	movs	r2, #32
 800771c:	661a      	str	r2, [r3, #96]	; 0x60
 800771e:	e000      	b.n	8007722 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8007720:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	225d      	movs	r2, #93	; 0x5d
 8007726:	2101      	movs	r1, #1
 8007728:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	225c      	movs	r2, #92	; 0x5c
 800772e:	2100      	movs	r1, #0
 8007730:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007732:	2323      	movs	r3, #35	; 0x23
 8007734:	18fb      	adds	r3, r7, r3
 8007736:	781b      	ldrb	r3, [r3, #0]
}
 8007738:	0018      	movs	r0, r3
 800773a:	46bd      	mov	sp, r7
 800773c:	b00a      	add	sp, #40	; 0x28
 800773e:	bd80      	pop	{r7, pc}
 8007740:	ffffefff 	.word	0xffffefff

08007744 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007744:	b590      	push	{r4, r7, lr}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	1dbb      	adds	r3, r7, #6
 8007750:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007752:	2317      	movs	r3, #23
 8007754:	18fb      	adds	r3, r7, r3
 8007756:	2200      	movs	r2, #0
 8007758:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d112      	bne.n	8007788 <HAL_SPI_Receive_DMA+0x44>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	2382      	movs	r3, #130	; 0x82
 8007768:	005b      	lsls	r3, r3, #1
 800776a:	429a      	cmp	r2, r3
 800776c:	d10c      	bne.n	8007788 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	225d      	movs	r2, #93	; 0x5d
 8007772:	2104      	movs	r1, #4
 8007774:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007776:	1dbb      	adds	r3, r7, #6
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	68b9      	ldr	r1, [r7, #8]
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 f91e 	bl	80079c0 <HAL_SPI_TransmitReceive_DMA>
 8007784:	0003      	movs	r3, r0
 8007786:	e10b      	b.n	80079a0 <HAL_SPI_Receive_DMA+0x25c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	225c      	movs	r2, #92	; 0x5c
 800778c:	5c9b      	ldrb	r3, [r3, r2]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_SPI_Receive_DMA+0x52>
 8007792:	2302      	movs	r3, #2
 8007794:	e104      	b.n	80079a0 <HAL_SPI_Receive_DMA+0x25c>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	225c      	movs	r2, #92	; 0x5c
 800779a:	2101      	movs	r1, #1
 800779c:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	225d      	movs	r2, #93	; 0x5d
 80077a2:	5c9b      	ldrb	r3, [r3, r2]
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d004      	beq.n	80077b4 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80077aa:	2317      	movs	r3, #23
 80077ac:	18fb      	adds	r3, r7, r3
 80077ae:	2202      	movs	r2, #2
 80077b0:	701a      	strb	r2, [r3, #0]
    goto error;
 80077b2:	e0ee      	b.n	8007992 <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_SPI_Receive_DMA+0x7e>
 80077ba:	1dbb      	adds	r3, r7, #6
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d104      	bne.n	80077cc <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 80077c2:	2317      	movs	r3, #23
 80077c4:	18fb      	adds	r3, r7, r3
 80077c6:	2201      	movs	r2, #1
 80077c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80077ca:	e0e2      	b.n	8007992 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	225d      	movs	r2, #93	; 0x5d
 80077d0:	2104      	movs	r1, #4
 80077d2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	1dba      	adds	r2, r7, #6
 80077e4:	2144      	movs	r1, #68	; 0x44
 80077e6:	8812      	ldrh	r2, [r2, #0]
 80077e8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	1dba      	adds	r2, r7, #6
 80077ee:	2146      	movs	r1, #70	; 0x46
 80077f0:	8812      	ldrh	r2, [r2, #0]
 80077f2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	2380      	movs	r3, #128	; 0x80
 8007812:	021b      	lsls	r3, r3, #8
 8007814:	429a      	cmp	r2, r3
 8007816:	d10f      	bne.n	8007838 <HAL_SPI_Receive_DMA+0xf4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2140      	movs	r1, #64	; 0x40
 8007824:	438a      	bics	r2, r1
 8007826:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	495d      	ldr	r1, [pc, #372]	; (80079a8 <HAL_SPI_Receive_DMA+0x264>)
 8007834:	400a      	ands	r2, r1
 8007836:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	495a      	ldr	r1, [pc, #360]	; (80079ac <HAL_SPI_Receive_DMA+0x268>)
 8007844:	400a      	ands	r2, r1
 8007846:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	23e0      	movs	r3, #224	; 0xe0
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	429a      	cmp	r2, r3
 8007852:	d908      	bls.n	8007866 <HAL_SPI_Receive_DMA+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4954      	ldr	r1, [pc, #336]	; (80079b0 <HAL_SPI_Receive_DMA+0x26c>)
 8007860:	400a      	ands	r2, r1
 8007862:	605a      	str	r2, [r3, #4]
 8007864:	e045      	b.n	80078f2 <HAL_SPI_Receive_DMA+0x1ae>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2180      	movs	r1, #128	; 0x80
 8007872:	0149      	lsls	r1, r1, #5
 8007874:	430a      	orrs	r2, r1
 8007876:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800787c:	699a      	ldr	r2, [r3, #24]
 800787e:	2380      	movs	r3, #128	; 0x80
 8007880:	00db      	lsls	r3, r3, #3
 8007882:	429a      	cmp	r2, r3
 8007884:	d135      	bne.n	80078f2 <HAL_SPI_Receive_DMA+0x1ae>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4947      	ldr	r1, [pc, #284]	; (80079b0 <HAL_SPI_Receive_DMA+0x26c>)
 8007892:	400a      	ands	r2, r1
 8007894:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2246      	movs	r2, #70	; 0x46
 800789a:	5a9b      	ldrh	r3, [r3, r2]
 800789c:	b29b      	uxth	r3, r3
 800789e:	001a      	movs	r2, r3
 80078a0:	2301      	movs	r3, #1
 80078a2:	4013      	ands	r3, r2
 80078a4:	d111      	bne.n	80078ca <HAL_SPI_Receive_DMA+0x186>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	493e      	ldr	r1, [pc, #248]	; (80079ac <HAL_SPI_Receive_DMA+0x268>)
 80078b2:	400a      	ands	r2, r1
 80078b4:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2246      	movs	r2, #70	; 0x46
 80078ba:	5a9b      	ldrh	r3, [r3, r2]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	085b      	lsrs	r3, r3, #1
 80078c0:	b299      	uxth	r1, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2246      	movs	r2, #70	; 0x46
 80078c6:	5299      	strh	r1, [r3, r2]
 80078c8:	e013      	b.n	80078f2 <HAL_SPI_Receive_DMA+0x1ae>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2180      	movs	r1, #128	; 0x80
 80078d6:	0189      	lsls	r1, r1, #6
 80078d8:	430a      	orrs	r2, r1
 80078da:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2246      	movs	r2, #70	; 0x46
 80078e0:	5a9b      	ldrh	r3, [r3, r2]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	085b      	lsrs	r3, r3, #1
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	3301      	adds	r3, #1
 80078ea:	b299      	uxth	r1, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2246      	movs	r2, #70	; 0x46
 80078f0:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f6:	4a2f      	ldr	r2, [pc, #188]	; (80079b4 <HAL_SPI_Receive_DMA+0x270>)
 80078f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fe:	4a2e      	ldr	r2, [pc, #184]	; (80079b8 <HAL_SPI_Receive_DMA+0x274>)
 8007900:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007906:	4a2d      	ldr	r2, [pc, #180]	; (80079bc <HAL_SPI_Receive_DMA+0x278>)
 8007908:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800790e:	2200      	movs	r2, #0
 8007910:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	330c      	adds	r3, #12
 800791c:	0019      	movs	r1, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2246      	movs	r2, #70	; 0x46
 8007928:	5a9b      	ldrh	r3, [r3, r2]
 800792a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800792c:	0022      	movs	r2, r4
 800792e:	f7fc f8bf 	bl	8003ab0 <HAL_DMA_Start_IT>
 8007932:	1e03      	subs	r3, r0, #0
 8007934:	d00e      	beq.n	8007954 <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800793a:	2210      	movs	r2, #16
 800793c:	431a      	orrs	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007942:	2317      	movs	r3, #23
 8007944:	18fb      	adds	r3, r7, r3
 8007946:	2201      	movs	r2, #1
 8007948:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	225d      	movs	r2, #93	; 0x5d
 800794e:	2101      	movs	r1, #1
 8007950:	5499      	strb	r1, [r3, r2]
    goto error;
 8007952:	e01e      	b.n	8007992 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2240      	movs	r2, #64	; 0x40
 800795c:	4013      	ands	r3, r2
 800795e:	2b40      	cmp	r3, #64	; 0x40
 8007960:	d007      	beq.n	8007972 <HAL_SPI_Receive_DMA+0x22e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2140      	movs	r1, #64	; 0x40
 800796e:	430a      	orrs	r2, r1
 8007970:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2120      	movs	r1, #32
 800797e:	430a      	orrs	r2, r1
 8007980:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2101      	movs	r1, #1
 800798e:	430a      	orrs	r2, r1
 8007990:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	225c      	movs	r2, #92	; 0x5c
 8007996:	2100      	movs	r1, #0
 8007998:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800799a:	2317      	movs	r3, #23
 800799c:	18fb      	adds	r3, r7, r3
 800799e:	781b      	ldrb	r3, [r3, #0]
}
 80079a0:	0018      	movs	r0, r3
 80079a2:	46bd      	mov	sp, r7
 80079a4:	b007      	add	sp, #28
 80079a6:	bd90      	pop	{r4, r7, pc}
 80079a8:	ffffbfff 	.word	0xffffbfff
 80079ac:	ffffdfff 	.word	0xffffdfff
 80079b0:	ffffefff 	.word	0xffffefff
 80079b4:	08008097 	.word	0x08008097
 80079b8:	08007f51 	.word	0x08007f51
 80079bc:	080080d3 	.word	0x080080d3

080079c0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80079c0:	b590      	push	{r4, r7, lr}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	001a      	movs	r2, r3
 80079ce:	1cbb      	adds	r3, r7, #2
 80079d0:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079d2:	2317      	movs	r3, #23
 80079d4:	18fb      	adds	r3, r7, r3
 80079d6:	2200      	movs	r2, #0
 80079d8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	225c      	movs	r2, #92	; 0x5c
 80079de:	5c9b      	ldrb	r3, [r3, r2]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <HAL_SPI_TransmitReceive_DMA+0x28>
 80079e4:	2302      	movs	r3, #2
 80079e6:	e186      	b.n	8007cf6 <HAL_SPI_TransmitReceive_DMA+0x336>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	225c      	movs	r2, #92	; 0x5c
 80079ec:	2101      	movs	r1, #1
 80079ee:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079f0:	2016      	movs	r0, #22
 80079f2:	183b      	adds	r3, r7, r0
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	215d      	movs	r1, #93	; 0x5d
 80079f8:	5c52      	ldrb	r2, [r2, r1]
 80079fa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007a02:	0001      	movs	r1, r0
 8007a04:	187b      	adds	r3, r7, r1
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d011      	beq.n	8007a30 <HAL_SPI_TransmitReceive_DMA+0x70>
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	2382      	movs	r3, #130	; 0x82
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d107      	bne.n	8007a26 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d103      	bne.n	8007a26 <HAL_SPI_TransmitReceive_DMA+0x66>
 8007a1e:	187b      	adds	r3, r7, r1
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d004      	beq.n	8007a30 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8007a26:	2317      	movs	r3, #23
 8007a28:	18fb      	adds	r3, r7, r3
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	701a      	strb	r2, [r3, #0]
    goto error;
 8007a2e:	e15b      	b.n	8007ce8 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d006      	beq.n	8007a44 <HAL_SPI_TransmitReceive_DMA+0x84>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <HAL_SPI_TransmitReceive_DMA+0x84>
 8007a3c:	1cbb      	adds	r3, r7, #2
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d104      	bne.n	8007a4e <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8007a44:	2317      	movs	r3, #23
 8007a46:	18fb      	adds	r3, r7, r3
 8007a48:	2201      	movs	r2, #1
 8007a4a:	701a      	strb	r2, [r3, #0]
    goto error;
 8007a4c:	e14c      	b.n	8007ce8 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	225d      	movs	r2, #93	; 0x5d
 8007a52:	5c9b      	ldrb	r3, [r3, r2]
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	d003      	beq.n	8007a62 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	225d      	movs	r2, #93	; 0x5d
 8007a5e:	2105      	movs	r1, #5
 8007a60:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	1cba      	adds	r2, r7, #2
 8007a72:	8812      	ldrh	r2, [r2, #0]
 8007a74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	1cba      	adds	r2, r7, #2
 8007a7a:	8812      	ldrh	r2, [r2, #0]
 8007a7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	1cba      	adds	r2, r7, #2
 8007a88:	2144      	movs	r1, #68	; 0x44
 8007a8a:	8812      	ldrh	r2, [r2, #0]
 8007a8c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	1cba      	adds	r2, r7, #2
 8007a92:	2146      	movs	r1, #70	; 0x46
 8007a94:	8812      	ldrh	r2, [r2, #0]
 8007a96:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4994      	ldr	r1, [pc, #592]	; (8007d00 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8007ab0:	400a      	ands	r2, r1
 8007ab2:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	68da      	ldr	r2, [r3, #12]
 8007ab8:	23e0      	movs	r3, #224	; 0xe0
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d908      	bls.n	8007ad2 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	498e      	ldr	r1, [pc, #568]	; (8007d04 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8007acc:	400a      	ands	r2, r1
 8007ace:	605a      	str	r2, [r3, #4]
 8007ad0:	e074      	b.n	8007bbc <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2180      	movs	r1, #128	; 0x80
 8007ade:	0149      	lsls	r1, r1, #5
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae8:	699a      	ldr	r2, [r3, #24]
 8007aea:	2380      	movs	r3, #128	; 0x80
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d127      	bne.n	8007b42 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007af6:	001a      	movs	r2, r3
 8007af8:	2301      	movs	r3, #1
 8007afa:	4013      	ands	r3, r2
 8007afc:	d10f      	bne.n	8007b1e <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	497f      	ldr	r1, [pc, #508]	; (8007d08 <HAL_SPI_TransmitReceive_DMA+0x348>)
 8007b0a:	400a      	ands	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	085b      	lsrs	r3, r3, #1
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b1c:	e011      	b.n	8007b42 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2180      	movs	r1, #128	; 0x80
 8007b2a:	01c9      	lsls	r1, r1, #7
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	085b      	lsrs	r3, r3, #1
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b46:	699a      	ldr	r2, [r3, #24]
 8007b48:	2380      	movs	r3, #128	; 0x80
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d135      	bne.n	8007bbc <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	496a      	ldr	r1, [pc, #424]	; (8007d04 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8007b5c:	400a      	ands	r2, r1
 8007b5e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2246      	movs	r2, #70	; 0x46
 8007b64:	5a9b      	ldrh	r3, [r3, r2]
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	001a      	movs	r2, r3
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	d111      	bne.n	8007b94 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4964      	ldr	r1, [pc, #400]	; (8007d0c <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8007b7c:	400a      	ands	r2, r1
 8007b7e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2246      	movs	r2, #70	; 0x46
 8007b84:	5a9b      	ldrh	r3, [r3, r2]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	085b      	lsrs	r3, r3, #1
 8007b8a:	b299      	uxth	r1, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2246      	movs	r2, #70	; 0x46
 8007b90:	5299      	strh	r1, [r3, r2]
 8007b92:	e013      	b.n	8007bbc <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2180      	movs	r1, #128	; 0x80
 8007ba0:	0189      	lsls	r1, r1, #6
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2246      	movs	r2, #70	; 0x46
 8007baa:	5a9b      	ldrh	r3, [r3, r2]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	085b      	lsrs	r3, r3, #1
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	b299      	uxth	r1, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2246      	movs	r2, #70	; 0x46
 8007bba:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	225d      	movs	r2, #93	; 0x5d
 8007bc0:	5c9b      	ldrb	r3, [r3, r2]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b04      	cmp	r3, #4
 8007bc6:	d108      	bne.n	8007bda <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bcc:	4a50      	ldr	r2, [pc, #320]	; (8007d10 <HAL_SPI_TransmitReceive_DMA+0x350>)
 8007bce:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd4:	4a4f      	ldr	r2, [pc, #316]	; (8007d14 <HAL_SPI_TransmitReceive_DMA+0x354>)
 8007bd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8007bd8:	e007      	b.n	8007bea <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bde:	4a4e      	ldr	r2, [pc, #312]	; (8007d18 <HAL_SPI_TransmitReceive_DMA+0x358>)
 8007be0:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be6:	4a4d      	ldr	r2, [pc, #308]	; (8007d1c <HAL_SPI_TransmitReceive_DMA+0x35c>)
 8007be8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bee:	4a4c      	ldr	r2, [pc, #304]	; (8007d20 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8007bf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	330c      	adds	r3, #12
 8007c04:	0019      	movs	r1, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0a:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2246      	movs	r2, #70	; 0x46
 8007c10:	5a9b      	ldrh	r3, [r3, r2]
 8007c12:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007c14:	0022      	movs	r2, r4
 8007c16:	f7fb ff4b 	bl	8003ab0 <HAL_DMA_Start_IT>
 8007c1a:	1e03      	subs	r3, r0, #0
 8007c1c:	d00e      	beq.n	8007c3c <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c22:	2210      	movs	r2, #16
 8007c24:	431a      	orrs	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007c2a:	2317      	movs	r3, #23
 8007c2c:	18fb      	adds	r3, r7, r3
 8007c2e:	2201      	movs	r2, #1
 8007c30:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	225d      	movs	r2, #93	; 0x5d
 8007c36:	2101      	movs	r1, #1
 8007c38:	5499      	strb	r1, [r3, r2]
    goto error;
 8007c3a:	e055      	b.n	8007ce8 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2101      	movs	r1, #1
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c50:	2200      	movs	r2, #0
 8007c52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c58:	2200      	movs	r2, #0
 8007c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c60:	2200      	movs	r2, #0
 8007c62:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c68:	2200      	movs	r2, #0
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	0019      	movs	r1, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	330c      	adds	r3, #12
 8007c7c:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c82:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c84:	f7fb ff14 	bl	8003ab0 <HAL_DMA_Start_IT>
 8007c88:	1e03      	subs	r3, r0, #0
 8007c8a:	d00e      	beq.n	8007caa <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c90:	2210      	movs	r2, #16
 8007c92:	431a      	orrs	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007c98:	2317      	movs	r3, #23
 8007c9a:	18fb      	adds	r3, r7, r3
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	225d      	movs	r2, #93	; 0x5d
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	5499      	strb	r1, [r3, r2]
    goto error;
 8007ca8:	e01e      	b.n	8007ce8 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2240      	movs	r2, #64	; 0x40
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	2b40      	cmp	r3, #64	; 0x40
 8007cb6:	d007      	beq.n	8007cc8 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2140      	movs	r1, #64	; 0x40
 8007cc4:	430a      	orrs	r2, r1
 8007cc6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2120      	movs	r1, #32
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2102      	movs	r1, #2
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	225c      	movs	r2, #92	; 0x5c
 8007cec:	2100      	movs	r1, #0
 8007cee:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007cf0:	2317      	movs	r3, #23
 8007cf2:	18fb      	adds	r3, r7, r3
 8007cf4:	781b      	ldrb	r3, [r3, #0]
}
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	b007      	add	sp, #28
 8007cfc:	bd90      	pop	{r4, r7, pc}
 8007cfe:	46c0      	nop			; (mov r8, r8)
 8007d00:	ffff9fff 	.word	0xffff9fff
 8007d04:	ffffefff 	.word	0xffffefff
 8007d08:	ffffbfff 	.word	0xffffbfff
 8007d0c:	ffffdfff 	.word	0xffffdfff
 8007d10:	08008097 	.word	0x08008097
 8007d14:	08007f51 	.word	0x08007f51
 8007d18:	080080b5 	.word	0x080080b5
 8007d1c:	08008001 	.word	0x08008001
 8007d20:	080080d3 	.word	0x080080d3

08007d24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b088      	sub	sp, #32
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	099b      	lsrs	r3, r3, #6
 8007d40:	001a      	movs	r2, r3
 8007d42:	2301      	movs	r3, #1
 8007d44:	4013      	ands	r3, r2
 8007d46:	d10f      	bne.n	8007d68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007d4e:	d00b      	beq.n	8007d68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	099b      	lsrs	r3, r3, #6
 8007d54:	001a      	movs	r2, r3
 8007d56:	2301      	movs	r3, #1
 8007d58:	4013      	ands	r3, r2
 8007d5a:	d005      	beq.n	8007d68 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	0010      	movs	r0, r2
 8007d64:	4798      	blx	r3
    return;
 8007d66:	e0d5      	b.n	8007f14 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	085b      	lsrs	r3, r3, #1
 8007d6c:	001a      	movs	r2, r3
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4013      	ands	r3, r2
 8007d72:	d00b      	beq.n	8007d8c <HAL_SPI_IRQHandler+0x68>
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	09db      	lsrs	r3, r3, #7
 8007d78:	001a      	movs	r2, r3
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	d005      	beq.n	8007d8c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	0010      	movs	r0, r2
 8007d88:	4798      	blx	r3
    return;
 8007d8a:	e0c3      	b.n	8007f14 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	095b      	lsrs	r3, r3, #5
 8007d90:	001a      	movs	r2, r3
 8007d92:	2301      	movs	r3, #1
 8007d94:	4013      	ands	r3, r2
 8007d96:	d10c      	bne.n	8007db2 <HAL_SPI_IRQHandler+0x8e>
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	099b      	lsrs	r3, r3, #6
 8007d9c:	001a      	movs	r2, r3
 8007d9e:	2301      	movs	r3, #1
 8007da0:	4013      	ands	r3, r2
 8007da2:	d106      	bne.n	8007db2 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	0a1b      	lsrs	r3, r3, #8
 8007da8:	001a      	movs	r2, r3
 8007daa:	2301      	movs	r3, #1
 8007dac:	4013      	ands	r3, r2
 8007dae:	d100      	bne.n	8007db2 <HAL_SPI_IRQHandler+0x8e>
 8007db0:	e0b0      	b.n	8007f14 <HAL_SPI_IRQHandler+0x1f0>
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	095b      	lsrs	r3, r3, #5
 8007db6:	001a      	movs	r2, r3
 8007db8:	2301      	movs	r3, #1
 8007dba:	4013      	ands	r3, r2
 8007dbc:	d100      	bne.n	8007dc0 <HAL_SPI_IRQHandler+0x9c>
 8007dbe:	e0a9      	b.n	8007f14 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	099b      	lsrs	r3, r3, #6
 8007dc4:	001a      	movs	r2, r3
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	4013      	ands	r3, r2
 8007dca:	d023      	beq.n	8007e14 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	225d      	movs	r2, #93	; 0x5d
 8007dd0:	5c9b      	ldrb	r3, [r3, r2]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d011      	beq.n	8007dfc <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ddc:	2204      	movs	r2, #4
 8007dde:	431a      	orrs	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007de4:	2300      	movs	r3, #0
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	617b      	str	r3, [r7, #20]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	e00b      	b.n	8007e14 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	613b      	str	r3, [r7, #16]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	613b      	str	r3, [r7, #16]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	693b      	ldr	r3, [r7, #16]
        return;
 8007e12:	e07f      	b.n	8007f14 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	095b      	lsrs	r3, r3, #5
 8007e18:	001a      	movs	r2, r3
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	d014      	beq.n	8007e4a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e24:	2201      	movs	r2, #1
 8007e26:	431a      	orrs	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2140      	movs	r1, #64	; 0x40
 8007e44:	438a      	bics	r2, r1
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	0a1b      	lsrs	r3, r3, #8
 8007e4e:	001a      	movs	r2, r3
 8007e50:	2301      	movs	r3, #1
 8007e52:	4013      	ands	r3, r2
 8007e54:	d00c      	beq.n	8007e70 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	431a      	orrs	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e62:	2300      	movs	r3, #0
 8007e64:	60bb      	str	r3, [r7, #8]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	60bb      	str	r3, [r7, #8]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d04c      	beq.n	8007f12 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	21e0      	movs	r1, #224	; 0xe0
 8007e84:	438a      	bics	r2, r1
 8007e86:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	225d      	movs	r2, #93	; 0x5d
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	2202      	movs	r2, #2
 8007e94:	4013      	ands	r3, r2
 8007e96:	d103      	bne.n	8007ea0 <HAL_SPI_IRQHandler+0x17c>
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	d032      	beq.n	8007f06 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2103      	movs	r1, #3
 8007eac:	438a      	bics	r2, r1
 8007eae:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d010      	beq.n	8007eda <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ebc:	4a17      	ldr	r2, [pc, #92]	; (8007f1c <HAL_SPI_IRQHandler+0x1f8>)
 8007ebe:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec4:	0018      	movs	r0, r3
 8007ec6:	f7fb fe79 	bl	8003bbc <HAL_DMA_Abort_IT>
 8007eca:	1e03      	subs	r3, r0, #0
 8007ecc:	d005      	beq.n	8007eda <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed2:	2240      	movs	r2, #64	; 0x40
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d016      	beq.n	8007f10 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee6:	4a0d      	ldr	r2, [pc, #52]	; (8007f1c <HAL_SPI_IRQHandler+0x1f8>)
 8007ee8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eee:	0018      	movs	r0, r3
 8007ef0:	f7fb fe64 	bl	8003bbc <HAL_DMA_Abort_IT>
 8007ef4:	1e03      	subs	r3, r0, #0
 8007ef6:	d00b      	beq.n	8007f10 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007efc:	2240      	movs	r2, #64	; 0x40
 8007efe:	431a      	orrs	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007f04:	e004      	b.n	8007f10 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	0018      	movs	r0, r3
 8007f0a:	f000 f819 	bl	8007f40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007f0e:	e000      	b.n	8007f12 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8007f10:	46c0      	nop			; (mov r8, r8)
    return;
 8007f12:	46c0      	nop			; (mov r8, r8)
  }
}
 8007f14:	46bd      	mov	sp, r7
 8007f16:	b008      	add	sp, #32
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	46c0      	nop			; (mov r8, r8)
 8007f1c:	08008115 	.word	0x08008115

08007f20 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007f28:	46c0      	nop			; (mov r8, r8)
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	b002      	add	sp, #8
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007f38:	46c0      	nop			; (mov r8, r8)
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	b002      	add	sp, #8
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f48:	46c0      	nop			; (mov r8, r8)
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	b002      	add	sp, #8
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f5e:	f7fb f99b 	bl	8003298 <HAL_GetTick>
 8007f62:	0003      	movs	r3, r0
 8007f64:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	4013      	ands	r3, r2
 8007f70:	2b20      	cmp	r3, #32
 8007f72:	d03e      	beq.n	8007ff2 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2120      	movs	r1, #32
 8007f80:	438a      	bics	r2, r1
 8007f82:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10e      	bne.n	8007faa <SPI_DMAReceiveCplt+0x5a>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	2382      	movs	r3, #130	; 0x82
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d108      	bne.n	8007faa <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2103      	movs	r1, #3
 8007fa4:	438a      	bics	r2, r1
 8007fa6:	605a      	str	r2, [r3, #4]
 8007fa8:	e007      	b.n	8007fba <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	438a      	bics	r2, r1
 8007fb8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2164      	movs	r1, #100	; 0x64
 8007fc0:	0018      	movs	r0, r3
 8007fc2:	f000 f9e1 	bl	8008388 <SPI_EndRxTransaction>
 8007fc6:	1e03      	subs	r3, r0, #0
 8007fc8:	d002      	beq.n	8007fd0 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2246      	movs	r2, #70	; 0x46
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	225d      	movs	r2, #93	; 0x5d
 8007fdc:	2101      	movs	r1, #1
 8007fde:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d004      	beq.n	8007ff2 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	0018      	movs	r0, r3
 8007fec:	f7ff ffa8 	bl	8007f40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007ff0:	e003      	b.n	8007ffa <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	f7f9 f86b 	bl	80010d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	b004      	add	sp, #16
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800800e:	f7fb f943 	bl	8003298 <HAL_GetTick>
 8008012:	0003      	movs	r3, r0
 8008014:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2220      	movs	r2, #32
 800801e:	4013      	ands	r3, r2
 8008020:	2b20      	cmp	r3, #32
 8008022:	d031      	beq.n	8008088 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	685a      	ldr	r2, [r3, #4]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2120      	movs	r1, #32
 8008030:	438a      	bics	r2, r1
 8008032:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2164      	movs	r1, #100	; 0x64
 800803a:	0018      	movs	r0, r3
 800803c:	f000 fa02 	bl	8008444 <SPI_EndRxTxTransaction>
 8008040:	1e03      	subs	r3, r0, #0
 8008042:	d005      	beq.n	8008050 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008048:	2220      	movs	r2, #32
 800804a:	431a      	orrs	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2103      	movs	r1, #3
 800805c:	438a      	bics	r2, r1
 800805e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2246      	movs	r2, #70	; 0x46
 800806a:	2100      	movs	r1, #0
 800806c:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	225d      	movs	r2, #93	; 0x5d
 8008072:	2101      	movs	r1, #1
 8008074:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800807a:	2b00      	cmp	r3, #0
 800807c:	d004      	beq.n	8008088 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	0018      	movs	r0, r3
 8008082:	f7ff ff5d 	bl	8007f40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008086:	e003      	b.n	8008090 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	0018      	movs	r0, r3
 800808c:	f7ff ff48 	bl	8007f20 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008090:	46bd      	mov	sp, r7
 8008092:	b004      	add	sp, #16
 8008094:	bd80      	pop	{r7, pc}

08008096 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	0018      	movs	r0, r3
 80080a8:	f7f8 ffda 	bl	8001060 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080ac:	46c0      	nop			; (mov r8, r8)
 80080ae:	46bd      	mov	sp, r7
 80080b0:	b004      	add	sp, #16
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	0018      	movs	r0, r3
 80080c6:	f7ff ff33 	bl	8007f30 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	46bd      	mov	sp, r7
 80080ce:	b004      	add	sp, #16
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080de:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2103      	movs	r1, #3
 80080ec:	438a      	bics	r2, r1
 80080ee:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080f4:	2210      	movs	r2, #16
 80080f6:	431a      	orrs	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	225d      	movs	r2, #93	; 0x5d
 8008100:	2101      	movs	r1, #1
 8008102:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	0018      	movs	r0, r3
 8008108:	f7ff ff1a 	bl	8007f40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800810c:	46c0      	nop			; (mov r8, r8)
 800810e:	46bd      	mov	sp, r7
 8008110:	b004      	add	sp, #16
 8008112:	bd80      	pop	{r7, pc}

08008114 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008120:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2246      	movs	r2, #70	; 0x46
 8008126:	2100      	movs	r1, #0
 8008128:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	0018      	movs	r0, r3
 8008134:	f7ff ff04 	bl	8007f40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008138:	46c0      	nop			; (mov r8, r8)
 800813a:	46bd      	mov	sp, r7
 800813c:	b004      	add	sp, #16
 800813e:	bd80      	pop	{r7, pc}

08008140 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	1dfb      	adds	r3, r7, #7
 800814e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008150:	f7fb f8a2 	bl	8003298 <HAL_GetTick>
 8008154:	0002      	movs	r2, r0
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	1a9b      	subs	r3, r3, r2
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	18d3      	adds	r3, r2, r3
 800815e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008160:	f7fb f89a 	bl	8003298 <HAL_GetTick>
 8008164:	0003      	movs	r3, r0
 8008166:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008168:	4b3a      	ldr	r3, [pc, #232]	; (8008254 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	015b      	lsls	r3, r3, #5
 800816e:	0d1b      	lsrs	r3, r3, #20
 8008170:	69fa      	ldr	r2, [r7, #28]
 8008172:	4353      	muls	r3, r2
 8008174:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008176:	e058      	b.n	800822a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	3301      	adds	r3, #1
 800817c:	d055      	beq.n	800822a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800817e:	f7fb f88b 	bl	8003298 <HAL_GetTick>
 8008182:	0002      	movs	r2, r0
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	69fa      	ldr	r2, [r7, #28]
 800818a:	429a      	cmp	r2, r3
 800818c:	d902      	bls.n	8008194 <SPI_WaitFlagStateUntilTimeout+0x54>
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d142      	bne.n	800821a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	21e0      	movs	r1, #224	; 0xe0
 80081a0:	438a      	bics	r2, r1
 80081a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	2382      	movs	r3, #130	; 0x82
 80081aa:	005b      	lsls	r3, r3, #1
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d113      	bne.n	80081d8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	2380      	movs	r3, #128	; 0x80
 80081b6:	021b      	lsls	r3, r3, #8
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d005      	beq.n	80081c8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	689a      	ldr	r2, [r3, #8]
 80081c0:	2380      	movs	r3, #128	; 0x80
 80081c2:	00db      	lsls	r3, r3, #3
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d107      	bne.n	80081d8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2140      	movs	r1, #64	; 0x40
 80081d4:	438a      	bics	r2, r1
 80081d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081dc:	2380      	movs	r3, #128	; 0x80
 80081de:	019b      	lsls	r3, r3, #6
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d110      	bne.n	8008206 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	491a      	ldr	r1, [pc, #104]	; (8008258 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80081f0:	400a      	ands	r2, r1
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2180      	movs	r1, #128	; 0x80
 8008200:	0189      	lsls	r1, r1, #6
 8008202:	430a      	orrs	r2, r1
 8008204:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	225d      	movs	r2, #93	; 0x5d
 800820a:	2101      	movs	r1, #1
 800820c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	225c      	movs	r2, #92	; 0x5c
 8008212:	2100      	movs	r1, #0
 8008214:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e017      	b.n	800824a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008220:	2300      	movs	r3, #0
 8008222:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	3b01      	subs	r3, #1
 8008228:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	4013      	ands	r3, r2
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	425a      	negs	r2, r3
 800823a:	4153      	adcs	r3, r2
 800823c:	b2db      	uxtb	r3, r3
 800823e:	001a      	movs	r2, r3
 8008240:	1dfb      	adds	r3, r7, #7
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	429a      	cmp	r2, r3
 8008246:	d197      	bne.n	8008178 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	0018      	movs	r0, r3
 800824c:	46bd      	mov	sp, r7
 800824e:	b008      	add	sp, #32
 8008250:	bd80      	pop	{r7, pc}
 8008252:	46c0      	nop			; (mov r8, r8)
 8008254:	20003134 	.word	0x20003134
 8008258:	ffffdfff 	.word	0xffffdfff

0800825c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800826a:	f7fb f815 	bl	8003298 <HAL_GetTick>
 800826e:	0002      	movs	r2, r0
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	1a9b      	subs	r3, r3, r2
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	18d3      	adds	r3, r2, r3
 8008278:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800827a:	f7fb f80d 	bl	8003298 <HAL_GetTick>
 800827e:	0003      	movs	r3, r0
 8008280:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008282:	4b3f      	ldr	r3, [pc, #252]	; (8008380 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	0013      	movs	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	189b      	adds	r3, r3, r2
 800828c:	00da      	lsls	r2, r3, #3
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	0d1b      	lsrs	r3, r3, #20
 8008292:	69fa      	ldr	r2, [r7, #28]
 8008294:	4353      	muls	r3, r2
 8008296:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8008298:	e064      	b.n	8008364 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	23c0      	movs	r3, #192	; 0xc0
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d106      	bne.n	80082b2 <SPI_WaitFifoStateUntilTimeout+0x56>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d103      	bne.n	80082b2 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	330c      	adds	r3, #12
 80082b0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	3301      	adds	r3, #1
 80082b6:	d055      	beq.n	8008364 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082b8:	f7fa ffee 	bl	8003298 <HAL_GetTick>
 80082bc:	0002      	movs	r2, r0
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	69fa      	ldr	r2, [r7, #28]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d902      	bls.n	80082ce <SPI_WaitFifoStateUntilTimeout+0x72>
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d142      	bne.n	8008354 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	21e0      	movs	r1, #224	; 0xe0
 80082da:	438a      	bics	r2, r1
 80082dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	2382      	movs	r3, #130	; 0x82
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d113      	bne.n	8008312 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	689a      	ldr	r2, [r3, #8]
 80082ee:	2380      	movs	r3, #128	; 0x80
 80082f0:	021b      	lsls	r3, r3, #8
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d005      	beq.n	8008302 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	689a      	ldr	r2, [r3, #8]
 80082fa:	2380      	movs	r3, #128	; 0x80
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	429a      	cmp	r2, r3
 8008300:	d107      	bne.n	8008312 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2140      	movs	r1, #64	; 0x40
 800830e:	438a      	bics	r2, r1
 8008310:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008316:	2380      	movs	r3, #128	; 0x80
 8008318:	019b      	lsls	r3, r3, #6
 800831a:	429a      	cmp	r2, r3
 800831c:	d110      	bne.n	8008340 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4916      	ldr	r1, [pc, #88]	; (8008384 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800832a:	400a      	ands	r2, r1
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2180      	movs	r1, #128	; 0x80
 800833a:	0189      	lsls	r1, r1, #6
 800833c:	430a      	orrs	r2, r1
 800833e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	225d      	movs	r2, #93	; 0x5d
 8008344:	2101      	movs	r1, #1
 8008346:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	225c      	movs	r2, #92	; 0x5c
 800834c:	2100      	movs	r1, #0
 800834e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e010      	b.n	8008376 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800835a:	2300      	movs	r3, #0
 800835c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	3b01      	subs	r3, #1
 8008362:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	4013      	ands	r3, r2
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	429a      	cmp	r2, r3
 8008372:	d192      	bne.n	800829a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	0018      	movs	r0, r3
 8008378:	46bd      	mov	sp, r7
 800837a:	b008      	add	sp, #32
 800837c:	bd80      	pop	{r7, pc}
 800837e:	46c0      	nop			; (mov r8, r8)
 8008380:	20003134 	.word	0x20003134
 8008384:	ffffdfff 	.word	0xffffdfff

08008388 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af02      	add	r7, sp, #8
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	2382      	movs	r3, #130	; 0x82
 800839a:	005b      	lsls	r3, r3, #1
 800839c:	429a      	cmp	r2, r3
 800839e:	d113      	bne.n	80083c8 <SPI_EndRxTransaction+0x40>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	2380      	movs	r3, #128	; 0x80
 80083a6:	021b      	lsls	r3, r3, #8
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d005      	beq.n	80083b8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	689a      	ldr	r2, [r3, #8]
 80083b0:	2380      	movs	r3, #128	; 0x80
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d107      	bne.n	80083c8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2140      	movs	r1, #64	; 0x40
 80083c4:	438a      	bics	r2, r1
 80083c6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	9300      	str	r3, [sp, #0]
 80083d0:	0013      	movs	r3, r2
 80083d2:	2200      	movs	r2, #0
 80083d4:	2180      	movs	r1, #128	; 0x80
 80083d6:	f7ff feb3 	bl	8008140 <SPI_WaitFlagStateUntilTimeout>
 80083da:	1e03      	subs	r3, r0, #0
 80083dc:	d007      	beq.n	80083ee <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083e2:	2220      	movs	r2, #32
 80083e4:	431a      	orrs	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e026      	b.n	800843c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	2382      	movs	r3, #130	; 0x82
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d11f      	bne.n	800843a <SPI_EndRxTransaction+0xb2>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	689a      	ldr	r2, [r3, #8]
 80083fe:	2380      	movs	r3, #128	; 0x80
 8008400:	021b      	lsls	r3, r3, #8
 8008402:	429a      	cmp	r2, r3
 8008404:	d005      	beq.n	8008412 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	689a      	ldr	r2, [r3, #8]
 800840a:	2380      	movs	r3, #128	; 0x80
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	429a      	cmp	r2, r3
 8008410:	d113      	bne.n	800843a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	23c0      	movs	r3, #192	; 0xc0
 8008416:	00d9      	lsls	r1, r3, #3
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	0013      	movs	r3, r2
 8008420:	2200      	movs	r2, #0
 8008422:	f7ff ff1b 	bl	800825c <SPI_WaitFifoStateUntilTimeout>
 8008426:	1e03      	subs	r3, r0, #0
 8008428:	d007      	beq.n	800843a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800842e:	2220      	movs	r2, #32
 8008430:	431a      	orrs	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e000      	b.n	800843c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	0018      	movs	r0, r3
 800843e:	46bd      	mov	sp, r7
 8008440:	b004      	add	sp, #16
 8008442:	bd80      	pop	{r7, pc}

08008444 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af02      	add	r7, sp, #8
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	23c0      	movs	r3, #192	; 0xc0
 8008454:	0159      	lsls	r1, r3, #5
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	0013      	movs	r3, r2
 800845e:	2200      	movs	r2, #0
 8008460:	f7ff fefc 	bl	800825c <SPI_WaitFifoStateUntilTimeout>
 8008464:	1e03      	subs	r3, r0, #0
 8008466:	d007      	beq.n	8008478 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800846c:	2220      	movs	r2, #32
 800846e:	431a      	orrs	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e027      	b.n	80084c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	0013      	movs	r3, r2
 8008482:	2200      	movs	r2, #0
 8008484:	2180      	movs	r1, #128	; 0x80
 8008486:	f7ff fe5b 	bl	8008140 <SPI_WaitFlagStateUntilTimeout>
 800848a:	1e03      	subs	r3, r0, #0
 800848c:	d007      	beq.n	800849e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008492:	2220      	movs	r2, #32
 8008494:	431a      	orrs	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e014      	b.n	80084c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	23c0      	movs	r3, #192	; 0xc0
 80084a2:	00d9      	lsls	r1, r3, #3
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	0013      	movs	r3, r2
 80084ac:	2200      	movs	r2, #0
 80084ae:	f7ff fed5 	bl	800825c <SPI_WaitFifoStateUntilTimeout>
 80084b2:	1e03      	subs	r3, r0, #0
 80084b4:	d007      	beq.n	80084c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ba:	2220      	movs	r2, #32
 80084bc:	431a      	orrs	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e000      	b.n	80084c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	0018      	movs	r0, r3
 80084ca:	46bd      	mov	sp, r7
 80084cc:	b004      	add	sp, #16
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d101      	bne.n	80084e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e04a      	b.n	8008578 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	223d      	movs	r2, #61	; 0x3d
 80084e6:	5c9b      	ldrb	r3, [r3, r2]
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d107      	bne.n	80084fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	223c      	movs	r2, #60	; 0x3c
 80084f2:	2100      	movs	r1, #0
 80084f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	0018      	movs	r0, r3
 80084fa:	f7fa fbf5 	bl	8002ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	223d      	movs	r2, #61	; 0x3d
 8008502:	2102      	movs	r1, #2
 8008504:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	3304      	adds	r3, #4
 800850e:	0019      	movs	r1, r3
 8008510:	0010      	movs	r0, r2
 8008512:	f000 fb41 	bl	8008b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2248      	movs	r2, #72	; 0x48
 800851a:	2101      	movs	r1, #1
 800851c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	223e      	movs	r2, #62	; 0x3e
 8008522:	2101      	movs	r1, #1
 8008524:	5499      	strb	r1, [r3, r2]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	223f      	movs	r2, #63	; 0x3f
 800852a:	2101      	movs	r1, #1
 800852c:	5499      	strb	r1, [r3, r2]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2240      	movs	r2, #64	; 0x40
 8008532:	2101      	movs	r1, #1
 8008534:	5499      	strb	r1, [r3, r2]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2241      	movs	r2, #65	; 0x41
 800853a:	2101      	movs	r1, #1
 800853c:	5499      	strb	r1, [r3, r2]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2242      	movs	r2, #66	; 0x42
 8008542:	2101      	movs	r1, #1
 8008544:	5499      	strb	r1, [r3, r2]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2243      	movs	r2, #67	; 0x43
 800854a:	2101      	movs	r1, #1
 800854c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2244      	movs	r2, #68	; 0x44
 8008552:	2101      	movs	r1, #1
 8008554:	5499      	strb	r1, [r3, r2]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2245      	movs	r2, #69	; 0x45
 800855a:	2101      	movs	r1, #1
 800855c:	5499      	strb	r1, [r3, r2]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2246      	movs	r2, #70	; 0x46
 8008562:	2101      	movs	r1, #1
 8008564:	5499      	strb	r1, [r3, r2]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2247      	movs	r2, #71	; 0x47
 800856a:	2101      	movs	r1, #1
 800856c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	223d      	movs	r2, #61	; 0x3d
 8008572:	2101      	movs	r1, #1
 8008574:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	0018      	movs	r0, r3
 800857a:	46bd      	mov	sp, r7
 800857c:	b002      	add	sp, #8
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d101      	bne.n	8008592 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e04a      	b.n	8008628 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	223d      	movs	r2, #61	; 0x3d
 8008596:	5c9b      	ldrb	r3, [r3, r2]
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d107      	bne.n	80085ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	223c      	movs	r2, #60	; 0x3c
 80085a2:	2100      	movs	r1, #0
 80085a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	0018      	movs	r0, r3
 80085aa:	f000 f841 	bl	8008630 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	223d      	movs	r2, #61	; 0x3d
 80085b2:	2102      	movs	r1, #2
 80085b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3304      	adds	r3, #4
 80085be:	0019      	movs	r1, r3
 80085c0:	0010      	movs	r0, r2
 80085c2:	f000 fae9 	bl	8008b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2248      	movs	r2, #72	; 0x48
 80085ca:	2101      	movs	r1, #1
 80085cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	223e      	movs	r2, #62	; 0x3e
 80085d2:	2101      	movs	r1, #1
 80085d4:	5499      	strb	r1, [r3, r2]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	223f      	movs	r2, #63	; 0x3f
 80085da:	2101      	movs	r1, #1
 80085dc:	5499      	strb	r1, [r3, r2]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2240      	movs	r2, #64	; 0x40
 80085e2:	2101      	movs	r1, #1
 80085e4:	5499      	strb	r1, [r3, r2]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2241      	movs	r2, #65	; 0x41
 80085ea:	2101      	movs	r1, #1
 80085ec:	5499      	strb	r1, [r3, r2]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2242      	movs	r2, #66	; 0x42
 80085f2:	2101      	movs	r1, #1
 80085f4:	5499      	strb	r1, [r3, r2]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2243      	movs	r2, #67	; 0x43
 80085fa:	2101      	movs	r1, #1
 80085fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2244      	movs	r2, #68	; 0x44
 8008602:	2101      	movs	r1, #1
 8008604:	5499      	strb	r1, [r3, r2]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2245      	movs	r2, #69	; 0x45
 800860a:	2101      	movs	r1, #1
 800860c:	5499      	strb	r1, [r3, r2]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2246      	movs	r2, #70	; 0x46
 8008612:	2101      	movs	r1, #1
 8008614:	5499      	strb	r1, [r3, r2]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2247      	movs	r2, #71	; 0x47
 800861a:	2101      	movs	r1, #1
 800861c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	223d      	movs	r2, #61	; 0x3d
 8008622:	2101      	movs	r1, #1
 8008624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	0018      	movs	r0, r3
 800862a:	46bd      	mov	sp, r7
 800862c:	b002      	add	sp, #8
 800862e:	bd80      	pop	{r7, pc}

08008630 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008638:	46c0      	nop			; (mov r8, r8)
 800863a:	46bd      	mov	sp, r7
 800863c:	b002      	add	sp, #8
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d108      	bne.n	8008662 <HAL_TIM_PWM_Start+0x22>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	223e      	movs	r2, #62	; 0x3e
 8008654:	5c9b      	ldrb	r3, [r3, r2]
 8008656:	b2db      	uxtb	r3, r3
 8008658:	3b01      	subs	r3, #1
 800865a:	1e5a      	subs	r2, r3, #1
 800865c:	4193      	sbcs	r3, r2
 800865e:	b2db      	uxtb	r3, r3
 8008660:	e037      	b.n	80086d2 <HAL_TIM_PWM_Start+0x92>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b04      	cmp	r3, #4
 8008666:	d108      	bne.n	800867a <HAL_TIM_PWM_Start+0x3a>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	223f      	movs	r2, #63	; 0x3f
 800866c:	5c9b      	ldrb	r3, [r3, r2]
 800866e:	b2db      	uxtb	r3, r3
 8008670:	3b01      	subs	r3, #1
 8008672:	1e5a      	subs	r2, r3, #1
 8008674:	4193      	sbcs	r3, r2
 8008676:	b2db      	uxtb	r3, r3
 8008678:	e02b      	b.n	80086d2 <HAL_TIM_PWM_Start+0x92>
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b08      	cmp	r3, #8
 800867e:	d108      	bne.n	8008692 <HAL_TIM_PWM_Start+0x52>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2240      	movs	r2, #64	; 0x40
 8008684:	5c9b      	ldrb	r3, [r3, r2]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	3b01      	subs	r3, #1
 800868a:	1e5a      	subs	r2, r3, #1
 800868c:	4193      	sbcs	r3, r2
 800868e:	b2db      	uxtb	r3, r3
 8008690:	e01f      	b.n	80086d2 <HAL_TIM_PWM_Start+0x92>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b0c      	cmp	r3, #12
 8008696:	d108      	bne.n	80086aa <HAL_TIM_PWM_Start+0x6a>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2241      	movs	r2, #65	; 0x41
 800869c:	5c9b      	ldrb	r3, [r3, r2]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	3b01      	subs	r3, #1
 80086a2:	1e5a      	subs	r2, r3, #1
 80086a4:	4193      	sbcs	r3, r2
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	e013      	b.n	80086d2 <HAL_TIM_PWM_Start+0x92>
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b10      	cmp	r3, #16
 80086ae:	d108      	bne.n	80086c2 <HAL_TIM_PWM_Start+0x82>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2242      	movs	r2, #66	; 0x42
 80086b4:	5c9b      	ldrb	r3, [r3, r2]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	3b01      	subs	r3, #1
 80086ba:	1e5a      	subs	r2, r3, #1
 80086bc:	4193      	sbcs	r3, r2
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	e007      	b.n	80086d2 <HAL_TIM_PWM_Start+0x92>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2243      	movs	r2, #67	; 0x43
 80086c6:	5c9b      	ldrb	r3, [r3, r2]
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	3b01      	subs	r3, #1
 80086cc:	1e5a      	subs	r2, r3, #1
 80086ce:	4193      	sbcs	r3, r2
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e08b      	b.n	80087f2 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <HAL_TIM_PWM_Start+0xaa>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	223e      	movs	r2, #62	; 0x3e
 80086e4:	2102      	movs	r1, #2
 80086e6:	5499      	strb	r1, [r3, r2]
 80086e8:	e023      	b.n	8008732 <HAL_TIM_PWM_Start+0xf2>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b04      	cmp	r3, #4
 80086ee:	d104      	bne.n	80086fa <HAL_TIM_PWM_Start+0xba>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	223f      	movs	r2, #63	; 0x3f
 80086f4:	2102      	movs	r1, #2
 80086f6:	5499      	strb	r1, [r3, r2]
 80086f8:	e01b      	b.n	8008732 <HAL_TIM_PWM_Start+0xf2>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d104      	bne.n	800870a <HAL_TIM_PWM_Start+0xca>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2240      	movs	r2, #64	; 0x40
 8008704:	2102      	movs	r1, #2
 8008706:	5499      	strb	r1, [r3, r2]
 8008708:	e013      	b.n	8008732 <HAL_TIM_PWM_Start+0xf2>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b0c      	cmp	r3, #12
 800870e:	d104      	bne.n	800871a <HAL_TIM_PWM_Start+0xda>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2241      	movs	r2, #65	; 0x41
 8008714:	2102      	movs	r1, #2
 8008716:	5499      	strb	r1, [r3, r2]
 8008718:	e00b      	b.n	8008732 <HAL_TIM_PWM_Start+0xf2>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b10      	cmp	r3, #16
 800871e:	d104      	bne.n	800872a <HAL_TIM_PWM_Start+0xea>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2242      	movs	r2, #66	; 0x42
 8008724:	2102      	movs	r1, #2
 8008726:	5499      	strb	r1, [r3, r2]
 8008728:	e003      	b.n	8008732 <HAL_TIM_PWM_Start+0xf2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2243      	movs	r2, #67	; 0x43
 800872e:	2102      	movs	r1, #2
 8008730:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	2201      	movs	r2, #1
 800873a:	0018      	movs	r0, r3
 800873c:	f000 fe0c 	bl	8009358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a2d      	ldr	r2, [pc, #180]	; (80087fc <HAL_TIM_PWM_Start+0x1bc>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d00e      	beq.n	8008768 <HAL_TIM_PWM_Start+0x128>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a2c      	ldr	r2, [pc, #176]	; (8008800 <HAL_TIM_PWM_Start+0x1c0>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d009      	beq.n	8008768 <HAL_TIM_PWM_Start+0x128>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a2a      	ldr	r2, [pc, #168]	; (8008804 <HAL_TIM_PWM_Start+0x1c4>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d004      	beq.n	8008768 <HAL_TIM_PWM_Start+0x128>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a29      	ldr	r2, [pc, #164]	; (8008808 <HAL_TIM_PWM_Start+0x1c8>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d101      	bne.n	800876c <HAL_TIM_PWM_Start+0x12c>
 8008768:	2301      	movs	r3, #1
 800876a:	e000      	b.n	800876e <HAL_TIM_PWM_Start+0x12e>
 800876c:	2300      	movs	r3, #0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d008      	beq.n	8008784 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2180      	movs	r1, #128	; 0x80
 800877e:	0209      	lsls	r1, r1, #8
 8008780:	430a      	orrs	r2, r1
 8008782:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a1c      	ldr	r2, [pc, #112]	; (80087fc <HAL_TIM_PWM_Start+0x1bc>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d00f      	beq.n	80087ae <HAL_TIM_PWM_Start+0x16e>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	2380      	movs	r3, #128	; 0x80
 8008794:	05db      	lsls	r3, r3, #23
 8008796:	429a      	cmp	r2, r3
 8008798:	d009      	beq.n	80087ae <HAL_TIM_PWM_Start+0x16e>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a1b      	ldr	r2, [pc, #108]	; (800880c <HAL_TIM_PWM_Start+0x1cc>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d004      	beq.n	80087ae <HAL_TIM_PWM_Start+0x16e>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a15      	ldr	r2, [pc, #84]	; (8008800 <HAL_TIM_PWM_Start+0x1c0>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d116      	bne.n	80087dc <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	4a16      	ldr	r2, [pc, #88]	; (8008810 <HAL_TIM_PWM_Start+0x1d0>)
 80087b6:	4013      	ands	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b06      	cmp	r3, #6
 80087be:	d016      	beq.n	80087ee <HAL_TIM_PWM_Start+0x1ae>
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	2380      	movs	r3, #128	; 0x80
 80087c4:	025b      	lsls	r3, r3, #9
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d011      	beq.n	80087ee <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2101      	movs	r1, #1
 80087d6:	430a      	orrs	r2, r1
 80087d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087da:	e008      	b.n	80087ee <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2101      	movs	r1, #1
 80087e8:	430a      	orrs	r2, r1
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	e000      	b.n	80087f0 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ee:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	0018      	movs	r0, r3
 80087f4:	46bd      	mov	sp, r7
 80087f6:	b004      	add	sp, #16
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	46c0      	nop			; (mov r8, r8)
 80087fc:	40012c00 	.word	0x40012c00
 8008800:	40014000 	.word	0x40014000
 8008804:	40014400 	.word	0x40014400
 8008808:	40014800 	.word	0x40014800
 800880c:	40000400 	.word	0x40000400
 8008810:	00010007 	.word	0x00010007

08008814 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	223c      	movs	r2, #60	; 0x3c
 8008824:	5c9b      	ldrb	r3, [r3, r2]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d101      	bne.n	800882e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800882a:	2302      	movs	r3, #2
 800882c:	e0df      	b.n	80089ee <HAL_TIM_PWM_ConfigChannel+0x1da>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	223c      	movs	r2, #60	; 0x3c
 8008832:	2101      	movs	r1, #1
 8008834:	5499      	strb	r1, [r3, r2]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b14      	cmp	r3, #20
 800883a:	d900      	bls.n	800883e <HAL_TIM_PWM_ConfigChannel+0x2a>
 800883c:	e0d1      	b.n	80089e2 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	009a      	lsls	r2, r3, #2
 8008842:	4b6d      	ldr	r3, [pc, #436]	; (80089f8 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8008844:	18d3      	adds	r3, r2, r3
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	0011      	movs	r1, r2
 8008852:	0018      	movs	r0, r3
 8008854:	f000 fa20 	bl	8008c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	699a      	ldr	r2, [r3, #24]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2108      	movs	r1, #8
 8008864:	430a      	orrs	r2, r1
 8008866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	699a      	ldr	r2, [r3, #24]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2104      	movs	r1, #4
 8008874:	438a      	bics	r2, r1
 8008876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6999      	ldr	r1, [r3, #24]
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	691a      	ldr	r2, [r3, #16]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	430a      	orrs	r2, r1
 8008888:	619a      	str	r2, [r3, #24]
      break;
 800888a:	e0ab      	b.n	80089e4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	0011      	movs	r1, r2
 8008894:	0018      	movs	r0, r3
 8008896:	f000 fa89 	bl	8008dac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	699a      	ldr	r2, [r3, #24]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2180      	movs	r1, #128	; 0x80
 80088a6:	0109      	lsls	r1, r1, #4
 80088a8:	430a      	orrs	r2, r1
 80088aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	699a      	ldr	r2, [r3, #24]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4951      	ldr	r1, [pc, #324]	; (80089fc <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80088b8:	400a      	ands	r2, r1
 80088ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6999      	ldr	r1, [r3, #24]
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	021a      	lsls	r2, r3, #8
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	619a      	str	r2, [r3, #24]
      break;
 80088d0:	e088      	b.n	80089e4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	0011      	movs	r1, r2
 80088da:	0018      	movs	r0, r3
 80088dc:	f000 faea 	bl	8008eb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	69da      	ldr	r2, [r3, #28]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2108      	movs	r1, #8
 80088ec:	430a      	orrs	r2, r1
 80088ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	69da      	ldr	r2, [r3, #28]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2104      	movs	r1, #4
 80088fc:	438a      	bics	r2, r1
 80088fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	69d9      	ldr	r1, [r3, #28]
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	691a      	ldr	r2, [r3, #16]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	430a      	orrs	r2, r1
 8008910:	61da      	str	r2, [r3, #28]
      break;
 8008912:	e067      	b.n	80089e4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	0011      	movs	r1, r2
 800891c:	0018      	movs	r0, r3
 800891e:	f000 fb51 	bl	8008fc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	69da      	ldr	r2, [r3, #28]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2180      	movs	r1, #128	; 0x80
 800892e:	0109      	lsls	r1, r1, #4
 8008930:	430a      	orrs	r2, r1
 8008932:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	69da      	ldr	r2, [r3, #28]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	492f      	ldr	r1, [pc, #188]	; (80089fc <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8008940:	400a      	ands	r2, r1
 8008942:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	69d9      	ldr	r1, [r3, #28]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	021a      	lsls	r2, r3, #8
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	430a      	orrs	r2, r1
 8008956:	61da      	str	r2, [r3, #28]
      break;
 8008958:	e044      	b.n	80089e4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	0011      	movs	r1, r2
 8008962:	0018      	movs	r0, r3
 8008964:	f000 fb98 	bl	8009098 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2108      	movs	r1, #8
 8008974:	430a      	orrs	r2, r1
 8008976:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2104      	movs	r1, #4
 8008984:	438a      	bics	r2, r1
 8008986:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	691a      	ldr	r2, [r3, #16]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	430a      	orrs	r2, r1
 8008998:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800899a:	e023      	b.n	80089e4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	0011      	movs	r1, r2
 80089a4:	0018      	movs	r0, r3
 80089a6:	f000 fbd7 	bl	8009158 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2180      	movs	r1, #128	; 0x80
 80089b6:	0109      	lsls	r1, r1, #4
 80089b8:	430a      	orrs	r2, r1
 80089ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	490d      	ldr	r1, [pc, #52]	; (80089fc <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80089c8:	400a      	ands	r2, r1
 80089ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	021a      	lsls	r2, r3, #8
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80089e0:	e000      	b.n	80089e4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80089e2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	223c      	movs	r2, #60	; 0x3c
 80089e8:	2100      	movs	r1, #0
 80089ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	0018      	movs	r0, r3
 80089f0:	46bd      	mov	sp, r7
 80089f2:	b004      	add	sp, #16
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	0800ae6c 	.word	0x0800ae6c
 80089fc:	fffffbff 	.word	0xfffffbff

08008a00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	223c      	movs	r2, #60	; 0x3c
 8008a0e:	5c9b      	ldrb	r3, [r3, r2]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d101      	bne.n	8008a18 <HAL_TIM_ConfigClockSource+0x18>
 8008a14:	2302      	movs	r3, #2
 8008a16:	e0b7      	b.n	8008b88 <HAL_TIM_ConfigClockSource+0x188>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	223c      	movs	r2, #60	; 0x3c
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	223d      	movs	r2, #61	; 0x3d
 8008a24:	2102      	movs	r1, #2
 8008a26:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4a57      	ldr	r2, [pc, #348]	; (8008b90 <HAL_TIM_ConfigClockSource+0x190>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4a56      	ldr	r2, [pc, #344]	; (8008b94 <HAL_TIM_ConfigClockSource+0x194>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2280      	movs	r2, #128	; 0x80
 8008a4e:	0192      	lsls	r2, r2, #6
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d040      	beq.n	8008ad6 <HAL_TIM_ConfigClockSource+0xd6>
 8008a54:	2280      	movs	r2, #128	; 0x80
 8008a56:	0192      	lsls	r2, r2, #6
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d900      	bls.n	8008a5e <HAL_TIM_ConfigClockSource+0x5e>
 8008a5c:	e088      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x170>
 8008a5e:	2280      	movs	r2, #128	; 0x80
 8008a60:	0152      	lsls	r2, r2, #5
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d100      	bne.n	8008a68 <HAL_TIM_ConfigClockSource+0x68>
 8008a66:	e085      	b.n	8008b74 <HAL_TIM_ConfigClockSource+0x174>
 8008a68:	2280      	movs	r2, #128	; 0x80
 8008a6a:	0152      	lsls	r2, r2, #5
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d900      	bls.n	8008a72 <HAL_TIM_ConfigClockSource+0x72>
 8008a70:	e07e      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x170>
 8008a72:	2b70      	cmp	r3, #112	; 0x70
 8008a74:	d018      	beq.n	8008aa8 <HAL_TIM_ConfigClockSource+0xa8>
 8008a76:	d900      	bls.n	8008a7a <HAL_TIM_ConfigClockSource+0x7a>
 8008a78:	e07a      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x170>
 8008a7a:	2b60      	cmp	r3, #96	; 0x60
 8008a7c:	d04f      	beq.n	8008b1e <HAL_TIM_ConfigClockSource+0x11e>
 8008a7e:	d900      	bls.n	8008a82 <HAL_TIM_ConfigClockSource+0x82>
 8008a80:	e076      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x170>
 8008a82:	2b50      	cmp	r3, #80	; 0x50
 8008a84:	d03b      	beq.n	8008afe <HAL_TIM_ConfigClockSource+0xfe>
 8008a86:	d900      	bls.n	8008a8a <HAL_TIM_ConfigClockSource+0x8a>
 8008a88:	e072      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x170>
 8008a8a:	2b40      	cmp	r3, #64	; 0x40
 8008a8c:	d057      	beq.n	8008b3e <HAL_TIM_ConfigClockSource+0x13e>
 8008a8e:	d900      	bls.n	8008a92 <HAL_TIM_ConfigClockSource+0x92>
 8008a90:	e06e      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x170>
 8008a92:	2b30      	cmp	r3, #48	; 0x30
 8008a94:	d063      	beq.n	8008b5e <HAL_TIM_ConfigClockSource+0x15e>
 8008a96:	d86b      	bhi.n	8008b70 <HAL_TIM_ConfigClockSource+0x170>
 8008a98:	2b20      	cmp	r3, #32
 8008a9a:	d060      	beq.n	8008b5e <HAL_TIM_ConfigClockSource+0x15e>
 8008a9c:	d868      	bhi.n	8008b70 <HAL_TIM_ConfigClockSource+0x170>
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d05d      	beq.n	8008b5e <HAL_TIM_ConfigClockSource+0x15e>
 8008aa2:	2b10      	cmp	r3, #16
 8008aa4:	d05b      	beq.n	8008b5e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008aa6:	e063      	b.n	8008b70 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	6899      	ldr	r1, [r3, #8]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	f000 fc2e 	bl	8009318 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2277      	movs	r2, #119	; 0x77
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	609a      	str	r2, [r3, #8]
      break;
 8008ad4:	e04f      	b.n	8008b76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6818      	ldr	r0, [r3, #0]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	6899      	ldr	r1, [r3, #8]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	685a      	ldr	r2, [r3, #4]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	f000 fc17 	bl	8009318 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2180      	movs	r1, #128	; 0x80
 8008af6:	01c9      	lsls	r1, r1, #7
 8008af8:	430a      	orrs	r2, r1
 8008afa:	609a      	str	r2, [r3, #8]
      break;
 8008afc:	e03b      	b.n	8008b76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6818      	ldr	r0, [r3, #0]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	6859      	ldr	r1, [r3, #4]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	001a      	movs	r2, r3
 8008b0c:	f000 fb88 	bl	8009220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2150      	movs	r1, #80	; 0x50
 8008b16:	0018      	movs	r0, r3
 8008b18:	f000 fbe2 	bl	80092e0 <TIM_ITRx_SetConfig>
      break;
 8008b1c:	e02b      	b.n	8008b76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6818      	ldr	r0, [r3, #0]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	6859      	ldr	r1, [r3, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	001a      	movs	r2, r3
 8008b2c:	f000 fba6 	bl	800927c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2160      	movs	r1, #96	; 0x60
 8008b36:	0018      	movs	r0, r3
 8008b38:	f000 fbd2 	bl	80092e0 <TIM_ITRx_SetConfig>
      break;
 8008b3c:	e01b      	b.n	8008b76 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6818      	ldr	r0, [r3, #0]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	6859      	ldr	r1, [r3, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	001a      	movs	r2, r3
 8008b4c:	f000 fb68 	bl	8009220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2140      	movs	r1, #64	; 0x40
 8008b56:	0018      	movs	r0, r3
 8008b58:	f000 fbc2 	bl	80092e0 <TIM_ITRx_SetConfig>
      break;
 8008b5c:	e00b      	b.n	8008b76 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	0019      	movs	r1, r3
 8008b68:	0010      	movs	r0, r2
 8008b6a:	f000 fbb9 	bl	80092e0 <TIM_ITRx_SetConfig>
        break;
 8008b6e:	e002      	b.n	8008b76 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008b70:	46c0      	nop			; (mov r8, r8)
 8008b72:	e000      	b.n	8008b76 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008b74:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	223d      	movs	r2, #61	; 0x3d
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	223c      	movs	r2, #60	; 0x3c
 8008b82:	2100      	movs	r1, #0
 8008b84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	0018      	movs	r0, r3
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	b004      	add	sp, #16
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	ffceff88 	.word	0xffceff88
 8008b94:	ffff00ff 	.word	0xffff00ff

08008b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a34      	ldr	r2, [pc, #208]	; (8008c7c <TIM_Base_SetConfig+0xe4>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d008      	beq.n	8008bc2 <TIM_Base_SetConfig+0x2a>
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	2380      	movs	r3, #128	; 0x80
 8008bb4:	05db      	lsls	r3, r3, #23
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d003      	beq.n	8008bc2 <TIM_Base_SetConfig+0x2a>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a30      	ldr	r2, [pc, #192]	; (8008c80 <TIM_Base_SetConfig+0xe8>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d108      	bne.n	8008bd4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2270      	movs	r2, #112	; 0x70
 8008bc6:	4393      	bics	r3, r2
 8008bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a29      	ldr	r2, [pc, #164]	; (8008c7c <TIM_Base_SetConfig+0xe4>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d018      	beq.n	8008c0e <TIM_Base_SetConfig+0x76>
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	2380      	movs	r3, #128	; 0x80
 8008be0:	05db      	lsls	r3, r3, #23
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d013      	beq.n	8008c0e <TIM_Base_SetConfig+0x76>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a25      	ldr	r2, [pc, #148]	; (8008c80 <TIM_Base_SetConfig+0xe8>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d00f      	beq.n	8008c0e <TIM_Base_SetConfig+0x76>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a24      	ldr	r2, [pc, #144]	; (8008c84 <TIM_Base_SetConfig+0xec>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d00b      	beq.n	8008c0e <TIM_Base_SetConfig+0x76>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a23      	ldr	r2, [pc, #140]	; (8008c88 <TIM_Base_SetConfig+0xf0>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d007      	beq.n	8008c0e <TIM_Base_SetConfig+0x76>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a22      	ldr	r2, [pc, #136]	; (8008c8c <TIM_Base_SetConfig+0xf4>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d003      	beq.n	8008c0e <TIM_Base_SetConfig+0x76>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a21      	ldr	r2, [pc, #132]	; (8008c90 <TIM_Base_SetConfig+0xf8>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d108      	bne.n	8008c20 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4a20      	ldr	r2, [pc, #128]	; (8008c94 <TIM_Base_SetConfig+0xfc>)
 8008c12:	4013      	ands	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2280      	movs	r2, #128	; 0x80
 8008c24:	4393      	bics	r3, r2
 8008c26:	001a      	movs	r2, r3
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	689a      	ldr	r2, [r3, #8]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a0c      	ldr	r2, [pc, #48]	; (8008c7c <TIM_Base_SetConfig+0xe4>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d00b      	beq.n	8008c66 <TIM_Base_SetConfig+0xce>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a0d      	ldr	r2, [pc, #52]	; (8008c88 <TIM_Base_SetConfig+0xf0>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d007      	beq.n	8008c66 <TIM_Base_SetConfig+0xce>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a0c      	ldr	r2, [pc, #48]	; (8008c8c <TIM_Base_SetConfig+0xf4>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d003      	beq.n	8008c66 <TIM_Base_SetConfig+0xce>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a0b      	ldr	r2, [pc, #44]	; (8008c90 <TIM_Base_SetConfig+0xf8>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d103      	bne.n	8008c6e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	691a      	ldr	r2, [r3, #16]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	615a      	str	r2, [r3, #20]
}
 8008c74:	46c0      	nop			; (mov r8, r8)
 8008c76:	46bd      	mov	sp, r7
 8008c78:	b004      	add	sp, #16
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	40012c00 	.word	0x40012c00
 8008c80:	40000400 	.word	0x40000400
 8008c84:	40002000 	.word	0x40002000
 8008c88:	40014000 	.word	0x40014000
 8008c8c:	40014400 	.word	0x40014400
 8008c90:	40014800 	.word	0x40014800
 8008c94:	fffffcff 	.word	0xfffffcff

08008c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	4393      	bics	r3, r2
 8008caa:	001a      	movs	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	4a32      	ldr	r2, [pc, #200]	; (8008d90 <TIM_OC1_SetConfig+0xf8>)
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2203      	movs	r2, #3
 8008cce:	4393      	bics	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	4393      	bics	r3, r2
 8008ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a28      	ldr	r2, [pc, #160]	; (8008d94 <TIM_OC1_SetConfig+0xfc>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00b      	beq.n	8008d0e <TIM_OC1_SetConfig+0x76>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a27      	ldr	r2, [pc, #156]	; (8008d98 <TIM_OC1_SetConfig+0x100>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d007      	beq.n	8008d0e <TIM_OC1_SetConfig+0x76>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a26      	ldr	r2, [pc, #152]	; (8008d9c <TIM_OC1_SetConfig+0x104>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d003      	beq.n	8008d0e <TIM_OC1_SetConfig+0x76>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a25      	ldr	r2, [pc, #148]	; (8008da0 <TIM_OC1_SetConfig+0x108>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d10c      	bne.n	8008d28 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	2208      	movs	r2, #8
 8008d12:	4393      	bics	r3, r2
 8008d14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	2204      	movs	r2, #4
 8008d24:	4393      	bics	r3, r2
 8008d26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a1a      	ldr	r2, [pc, #104]	; (8008d94 <TIM_OC1_SetConfig+0xfc>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d00b      	beq.n	8008d48 <TIM_OC1_SetConfig+0xb0>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a19      	ldr	r2, [pc, #100]	; (8008d98 <TIM_OC1_SetConfig+0x100>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d007      	beq.n	8008d48 <TIM_OC1_SetConfig+0xb0>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a18      	ldr	r2, [pc, #96]	; (8008d9c <TIM_OC1_SetConfig+0x104>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d003      	beq.n	8008d48 <TIM_OC1_SetConfig+0xb0>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a17      	ldr	r2, [pc, #92]	; (8008da0 <TIM_OC1_SetConfig+0x108>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d111      	bne.n	8008d6c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	4a16      	ldr	r2, [pc, #88]	; (8008da4 <TIM_OC1_SetConfig+0x10c>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	4a15      	ldr	r2, [pc, #84]	; (8008da8 <TIM_OC1_SetConfig+0x110>)
 8008d54:	4013      	ands	r3, r2
 8008d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	685a      	ldr	r2, [r3, #4]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	621a      	str	r2, [r3, #32]
}
 8008d86:	46c0      	nop			; (mov r8, r8)
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	b006      	add	sp, #24
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	46c0      	nop			; (mov r8, r8)
 8008d90:	fffeff8f 	.word	0xfffeff8f
 8008d94:	40012c00 	.word	0x40012c00
 8008d98:	40014000 	.word	0x40014000
 8008d9c:	40014400 	.word	0x40014400
 8008da0:	40014800 	.word	0x40014800
 8008da4:	fffffeff 	.word	0xfffffeff
 8008da8:	fffffdff 	.word	0xfffffdff

08008dac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	2210      	movs	r2, #16
 8008dbc:	4393      	bics	r3, r2
 8008dbe:	001a      	movs	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	4a2e      	ldr	r2, [pc, #184]	; (8008e94 <TIM_OC2_SetConfig+0xe8>)
 8008dda:	4013      	ands	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	4a2d      	ldr	r2, [pc, #180]	; (8008e98 <TIM_OC2_SetConfig+0xec>)
 8008de2:	4013      	ands	r3, r2
 8008de4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	021b      	lsls	r3, r3, #8
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2220      	movs	r2, #32
 8008df6:	4393      	bics	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	011b      	lsls	r3, r3, #4
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a24      	ldr	r2, [pc, #144]	; (8008e9c <TIM_OC2_SetConfig+0xf0>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d10d      	bne.n	8008e2a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2280      	movs	r2, #128	; 0x80
 8008e12:	4393      	bics	r3, r2
 8008e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2240      	movs	r2, #64	; 0x40
 8008e26:	4393      	bics	r3, r2
 8008e28:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a1b      	ldr	r2, [pc, #108]	; (8008e9c <TIM_OC2_SetConfig+0xf0>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d00b      	beq.n	8008e4a <TIM_OC2_SetConfig+0x9e>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a1a      	ldr	r2, [pc, #104]	; (8008ea0 <TIM_OC2_SetConfig+0xf4>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d007      	beq.n	8008e4a <TIM_OC2_SetConfig+0x9e>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a19      	ldr	r2, [pc, #100]	; (8008ea4 <TIM_OC2_SetConfig+0xf8>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d003      	beq.n	8008e4a <TIM_OC2_SetConfig+0x9e>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a18      	ldr	r2, [pc, #96]	; (8008ea8 <TIM_OC2_SetConfig+0xfc>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d113      	bne.n	8008e72 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	4a17      	ldr	r2, [pc, #92]	; (8008eac <TIM_OC2_SetConfig+0x100>)
 8008e4e:	4013      	ands	r3, r2
 8008e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	4a16      	ldr	r2, [pc, #88]	; (8008eb0 <TIM_OC2_SetConfig+0x104>)
 8008e56:	4013      	ands	r3, r2
 8008e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	695b      	ldr	r3, [r3, #20]
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685a      	ldr	r2, [r3, #4]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	621a      	str	r2, [r3, #32]
}
 8008e8c:	46c0      	nop			; (mov r8, r8)
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	b006      	add	sp, #24
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	feff8fff 	.word	0xfeff8fff
 8008e98:	fffffcff 	.word	0xfffffcff
 8008e9c:	40012c00 	.word	0x40012c00
 8008ea0:	40014000 	.word	0x40014000
 8008ea4:	40014400 	.word	0x40014400
 8008ea8:	40014800 	.word	0x40014800
 8008eac:	fffffbff 	.word	0xfffffbff
 8008eb0:	fffff7ff 	.word	0xfffff7ff

08008eb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	4a35      	ldr	r2, [pc, #212]	; (8008f98 <TIM_OC3_SetConfig+0xe4>)
 8008ec4:	401a      	ands	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4a2f      	ldr	r2, [pc, #188]	; (8008f9c <TIM_OC3_SetConfig+0xe8>)
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2203      	movs	r2, #3
 8008ee8:	4393      	bics	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	4a29      	ldr	r2, [pc, #164]	; (8008fa0 <TIM_OC3_SetConfig+0xec>)
 8008efa:	4013      	ands	r3, r2
 8008efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	021b      	lsls	r3, r3, #8
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a25      	ldr	r2, [pc, #148]	; (8008fa4 <TIM_OC3_SetConfig+0xf0>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d10d      	bne.n	8008f2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	4a24      	ldr	r2, [pc, #144]	; (8008fa8 <TIM_OC3_SetConfig+0xf4>)
 8008f16:	4013      	ands	r3, r2
 8008f18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	021b      	lsls	r3, r3, #8
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	4a20      	ldr	r2, [pc, #128]	; (8008fac <TIM_OC3_SetConfig+0xf8>)
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a1c      	ldr	r2, [pc, #112]	; (8008fa4 <TIM_OC3_SetConfig+0xf0>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d00b      	beq.n	8008f4e <TIM_OC3_SetConfig+0x9a>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a1d      	ldr	r2, [pc, #116]	; (8008fb0 <TIM_OC3_SetConfig+0xfc>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d007      	beq.n	8008f4e <TIM_OC3_SetConfig+0x9a>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a1c      	ldr	r2, [pc, #112]	; (8008fb4 <TIM_OC3_SetConfig+0x100>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d003      	beq.n	8008f4e <TIM_OC3_SetConfig+0x9a>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a1b      	ldr	r2, [pc, #108]	; (8008fb8 <TIM_OC3_SetConfig+0x104>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d113      	bne.n	8008f76 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	4a1a      	ldr	r2, [pc, #104]	; (8008fbc <TIM_OC3_SetConfig+0x108>)
 8008f52:	4013      	ands	r3, r2
 8008f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	4a19      	ldr	r2, [pc, #100]	; (8008fc0 <TIM_OC3_SetConfig+0x10c>)
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	011b      	lsls	r3, r3, #4
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	011b      	lsls	r3, r3, #4
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	621a      	str	r2, [r3, #32]
}
 8008f90:	46c0      	nop			; (mov r8, r8)
 8008f92:	46bd      	mov	sp, r7
 8008f94:	b006      	add	sp, #24
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	fffffeff 	.word	0xfffffeff
 8008f9c:	fffeff8f 	.word	0xfffeff8f
 8008fa0:	fffffdff 	.word	0xfffffdff
 8008fa4:	40012c00 	.word	0x40012c00
 8008fa8:	fffff7ff 	.word	0xfffff7ff
 8008fac:	fffffbff 	.word	0xfffffbff
 8008fb0:	40014000 	.word	0x40014000
 8008fb4:	40014400 	.word	0x40014400
 8008fb8:	40014800 	.word	0x40014800
 8008fbc:	ffffefff 	.word	0xffffefff
 8008fc0:	ffffdfff 	.word	0xffffdfff

08008fc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	4a28      	ldr	r2, [pc, #160]	; (8009074 <TIM_OC4_SetConfig+0xb0>)
 8008fd4:	401a      	ands	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4a22      	ldr	r2, [pc, #136]	; (8009078 <TIM_OC4_SetConfig+0xb4>)
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	4a21      	ldr	r2, [pc, #132]	; (800907c <TIM_OC4_SetConfig+0xb8>)
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	021b      	lsls	r3, r3, #8
 8009002:	68fa      	ldr	r2, [r7, #12]
 8009004:	4313      	orrs	r3, r2
 8009006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	4a1d      	ldr	r2, [pc, #116]	; (8009080 <TIM_OC4_SetConfig+0xbc>)
 800900c:	4013      	ands	r3, r2
 800900e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	031b      	lsls	r3, r3, #12
 8009016:	693a      	ldr	r2, [r7, #16]
 8009018:	4313      	orrs	r3, r2
 800901a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a19      	ldr	r2, [pc, #100]	; (8009084 <TIM_OC4_SetConfig+0xc0>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d00b      	beq.n	800903c <TIM_OC4_SetConfig+0x78>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a18      	ldr	r2, [pc, #96]	; (8009088 <TIM_OC4_SetConfig+0xc4>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d007      	beq.n	800903c <TIM_OC4_SetConfig+0x78>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a17      	ldr	r2, [pc, #92]	; (800908c <TIM_OC4_SetConfig+0xc8>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d003      	beq.n	800903c <TIM_OC4_SetConfig+0x78>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a16      	ldr	r2, [pc, #88]	; (8009090 <TIM_OC4_SetConfig+0xcc>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d109      	bne.n	8009050 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	4a15      	ldr	r2, [pc, #84]	; (8009094 <TIM_OC4_SetConfig+0xd0>)
 8009040:	4013      	ands	r3, r2
 8009042:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	019b      	lsls	r3, r3, #6
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	4313      	orrs	r3, r2
 800904e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	621a      	str	r2, [r3, #32]
}
 800906a:	46c0      	nop			; (mov r8, r8)
 800906c:	46bd      	mov	sp, r7
 800906e:	b006      	add	sp, #24
 8009070:	bd80      	pop	{r7, pc}
 8009072:	46c0      	nop			; (mov r8, r8)
 8009074:	ffffefff 	.word	0xffffefff
 8009078:	feff8fff 	.word	0xfeff8fff
 800907c:	fffffcff 	.word	0xfffffcff
 8009080:	ffffdfff 	.word	0xffffdfff
 8009084:	40012c00 	.word	0x40012c00
 8009088:	40014000 	.word	0x40014000
 800908c:	40014400 	.word	0x40014400
 8009090:	40014800 	.word	0x40014800
 8009094:	ffffbfff 	.word	0xffffbfff

08009098 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	4a25      	ldr	r2, [pc, #148]	; (800913c <TIM_OC5_SetConfig+0xa4>)
 80090a8:	401a      	ands	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4a1f      	ldr	r2, [pc, #124]	; (8009140 <TIM_OC5_SetConfig+0xa8>)
 80090c4:	4013      	ands	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	4a1b      	ldr	r2, [pc, #108]	; (8009144 <TIM_OC5_SetConfig+0xac>)
 80090d6:	4013      	ands	r3, r2
 80090d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	041b      	lsls	r3, r3, #16
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a17      	ldr	r2, [pc, #92]	; (8009148 <TIM_OC5_SetConfig+0xb0>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d00b      	beq.n	8009106 <TIM_OC5_SetConfig+0x6e>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a16      	ldr	r2, [pc, #88]	; (800914c <TIM_OC5_SetConfig+0xb4>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d007      	beq.n	8009106 <TIM_OC5_SetConfig+0x6e>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a15      	ldr	r2, [pc, #84]	; (8009150 <TIM_OC5_SetConfig+0xb8>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d003      	beq.n	8009106 <TIM_OC5_SetConfig+0x6e>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a14      	ldr	r2, [pc, #80]	; (8009154 <TIM_OC5_SetConfig+0xbc>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d109      	bne.n	800911a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	4a0c      	ldr	r2, [pc, #48]	; (800913c <TIM_OC5_SetConfig+0xa4>)
 800910a:	4013      	ands	r3, r2
 800910c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	021b      	lsls	r3, r3, #8
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	4313      	orrs	r3, r2
 8009118:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	693a      	ldr	r2, [r7, #16]
 8009132:	621a      	str	r2, [r3, #32]
}
 8009134:	46c0      	nop			; (mov r8, r8)
 8009136:	46bd      	mov	sp, r7
 8009138:	b006      	add	sp, #24
 800913a:	bd80      	pop	{r7, pc}
 800913c:	fffeffff 	.word	0xfffeffff
 8009140:	fffeff8f 	.word	0xfffeff8f
 8009144:	fffdffff 	.word	0xfffdffff
 8009148:	40012c00 	.word	0x40012c00
 800914c:	40014000 	.word	0x40014000
 8009150:	40014400 	.word	0x40014400
 8009154:	40014800 	.word	0x40014800

08009158 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	4a26      	ldr	r2, [pc, #152]	; (8009200 <TIM_OC6_SetConfig+0xa8>)
 8009168:	401a      	ands	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800917e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4a20      	ldr	r2, [pc, #128]	; (8009204 <TIM_OC6_SetConfig+0xac>)
 8009184:	4013      	ands	r3, r2
 8009186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	021b      	lsls	r3, r3, #8
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	4313      	orrs	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	4a1c      	ldr	r2, [pc, #112]	; (8009208 <TIM_OC6_SetConfig+0xb0>)
 8009198:	4013      	ands	r3, r2
 800919a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	051b      	lsls	r3, r3, #20
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a18      	ldr	r2, [pc, #96]	; (800920c <TIM_OC6_SetConfig+0xb4>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d00b      	beq.n	80091c8 <TIM_OC6_SetConfig+0x70>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a17      	ldr	r2, [pc, #92]	; (8009210 <TIM_OC6_SetConfig+0xb8>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d007      	beq.n	80091c8 <TIM_OC6_SetConfig+0x70>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a16      	ldr	r2, [pc, #88]	; (8009214 <TIM_OC6_SetConfig+0xbc>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d003      	beq.n	80091c8 <TIM_OC6_SetConfig+0x70>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a15      	ldr	r2, [pc, #84]	; (8009218 <TIM_OC6_SetConfig+0xc0>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d109      	bne.n	80091dc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	4a14      	ldr	r2, [pc, #80]	; (800921c <TIM_OC6_SetConfig+0xc4>)
 80091cc:	4013      	ands	r3, r2
 80091ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	695b      	ldr	r3, [r3, #20]
 80091d4:	029b      	lsls	r3, r3, #10
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4313      	orrs	r3, r2
 80091da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685a      	ldr	r2, [r3, #4]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	693a      	ldr	r2, [r7, #16]
 80091f4:	621a      	str	r2, [r3, #32]
}
 80091f6:	46c0      	nop			; (mov r8, r8)
 80091f8:	46bd      	mov	sp, r7
 80091fa:	b006      	add	sp, #24
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	46c0      	nop			; (mov r8, r8)
 8009200:	ffefffff 	.word	0xffefffff
 8009204:	feff8fff 	.word	0xfeff8fff
 8009208:	ffdfffff 	.word	0xffdfffff
 800920c:	40012c00 	.word	0x40012c00
 8009210:	40014000 	.word	0x40014000
 8009214:	40014400 	.word	0x40014400
 8009218:	40014800 	.word	0x40014800
 800921c:	fffbffff 	.word	0xfffbffff

08009220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	2201      	movs	r2, #1
 8009238:	4393      	bics	r3, r2
 800923a:	001a      	movs	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	22f0      	movs	r2, #240	; 0xf0
 800924a:	4393      	bics	r3, r2
 800924c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	011b      	lsls	r3, r3, #4
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	4313      	orrs	r3, r2
 8009256:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	220a      	movs	r2, #10
 800925c:	4393      	bics	r3, r2
 800925e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	4313      	orrs	r3, r2
 8009266:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	621a      	str	r2, [r3, #32]
}
 8009274:	46c0      	nop			; (mov r8, r8)
 8009276:	46bd      	mov	sp, r7
 8009278:	b006      	add	sp, #24
 800927a:	bd80      	pop	{r7, pc}

0800927c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	2210      	movs	r2, #16
 800928e:	4393      	bics	r3, r2
 8009290:	001a      	movs	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6a1b      	ldr	r3, [r3, #32]
 80092a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	4a0d      	ldr	r2, [pc, #52]	; (80092dc <TIM_TI2_ConfigInputStage+0x60>)
 80092a6:	4013      	ands	r3, r2
 80092a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	031b      	lsls	r3, r3, #12
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	22a0      	movs	r2, #160	; 0xa0
 80092b8:	4393      	bics	r3, r2
 80092ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	011b      	lsls	r3, r3, #4
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	621a      	str	r2, [r3, #32]
}
 80092d2:	46c0      	nop			; (mov r8, r8)
 80092d4:	46bd      	mov	sp, r7
 80092d6:	b006      	add	sp, #24
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	46c0      	nop			; (mov r8, r8)
 80092dc:	ffff0fff 	.word	0xffff0fff

080092e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4a08      	ldr	r2, [pc, #32]	; (8009314 <TIM_ITRx_SetConfig+0x34>)
 80092f4:	4013      	ands	r3, r2
 80092f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	2207      	movs	r2, #7
 8009300:	4313      	orrs	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	609a      	str	r2, [r3, #8]
}
 800930a:	46c0      	nop			; (mov r8, r8)
 800930c:	46bd      	mov	sp, r7
 800930e:	b004      	add	sp, #16
 8009310:	bd80      	pop	{r7, pc}
 8009312:	46c0      	nop			; (mov r8, r8)
 8009314:	ffcfff8f 	.word	0xffcfff8f

08009318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	4a09      	ldr	r2, [pc, #36]	; (8009354 <TIM_ETR_SetConfig+0x3c>)
 8009330:	4013      	ands	r3, r2
 8009332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	021a      	lsls	r2, r3, #8
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	431a      	orrs	r2, r3
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	4313      	orrs	r3, r2
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	4313      	orrs	r3, r2
 8009344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	609a      	str	r2, [r3, #8]
}
 800934c:	46c0      	nop			; (mov r8, r8)
 800934e:	46bd      	mov	sp, r7
 8009350:	b006      	add	sp, #24
 8009352:	bd80      	pop	{r7, pc}
 8009354:	ffff00ff 	.word	0xffff00ff

08009358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	221f      	movs	r2, #31
 8009368:	4013      	ands	r3, r2
 800936a:	2201      	movs	r2, #1
 800936c:	409a      	lsls	r2, r3
 800936e:	0013      	movs	r3, r2
 8009370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	43d2      	mvns	r2, r2
 800937a:	401a      	ands	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6a1a      	ldr	r2, [r3, #32]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	211f      	movs	r1, #31
 8009388:	400b      	ands	r3, r1
 800938a:	6879      	ldr	r1, [r7, #4]
 800938c:	4099      	lsls	r1, r3
 800938e:	000b      	movs	r3, r1
 8009390:	431a      	orrs	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	621a      	str	r2, [r3, #32]
}
 8009396:	46c0      	nop			; (mov r8, r8)
 8009398:	46bd      	mov	sp, r7
 800939a:	b006      	add	sp, #24
 800939c:	bd80      	pop	{r7, pc}
	...

080093a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	223c      	movs	r2, #60	; 0x3c
 80093ae:	5c9b      	ldrb	r3, [r3, r2]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d101      	bne.n	80093b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093b4:	2302      	movs	r3, #2
 80093b6:	e055      	b.n	8009464 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	223c      	movs	r2, #60	; 0x3c
 80093bc:	2101      	movs	r1, #1
 80093be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	223d      	movs	r2, #61	; 0x3d
 80093c4:	2102      	movs	r1, #2
 80093c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a23      	ldr	r2, [pc, #140]	; (800946c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d108      	bne.n	80093f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4a22      	ldr	r2, [pc, #136]	; (8009470 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80093e6:	4013      	ands	r3, r2
 80093e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2270      	movs	r2, #112	; 0x70
 80093f8:	4393      	bics	r3, r2
 80093fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	4313      	orrs	r3, r2
 8009404:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a16      	ldr	r2, [pc, #88]	; (800946c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d00f      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	2380      	movs	r3, #128	; 0x80
 800941e:	05db      	lsls	r3, r3, #23
 8009420:	429a      	cmp	r2, r3
 8009422:	d009      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a12      	ldr	r2, [pc, #72]	; (8009474 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d004      	beq.n	8009438 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a11      	ldr	r2, [pc, #68]	; (8009478 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d10c      	bne.n	8009452 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	2280      	movs	r2, #128	; 0x80
 800943c:	4393      	bics	r3, r2
 800943e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	4313      	orrs	r3, r2
 8009448:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	223d      	movs	r2, #61	; 0x3d
 8009456:	2101      	movs	r1, #1
 8009458:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	223c      	movs	r2, #60	; 0x3c
 800945e:	2100      	movs	r1, #0
 8009460:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	0018      	movs	r0, r3
 8009466:	46bd      	mov	sp, r7
 8009468:	b004      	add	sp, #16
 800946a:	bd80      	pop	{r7, pc}
 800946c:	40012c00 	.word	0x40012c00
 8009470:	ff0fffff 	.word	0xff0fffff
 8009474:	40000400 	.word	0x40000400
 8009478:	40014000 	.word	0x40014000

0800947c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	223c      	movs	r2, #60	; 0x3c
 800948e:	5c9b      	ldrb	r3, [r3, r2]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d101      	bne.n	8009498 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009494:	2302      	movs	r3, #2
 8009496:	e079      	b.n	800958c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	223c      	movs	r2, #60	; 0x3c
 800949c:	2101      	movs	r1, #1
 800949e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	22ff      	movs	r2, #255	; 0xff
 80094a4:	4393      	bics	r3, r2
 80094a6:	001a      	movs	r2, r3
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	4a38      	ldr	r2, [pc, #224]	; (8009594 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80094b4:	401a      	ands	r2, r3
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	4a35      	ldr	r2, [pc, #212]	; (8009598 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80094c2:	401a      	ands	r2, r3
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	4a33      	ldr	r2, [pc, #204]	; (800959c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80094d0:	401a      	ands	r2, r3
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	4a30      	ldr	r2, [pc, #192]	; (80095a0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80094de:	401a      	ands	r2, r3
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	4a2e      	ldr	r2, [pc, #184]	; (80095a4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80094ec:	401a      	ands	r2, r3
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	695b      	ldr	r3, [r3, #20]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4a2b      	ldr	r2, [pc, #172]	; (80095a8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80094fa:	401a      	ands	r2, r3
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009500:	4313      	orrs	r3, r2
 8009502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	4a29      	ldr	r2, [pc, #164]	; (80095ac <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8009508:	401a      	ands	r2, r3
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	041b      	lsls	r3, r3, #16
 8009510:	4313      	orrs	r3, r2
 8009512:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a25      	ldr	r2, [pc, #148]	; (80095b0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d106      	bne.n	800952c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	4a24      	ldr	r2, [pc, #144]	; (80095b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009522:	401a      	ands	r2, r3
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	69db      	ldr	r3, [r3, #28]
 8009528:	4313      	orrs	r3, r2
 800952a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a1f      	ldr	r2, [pc, #124]	; (80095b0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d121      	bne.n	800957a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	4a1f      	ldr	r2, [pc, #124]	; (80095b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800953a:	401a      	ands	r2, r3
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009540:	051b      	lsls	r3, r3, #20
 8009542:	4313      	orrs	r3, r2
 8009544:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	4a1c      	ldr	r2, [pc, #112]	; (80095bc <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800954a:	401a      	ands	r2, r3
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	6a1b      	ldr	r3, [r3, #32]
 8009550:	4313      	orrs	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	4a1a      	ldr	r2, [pc, #104]	; (80095c0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8009558:	401a      	ands	r2, r3
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955e:	4313      	orrs	r3, r2
 8009560:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a12      	ldr	r2, [pc, #72]	; (80095b0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d106      	bne.n	800957a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4a15      	ldr	r2, [pc, #84]	; (80095c4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8009570:	401a      	ands	r2, r3
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009576:	4313      	orrs	r3, r2
 8009578:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	223c      	movs	r2, #60	; 0x3c
 8009586:	2100      	movs	r1, #0
 8009588:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	0018      	movs	r0, r3
 800958e:	46bd      	mov	sp, r7
 8009590:	b004      	add	sp, #16
 8009592:	bd80      	pop	{r7, pc}
 8009594:	fffffcff 	.word	0xfffffcff
 8009598:	fffffbff 	.word	0xfffffbff
 800959c:	fffff7ff 	.word	0xfffff7ff
 80095a0:	ffffefff 	.word	0xffffefff
 80095a4:	ffffdfff 	.word	0xffffdfff
 80095a8:	ffffbfff 	.word	0xffffbfff
 80095ac:	fff0ffff 	.word	0xfff0ffff
 80095b0:	40012c00 	.word	0x40012c00
 80095b4:	efffffff 	.word	0xefffffff
 80095b8:	ff0fffff 	.word	0xff0fffff
 80095bc:	feffffff 	.word	0xfeffffff
 80095c0:	fdffffff 	.word	0xfdffffff
 80095c4:	dfffffff 	.word	0xdfffffff

080095c8 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b08a      	sub	sp, #40	; 0x28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	223c      	movs	r2, #60	; 0x3c
 80095d8:	5c9b      	ldrb	r3, [r3, r2]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d101      	bne.n	80095e2 <HAL_TIMEx_ConfigBreakInput+0x1a>
 80095de:	2302      	movs	r3, #2
 80095e0:	e08e      	b.n	8009700 <HAL_TIMEx_ConfigBreakInput+0x138>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	223c      	movs	r2, #60	; 0x3c
 80095e6:	2101      	movs	r1, #1
 80095e8:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d019      	beq.n	8009626 <HAL_TIMEx_ConfigBreakInput+0x5e>
 80095f2:	d822      	bhi.n	800963a <HAL_TIMEx_ConfigBreakInput+0x72>
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d002      	beq.n	80095fe <HAL_TIMEx_ConfigBreakInput+0x36>
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d00a      	beq.n	8009612 <HAL_TIMEx_ConfigBreakInput+0x4a>
 80095fc:	e01d      	b.n	800963a <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 80095fe:	2301      	movs	r3, #1
 8009600:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8009602:	2300      	movs	r3, #0
 8009604:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8009606:	2380      	movs	r3, #128	; 0x80
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800960c:	2309      	movs	r3, #9
 800960e:	61bb      	str	r3, [r7, #24]
      break;
 8009610:	e01c      	b.n	800964c <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8009612:	2302      	movs	r3, #2
 8009614:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8009616:	2301      	movs	r3, #1
 8009618:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800961a:	2380      	movs	r3, #128	; 0x80
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8009620:	230a      	movs	r3, #10
 8009622:	61bb      	str	r3, [r7, #24]
      break;
 8009624:	e012      	b.n	800964c <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8009626:	2304      	movs	r3, #4
 8009628:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800962a:	2302      	movs	r3, #2
 800962c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800962e:	2380      	movs	r3, #128	; 0x80
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8009634:	230b      	movs	r3, #11
 8009636:	61bb      	str	r3, [r7, #24]
      break;
 8009638:	e008      	b.n	800964c <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800963a:	2300      	movs	r3, #0
 800963c:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 800963e:	2300      	movs	r3, #0
 8009640:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 8009642:	2300      	movs	r3, #0
 8009644:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8009646:	2300      	movs	r3, #0
 8009648:	61bb      	str	r3, [r7, #24]
      break;
 800964a:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d003      	beq.n	800965a <HAL_TIMEx_ConfigBreakInput+0x92>
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	2b02      	cmp	r3, #2
 8009656:	d027      	beq.n	80096a8 <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 8009658:	e04d      	b.n	80096f6 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009660:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	43da      	mvns	r2, r3
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	4013      	ands	r3, r2
 800966a:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	409a      	lsls	r2, r3
 8009674:	0013      	movs	r3, r2
 8009676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009678:	4013      	ands	r3, r2
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	4313      	orrs	r3, r2
 800967e:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	43da      	mvns	r2, r3
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	4013      	ands	r3, r2
 8009688:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	689a      	ldr	r2, [r3, #8]
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	409a      	lsls	r2, r3
 8009692:	0013      	movs	r3, r2
 8009694:	6a3a      	ldr	r2, [r7, #32]
 8009696:	4013      	ands	r3, r2
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	4313      	orrs	r3, r2
 800969c:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 80096a6:	e026      	b.n	80096f6 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096ae:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b2:	43da      	mvns	r2, r3
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	4013      	ands	r3, r2
 80096b8:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	409a      	lsls	r2, r3
 80096c2:	0013      	movs	r3, r2
 80096c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096c6:	4013      	ands	r3, r2
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 80096ce:	6a3b      	ldr	r3, [r7, #32]
 80096d0:	43da      	mvns	r2, r3
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	4013      	ands	r3, r2
 80096d6:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	689a      	ldr	r2, [r3, #8]
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	409a      	lsls	r2, r3
 80096e0:	0013      	movs	r3, r2
 80096e2:	6a3a      	ldr	r2, [r7, #32]
 80096e4:	4013      	ands	r3, r2
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	4313      	orrs	r3, r2
 80096ea:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80096f4:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	223c      	movs	r2, #60	; 0x3c
 80096fa:	2100      	movs	r1, #0
 80096fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	0018      	movs	r0, r3
 8009702:	46bd      	mov	sp, r7
 8009704:	b00a      	add	sp, #40	; 0x28
 8009706:	bd80      	pop	{r7, pc}

08009708 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e03f      	b.n	800979a <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2259      	movs	r2, #89	; 0x59
 800971e:	5c9b      	ldrb	r3, [r3, r2]
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	d107      	bne.n	8009736 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2258      	movs	r2, #88	; 0x58
 800972a:	2100      	movs	r1, #0
 800972c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	0018      	movs	r0, r3
 8009732:	f7f9 fb37 	bl	8002da4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2259      	movs	r2, #89	; 0x59
 800973a:	2102      	movs	r1, #2
 800973c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2101      	movs	r1, #1
 800974a:	438a      	bics	r2, r1
 800974c:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	0018      	movs	r0, r3
 8009752:	f000 fbdb 	bl	8009f0c <USART_SetConfig>
 8009756:	0003      	movs	r3, r0
 8009758:	2b01      	cmp	r3, #1
 800975a:	d101      	bne.n	8009760 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e01c      	b.n	800979a <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	490e      	ldr	r1, [pc, #56]	; (80097a4 <HAL_USART_Init+0x9c>)
 800976c:	400a      	ands	r2, r1
 800976e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	689a      	ldr	r2, [r3, #8]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	212a      	movs	r1, #42	; 0x2a
 800977c:	438a      	bics	r2, r1
 800977e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2101      	movs	r1, #1
 800978c:	430a      	orrs	r2, r1
 800978e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	0018      	movs	r0, r3
 8009794:	f000 fe56 	bl	800a444 <USART_CheckIdleState>
 8009798:	0003      	movs	r3, r0
}
 800979a:	0018      	movs	r0, r3
 800979c:	46bd      	mov	sp, r7
 800979e:	b002      	add	sp, #8
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	46c0      	nop			; (mov r8, r8)
 80097a4:	ffffbfff 	.word	0xffffbfff

080097a8 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b08a      	sub	sp, #40	; 0x28
 80097ac:	af02      	add	r7, sp, #8
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	603b      	str	r3, [r7, #0]
 80097b4:	1dbb      	adds	r3, r7, #6
 80097b6:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2259      	movs	r2, #89	; 0x59
 80097bc:	5c9b      	ldrb	r3, [r3, r2]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d000      	beq.n	80097c6 <HAL_USART_Transmit+0x1e>
 80097c4:	e0a9      	b.n	800991a <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d003      	beq.n	80097d4 <HAL_USART_Transmit+0x2c>
 80097cc:	1dbb      	adds	r3, r7, #6
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d101      	bne.n	80097d8 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e0a1      	b.n	800991c <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	689a      	ldr	r2, [r3, #8]
 80097dc:	2380      	movs	r3, #128	; 0x80
 80097de:	015b      	lsls	r3, r3, #5
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d109      	bne.n	80097f8 <HAL_USART_Transmit+0x50>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d105      	bne.n	80097f8 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2201      	movs	r2, #1
 80097f0:	4013      	ands	r3, r2
 80097f2:	d001      	beq.n	80097f8 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e091      	b.n	800991c <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2258      	movs	r2, #88	; 0x58
 80097fc:	5c9b      	ldrb	r3, [r3, r2]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d101      	bne.n	8009806 <HAL_USART_Transmit+0x5e>
 8009802:	2302      	movs	r3, #2
 8009804:	e08a      	b.n	800991c <HAL_USART_Transmit+0x174>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2258      	movs	r2, #88	; 0x58
 800980a:	2101      	movs	r1, #1
 800980c:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2259      	movs	r2, #89	; 0x59
 8009818:	2112      	movs	r1, #18
 800981a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800981c:	f7f9 fd3c 	bl	8003298 <HAL_GetTick>
 8009820:	0003      	movs	r3, r0
 8009822:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	1dba      	adds	r2, r7, #6
 8009828:	8812      	ldrh	r2, [r2, #0]
 800982a:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	1dba      	adds	r2, r7, #6
 8009830:	8812      	ldrh	r2, [r2, #0]
 8009832:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	689a      	ldr	r2, [r3, #8]
 8009838:	2380      	movs	r3, #128	; 0x80
 800983a:	015b      	lsls	r3, r3, #5
 800983c:	429a      	cmp	r2, r3
 800983e:	d108      	bne.n	8009852 <HAL_USART_Transmit+0xaa>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d104      	bne.n	8009852 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8009848:	2300      	movs	r3, #0
 800984a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	61bb      	str	r3, [r7, #24]
 8009850:	e003      	b.n	800985a <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8009856:	2300      	movs	r3, #0
 8009858:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800985a:	e02a      	b.n	80098b2 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800985c:	697a      	ldr	r2, [r7, #20]
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	0013      	movs	r3, r2
 8009866:	2200      	movs	r2, #0
 8009868:	2180      	movs	r1, #128	; 0x80
 800986a:	f000 fb19 	bl	8009ea0 <USART_WaitOnFlagUntilTimeout>
 800986e:	1e03      	subs	r3, r0, #0
 8009870:	d001      	beq.n	8009876 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	e052      	b.n	800991c <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10b      	bne.n	8009894 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	881b      	ldrh	r3, [r3, #0]
 8009880:	001a      	movs	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	05d2      	lsls	r2, r2, #23
 8009888:	0dd2      	lsrs	r2, r2, #23
 800988a:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	3302      	adds	r3, #2
 8009890:	61bb      	str	r3, [r7, #24]
 8009892:	e007      	b.n	80098a4 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	781a      	ldrb	r2, [r3, #0]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	3301      	adds	r3, #1
 80098a2:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	3b01      	subs	r3, #1
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1cf      	bne.n	800985c <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	0013      	movs	r3, r2
 80098c6:	2200      	movs	r2, #0
 80098c8:	2140      	movs	r1, #64	; 0x40
 80098ca:	f000 fae9 	bl	8009ea0 <USART_WaitOnFlagUntilTimeout>
 80098ce:	1e03      	subs	r3, r0, #0
 80098d0:	d001      	beq.n	80098d6 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e022      	b.n	800991c <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2240      	movs	r2, #64	; 0x40
 80098dc:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2208      	movs	r2, #8
 80098e4:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	699a      	ldr	r2, [r3, #24]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	2108      	movs	r1, #8
 80098f2:	430a      	orrs	r2, r1
 80098f4:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	699a      	ldr	r2, [r3, #24]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2110      	movs	r1, #16
 8009902:	430a      	orrs	r2, r1
 8009904:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2259      	movs	r2, #89	; 0x59
 800990a:	2101      	movs	r1, #1
 800990c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2258      	movs	r2, #88	; 0x58
 8009912:	2100      	movs	r1, #0
 8009914:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	e000      	b.n	800991c <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800991a:	2302      	movs	r3, #2
  }
}
 800991c:	0018      	movs	r0, r3
 800991e:	46bd      	mov	sp, r7
 8009920:	b008      	add	sp, #32
 8009922:	bd80      	pop	{r7, pc}

08009924 <HAL_USART_Transmit_DMA>:
  * @param  pTxData pointer to data buffer (u8 or u16 data elements).
  * @param  Size amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 8009924:	b590      	push	{r4, r7, lr}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	1dbb      	adds	r3, r7, #6
 8009930:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009932:	2317      	movs	r3, #23
 8009934:	18fb      	adds	r3, r7, r3
 8009936:	2200      	movs	r2, #0
 8009938:	701a      	strb	r2, [r3, #0]
  uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2259      	movs	r2, #89	; 0x59
 800993e:	5c9b      	ldrb	r3, [r3, r2]
 8009940:	b2db      	uxtb	r3, r3
 8009942:	2b01      	cmp	r3, #1
 8009944:	d000      	beq.n	8009948 <HAL_USART_Transmit_DMA+0x24>
 8009946:	e07d      	b.n	8009a44 <HAL_USART_Transmit_DMA+0x120>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <HAL_USART_Transmit_DMA+0x32>
 800994e:	1dbb      	adds	r3, r7, #6
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <HAL_USART_Transmit_DMA+0x36>
    {
      return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e075      	b.n	8009a46 <HAL_USART_Transmit_DMA+0x122>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	689a      	ldr	r2, [r3, #8]
 800995e:	2380      	movs	r3, #128	; 0x80
 8009960:	015b      	lsls	r3, r3, #5
 8009962:	429a      	cmp	r2, r3
 8009964:	d10a      	bne.n	800997c <HAL_USART_Transmit_DMA+0x58>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d106      	bne.n	800997c <HAL_USART_Transmit_DMA+0x58>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	001a      	movs	r2, r3
 8009972:	2301      	movs	r3, #1
 8009974:	4013      	ands	r3, r2
 8009976:	d001      	beq.n	800997c <HAL_USART_Transmit_DMA+0x58>
      {
        return  HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	e064      	b.n	8009a46 <HAL_USART_Transmit_DMA+0x122>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2258      	movs	r2, #88	; 0x58
 8009980:	5c9b      	ldrb	r3, [r3, r2]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d101      	bne.n	800998a <HAL_USART_Transmit_DMA+0x66>
 8009986:	2302      	movs	r3, #2
 8009988:	e05d      	b.n	8009a46 <HAL_USART_Transmit_DMA+0x122>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2258      	movs	r2, #88	; 0x58
 800998e:	2101      	movs	r1, #1
 8009990:	5499      	strb	r1, [r3, r2]

    husart->pTxBuffPtr = pTxData;
 8009992:	68ba      	ldr	r2, [r7, #8]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	629a      	str	r2, [r3, #40]	; 0x28
    husart->TxXferSize = Size;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	1dba      	adds	r2, r7, #6
 800999c:	8812      	ldrh	r2, [r2, #0]
 800999e:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	1dba      	adds	r2, r7, #6
 80099a4:	8812      	ldrh	r2, [r2, #0]
 80099a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2259      	movs	r2, #89	; 0x59
 80099b2:	2112      	movs	r1, #18
 80099b4:	5499      	strb	r1, [r3, r2]

    if (husart->hdmatx != NULL)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d01e      	beq.n	80099fc <HAL_USART_Transmit_DMA+0xd8>
    {
      /* Set the USART DMA transfer complete callback */
      husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099c2:	4a23      	ldr	r2, [pc, #140]	; (8009a50 <HAL_USART_Transmit_DMA+0x12c>)
 80099c4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the USART DMA Half transfer complete callback */
      husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ca:	4a22      	ldr	r2, [pc, #136]	; (8009a54 <HAL_USART_Transmit_DMA+0x130>)
 80099cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      husart->hdmatx->XferErrorCallback = USART_DMAError;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d2:	4a21      	ldr	r2, [pc, #132]	; (8009a58 <HAL_USART_Transmit_DMA+0x134>)
 80099d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the USART transmit DMA channel */
      tmp = (uint32_t *)&pTxData;
 80099d6:	2308      	movs	r3, #8
 80099d8:	18fb      	adds	r3, r7, r3
 80099da:	613b      	str	r3, [r7, #16]
      status = HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->TDR, Size);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	6819      	ldr	r1, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	3328      	adds	r3, #40	; 0x28
 80099ea:	001a      	movs	r2, r3
 80099ec:	1dbb      	adds	r3, r7, #6
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	2417      	movs	r4, #23
 80099f2:	193c      	adds	r4, r7, r4
 80099f4:	f7fa f85c 	bl	8003ab0 <HAL_DMA_Start_IT>
 80099f8:	0003      	movs	r3, r0
 80099fa:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80099fc:	2317      	movs	r3, #23
 80099fe:	18fb      	adds	r3, r7, r3
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d111      	bne.n	8009a2a <HAL_USART_Transmit_DMA+0x106>
    {
      /* Clear the TC flag in the ICR register */
      __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2240      	movs	r2, #64	; 0x40
 8009a0c:	621a      	str	r2, [r3, #32]

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2258      	movs	r2, #88	; 0x58
 8009a12:	2100      	movs	r1, #0
 8009a14:	5499      	strb	r1, [r3, r2]

      /* Enable the DMA transfer for transmit request by setting the DMAT bit
         in the USART CR3 register */
      SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689a      	ldr	r2, [r3, #8]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2180      	movs	r1, #128	; 0x80
 8009a22:	430a      	orrs	r2, r1
 8009a24:	609a      	str	r2, [r3, #8]

      return HAL_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	e00d      	b.n	8009a46 <HAL_USART_Transmit_DMA+0x122>
    }
    else
    {
      /* Set error code to DMA */
      husart->ErrorCode = HAL_USART_ERROR_DMA;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2210      	movs	r2, #16
 8009a2e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2258      	movs	r2, #88	; 0x58
 8009a34:	2100      	movs	r1, #0
 8009a36:	5499      	strb	r1, [r3, r2]

      /* Restore husart->State to ready */
      husart->State = HAL_USART_STATE_READY;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2259      	movs	r2, #89	; 0x59
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	e000      	b.n	8009a46 <HAL_USART_Transmit_DMA+0x122>
    }
  }
  else
  {
    return HAL_BUSY;
 8009a44:	2302      	movs	r3, #2
  }
}
 8009a46:	0018      	movs	r0, r3
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	b007      	add	sp, #28
 8009a4c:	bd90      	pop	{r4, r7, pc}
 8009a4e:	46c0      	nop			; (mov r8, r8)
 8009a50:	08009da9 	.word	0x08009da9
 8009a54:	08009e13 	.word	0x08009e13
 8009a58:	08009e31 	.word	0x08009e31

08009a5c <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	69db      	ldr	r3, [r3, #28]
 8009a6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	4aab      	ldr	r2, [pc, #684]	; (8009d2c <HAL_USART_IRQHandler+0x2d0>)
 8009a80:	4013      	ands	r3, r2
 8009a82:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d117      	bne.n	8009aba <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	2220      	movs	r2, #32
 8009a8e:	4013      	ands	r3, r2
 8009a90:	d013      	beq.n	8009aba <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	2220      	movs	r2, #32
 8009a96:	4013      	ands	r3, r2
 8009a98:	d104      	bne.n	8009aa4 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	2380      	movs	r3, #128	; 0x80
 8009a9e:	055b      	lsls	r3, r3, #21
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	d00a      	beq.n	8009aba <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d100      	bne.n	8009aae <HAL_USART_IRQHandler+0x52>
 8009aac:	e135      	b.n	8009d1a <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	0010      	movs	r0, r2
 8009ab6:	4798      	blx	r3
      }
      return;
 8009ab8:	e12f      	b.n	8009d1a <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d100      	bne.n	8009ac2 <HAL_USART_IRQHandler+0x66>
 8009ac0:	e0eb      	b.n	8009c9a <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	4a9a      	ldr	r2, [pc, #616]	; (8009d30 <HAL_USART_IRQHandler+0x2d4>)
 8009ac6:	4013      	ands	r3, r2
 8009ac8:	d105      	bne.n	8009ad6 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	2390      	movs	r3, #144	; 0x90
 8009ace:	005b      	lsls	r3, r3, #1
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	d100      	bne.n	8009ad6 <HAL_USART_IRQHandler+0x7a>
 8009ad4:	e0e1      	b.n	8009c9a <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	4013      	ands	r3, r2
 8009adc:	d00e      	beq.n	8009afc <HAL_USART_IRQHandler+0xa0>
 8009ade:	69ba      	ldr	r2, [r7, #24]
 8009ae0:	2380      	movs	r3, #128	; 0x80
 8009ae2:	005b      	lsls	r3, r3, #1
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	d009      	beq.n	8009afc <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2201      	movs	r2, #1
 8009aee:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009af4:	2201      	movs	r2, #1
 8009af6:	431a      	orrs	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	2202      	movs	r2, #2
 8009b00:	4013      	ands	r3, r2
 8009b02:	d00d      	beq.n	8009b20 <HAL_USART_IRQHandler+0xc4>
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	2201      	movs	r2, #1
 8009b08:	4013      	ands	r3, r2
 8009b0a:	d009      	beq.n	8009b20 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2202      	movs	r2, #2
 8009b12:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b18:	2204      	movs	r2, #4
 8009b1a:	431a      	orrs	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	2204      	movs	r2, #4
 8009b24:	4013      	ands	r3, r2
 8009b26:	d00d      	beq.n	8009b44 <HAL_USART_IRQHandler+0xe8>
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	d009      	beq.n	8009b44 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2204      	movs	r2, #4
 8009b36:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	431a      	orrs	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	2208      	movs	r2, #8
 8009b48:	4013      	ands	r3, r2
 8009b4a:	d011      	beq.n	8009b70 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	2220      	movs	r2, #32
 8009b50:	4013      	ands	r3, r2
 8009b52:	d103      	bne.n	8009b5c <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	4a76      	ldr	r2, [pc, #472]	; (8009d30 <HAL_USART_IRQHandler+0x2d4>)
 8009b58:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b5a:	d009      	beq.n	8009b70 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2208      	movs	r2, #8
 8009b62:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b68:	2208      	movs	r2, #8
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b70:	69fa      	ldr	r2, [r7, #28]
 8009b72:	2380      	movs	r3, #128	; 0x80
 8009b74:	019b      	lsls	r3, r3, #6
 8009b76:	4013      	ands	r3, r2
 8009b78:	d01a      	beq.n	8009bb0 <HAL_USART_IRQHandler+0x154>
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	4013      	ands	r3, r2
 8009b80:	d016      	beq.n	8009bb0 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2259      	movs	r2, #89	; 0x59
 8009b86:	5c9b      	ldrb	r3, [r3, r2]
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	2b22      	cmp	r3, #34	; 0x22
 8009b8c:	d105      	bne.n	8009b9a <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2280      	movs	r2, #128	; 0x80
 8009b94:	0192      	lsls	r2, r2, #6
 8009b96:	621a      	str	r2, [r3, #32]
        return;
 8009b98:	e0c4      	b.n	8009d24 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2280      	movs	r2, #128	; 0x80
 8009ba0:	0192      	lsls	r2, r2, #6
 8009ba2:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ba8:	2220      	movs	r2, #32
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d100      	bne.n	8009bba <HAL_USART_IRQHandler+0x15e>
 8009bb8:	e0b1      	b.n	8009d1e <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	d011      	beq.n	8009be6 <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	d104      	bne.n	8009bd4 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009bca:	697a      	ldr	r2, [r7, #20]
 8009bcc:	2380      	movs	r3, #128	; 0x80
 8009bce:	055b      	lsls	r3, r3, #21
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	d008      	beq.n	8009be6 <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d004      	beq.n	8009be6 <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	0010      	movs	r0, r2
 8009be4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bea:	2208      	movs	r2, #8
 8009bec:	4013      	ands	r3, r2
 8009bee:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	2240      	movs	r2, #64	; 0x40
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	2b40      	cmp	r3, #64	; 0x40
 8009bfc:	d002      	beq.n	8009c04 <HAL_USART_IRQHandler+0x1a8>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d040      	beq.n	8009c86 <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	0018      	movs	r0, r3
 8009c08:	f000 f8ae 	bl	8009d68 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	2240      	movs	r2, #64	; 0x40
 8009c14:	4013      	ands	r3, r2
 8009c16:	2b40      	cmp	r3, #64	; 0x40
 8009c18:	d130      	bne.n	8009c7c <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	689a      	ldr	r2, [r3, #8]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2140      	movs	r1, #64	; 0x40
 8009c26:	438a      	bics	r2, r1
 8009c28:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d008      	beq.n	8009c44 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c36:	2200      	movs	r2, #0
 8009c38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c3e:	0018      	movs	r0, r3
 8009c40:	f7f9 ffbc 	bl	8003bbc <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d012      	beq.n	8009c72 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c50:	4a38      	ldr	r2, [pc, #224]	; (8009d34 <HAL_USART_IRQHandler+0x2d8>)
 8009c52:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c58:	0018      	movs	r0, r3
 8009c5a:	f7f9 ffaf 	bl	8003bbc <HAL_DMA_Abort_IT>
 8009c5e:	1e03      	subs	r3, r0, #0
 8009c60:	d019      	beq.n	8009c96 <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c6c:	0018      	movs	r0, r3
 8009c6e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009c70:	e011      	b.n	8009c96 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	0018      	movs	r0, r3
 8009c76:	f000 f86f 	bl	8009d58 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009c7a:	e00c      	b.n	8009c96 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f000 f86a 	bl	8009d58 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009c84:	e007      	b.n	8009c96 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	0018      	movs	r0, r3
 8009c8a:	f000 f865 	bl	8009d58 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 8009c94:	e043      	b.n	8009d1e <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009c96:	46c0      	nop			; (mov r8, r8)
    return;
 8009c98:	e041      	b.n	8009d1e <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	2280      	movs	r2, #128	; 0x80
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	d012      	beq.n	8009cc8 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	2280      	movs	r2, #128	; 0x80
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	d104      	bne.n	8009cb4 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	2380      	movs	r3, #128	; 0x80
 8009cae:	041b      	lsls	r3, r3, #16
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	d009      	beq.n	8009cc8 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d032      	beq.n	8009d22 <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	0010      	movs	r0, r2
 8009cc4:	4798      	blx	r3
    }
    return;
 8009cc6:	e02c      	b.n	8009d22 <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	2240      	movs	r2, #64	; 0x40
 8009ccc:	4013      	ands	r3, r2
 8009cce:	d008      	beq.n	8009ce2 <HAL_USART_IRQHandler+0x286>
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	2240      	movs	r2, #64	; 0x40
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	d004      	beq.n	8009ce2 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	0018      	movs	r0, r3
 8009cdc:	f000 fbf6 	bl	800a4cc <USART_EndTransmit_IT>
    return;
 8009ce0:	e020      	b.n	8009d24 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009ce2:	69fa      	ldr	r2, [r7, #28]
 8009ce4:	2380      	movs	r3, #128	; 0x80
 8009ce6:	041b      	lsls	r3, r3, #16
 8009ce8:	4013      	ands	r3, r2
 8009cea:	d009      	beq.n	8009d00 <HAL_USART_IRQHandler+0x2a4>
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	2380      	movs	r3, #128	; 0x80
 8009cf0:	05db      	lsls	r3, r3, #23
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	d004      	beq.n	8009d00 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	0018      	movs	r0, r3
 8009cfa:	f000 fc32 	bl	800a562 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8009cfe:	e011      	b.n	8009d24 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009d00:	69fa      	ldr	r2, [r7, #28]
 8009d02:	2380      	movs	r3, #128	; 0x80
 8009d04:	045b      	lsls	r3, r3, #17
 8009d06:	4013      	ands	r3, r2
 8009d08:	d00c      	beq.n	8009d24 <HAL_USART_IRQHandler+0x2c8>
 8009d0a:	69bb      	ldr	r3, [r7, #24]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	da09      	bge.n	8009d24 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	0018      	movs	r0, r3
 8009d14:	f000 fc1d 	bl	800a552 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8009d18:	e004      	b.n	8009d24 <HAL_USART_IRQHandler+0x2c8>
      return;
 8009d1a:	46c0      	nop			; (mov r8, r8)
 8009d1c:	e002      	b.n	8009d24 <HAL_USART_IRQHandler+0x2c8>
    return;
 8009d1e:	46c0      	nop			; (mov r8, r8)
 8009d20:	e000      	b.n	8009d24 <HAL_USART_IRQHandler+0x2c8>
    return;
 8009d22:	46c0      	nop			; (mov r8, r8)
  }
}
 8009d24:	46bd      	mov	sp, r7
 8009d26:	b008      	add	sp, #32
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	46c0      	nop			; (mov r8, r8)
 8009d2c:	0000200f 	.word	0x0000200f
 8009d30:	10000001 	.word	0x10000001
 8009d34:	08009e77 	.word	0x08009e77

08009d38 <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d40:	46c0      	nop			; (mov r8, r8)
 8009d42:	46bd      	mov	sp, r7
 8009d44:	b002      	add	sp, #8
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8009d50:	46c0      	nop			; (mov r8, r8)
 8009d52:	46bd      	mov	sp, r7
 8009d54:	b002      	add	sp, #8
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8009d60:	46c0      	nop			; (mov r8, r8)
 8009d62:	46bd      	mov	sp, r7
 8009d64:	b002      	add	sp, #8
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4909      	ldr	r1, [pc, #36]	; (8009da0 <USART_EndTransfer+0x38>)
 8009d7c:	400a      	ands	r2, r1
 8009d7e:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	689a      	ldr	r2, [r3, #8]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4906      	ldr	r1, [pc, #24]	; (8009da4 <USART_EndTransfer+0x3c>)
 8009d8c:	400a      	ands	r2, r1
 8009d8e:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2259      	movs	r2, #89	; 0x59
 8009d94:	2101      	movs	r1, #1
 8009d96:	5499      	strb	r1, [r3, r2]
}
 8009d98:	46c0      	nop			; (mov r8, r8)
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	b002      	add	sp, #8
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	fffffe1f 	.word	0xfffffe1f
 8009da4:	ef7ffffe 	.word	0xef7ffffe

08009da8 <USART_DMATransmitCplt>:
  * @brief DMA USART transmit process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2220      	movs	r2, #32
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	d119      	bne.n	8009df6 <USART_DMATransmitCplt+0x4e>
  {
    husart->TxXferCount = 0U;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	85da      	strh	r2, [r3, #46]	; 0x2e

    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2259      	movs	r2, #89	; 0x59
 8009dcc:	5c9b      	ldrb	r3, [r3, r2]
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	2b12      	cmp	r3, #18
 8009dd2:	d11a      	bne.n	8009e0a <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	689a      	ldr	r2, [r3, #8]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2180      	movs	r1, #128	; 0x80
 8009de0:	438a      	bics	r2, r1
 8009de2:	609a      	str	r2, [r3, #8]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2140      	movs	r1, #64	; 0x40
 8009df0:	430a      	orrs	r2, r1
 8009df2:	601a      	str	r2, [r3, #0]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 8009df4:	e009      	b.n	8009e0a <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2259      	movs	r2, #89	; 0x59
 8009dfa:	5c9b      	ldrb	r3, [r3, r2]
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	2b12      	cmp	r3, #18
 8009e00:	d103      	bne.n	8009e0a <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	0018      	movs	r0, r3
 8009e06:	f7f7 f975 	bl	80010f4 <HAL_USART_TxCpltCallback>
}
 8009e0a:	46c0      	nop			; (mov r8, r8)
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	b004      	add	sp, #16
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USART_DMATxHalfCplt>:
  * @brief DMA USART transmit process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b084      	sub	sp, #16
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	0018      	movs	r0, r3
 8009e24:	f7ff ff88 	bl	8009d38 <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8009e28:	46c0      	nop			; (mov r8, r8)
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	b004      	add	sp, #16
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USART_DMAError>:
  * @brief DMA USART communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e3c:	60fb      	str	r3, [r7, #12]

  husart->RxXferCount = 0U;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	85da      	strh	r2, [r3, #46]	; 0x2e
  USART_EndTransfer(husart);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	0018      	movs	r0, r3
 8009e4e:	f7ff ff8b 	bl	8009d68 <USART_EndTransfer>

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e56:	2210      	movs	r2, #16
 8009e58:	431a      	orrs	r2, r3
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	65da      	str	r2, [r3, #92]	; 0x5c
  husart->State = HAL_USART_STATE_READY;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2259      	movs	r2, #89	; 0x59
 8009e62:	2101      	movs	r1, #1
 8009e64:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	0018      	movs	r0, r3
 8009e6a:	f7ff ff75 	bl	8009d58 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8009e6e:	46c0      	nop			; (mov r8, r8)
 8009e70:	46bd      	mov	sp, r7
 8009e72:	b004      	add	sp, #16
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b084      	sub	sp, #16
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e82:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	0018      	movs	r0, r3
 8009e94:	f7ff ff60 	bl	8009d58 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8009e98:	46c0      	nop			; (mov r8, r8)
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	b004      	add	sp, #16
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	603b      	str	r3, [r7, #0]
 8009eac:	1dfb      	adds	r3, r7, #7
 8009eae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009eb0:	e017      	b.n	8009ee2 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	d014      	beq.n	8009ee2 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009eb8:	f7f9 f9ee 	bl	8003298 <HAL_GetTick>
 8009ebc:	0002      	movs	r2, r0
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	69ba      	ldr	r2, [r7, #24]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d302      	bcc.n	8009ece <USART_WaitOnFlagUntilTimeout+0x2e>
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d109      	bne.n	8009ee2 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2259      	movs	r2, #89	; 0x59
 8009ed2:	2101      	movs	r1, #1
 8009ed4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2258      	movs	r2, #88	; 0x58
 8009eda:	2100      	movs	r1, #0
 8009edc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e00f      	b.n	8009f02 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	69db      	ldr	r3, [r3, #28]
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	4013      	ands	r3, r2
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	425a      	negs	r2, r3
 8009ef2:	4153      	adcs	r3, r2
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	001a      	movs	r2, r3
 8009ef8:	1dfb      	adds	r3, r7, #7
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d0d8      	beq.n	8009eb2 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	0018      	movs	r0, r3
 8009f04:	46bd      	mov	sp, r7
 8009f06:	b004      	add	sp, #16
 8009f08:	bd80      	pop	{r7, pc}
	...

08009f0c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b088      	sub	sp, #32
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8009f14:	231e      	movs	r3, #30
 8009f16:	18fb      	adds	r3, r7, r3
 8009f18:	2200      	movs	r2, #0
 8009f1a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	689a      	ldr	r2, [r3, #8]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	431a      	orrs	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	695b      	ldr	r3, [r3, #20]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	2280      	movs	r2, #128	; 0x80
 8009f32:	0212      	lsls	r2, r2, #8
 8009f34:	4313      	orrs	r3, r2
 8009f36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4ab1      	ldr	r2, [pc, #708]	; (800a204 <USART_SetConfig+0x2f8>)
 8009f40:	4013      	ands	r3, r2
 8009f42:	0019      	movs	r1, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	697a      	ldr	r2, [r7, #20]
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8009f4e:	2380      	movs	r3, #128	; 0x80
 8009f50:	011b      	lsls	r3, r3, #4
 8009f52:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6a1b      	ldr	r3, [r3, #32]
 8009f58:	697a      	ldr	r2, [r7, #20]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	699a      	ldr	r2, [r3, #24]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	69db      	ldr	r3, [r3, #28]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	697a      	ldr	r2, [r7, #20]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	4aa2      	ldr	r2, [pc, #648]	; (800a208 <USART_SetConfig+0x2fc>)
 8009f80:	4013      	ands	r3, r2
 8009f82:	0019      	movs	r1, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f94:	220f      	movs	r2, #15
 8009f96:	4393      	bics	r3, r2
 8009f98:	0019      	movs	r1, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a98      	ldr	r2, [pc, #608]	; (800a20c <USART_SetConfig+0x300>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d127      	bne.n	800a000 <USART_SetConfig+0xf4>
 8009fb0:	4b97      	ldr	r3, [pc, #604]	; (800a210 <USART_SetConfig+0x304>)
 8009fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fb4:	2203      	movs	r2, #3
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	2b03      	cmp	r3, #3
 8009fba:	d017      	beq.n	8009fec <USART_SetConfig+0xe0>
 8009fbc:	d81b      	bhi.n	8009ff6 <USART_SetConfig+0xea>
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d00a      	beq.n	8009fd8 <USART_SetConfig+0xcc>
 8009fc2:	d818      	bhi.n	8009ff6 <USART_SetConfig+0xea>
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <USART_SetConfig+0xc2>
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d00a      	beq.n	8009fe2 <USART_SetConfig+0xd6>
 8009fcc:	e013      	b.n	8009ff6 <USART_SetConfig+0xea>
 8009fce:	231f      	movs	r3, #31
 8009fd0:	18fb      	adds	r3, r7, r3
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	701a      	strb	r2, [r3, #0]
 8009fd6:	e058      	b.n	800a08a <USART_SetConfig+0x17e>
 8009fd8:	231f      	movs	r3, #31
 8009fda:	18fb      	adds	r3, r7, r3
 8009fdc:	2202      	movs	r2, #2
 8009fde:	701a      	strb	r2, [r3, #0]
 8009fe0:	e053      	b.n	800a08a <USART_SetConfig+0x17e>
 8009fe2:	231f      	movs	r3, #31
 8009fe4:	18fb      	adds	r3, r7, r3
 8009fe6:	2204      	movs	r2, #4
 8009fe8:	701a      	strb	r2, [r3, #0]
 8009fea:	e04e      	b.n	800a08a <USART_SetConfig+0x17e>
 8009fec:	231f      	movs	r3, #31
 8009fee:	18fb      	adds	r3, r7, r3
 8009ff0:	2208      	movs	r2, #8
 8009ff2:	701a      	strb	r2, [r3, #0]
 8009ff4:	e049      	b.n	800a08a <USART_SetConfig+0x17e>
 8009ff6:	231f      	movs	r3, #31
 8009ff8:	18fb      	adds	r3, r7, r3
 8009ffa:	2210      	movs	r2, #16
 8009ffc:	701a      	strb	r2, [r3, #0]
 8009ffe:	e044      	b.n	800a08a <USART_SetConfig+0x17e>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a83      	ldr	r2, [pc, #524]	; (800a214 <USART_SetConfig+0x308>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d127      	bne.n	800a05a <USART_SetConfig+0x14e>
 800a00a:	4b81      	ldr	r3, [pc, #516]	; (800a210 <USART_SetConfig+0x304>)
 800a00c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a00e:	220c      	movs	r2, #12
 800a010:	4013      	ands	r3, r2
 800a012:	2b0c      	cmp	r3, #12
 800a014:	d017      	beq.n	800a046 <USART_SetConfig+0x13a>
 800a016:	d81b      	bhi.n	800a050 <USART_SetConfig+0x144>
 800a018:	2b08      	cmp	r3, #8
 800a01a:	d00a      	beq.n	800a032 <USART_SetConfig+0x126>
 800a01c:	d818      	bhi.n	800a050 <USART_SetConfig+0x144>
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d002      	beq.n	800a028 <USART_SetConfig+0x11c>
 800a022:	2b04      	cmp	r3, #4
 800a024:	d00a      	beq.n	800a03c <USART_SetConfig+0x130>
 800a026:	e013      	b.n	800a050 <USART_SetConfig+0x144>
 800a028:	231f      	movs	r3, #31
 800a02a:	18fb      	adds	r3, r7, r3
 800a02c:	2200      	movs	r2, #0
 800a02e:	701a      	strb	r2, [r3, #0]
 800a030:	e02b      	b.n	800a08a <USART_SetConfig+0x17e>
 800a032:	231f      	movs	r3, #31
 800a034:	18fb      	adds	r3, r7, r3
 800a036:	2202      	movs	r2, #2
 800a038:	701a      	strb	r2, [r3, #0]
 800a03a:	e026      	b.n	800a08a <USART_SetConfig+0x17e>
 800a03c:	231f      	movs	r3, #31
 800a03e:	18fb      	adds	r3, r7, r3
 800a040:	2204      	movs	r2, #4
 800a042:	701a      	strb	r2, [r3, #0]
 800a044:	e021      	b.n	800a08a <USART_SetConfig+0x17e>
 800a046:	231f      	movs	r3, #31
 800a048:	18fb      	adds	r3, r7, r3
 800a04a:	2208      	movs	r2, #8
 800a04c:	701a      	strb	r2, [r3, #0]
 800a04e:	e01c      	b.n	800a08a <USART_SetConfig+0x17e>
 800a050:	231f      	movs	r3, #31
 800a052:	18fb      	adds	r3, r7, r3
 800a054:	2210      	movs	r2, #16
 800a056:	701a      	strb	r2, [r3, #0]
 800a058:	e017      	b.n	800a08a <USART_SetConfig+0x17e>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a6e      	ldr	r2, [pc, #440]	; (800a218 <USART_SetConfig+0x30c>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d104      	bne.n	800a06e <USART_SetConfig+0x162>
 800a064:	231f      	movs	r3, #31
 800a066:	18fb      	adds	r3, r7, r3
 800a068:	2200      	movs	r2, #0
 800a06a:	701a      	strb	r2, [r3, #0]
 800a06c:	e00d      	b.n	800a08a <USART_SetConfig+0x17e>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a6a      	ldr	r2, [pc, #424]	; (800a21c <USART_SetConfig+0x310>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d104      	bne.n	800a082 <USART_SetConfig+0x176>
 800a078:	231f      	movs	r3, #31
 800a07a:	18fb      	adds	r3, r7, r3
 800a07c:	2200      	movs	r2, #0
 800a07e:	701a      	strb	r2, [r3, #0]
 800a080:	e003      	b.n	800a08a <USART_SetConfig+0x17e>
 800a082:	231f      	movs	r3, #31
 800a084:	18fb      	adds	r3, r7, r3
 800a086:	2210      	movs	r2, #16
 800a088:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800a08a:	231f      	movs	r3, #31
 800a08c:	18fb      	adds	r3, r7, r3
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	2b08      	cmp	r3, #8
 800a092:	d100      	bne.n	800a096 <USART_SetConfig+0x18a>
 800a094:	e139      	b.n	800a30a <USART_SetConfig+0x3fe>
 800a096:	dd00      	ble.n	800a09a <USART_SetConfig+0x18e>
 800a098:	e195      	b.n	800a3c6 <USART_SetConfig+0x4ba>
 800a09a:	2b04      	cmp	r3, #4
 800a09c:	d100      	bne.n	800a0a0 <USART_SetConfig+0x194>
 800a09e:	e0d3      	b.n	800a248 <USART_SetConfig+0x33c>
 800a0a0:	dd00      	ble.n	800a0a4 <USART_SetConfig+0x198>
 800a0a2:	e190      	b.n	800a3c6 <USART_SetConfig+0x4ba>
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d003      	beq.n	800a0b0 <USART_SetConfig+0x1a4>
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d100      	bne.n	800a0ae <USART_SetConfig+0x1a2>
 800a0ac:	e061      	b.n	800a172 <USART_SetConfig+0x266>
 800a0ae:	e18a      	b.n	800a3c6 <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800a0b0:	f7fc f904 	bl	80062bc <HAL_RCC_GetPCLK1Freq>
 800a0b4:	0003      	movs	r3, r0
 800a0b6:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d044      	beq.n	800a14a <USART_SetConfig+0x23e>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d03e      	beq.n	800a146 <USART_SetConfig+0x23a>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d038      	beq.n	800a142 <USART_SetConfig+0x236>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	2b03      	cmp	r3, #3
 800a0d6:	d032      	beq.n	800a13e <USART_SetConfig+0x232>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0dc:	2b04      	cmp	r3, #4
 800a0de:	d02c      	beq.n	800a13a <USART_SetConfig+0x22e>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e4:	2b05      	cmp	r3, #5
 800a0e6:	d026      	beq.n	800a136 <USART_SetConfig+0x22a>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ec:	2b06      	cmp	r3, #6
 800a0ee:	d020      	beq.n	800a132 <USART_SetConfig+0x226>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f4:	2b07      	cmp	r3, #7
 800a0f6:	d01a      	beq.n	800a12e <USART_SetConfig+0x222>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fc:	2b08      	cmp	r3, #8
 800a0fe:	d014      	beq.n	800a12a <USART_SetConfig+0x21e>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a104:	2b09      	cmp	r3, #9
 800a106:	d00e      	beq.n	800a126 <USART_SetConfig+0x21a>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10c:	2b0a      	cmp	r3, #10
 800a10e:	d008      	beq.n	800a122 <USART_SetConfig+0x216>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a114:	2b0b      	cmp	r3, #11
 800a116:	d102      	bne.n	800a11e <USART_SetConfig+0x212>
 800a118:	2380      	movs	r3, #128	; 0x80
 800a11a:	005b      	lsls	r3, r3, #1
 800a11c:	e016      	b.n	800a14c <USART_SetConfig+0x240>
 800a11e:	2301      	movs	r3, #1
 800a120:	e014      	b.n	800a14c <USART_SetConfig+0x240>
 800a122:	2380      	movs	r3, #128	; 0x80
 800a124:	e012      	b.n	800a14c <USART_SetConfig+0x240>
 800a126:	2340      	movs	r3, #64	; 0x40
 800a128:	e010      	b.n	800a14c <USART_SetConfig+0x240>
 800a12a:	2320      	movs	r3, #32
 800a12c:	e00e      	b.n	800a14c <USART_SetConfig+0x240>
 800a12e:	2310      	movs	r3, #16
 800a130:	e00c      	b.n	800a14c <USART_SetConfig+0x240>
 800a132:	230c      	movs	r3, #12
 800a134:	e00a      	b.n	800a14c <USART_SetConfig+0x240>
 800a136:	230a      	movs	r3, #10
 800a138:	e008      	b.n	800a14c <USART_SetConfig+0x240>
 800a13a:	2308      	movs	r3, #8
 800a13c:	e006      	b.n	800a14c <USART_SetConfig+0x240>
 800a13e:	2306      	movs	r3, #6
 800a140:	e004      	b.n	800a14c <USART_SetConfig+0x240>
 800a142:	2304      	movs	r3, #4
 800a144:	e002      	b.n	800a14c <USART_SetConfig+0x240>
 800a146:	2302      	movs	r3, #2
 800a148:	e000      	b.n	800a14c <USART_SetConfig+0x240>
 800a14a:	2301      	movs	r3, #1
 800a14c:	0019      	movs	r1, r3
 800a14e:	6938      	ldr	r0, [r7, #16]
 800a150:	f7f5 ffd8 	bl	8000104 <__udivsi3>
 800a154:	0003      	movs	r3, r0
 800a156:	005a      	lsls	r2, r3, #1
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	085b      	lsrs	r3, r3, #1
 800a15e:	18d2      	adds	r2, r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	0019      	movs	r1, r3
 800a166:	0010      	movs	r0, r2
 800a168:	f7f5 ffcc 	bl	8000104 <__udivsi3>
 800a16c:	0003      	movs	r3, r0
 800a16e:	61bb      	str	r3, [r7, #24]
      break;
 800a170:	e12e      	b.n	800a3d0 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a176:	2b00      	cmp	r3, #0
 800a178:	d052      	beq.n	800a220 <USART_SetConfig+0x314>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d03e      	beq.n	800a200 <USART_SetConfig+0x2f4>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	2b02      	cmp	r3, #2
 800a188:	d038      	beq.n	800a1fc <USART_SetConfig+0x2f0>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d032      	beq.n	800a1f8 <USART_SetConfig+0x2ec>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	2b04      	cmp	r3, #4
 800a198:	d02c      	beq.n	800a1f4 <USART_SetConfig+0x2e8>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	2b05      	cmp	r3, #5
 800a1a0:	d026      	beq.n	800a1f0 <USART_SetConfig+0x2e4>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	2b06      	cmp	r3, #6
 800a1a8:	d020      	beq.n	800a1ec <USART_SetConfig+0x2e0>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	2b07      	cmp	r3, #7
 800a1b0:	d01a      	beq.n	800a1e8 <USART_SetConfig+0x2dc>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b6:	2b08      	cmp	r3, #8
 800a1b8:	d014      	beq.n	800a1e4 <USART_SetConfig+0x2d8>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	2b09      	cmp	r3, #9
 800a1c0:	d00e      	beq.n	800a1e0 <USART_SetConfig+0x2d4>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	2b0a      	cmp	r3, #10
 800a1c8:	d008      	beq.n	800a1dc <USART_SetConfig+0x2d0>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	2b0b      	cmp	r3, #11
 800a1d0:	d102      	bne.n	800a1d8 <USART_SetConfig+0x2cc>
 800a1d2:	2380      	movs	r3, #128	; 0x80
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	e024      	b.n	800a222 <USART_SetConfig+0x316>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e022      	b.n	800a222 <USART_SetConfig+0x316>
 800a1dc:	2380      	movs	r3, #128	; 0x80
 800a1de:	e020      	b.n	800a222 <USART_SetConfig+0x316>
 800a1e0:	2340      	movs	r3, #64	; 0x40
 800a1e2:	e01e      	b.n	800a222 <USART_SetConfig+0x316>
 800a1e4:	2320      	movs	r3, #32
 800a1e6:	e01c      	b.n	800a222 <USART_SetConfig+0x316>
 800a1e8:	2310      	movs	r3, #16
 800a1ea:	e01a      	b.n	800a222 <USART_SetConfig+0x316>
 800a1ec:	230c      	movs	r3, #12
 800a1ee:	e018      	b.n	800a222 <USART_SetConfig+0x316>
 800a1f0:	230a      	movs	r3, #10
 800a1f2:	e016      	b.n	800a222 <USART_SetConfig+0x316>
 800a1f4:	2308      	movs	r3, #8
 800a1f6:	e014      	b.n	800a222 <USART_SetConfig+0x316>
 800a1f8:	2306      	movs	r3, #6
 800a1fa:	e012      	b.n	800a222 <USART_SetConfig+0x316>
 800a1fc:	2304      	movs	r3, #4
 800a1fe:	e010      	b.n	800a222 <USART_SetConfig+0x316>
 800a200:	2302      	movs	r3, #2
 800a202:	e00e      	b.n	800a222 <USART_SetConfig+0x316>
 800a204:	cfff69f3 	.word	0xcfff69f3
 800a208:	ffffc0f6 	.word	0xffffc0f6
 800a20c:	40013800 	.word	0x40013800
 800a210:	40021000 	.word	0x40021000
 800a214:	40004400 	.word	0x40004400
 800a218:	40004800 	.word	0x40004800
 800a21c:	40004c00 	.word	0x40004c00
 800a220:	2301      	movs	r3, #1
 800a222:	0019      	movs	r1, r3
 800a224:	4886      	ldr	r0, [pc, #536]	; (800a440 <USART_SetConfig+0x534>)
 800a226:	f7f5 ff6d 	bl	8000104 <__udivsi3>
 800a22a:	0003      	movs	r3, r0
 800a22c:	005a      	lsls	r2, r3, #1
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	085b      	lsrs	r3, r3, #1
 800a234:	18d2      	adds	r2, r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	0019      	movs	r1, r3
 800a23c:	0010      	movs	r0, r2
 800a23e:	f7f5 ff61 	bl	8000104 <__udivsi3>
 800a242:	0003      	movs	r3, r0
 800a244:	61bb      	str	r3, [r7, #24]
      break;
 800a246:	e0c3      	b.n	800a3d0 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800a248:	f7fb ffac 	bl	80061a4 <HAL_RCC_GetSysClockFreq>
 800a24c:	0003      	movs	r3, r0
 800a24e:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a254:	2b00      	cmp	r3, #0
 800a256:	d044      	beq.n	800a2e2 <USART_SetConfig+0x3d6>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d03e      	beq.n	800a2de <USART_SetConfig+0x3d2>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a264:	2b02      	cmp	r3, #2
 800a266:	d038      	beq.n	800a2da <USART_SetConfig+0x3ce>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d032      	beq.n	800a2d6 <USART_SetConfig+0x3ca>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a274:	2b04      	cmp	r3, #4
 800a276:	d02c      	beq.n	800a2d2 <USART_SetConfig+0x3c6>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27c:	2b05      	cmp	r3, #5
 800a27e:	d026      	beq.n	800a2ce <USART_SetConfig+0x3c2>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a284:	2b06      	cmp	r3, #6
 800a286:	d020      	beq.n	800a2ca <USART_SetConfig+0x3be>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28c:	2b07      	cmp	r3, #7
 800a28e:	d01a      	beq.n	800a2c6 <USART_SetConfig+0x3ba>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a294:	2b08      	cmp	r3, #8
 800a296:	d014      	beq.n	800a2c2 <USART_SetConfig+0x3b6>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29c:	2b09      	cmp	r3, #9
 800a29e:	d00e      	beq.n	800a2be <USART_SetConfig+0x3b2>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a4:	2b0a      	cmp	r3, #10
 800a2a6:	d008      	beq.n	800a2ba <USART_SetConfig+0x3ae>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ac:	2b0b      	cmp	r3, #11
 800a2ae:	d102      	bne.n	800a2b6 <USART_SetConfig+0x3aa>
 800a2b0:	2380      	movs	r3, #128	; 0x80
 800a2b2:	005b      	lsls	r3, r3, #1
 800a2b4:	e016      	b.n	800a2e4 <USART_SetConfig+0x3d8>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e014      	b.n	800a2e4 <USART_SetConfig+0x3d8>
 800a2ba:	2380      	movs	r3, #128	; 0x80
 800a2bc:	e012      	b.n	800a2e4 <USART_SetConfig+0x3d8>
 800a2be:	2340      	movs	r3, #64	; 0x40
 800a2c0:	e010      	b.n	800a2e4 <USART_SetConfig+0x3d8>
 800a2c2:	2320      	movs	r3, #32
 800a2c4:	e00e      	b.n	800a2e4 <USART_SetConfig+0x3d8>
 800a2c6:	2310      	movs	r3, #16
 800a2c8:	e00c      	b.n	800a2e4 <USART_SetConfig+0x3d8>
 800a2ca:	230c      	movs	r3, #12
 800a2cc:	e00a      	b.n	800a2e4 <USART_SetConfig+0x3d8>
 800a2ce:	230a      	movs	r3, #10
 800a2d0:	e008      	b.n	800a2e4 <USART_SetConfig+0x3d8>
 800a2d2:	2308      	movs	r3, #8
 800a2d4:	e006      	b.n	800a2e4 <USART_SetConfig+0x3d8>
 800a2d6:	2306      	movs	r3, #6
 800a2d8:	e004      	b.n	800a2e4 <USART_SetConfig+0x3d8>
 800a2da:	2304      	movs	r3, #4
 800a2dc:	e002      	b.n	800a2e4 <USART_SetConfig+0x3d8>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e000      	b.n	800a2e4 <USART_SetConfig+0x3d8>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	0019      	movs	r1, r3
 800a2e6:	6938      	ldr	r0, [r7, #16]
 800a2e8:	f7f5 ff0c 	bl	8000104 <__udivsi3>
 800a2ec:	0003      	movs	r3, r0
 800a2ee:	005a      	lsls	r2, r3, #1
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	085b      	lsrs	r3, r3, #1
 800a2f6:	18d2      	adds	r2, r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	0019      	movs	r1, r3
 800a2fe:	0010      	movs	r0, r2
 800a300:	f7f5 ff00 	bl	8000104 <__udivsi3>
 800a304:	0003      	movs	r3, r0
 800a306:	61bb      	str	r3, [r7, #24]
      break;
 800a308:	e062      	b.n	800a3d0 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d044      	beq.n	800a39c <USART_SetConfig+0x490>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a316:	2b01      	cmp	r3, #1
 800a318:	d03e      	beq.n	800a398 <USART_SetConfig+0x48c>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d038      	beq.n	800a394 <USART_SetConfig+0x488>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	2b03      	cmp	r3, #3
 800a328:	d032      	beq.n	800a390 <USART_SetConfig+0x484>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32e:	2b04      	cmp	r3, #4
 800a330:	d02c      	beq.n	800a38c <USART_SetConfig+0x480>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a336:	2b05      	cmp	r3, #5
 800a338:	d026      	beq.n	800a388 <USART_SetConfig+0x47c>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33e:	2b06      	cmp	r3, #6
 800a340:	d020      	beq.n	800a384 <USART_SetConfig+0x478>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a346:	2b07      	cmp	r3, #7
 800a348:	d01a      	beq.n	800a380 <USART_SetConfig+0x474>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34e:	2b08      	cmp	r3, #8
 800a350:	d014      	beq.n	800a37c <USART_SetConfig+0x470>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a356:	2b09      	cmp	r3, #9
 800a358:	d00e      	beq.n	800a378 <USART_SetConfig+0x46c>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	2b0a      	cmp	r3, #10
 800a360:	d008      	beq.n	800a374 <USART_SetConfig+0x468>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a366:	2b0b      	cmp	r3, #11
 800a368:	d102      	bne.n	800a370 <USART_SetConfig+0x464>
 800a36a:	2380      	movs	r3, #128	; 0x80
 800a36c:	005b      	lsls	r3, r3, #1
 800a36e:	e016      	b.n	800a39e <USART_SetConfig+0x492>
 800a370:	2301      	movs	r3, #1
 800a372:	e014      	b.n	800a39e <USART_SetConfig+0x492>
 800a374:	2380      	movs	r3, #128	; 0x80
 800a376:	e012      	b.n	800a39e <USART_SetConfig+0x492>
 800a378:	2340      	movs	r3, #64	; 0x40
 800a37a:	e010      	b.n	800a39e <USART_SetConfig+0x492>
 800a37c:	2320      	movs	r3, #32
 800a37e:	e00e      	b.n	800a39e <USART_SetConfig+0x492>
 800a380:	2310      	movs	r3, #16
 800a382:	e00c      	b.n	800a39e <USART_SetConfig+0x492>
 800a384:	230c      	movs	r3, #12
 800a386:	e00a      	b.n	800a39e <USART_SetConfig+0x492>
 800a388:	230a      	movs	r3, #10
 800a38a:	e008      	b.n	800a39e <USART_SetConfig+0x492>
 800a38c:	2308      	movs	r3, #8
 800a38e:	e006      	b.n	800a39e <USART_SetConfig+0x492>
 800a390:	2306      	movs	r3, #6
 800a392:	e004      	b.n	800a39e <USART_SetConfig+0x492>
 800a394:	2304      	movs	r3, #4
 800a396:	e002      	b.n	800a39e <USART_SetConfig+0x492>
 800a398:	2302      	movs	r3, #2
 800a39a:	e000      	b.n	800a39e <USART_SetConfig+0x492>
 800a39c:	2301      	movs	r3, #1
 800a39e:	0019      	movs	r1, r3
 800a3a0:	2380      	movs	r3, #128	; 0x80
 800a3a2:	0218      	lsls	r0, r3, #8
 800a3a4:	f7f5 feae 	bl	8000104 <__udivsi3>
 800a3a8:	0003      	movs	r3, r0
 800a3aa:	005a      	lsls	r2, r3, #1
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	085b      	lsrs	r3, r3, #1
 800a3b2:	18d2      	adds	r2, r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	0019      	movs	r1, r3
 800a3ba:	0010      	movs	r0, r2
 800a3bc:	f7f5 fea2 	bl	8000104 <__udivsi3>
 800a3c0:	0003      	movs	r3, r0
 800a3c2:	61bb      	str	r3, [r7, #24]
      break;
 800a3c4:	e004      	b.n	800a3d0 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800a3c6:	231e      	movs	r3, #30
 800a3c8:	18fb      	adds	r3, r7, r3
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	701a      	strb	r2, [r3, #0]
      break;
 800a3ce:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	2b0f      	cmp	r3, #15
 800a3d4:	d91c      	bls.n	800a410 <USART_SetConfig+0x504>
 800a3d6:	69ba      	ldr	r2, [r7, #24]
 800a3d8:	2380      	movs	r3, #128	; 0x80
 800a3da:	025b      	lsls	r3, r3, #9
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d217      	bcs.n	800a410 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	200e      	movs	r0, #14
 800a3e6:	183b      	adds	r3, r7, r0
 800a3e8:	210f      	movs	r1, #15
 800a3ea:	438a      	bics	r2, r1
 800a3ec:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	085b      	lsrs	r3, r3, #1
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	2207      	movs	r2, #7
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	b299      	uxth	r1, r3
 800a3fa:	183b      	adds	r3, r7, r0
 800a3fc:	183a      	adds	r2, r7, r0
 800a3fe:	8812      	ldrh	r2, [r2, #0]
 800a400:	430a      	orrs	r2, r1
 800a402:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	183a      	adds	r2, r7, r0
 800a40a:	8812      	ldrh	r2, [r2, #0]
 800a40c:	60da      	str	r2, [r3, #12]
 800a40e:	e003      	b.n	800a418 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800a410:	231e      	movs	r3, #30
 800a412:	18fb      	adds	r3, r7, r3
 800a414:	2201      	movs	r2, #1
 800a416:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800a430:	231e      	movs	r3, #30
 800a432:	18fb      	adds	r3, r7, r3
 800a434:	781b      	ldrb	r3, [r3, #0]
}
 800a436:	0018      	movs	r0, r3
 800a438:	46bd      	mov	sp, r7
 800a43a:	b008      	add	sp, #32
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	46c0      	nop			; (mov r8, r8)
 800a440:	00f42400 	.word	0x00f42400

0800a444 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b086      	sub	sp, #24
 800a448:	af02      	add	r7, sp, #8
 800a44a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a452:	f7f8 ff21 	bl	8003298 <HAL_GetTick>
 800a456:	0003      	movs	r3, r0
 800a458:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2208      	movs	r2, #8
 800a462:	4013      	ands	r3, r2
 800a464:	2b08      	cmp	r3, #8
 800a466:	d10e      	bne.n	800a486 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	2380      	movs	r3, #128	; 0x80
 800a46c:	0399      	lsls	r1, r3, #14
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	23fa      	movs	r3, #250	; 0xfa
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	0013      	movs	r3, r2
 800a478:	2200      	movs	r2, #0
 800a47a:	f7ff fd11 	bl	8009ea0 <USART_WaitOnFlagUntilTimeout>
 800a47e:	1e03      	subs	r3, r0, #0
 800a480:	d001      	beq.n	800a486 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a482:	2303      	movs	r3, #3
 800a484:	e01e      	b.n	800a4c4 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2204      	movs	r2, #4
 800a48e:	4013      	ands	r3, r2
 800a490:	2b04      	cmp	r3, #4
 800a492:	d10e      	bne.n	800a4b2 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	2380      	movs	r3, #128	; 0x80
 800a498:	03d9      	lsls	r1, r3, #15
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	23fa      	movs	r3, #250	; 0xfa
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	0013      	movs	r3, r2
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f7ff fcfb 	bl	8009ea0 <USART_WaitOnFlagUntilTimeout>
 800a4aa:	1e03      	subs	r3, r0, #0
 800a4ac:	d001      	beq.n	800a4b2 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e008      	b.n	800a4c4 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2259      	movs	r2, #89	; 0x59
 800a4b6:	2101      	movs	r1, #1
 800a4b8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2258      	movs	r2, #88	; 0x58
 800a4be:	2100      	movs	r1, #0
 800a4c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
}
 800a4c4:	0018      	movs	r0, r3
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	b004      	add	sp, #16
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	2140      	movs	r1, #64	; 0x40
 800a4e0:	438a      	bics	r2, r1
 800a4e2:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	689a      	ldr	r2, [r3, #8]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	438a      	bics	r2, r1
 800a4f2:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2259      	movs	r2, #89	; 0x59
 800a4fe:	5c9b      	ldrb	r3, [r3, r2]
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b12      	cmp	r3, #18
 800a504:	d114      	bne.n	800a530 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2208      	movs	r2, #8
 800a50c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	699a      	ldr	r2, [r3, #24]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2108      	movs	r1, #8
 800a51a:	430a      	orrs	r2, r1
 800a51c:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2259      	movs	r2, #89	; 0x59
 800a522:	2101      	movs	r1, #1
 800a524:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	0018      	movs	r0, r3
 800a52a:	f7f6 fde3 	bl	80010f4 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a52e:	e00c      	b.n	800a54a <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a534:	b29b      	uxth	r3, r3
 800a536:	2b00      	cmp	r3, #0
 800a538:	d107      	bne.n	800a54a <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2259      	movs	r2, #89	; 0x59
 800a53e:	2101      	movs	r1, #1
 800a540:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	0018      	movs	r0, r3
 800a546:	f7ff fbff 	bl	8009d48 <HAL_USART_TxRxCpltCallback>
}
 800a54a:	46c0      	nop			; (mov r8, r8)
 800a54c:	46bd      	mov	sp, r7
 800a54e:	b002      	add	sp, #8
 800a550:	bd80      	pop	{r7, pc}

0800a552 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b082      	sub	sp, #8
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a55a:	46c0      	nop			; (mov r8, r8)
 800a55c:	46bd      	mov	sp, r7
 800a55e:	b002      	add	sp, #8
 800a560:	bd80      	pop	{r7, pc}

0800a562 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b082      	sub	sp, #8
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a56a:	46c0      	nop			; (mov r8, r8)
 800a56c:	46bd      	mov	sp, r7
 800a56e:	b002      	add	sp, #8
 800a570:	bd80      	pop	{r7, pc}

0800a572 <LL_GPIO_SetPinMode>:
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	60f8      	str	r0, [r7, #12]
 800a57a:	60b9      	str	r1, [r7, #8]
 800a57c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6819      	ldr	r1, [r3, #0]
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	435b      	muls	r3, r3
 800a586:	001a      	movs	r2, r3
 800a588:	0013      	movs	r3, r2
 800a58a:	005b      	lsls	r3, r3, #1
 800a58c:	189b      	adds	r3, r3, r2
 800a58e:	43db      	mvns	r3, r3
 800a590:	400b      	ands	r3, r1
 800a592:	001a      	movs	r2, r3
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	435b      	muls	r3, r3
 800a598:	6879      	ldr	r1, [r7, #4]
 800a59a:	434b      	muls	r3, r1
 800a59c:	431a      	orrs	r2, r3
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	601a      	str	r2, [r3, #0]
}
 800a5a2:	46c0      	nop			; (mov r8, r8)
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	b004      	add	sp, #16
 800a5a8:	bd80      	pop	{r7, pc}

0800a5aa <LL_GPIO_SetPinOutputType>:
{
 800a5aa:	b580      	push	{r7, lr}
 800a5ac:	b084      	sub	sp, #16
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	60f8      	str	r0, [r7, #12]
 800a5b2:	60b9      	str	r1, [r7, #8]
 800a5b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	68ba      	ldr	r2, [r7, #8]
 800a5bc:	43d2      	mvns	r2, r2
 800a5be:	401a      	ands	r2, r3
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	6879      	ldr	r1, [r7, #4]
 800a5c4:	434b      	muls	r3, r1
 800a5c6:	431a      	orrs	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	605a      	str	r2, [r3, #4]
}
 800a5cc:	46c0      	nop			; (mov r8, r8)
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	b004      	add	sp, #16
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <LL_GPIO_SetPinSpeed>:
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6899      	ldr	r1, [r3, #8]
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	435b      	muls	r3, r3
 800a5e8:	001a      	movs	r2, r3
 800a5ea:	0013      	movs	r3, r2
 800a5ec:	005b      	lsls	r3, r3, #1
 800a5ee:	189b      	adds	r3, r3, r2
 800a5f0:	43db      	mvns	r3, r3
 800a5f2:	400b      	ands	r3, r1
 800a5f4:	001a      	movs	r2, r3
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	435b      	muls	r3, r3
 800a5fa:	6879      	ldr	r1, [r7, #4]
 800a5fc:	434b      	muls	r3, r1
 800a5fe:	431a      	orrs	r2, r3
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	609a      	str	r2, [r3, #8]
}
 800a604:	46c0      	nop			; (mov r8, r8)
 800a606:	46bd      	mov	sp, r7
 800a608:	b004      	add	sp, #16
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <LL_GPIO_SetPinPull>:
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	68d9      	ldr	r1, [r3, #12]
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	435b      	muls	r3, r3
 800a620:	001a      	movs	r2, r3
 800a622:	0013      	movs	r3, r2
 800a624:	005b      	lsls	r3, r3, #1
 800a626:	189b      	adds	r3, r3, r2
 800a628:	43db      	mvns	r3, r3
 800a62a:	400b      	ands	r3, r1
 800a62c:	001a      	movs	r2, r3
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	435b      	muls	r3, r3
 800a632:	6879      	ldr	r1, [r7, #4]
 800a634:	434b      	muls	r3, r1
 800a636:	431a      	orrs	r2, r3
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	60da      	str	r2, [r3, #12]
}
 800a63c:	46c0      	nop			; (mov r8, r8)
 800a63e:	46bd      	mov	sp, r7
 800a640:	b004      	add	sp, #16
 800a642:	bd80      	pop	{r7, pc}

0800a644 <LL_GPIO_SetAFPin_0_7>:
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6a19      	ldr	r1, [r3, #32]
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	435b      	muls	r3, r3
 800a658:	68ba      	ldr	r2, [r7, #8]
 800a65a:	4353      	muls	r3, r2
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	435a      	muls	r2, r3
 800a660:	0013      	movs	r3, r2
 800a662:	011b      	lsls	r3, r3, #4
 800a664:	1a9b      	subs	r3, r3, r2
 800a666:	43db      	mvns	r3, r3
 800a668:	400b      	ands	r3, r1
 800a66a:	001a      	movs	r2, r3
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	435b      	muls	r3, r3
 800a670:	68b9      	ldr	r1, [r7, #8]
 800a672:	434b      	muls	r3, r1
 800a674:	68b9      	ldr	r1, [r7, #8]
 800a676:	434b      	muls	r3, r1
 800a678:	6879      	ldr	r1, [r7, #4]
 800a67a:	434b      	muls	r3, r1
 800a67c:	431a      	orrs	r2, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	621a      	str	r2, [r3, #32]
}
 800a682:	46c0      	nop			; (mov r8, r8)
 800a684:	46bd      	mov	sp, r7
 800a686:	b004      	add	sp, #16
 800a688:	bd80      	pop	{r7, pc}

0800a68a <LL_GPIO_SetAFPin_8_15>:
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b084      	sub	sp, #16
 800a68e:	af00      	add	r7, sp, #0
 800a690:	60f8      	str	r0, [r7, #12]
 800a692:	60b9      	str	r1, [r7, #8]
 800a694:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	0a1b      	lsrs	r3, r3, #8
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	0a12      	lsrs	r2, r2, #8
 800a6a2:	4353      	muls	r3, r2
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	0a12      	lsrs	r2, r2, #8
 800a6a8:	4353      	muls	r3, r2
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	0a12      	lsrs	r2, r2, #8
 800a6ae:	435a      	muls	r2, r3
 800a6b0:	0013      	movs	r3, r2
 800a6b2:	011b      	lsls	r3, r3, #4
 800a6b4:	1a9b      	subs	r3, r3, r2
 800a6b6:	43db      	mvns	r3, r3
 800a6b8:	400b      	ands	r3, r1
 800a6ba:	001a      	movs	r2, r3
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	0a1b      	lsrs	r3, r3, #8
 800a6c0:	68b9      	ldr	r1, [r7, #8]
 800a6c2:	0a09      	lsrs	r1, r1, #8
 800a6c4:	434b      	muls	r3, r1
 800a6c6:	68b9      	ldr	r1, [r7, #8]
 800a6c8:	0a09      	lsrs	r1, r1, #8
 800a6ca:	434b      	muls	r3, r1
 800a6cc:	68b9      	ldr	r1, [r7, #8]
 800a6ce:	0a09      	lsrs	r1, r1, #8
 800a6d0:	434b      	muls	r3, r1
 800a6d2:	6879      	ldr	r1, [r7, #4]
 800a6d4:	434b      	muls	r3, r1
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a6dc:	46c0      	nop			; (mov r8, r8)
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	b004      	add	sp, #16
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a6f2:	e047      	b.n	800a784 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2101      	movs	r1, #1
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	4091      	lsls	r1, r2
 800a6fe:	000a      	movs	r2, r1
 800a700:	4013      	ands	r3, r2
 800a702:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d039      	beq.n	800a77e <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d003      	beq.n	800a71a <LL_GPIO_Init+0x36>
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	2b02      	cmp	r3, #2
 800a718:	d10d      	bne.n	800a736 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	689a      	ldr	r2, [r3, #8]
 800a71e:	68b9      	ldr	r1, [r7, #8]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	0018      	movs	r0, r3
 800a724:	f7ff ff56 	bl	800a5d4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	68da      	ldr	r2, [r3, #12]
 800a72c:	68b9      	ldr	r1, [r7, #8]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	0018      	movs	r0, r3
 800a732:	f7ff ff3a 	bl	800a5aa <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	691a      	ldr	r2, [r3, #16]
 800a73a:	68b9      	ldr	r1, [r7, #8]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	0018      	movs	r0, r3
 800a740:	f7ff ff64 	bl	800a60c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d111      	bne.n	800a770 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	2bff      	cmp	r3, #255	; 0xff
 800a750:	d807      	bhi.n	800a762 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	695a      	ldr	r2, [r3, #20]
 800a756:	68b9      	ldr	r1, [r7, #8]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	0018      	movs	r0, r3
 800a75c:	f7ff ff72 	bl	800a644 <LL_GPIO_SetAFPin_0_7>
 800a760:	e006      	b.n	800a770 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	695a      	ldr	r2, [r3, #20]
 800a766:	68b9      	ldr	r1, [r7, #8]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	0018      	movs	r0, r3
 800a76c:	f7ff ff8d 	bl	800a68a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	68b9      	ldr	r1, [r7, #8]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	0018      	movs	r0, r3
 800a77a:	f7ff fefa 	bl	800a572 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3301      	adds	r3, #1
 800a782:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	40da      	lsrs	r2, r3
 800a78c:	1e13      	subs	r3, r2, #0
 800a78e:	d1b1      	bne.n	800a6f4 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800a790:	2300      	movs	r3, #0
}
 800a792:	0018      	movs	r0, r3
 800a794:	46bd      	mov	sp, r7
 800a796:	b004      	add	sp, #16
 800a798:	bd80      	pop	{r7, pc}
	...

0800a79c <LL_RCC_HSI_IsReady>:
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a7a0:	4b07      	ldr	r3, [pc, #28]	; (800a7c0 <LL_RCC_HSI_IsReady+0x24>)
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	2380      	movs	r3, #128	; 0x80
 800a7a6:	00db      	lsls	r3, r3, #3
 800a7a8:	401a      	ands	r2, r3
 800a7aa:	2380      	movs	r3, #128	; 0x80
 800a7ac:	00db      	lsls	r3, r3, #3
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d101      	bne.n	800a7b6 <LL_RCC_HSI_IsReady+0x1a>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e000      	b.n	800a7b8 <LL_RCC_HSI_IsReady+0x1c>
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	0018      	movs	r0, r3
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	46c0      	nop			; (mov r8, r8)
 800a7c0:	40021000 	.word	0x40021000

0800a7c4 <LL_RCC_LSE_IsReady>:
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a7c8:	4b05      	ldr	r3, [pc, #20]	; (800a7e0 <LL_RCC_LSE_IsReady+0x1c>)
 800a7ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7cc:	2202      	movs	r2, #2
 800a7ce:	4013      	ands	r3, r2
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d101      	bne.n	800a7d8 <LL_RCC_LSE_IsReady+0x14>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e000      	b.n	800a7da <LL_RCC_LSE_IsReady+0x16>
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	0018      	movs	r0, r3
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	40021000 	.word	0x40021000

0800a7e4 <LL_RCC_GetSysClkSource>:
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a7e8:	4b03      	ldr	r3, [pc, #12]	; (800a7f8 <LL_RCC_GetSysClkSource+0x14>)
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	2238      	movs	r2, #56	; 0x38
 800a7ee:	4013      	ands	r3, r2
}
 800a7f0:	0018      	movs	r0, r3
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	46c0      	nop			; (mov r8, r8)
 800a7f8:	40021000 	.word	0x40021000

0800a7fc <LL_RCC_GetAHBPrescaler>:
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a800:	4b03      	ldr	r3, [pc, #12]	; (800a810 <LL_RCC_GetAHBPrescaler+0x14>)
 800a802:	689a      	ldr	r2, [r3, #8]
 800a804:	23f0      	movs	r3, #240	; 0xf0
 800a806:	011b      	lsls	r3, r3, #4
 800a808:	4013      	ands	r3, r2
}
 800a80a:	0018      	movs	r0, r3
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	40021000 	.word	0x40021000

0800a814 <LL_RCC_GetAPB1Prescaler>:
{
 800a814:	b580      	push	{r7, lr}
 800a816:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a818:	4b03      	ldr	r3, [pc, #12]	; (800a828 <LL_RCC_GetAPB1Prescaler+0x14>)
 800a81a:	689a      	ldr	r2, [r3, #8]
 800a81c:	23e0      	movs	r3, #224	; 0xe0
 800a81e:	01db      	lsls	r3, r3, #7
 800a820:	4013      	ands	r3, r2
}
 800a822:	0018      	movs	r0, r3
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	40021000 	.word	0x40021000

0800a82c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a834:	4b05      	ldr	r3, [pc, #20]	; (800a84c <LL_RCC_GetUSARTClockSource+0x20>)
 800a836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	401a      	ands	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	041b      	lsls	r3, r3, #16
 800a840:	4313      	orrs	r3, r2
}
 800a842:	0018      	movs	r0, r3
 800a844:	46bd      	mov	sp, r7
 800a846:	b002      	add	sp, #8
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	46c0      	nop			; (mov r8, r8)
 800a84c:	40021000 	.word	0x40021000

0800a850 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a854:	4b03      	ldr	r3, [pc, #12]	; (800a864 <LL_RCC_PLL_GetN+0x14>)
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	0a1b      	lsrs	r3, r3, #8
 800a85a:	227f      	movs	r2, #127	; 0x7f
 800a85c:	4013      	ands	r3, r2
}
 800a85e:	0018      	movs	r0, r3
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	40021000 	.word	0x40021000

0800a868 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a86c:	4b03      	ldr	r3, [pc, #12]	; (800a87c <LL_RCC_PLL_GetR+0x14>)
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	0f5b      	lsrs	r3, r3, #29
 800a872:	075b      	lsls	r3, r3, #29
}
 800a874:	0018      	movs	r0, r3
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	46c0      	nop			; (mov r8, r8)
 800a87c:	40021000 	.word	0x40021000

0800a880 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a884:	4b03      	ldr	r3, [pc, #12]	; (800a894 <LL_RCC_PLL_GetMainSource+0x14>)
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	2203      	movs	r2, #3
 800a88a:	4013      	ands	r3, r2
}
 800a88c:	0018      	movs	r0, r3
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	46c0      	nop			; (mov r8, r8)
 800a894:	40021000 	.word	0x40021000

0800a898 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a89c:	4b03      	ldr	r3, [pc, #12]	; (800a8ac <LL_RCC_PLL_GetDivider+0x14>)
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	2270      	movs	r2, #112	; 0x70
 800a8a2:	4013      	ands	r3, r2
}
 800a8a4:	0018      	movs	r0, r3
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	46c0      	nop			; (mov r8, r8)
 800a8ac:	40021000 	.word	0x40021000

0800a8b0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800a8b8:	f000 f8a8 	bl	800aa0c <RCC_GetSystemClockFreq>
 800a8bc:	0002      	movs	r2, r0
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	0018      	movs	r0, r3
 800a8c8:	f000 f8ce 	bl	800aa68 <RCC_GetHCLKClockFreq>
 800a8cc:	0002      	movs	r2, r0
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	0018      	movs	r0, r3
 800a8d8:	f000 f8de 	bl	800aa98 <RCC_GetPCLK1ClockFreq>
 800a8dc:	0002      	movs	r2, r0
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	609a      	str	r2, [r3, #8]
}
 800a8e2:	46c0      	nop			; (mov r8, r8)
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	b002      	add	sp, #8
 800a8e8:	bd80      	pop	{r7, pc}
	...

0800a8ec <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d134      	bne.n	800a968 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	0018      	movs	r0, r3
 800a902:	f7ff ff93 	bl	800a82c <LL_RCC_GetUSARTClockSource>
 800a906:	0003      	movs	r3, r0
 800a908:	4a39      	ldr	r2, [pc, #228]	; (800a9f0 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d016      	beq.n	800a93c <LL_RCC_GetUSARTClockFreq+0x50>
 800a90e:	4a38      	ldr	r2, [pc, #224]	; (800a9f0 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d81c      	bhi.n	800a94e <LL_RCC_GetUSARTClockFreq+0x62>
 800a914:	4a37      	ldr	r2, [pc, #220]	; (800a9f4 <LL_RCC_GetUSARTClockFreq+0x108>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d003      	beq.n	800a922 <LL_RCC_GetUSARTClockFreq+0x36>
 800a91a:	4a37      	ldr	r2, [pc, #220]	; (800a9f8 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d005      	beq.n	800a92c <LL_RCC_GetUSARTClockFreq+0x40>
 800a920:	e015      	b.n	800a94e <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a922:	f000 f873 	bl	800aa0c <RCC_GetSystemClockFreq>
 800a926:	0003      	movs	r3, r0
 800a928:	60fb      	str	r3, [r7, #12]
        break;
 800a92a:	e05c      	b.n	800a9e6 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a92c:	f7ff ff36 	bl	800a79c <LL_RCC_HSI_IsReady>
 800a930:	0003      	movs	r3, r0
 800a932:	2b01      	cmp	r3, #1
 800a934:	d150      	bne.n	800a9d8 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800a936:	4b31      	ldr	r3, [pc, #196]	; (800a9fc <LL_RCC_GetUSARTClockFreq+0x110>)
 800a938:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a93a:	e04d      	b.n	800a9d8 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a93c:	f7ff ff42 	bl	800a7c4 <LL_RCC_LSE_IsReady>
 800a940:	0003      	movs	r3, r0
 800a942:	2b01      	cmp	r3, #1
 800a944:	d14a      	bne.n	800a9dc <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800a946:	2380      	movs	r3, #128	; 0x80
 800a948:	021b      	lsls	r3, r3, #8
 800a94a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a94c:	e046      	b.n	800a9dc <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a94e:	f000 f85d 	bl	800aa0c <RCC_GetSystemClockFreq>
 800a952:	0003      	movs	r3, r0
 800a954:	0018      	movs	r0, r3
 800a956:	f000 f887 	bl	800aa68 <RCC_GetHCLKClockFreq>
 800a95a:	0003      	movs	r3, r0
 800a95c:	0018      	movs	r0, r3
 800a95e:	f000 f89b 	bl	800aa98 <RCC_GetPCLK1ClockFreq>
 800a962:	0003      	movs	r3, r0
 800a964:	60fb      	str	r3, [r7, #12]
        break;
 800a966:	e03e      	b.n	800a9e6 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b0c      	cmp	r3, #12
 800a96c:	d13b      	bne.n	800a9e6 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	0018      	movs	r0, r3
 800a972:	f7ff ff5b 	bl	800a82c <LL_RCC_GetUSARTClockSource>
 800a976:	0003      	movs	r3, r0
 800a978:	4a21      	ldr	r2, [pc, #132]	; (800aa00 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d016      	beq.n	800a9ac <LL_RCC_GetUSARTClockFreq+0xc0>
 800a97e:	4a20      	ldr	r2, [pc, #128]	; (800aa00 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d81c      	bhi.n	800a9be <LL_RCC_GetUSARTClockFreq+0xd2>
 800a984:	4a1f      	ldr	r2, [pc, #124]	; (800aa04 <LL_RCC_GetUSARTClockFreq+0x118>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d003      	beq.n	800a992 <LL_RCC_GetUSARTClockFreq+0xa6>
 800a98a:	4a1f      	ldr	r2, [pc, #124]	; (800aa08 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d005      	beq.n	800a99c <LL_RCC_GetUSARTClockFreq+0xb0>
 800a990:	e015      	b.n	800a9be <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a992:	f000 f83b 	bl	800aa0c <RCC_GetSystemClockFreq>
 800a996:	0003      	movs	r3, r0
 800a998:	60fb      	str	r3, [r7, #12]
        break;
 800a99a:	e024      	b.n	800a9e6 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a99c:	f7ff fefe 	bl	800a79c <LL_RCC_HSI_IsReady>
 800a9a0:	0003      	movs	r3, r0
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d11c      	bne.n	800a9e0 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800a9a6:	4b15      	ldr	r3, [pc, #84]	; (800a9fc <LL_RCC_GetUSARTClockFreq+0x110>)
 800a9a8:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a9aa:	e019      	b.n	800a9e0 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a9ac:	f7ff ff0a 	bl	800a7c4 <LL_RCC_LSE_IsReady>
 800a9b0:	0003      	movs	r3, r0
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d116      	bne.n	800a9e4 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800a9b6:	2380      	movs	r3, #128	; 0x80
 800a9b8:	021b      	lsls	r3, r3, #8
 800a9ba:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a9bc:	e012      	b.n	800a9e4 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a9be:	f000 f825 	bl	800aa0c <RCC_GetSystemClockFreq>
 800a9c2:	0003      	movs	r3, r0
 800a9c4:	0018      	movs	r0, r3
 800a9c6:	f000 f84f 	bl	800aa68 <RCC_GetHCLKClockFreq>
 800a9ca:	0003      	movs	r3, r0
 800a9cc:	0018      	movs	r0, r3
 800a9ce:	f000 f863 	bl	800aa98 <RCC_GetPCLK1ClockFreq>
 800a9d2:	0003      	movs	r3, r0
 800a9d4:	60fb      	str	r3, [r7, #12]
        break;
 800a9d6:	e006      	b.n	800a9e6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a9d8:	46c0      	nop			; (mov r8, r8)
 800a9da:	e004      	b.n	800a9e6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a9dc:	46c0      	nop			; (mov r8, r8)
 800a9de:	e002      	b.n	800a9e6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a9e0:	46c0      	nop			; (mov r8, r8)
 800a9e2:	e000      	b.n	800a9e6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a9e4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
}
 800a9e8:	0018      	movs	r0, r3
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	b004      	add	sp, #16
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	00030003 	.word	0x00030003
 800a9f4:	00030001 	.word	0x00030001
 800a9f8:	00030002 	.word	0x00030002
 800a9fc:	00f42400 	.word	0x00f42400
 800aa00:	000c000c 	.word	0x000c000c
 800aa04:	000c0004 	.word	0x000c0004
 800aa08:	000c0008 	.word	0x000c0008

0800aa0c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800aa12:	f7ff fee7 	bl	800a7e4 <LL_RCC_GetSysClkSource>
 800aa16:	0003      	movs	r3, r0
 800aa18:	2b08      	cmp	r3, #8
 800aa1a:	d002      	beq.n	800aa22 <RCC_GetSystemClockFreq+0x16>
 800aa1c:	2b10      	cmp	r3, #16
 800aa1e:	d003      	beq.n	800aa28 <RCC_GetSystemClockFreq+0x1c>
 800aa20:	e007      	b.n	800aa32 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800aa22:	4b0e      	ldr	r3, [pc, #56]	; (800aa5c <RCC_GetSystemClockFreq+0x50>)
 800aa24:	607b      	str	r3, [r7, #4]
      break;
 800aa26:	e014      	b.n	800aa52 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800aa28:	f000 f84c 	bl	800aac4 <RCC_PLL_GetFreqDomain_SYS>
 800aa2c:	0003      	movs	r3, r0
 800aa2e:	607b      	str	r3, [r7, #4]
      break;
 800aa30:	e00f      	b.n	800aa52 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800aa32:	4b0b      	ldr	r3, [pc, #44]	; (800aa60 <RCC_GetSystemClockFreq+0x54>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	0adb      	lsrs	r3, r3, #11
 800aa38:	2207      	movs	r2, #7
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	409a      	lsls	r2, r3
 800aa40:	0013      	movs	r3, r2
 800aa42:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800aa44:	6839      	ldr	r1, [r7, #0]
 800aa46:	4807      	ldr	r0, [pc, #28]	; (800aa64 <RCC_GetSystemClockFreq+0x58>)
 800aa48:	f7f5 fb5c 	bl	8000104 <__udivsi3>
 800aa4c:	0003      	movs	r3, r0
 800aa4e:	607b      	str	r3, [r7, #4]
      break;
 800aa50:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800aa52:	687b      	ldr	r3, [r7, #4]
}
 800aa54:	0018      	movs	r0, r3
 800aa56:	46bd      	mov	sp, r7
 800aa58:	b002      	add	sp, #8
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	007a1200 	.word	0x007a1200
 800aa60:	40021000 	.word	0x40021000
 800aa64:	00f42400 	.word	0x00f42400

0800aa68 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800aa70:	f7ff fec4 	bl	800a7fc <LL_RCC_GetAHBPrescaler>
 800aa74:	0003      	movs	r3, r0
 800aa76:	0a1b      	lsrs	r3, r3, #8
 800aa78:	220f      	movs	r2, #15
 800aa7a:	401a      	ands	r2, r3
 800aa7c:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <RCC_GetHCLKClockFreq+0x2c>)
 800aa7e:	0092      	lsls	r2, r2, #2
 800aa80:	58d3      	ldr	r3, [r2, r3]
 800aa82:	221f      	movs	r2, #31
 800aa84:	4013      	ands	r3, r2
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	40da      	lsrs	r2, r3
 800aa8a:	0013      	movs	r3, r2
}
 800aa8c:	0018      	movs	r0, r3
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	b002      	add	sp, #8
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	0800ae0c 	.word	0x0800ae0c

0800aa98 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800aaa0:	f7ff feb8 	bl	800a814 <LL_RCC_GetAPB1Prescaler>
 800aaa4:	0003      	movs	r3, r0
 800aaa6:	0b1a      	lsrs	r2, r3, #12
 800aaa8:	4b05      	ldr	r3, [pc, #20]	; (800aac0 <RCC_GetPCLK1ClockFreq+0x28>)
 800aaaa:	0092      	lsls	r2, r2, #2
 800aaac:	58d3      	ldr	r3, [r2, r3]
 800aaae:	221f      	movs	r2, #31
 800aab0:	4013      	ands	r3, r2
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	40da      	lsrs	r2, r3
 800aab6:	0013      	movs	r3, r2
}
 800aab8:	0018      	movs	r0, r3
 800aaba:	46bd      	mov	sp, r7
 800aabc:	b002      	add	sp, #8
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	0800ae4c 	.word	0x0800ae4c

0800aac4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800aac4:	b590      	push	{r4, r7, lr}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800aaca:	f7ff fed9 	bl	800a880 <LL_RCC_PLL_GetMainSource>
 800aace:	0003      	movs	r3, r0
 800aad0:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d003      	beq.n	800aae0 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	2b03      	cmp	r3, #3
 800aadc:	d003      	beq.n	800aae6 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800aade:	e005      	b.n	800aaec <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800aae0:	4b13      	ldr	r3, [pc, #76]	; (800ab30 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800aae2:	607b      	str	r3, [r7, #4]
      break;
 800aae4:	e005      	b.n	800aaf2 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800aae6:	4b13      	ldr	r3, [pc, #76]	; (800ab34 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800aae8:	607b      	str	r3, [r7, #4]
      break;
 800aaea:	e002      	b.n	800aaf2 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800aaec:	4b10      	ldr	r3, [pc, #64]	; (800ab30 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800aaee:	607b      	str	r3, [r7, #4]
      break;
 800aaf0:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800aaf2:	f7ff fead 	bl	800a850 <LL_RCC_PLL_GetN>
 800aaf6:	0002      	movs	r2, r0
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4353      	muls	r3, r2
 800aafc:	001c      	movs	r4, r3
 800aafe:	f7ff fecb 	bl	800a898 <LL_RCC_PLL_GetDivider>
 800ab02:	0003      	movs	r3, r0
 800ab04:	091b      	lsrs	r3, r3, #4
 800ab06:	3301      	adds	r3, #1
 800ab08:	0019      	movs	r1, r3
 800ab0a:	0020      	movs	r0, r4
 800ab0c:	f7f5 fafa 	bl	8000104 <__udivsi3>
 800ab10:	0003      	movs	r3, r0
 800ab12:	001c      	movs	r4, r3
 800ab14:	f7ff fea8 	bl	800a868 <LL_RCC_PLL_GetR>
 800ab18:	0003      	movs	r3, r0
 800ab1a:	0f5b      	lsrs	r3, r3, #29
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	0019      	movs	r1, r3
 800ab20:	0020      	movs	r0, r4
 800ab22:	f7f5 faef 	bl	8000104 <__udivsi3>
 800ab26:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800ab28:	0018      	movs	r0, r3
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	b003      	add	sp, #12
 800ab2e:	bd90      	pop	{r4, r7, pc}
 800ab30:	00f42400 	.word	0x00f42400
 800ab34:	007a1200 	.word	0x007a1200

0800ab38 <LL_USART_IsEnabled>:
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2201      	movs	r2, #1
 800ab46:	4013      	ands	r3, r2
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d101      	bne.n	800ab50 <LL_USART_IsEnabled+0x18>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e000      	b.n	800ab52 <LL_USART_IsEnabled+0x1a>
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	0018      	movs	r0, r3
 800ab54:	46bd      	mov	sp, r7
 800ab56:	b002      	add	sp, #8
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <LL_USART_SetPrescaler>:
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab68:	220f      	movs	r2, #15
 800ab6a:	4393      	bics	r3, r2
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	b292      	uxth	r2, r2
 800ab70:	431a      	orrs	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800ab76:	46c0      	nop			; (mov r8, r8)
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	b002      	add	sp, #8
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <LL_USART_SetStopBitsLength>:
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	4a05      	ldr	r2, [pc, #20]	; (800aba4 <LL_USART_SetStopBitsLength+0x24>)
 800ab90:	401a      	ands	r2, r3
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	431a      	orrs	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	605a      	str	r2, [r3, #4]
}
 800ab9a:	46c0      	nop			; (mov r8, r8)
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	b002      	add	sp, #8
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	46c0      	nop			; (mov r8, r8)
 800aba4:	ffffcfff 	.word	0xffffcfff

0800aba8 <LL_USART_SetHWFlowCtrl>:
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	4a05      	ldr	r2, [pc, #20]	; (800abcc <LL_USART_SetHWFlowCtrl+0x24>)
 800abb8:	401a      	ands	r2, r3
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	431a      	orrs	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	609a      	str	r2, [r3, #8]
}
 800abc2:	46c0      	nop			; (mov r8, r8)
 800abc4:	46bd      	mov	sp, r7
 800abc6:	b002      	add	sp, #8
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	46c0      	nop			; (mov r8, r8)
 800abcc:	fffffcff 	.word	0xfffffcff

0800abd0 <LL_USART_SetBaudRate>:
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
 800abdc:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b0b      	cmp	r3, #11
 800abe2:	d843      	bhi.n	800ac6c <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800abe4:	683a      	ldr	r2, [r7, #0]
 800abe6:	2380      	movs	r3, #128	; 0x80
 800abe8:	021b      	lsls	r3, r3, #8
 800abea:	429a      	cmp	r2, r3
 800abec:	d126      	bne.n	800ac3c <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	001a      	movs	r2, r3
 800abf4:	4b1f      	ldr	r3, [pc, #124]	; (800ac74 <LL_USART_SetBaudRate+0xa4>)
 800abf6:	0092      	lsls	r2, r2, #2
 800abf8:	58d3      	ldr	r3, [r2, r3]
 800abfa:	0019      	movs	r1, r3
 800abfc:	68b8      	ldr	r0, [r7, #8]
 800abfe:	f7f5 fa81 	bl	8000104 <__udivsi3>
 800ac02:	0003      	movs	r3, r0
 800ac04:	005a      	lsls	r2, r3, #1
 800ac06:	6a3b      	ldr	r3, [r7, #32]
 800ac08:	085b      	lsrs	r3, r3, #1
 800ac0a:	18d3      	adds	r3, r2, r3
 800ac0c:	6a39      	ldr	r1, [r7, #32]
 800ac0e:	0018      	movs	r0, r3
 800ac10:	f7f5 fa78 	bl	8000104 <__udivsi3>
 800ac14:	0003      	movs	r3, r0
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	4a16      	ldr	r2, [pc, #88]	; (800ac78 <LL_USART_SetBaudRate+0xa8>)
 800ac1e:	4013      	ands	r3, r2
 800ac20:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	085b      	lsrs	r3, r3, #1
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	001a      	movs	r2, r3
 800ac2a:	2307      	movs	r3, #7
 800ac2c:	4013      	ands	r3, r2
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	60da      	str	r2, [r3, #12]
}
 800ac3a:	e017      	b.n	800ac6c <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	001a      	movs	r2, r3
 800ac42:	4b0c      	ldr	r3, [pc, #48]	; (800ac74 <LL_USART_SetBaudRate+0xa4>)
 800ac44:	0092      	lsls	r2, r2, #2
 800ac46:	58d3      	ldr	r3, [r2, r3]
 800ac48:	0019      	movs	r1, r3
 800ac4a:	68b8      	ldr	r0, [r7, #8]
 800ac4c:	f7f5 fa5a 	bl	8000104 <__udivsi3>
 800ac50:	0003      	movs	r3, r0
 800ac52:	001a      	movs	r2, r3
 800ac54:	6a3b      	ldr	r3, [r7, #32]
 800ac56:	085b      	lsrs	r3, r3, #1
 800ac58:	18d3      	adds	r3, r2, r3
 800ac5a:	6a39      	ldr	r1, [r7, #32]
 800ac5c:	0018      	movs	r0, r3
 800ac5e:	f7f5 fa51 	bl	8000104 <__udivsi3>
 800ac62:	0003      	movs	r3, r0
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	001a      	movs	r2, r3
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	60da      	str	r2, [r3, #12]
}
 800ac6c:	46c0      	nop			; (mov r8, r8)
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	b006      	add	sp, #24
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	0800aec0 	.word	0x0800aec0
 800ac78:	0000fff0 	.word	0x0000fff0

0800ac7c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800ac7c:	b590      	push	{r4, r7, lr}
 800ac7e:	b08b      	sub	sp, #44	; 0x2c
 800ac80:	af02      	add	r7, sp, #8
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800ac86:	231f      	movs	r3, #31
 800ac88:	18fb      	adds	r3, r7, r3
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	0018      	movs	r0, r3
 800ac96:	f7ff ff4f 	bl	800ab38 <LL_USART_IsEnabled>
 800ac9a:	1e03      	subs	r3, r0, #0
 800ac9c:	d16a      	bne.n	800ad74 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a38      	ldr	r2, [pc, #224]	; (800ad84 <LL_USART_Init+0x108>)
 800aca4:	401a      	ands	r2, r3
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	6899      	ldr	r1, [r3, #8]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	691b      	ldr	r3, [r3, #16]
 800acae:	4319      	orrs	r1, r3
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	695b      	ldr	r3, [r3, #20]
 800acb4:	4319      	orrs	r1, r3
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	69db      	ldr	r3, [r3, #28]
 800acba:	430b      	orrs	r3, r1
 800acbc:	431a      	orrs	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	68da      	ldr	r2, [r3, #12]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	0011      	movs	r1, r2
 800acca:	0018      	movs	r0, r3
 800accc:	f7ff ff58 	bl	800ab80 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	699a      	ldr	r2, [r3, #24]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	0011      	movs	r1, r2
 800acd8:	0018      	movs	r0, r3
 800acda:	f7ff ff65 	bl	800aba8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a29      	ldr	r2, [pc, #164]	; (800ad88 <LL_USART_Init+0x10c>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d105      	bne.n	800acf2 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800ace6:	2003      	movs	r0, #3
 800ace8:	f7ff fe00 	bl	800a8ec <LL_RCC_GetUSARTClockFreq>
 800acec:	0003      	movs	r3, r0
 800acee:	61bb      	str	r3, [r7, #24]
 800acf0:	e022      	b.n	800ad38 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a25      	ldr	r2, [pc, #148]	; (800ad8c <LL_USART_Init+0x110>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d105      	bne.n	800ad06 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800acfa:	200c      	movs	r0, #12
 800acfc:	f7ff fdf6 	bl	800a8ec <LL_RCC_GetUSARTClockFreq>
 800ad00:	0003      	movs	r3, r0
 800ad02:	61bb      	str	r3, [r7, #24]
 800ad04:	e018      	b.n	800ad38 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4a21      	ldr	r2, [pc, #132]	; (800ad90 <LL_USART_Init+0x114>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d108      	bne.n	800ad20 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800ad0e:	240c      	movs	r4, #12
 800ad10:	193b      	adds	r3, r7, r4
 800ad12:	0018      	movs	r0, r3
 800ad14:	f7ff fdcc 	bl	800a8b0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800ad18:	193b      	adds	r3, r7, r4
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	61bb      	str	r3, [r7, #24]
 800ad1e:	e00b      	b.n	800ad38 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a1c      	ldr	r2, [pc, #112]	; (800ad94 <LL_USART_Init+0x118>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d107      	bne.n	800ad38 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800ad28:	240c      	movs	r4, #12
 800ad2a:	193b      	adds	r3, r7, r4
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	f7ff fdbf 	bl	800a8b0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800ad32:	193b      	adds	r3, r7, r4
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d013      	beq.n	800ad66 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00f      	beq.n	800ad66 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800ad46:	231f      	movs	r3, #31
 800ad48:	18fb      	adds	r3, r7, r3
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	69dc      	ldr	r4, [r3, #28]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	69b9      	ldr	r1, [r7, #24]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	0023      	movs	r3, r4
 800ad62:	f7ff ff35 	bl	800abd0 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	0011      	movs	r1, r2
 800ad6e:	0018      	movs	r0, r3
 800ad70:	f7ff fef3 	bl	800ab5a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800ad74:	231f      	movs	r3, #31
 800ad76:	18fb      	adds	r3, r7, r3
 800ad78:	781b      	ldrb	r3, [r3, #0]
}
 800ad7a:	0018      	movs	r0, r3
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	b009      	add	sp, #36	; 0x24
 800ad80:	bd90      	pop	{r4, r7, pc}
 800ad82:	46c0      	nop			; (mov r8, r8)
 800ad84:	efff69f3 	.word	0xefff69f3
 800ad88:	40013800 	.word	0x40013800
 800ad8c:	40004400 	.word	0x40004400
 800ad90:	40004800 	.word	0x40004800
 800ad94:	40004c00 	.word	0x40004c00

0800ad98 <__libc_init_array>:
 800ad98:	b570      	push	{r4, r5, r6, lr}
 800ad9a:	2600      	movs	r6, #0
 800ad9c:	4d0c      	ldr	r5, [pc, #48]	; (800add0 <__libc_init_array+0x38>)
 800ad9e:	4c0d      	ldr	r4, [pc, #52]	; (800add4 <__libc_init_array+0x3c>)
 800ada0:	1b64      	subs	r4, r4, r5
 800ada2:	10a4      	asrs	r4, r4, #2
 800ada4:	42a6      	cmp	r6, r4
 800ada6:	d109      	bne.n	800adbc <__libc_init_array+0x24>
 800ada8:	2600      	movs	r6, #0
 800adaa:	f000 f821 	bl	800adf0 <_init>
 800adae:	4d0a      	ldr	r5, [pc, #40]	; (800add8 <__libc_init_array+0x40>)
 800adb0:	4c0a      	ldr	r4, [pc, #40]	; (800addc <__libc_init_array+0x44>)
 800adb2:	1b64      	subs	r4, r4, r5
 800adb4:	10a4      	asrs	r4, r4, #2
 800adb6:	42a6      	cmp	r6, r4
 800adb8:	d105      	bne.n	800adc6 <__libc_init_array+0x2e>
 800adba:	bd70      	pop	{r4, r5, r6, pc}
 800adbc:	00b3      	lsls	r3, r6, #2
 800adbe:	58eb      	ldr	r3, [r5, r3]
 800adc0:	4798      	blx	r3
 800adc2:	3601      	adds	r6, #1
 800adc4:	e7ee      	b.n	800ada4 <__libc_init_array+0xc>
 800adc6:	00b3      	lsls	r3, r6, #2
 800adc8:	58eb      	ldr	r3, [r5, r3]
 800adca:	4798      	blx	r3
 800adcc:	3601      	adds	r6, #1
 800adce:	e7f2      	b.n	800adb6 <__libc_init_array+0x1e>
 800add0:	0800aef0 	.word	0x0800aef0
 800add4:	0800aef0 	.word	0x0800aef0
 800add8:	0800aef0 	.word	0x0800aef0
 800addc:	0800aef4 	.word	0x0800aef4

0800ade0 <memset>:
 800ade0:	0003      	movs	r3, r0
 800ade2:	1882      	adds	r2, r0, r2
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d100      	bne.n	800adea <memset+0xa>
 800ade8:	4770      	bx	lr
 800adea:	7019      	strb	r1, [r3, #0]
 800adec:	3301      	adds	r3, #1
 800adee:	e7f9      	b.n	800ade4 <memset+0x4>

0800adf0 <_init>:
 800adf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf2:	46c0      	nop			; (mov r8, r8)
 800adf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adf6:	bc08      	pop	{r3}
 800adf8:	469e      	mov	lr, r3
 800adfa:	4770      	bx	lr

0800adfc <_fini>:
 800adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfe:	46c0      	nop			; (mov r8, r8)
 800ae00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae02:	bc08      	pop	{r3}
 800ae04:	469e      	mov	lr, r3
 800ae06:	4770      	bx	lr
