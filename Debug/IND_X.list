
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e97c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003440  0800ea38  0800ea38  0001ea38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011e78  08011e78  00030040  2**0
                  CONTENTS
  4 .ARM          00000000  08011e78  08011e78  00030040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011e78  08011e78  00030040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011e78  08011e78  00021e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011e7c  08011e7c  00021e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08011e80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e4  20000040  08011ec0  00030040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002524  08011ec0  00032524  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a300  00000000  00000000  00030068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d5  00000000  00000000  0004a368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  0004d840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  0004f128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c54a  00000000  00000000  00050898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d4b0  00000000  00000000  0006cde2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae7df  00000000  00000000  0008a292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00138a71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f18  00000000  00000000  00138ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000040 	.word	0x20000040
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ea20 	.word	0x0800ea20

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000044 	.word	0x20000044
 8000100:	0800ea20 	.word	0x0800ea20

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	1c10      	adds	r0, r2, #0
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	1c19      	adds	r1, r3, #0
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f000 ff51 	bl	80012a8 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fe9b 	bl	800114c <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 ff43 	bl	80012a8 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 ff39 	bl	80012a8 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 febd 	bl	80011c4 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 feb3 	bl	80011c4 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_d2uiz>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	2200      	movs	r2, #0
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <__aeabi_d2uiz+0x38>)
 8000472:	0004      	movs	r4, r0
 8000474:	000d      	movs	r5, r1
 8000476:	f7ff ffef 	bl	8000458 <__aeabi_dcmpge>
 800047a:	2800      	cmp	r0, #0
 800047c:	d104      	bne.n	8000488 <__aeabi_d2uiz+0x1c>
 800047e:	0020      	movs	r0, r4
 8000480:	0029      	movs	r1, r5
 8000482:	f001 fd7f 	bl	8001f84 <__aeabi_d2iz>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <__aeabi_d2uiz+0x38>)
 800048a:	2200      	movs	r2, #0
 800048c:	0020      	movs	r0, r4
 800048e:	0029      	movs	r1, r5
 8000490:	f001 f9e6 	bl	8001860 <__aeabi_dsub>
 8000494:	f001 fd76 	bl	8001f84 <__aeabi_d2iz>
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	061b      	lsls	r3, r3, #24
 800049c:	469c      	mov	ip, r3
 800049e:	4460      	add	r0, ip
 80004a0:	e7f1      	b.n	8000486 <__aeabi_d2uiz+0x1a>
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	41e00000 	.word	0x41e00000

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	46d6      	mov	lr, sl
 80004ae:	4646      	mov	r6, r8
 80004b0:	000d      	movs	r5, r1
 80004b2:	0001      	movs	r1, r0
 80004b4:	0018      	movs	r0, r3
 80004b6:	b5c0      	push	{r6, r7, lr}
 80004b8:	0017      	movs	r7, r2
 80004ba:	032b      	lsls	r3, r5, #12
 80004bc:	0a5a      	lsrs	r2, r3, #9
 80004be:	0f4b      	lsrs	r3, r1, #29
 80004c0:	4313      	orrs	r3, r2
 80004c2:	00ca      	lsls	r2, r1, #3
 80004c4:	4691      	mov	r9, r2
 80004c6:	0302      	lsls	r2, r0, #12
 80004c8:	006e      	lsls	r6, r5, #1
 80004ca:	0041      	lsls	r1, r0, #1
 80004cc:	0a52      	lsrs	r2, r2, #9
 80004ce:	0fec      	lsrs	r4, r5, #31
 80004d0:	0f7d      	lsrs	r5, r7, #29
 80004d2:	4315      	orrs	r5, r2
 80004d4:	0d76      	lsrs	r6, r6, #21
 80004d6:	0d49      	lsrs	r1, r1, #21
 80004d8:	0fc0      	lsrs	r0, r0, #31
 80004da:	4682      	mov	sl, r0
 80004dc:	46ac      	mov	ip, r5
 80004de:	00ff      	lsls	r7, r7, #3
 80004e0:	1a72      	subs	r2, r6, r1
 80004e2:	4284      	cmp	r4, r0
 80004e4:	d100      	bne.n	80004e8 <__aeabi_dadd+0x40>
 80004e6:	e098      	b.n	800061a <__aeabi_dadd+0x172>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	dc00      	bgt.n	80004ee <__aeabi_dadd+0x46>
 80004ec:	e081      	b.n	80005f2 <__aeabi_dadd+0x14a>
 80004ee:	2900      	cmp	r1, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_dadd+0x4c>
 80004f2:	e0b6      	b.n	8000662 <__aeabi_dadd+0x1ba>
 80004f4:	49c9      	ldr	r1, [pc, #804]	; (800081c <__aeabi_dadd+0x374>)
 80004f6:	428e      	cmp	r6, r1
 80004f8:	d100      	bne.n	80004fc <__aeabi_dadd+0x54>
 80004fa:	e172      	b.n	80007e2 <__aeabi_dadd+0x33a>
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0028      	movs	r0, r5
 8000500:	0409      	lsls	r1, r1, #16
 8000502:	4308      	orrs	r0, r1
 8000504:	4684      	mov	ip, r0
 8000506:	2a38      	cmp	r2, #56	; 0x38
 8000508:	dd00      	ble.n	800050c <__aeabi_dadd+0x64>
 800050a:	e15e      	b.n	80007ca <__aeabi_dadd+0x322>
 800050c:	2a1f      	cmp	r2, #31
 800050e:	dd00      	ble.n	8000512 <__aeabi_dadd+0x6a>
 8000510:	e1ee      	b.n	80008f0 <__aeabi_dadd+0x448>
 8000512:	2020      	movs	r0, #32
 8000514:	0039      	movs	r1, r7
 8000516:	4665      	mov	r5, ip
 8000518:	1a80      	subs	r0, r0, r2
 800051a:	4087      	lsls	r7, r0
 800051c:	40d1      	lsrs	r1, r2
 800051e:	4085      	lsls	r5, r0
 8000520:	430d      	orrs	r5, r1
 8000522:	0039      	movs	r1, r7
 8000524:	1e4f      	subs	r7, r1, #1
 8000526:	41b9      	sbcs	r1, r7
 8000528:	4667      	mov	r7, ip
 800052a:	40d7      	lsrs	r7, r2
 800052c:	4329      	orrs	r1, r5
 800052e:	1bdb      	subs	r3, r3, r7
 8000530:	464a      	mov	r2, r9
 8000532:	1a55      	subs	r5, r2, r1
 8000534:	45a9      	cmp	r9, r5
 8000536:	4189      	sbcs	r1, r1
 8000538:	4249      	negs	r1, r1
 800053a:	1a5b      	subs	r3, r3, r1
 800053c:	4698      	mov	r8, r3
 800053e:	4643      	mov	r3, r8
 8000540:	021b      	lsls	r3, r3, #8
 8000542:	d400      	bmi.n	8000546 <__aeabi_dadd+0x9e>
 8000544:	e0cc      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000546:	4643      	mov	r3, r8
 8000548:	025b      	lsls	r3, r3, #9
 800054a:	0a5b      	lsrs	r3, r3, #9
 800054c:	4698      	mov	r8, r3
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_dadd+0xae>
 8000554:	e12c      	b.n	80007b0 <__aeabi_dadd+0x308>
 8000556:	4640      	mov	r0, r8
 8000558:	f001 fda0 	bl	800209c <__clzsi2>
 800055c:	0001      	movs	r1, r0
 800055e:	3908      	subs	r1, #8
 8000560:	2220      	movs	r2, #32
 8000562:	0028      	movs	r0, r5
 8000564:	4643      	mov	r3, r8
 8000566:	1a52      	subs	r2, r2, r1
 8000568:	408b      	lsls	r3, r1
 800056a:	40d0      	lsrs	r0, r2
 800056c:	408d      	lsls	r5, r1
 800056e:	4303      	orrs	r3, r0
 8000570:	428e      	cmp	r6, r1
 8000572:	dd00      	ble.n	8000576 <__aeabi_dadd+0xce>
 8000574:	e117      	b.n	80007a6 <__aeabi_dadd+0x2fe>
 8000576:	1b8e      	subs	r6, r1, r6
 8000578:	1c72      	adds	r2, r6, #1
 800057a:	2a1f      	cmp	r2, #31
 800057c:	dd00      	ble.n	8000580 <__aeabi_dadd+0xd8>
 800057e:	e1a7      	b.n	80008d0 <__aeabi_dadd+0x428>
 8000580:	2120      	movs	r1, #32
 8000582:	0018      	movs	r0, r3
 8000584:	002e      	movs	r6, r5
 8000586:	1a89      	subs	r1, r1, r2
 8000588:	408d      	lsls	r5, r1
 800058a:	4088      	lsls	r0, r1
 800058c:	40d6      	lsrs	r6, r2
 800058e:	40d3      	lsrs	r3, r2
 8000590:	1e69      	subs	r1, r5, #1
 8000592:	418d      	sbcs	r5, r1
 8000594:	4330      	orrs	r0, r6
 8000596:	4698      	mov	r8, r3
 8000598:	2600      	movs	r6, #0
 800059a:	4305      	orrs	r5, r0
 800059c:	076b      	lsls	r3, r5, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	402b      	ands	r3, r5
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d2b      	adds	r3, r5, #4
 80005aa:	42ab      	cmp	r3, r5
 80005ac:	41ad      	sbcs	r5, r5
 80005ae:	426d      	negs	r5, r5
 80005b0:	44a8      	add	r8, r5
 80005b2:	001d      	movs	r5, r3
 80005b4:	4643      	mov	r3, r8
 80005b6:	021b      	lsls	r3, r3, #8
 80005b8:	d400      	bmi.n	80005bc <__aeabi_dadd+0x114>
 80005ba:	e094      	b.n	80006e6 <__aeabi_dadd+0x23e>
 80005bc:	4b97      	ldr	r3, [pc, #604]	; (800081c <__aeabi_dadd+0x374>)
 80005be:	1c72      	adds	r2, r6, #1
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x11e>
 80005c4:	e09d      	b.n	8000702 <__aeabi_dadd+0x25a>
 80005c6:	4641      	mov	r1, r8
 80005c8:	4b95      	ldr	r3, [pc, #596]	; (8000820 <__aeabi_dadd+0x378>)
 80005ca:	08ed      	lsrs	r5, r5, #3
 80005cc:	4019      	ands	r1, r3
 80005ce:	000b      	movs	r3, r1
 80005d0:	0552      	lsls	r2, r2, #21
 80005d2:	0749      	lsls	r1, r1, #29
 80005d4:	025b      	lsls	r3, r3, #9
 80005d6:	4329      	orrs	r1, r5
 80005d8:	0b1b      	lsrs	r3, r3, #12
 80005da:	0d52      	lsrs	r2, r2, #21
 80005dc:	0512      	lsls	r2, r2, #20
 80005de:	4313      	orrs	r3, r2
 80005e0:	07e4      	lsls	r4, r4, #31
 80005e2:	4323      	orrs	r3, r4
 80005e4:	0008      	movs	r0, r1
 80005e6:	0019      	movs	r1, r3
 80005e8:	bce0      	pop	{r5, r6, r7}
 80005ea:	46ba      	mov	sl, r7
 80005ec:	46b1      	mov	r9, r6
 80005ee:	46a8      	mov	r8, r5
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	d043      	beq.n	800067e <__aeabi_dadd+0x1d6>
 80005f6:	1b8a      	subs	r2, r1, r6
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d000      	beq.n	80005fe <__aeabi_dadd+0x156>
 80005fc:	e12a      	b.n	8000854 <__aeabi_dadd+0x3ac>
 80005fe:	464c      	mov	r4, r9
 8000600:	431c      	orrs	r4, r3
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x15e>
 8000604:	e1d1      	b.n	80009aa <__aeabi_dadd+0x502>
 8000606:	1e54      	subs	r4, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x166>
 800060c:	e21f      	b.n	8000a4e <__aeabi_dadd+0x5a6>
 800060e:	4d83      	ldr	r5, [pc, #524]	; (800081c <__aeabi_dadd+0x374>)
 8000610:	42aa      	cmp	r2, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16e>
 8000614:	e272      	b.n	8000afc <__aeabi_dadd+0x654>
 8000616:	0022      	movs	r2, r4
 8000618:	e123      	b.n	8000862 <__aeabi_dadd+0x3ba>
 800061a:	2a00      	cmp	r2, #0
 800061c:	dc00      	bgt.n	8000620 <__aeabi_dadd+0x178>
 800061e:	e098      	b.n	8000752 <__aeabi_dadd+0x2aa>
 8000620:	2900      	cmp	r1, #0
 8000622:	d042      	beq.n	80006aa <__aeabi_dadd+0x202>
 8000624:	497d      	ldr	r1, [pc, #500]	; (800081c <__aeabi_dadd+0x374>)
 8000626:	428e      	cmp	r6, r1
 8000628:	d100      	bne.n	800062c <__aeabi_dadd+0x184>
 800062a:	e0da      	b.n	80007e2 <__aeabi_dadd+0x33a>
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0028      	movs	r0, r5
 8000630:	0409      	lsls	r1, r1, #16
 8000632:	4308      	orrs	r0, r1
 8000634:	4684      	mov	ip, r0
 8000636:	2a38      	cmp	r2, #56	; 0x38
 8000638:	dd00      	ble.n	800063c <__aeabi_dadd+0x194>
 800063a:	e129      	b.n	8000890 <__aeabi_dadd+0x3e8>
 800063c:	2a1f      	cmp	r2, #31
 800063e:	dc00      	bgt.n	8000642 <__aeabi_dadd+0x19a>
 8000640:	e187      	b.n	8000952 <__aeabi_dadd+0x4aa>
 8000642:	0011      	movs	r1, r2
 8000644:	4665      	mov	r5, ip
 8000646:	3920      	subs	r1, #32
 8000648:	40cd      	lsrs	r5, r1
 800064a:	2a20      	cmp	r2, #32
 800064c:	d004      	beq.n	8000658 <__aeabi_dadd+0x1b0>
 800064e:	2040      	movs	r0, #64	; 0x40
 8000650:	4661      	mov	r1, ip
 8000652:	1a82      	subs	r2, r0, r2
 8000654:	4091      	lsls	r1, r2
 8000656:	430f      	orrs	r7, r1
 8000658:	0039      	movs	r1, r7
 800065a:	1e4f      	subs	r7, r1, #1
 800065c:	41b9      	sbcs	r1, r7
 800065e:	430d      	orrs	r5, r1
 8000660:	e11b      	b.n	800089a <__aeabi_dadd+0x3f2>
 8000662:	0029      	movs	r1, r5
 8000664:	4339      	orrs	r1, r7
 8000666:	d100      	bne.n	800066a <__aeabi_dadd+0x1c2>
 8000668:	e0b5      	b.n	80007d6 <__aeabi_dadd+0x32e>
 800066a:	1e51      	subs	r1, r2, #1
 800066c:	2a01      	cmp	r2, #1
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1ca>
 8000670:	e1ab      	b.n	80009ca <__aeabi_dadd+0x522>
 8000672:	486a      	ldr	r0, [pc, #424]	; (800081c <__aeabi_dadd+0x374>)
 8000674:	4282      	cmp	r2, r0
 8000676:	d100      	bne.n	800067a <__aeabi_dadd+0x1d2>
 8000678:	e1b2      	b.n	80009e0 <__aeabi_dadd+0x538>
 800067a:	000a      	movs	r2, r1
 800067c:	e743      	b.n	8000506 <__aeabi_dadd+0x5e>
 800067e:	4969      	ldr	r1, [pc, #420]	; (8000824 <__aeabi_dadd+0x37c>)
 8000680:	1c75      	adds	r5, r6, #1
 8000682:	420d      	tst	r5, r1
 8000684:	d000      	beq.n	8000688 <__aeabi_dadd+0x1e0>
 8000686:	e0cf      	b.n	8000828 <__aeabi_dadd+0x380>
 8000688:	2e00      	cmp	r6, #0
 800068a:	d000      	beq.n	800068e <__aeabi_dadd+0x1e6>
 800068c:	e193      	b.n	80009b6 <__aeabi_dadd+0x50e>
 800068e:	4649      	mov	r1, r9
 8000690:	4319      	orrs	r1, r3
 8000692:	d100      	bne.n	8000696 <__aeabi_dadd+0x1ee>
 8000694:	e1d1      	b.n	8000a3a <__aeabi_dadd+0x592>
 8000696:	4661      	mov	r1, ip
 8000698:	4339      	orrs	r1, r7
 800069a:	d000      	beq.n	800069e <__aeabi_dadd+0x1f6>
 800069c:	e1e3      	b.n	8000a66 <__aeabi_dadd+0x5be>
 800069e:	4649      	mov	r1, r9
 80006a0:	0758      	lsls	r0, r3, #29
 80006a2:	08c9      	lsrs	r1, r1, #3
 80006a4:	4301      	orrs	r1, r0
 80006a6:	08db      	lsrs	r3, r3, #3
 80006a8:	e026      	b.n	80006f8 <__aeabi_dadd+0x250>
 80006aa:	0029      	movs	r1, r5
 80006ac:	4339      	orrs	r1, r7
 80006ae:	d100      	bne.n	80006b2 <__aeabi_dadd+0x20a>
 80006b0:	e091      	b.n	80007d6 <__aeabi_dadd+0x32e>
 80006b2:	1e51      	subs	r1, r2, #1
 80006b4:	2a01      	cmp	r2, #1
 80006b6:	d005      	beq.n	80006c4 <__aeabi_dadd+0x21c>
 80006b8:	4858      	ldr	r0, [pc, #352]	; (800081c <__aeabi_dadd+0x374>)
 80006ba:	4282      	cmp	r2, r0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x218>
 80006be:	e18f      	b.n	80009e0 <__aeabi_dadd+0x538>
 80006c0:	000a      	movs	r2, r1
 80006c2:	e7b8      	b.n	8000636 <__aeabi_dadd+0x18e>
 80006c4:	003d      	movs	r5, r7
 80006c6:	444d      	add	r5, r9
 80006c8:	454d      	cmp	r5, r9
 80006ca:	4189      	sbcs	r1, r1
 80006cc:	4463      	add	r3, ip
 80006ce:	4698      	mov	r8, r3
 80006d0:	4249      	negs	r1, r1
 80006d2:	4488      	add	r8, r1
 80006d4:	4643      	mov	r3, r8
 80006d6:	2602      	movs	r6, #2
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	d500      	bpl.n	80006de <__aeabi_dadd+0x236>
 80006dc:	e0eb      	b.n	80008b6 <__aeabi_dadd+0x40e>
 80006de:	3e01      	subs	r6, #1
 80006e0:	076b      	lsls	r3, r5, #29
 80006e2:	d000      	beq.n	80006e6 <__aeabi_dadd+0x23e>
 80006e4:	e75c      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80006e6:	4643      	mov	r3, r8
 80006e8:	08e9      	lsrs	r1, r5, #3
 80006ea:	075a      	lsls	r2, r3, #29
 80006ec:	4311      	orrs	r1, r2
 80006ee:	0032      	movs	r2, r6
 80006f0:	08db      	lsrs	r3, r3, #3
 80006f2:	484a      	ldr	r0, [pc, #296]	; (800081c <__aeabi_dadd+0x374>)
 80006f4:	4282      	cmp	r2, r0
 80006f6:	d021      	beq.n	800073c <__aeabi_dadd+0x294>
 80006f8:	031b      	lsls	r3, r3, #12
 80006fa:	0552      	lsls	r2, r2, #21
 80006fc:	0b1b      	lsrs	r3, r3, #12
 80006fe:	0d52      	lsrs	r2, r2, #21
 8000700:	e76c      	b.n	80005dc <__aeabi_dadd+0x134>
 8000702:	2300      	movs	r3, #0
 8000704:	2100      	movs	r1, #0
 8000706:	e769      	b.n	80005dc <__aeabi_dadd+0x134>
 8000708:	002a      	movs	r2, r5
 800070a:	433a      	orrs	r2, r7
 800070c:	d069      	beq.n	80007e2 <__aeabi_dadd+0x33a>
 800070e:	464a      	mov	r2, r9
 8000710:	0758      	lsls	r0, r3, #29
 8000712:	08d1      	lsrs	r1, r2, #3
 8000714:	08da      	lsrs	r2, r3, #3
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	031b      	lsls	r3, r3, #12
 800071a:	4308      	orrs	r0, r1
 800071c:	421a      	tst	r2, r3
 800071e:	d007      	beq.n	8000730 <__aeabi_dadd+0x288>
 8000720:	0029      	movs	r1, r5
 8000722:	08ed      	lsrs	r5, r5, #3
 8000724:	421d      	tst	r5, r3
 8000726:	d103      	bne.n	8000730 <__aeabi_dadd+0x288>
 8000728:	002a      	movs	r2, r5
 800072a:	08ff      	lsrs	r7, r7, #3
 800072c:	0748      	lsls	r0, r1, #29
 800072e:	4338      	orrs	r0, r7
 8000730:	0f43      	lsrs	r3, r0, #29
 8000732:	00c1      	lsls	r1, r0, #3
 8000734:	075b      	lsls	r3, r3, #29
 8000736:	08c9      	lsrs	r1, r1, #3
 8000738:	4319      	orrs	r1, r3
 800073a:	0013      	movs	r3, r2
 800073c:	000a      	movs	r2, r1
 800073e:	431a      	orrs	r2, r3
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x29c>
 8000742:	e213      	b.n	8000b6c <__aeabi_dadd+0x6c4>
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0312      	lsls	r2, r2, #12
 8000748:	4313      	orrs	r3, r2
 800074a:	031b      	lsls	r3, r3, #12
 800074c:	4a33      	ldr	r2, [pc, #204]	; (800081c <__aeabi_dadd+0x374>)
 800074e:	0b1b      	lsrs	r3, r3, #12
 8000750:	e744      	b.n	80005dc <__aeabi_dadd+0x134>
 8000752:	2a00      	cmp	r2, #0
 8000754:	d04b      	beq.n	80007ee <__aeabi_dadd+0x346>
 8000756:	1b8a      	subs	r2, r1, r6
 8000758:	2e00      	cmp	r6, #0
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x2b6>
 800075c:	e0e7      	b.n	800092e <__aeabi_dadd+0x486>
 800075e:	482f      	ldr	r0, [pc, #188]	; (800081c <__aeabi_dadd+0x374>)
 8000760:	4281      	cmp	r1, r0
 8000762:	d100      	bne.n	8000766 <__aeabi_dadd+0x2be>
 8000764:	e195      	b.n	8000a92 <__aeabi_dadd+0x5ea>
 8000766:	2080      	movs	r0, #128	; 0x80
 8000768:	0400      	lsls	r0, r0, #16
 800076a:	4303      	orrs	r3, r0
 800076c:	2a38      	cmp	r2, #56	; 0x38
 800076e:	dd00      	ble.n	8000772 <__aeabi_dadd+0x2ca>
 8000770:	e143      	b.n	80009fa <__aeabi_dadd+0x552>
 8000772:	2a1f      	cmp	r2, #31
 8000774:	dd00      	ble.n	8000778 <__aeabi_dadd+0x2d0>
 8000776:	e1db      	b.n	8000b30 <__aeabi_dadd+0x688>
 8000778:	2020      	movs	r0, #32
 800077a:	001d      	movs	r5, r3
 800077c:	464e      	mov	r6, r9
 800077e:	1a80      	subs	r0, r0, r2
 8000780:	4085      	lsls	r5, r0
 8000782:	40d6      	lsrs	r6, r2
 8000784:	4335      	orrs	r5, r6
 8000786:	464e      	mov	r6, r9
 8000788:	4086      	lsls	r6, r0
 800078a:	0030      	movs	r0, r6
 800078c:	40d3      	lsrs	r3, r2
 800078e:	1e46      	subs	r6, r0, #1
 8000790:	41b0      	sbcs	r0, r6
 8000792:	449c      	add	ip, r3
 8000794:	4305      	orrs	r5, r0
 8000796:	19ed      	adds	r5, r5, r7
 8000798:	42bd      	cmp	r5, r7
 800079a:	419b      	sbcs	r3, r3
 800079c:	425b      	negs	r3, r3
 800079e:	4463      	add	r3, ip
 80007a0:	4698      	mov	r8, r3
 80007a2:	000e      	movs	r6, r1
 80007a4:	e07f      	b.n	80008a6 <__aeabi_dadd+0x3fe>
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <__aeabi_dadd+0x378>)
 80007a8:	1a76      	subs	r6, r6, r1
 80007aa:	4013      	ands	r3, r2
 80007ac:	4698      	mov	r8, r3
 80007ae:	e6f5      	b.n	800059c <__aeabi_dadd+0xf4>
 80007b0:	0028      	movs	r0, r5
 80007b2:	f001 fc73 	bl	800209c <__clzsi2>
 80007b6:	0001      	movs	r1, r0
 80007b8:	3118      	adds	r1, #24
 80007ba:	291f      	cmp	r1, #31
 80007bc:	dc00      	bgt.n	80007c0 <__aeabi_dadd+0x318>
 80007be:	e6cf      	b.n	8000560 <__aeabi_dadd+0xb8>
 80007c0:	002b      	movs	r3, r5
 80007c2:	3808      	subs	r0, #8
 80007c4:	4083      	lsls	r3, r0
 80007c6:	2500      	movs	r5, #0
 80007c8:	e6d2      	b.n	8000570 <__aeabi_dadd+0xc8>
 80007ca:	4662      	mov	r2, ip
 80007cc:	433a      	orrs	r2, r7
 80007ce:	0011      	movs	r1, r2
 80007d0:	1e4f      	subs	r7, r1, #1
 80007d2:	41b9      	sbcs	r1, r7
 80007d4:	e6ac      	b.n	8000530 <__aeabi_dadd+0x88>
 80007d6:	4649      	mov	r1, r9
 80007d8:	0758      	lsls	r0, r3, #29
 80007da:	08c9      	lsrs	r1, r1, #3
 80007dc:	4301      	orrs	r1, r0
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	e787      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80007e2:	4649      	mov	r1, r9
 80007e4:	075a      	lsls	r2, r3, #29
 80007e6:	08c9      	lsrs	r1, r1, #3
 80007e8:	4311      	orrs	r1, r2
 80007ea:	08db      	lsrs	r3, r3, #3
 80007ec:	e7a6      	b.n	800073c <__aeabi_dadd+0x294>
 80007ee:	490d      	ldr	r1, [pc, #52]	; (8000824 <__aeabi_dadd+0x37c>)
 80007f0:	1c70      	adds	r0, r6, #1
 80007f2:	4208      	tst	r0, r1
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e0bb      	b.n	8000970 <__aeabi_dadd+0x4c8>
 80007f8:	2e00      	cmp	r6, #0
 80007fa:	d000      	beq.n	80007fe <__aeabi_dadd+0x356>
 80007fc:	e114      	b.n	8000a28 <__aeabi_dadd+0x580>
 80007fe:	4649      	mov	r1, r9
 8000800:	4319      	orrs	r1, r3
 8000802:	d100      	bne.n	8000806 <__aeabi_dadd+0x35e>
 8000804:	e175      	b.n	8000af2 <__aeabi_dadd+0x64a>
 8000806:	0029      	movs	r1, r5
 8000808:	4339      	orrs	r1, r7
 800080a:	d000      	beq.n	800080e <__aeabi_dadd+0x366>
 800080c:	e17e      	b.n	8000b0c <__aeabi_dadd+0x664>
 800080e:	4649      	mov	r1, r9
 8000810:	0758      	lsls	r0, r3, #29
 8000812:	08c9      	lsrs	r1, r1, #3
 8000814:	4301      	orrs	r1, r0
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	e76e      	b.n	80006f8 <__aeabi_dadd+0x250>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	000007ff 	.word	0x000007ff
 8000820:	ff7fffff 	.word	0xff7fffff
 8000824:	000007fe 	.word	0x000007fe
 8000828:	4649      	mov	r1, r9
 800082a:	1bcd      	subs	r5, r1, r7
 800082c:	4661      	mov	r1, ip
 800082e:	1a58      	subs	r0, r3, r1
 8000830:	45a9      	cmp	r9, r5
 8000832:	4189      	sbcs	r1, r1
 8000834:	4249      	negs	r1, r1
 8000836:	4688      	mov	r8, r1
 8000838:	0001      	movs	r1, r0
 800083a:	4640      	mov	r0, r8
 800083c:	1a09      	subs	r1, r1, r0
 800083e:	4688      	mov	r8, r1
 8000840:	0209      	lsls	r1, r1, #8
 8000842:	d500      	bpl.n	8000846 <__aeabi_dadd+0x39e>
 8000844:	e0a6      	b.n	8000994 <__aeabi_dadd+0x4ec>
 8000846:	4641      	mov	r1, r8
 8000848:	4329      	orrs	r1, r5
 800084a:	d000      	beq.n	800084e <__aeabi_dadd+0x3a6>
 800084c:	e67f      	b.n	800054e <__aeabi_dadd+0xa6>
 800084e:	2300      	movs	r3, #0
 8000850:	2400      	movs	r4, #0
 8000852:	e751      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000854:	4cc7      	ldr	r4, [pc, #796]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000856:	42a1      	cmp	r1, r4
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x3b4>
 800085a:	e0c7      	b.n	80009ec <__aeabi_dadd+0x544>
 800085c:	2480      	movs	r4, #128	; 0x80
 800085e:	0424      	lsls	r4, r4, #16
 8000860:	4323      	orrs	r3, r4
 8000862:	2a38      	cmp	r2, #56	; 0x38
 8000864:	dc54      	bgt.n	8000910 <__aeabi_dadd+0x468>
 8000866:	2a1f      	cmp	r2, #31
 8000868:	dd00      	ble.n	800086c <__aeabi_dadd+0x3c4>
 800086a:	e0cc      	b.n	8000a06 <__aeabi_dadd+0x55e>
 800086c:	2420      	movs	r4, #32
 800086e:	4648      	mov	r0, r9
 8000870:	1aa4      	subs	r4, r4, r2
 8000872:	001d      	movs	r5, r3
 8000874:	464e      	mov	r6, r9
 8000876:	40a0      	lsls	r0, r4
 8000878:	40d6      	lsrs	r6, r2
 800087a:	40a5      	lsls	r5, r4
 800087c:	0004      	movs	r4, r0
 800087e:	40d3      	lsrs	r3, r2
 8000880:	4662      	mov	r2, ip
 8000882:	4335      	orrs	r5, r6
 8000884:	1e66      	subs	r6, r4, #1
 8000886:	41b4      	sbcs	r4, r6
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	469c      	mov	ip, r3
 800088c:	4325      	orrs	r5, r4
 800088e:	e044      	b.n	800091a <__aeabi_dadd+0x472>
 8000890:	4662      	mov	r2, ip
 8000892:	433a      	orrs	r2, r7
 8000894:	0015      	movs	r5, r2
 8000896:	1e6f      	subs	r7, r5, #1
 8000898:	41bd      	sbcs	r5, r7
 800089a:	444d      	add	r5, r9
 800089c:	454d      	cmp	r5, r9
 800089e:	4189      	sbcs	r1, r1
 80008a0:	4249      	negs	r1, r1
 80008a2:	4688      	mov	r8, r1
 80008a4:	4498      	add	r8, r3
 80008a6:	4643      	mov	r3, r8
 80008a8:	021b      	lsls	r3, r3, #8
 80008aa:	d400      	bmi.n	80008ae <__aeabi_dadd+0x406>
 80008ac:	e718      	b.n	80006e0 <__aeabi_dadd+0x238>
 80008ae:	4bb1      	ldr	r3, [pc, #708]	; (8000b74 <__aeabi_dadd+0x6cc>)
 80008b0:	3601      	adds	r6, #1
 80008b2:	429e      	cmp	r6, r3
 80008b4:	d049      	beq.n	800094a <__aeabi_dadd+0x4a2>
 80008b6:	4642      	mov	r2, r8
 80008b8:	4baf      	ldr	r3, [pc, #700]	; (8000b78 <__aeabi_dadd+0x6d0>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	401a      	ands	r2, r3
 80008be:	0013      	movs	r3, r2
 80008c0:	086a      	lsrs	r2, r5, #1
 80008c2:	400d      	ands	r5, r1
 80008c4:	4315      	orrs	r5, r2
 80008c6:	07d9      	lsls	r1, r3, #31
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	4698      	mov	r8, r3
 80008cc:	430d      	orrs	r5, r1
 80008ce:	e665      	b.n	800059c <__aeabi_dadd+0xf4>
 80008d0:	0018      	movs	r0, r3
 80008d2:	3e1f      	subs	r6, #31
 80008d4:	40f0      	lsrs	r0, r6
 80008d6:	2a20      	cmp	r2, #32
 80008d8:	d003      	beq.n	80008e2 <__aeabi_dadd+0x43a>
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	1a8a      	subs	r2, r1, r2
 80008de:	4093      	lsls	r3, r2
 80008e0:	431d      	orrs	r5, r3
 80008e2:	1e69      	subs	r1, r5, #1
 80008e4:	418d      	sbcs	r5, r1
 80008e6:	2300      	movs	r3, #0
 80008e8:	2600      	movs	r6, #0
 80008ea:	4698      	mov	r8, r3
 80008ec:	4305      	orrs	r5, r0
 80008ee:	e6f7      	b.n	80006e0 <__aeabi_dadd+0x238>
 80008f0:	0011      	movs	r1, r2
 80008f2:	4665      	mov	r5, ip
 80008f4:	3920      	subs	r1, #32
 80008f6:	40cd      	lsrs	r5, r1
 80008f8:	2a20      	cmp	r2, #32
 80008fa:	d004      	beq.n	8000906 <__aeabi_dadd+0x45e>
 80008fc:	2040      	movs	r0, #64	; 0x40
 80008fe:	4661      	mov	r1, ip
 8000900:	1a82      	subs	r2, r0, r2
 8000902:	4091      	lsls	r1, r2
 8000904:	430f      	orrs	r7, r1
 8000906:	0039      	movs	r1, r7
 8000908:	1e4f      	subs	r7, r1, #1
 800090a:	41b9      	sbcs	r1, r7
 800090c:	4329      	orrs	r1, r5
 800090e:	e60f      	b.n	8000530 <__aeabi_dadd+0x88>
 8000910:	464a      	mov	r2, r9
 8000912:	4313      	orrs	r3, r2
 8000914:	001d      	movs	r5, r3
 8000916:	1e6b      	subs	r3, r5, #1
 8000918:	419d      	sbcs	r5, r3
 800091a:	1b7d      	subs	r5, r7, r5
 800091c:	42af      	cmp	r7, r5
 800091e:	419b      	sbcs	r3, r3
 8000920:	4662      	mov	r2, ip
 8000922:	425b      	negs	r3, r3
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	4698      	mov	r8, r3
 8000928:	4654      	mov	r4, sl
 800092a:	000e      	movs	r6, r1
 800092c:	e607      	b.n	800053e <__aeabi_dadd+0x96>
 800092e:	4648      	mov	r0, r9
 8000930:	4318      	orrs	r0, r3
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x48e>
 8000934:	e0b3      	b.n	8000a9e <__aeabi_dadd+0x5f6>
 8000936:	1e50      	subs	r0, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x496>
 800093c:	e10d      	b.n	8000b5a <__aeabi_dadd+0x6b2>
 800093e:	4d8d      	ldr	r5, [pc, #564]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000940:	42aa      	cmp	r2, r5
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x49e>
 8000944:	e0a5      	b.n	8000a92 <__aeabi_dadd+0x5ea>
 8000946:	0002      	movs	r2, r0
 8000948:	e710      	b.n	800076c <__aeabi_dadd+0x2c4>
 800094a:	0032      	movs	r2, r6
 800094c:	2300      	movs	r3, #0
 800094e:	2100      	movs	r1, #0
 8000950:	e644      	b.n	80005dc <__aeabi_dadd+0x134>
 8000952:	2120      	movs	r1, #32
 8000954:	0038      	movs	r0, r7
 8000956:	1a89      	subs	r1, r1, r2
 8000958:	4665      	mov	r5, ip
 800095a:	408f      	lsls	r7, r1
 800095c:	408d      	lsls	r5, r1
 800095e:	40d0      	lsrs	r0, r2
 8000960:	1e79      	subs	r1, r7, #1
 8000962:	418f      	sbcs	r7, r1
 8000964:	4305      	orrs	r5, r0
 8000966:	433d      	orrs	r5, r7
 8000968:	4667      	mov	r7, ip
 800096a:	40d7      	lsrs	r7, r2
 800096c:	19db      	adds	r3, r3, r7
 800096e:	e794      	b.n	800089a <__aeabi_dadd+0x3f2>
 8000970:	4a80      	ldr	r2, [pc, #512]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000972:	4290      	cmp	r0, r2
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x4d0>
 8000976:	e0ec      	b.n	8000b52 <__aeabi_dadd+0x6aa>
 8000978:	0039      	movs	r1, r7
 800097a:	4449      	add	r1, r9
 800097c:	4549      	cmp	r1, r9
 800097e:	4192      	sbcs	r2, r2
 8000980:	4463      	add	r3, ip
 8000982:	4252      	negs	r2, r2
 8000984:	189b      	adds	r3, r3, r2
 8000986:	07dd      	lsls	r5, r3, #31
 8000988:	0849      	lsrs	r1, r1, #1
 800098a:	085b      	lsrs	r3, r3, #1
 800098c:	4698      	mov	r8, r3
 800098e:	0006      	movs	r6, r0
 8000990:	430d      	orrs	r5, r1
 8000992:	e6a5      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000994:	464a      	mov	r2, r9
 8000996:	1abd      	subs	r5, r7, r2
 8000998:	42af      	cmp	r7, r5
 800099a:	4189      	sbcs	r1, r1
 800099c:	4662      	mov	r2, ip
 800099e:	4249      	negs	r1, r1
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	1a5b      	subs	r3, r3, r1
 80009a4:	4698      	mov	r8, r3
 80009a6:	4654      	mov	r4, sl
 80009a8:	e5d1      	b.n	800054e <__aeabi_dadd+0xa6>
 80009aa:	076c      	lsls	r4, r5, #29
 80009ac:	08f9      	lsrs	r1, r7, #3
 80009ae:	4321      	orrs	r1, r4
 80009b0:	08eb      	lsrs	r3, r5, #3
 80009b2:	0004      	movs	r4, r0
 80009b4:	e69d      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80009b6:	464a      	mov	r2, r9
 80009b8:	431a      	orrs	r2, r3
 80009ba:	d175      	bne.n	8000aa8 <__aeabi_dadd+0x600>
 80009bc:	4661      	mov	r1, ip
 80009be:	4339      	orrs	r1, r7
 80009c0:	d114      	bne.n	80009ec <__aeabi_dadd+0x544>
 80009c2:	2380      	movs	r3, #128	; 0x80
 80009c4:	2400      	movs	r4, #0
 80009c6:	031b      	lsls	r3, r3, #12
 80009c8:	e6bc      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009ca:	464a      	mov	r2, r9
 80009cc:	1bd5      	subs	r5, r2, r7
 80009ce:	45a9      	cmp	r9, r5
 80009d0:	4189      	sbcs	r1, r1
 80009d2:	4662      	mov	r2, ip
 80009d4:	4249      	negs	r1, r1
 80009d6:	1a9b      	subs	r3, r3, r2
 80009d8:	1a5b      	subs	r3, r3, r1
 80009da:	4698      	mov	r8, r3
 80009dc:	2601      	movs	r6, #1
 80009de:	e5ae      	b.n	800053e <__aeabi_dadd+0x96>
 80009e0:	464a      	mov	r2, r9
 80009e2:	08d1      	lsrs	r1, r2, #3
 80009e4:	075a      	lsls	r2, r3, #29
 80009e6:	4311      	orrs	r1, r2
 80009e8:	08db      	lsrs	r3, r3, #3
 80009ea:	e6a7      	b.n	800073c <__aeabi_dadd+0x294>
 80009ec:	4663      	mov	r3, ip
 80009ee:	08f9      	lsrs	r1, r7, #3
 80009f0:	075a      	lsls	r2, r3, #29
 80009f2:	4654      	mov	r4, sl
 80009f4:	4311      	orrs	r1, r2
 80009f6:	08db      	lsrs	r3, r3, #3
 80009f8:	e6a0      	b.n	800073c <__aeabi_dadd+0x294>
 80009fa:	464a      	mov	r2, r9
 80009fc:	4313      	orrs	r3, r2
 80009fe:	001d      	movs	r5, r3
 8000a00:	1e6b      	subs	r3, r5, #1
 8000a02:	419d      	sbcs	r5, r3
 8000a04:	e6c7      	b.n	8000796 <__aeabi_dadd+0x2ee>
 8000a06:	0014      	movs	r4, r2
 8000a08:	001e      	movs	r6, r3
 8000a0a:	3c20      	subs	r4, #32
 8000a0c:	40e6      	lsrs	r6, r4
 8000a0e:	2a20      	cmp	r2, #32
 8000a10:	d005      	beq.n	8000a1e <__aeabi_dadd+0x576>
 8000a12:	2440      	movs	r4, #64	; 0x40
 8000a14:	1aa2      	subs	r2, r4, r2
 8000a16:	4093      	lsls	r3, r2
 8000a18:	464a      	mov	r2, r9
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	4691      	mov	r9, r2
 8000a1e:	464d      	mov	r5, r9
 8000a20:	1e6b      	subs	r3, r5, #1
 8000a22:	419d      	sbcs	r5, r3
 8000a24:	4335      	orrs	r5, r6
 8000a26:	e778      	b.n	800091a <__aeabi_dadd+0x472>
 8000a28:	464a      	mov	r2, r9
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_dadd+0x588>
 8000a2e:	e66b      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a30:	076b      	lsls	r3, r5, #29
 8000a32:	08f9      	lsrs	r1, r7, #3
 8000a34:	4319      	orrs	r1, r3
 8000a36:	08eb      	lsrs	r3, r5, #3
 8000a38:	e680      	b.n	800073c <__aeabi_dadd+0x294>
 8000a3a:	4661      	mov	r1, ip
 8000a3c:	4339      	orrs	r1, r7
 8000a3e:	d054      	beq.n	8000aea <__aeabi_dadd+0x642>
 8000a40:	4663      	mov	r3, ip
 8000a42:	08f9      	lsrs	r1, r7, #3
 8000a44:	075c      	lsls	r4, r3, #29
 8000a46:	4321      	orrs	r1, r4
 8000a48:	08db      	lsrs	r3, r3, #3
 8000a4a:	0004      	movs	r4, r0
 8000a4c:	e654      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000a4e:	464a      	mov	r2, r9
 8000a50:	1abd      	subs	r5, r7, r2
 8000a52:	42af      	cmp	r7, r5
 8000a54:	4189      	sbcs	r1, r1
 8000a56:	4662      	mov	r2, ip
 8000a58:	4249      	negs	r1, r1
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	1a5b      	subs	r3, r3, r1
 8000a5e:	4698      	mov	r8, r3
 8000a60:	0004      	movs	r4, r0
 8000a62:	2601      	movs	r6, #1
 8000a64:	e56b      	b.n	800053e <__aeabi_dadd+0x96>
 8000a66:	464a      	mov	r2, r9
 8000a68:	1bd5      	subs	r5, r2, r7
 8000a6a:	45a9      	cmp	r9, r5
 8000a6c:	4189      	sbcs	r1, r1
 8000a6e:	4662      	mov	r2, ip
 8000a70:	4249      	negs	r1, r1
 8000a72:	1a9a      	subs	r2, r3, r2
 8000a74:	1a52      	subs	r2, r2, r1
 8000a76:	4690      	mov	r8, r2
 8000a78:	0212      	lsls	r2, r2, #8
 8000a7a:	d532      	bpl.n	8000ae2 <__aeabi_dadd+0x63a>
 8000a7c:	464a      	mov	r2, r9
 8000a7e:	1abd      	subs	r5, r7, r2
 8000a80:	42af      	cmp	r7, r5
 8000a82:	4189      	sbcs	r1, r1
 8000a84:	4662      	mov	r2, ip
 8000a86:	4249      	negs	r1, r1
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	1a5b      	subs	r3, r3, r1
 8000a8c:	4698      	mov	r8, r3
 8000a8e:	0004      	movs	r4, r0
 8000a90:	e584      	b.n	800059c <__aeabi_dadd+0xf4>
 8000a92:	4663      	mov	r3, ip
 8000a94:	08f9      	lsrs	r1, r7, #3
 8000a96:	075a      	lsls	r2, r3, #29
 8000a98:	4311      	orrs	r1, r2
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	e64e      	b.n	800073c <__aeabi_dadd+0x294>
 8000a9e:	08f9      	lsrs	r1, r7, #3
 8000aa0:	0768      	lsls	r0, r5, #29
 8000aa2:	4301      	orrs	r1, r0
 8000aa4:	08eb      	lsrs	r3, r5, #3
 8000aa6:	e624      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	433a      	orrs	r2, r7
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dadd+0x608>
 8000aae:	e698      	b.n	80007e2 <__aeabi_dadd+0x33a>
 8000ab0:	464a      	mov	r2, r9
 8000ab2:	08d1      	lsrs	r1, r2, #3
 8000ab4:	075a      	lsls	r2, r3, #29
 8000ab6:	4311      	orrs	r1, r2
 8000ab8:	08da      	lsrs	r2, r3, #3
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	031b      	lsls	r3, r3, #12
 8000abe:	421a      	tst	r2, r3
 8000ac0:	d008      	beq.n	8000ad4 <__aeabi_dadd+0x62c>
 8000ac2:	4660      	mov	r0, ip
 8000ac4:	08c5      	lsrs	r5, r0, #3
 8000ac6:	421d      	tst	r5, r3
 8000ac8:	d104      	bne.n	8000ad4 <__aeabi_dadd+0x62c>
 8000aca:	4654      	mov	r4, sl
 8000acc:	002a      	movs	r2, r5
 8000ace:	08f9      	lsrs	r1, r7, #3
 8000ad0:	0743      	lsls	r3, r0, #29
 8000ad2:	4319      	orrs	r1, r3
 8000ad4:	0f4b      	lsrs	r3, r1, #29
 8000ad6:	00c9      	lsls	r1, r1, #3
 8000ad8:	075b      	lsls	r3, r3, #29
 8000ada:	08c9      	lsrs	r1, r1, #3
 8000adc:	4319      	orrs	r1, r3
 8000ade:	0013      	movs	r3, r2
 8000ae0:	e62c      	b.n	800073c <__aeabi_dadd+0x294>
 8000ae2:	4641      	mov	r1, r8
 8000ae4:	4329      	orrs	r1, r5
 8000ae6:	d000      	beq.n	8000aea <__aeabi_dadd+0x642>
 8000ae8:	e5fa      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000aea:	2300      	movs	r3, #0
 8000aec:	000a      	movs	r2, r1
 8000aee:	2400      	movs	r4, #0
 8000af0:	e602      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000af2:	076b      	lsls	r3, r5, #29
 8000af4:	08f9      	lsrs	r1, r7, #3
 8000af6:	4319      	orrs	r1, r3
 8000af8:	08eb      	lsrs	r3, r5, #3
 8000afa:	e5fd      	b.n	80006f8 <__aeabi_dadd+0x250>
 8000afc:	4663      	mov	r3, ip
 8000afe:	08f9      	lsrs	r1, r7, #3
 8000b00:	075b      	lsls	r3, r3, #29
 8000b02:	4319      	orrs	r1, r3
 8000b04:	4663      	mov	r3, ip
 8000b06:	0004      	movs	r4, r0
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	e617      	b.n	800073c <__aeabi_dadd+0x294>
 8000b0c:	003d      	movs	r5, r7
 8000b0e:	444d      	add	r5, r9
 8000b10:	4463      	add	r3, ip
 8000b12:	454d      	cmp	r5, r9
 8000b14:	4189      	sbcs	r1, r1
 8000b16:	4698      	mov	r8, r3
 8000b18:	4249      	negs	r1, r1
 8000b1a:	4488      	add	r8, r1
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	021b      	lsls	r3, r3, #8
 8000b20:	d400      	bmi.n	8000b24 <__aeabi_dadd+0x67c>
 8000b22:	e5dd      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000b24:	4642      	mov	r2, r8
 8000b26:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <__aeabi_dadd+0x6d0>)
 8000b28:	2601      	movs	r6, #1
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	4690      	mov	r8, r2
 8000b2e:	e5d7      	b.n	80006e0 <__aeabi_dadd+0x238>
 8000b30:	0010      	movs	r0, r2
 8000b32:	001e      	movs	r6, r3
 8000b34:	3820      	subs	r0, #32
 8000b36:	40c6      	lsrs	r6, r0
 8000b38:	2a20      	cmp	r2, #32
 8000b3a:	d005      	beq.n	8000b48 <__aeabi_dadd+0x6a0>
 8000b3c:	2040      	movs	r0, #64	; 0x40
 8000b3e:	1a82      	subs	r2, r0, r2
 8000b40:	4093      	lsls	r3, r2
 8000b42:	464a      	mov	r2, r9
 8000b44:	431a      	orrs	r2, r3
 8000b46:	4691      	mov	r9, r2
 8000b48:	464d      	mov	r5, r9
 8000b4a:	1e6b      	subs	r3, r5, #1
 8000b4c:	419d      	sbcs	r5, r3
 8000b4e:	4335      	orrs	r5, r6
 8000b50:	e621      	b.n	8000796 <__aeabi_dadd+0x2ee>
 8000b52:	0002      	movs	r2, r0
 8000b54:	2300      	movs	r3, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	e540      	b.n	80005dc <__aeabi_dadd+0x134>
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	19d5      	adds	r5, r2, r7
 8000b5e:	42bd      	cmp	r5, r7
 8000b60:	4189      	sbcs	r1, r1
 8000b62:	4463      	add	r3, ip
 8000b64:	4698      	mov	r8, r3
 8000b66:	4249      	negs	r1, r1
 8000b68:	4488      	add	r8, r1
 8000b6a:	e5b3      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4a01      	ldr	r2, [pc, #4]	; (8000b74 <__aeabi_dadd+0x6cc>)
 8000b70:	000b      	movs	r3, r1
 8000b72:	e533      	b.n	80005dc <__aeabi_dadd+0x134>
 8000b74:	000007ff 	.word	0x000007ff
 8000b78:	ff7fffff 	.word	0xff7fffff

08000b7c <__aeabi_ddiv>:
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	4657      	mov	r7, sl
 8000b80:	464e      	mov	r6, r9
 8000b82:	4645      	mov	r5, r8
 8000b84:	46de      	mov	lr, fp
 8000b86:	b5e0      	push	{r5, r6, r7, lr}
 8000b88:	4681      	mov	r9, r0
 8000b8a:	0005      	movs	r5, r0
 8000b8c:	030c      	lsls	r4, r1, #12
 8000b8e:	0048      	lsls	r0, r1, #1
 8000b90:	4692      	mov	sl, r2
 8000b92:	001f      	movs	r7, r3
 8000b94:	b085      	sub	sp, #20
 8000b96:	0b24      	lsrs	r4, r4, #12
 8000b98:	0d40      	lsrs	r0, r0, #21
 8000b9a:	0fce      	lsrs	r6, r1, #31
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	d059      	beq.n	8000c54 <__aeabi_ddiv+0xd8>
 8000ba0:	4b87      	ldr	r3, [pc, #540]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_ddiv+0x2c>
 8000ba6:	e098      	b.n	8000cda <__aeabi_ddiv+0x15e>
 8000ba8:	0f6b      	lsrs	r3, r5, #29
 8000baa:	00e4      	lsls	r4, r4, #3
 8000bac:	431c      	orrs	r4, r3
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	041b      	lsls	r3, r3, #16
 8000bb2:	4323      	orrs	r3, r4
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	4b83      	ldr	r3, [pc, #524]	; (8000dc4 <__aeabi_ddiv+0x248>)
 8000bb8:	00ed      	lsls	r5, r5, #3
 8000bba:	469b      	mov	fp, r3
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	4483      	add	fp, r0
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	033c      	lsls	r4, r7, #12
 8000bc6:	007b      	lsls	r3, r7, #1
 8000bc8:	4650      	mov	r0, sl
 8000bca:	0b24      	lsrs	r4, r4, #12
 8000bcc:	0d5b      	lsrs	r3, r3, #21
 8000bce:	0fff      	lsrs	r7, r7, #31
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d067      	beq.n	8000ca4 <__aeabi_ddiv+0x128>
 8000bd4:	4a7a      	ldr	r2, [pc, #488]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d018      	beq.n	8000c0c <__aeabi_ddiv+0x90>
 8000bda:	497a      	ldr	r1, [pc, #488]	; (8000dc4 <__aeabi_ddiv+0x248>)
 8000bdc:	0f42      	lsrs	r2, r0, #29
 8000bde:	468c      	mov	ip, r1
 8000be0:	00e4      	lsls	r4, r4, #3
 8000be2:	4659      	mov	r1, fp
 8000be4:	4314      	orrs	r4, r2
 8000be6:	2280      	movs	r2, #128	; 0x80
 8000be8:	4463      	add	r3, ip
 8000bea:	0412      	lsls	r2, r2, #16
 8000bec:	1acb      	subs	r3, r1, r3
 8000bee:	4314      	orrs	r4, r2
 8000bf0:	469b      	mov	fp, r3
 8000bf2:	00c2      	lsls	r2, r0, #3
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	0033      	movs	r3, r6
 8000bf8:	407b      	eors	r3, r7
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	2b0f      	cmp	r3, #15
 8000c00:	d900      	bls.n	8000c04 <__aeabi_ddiv+0x88>
 8000c02:	e0ef      	b.n	8000de4 <__aeabi_ddiv+0x268>
 8000c04:	4970      	ldr	r1, [pc, #448]	; (8000dc8 <__aeabi_ddiv+0x24c>)
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	58cb      	ldr	r3, [r1, r3]
 8000c0a:	469f      	mov	pc, r3
 8000c0c:	4b6f      	ldr	r3, [pc, #444]	; (8000dcc <__aeabi_ddiv+0x250>)
 8000c0e:	4652      	mov	r2, sl
 8000c10:	469c      	mov	ip, r3
 8000c12:	4322      	orrs	r2, r4
 8000c14:	44e3      	add	fp, ip
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d000      	beq.n	8000c1c <__aeabi_ddiv+0xa0>
 8000c1a:	e095      	b.n	8000d48 <__aeabi_ddiv+0x1cc>
 8000c1c:	4649      	mov	r1, r9
 8000c1e:	2302      	movs	r3, #2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	4689      	mov	r9, r1
 8000c24:	2400      	movs	r4, #0
 8000c26:	2002      	movs	r0, #2
 8000c28:	e7e5      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	2500      	movs	r5, #0
 8000c30:	4652      	mov	r2, sl
 8000c32:	051b      	lsls	r3, r3, #20
 8000c34:	4323      	orrs	r3, r4
 8000c36:	07d2      	lsls	r2, r2, #31
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	0028      	movs	r0, r5
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	b005      	add	sp, #20
 8000c40:	bcf0      	pop	{r4, r5, r6, r7}
 8000c42:	46bb      	mov	fp, r7
 8000c44:	46b2      	mov	sl, r6
 8000c46:	46a9      	mov	r9, r5
 8000c48:	46a0      	mov	r8, r4
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	2400      	movs	r4, #0
 8000c4e:	2500      	movs	r5, #0
 8000c50:	4b5b      	ldr	r3, [pc, #364]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000c52:	e7ed      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000c54:	464b      	mov	r3, r9
 8000c56:	4323      	orrs	r3, r4
 8000c58:	4698      	mov	r8, r3
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_ddiv+0xe2>
 8000c5c:	e089      	b.n	8000d72 <__aeabi_ddiv+0x1f6>
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	d100      	bne.n	8000c64 <__aeabi_ddiv+0xe8>
 8000c62:	e1e0      	b.n	8001026 <__aeabi_ddiv+0x4aa>
 8000c64:	0020      	movs	r0, r4
 8000c66:	f001 fa19 	bl	800209c <__clzsi2>
 8000c6a:	0001      	movs	r1, r0
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	390b      	subs	r1, #11
 8000c70:	231d      	movs	r3, #29
 8000c72:	1a5b      	subs	r3, r3, r1
 8000c74:	4649      	mov	r1, r9
 8000c76:	0010      	movs	r0, r2
 8000c78:	40d9      	lsrs	r1, r3
 8000c7a:	3808      	subs	r0, #8
 8000c7c:	4084      	lsls	r4, r0
 8000c7e:	000b      	movs	r3, r1
 8000c80:	464d      	mov	r5, r9
 8000c82:	4323      	orrs	r3, r4
 8000c84:	4698      	mov	r8, r3
 8000c86:	4085      	lsls	r5, r0
 8000c88:	4851      	ldr	r0, [pc, #324]	; (8000dd0 <__aeabi_ddiv+0x254>)
 8000c8a:	033c      	lsls	r4, r7, #12
 8000c8c:	1a83      	subs	r3, r0, r2
 8000c8e:	469b      	mov	fp, r3
 8000c90:	2300      	movs	r3, #0
 8000c92:	4699      	mov	r9, r3
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	007b      	lsls	r3, r7, #1
 8000c98:	4650      	mov	r0, sl
 8000c9a:	0b24      	lsrs	r4, r4, #12
 8000c9c:	0d5b      	lsrs	r3, r3, #21
 8000c9e:	0fff      	lsrs	r7, r7, #31
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d197      	bne.n	8000bd4 <__aeabi_ddiv+0x58>
 8000ca4:	4652      	mov	r2, sl
 8000ca6:	4322      	orrs	r2, r4
 8000ca8:	d055      	beq.n	8000d56 <__aeabi_ddiv+0x1da>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_ddiv+0x134>
 8000cae:	e1ca      	b.n	8001046 <__aeabi_ddiv+0x4ca>
 8000cb0:	0020      	movs	r0, r4
 8000cb2:	f001 f9f3 	bl	800209c <__clzsi2>
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	3a0b      	subs	r2, #11
 8000cba:	231d      	movs	r3, #29
 8000cbc:	0001      	movs	r1, r0
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	3908      	subs	r1, #8
 8000cc4:	40da      	lsrs	r2, r3
 8000cc6:	408c      	lsls	r4, r1
 8000cc8:	4314      	orrs	r4, r2
 8000cca:	4652      	mov	r2, sl
 8000ccc:	408a      	lsls	r2, r1
 8000cce:	4b41      	ldr	r3, [pc, #260]	; (8000dd4 <__aeabi_ddiv+0x258>)
 8000cd0:	4458      	add	r0, fp
 8000cd2:	469b      	mov	fp, r3
 8000cd4:	4483      	add	fp, r0
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	e78d      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000cda:	464b      	mov	r3, r9
 8000cdc:	4323      	orrs	r3, r4
 8000cde:	4698      	mov	r8, r3
 8000ce0:	d140      	bne.n	8000d64 <__aeabi_ddiv+0x1e8>
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	4699      	mov	r9, r3
 8000ce6:	3b06      	subs	r3, #6
 8000ce8:	2500      	movs	r5, #0
 8000cea:	4683      	mov	fp, r0
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	e769      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000cf0:	46b2      	mov	sl, r6
 8000cf2:	9b00      	ldr	r3, [sp, #0]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0a9      	beq.n	8000c4c <__aeabi_ddiv+0xd0>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d100      	bne.n	8000cfe <__aeabi_ddiv+0x182>
 8000cfc:	e211      	b.n	8001122 <__aeabi_ddiv+0x5a6>
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d093      	beq.n	8000c2a <__aeabi_ddiv+0xae>
 8000d02:	4a35      	ldr	r2, [pc, #212]	; (8000dd8 <__aeabi_ddiv+0x25c>)
 8000d04:	445a      	add	r2, fp
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	dc00      	bgt.n	8000d0c <__aeabi_ddiv+0x190>
 8000d0a:	e13c      	b.n	8000f86 <__aeabi_ddiv+0x40a>
 8000d0c:	076b      	lsls	r3, r5, #29
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_ddiv+0x196>
 8000d10:	e1a7      	b.n	8001062 <__aeabi_ddiv+0x4e6>
 8000d12:	08ed      	lsrs	r5, r5, #3
 8000d14:	4643      	mov	r3, r8
 8000d16:	01db      	lsls	r3, r3, #7
 8000d18:	d506      	bpl.n	8000d28 <__aeabi_ddiv+0x1ac>
 8000d1a:	4642      	mov	r2, r8
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <__aeabi_ddiv+0x260>)
 8000d1e:	401a      	ands	r2, r3
 8000d20:	4690      	mov	r8, r2
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	00d2      	lsls	r2, r2, #3
 8000d26:	445a      	add	r2, fp
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <__aeabi_ddiv+0x264>)
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dc8e      	bgt.n	8000c4c <__aeabi_ddiv+0xd0>
 8000d2e:	4643      	mov	r3, r8
 8000d30:	0552      	lsls	r2, r2, #21
 8000d32:	0758      	lsls	r0, r3, #29
 8000d34:	025c      	lsls	r4, r3, #9
 8000d36:	4305      	orrs	r5, r0
 8000d38:	0b24      	lsrs	r4, r4, #12
 8000d3a:	0d53      	lsrs	r3, r2, #21
 8000d3c:	e778      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000d3e:	46ba      	mov	sl, r7
 8000d40:	46a0      	mov	r8, r4
 8000d42:	0015      	movs	r5, r2
 8000d44:	9000      	str	r0, [sp, #0]
 8000d46:	e7d4      	b.n	8000cf2 <__aeabi_ddiv+0x176>
 8000d48:	464a      	mov	r2, r9
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	4691      	mov	r9, r2
 8000d50:	2003      	movs	r0, #3
 8000d52:	4652      	mov	r2, sl
 8000d54:	e74f      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000d56:	4649      	mov	r1, r9
 8000d58:	2301      	movs	r3, #1
 8000d5a:	4319      	orrs	r1, r3
 8000d5c:	4689      	mov	r9, r1
 8000d5e:	2400      	movs	r4, #0
 8000d60:	2001      	movs	r0, #1
 8000d62:	e748      	b.n	8000bf6 <__aeabi_ddiv+0x7a>
 8000d64:	230c      	movs	r3, #12
 8000d66:	4699      	mov	r9, r3
 8000d68:	3b09      	subs	r3, #9
 8000d6a:	46a0      	mov	r8, r4
 8000d6c:	4683      	mov	fp, r0
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	e728      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000d72:	2304      	movs	r3, #4
 8000d74:	4699      	mov	r9, r3
 8000d76:	2300      	movs	r3, #0
 8000d78:	469b      	mov	fp, r3
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	2500      	movs	r5, #0
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	e720      	b.n	8000bc4 <__aeabi_ddiv+0x48>
 8000d82:	2300      	movs	r3, #0
 8000d84:	2480      	movs	r4, #128	; 0x80
 8000d86:	469a      	mov	sl, r3
 8000d88:	2500      	movs	r5, #0
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000d8c:	0324      	lsls	r4, r4, #12
 8000d8e:	e74f      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	4641      	mov	r1, r8
 8000d94:	031b      	lsls	r3, r3, #12
 8000d96:	4219      	tst	r1, r3
 8000d98:	d008      	beq.n	8000dac <__aeabi_ddiv+0x230>
 8000d9a:	421c      	tst	r4, r3
 8000d9c:	d106      	bne.n	8000dac <__aeabi_ddiv+0x230>
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	0324      	lsls	r4, r4, #12
 8000da2:	46ba      	mov	sl, r7
 8000da4:	0015      	movs	r5, r2
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000da8:	0b24      	lsrs	r4, r4, #12
 8000daa:	e741      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000dac:	2480      	movs	r4, #128	; 0x80
 8000dae:	4643      	mov	r3, r8
 8000db0:	0324      	lsls	r4, r4, #12
 8000db2:	431c      	orrs	r4, r3
 8000db4:	0324      	lsls	r4, r4, #12
 8000db6:	46b2      	mov	sl, r6
 8000db8:	4b01      	ldr	r3, [pc, #4]	; (8000dc0 <__aeabi_ddiv+0x244>)
 8000dba:	0b24      	lsrs	r4, r4, #12
 8000dbc:	e738      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	000007ff 	.word	0x000007ff
 8000dc4:	fffffc01 	.word	0xfffffc01
 8000dc8:	0800ea3c 	.word	0x0800ea3c
 8000dcc:	fffff801 	.word	0xfffff801
 8000dd0:	fffffc0d 	.word	0xfffffc0d
 8000dd4:	000003f3 	.word	0x000003f3
 8000dd8:	000003ff 	.word	0x000003ff
 8000ddc:	feffffff 	.word	0xfeffffff
 8000de0:	000007fe 	.word	0x000007fe
 8000de4:	4544      	cmp	r4, r8
 8000de6:	d200      	bcs.n	8000dea <__aeabi_ddiv+0x26e>
 8000de8:	e116      	b.n	8001018 <__aeabi_ddiv+0x49c>
 8000dea:	d100      	bne.n	8000dee <__aeabi_ddiv+0x272>
 8000dec:	e111      	b.n	8001012 <__aeabi_ddiv+0x496>
 8000dee:	2301      	movs	r3, #1
 8000df0:	425b      	negs	r3, r3
 8000df2:	469c      	mov	ip, r3
 8000df4:	002e      	movs	r6, r5
 8000df6:	4640      	mov	r0, r8
 8000df8:	2500      	movs	r5, #0
 8000dfa:	44e3      	add	fp, ip
 8000dfc:	0223      	lsls	r3, r4, #8
 8000dfe:	0e14      	lsrs	r4, r2, #24
 8000e00:	431c      	orrs	r4, r3
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	4699      	mov	r9, r3
 8000e06:	0423      	lsls	r3, r4, #16
 8000e08:	0c1f      	lsrs	r7, r3, #16
 8000e0a:	0212      	lsls	r2, r2, #8
 8000e0c:	4649      	mov	r1, r9
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	9701      	str	r7, [sp, #4]
 8000e12:	f7ff f9fd 	bl	8000210 <__aeabi_uidivmod>
 8000e16:	0002      	movs	r2, r0
 8000e18:	437a      	muls	r2, r7
 8000e1a:	040b      	lsls	r3, r1, #16
 8000e1c:	0c31      	lsrs	r1, r6, #16
 8000e1e:	4680      	mov	r8, r0
 8000e20:	4319      	orrs	r1, r3
 8000e22:	428a      	cmp	r2, r1
 8000e24:	d90b      	bls.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e26:	2301      	movs	r3, #1
 8000e28:	425b      	negs	r3, r3
 8000e2a:	469c      	mov	ip, r3
 8000e2c:	1909      	adds	r1, r1, r4
 8000e2e:	44e0      	add	r8, ip
 8000e30:	428c      	cmp	r4, r1
 8000e32:	d804      	bhi.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e34:	428a      	cmp	r2, r1
 8000e36:	d902      	bls.n	8000e3e <__aeabi_ddiv+0x2c2>
 8000e38:	1e83      	subs	r3, r0, #2
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	1909      	adds	r1, r1, r4
 8000e3e:	1a88      	subs	r0, r1, r2
 8000e40:	4649      	mov	r1, r9
 8000e42:	f7ff f9e5 	bl	8000210 <__aeabi_uidivmod>
 8000e46:	0409      	lsls	r1, r1, #16
 8000e48:	468c      	mov	ip, r1
 8000e4a:	0431      	lsls	r1, r6, #16
 8000e4c:	4666      	mov	r6, ip
 8000e4e:	9a01      	ldr	r2, [sp, #4]
 8000e50:	0c09      	lsrs	r1, r1, #16
 8000e52:	4342      	muls	r2, r0
 8000e54:	0003      	movs	r3, r0
 8000e56:	4331      	orrs	r1, r6
 8000e58:	428a      	cmp	r2, r1
 8000e5a:	d904      	bls.n	8000e66 <__aeabi_ddiv+0x2ea>
 8000e5c:	1909      	adds	r1, r1, r4
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	428c      	cmp	r4, r1
 8000e62:	d800      	bhi.n	8000e66 <__aeabi_ddiv+0x2ea>
 8000e64:	e111      	b.n	800108a <__aeabi_ddiv+0x50e>
 8000e66:	1a89      	subs	r1, r1, r2
 8000e68:	4642      	mov	r2, r8
 8000e6a:	9e00      	ldr	r6, [sp, #0]
 8000e6c:	0412      	lsls	r2, r2, #16
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	0c33      	lsrs	r3, r6, #16
 8000e72:	001f      	movs	r7, r3
 8000e74:	0c10      	lsrs	r0, r2, #16
 8000e76:	4690      	mov	r8, r2
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	0413      	lsls	r3, r2, #16
 8000e7c:	0432      	lsls	r2, r6, #16
 8000e7e:	0c16      	lsrs	r6, r2, #16
 8000e80:	0032      	movs	r2, r6
 8000e82:	0c1b      	lsrs	r3, r3, #16
 8000e84:	435a      	muls	r2, r3
 8000e86:	9603      	str	r6, [sp, #12]
 8000e88:	437b      	muls	r3, r7
 8000e8a:	4346      	muls	r6, r0
 8000e8c:	4378      	muls	r0, r7
 8000e8e:	0c17      	lsrs	r7, r2, #16
 8000e90:	46bc      	mov	ip, r7
 8000e92:	199b      	adds	r3, r3, r6
 8000e94:	4463      	add	r3, ip
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d903      	bls.n	8000ea2 <__aeabi_ddiv+0x326>
 8000e9a:	2680      	movs	r6, #128	; 0x80
 8000e9c:	0276      	lsls	r6, r6, #9
 8000e9e:	46b4      	mov	ip, r6
 8000ea0:	4460      	add	r0, ip
 8000ea2:	0c1e      	lsrs	r6, r3, #16
 8000ea4:	1830      	adds	r0, r6, r0
 8000ea6:	0416      	lsls	r6, r2, #16
 8000ea8:	041b      	lsls	r3, r3, #16
 8000eaa:	0c36      	lsrs	r6, r6, #16
 8000eac:	199e      	adds	r6, r3, r6
 8000eae:	4281      	cmp	r1, r0
 8000eb0:	d200      	bcs.n	8000eb4 <__aeabi_ddiv+0x338>
 8000eb2:	e09c      	b.n	8000fee <__aeabi_ddiv+0x472>
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_ddiv+0x33c>
 8000eb6:	e097      	b.n	8000fe8 <__aeabi_ddiv+0x46c>
 8000eb8:	1bae      	subs	r6, r5, r6
 8000eba:	1a09      	subs	r1, r1, r0
 8000ebc:	42b5      	cmp	r5, r6
 8000ebe:	4180      	sbcs	r0, r0
 8000ec0:	4240      	negs	r0, r0
 8000ec2:	1a08      	subs	r0, r1, r0
 8000ec4:	4284      	cmp	r4, r0
 8000ec6:	d100      	bne.n	8000eca <__aeabi_ddiv+0x34e>
 8000ec8:	e111      	b.n	80010ee <__aeabi_ddiv+0x572>
 8000eca:	4649      	mov	r1, r9
 8000ecc:	f7ff f9a0 	bl	8000210 <__aeabi_uidivmod>
 8000ed0:	9a01      	ldr	r2, [sp, #4]
 8000ed2:	040b      	lsls	r3, r1, #16
 8000ed4:	4342      	muls	r2, r0
 8000ed6:	0c31      	lsrs	r1, r6, #16
 8000ed8:	0005      	movs	r5, r0
 8000eda:	4319      	orrs	r1, r3
 8000edc:	428a      	cmp	r2, r1
 8000ede:	d907      	bls.n	8000ef0 <__aeabi_ddiv+0x374>
 8000ee0:	1909      	adds	r1, r1, r4
 8000ee2:	3d01      	subs	r5, #1
 8000ee4:	428c      	cmp	r4, r1
 8000ee6:	d803      	bhi.n	8000ef0 <__aeabi_ddiv+0x374>
 8000ee8:	428a      	cmp	r2, r1
 8000eea:	d901      	bls.n	8000ef0 <__aeabi_ddiv+0x374>
 8000eec:	1e85      	subs	r5, r0, #2
 8000eee:	1909      	adds	r1, r1, r4
 8000ef0:	1a88      	subs	r0, r1, r2
 8000ef2:	4649      	mov	r1, r9
 8000ef4:	f7ff f98c 	bl	8000210 <__aeabi_uidivmod>
 8000ef8:	0409      	lsls	r1, r1, #16
 8000efa:	468c      	mov	ip, r1
 8000efc:	0431      	lsls	r1, r6, #16
 8000efe:	4666      	mov	r6, ip
 8000f00:	9a01      	ldr	r2, [sp, #4]
 8000f02:	0c09      	lsrs	r1, r1, #16
 8000f04:	4342      	muls	r2, r0
 8000f06:	0003      	movs	r3, r0
 8000f08:	4331      	orrs	r1, r6
 8000f0a:	428a      	cmp	r2, r1
 8000f0c:	d907      	bls.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f0e:	1909      	adds	r1, r1, r4
 8000f10:	3b01      	subs	r3, #1
 8000f12:	428c      	cmp	r4, r1
 8000f14:	d803      	bhi.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f16:	428a      	cmp	r2, r1
 8000f18:	d901      	bls.n	8000f1e <__aeabi_ddiv+0x3a2>
 8000f1a:	1e83      	subs	r3, r0, #2
 8000f1c:	1909      	adds	r1, r1, r4
 8000f1e:	9e03      	ldr	r6, [sp, #12]
 8000f20:	1a89      	subs	r1, r1, r2
 8000f22:	0032      	movs	r2, r6
 8000f24:	042d      	lsls	r5, r5, #16
 8000f26:	431d      	orrs	r5, r3
 8000f28:	9f02      	ldr	r7, [sp, #8]
 8000f2a:	042b      	lsls	r3, r5, #16
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	435a      	muls	r2, r3
 8000f30:	437b      	muls	r3, r7
 8000f32:	469c      	mov	ip, r3
 8000f34:	0c28      	lsrs	r0, r5, #16
 8000f36:	4346      	muls	r6, r0
 8000f38:	0c13      	lsrs	r3, r2, #16
 8000f3a:	44b4      	add	ip, r6
 8000f3c:	4463      	add	r3, ip
 8000f3e:	4378      	muls	r0, r7
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d903      	bls.n	8000f4c <__aeabi_ddiv+0x3d0>
 8000f44:	2680      	movs	r6, #128	; 0x80
 8000f46:	0276      	lsls	r6, r6, #9
 8000f48:	46b4      	mov	ip, r6
 8000f4a:	4460      	add	r0, ip
 8000f4c:	0c1e      	lsrs	r6, r3, #16
 8000f4e:	0412      	lsls	r2, r2, #16
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	0c12      	lsrs	r2, r2, #16
 8000f54:	1830      	adds	r0, r6, r0
 8000f56:	189b      	adds	r3, r3, r2
 8000f58:	4281      	cmp	r1, r0
 8000f5a:	d306      	bcc.n	8000f6a <__aeabi_ddiv+0x3ee>
 8000f5c:	d002      	beq.n	8000f64 <__aeabi_ddiv+0x3e8>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	431d      	orrs	r5, r3
 8000f62:	e6ce      	b.n	8000d02 <__aeabi_ddiv+0x186>
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_ddiv+0x3ee>
 8000f68:	e6cb      	b.n	8000d02 <__aeabi_ddiv+0x186>
 8000f6a:	1861      	adds	r1, r4, r1
 8000f6c:	1e6e      	subs	r6, r5, #1
 8000f6e:	42a1      	cmp	r1, r4
 8000f70:	d200      	bcs.n	8000f74 <__aeabi_ddiv+0x3f8>
 8000f72:	e0a4      	b.n	80010be <__aeabi_ddiv+0x542>
 8000f74:	4281      	cmp	r1, r0
 8000f76:	d200      	bcs.n	8000f7a <__aeabi_ddiv+0x3fe>
 8000f78:	e0c9      	b.n	800110e <__aeabi_ddiv+0x592>
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_ddiv+0x402>
 8000f7c:	e0d9      	b.n	8001132 <__aeabi_ddiv+0x5b6>
 8000f7e:	0035      	movs	r5, r6
 8000f80:	e7ed      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 8000f82:	2501      	movs	r5, #1
 8000f84:	426d      	negs	r5, r5
 8000f86:	2101      	movs	r1, #1
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	2938      	cmp	r1, #56	; 0x38
 8000f8c:	dd00      	ble.n	8000f90 <__aeabi_ddiv+0x414>
 8000f8e:	e64c      	b.n	8000c2a <__aeabi_ddiv+0xae>
 8000f90:	291f      	cmp	r1, #31
 8000f92:	dc00      	bgt.n	8000f96 <__aeabi_ddiv+0x41a>
 8000f94:	e07f      	b.n	8001096 <__aeabi_ddiv+0x51a>
 8000f96:	231f      	movs	r3, #31
 8000f98:	425b      	negs	r3, r3
 8000f9a:	1a9a      	subs	r2, r3, r2
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	40d3      	lsrs	r3, r2
 8000fa0:	2920      	cmp	r1, #32
 8000fa2:	d004      	beq.n	8000fae <__aeabi_ddiv+0x432>
 8000fa4:	4644      	mov	r4, r8
 8000fa6:	4a65      	ldr	r2, [pc, #404]	; (800113c <__aeabi_ddiv+0x5c0>)
 8000fa8:	445a      	add	r2, fp
 8000faa:	4094      	lsls	r4, r2
 8000fac:	4325      	orrs	r5, r4
 8000fae:	1e6a      	subs	r2, r5, #1
 8000fb0:	4195      	sbcs	r5, r2
 8000fb2:	2207      	movs	r2, #7
 8000fb4:	432b      	orrs	r3, r5
 8000fb6:	0015      	movs	r5, r2
 8000fb8:	2400      	movs	r4, #0
 8000fba:	401d      	ands	r5, r3
 8000fbc:	421a      	tst	r2, r3
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x446>
 8000fc0:	e0a1      	b.n	8001106 <__aeabi_ddiv+0x58a>
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	2400      	movs	r4, #0
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	2a04      	cmp	r2, #4
 8000fca:	d100      	bne.n	8000fce <__aeabi_ddiv+0x452>
 8000fcc:	e098      	b.n	8001100 <__aeabi_ddiv+0x584>
 8000fce:	1d1a      	adds	r2, r3, #4
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	419b      	sbcs	r3, r3
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	18e4      	adds	r4, r4, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	0222      	lsls	r2, r4, #8
 8000fdc:	d400      	bmi.n	8000fe0 <__aeabi_ddiv+0x464>
 8000fde:	e08f      	b.n	8001100 <__aeabi_ddiv+0x584>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	e623      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8000fe8:	42b5      	cmp	r5, r6
 8000fea:	d300      	bcc.n	8000fee <__aeabi_ddiv+0x472>
 8000fec:	e764      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 8000fee:	4643      	mov	r3, r8
 8000ff0:	1e5a      	subs	r2, r3, #1
 8000ff2:	9b00      	ldr	r3, [sp, #0]
 8000ff4:	469c      	mov	ip, r3
 8000ff6:	4465      	add	r5, ip
 8000ff8:	001f      	movs	r7, r3
 8000ffa:	429d      	cmp	r5, r3
 8000ffc:	419b      	sbcs	r3, r3
 8000ffe:	425b      	negs	r3, r3
 8001000:	191b      	adds	r3, r3, r4
 8001002:	18c9      	adds	r1, r1, r3
 8001004:	428c      	cmp	r4, r1
 8001006:	d23a      	bcs.n	800107e <__aeabi_ddiv+0x502>
 8001008:	4288      	cmp	r0, r1
 800100a:	d863      	bhi.n	80010d4 <__aeabi_ddiv+0x558>
 800100c:	d060      	beq.n	80010d0 <__aeabi_ddiv+0x554>
 800100e:	4690      	mov	r8, r2
 8001010:	e752      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 8001012:	42aa      	cmp	r2, r5
 8001014:	d900      	bls.n	8001018 <__aeabi_ddiv+0x49c>
 8001016:	e6ea      	b.n	8000dee <__aeabi_ddiv+0x272>
 8001018:	4643      	mov	r3, r8
 800101a:	07de      	lsls	r6, r3, #31
 800101c:	0858      	lsrs	r0, r3, #1
 800101e:	086b      	lsrs	r3, r5, #1
 8001020:	431e      	orrs	r6, r3
 8001022:	07ed      	lsls	r5, r5, #31
 8001024:	e6ea      	b.n	8000dfc <__aeabi_ddiv+0x280>
 8001026:	4648      	mov	r0, r9
 8001028:	f001 f838 	bl	800209c <__clzsi2>
 800102c:	0001      	movs	r1, r0
 800102e:	0002      	movs	r2, r0
 8001030:	3115      	adds	r1, #21
 8001032:	3220      	adds	r2, #32
 8001034:	291c      	cmp	r1, #28
 8001036:	dc00      	bgt.n	800103a <__aeabi_ddiv+0x4be>
 8001038:	e61a      	b.n	8000c70 <__aeabi_ddiv+0xf4>
 800103a:	464b      	mov	r3, r9
 800103c:	3808      	subs	r0, #8
 800103e:	4083      	lsls	r3, r0
 8001040:	2500      	movs	r5, #0
 8001042:	4698      	mov	r8, r3
 8001044:	e620      	b.n	8000c88 <__aeabi_ddiv+0x10c>
 8001046:	f001 f829 	bl	800209c <__clzsi2>
 800104a:	0003      	movs	r3, r0
 800104c:	001a      	movs	r2, r3
 800104e:	3215      	adds	r2, #21
 8001050:	3020      	adds	r0, #32
 8001052:	2a1c      	cmp	r2, #28
 8001054:	dc00      	bgt.n	8001058 <__aeabi_ddiv+0x4dc>
 8001056:	e630      	b.n	8000cba <__aeabi_ddiv+0x13e>
 8001058:	4654      	mov	r4, sl
 800105a:	3b08      	subs	r3, #8
 800105c:	2200      	movs	r2, #0
 800105e:	409c      	lsls	r4, r3
 8001060:	e635      	b.n	8000cce <__aeabi_ddiv+0x152>
 8001062:	230f      	movs	r3, #15
 8001064:	402b      	ands	r3, r5
 8001066:	2b04      	cmp	r3, #4
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x4f0>
 800106a:	e652      	b.n	8000d12 <__aeabi_ddiv+0x196>
 800106c:	2305      	movs	r3, #5
 800106e:	425b      	negs	r3, r3
 8001070:	42ab      	cmp	r3, r5
 8001072:	419b      	sbcs	r3, r3
 8001074:	3504      	adds	r5, #4
 8001076:	425b      	negs	r3, r3
 8001078:	08ed      	lsrs	r5, r5, #3
 800107a:	4498      	add	r8, r3
 800107c:	e64a      	b.n	8000d14 <__aeabi_ddiv+0x198>
 800107e:	428c      	cmp	r4, r1
 8001080:	d1c5      	bne.n	800100e <__aeabi_ddiv+0x492>
 8001082:	42af      	cmp	r7, r5
 8001084:	d9c0      	bls.n	8001008 <__aeabi_ddiv+0x48c>
 8001086:	4690      	mov	r8, r2
 8001088:	e716      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 800108a:	428a      	cmp	r2, r1
 800108c:	d800      	bhi.n	8001090 <__aeabi_ddiv+0x514>
 800108e:	e6ea      	b.n	8000e66 <__aeabi_ddiv+0x2ea>
 8001090:	1e83      	subs	r3, r0, #2
 8001092:	1909      	adds	r1, r1, r4
 8001094:	e6e7      	b.n	8000e66 <__aeabi_ddiv+0x2ea>
 8001096:	4a2a      	ldr	r2, [pc, #168]	; (8001140 <__aeabi_ddiv+0x5c4>)
 8001098:	0028      	movs	r0, r5
 800109a:	445a      	add	r2, fp
 800109c:	4643      	mov	r3, r8
 800109e:	4095      	lsls	r5, r2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	40c8      	lsrs	r0, r1
 80010a4:	1e6a      	subs	r2, r5, #1
 80010a6:	4195      	sbcs	r5, r2
 80010a8:	4644      	mov	r4, r8
 80010aa:	4303      	orrs	r3, r0
 80010ac:	432b      	orrs	r3, r5
 80010ae:	40cc      	lsrs	r4, r1
 80010b0:	075a      	lsls	r2, r3, #29
 80010b2:	d092      	beq.n	8000fda <__aeabi_ddiv+0x45e>
 80010b4:	220f      	movs	r2, #15
 80010b6:	401a      	ands	r2, r3
 80010b8:	2a04      	cmp	r2, #4
 80010ba:	d188      	bne.n	8000fce <__aeabi_ddiv+0x452>
 80010bc:	e78d      	b.n	8000fda <__aeabi_ddiv+0x45e>
 80010be:	0035      	movs	r5, r6
 80010c0:	4281      	cmp	r1, r0
 80010c2:	d000      	beq.n	80010c6 <__aeabi_ddiv+0x54a>
 80010c4:	e74b      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 80010c6:	9a00      	ldr	r2, [sp, #0]
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d000      	beq.n	80010ce <__aeabi_ddiv+0x552>
 80010cc:	e747      	b.n	8000f5e <__aeabi_ddiv+0x3e2>
 80010ce:	e618      	b.n	8000d02 <__aeabi_ddiv+0x186>
 80010d0:	42ae      	cmp	r6, r5
 80010d2:	d99c      	bls.n	800100e <__aeabi_ddiv+0x492>
 80010d4:	2302      	movs	r3, #2
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	9b00      	ldr	r3, [sp, #0]
 80010dc:	44e0      	add	r8, ip
 80010de:	469c      	mov	ip, r3
 80010e0:	4465      	add	r5, ip
 80010e2:	429d      	cmp	r5, r3
 80010e4:	419b      	sbcs	r3, r3
 80010e6:	425b      	negs	r3, r3
 80010e8:	191b      	adds	r3, r3, r4
 80010ea:	18c9      	adds	r1, r1, r3
 80010ec:	e6e4      	b.n	8000eb8 <__aeabi_ddiv+0x33c>
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <__aeabi_ddiv+0x5c8>)
 80010f0:	445a      	add	r2, fp
 80010f2:	2a00      	cmp	r2, #0
 80010f4:	dc00      	bgt.n	80010f8 <__aeabi_ddiv+0x57c>
 80010f6:	e744      	b.n	8000f82 <__aeabi_ddiv+0x406>
 80010f8:	2301      	movs	r3, #1
 80010fa:	2500      	movs	r5, #0
 80010fc:	4498      	add	r8, r3
 80010fe:	e609      	b.n	8000d14 <__aeabi_ddiv+0x198>
 8001100:	0765      	lsls	r5, r4, #29
 8001102:	0264      	lsls	r4, r4, #9
 8001104:	0b24      	lsrs	r4, r4, #12
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	431d      	orrs	r5, r3
 800110a:	2300      	movs	r3, #0
 800110c:	e590      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 800110e:	9e00      	ldr	r6, [sp, #0]
 8001110:	3d02      	subs	r5, #2
 8001112:	0072      	lsls	r2, r6, #1
 8001114:	42b2      	cmp	r2, r6
 8001116:	41bf      	sbcs	r7, r7
 8001118:	427f      	negs	r7, r7
 800111a:	193c      	adds	r4, r7, r4
 800111c:	1909      	adds	r1, r1, r4
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	e7ce      	b.n	80010c0 <__aeabi_ddiv+0x544>
 8001122:	2480      	movs	r4, #128	; 0x80
 8001124:	4643      	mov	r3, r8
 8001126:	0324      	lsls	r4, r4, #12
 8001128:	431c      	orrs	r4, r3
 800112a:	0324      	lsls	r4, r4, #12
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <__aeabi_ddiv+0x5cc>)
 800112e:	0b24      	lsrs	r4, r4, #12
 8001130:	e57e      	b.n	8000c30 <__aeabi_ddiv+0xb4>
 8001132:	9a00      	ldr	r2, [sp, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d3ea      	bcc.n	800110e <__aeabi_ddiv+0x592>
 8001138:	0035      	movs	r5, r6
 800113a:	e7c4      	b.n	80010c6 <__aeabi_ddiv+0x54a>
 800113c:	0000043e 	.word	0x0000043e
 8001140:	0000041e 	.word	0x0000041e
 8001144:	000003ff 	.word	0x000003ff
 8001148:	000007ff 	.word	0x000007ff

0800114c <__eqdf2>:
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	464f      	mov	r7, r9
 8001150:	4646      	mov	r6, r8
 8001152:	46d6      	mov	lr, sl
 8001154:	4694      	mov	ip, r2
 8001156:	4691      	mov	r9, r2
 8001158:	031a      	lsls	r2, r3, #12
 800115a:	0b12      	lsrs	r2, r2, #12
 800115c:	4d18      	ldr	r5, [pc, #96]	; (80011c0 <__eqdf2+0x74>)
 800115e:	b5c0      	push	{r6, r7, lr}
 8001160:	004c      	lsls	r4, r1, #1
 8001162:	030f      	lsls	r7, r1, #12
 8001164:	4692      	mov	sl, r2
 8001166:	005a      	lsls	r2, r3, #1
 8001168:	0006      	movs	r6, r0
 800116a:	4680      	mov	r8, r0
 800116c:	0b3f      	lsrs	r7, r7, #12
 800116e:	2001      	movs	r0, #1
 8001170:	0d64      	lsrs	r4, r4, #21
 8001172:	0fc9      	lsrs	r1, r1, #31
 8001174:	0d52      	lsrs	r2, r2, #21
 8001176:	0fdb      	lsrs	r3, r3, #31
 8001178:	42ac      	cmp	r4, r5
 800117a:	d00a      	beq.n	8001192 <__eqdf2+0x46>
 800117c:	42aa      	cmp	r2, r5
 800117e:	d003      	beq.n	8001188 <__eqdf2+0x3c>
 8001180:	4294      	cmp	r4, r2
 8001182:	d101      	bne.n	8001188 <__eqdf2+0x3c>
 8001184:	4557      	cmp	r7, sl
 8001186:	d00d      	beq.n	80011a4 <__eqdf2+0x58>
 8001188:	bce0      	pop	{r5, r6, r7}
 800118a:	46ba      	mov	sl, r7
 800118c:	46b1      	mov	r9, r6
 800118e:	46a8      	mov	r8, r5
 8001190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001192:	003d      	movs	r5, r7
 8001194:	4335      	orrs	r5, r6
 8001196:	d1f7      	bne.n	8001188 <__eqdf2+0x3c>
 8001198:	42a2      	cmp	r2, r4
 800119a:	d1f5      	bne.n	8001188 <__eqdf2+0x3c>
 800119c:	4652      	mov	r2, sl
 800119e:	4665      	mov	r5, ip
 80011a0:	432a      	orrs	r2, r5
 80011a2:	d1f1      	bne.n	8001188 <__eqdf2+0x3c>
 80011a4:	2001      	movs	r0, #1
 80011a6:	45c8      	cmp	r8, r9
 80011a8:	d1ee      	bne.n	8001188 <__eqdf2+0x3c>
 80011aa:	4299      	cmp	r1, r3
 80011ac:	d006      	beq.n	80011bc <__eqdf2+0x70>
 80011ae:	2c00      	cmp	r4, #0
 80011b0:	d1ea      	bne.n	8001188 <__eqdf2+0x3c>
 80011b2:	433e      	orrs	r6, r7
 80011b4:	0030      	movs	r0, r6
 80011b6:	1e46      	subs	r6, r0, #1
 80011b8:	41b0      	sbcs	r0, r6
 80011ba:	e7e5      	b.n	8001188 <__eqdf2+0x3c>
 80011bc:	2000      	movs	r0, #0
 80011be:	e7e3      	b.n	8001188 <__eqdf2+0x3c>
 80011c0:	000007ff 	.word	0x000007ff

080011c4 <__gedf2>:
 80011c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c6:	464e      	mov	r6, r9
 80011c8:	4645      	mov	r5, r8
 80011ca:	4657      	mov	r7, sl
 80011cc:	46de      	mov	lr, fp
 80011ce:	0004      	movs	r4, r0
 80011d0:	0018      	movs	r0, r3
 80011d2:	b5e0      	push	{r5, r6, r7, lr}
 80011d4:	0016      	movs	r6, r2
 80011d6:	031b      	lsls	r3, r3, #12
 80011d8:	0b1b      	lsrs	r3, r3, #12
 80011da:	4d32      	ldr	r5, [pc, #200]	; (80012a4 <__gedf2+0xe0>)
 80011dc:	030f      	lsls	r7, r1, #12
 80011de:	004a      	lsls	r2, r1, #1
 80011e0:	4699      	mov	r9, r3
 80011e2:	0043      	lsls	r3, r0, #1
 80011e4:	46a4      	mov	ip, r4
 80011e6:	46b0      	mov	r8, r6
 80011e8:	0b3f      	lsrs	r7, r7, #12
 80011ea:	0d52      	lsrs	r2, r2, #21
 80011ec:	0fc9      	lsrs	r1, r1, #31
 80011ee:	0d5b      	lsrs	r3, r3, #21
 80011f0:	0fc0      	lsrs	r0, r0, #31
 80011f2:	42aa      	cmp	r2, r5
 80011f4:	d029      	beq.n	800124a <__gedf2+0x86>
 80011f6:	42ab      	cmp	r3, r5
 80011f8:	d018      	beq.n	800122c <__gedf2+0x68>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d12a      	bne.n	8001254 <__gedf2+0x90>
 80011fe:	433c      	orrs	r4, r7
 8001200:	46a3      	mov	fp, r4
 8001202:	4265      	negs	r5, r4
 8001204:	4165      	adcs	r5, r4
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <__gedf2+0x4c>
 800120a:	464c      	mov	r4, r9
 800120c:	4326      	orrs	r6, r4
 800120e:	d027      	beq.n	8001260 <__gedf2+0x9c>
 8001210:	2d00      	cmp	r5, #0
 8001212:	d115      	bne.n	8001240 <__gedf2+0x7c>
 8001214:	4281      	cmp	r1, r0
 8001216:	d028      	beq.n	800126a <__gedf2+0xa6>
 8001218:	2002      	movs	r0, #2
 800121a:	3901      	subs	r1, #1
 800121c:	4008      	ands	r0, r1
 800121e:	3801      	subs	r0, #1
 8001220:	bcf0      	pop	{r4, r5, r6, r7}
 8001222:	46bb      	mov	fp, r7
 8001224:	46b2      	mov	sl, r6
 8001226:	46a9      	mov	r9, r5
 8001228:	46a0      	mov	r8, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	464d      	mov	r5, r9
 800122e:	432e      	orrs	r6, r5
 8001230:	d12f      	bne.n	8001292 <__gedf2+0xce>
 8001232:	2a00      	cmp	r2, #0
 8001234:	d1ee      	bne.n	8001214 <__gedf2+0x50>
 8001236:	433c      	orrs	r4, r7
 8001238:	4265      	negs	r5, r4
 800123a:	4165      	adcs	r5, r4
 800123c:	2d00      	cmp	r5, #0
 800123e:	d0e9      	beq.n	8001214 <__gedf2+0x50>
 8001240:	2800      	cmp	r0, #0
 8001242:	d1ed      	bne.n	8001220 <__gedf2+0x5c>
 8001244:	2001      	movs	r0, #1
 8001246:	4240      	negs	r0, r0
 8001248:	e7ea      	b.n	8001220 <__gedf2+0x5c>
 800124a:	003d      	movs	r5, r7
 800124c:	4325      	orrs	r5, r4
 800124e:	d120      	bne.n	8001292 <__gedf2+0xce>
 8001250:	4293      	cmp	r3, r2
 8001252:	d0eb      	beq.n	800122c <__gedf2+0x68>
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1dd      	bne.n	8001214 <__gedf2+0x50>
 8001258:	464c      	mov	r4, r9
 800125a:	4326      	orrs	r6, r4
 800125c:	d1da      	bne.n	8001214 <__gedf2+0x50>
 800125e:	e7db      	b.n	8001218 <__gedf2+0x54>
 8001260:	465b      	mov	r3, fp
 8001262:	2000      	movs	r0, #0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0db      	beq.n	8001220 <__gedf2+0x5c>
 8001268:	e7d6      	b.n	8001218 <__gedf2+0x54>
 800126a:	429a      	cmp	r2, r3
 800126c:	dc0a      	bgt.n	8001284 <__gedf2+0xc0>
 800126e:	dbe7      	blt.n	8001240 <__gedf2+0x7c>
 8001270:	454f      	cmp	r7, r9
 8001272:	d8d1      	bhi.n	8001218 <__gedf2+0x54>
 8001274:	d010      	beq.n	8001298 <__gedf2+0xd4>
 8001276:	2000      	movs	r0, #0
 8001278:	454f      	cmp	r7, r9
 800127a:	d2d1      	bcs.n	8001220 <__gedf2+0x5c>
 800127c:	2900      	cmp	r1, #0
 800127e:	d0e1      	beq.n	8001244 <__gedf2+0x80>
 8001280:	0008      	movs	r0, r1
 8001282:	e7cd      	b.n	8001220 <__gedf2+0x5c>
 8001284:	4243      	negs	r3, r0
 8001286:	4158      	adcs	r0, r3
 8001288:	2302      	movs	r3, #2
 800128a:	4240      	negs	r0, r0
 800128c:	4018      	ands	r0, r3
 800128e:	3801      	subs	r0, #1
 8001290:	e7c6      	b.n	8001220 <__gedf2+0x5c>
 8001292:	2002      	movs	r0, #2
 8001294:	4240      	negs	r0, r0
 8001296:	e7c3      	b.n	8001220 <__gedf2+0x5c>
 8001298:	45c4      	cmp	ip, r8
 800129a:	d8bd      	bhi.n	8001218 <__gedf2+0x54>
 800129c:	2000      	movs	r0, #0
 800129e:	45c4      	cmp	ip, r8
 80012a0:	d2be      	bcs.n	8001220 <__gedf2+0x5c>
 80012a2:	e7eb      	b.n	800127c <__gedf2+0xb8>
 80012a4:	000007ff 	.word	0x000007ff

080012a8 <__ledf2>:
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	464e      	mov	r6, r9
 80012ac:	4645      	mov	r5, r8
 80012ae:	4657      	mov	r7, sl
 80012b0:	46de      	mov	lr, fp
 80012b2:	0004      	movs	r4, r0
 80012b4:	0018      	movs	r0, r3
 80012b6:	b5e0      	push	{r5, r6, r7, lr}
 80012b8:	0016      	movs	r6, r2
 80012ba:	031b      	lsls	r3, r3, #12
 80012bc:	0b1b      	lsrs	r3, r3, #12
 80012be:	4d31      	ldr	r5, [pc, #196]	; (8001384 <__ledf2+0xdc>)
 80012c0:	030f      	lsls	r7, r1, #12
 80012c2:	004a      	lsls	r2, r1, #1
 80012c4:	4699      	mov	r9, r3
 80012c6:	0043      	lsls	r3, r0, #1
 80012c8:	46a4      	mov	ip, r4
 80012ca:	46b0      	mov	r8, r6
 80012cc:	0b3f      	lsrs	r7, r7, #12
 80012ce:	0d52      	lsrs	r2, r2, #21
 80012d0:	0fc9      	lsrs	r1, r1, #31
 80012d2:	0d5b      	lsrs	r3, r3, #21
 80012d4:	0fc0      	lsrs	r0, r0, #31
 80012d6:	42aa      	cmp	r2, r5
 80012d8:	d011      	beq.n	80012fe <__ledf2+0x56>
 80012da:	42ab      	cmp	r3, r5
 80012dc:	d014      	beq.n	8001308 <__ledf2+0x60>
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d12f      	bne.n	8001342 <__ledf2+0x9a>
 80012e2:	433c      	orrs	r4, r7
 80012e4:	46a3      	mov	fp, r4
 80012e6:	4265      	negs	r5, r4
 80012e8:	4165      	adcs	r5, r4
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d114      	bne.n	8001318 <__ledf2+0x70>
 80012ee:	464c      	mov	r4, r9
 80012f0:	4326      	orrs	r6, r4
 80012f2:	d111      	bne.n	8001318 <__ledf2+0x70>
 80012f4:	465b      	mov	r3, fp
 80012f6:	2000      	movs	r0, #0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d017      	beq.n	800132c <__ledf2+0x84>
 80012fc:	e010      	b.n	8001320 <__ledf2+0x78>
 80012fe:	003d      	movs	r5, r7
 8001300:	4325      	orrs	r5, r4
 8001302:	d112      	bne.n	800132a <__ledf2+0x82>
 8001304:	4293      	cmp	r3, r2
 8001306:	d11c      	bne.n	8001342 <__ledf2+0x9a>
 8001308:	464d      	mov	r5, r9
 800130a:	432e      	orrs	r6, r5
 800130c:	d10d      	bne.n	800132a <__ledf2+0x82>
 800130e:	2a00      	cmp	r2, #0
 8001310:	d104      	bne.n	800131c <__ledf2+0x74>
 8001312:	433c      	orrs	r4, r7
 8001314:	4265      	negs	r5, r4
 8001316:	4165      	adcs	r5, r4
 8001318:	2d00      	cmp	r5, #0
 800131a:	d10d      	bne.n	8001338 <__ledf2+0x90>
 800131c:	4281      	cmp	r1, r0
 800131e:	d016      	beq.n	800134e <__ledf2+0xa6>
 8001320:	2002      	movs	r0, #2
 8001322:	3901      	subs	r1, #1
 8001324:	4008      	ands	r0, r1
 8001326:	3801      	subs	r0, #1
 8001328:	e000      	b.n	800132c <__ledf2+0x84>
 800132a:	2002      	movs	r0, #2
 800132c:	bcf0      	pop	{r4, r5, r6, r7}
 800132e:	46bb      	mov	fp, r7
 8001330:	46b2      	mov	sl, r6
 8001332:	46a9      	mov	r9, r5
 8001334:	46a0      	mov	r8, r4
 8001336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001338:	2800      	cmp	r0, #0
 800133a:	d1f7      	bne.n	800132c <__ledf2+0x84>
 800133c:	2001      	movs	r0, #1
 800133e:	4240      	negs	r0, r0
 8001340:	e7f4      	b.n	800132c <__ledf2+0x84>
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1ea      	bne.n	800131c <__ledf2+0x74>
 8001346:	464c      	mov	r4, r9
 8001348:	4326      	orrs	r6, r4
 800134a:	d1e7      	bne.n	800131c <__ledf2+0x74>
 800134c:	e7e8      	b.n	8001320 <__ledf2+0x78>
 800134e:	429a      	cmp	r2, r3
 8001350:	dd06      	ble.n	8001360 <__ledf2+0xb8>
 8001352:	4243      	negs	r3, r0
 8001354:	4158      	adcs	r0, r3
 8001356:	2302      	movs	r3, #2
 8001358:	4240      	negs	r0, r0
 800135a:	4018      	ands	r0, r3
 800135c:	3801      	subs	r0, #1
 800135e:	e7e5      	b.n	800132c <__ledf2+0x84>
 8001360:	429a      	cmp	r2, r3
 8001362:	dbe9      	blt.n	8001338 <__ledf2+0x90>
 8001364:	454f      	cmp	r7, r9
 8001366:	d8db      	bhi.n	8001320 <__ledf2+0x78>
 8001368:	d006      	beq.n	8001378 <__ledf2+0xd0>
 800136a:	2000      	movs	r0, #0
 800136c:	454f      	cmp	r7, r9
 800136e:	d2dd      	bcs.n	800132c <__ledf2+0x84>
 8001370:	2900      	cmp	r1, #0
 8001372:	d0e3      	beq.n	800133c <__ledf2+0x94>
 8001374:	0008      	movs	r0, r1
 8001376:	e7d9      	b.n	800132c <__ledf2+0x84>
 8001378:	45c4      	cmp	ip, r8
 800137a:	d8d1      	bhi.n	8001320 <__ledf2+0x78>
 800137c:	2000      	movs	r0, #0
 800137e:	45c4      	cmp	ip, r8
 8001380:	d2d4      	bcs.n	800132c <__ledf2+0x84>
 8001382:	e7f5      	b.n	8001370 <__ledf2+0xc8>
 8001384:	000007ff 	.word	0x000007ff

08001388 <__aeabi_dmul>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	4657      	mov	r7, sl
 800138c:	464e      	mov	r6, r9
 800138e:	4645      	mov	r5, r8
 8001390:	46de      	mov	lr, fp
 8001392:	b5e0      	push	{r5, r6, r7, lr}
 8001394:	4698      	mov	r8, r3
 8001396:	030c      	lsls	r4, r1, #12
 8001398:	004b      	lsls	r3, r1, #1
 800139a:	0006      	movs	r6, r0
 800139c:	4692      	mov	sl, r2
 800139e:	b087      	sub	sp, #28
 80013a0:	0b24      	lsrs	r4, r4, #12
 80013a2:	0d5b      	lsrs	r3, r3, #21
 80013a4:	0fcf      	lsrs	r7, r1, #31
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d06c      	beq.n	8001484 <__aeabi_dmul+0xfc>
 80013aa:	4add      	ldr	r2, [pc, #884]	; (8001720 <__aeabi_dmul+0x398>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d100      	bne.n	80013b2 <__aeabi_dmul+0x2a>
 80013b0:	e086      	b.n	80014c0 <__aeabi_dmul+0x138>
 80013b2:	0f42      	lsrs	r2, r0, #29
 80013b4:	00e4      	lsls	r4, r4, #3
 80013b6:	4314      	orrs	r4, r2
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	0412      	lsls	r2, r2, #16
 80013bc:	4314      	orrs	r4, r2
 80013be:	4ad9      	ldr	r2, [pc, #868]	; (8001724 <__aeabi_dmul+0x39c>)
 80013c0:	00c5      	lsls	r5, r0, #3
 80013c2:	4694      	mov	ip, r2
 80013c4:	4463      	add	r3, ip
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	4699      	mov	r9, r3
 80013cc:	469b      	mov	fp, r3
 80013ce:	4643      	mov	r3, r8
 80013d0:	4642      	mov	r2, r8
 80013d2:	031e      	lsls	r6, r3, #12
 80013d4:	0fd2      	lsrs	r2, r2, #31
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4650      	mov	r0, sl
 80013da:	4690      	mov	r8, r2
 80013dc:	0b36      	lsrs	r6, r6, #12
 80013de:	0d5b      	lsrs	r3, r3, #21
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dmul+0x5c>
 80013e2:	e078      	b.n	80014d6 <__aeabi_dmul+0x14e>
 80013e4:	4ace      	ldr	r2, [pc, #824]	; (8001720 <__aeabi_dmul+0x398>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d01d      	beq.n	8001426 <__aeabi_dmul+0x9e>
 80013ea:	49ce      	ldr	r1, [pc, #824]	; (8001724 <__aeabi_dmul+0x39c>)
 80013ec:	0f42      	lsrs	r2, r0, #29
 80013ee:	468c      	mov	ip, r1
 80013f0:	9900      	ldr	r1, [sp, #0]
 80013f2:	4463      	add	r3, ip
 80013f4:	00f6      	lsls	r6, r6, #3
 80013f6:	468c      	mov	ip, r1
 80013f8:	4316      	orrs	r6, r2
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	449c      	add	ip, r3
 80013fe:	0412      	lsls	r2, r2, #16
 8001400:	4663      	mov	r3, ip
 8001402:	4316      	orrs	r6, r2
 8001404:	00c2      	lsls	r2, r0, #3
 8001406:	2000      	movs	r0, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	9900      	ldr	r1, [sp, #0]
 800140c:	4643      	mov	r3, r8
 800140e:	3101      	adds	r1, #1
 8001410:	468c      	mov	ip, r1
 8001412:	4649      	mov	r1, r9
 8001414:	407b      	eors	r3, r7
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	290f      	cmp	r1, #15
 800141a:	d900      	bls.n	800141e <__aeabi_dmul+0x96>
 800141c:	e07e      	b.n	800151c <__aeabi_dmul+0x194>
 800141e:	4bc2      	ldr	r3, [pc, #776]	; (8001728 <__aeabi_dmul+0x3a0>)
 8001420:	0089      	lsls	r1, r1, #2
 8001422:	5859      	ldr	r1, [r3, r1]
 8001424:	468f      	mov	pc, r1
 8001426:	4652      	mov	r2, sl
 8001428:	9b00      	ldr	r3, [sp, #0]
 800142a:	4332      	orrs	r2, r6
 800142c:	d000      	beq.n	8001430 <__aeabi_dmul+0xa8>
 800142e:	e156      	b.n	80016de <__aeabi_dmul+0x356>
 8001430:	49bb      	ldr	r1, [pc, #748]	; (8001720 <__aeabi_dmul+0x398>)
 8001432:	2600      	movs	r6, #0
 8001434:	468c      	mov	ip, r1
 8001436:	4463      	add	r3, ip
 8001438:	4649      	mov	r1, r9
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2302      	movs	r3, #2
 800143e:	4319      	orrs	r1, r3
 8001440:	4689      	mov	r9, r1
 8001442:	2002      	movs	r0, #2
 8001444:	e7e1      	b.n	800140a <__aeabi_dmul+0x82>
 8001446:	4643      	mov	r3, r8
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	0034      	movs	r4, r6
 800144c:	0015      	movs	r5, r2
 800144e:	4683      	mov	fp, r0
 8001450:	465b      	mov	r3, fp
 8001452:	2b02      	cmp	r3, #2
 8001454:	d05e      	beq.n	8001514 <__aeabi_dmul+0x18c>
 8001456:	2b03      	cmp	r3, #3
 8001458:	d100      	bne.n	800145c <__aeabi_dmul+0xd4>
 800145a:	e1f3      	b.n	8001844 <__aeabi_dmul+0x4bc>
 800145c:	2b01      	cmp	r3, #1
 800145e:	d000      	beq.n	8001462 <__aeabi_dmul+0xda>
 8001460:	e118      	b.n	8001694 <__aeabi_dmul+0x30c>
 8001462:	2200      	movs	r2, #0
 8001464:	2400      	movs	r4, #0
 8001466:	2500      	movs	r5, #0
 8001468:	9b01      	ldr	r3, [sp, #4]
 800146a:	0512      	lsls	r2, r2, #20
 800146c:	4322      	orrs	r2, r4
 800146e:	07db      	lsls	r3, r3, #31
 8001470:	431a      	orrs	r2, r3
 8001472:	0028      	movs	r0, r5
 8001474:	0011      	movs	r1, r2
 8001476:	b007      	add	sp, #28
 8001478:	bcf0      	pop	{r4, r5, r6, r7}
 800147a:	46bb      	mov	fp, r7
 800147c:	46b2      	mov	sl, r6
 800147e:	46a9      	mov	r9, r5
 8001480:	46a0      	mov	r8, r4
 8001482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001484:	0025      	movs	r5, r4
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dmul+0x104>
 800148a:	e141      	b.n	8001710 <__aeabi_dmul+0x388>
 800148c:	2c00      	cmp	r4, #0
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0x10a>
 8001490:	e1ad      	b.n	80017ee <__aeabi_dmul+0x466>
 8001492:	0020      	movs	r0, r4
 8001494:	f000 fe02 	bl	800209c <__clzsi2>
 8001498:	0001      	movs	r1, r0
 800149a:	0002      	movs	r2, r0
 800149c:	390b      	subs	r1, #11
 800149e:	231d      	movs	r3, #29
 80014a0:	0010      	movs	r0, r2
 80014a2:	1a5b      	subs	r3, r3, r1
 80014a4:	0031      	movs	r1, r6
 80014a6:	0035      	movs	r5, r6
 80014a8:	3808      	subs	r0, #8
 80014aa:	4084      	lsls	r4, r0
 80014ac:	40d9      	lsrs	r1, r3
 80014ae:	4085      	lsls	r5, r0
 80014b0:	430c      	orrs	r4, r1
 80014b2:	489e      	ldr	r0, [pc, #632]	; (800172c <__aeabi_dmul+0x3a4>)
 80014b4:	1a83      	subs	r3, r0, r2
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2300      	movs	r3, #0
 80014ba:	4699      	mov	r9, r3
 80014bc:	469b      	mov	fp, r3
 80014be:	e786      	b.n	80013ce <__aeabi_dmul+0x46>
 80014c0:	0005      	movs	r5, r0
 80014c2:	4325      	orrs	r5, r4
 80014c4:	d000      	beq.n	80014c8 <__aeabi_dmul+0x140>
 80014c6:	e11c      	b.n	8001702 <__aeabi_dmul+0x37a>
 80014c8:	2208      	movs	r2, #8
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2302      	movs	r3, #2
 80014ce:	2400      	movs	r4, #0
 80014d0:	4691      	mov	r9, r2
 80014d2:	469b      	mov	fp, r3
 80014d4:	e77b      	b.n	80013ce <__aeabi_dmul+0x46>
 80014d6:	4652      	mov	r2, sl
 80014d8:	4332      	orrs	r2, r6
 80014da:	d100      	bne.n	80014de <__aeabi_dmul+0x156>
 80014dc:	e10a      	b.n	80016f4 <__aeabi_dmul+0x36c>
 80014de:	2e00      	cmp	r6, #0
 80014e0:	d100      	bne.n	80014e4 <__aeabi_dmul+0x15c>
 80014e2:	e176      	b.n	80017d2 <__aeabi_dmul+0x44a>
 80014e4:	0030      	movs	r0, r6
 80014e6:	f000 fdd9 	bl	800209c <__clzsi2>
 80014ea:	0002      	movs	r2, r0
 80014ec:	3a0b      	subs	r2, #11
 80014ee:	231d      	movs	r3, #29
 80014f0:	0001      	movs	r1, r0
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	4652      	mov	r2, sl
 80014f6:	3908      	subs	r1, #8
 80014f8:	40da      	lsrs	r2, r3
 80014fa:	408e      	lsls	r6, r1
 80014fc:	4316      	orrs	r6, r2
 80014fe:	4652      	mov	r2, sl
 8001500:	408a      	lsls	r2, r1
 8001502:	9b00      	ldr	r3, [sp, #0]
 8001504:	4989      	ldr	r1, [pc, #548]	; (800172c <__aeabi_dmul+0x3a4>)
 8001506:	1a18      	subs	r0, r3, r0
 8001508:	0003      	movs	r3, r0
 800150a:	468c      	mov	ip, r1
 800150c:	4463      	add	r3, ip
 800150e:	2000      	movs	r0, #0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	e77a      	b.n	800140a <__aeabi_dmul+0x82>
 8001514:	2400      	movs	r4, #0
 8001516:	2500      	movs	r5, #0
 8001518:	4a81      	ldr	r2, [pc, #516]	; (8001720 <__aeabi_dmul+0x398>)
 800151a:	e7a5      	b.n	8001468 <__aeabi_dmul+0xe0>
 800151c:	0c2f      	lsrs	r7, r5, #16
 800151e:	042d      	lsls	r5, r5, #16
 8001520:	0c2d      	lsrs	r5, r5, #16
 8001522:	002b      	movs	r3, r5
 8001524:	0c11      	lsrs	r1, r2, #16
 8001526:	0412      	lsls	r2, r2, #16
 8001528:	0c12      	lsrs	r2, r2, #16
 800152a:	4353      	muls	r3, r2
 800152c:	4698      	mov	r8, r3
 800152e:	0013      	movs	r3, r2
 8001530:	0028      	movs	r0, r5
 8001532:	437b      	muls	r3, r7
 8001534:	4699      	mov	r9, r3
 8001536:	4348      	muls	r0, r1
 8001538:	4448      	add	r0, r9
 800153a:	4683      	mov	fp, r0
 800153c:	4640      	mov	r0, r8
 800153e:	000b      	movs	r3, r1
 8001540:	0c00      	lsrs	r0, r0, #16
 8001542:	4682      	mov	sl, r0
 8001544:	4658      	mov	r0, fp
 8001546:	437b      	muls	r3, r7
 8001548:	4450      	add	r0, sl
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	4581      	cmp	r9, r0
 800154e:	d906      	bls.n	800155e <__aeabi_dmul+0x1d6>
 8001550:	469a      	mov	sl, r3
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	025b      	lsls	r3, r3, #9
 8001556:	4699      	mov	r9, r3
 8001558:	44ca      	add	sl, r9
 800155a:	4653      	mov	r3, sl
 800155c:	9302      	str	r3, [sp, #8]
 800155e:	0c03      	lsrs	r3, r0, #16
 8001560:	469b      	mov	fp, r3
 8001562:	4643      	mov	r3, r8
 8001564:	041b      	lsls	r3, r3, #16
 8001566:	0400      	lsls	r0, r0, #16
 8001568:	0c1b      	lsrs	r3, r3, #16
 800156a:	4698      	mov	r8, r3
 800156c:	0003      	movs	r3, r0
 800156e:	4443      	add	r3, r8
 8001570:	9304      	str	r3, [sp, #16]
 8001572:	0c33      	lsrs	r3, r6, #16
 8001574:	4699      	mov	r9, r3
 8001576:	002b      	movs	r3, r5
 8001578:	0436      	lsls	r6, r6, #16
 800157a:	0c36      	lsrs	r6, r6, #16
 800157c:	4373      	muls	r3, r6
 800157e:	4698      	mov	r8, r3
 8001580:	0033      	movs	r3, r6
 8001582:	437b      	muls	r3, r7
 8001584:	469a      	mov	sl, r3
 8001586:	464b      	mov	r3, r9
 8001588:	435d      	muls	r5, r3
 800158a:	435f      	muls	r7, r3
 800158c:	4643      	mov	r3, r8
 800158e:	4455      	add	r5, sl
 8001590:	0c18      	lsrs	r0, r3, #16
 8001592:	1940      	adds	r0, r0, r5
 8001594:	4582      	cmp	sl, r0
 8001596:	d903      	bls.n	80015a0 <__aeabi_dmul+0x218>
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	025b      	lsls	r3, r3, #9
 800159c:	469a      	mov	sl, r3
 800159e:	4457      	add	r7, sl
 80015a0:	0c05      	lsrs	r5, r0, #16
 80015a2:	19eb      	adds	r3, r5, r7
 80015a4:	9305      	str	r3, [sp, #20]
 80015a6:	4643      	mov	r3, r8
 80015a8:	041d      	lsls	r5, r3, #16
 80015aa:	0c2d      	lsrs	r5, r5, #16
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	1940      	adds	r0, r0, r5
 80015b0:	0c25      	lsrs	r5, r4, #16
 80015b2:	0424      	lsls	r4, r4, #16
 80015b4:	0c24      	lsrs	r4, r4, #16
 80015b6:	0027      	movs	r7, r4
 80015b8:	4357      	muls	r7, r2
 80015ba:	436a      	muls	r2, r5
 80015bc:	4690      	mov	r8, r2
 80015be:	002a      	movs	r2, r5
 80015c0:	0c3b      	lsrs	r3, r7, #16
 80015c2:	469a      	mov	sl, r3
 80015c4:	434a      	muls	r2, r1
 80015c6:	4361      	muls	r1, r4
 80015c8:	4441      	add	r1, r8
 80015ca:	4451      	add	r1, sl
 80015cc:	4483      	add	fp, r0
 80015ce:	4588      	cmp	r8, r1
 80015d0:	d903      	bls.n	80015da <__aeabi_dmul+0x252>
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	4698      	mov	r8, r3
 80015d8:	4442      	add	r2, r8
 80015da:	043f      	lsls	r7, r7, #16
 80015dc:	0c0b      	lsrs	r3, r1, #16
 80015de:	0c3f      	lsrs	r7, r7, #16
 80015e0:	0409      	lsls	r1, r1, #16
 80015e2:	19c9      	adds	r1, r1, r7
 80015e4:	0027      	movs	r7, r4
 80015e6:	4698      	mov	r8, r3
 80015e8:	464b      	mov	r3, r9
 80015ea:	4377      	muls	r7, r6
 80015ec:	435c      	muls	r4, r3
 80015ee:	436e      	muls	r6, r5
 80015f0:	435d      	muls	r5, r3
 80015f2:	0c3b      	lsrs	r3, r7, #16
 80015f4:	4699      	mov	r9, r3
 80015f6:	19a4      	adds	r4, r4, r6
 80015f8:	444c      	add	r4, r9
 80015fa:	4442      	add	r2, r8
 80015fc:	9503      	str	r5, [sp, #12]
 80015fe:	42a6      	cmp	r6, r4
 8001600:	d904      	bls.n	800160c <__aeabi_dmul+0x284>
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	025b      	lsls	r3, r3, #9
 8001606:	4698      	mov	r8, r3
 8001608:	4445      	add	r5, r8
 800160a:	9503      	str	r5, [sp, #12]
 800160c:	9b02      	ldr	r3, [sp, #8]
 800160e:	043f      	lsls	r7, r7, #16
 8001610:	445b      	add	r3, fp
 8001612:	001e      	movs	r6, r3
 8001614:	4283      	cmp	r3, r0
 8001616:	4180      	sbcs	r0, r0
 8001618:	0423      	lsls	r3, r4, #16
 800161a:	4698      	mov	r8, r3
 800161c:	9b05      	ldr	r3, [sp, #20]
 800161e:	0c3f      	lsrs	r7, r7, #16
 8001620:	4447      	add	r7, r8
 8001622:	4698      	mov	r8, r3
 8001624:	1876      	adds	r6, r6, r1
 8001626:	428e      	cmp	r6, r1
 8001628:	4189      	sbcs	r1, r1
 800162a:	4447      	add	r7, r8
 800162c:	4240      	negs	r0, r0
 800162e:	183d      	adds	r5, r7, r0
 8001630:	46a8      	mov	r8, r5
 8001632:	4693      	mov	fp, r2
 8001634:	4249      	negs	r1, r1
 8001636:	468a      	mov	sl, r1
 8001638:	44c3      	add	fp, r8
 800163a:	429f      	cmp	r7, r3
 800163c:	41bf      	sbcs	r7, r7
 800163e:	4580      	cmp	r8, r0
 8001640:	4180      	sbcs	r0, r0
 8001642:	9b03      	ldr	r3, [sp, #12]
 8001644:	44da      	add	sl, fp
 8001646:	4698      	mov	r8, r3
 8001648:	4653      	mov	r3, sl
 800164a:	4240      	negs	r0, r0
 800164c:	427f      	negs	r7, r7
 800164e:	4307      	orrs	r7, r0
 8001650:	0c24      	lsrs	r4, r4, #16
 8001652:	4593      	cmp	fp, r2
 8001654:	4192      	sbcs	r2, r2
 8001656:	458a      	cmp	sl, r1
 8001658:	4189      	sbcs	r1, r1
 800165a:	193f      	adds	r7, r7, r4
 800165c:	0ddc      	lsrs	r4, r3, #23
 800165e:	9b04      	ldr	r3, [sp, #16]
 8001660:	0275      	lsls	r5, r6, #9
 8001662:	431d      	orrs	r5, r3
 8001664:	1e68      	subs	r0, r5, #1
 8001666:	4185      	sbcs	r5, r0
 8001668:	4653      	mov	r3, sl
 800166a:	4252      	negs	r2, r2
 800166c:	4249      	negs	r1, r1
 800166e:	430a      	orrs	r2, r1
 8001670:	18bf      	adds	r7, r7, r2
 8001672:	4447      	add	r7, r8
 8001674:	0df6      	lsrs	r6, r6, #23
 8001676:	027f      	lsls	r7, r7, #9
 8001678:	4335      	orrs	r5, r6
 800167a:	025a      	lsls	r2, r3, #9
 800167c:	433c      	orrs	r4, r7
 800167e:	4315      	orrs	r5, r2
 8001680:	01fb      	lsls	r3, r7, #7
 8001682:	d400      	bmi.n	8001686 <__aeabi_dmul+0x2fe>
 8001684:	e0c1      	b.n	800180a <__aeabi_dmul+0x482>
 8001686:	2101      	movs	r1, #1
 8001688:	086a      	lsrs	r2, r5, #1
 800168a:	400d      	ands	r5, r1
 800168c:	4315      	orrs	r5, r2
 800168e:	07e2      	lsls	r2, r4, #31
 8001690:	4315      	orrs	r5, r2
 8001692:	0864      	lsrs	r4, r4, #1
 8001694:	4926      	ldr	r1, [pc, #152]	; (8001730 <__aeabi_dmul+0x3a8>)
 8001696:	4461      	add	r1, ip
 8001698:	2900      	cmp	r1, #0
 800169a:	dd56      	ble.n	800174a <__aeabi_dmul+0x3c2>
 800169c:	076b      	lsls	r3, r5, #29
 800169e:	d009      	beq.n	80016b4 <__aeabi_dmul+0x32c>
 80016a0:	220f      	movs	r2, #15
 80016a2:	402a      	ands	r2, r5
 80016a4:	2a04      	cmp	r2, #4
 80016a6:	d005      	beq.n	80016b4 <__aeabi_dmul+0x32c>
 80016a8:	1d2a      	adds	r2, r5, #4
 80016aa:	42aa      	cmp	r2, r5
 80016ac:	41ad      	sbcs	r5, r5
 80016ae:	426d      	negs	r5, r5
 80016b0:	1964      	adds	r4, r4, r5
 80016b2:	0015      	movs	r5, r2
 80016b4:	01e3      	lsls	r3, r4, #7
 80016b6:	d504      	bpl.n	80016c2 <__aeabi_dmul+0x33a>
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4a1e      	ldr	r2, [pc, #120]	; (8001734 <__aeabi_dmul+0x3ac>)
 80016bc:	00c9      	lsls	r1, r1, #3
 80016be:	4014      	ands	r4, r2
 80016c0:	4461      	add	r1, ip
 80016c2:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <__aeabi_dmul+0x3b0>)
 80016c4:	4291      	cmp	r1, r2
 80016c6:	dd00      	ble.n	80016ca <__aeabi_dmul+0x342>
 80016c8:	e724      	b.n	8001514 <__aeabi_dmul+0x18c>
 80016ca:	0762      	lsls	r2, r4, #29
 80016cc:	08ed      	lsrs	r5, r5, #3
 80016ce:	0264      	lsls	r4, r4, #9
 80016d0:	0549      	lsls	r1, r1, #21
 80016d2:	4315      	orrs	r5, r2
 80016d4:	0b24      	lsrs	r4, r4, #12
 80016d6:	0d4a      	lsrs	r2, r1, #21
 80016d8:	e6c6      	b.n	8001468 <__aeabi_dmul+0xe0>
 80016da:	9701      	str	r7, [sp, #4]
 80016dc:	e6b8      	b.n	8001450 <__aeabi_dmul+0xc8>
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <__aeabi_dmul+0x398>)
 80016e0:	2003      	movs	r0, #3
 80016e2:	4694      	mov	ip, r2
 80016e4:	4463      	add	r3, ip
 80016e6:	464a      	mov	r2, r9
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2303      	movs	r3, #3
 80016ec:	431a      	orrs	r2, r3
 80016ee:	4691      	mov	r9, r2
 80016f0:	4652      	mov	r2, sl
 80016f2:	e68a      	b.n	800140a <__aeabi_dmul+0x82>
 80016f4:	4649      	mov	r1, r9
 80016f6:	2301      	movs	r3, #1
 80016f8:	4319      	orrs	r1, r3
 80016fa:	4689      	mov	r9, r1
 80016fc:	2600      	movs	r6, #0
 80016fe:	2001      	movs	r0, #1
 8001700:	e683      	b.n	800140a <__aeabi_dmul+0x82>
 8001702:	220c      	movs	r2, #12
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2303      	movs	r3, #3
 8001708:	0005      	movs	r5, r0
 800170a:	4691      	mov	r9, r2
 800170c:	469b      	mov	fp, r3
 800170e:	e65e      	b.n	80013ce <__aeabi_dmul+0x46>
 8001710:	2304      	movs	r3, #4
 8001712:	4699      	mov	r9, r3
 8001714:	2300      	movs	r3, #0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	3301      	adds	r3, #1
 800171a:	2400      	movs	r4, #0
 800171c:	469b      	mov	fp, r3
 800171e:	e656      	b.n	80013ce <__aeabi_dmul+0x46>
 8001720:	000007ff 	.word	0x000007ff
 8001724:	fffffc01 	.word	0xfffffc01
 8001728:	0800ea7c 	.word	0x0800ea7c
 800172c:	fffffc0d 	.word	0xfffffc0d
 8001730:	000003ff 	.word	0x000003ff
 8001734:	feffffff 	.word	0xfeffffff
 8001738:	000007fe 	.word	0x000007fe
 800173c:	2300      	movs	r3, #0
 800173e:	2480      	movs	r4, #128	; 0x80
 8001740:	2500      	movs	r5, #0
 8001742:	4a44      	ldr	r2, [pc, #272]	; (8001854 <__aeabi_dmul+0x4cc>)
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	0324      	lsls	r4, r4, #12
 8001748:	e68e      	b.n	8001468 <__aeabi_dmul+0xe0>
 800174a:	2001      	movs	r0, #1
 800174c:	1a40      	subs	r0, r0, r1
 800174e:	2838      	cmp	r0, #56	; 0x38
 8001750:	dd00      	ble.n	8001754 <__aeabi_dmul+0x3cc>
 8001752:	e686      	b.n	8001462 <__aeabi_dmul+0xda>
 8001754:	281f      	cmp	r0, #31
 8001756:	dd5b      	ble.n	8001810 <__aeabi_dmul+0x488>
 8001758:	221f      	movs	r2, #31
 800175a:	0023      	movs	r3, r4
 800175c:	4252      	negs	r2, r2
 800175e:	1a51      	subs	r1, r2, r1
 8001760:	40cb      	lsrs	r3, r1
 8001762:	0019      	movs	r1, r3
 8001764:	2820      	cmp	r0, #32
 8001766:	d003      	beq.n	8001770 <__aeabi_dmul+0x3e8>
 8001768:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <__aeabi_dmul+0x4d0>)
 800176a:	4462      	add	r2, ip
 800176c:	4094      	lsls	r4, r2
 800176e:	4325      	orrs	r5, r4
 8001770:	1e6a      	subs	r2, r5, #1
 8001772:	4195      	sbcs	r5, r2
 8001774:	002a      	movs	r2, r5
 8001776:	430a      	orrs	r2, r1
 8001778:	2107      	movs	r1, #7
 800177a:	000d      	movs	r5, r1
 800177c:	2400      	movs	r4, #0
 800177e:	4015      	ands	r5, r2
 8001780:	4211      	tst	r1, r2
 8001782:	d05b      	beq.n	800183c <__aeabi_dmul+0x4b4>
 8001784:	210f      	movs	r1, #15
 8001786:	2400      	movs	r4, #0
 8001788:	4011      	ands	r1, r2
 800178a:	2904      	cmp	r1, #4
 800178c:	d053      	beq.n	8001836 <__aeabi_dmul+0x4ae>
 800178e:	1d11      	adds	r1, r2, #4
 8001790:	4291      	cmp	r1, r2
 8001792:	4192      	sbcs	r2, r2
 8001794:	4252      	negs	r2, r2
 8001796:	18a4      	adds	r4, r4, r2
 8001798:	000a      	movs	r2, r1
 800179a:	0223      	lsls	r3, r4, #8
 800179c:	d54b      	bpl.n	8001836 <__aeabi_dmul+0x4ae>
 800179e:	2201      	movs	r2, #1
 80017a0:	2400      	movs	r4, #0
 80017a2:	2500      	movs	r5, #0
 80017a4:	e660      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	031b      	lsls	r3, r3, #12
 80017aa:	421c      	tst	r4, r3
 80017ac:	d009      	beq.n	80017c2 <__aeabi_dmul+0x43a>
 80017ae:	421e      	tst	r6, r3
 80017b0:	d107      	bne.n	80017c2 <__aeabi_dmul+0x43a>
 80017b2:	4333      	orrs	r3, r6
 80017b4:	031c      	lsls	r4, r3, #12
 80017b6:	4643      	mov	r3, r8
 80017b8:	0015      	movs	r5, r2
 80017ba:	0b24      	lsrs	r4, r4, #12
 80017bc:	4a25      	ldr	r2, [pc, #148]	; (8001854 <__aeabi_dmul+0x4cc>)
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	e652      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	0312      	lsls	r2, r2, #12
 80017c6:	4314      	orrs	r4, r2
 80017c8:	0324      	lsls	r4, r4, #12
 80017ca:	4a22      	ldr	r2, [pc, #136]	; (8001854 <__aeabi_dmul+0x4cc>)
 80017cc:	0b24      	lsrs	r4, r4, #12
 80017ce:	9701      	str	r7, [sp, #4]
 80017d0:	e64a      	b.n	8001468 <__aeabi_dmul+0xe0>
 80017d2:	f000 fc63 	bl	800209c <__clzsi2>
 80017d6:	0003      	movs	r3, r0
 80017d8:	001a      	movs	r2, r3
 80017da:	3215      	adds	r2, #21
 80017dc:	3020      	adds	r0, #32
 80017de:	2a1c      	cmp	r2, #28
 80017e0:	dc00      	bgt.n	80017e4 <__aeabi_dmul+0x45c>
 80017e2:	e684      	b.n	80014ee <__aeabi_dmul+0x166>
 80017e4:	4656      	mov	r6, sl
 80017e6:	3b08      	subs	r3, #8
 80017e8:	2200      	movs	r2, #0
 80017ea:	409e      	lsls	r6, r3
 80017ec:	e689      	b.n	8001502 <__aeabi_dmul+0x17a>
 80017ee:	f000 fc55 	bl	800209c <__clzsi2>
 80017f2:	0001      	movs	r1, r0
 80017f4:	0002      	movs	r2, r0
 80017f6:	3115      	adds	r1, #21
 80017f8:	3220      	adds	r2, #32
 80017fa:	291c      	cmp	r1, #28
 80017fc:	dc00      	bgt.n	8001800 <__aeabi_dmul+0x478>
 80017fe:	e64e      	b.n	800149e <__aeabi_dmul+0x116>
 8001800:	0034      	movs	r4, r6
 8001802:	3808      	subs	r0, #8
 8001804:	2500      	movs	r5, #0
 8001806:	4084      	lsls	r4, r0
 8001808:	e653      	b.n	80014b2 <__aeabi_dmul+0x12a>
 800180a:	9b00      	ldr	r3, [sp, #0]
 800180c:	469c      	mov	ip, r3
 800180e:	e741      	b.n	8001694 <__aeabi_dmul+0x30c>
 8001810:	4912      	ldr	r1, [pc, #72]	; (800185c <__aeabi_dmul+0x4d4>)
 8001812:	0022      	movs	r2, r4
 8001814:	4461      	add	r1, ip
 8001816:	002e      	movs	r6, r5
 8001818:	408d      	lsls	r5, r1
 800181a:	408a      	lsls	r2, r1
 800181c:	40c6      	lsrs	r6, r0
 800181e:	1e69      	subs	r1, r5, #1
 8001820:	418d      	sbcs	r5, r1
 8001822:	4332      	orrs	r2, r6
 8001824:	432a      	orrs	r2, r5
 8001826:	40c4      	lsrs	r4, r0
 8001828:	0753      	lsls	r3, r2, #29
 800182a:	d0b6      	beq.n	800179a <__aeabi_dmul+0x412>
 800182c:	210f      	movs	r1, #15
 800182e:	4011      	ands	r1, r2
 8001830:	2904      	cmp	r1, #4
 8001832:	d1ac      	bne.n	800178e <__aeabi_dmul+0x406>
 8001834:	e7b1      	b.n	800179a <__aeabi_dmul+0x412>
 8001836:	0765      	lsls	r5, r4, #29
 8001838:	0264      	lsls	r4, r4, #9
 800183a:	0b24      	lsrs	r4, r4, #12
 800183c:	08d2      	lsrs	r2, r2, #3
 800183e:	4315      	orrs	r5, r2
 8001840:	2200      	movs	r2, #0
 8001842:	e611      	b.n	8001468 <__aeabi_dmul+0xe0>
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	0312      	lsls	r2, r2, #12
 8001848:	4314      	orrs	r4, r2
 800184a:	0324      	lsls	r4, r4, #12
 800184c:	4a01      	ldr	r2, [pc, #4]	; (8001854 <__aeabi_dmul+0x4cc>)
 800184e:	0b24      	lsrs	r4, r4, #12
 8001850:	e60a      	b.n	8001468 <__aeabi_dmul+0xe0>
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	000007ff 	.word	0x000007ff
 8001858:	0000043e 	.word	0x0000043e
 800185c:	0000041e 	.word	0x0000041e

08001860 <__aeabi_dsub>:
 8001860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001862:	4657      	mov	r7, sl
 8001864:	464e      	mov	r6, r9
 8001866:	4645      	mov	r5, r8
 8001868:	46de      	mov	lr, fp
 800186a:	0004      	movs	r4, r0
 800186c:	b5e0      	push	{r5, r6, r7, lr}
 800186e:	001f      	movs	r7, r3
 8001870:	0010      	movs	r0, r2
 8001872:	030b      	lsls	r3, r1, #12
 8001874:	0f62      	lsrs	r2, r4, #29
 8001876:	004e      	lsls	r6, r1, #1
 8001878:	0fcd      	lsrs	r5, r1, #31
 800187a:	0a5b      	lsrs	r3, r3, #9
 800187c:	0339      	lsls	r1, r7, #12
 800187e:	4313      	orrs	r3, r2
 8001880:	0a49      	lsrs	r1, r1, #9
 8001882:	00e2      	lsls	r2, r4, #3
 8001884:	0f44      	lsrs	r4, r0, #29
 8001886:	4321      	orrs	r1, r4
 8001888:	4cc2      	ldr	r4, [pc, #776]	; (8001b94 <__aeabi_dsub+0x334>)
 800188a:	4691      	mov	r9, r2
 800188c:	4692      	mov	sl, r2
 800188e:	00c0      	lsls	r0, r0, #3
 8001890:	007a      	lsls	r2, r7, #1
 8001892:	4680      	mov	r8, r0
 8001894:	0d76      	lsrs	r6, r6, #21
 8001896:	0d52      	lsrs	r2, r2, #21
 8001898:	0fff      	lsrs	r7, r7, #31
 800189a:	42a2      	cmp	r2, r4
 800189c:	d100      	bne.n	80018a0 <__aeabi_dsub+0x40>
 800189e:	e0b4      	b.n	8001a0a <__aeabi_dsub+0x1aa>
 80018a0:	2401      	movs	r4, #1
 80018a2:	4067      	eors	r7, r4
 80018a4:	46bb      	mov	fp, r7
 80018a6:	42bd      	cmp	r5, r7
 80018a8:	d100      	bne.n	80018ac <__aeabi_dsub+0x4c>
 80018aa:	e088      	b.n	80019be <__aeabi_dsub+0x15e>
 80018ac:	1ab4      	subs	r4, r6, r2
 80018ae:	46a4      	mov	ip, r4
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	dc00      	bgt.n	80018b6 <__aeabi_dsub+0x56>
 80018b4:	e0b2      	b.n	8001a1c <__aeabi_dsub+0x1bc>
 80018b6:	2a00      	cmp	r2, #0
 80018b8:	d100      	bne.n	80018bc <__aeabi_dsub+0x5c>
 80018ba:	e0c5      	b.n	8001a48 <__aeabi_dsub+0x1e8>
 80018bc:	4ab5      	ldr	r2, [pc, #724]	; (8001b94 <__aeabi_dsub+0x334>)
 80018be:	4296      	cmp	r6, r2
 80018c0:	d100      	bne.n	80018c4 <__aeabi_dsub+0x64>
 80018c2:	e28b      	b.n	8001ddc <__aeabi_dsub+0x57c>
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	0412      	lsls	r2, r2, #16
 80018c8:	4311      	orrs	r1, r2
 80018ca:	4662      	mov	r2, ip
 80018cc:	2a38      	cmp	r2, #56	; 0x38
 80018ce:	dd00      	ble.n	80018d2 <__aeabi_dsub+0x72>
 80018d0:	e1a1      	b.n	8001c16 <__aeabi_dsub+0x3b6>
 80018d2:	2a1f      	cmp	r2, #31
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0x78>
 80018d6:	e216      	b.n	8001d06 <__aeabi_dsub+0x4a6>
 80018d8:	2720      	movs	r7, #32
 80018da:	000c      	movs	r4, r1
 80018dc:	1abf      	subs	r7, r7, r2
 80018de:	40bc      	lsls	r4, r7
 80018e0:	0002      	movs	r2, r0
 80018e2:	46a0      	mov	r8, r4
 80018e4:	4664      	mov	r4, ip
 80018e6:	40b8      	lsls	r0, r7
 80018e8:	40e2      	lsrs	r2, r4
 80018ea:	4644      	mov	r4, r8
 80018ec:	4314      	orrs	r4, r2
 80018ee:	0002      	movs	r2, r0
 80018f0:	1e50      	subs	r0, r2, #1
 80018f2:	4182      	sbcs	r2, r0
 80018f4:	4660      	mov	r0, ip
 80018f6:	40c1      	lsrs	r1, r0
 80018f8:	4322      	orrs	r2, r4
 80018fa:	1a5b      	subs	r3, r3, r1
 80018fc:	4649      	mov	r1, r9
 80018fe:	1a8c      	subs	r4, r1, r2
 8001900:	45a1      	cmp	r9, r4
 8001902:	4192      	sbcs	r2, r2
 8001904:	4252      	negs	r2, r2
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	4698      	mov	r8, r3
 800190a:	4643      	mov	r3, r8
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	d400      	bmi.n	8001912 <__aeabi_dsub+0xb2>
 8001910:	e117      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001912:	4643      	mov	r3, r8
 8001914:	025b      	lsls	r3, r3, #9
 8001916:	0a5b      	lsrs	r3, r3, #9
 8001918:	4698      	mov	r8, r3
 800191a:	4643      	mov	r3, r8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d100      	bne.n	8001922 <__aeabi_dsub+0xc2>
 8001920:	e16c      	b.n	8001bfc <__aeabi_dsub+0x39c>
 8001922:	4640      	mov	r0, r8
 8001924:	f000 fbba 	bl	800209c <__clzsi2>
 8001928:	0002      	movs	r2, r0
 800192a:	3a08      	subs	r2, #8
 800192c:	2120      	movs	r1, #32
 800192e:	0020      	movs	r0, r4
 8001930:	4643      	mov	r3, r8
 8001932:	1a89      	subs	r1, r1, r2
 8001934:	4093      	lsls	r3, r2
 8001936:	40c8      	lsrs	r0, r1
 8001938:	4094      	lsls	r4, r2
 800193a:	4303      	orrs	r3, r0
 800193c:	4296      	cmp	r6, r2
 800193e:	dd00      	ble.n	8001942 <__aeabi_dsub+0xe2>
 8001940:	e157      	b.n	8001bf2 <__aeabi_dsub+0x392>
 8001942:	1b96      	subs	r6, r2, r6
 8001944:	1c71      	adds	r1, r6, #1
 8001946:	291f      	cmp	r1, #31
 8001948:	dd00      	ble.n	800194c <__aeabi_dsub+0xec>
 800194a:	e1cb      	b.n	8001ce4 <__aeabi_dsub+0x484>
 800194c:	2220      	movs	r2, #32
 800194e:	0018      	movs	r0, r3
 8001950:	0026      	movs	r6, r4
 8001952:	1a52      	subs	r2, r2, r1
 8001954:	4094      	lsls	r4, r2
 8001956:	4090      	lsls	r0, r2
 8001958:	40ce      	lsrs	r6, r1
 800195a:	40cb      	lsrs	r3, r1
 800195c:	1e62      	subs	r2, r4, #1
 800195e:	4194      	sbcs	r4, r2
 8001960:	4330      	orrs	r0, r6
 8001962:	4698      	mov	r8, r3
 8001964:	2600      	movs	r6, #0
 8001966:	4304      	orrs	r4, r0
 8001968:	0763      	lsls	r3, r4, #29
 800196a:	d009      	beq.n	8001980 <__aeabi_dsub+0x120>
 800196c:	230f      	movs	r3, #15
 800196e:	4023      	ands	r3, r4
 8001970:	2b04      	cmp	r3, #4
 8001972:	d005      	beq.n	8001980 <__aeabi_dsub+0x120>
 8001974:	1d23      	adds	r3, r4, #4
 8001976:	42a3      	cmp	r3, r4
 8001978:	41a4      	sbcs	r4, r4
 800197a:	4264      	negs	r4, r4
 800197c:	44a0      	add	r8, r4
 800197e:	001c      	movs	r4, r3
 8001980:	4643      	mov	r3, r8
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	d400      	bmi.n	8001988 <__aeabi_dsub+0x128>
 8001986:	e0df      	b.n	8001b48 <__aeabi_dsub+0x2e8>
 8001988:	4b82      	ldr	r3, [pc, #520]	; (8001b94 <__aeabi_dsub+0x334>)
 800198a:	3601      	adds	r6, #1
 800198c:	429e      	cmp	r6, r3
 800198e:	d100      	bne.n	8001992 <__aeabi_dsub+0x132>
 8001990:	e0fb      	b.n	8001b8a <__aeabi_dsub+0x32a>
 8001992:	4642      	mov	r2, r8
 8001994:	4b80      	ldr	r3, [pc, #512]	; (8001b98 <__aeabi_dsub+0x338>)
 8001996:	08e4      	lsrs	r4, r4, #3
 8001998:	401a      	ands	r2, r3
 800199a:	0013      	movs	r3, r2
 800199c:	0571      	lsls	r1, r6, #21
 800199e:	0752      	lsls	r2, r2, #29
 80019a0:	025b      	lsls	r3, r3, #9
 80019a2:	4322      	orrs	r2, r4
 80019a4:	0b1b      	lsrs	r3, r3, #12
 80019a6:	0d49      	lsrs	r1, r1, #21
 80019a8:	0509      	lsls	r1, r1, #20
 80019aa:	07ed      	lsls	r5, r5, #31
 80019ac:	4319      	orrs	r1, r3
 80019ae:	4329      	orrs	r1, r5
 80019b0:	0010      	movs	r0, r2
 80019b2:	bcf0      	pop	{r4, r5, r6, r7}
 80019b4:	46bb      	mov	fp, r7
 80019b6:	46b2      	mov	sl, r6
 80019b8:	46a9      	mov	r9, r5
 80019ba:	46a0      	mov	r8, r4
 80019bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019be:	1ab4      	subs	r4, r6, r2
 80019c0:	46a4      	mov	ip, r4
 80019c2:	2c00      	cmp	r4, #0
 80019c4:	dd58      	ble.n	8001a78 <__aeabi_dsub+0x218>
 80019c6:	2a00      	cmp	r2, #0
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x16c>
 80019ca:	e09e      	b.n	8001b0a <__aeabi_dsub+0x2aa>
 80019cc:	4a71      	ldr	r2, [pc, #452]	; (8001b94 <__aeabi_dsub+0x334>)
 80019ce:	4296      	cmp	r6, r2
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dsub+0x174>
 80019d2:	e13b      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	0412      	lsls	r2, r2, #16
 80019d8:	4311      	orrs	r1, r2
 80019da:	4662      	mov	r2, ip
 80019dc:	2a38      	cmp	r2, #56	; 0x38
 80019de:	dd00      	ble.n	80019e2 <__aeabi_dsub+0x182>
 80019e0:	e0c1      	b.n	8001b66 <__aeabi_dsub+0x306>
 80019e2:	2a1f      	cmp	r2, #31
 80019e4:	dc00      	bgt.n	80019e8 <__aeabi_dsub+0x188>
 80019e6:	e1bb      	b.n	8001d60 <__aeabi_dsub+0x500>
 80019e8:	000c      	movs	r4, r1
 80019ea:	3a20      	subs	r2, #32
 80019ec:	40d4      	lsrs	r4, r2
 80019ee:	0022      	movs	r2, r4
 80019f0:	4664      	mov	r4, ip
 80019f2:	2c20      	cmp	r4, #32
 80019f4:	d004      	beq.n	8001a00 <__aeabi_dsub+0x1a0>
 80019f6:	2740      	movs	r7, #64	; 0x40
 80019f8:	1b3f      	subs	r7, r7, r4
 80019fa:	40b9      	lsls	r1, r7
 80019fc:	4308      	orrs	r0, r1
 80019fe:	4680      	mov	r8, r0
 8001a00:	4644      	mov	r4, r8
 8001a02:	1e61      	subs	r1, r4, #1
 8001a04:	418c      	sbcs	r4, r1
 8001a06:	4314      	orrs	r4, r2
 8001a08:	e0b1      	b.n	8001b6e <__aeabi_dsub+0x30e>
 8001a0a:	000c      	movs	r4, r1
 8001a0c:	4304      	orrs	r4, r0
 8001a0e:	d02a      	beq.n	8001a66 <__aeabi_dsub+0x206>
 8001a10:	46bb      	mov	fp, r7
 8001a12:	42bd      	cmp	r5, r7
 8001a14:	d02d      	beq.n	8001a72 <__aeabi_dsub+0x212>
 8001a16:	4c61      	ldr	r4, [pc, #388]	; (8001b9c <__aeabi_dsub+0x33c>)
 8001a18:	46a4      	mov	ip, r4
 8001a1a:	44b4      	add	ip, r6
 8001a1c:	4664      	mov	r4, ip
 8001a1e:	2c00      	cmp	r4, #0
 8001a20:	d05c      	beq.n	8001adc <__aeabi_dsub+0x27c>
 8001a22:	1b94      	subs	r4, r2, r6
 8001a24:	46a4      	mov	ip, r4
 8001a26:	2e00      	cmp	r6, #0
 8001a28:	d000      	beq.n	8001a2c <__aeabi_dsub+0x1cc>
 8001a2a:	e115      	b.n	8001c58 <__aeabi_dsub+0x3f8>
 8001a2c:	464d      	mov	r5, r9
 8001a2e:	431d      	orrs	r5, r3
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x1d4>
 8001a32:	e1c3      	b.n	8001dbc <__aeabi_dsub+0x55c>
 8001a34:	1e65      	subs	r5, r4, #1
 8001a36:	2c01      	cmp	r4, #1
 8001a38:	d100      	bne.n	8001a3c <__aeabi_dsub+0x1dc>
 8001a3a:	e20c      	b.n	8001e56 <__aeabi_dsub+0x5f6>
 8001a3c:	4e55      	ldr	r6, [pc, #340]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a3e:	42b4      	cmp	r4, r6
 8001a40:	d100      	bne.n	8001a44 <__aeabi_dsub+0x1e4>
 8001a42:	e1f8      	b.n	8001e36 <__aeabi_dsub+0x5d6>
 8001a44:	46ac      	mov	ip, r5
 8001a46:	e10e      	b.n	8001c66 <__aeabi_dsub+0x406>
 8001a48:	000a      	movs	r2, r1
 8001a4a:	4302      	orrs	r2, r0
 8001a4c:	d100      	bne.n	8001a50 <__aeabi_dsub+0x1f0>
 8001a4e:	e136      	b.n	8001cbe <__aeabi_dsub+0x45e>
 8001a50:	0022      	movs	r2, r4
 8001a52:	3a01      	subs	r2, #1
 8001a54:	2c01      	cmp	r4, #1
 8001a56:	d100      	bne.n	8001a5a <__aeabi_dsub+0x1fa>
 8001a58:	e1c6      	b.n	8001de8 <__aeabi_dsub+0x588>
 8001a5a:	4c4e      	ldr	r4, [pc, #312]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a5c:	45a4      	cmp	ip, r4
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x202>
 8001a60:	e0f4      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 8001a62:	4694      	mov	ip, r2
 8001a64:	e731      	b.n	80018ca <__aeabi_dsub+0x6a>
 8001a66:	2401      	movs	r4, #1
 8001a68:	4067      	eors	r7, r4
 8001a6a:	46bb      	mov	fp, r7
 8001a6c:	42bd      	cmp	r5, r7
 8001a6e:	d000      	beq.n	8001a72 <__aeabi_dsub+0x212>
 8001a70:	e71c      	b.n	80018ac <__aeabi_dsub+0x4c>
 8001a72:	4c4a      	ldr	r4, [pc, #296]	; (8001b9c <__aeabi_dsub+0x33c>)
 8001a74:	46a4      	mov	ip, r4
 8001a76:	44b4      	add	ip, r6
 8001a78:	4664      	mov	r4, ip
 8001a7a:	2c00      	cmp	r4, #0
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x220>
 8001a7e:	e0cf      	b.n	8001c20 <__aeabi_dsub+0x3c0>
 8001a80:	1b94      	subs	r4, r2, r6
 8001a82:	46a4      	mov	ip, r4
 8001a84:	2e00      	cmp	r6, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dsub+0x22a>
 8001a88:	e15c      	b.n	8001d44 <__aeabi_dsub+0x4e4>
 8001a8a:	4e42      	ldr	r6, [pc, #264]	; (8001b94 <__aeabi_dsub+0x334>)
 8001a8c:	42b2      	cmp	r2, r6
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_dsub+0x232>
 8001a90:	e1ec      	b.n	8001e6c <__aeabi_dsub+0x60c>
 8001a92:	2680      	movs	r6, #128	; 0x80
 8001a94:	0436      	lsls	r6, r6, #16
 8001a96:	4333      	orrs	r3, r6
 8001a98:	4664      	mov	r4, ip
 8001a9a:	2c38      	cmp	r4, #56	; 0x38
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dsub+0x240>
 8001a9e:	e1b3      	b.n	8001e08 <__aeabi_dsub+0x5a8>
 8001aa0:	2c1f      	cmp	r4, #31
 8001aa2:	dd00      	ble.n	8001aa6 <__aeabi_dsub+0x246>
 8001aa4:	e238      	b.n	8001f18 <__aeabi_dsub+0x6b8>
 8001aa6:	2620      	movs	r6, #32
 8001aa8:	1b36      	subs	r6, r6, r4
 8001aaa:	001c      	movs	r4, r3
 8001aac:	40b4      	lsls	r4, r6
 8001aae:	464f      	mov	r7, r9
 8001ab0:	46a0      	mov	r8, r4
 8001ab2:	4664      	mov	r4, ip
 8001ab4:	40e7      	lsrs	r7, r4
 8001ab6:	4644      	mov	r4, r8
 8001ab8:	433c      	orrs	r4, r7
 8001aba:	464f      	mov	r7, r9
 8001abc:	40b7      	lsls	r7, r6
 8001abe:	003e      	movs	r6, r7
 8001ac0:	1e77      	subs	r7, r6, #1
 8001ac2:	41be      	sbcs	r6, r7
 8001ac4:	4334      	orrs	r4, r6
 8001ac6:	4666      	mov	r6, ip
 8001ac8:	40f3      	lsrs	r3, r6
 8001aca:	18c9      	adds	r1, r1, r3
 8001acc:	1824      	adds	r4, r4, r0
 8001ace:	4284      	cmp	r4, r0
 8001ad0:	419b      	sbcs	r3, r3
 8001ad2:	425b      	negs	r3, r3
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	0016      	movs	r6, r2
 8001ad8:	4488      	add	r8, r1
 8001ada:	e04e      	b.n	8001b7a <__aeabi_dsub+0x31a>
 8001adc:	4a30      	ldr	r2, [pc, #192]	; (8001ba0 <__aeabi_dsub+0x340>)
 8001ade:	1c74      	adds	r4, r6, #1
 8001ae0:	4214      	tst	r4, r2
 8001ae2:	d000      	beq.n	8001ae6 <__aeabi_dsub+0x286>
 8001ae4:	e0d6      	b.n	8001c94 <__aeabi_dsub+0x434>
 8001ae6:	464a      	mov	r2, r9
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	2e00      	cmp	r6, #0
 8001aec:	d000      	beq.n	8001af0 <__aeabi_dsub+0x290>
 8001aee:	e15b      	b.n	8001da8 <__aeabi_dsub+0x548>
 8001af0:	2a00      	cmp	r2, #0
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dsub+0x296>
 8001af4:	e1a5      	b.n	8001e42 <__aeabi_dsub+0x5e2>
 8001af6:	000a      	movs	r2, r1
 8001af8:	4302      	orrs	r2, r0
 8001afa:	d000      	beq.n	8001afe <__aeabi_dsub+0x29e>
 8001afc:	e1bb      	b.n	8001e76 <__aeabi_dsub+0x616>
 8001afe:	464a      	mov	r2, r9
 8001b00:	0759      	lsls	r1, r3, #29
 8001b02:	08d2      	lsrs	r2, r2, #3
 8001b04:	430a      	orrs	r2, r1
 8001b06:	08db      	lsrs	r3, r3, #3
 8001b08:	e027      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	4302      	orrs	r2, r0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x2b2>
 8001b10:	e174      	b.n	8001dfc <__aeabi_dsub+0x59c>
 8001b12:	0022      	movs	r2, r4
 8001b14:	3a01      	subs	r2, #1
 8001b16:	2c01      	cmp	r4, #1
 8001b18:	d005      	beq.n	8001b26 <__aeabi_dsub+0x2c6>
 8001b1a:	4c1e      	ldr	r4, [pc, #120]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b1c:	45a4      	cmp	ip, r4
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dsub+0x2c2>
 8001b20:	e094      	b.n	8001c4c <__aeabi_dsub+0x3ec>
 8001b22:	4694      	mov	ip, r2
 8001b24:	e759      	b.n	80019da <__aeabi_dsub+0x17a>
 8001b26:	4448      	add	r0, r9
 8001b28:	4548      	cmp	r0, r9
 8001b2a:	4192      	sbcs	r2, r2
 8001b2c:	185b      	adds	r3, r3, r1
 8001b2e:	4698      	mov	r8, r3
 8001b30:	0004      	movs	r4, r0
 8001b32:	4252      	negs	r2, r2
 8001b34:	4490      	add	r8, r2
 8001b36:	4643      	mov	r3, r8
 8001b38:	2602      	movs	r6, #2
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	d500      	bpl.n	8001b40 <__aeabi_dsub+0x2e0>
 8001b3e:	e0c4      	b.n	8001cca <__aeabi_dsub+0x46a>
 8001b40:	3e01      	subs	r6, #1
 8001b42:	0763      	lsls	r3, r4, #29
 8001b44:	d000      	beq.n	8001b48 <__aeabi_dsub+0x2e8>
 8001b46:	e711      	b.n	800196c <__aeabi_dsub+0x10c>
 8001b48:	4643      	mov	r3, r8
 8001b4a:	46b4      	mov	ip, r6
 8001b4c:	0759      	lsls	r1, r3, #29
 8001b4e:	08e2      	lsrs	r2, r4, #3
 8001b50:	430a      	orrs	r2, r1
 8001b52:	08db      	lsrs	r3, r3, #3
 8001b54:	490f      	ldr	r1, [pc, #60]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b56:	458c      	cmp	ip, r1
 8001b58:	d040      	beq.n	8001bdc <__aeabi_dsub+0x37c>
 8001b5a:	4661      	mov	r1, ip
 8001b5c:	031b      	lsls	r3, r3, #12
 8001b5e:	0549      	lsls	r1, r1, #21
 8001b60:	0b1b      	lsrs	r3, r3, #12
 8001b62:	0d49      	lsrs	r1, r1, #21
 8001b64:	e720      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001b66:	4301      	orrs	r1, r0
 8001b68:	000c      	movs	r4, r1
 8001b6a:	1e61      	subs	r1, r4, #1
 8001b6c:	418c      	sbcs	r4, r1
 8001b6e:	444c      	add	r4, r9
 8001b70:	454c      	cmp	r4, r9
 8001b72:	4192      	sbcs	r2, r2
 8001b74:	4252      	negs	r2, r2
 8001b76:	4690      	mov	r8, r2
 8001b78:	4498      	add	r8, r3
 8001b7a:	4643      	mov	r3, r8
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	d5e0      	bpl.n	8001b42 <__aeabi_dsub+0x2e2>
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__aeabi_dsub+0x334>)
 8001b82:	3601      	adds	r6, #1
 8001b84:	429e      	cmp	r6, r3
 8001b86:	d000      	beq.n	8001b8a <__aeabi_dsub+0x32a>
 8001b88:	e09f      	b.n	8001cca <__aeabi_dsub+0x46a>
 8001b8a:	0031      	movs	r1, r6
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	2200      	movs	r2, #0
 8001b90:	e70a      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	000007ff 	.word	0x000007ff
 8001b98:	ff7fffff 	.word	0xff7fffff
 8001b9c:	fffff801 	.word	0xfffff801
 8001ba0:	000007fe 	.word	0x000007fe
 8001ba4:	2a00      	cmp	r2, #0
 8001ba6:	d100      	bne.n	8001baa <__aeabi_dsub+0x34a>
 8001ba8:	e160      	b.n	8001e6c <__aeabi_dsub+0x60c>
 8001baa:	000a      	movs	r2, r1
 8001bac:	4302      	orrs	r2, r0
 8001bae:	d04d      	beq.n	8001c4c <__aeabi_dsub+0x3ec>
 8001bb0:	464a      	mov	r2, r9
 8001bb2:	075c      	lsls	r4, r3, #29
 8001bb4:	08d2      	lsrs	r2, r2, #3
 8001bb6:	4322      	orrs	r2, r4
 8001bb8:	2480      	movs	r4, #128	; 0x80
 8001bba:	08db      	lsrs	r3, r3, #3
 8001bbc:	0324      	lsls	r4, r4, #12
 8001bbe:	4223      	tst	r3, r4
 8001bc0:	d007      	beq.n	8001bd2 <__aeabi_dsub+0x372>
 8001bc2:	08ce      	lsrs	r6, r1, #3
 8001bc4:	4226      	tst	r6, r4
 8001bc6:	d104      	bne.n	8001bd2 <__aeabi_dsub+0x372>
 8001bc8:	465d      	mov	r5, fp
 8001bca:	0033      	movs	r3, r6
 8001bcc:	08c2      	lsrs	r2, r0, #3
 8001bce:	0749      	lsls	r1, r1, #29
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	0f51      	lsrs	r1, r2, #29
 8001bd4:	00d2      	lsls	r2, r2, #3
 8001bd6:	08d2      	lsrs	r2, r2, #3
 8001bd8:	0749      	lsls	r1, r1, #29
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	0011      	movs	r1, r2
 8001bde:	4319      	orrs	r1, r3
 8001be0:	d100      	bne.n	8001be4 <__aeabi_dsub+0x384>
 8001be2:	e1c8      	b.n	8001f76 <__aeabi_dsub+0x716>
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	0309      	lsls	r1, r1, #12
 8001be8:	430b      	orrs	r3, r1
 8001bea:	031b      	lsls	r3, r3, #12
 8001bec:	49d5      	ldr	r1, [pc, #852]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001bee:	0b1b      	lsrs	r3, r3, #12
 8001bf0:	e6da      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001bf2:	49d5      	ldr	r1, [pc, #852]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001bf4:	1ab6      	subs	r6, r6, r2
 8001bf6:	400b      	ands	r3, r1
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	e6b5      	b.n	8001968 <__aeabi_dsub+0x108>
 8001bfc:	0020      	movs	r0, r4
 8001bfe:	f000 fa4d 	bl	800209c <__clzsi2>
 8001c02:	0002      	movs	r2, r0
 8001c04:	3218      	adds	r2, #24
 8001c06:	2a1f      	cmp	r2, #31
 8001c08:	dc00      	bgt.n	8001c0c <__aeabi_dsub+0x3ac>
 8001c0a:	e68f      	b.n	800192c <__aeabi_dsub+0xcc>
 8001c0c:	0023      	movs	r3, r4
 8001c0e:	3808      	subs	r0, #8
 8001c10:	4083      	lsls	r3, r0
 8001c12:	2400      	movs	r4, #0
 8001c14:	e692      	b.n	800193c <__aeabi_dsub+0xdc>
 8001c16:	4308      	orrs	r0, r1
 8001c18:	0002      	movs	r2, r0
 8001c1a:	1e50      	subs	r0, r2, #1
 8001c1c:	4182      	sbcs	r2, r0
 8001c1e:	e66d      	b.n	80018fc <__aeabi_dsub+0x9c>
 8001c20:	4cca      	ldr	r4, [pc, #808]	; (8001f4c <__aeabi_dsub+0x6ec>)
 8001c22:	1c72      	adds	r2, r6, #1
 8001c24:	4222      	tst	r2, r4
 8001c26:	d000      	beq.n	8001c2a <__aeabi_dsub+0x3ca>
 8001c28:	e0ad      	b.n	8001d86 <__aeabi_dsub+0x526>
 8001c2a:	464a      	mov	r2, r9
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	2e00      	cmp	r6, #0
 8001c30:	d1b8      	bne.n	8001ba4 <__aeabi_dsub+0x344>
 8001c32:	2a00      	cmp	r2, #0
 8001c34:	d100      	bne.n	8001c38 <__aeabi_dsub+0x3d8>
 8001c36:	e158      	b.n	8001eea <__aeabi_dsub+0x68a>
 8001c38:	000a      	movs	r2, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	d000      	beq.n	8001c40 <__aeabi_dsub+0x3e0>
 8001c3e:	e159      	b.n	8001ef4 <__aeabi_dsub+0x694>
 8001c40:	464a      	mov	r2, r9
 8001c42:	0759      	lsls	r1, r3, #29
 8001c44:	08d2      	lsrs	r2, r2, #3
 8001c46:	430a      	orrs	r2, r1
 8001c48:	08db      	lsrs	r3, r3, #3
 8001c4a:	e786      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001c4c:	464a      	mov	r2, r9
 8001c4e:	0759      	lsls	r1, r3, #29
 8001c50:	08d2      	lsrs	r2, r2, #3
 8001c52:	430a      	orrs	r2, r1
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	e7c1      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001c58:	4dba      	ldr	r5, [pc, #744]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001c5a:	42aa      	cmp	r2, r5
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x400>
 8001c5e:	e11e      	b.n	8001e9e <__aeabi_dsub+0x63e>
 8001c60:	2580      	movs	r5, #128	; 0x80
 8001c62:	042d      	lsls	r5, r5, #16
 8001c64:	432b      	orrs	r3, r5
 8001c66:	4664      	mov	r4, ip
 8001c68:	2c38      	cmp	r4, #56	; 0x38
 8001c6a:	dc5d      	bgt.n	8001d28 <__aeabi_dsub+0x4c8>
 8001c6c:	2c1f      	cmp	r4, #31
 8001c6e:	dd00      	ble.n	8001c72 <__aeabi_dsub+0x412>
 8001c70:	e0d0      	b.n	8001e14 <__aeabi_dsub+0x5b4>
 8001c72:	2520      	movs	r5, #32
 8001c74:	4667      	mov	r7, ip
 8001c76:	1b2d      	subs	r5, r5, r4
 8001c78:	464e      	mov	r6, r9
 8001c7a:	001c      	movs	r4, r3
 8001c7c:	40fe      	lsrs	r6, r7
 8001c7e:	40ac      	lsls	r4, r5
 8001c80:	4334      	orrs	r4, r6
 8001c82:	464e      	mov	r6, r9
 8001c84:	40ae      	lsls	r6, r5
 8001c86:	0035      	movs	r5, r6
 8001c88:	40fb      	lsrs	r3, r7
 8001c8a:	1e6e      	subs	r6, r5, #1
 8001c8c:	41b5      	sbcs	r5, r6
 8001c8e:	1ac9      	subs	r1, r1, r3
 8001c90:	432c      	orrs	r4, r5
 8001c92:	e04e      	b.n	8001d32 <__aeabi_dsub+0x4d2>
 8001c94:	464a      	mov	r2, r9
 8001c96:	1a14      	subs	r4, r2, r0
 8001c98:	45a1      	cmp	r9, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	4690      	mov	r8, r2
 8001ca0:	1a5f      	subs	r7, r3, r1
 8001ca2:	003a      	movs	r2, r7
 8001ca4:	4647      	mov	r7, r8
 8001ca6:	1bd2      	subs	r2, r2, r7
 8001ca8:	4690      	mov	r8, r2
 8001caa:	0212      	lsls	r2, r2, #8
 8001cac:	d500      	bpl.n	8001cb0 <__aeabi_dsub+0x450>
 8001cae:	e08b      	b.n	8001dc8 <__aeabi_dsub+0x568>
 8001cb0:	4642      	mov	r2, r8
 8001cb2:	4322      	orrs	r2, r4
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x458>
 8001cb6:	e630      	b.n	800191a <__aeabi_dsub+0xba>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	2500      	movs	r5, #0
 8001cbc:	e74d      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001cbe:	464a      	mov	r2, r9
 8001cc0:	0759      	lsls	r1, r3, #29
 8001cc2:	08d2      	lsrs	r2, r2, #3
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	08db      	lsrs	r3, r3, #3
 8001cc8:	e744      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001cca:	4642      	mov	r2, r8
 8001ccc:	4b9e      	ldr	r3, [pc, #632]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001cce:	0861      	lsrs	r1, r4, #1
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	0013      	movs	r3, r2
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4014      	ands	r4, r2
 8001cd8:	430c      	orrs	r4, r1
 8001cda:	07da      	lsls	r2, r3, #31
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	4698      	mov	r8, r3
 8001ce0:	4314      	orrs	r4, r2
 8001ce2:	e641      	b.n	8001968 <__aeabi_dsub+0x108>
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	3e1f      	subs	r6, #31
 8001ce8:	40f2      	lsrs	r2, r6
 8001cea:	0016      	movs	r6, r2
 8001cec:	2920      	cmp	r1, #32
 8001cee:	d003      	beq.n	8001cf8 <__aeabi_dsub+0x498>
 8001cf0:	2240      	movs	r2, #64	; 0x40
 8001cf2:	1a51      	subs	r1, r2, r1
 8001cf4:	408b      	lsls	r3, r1
 8001cf6:	431c      	orrs	r4, r3
 8001cf8:	1e62      	subs	r2, r4, #1
 8001cfa:	4194      	sbcs	r4, r2
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	4334      	orrs	r4, r6
 8001d00:	4698      	mov	r8, r3
 8001d02:	2600      	movs	r6, #0
 8001d04:	e71d      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001d06:	000c      	movs	r4, r1
 8001d08:	3a20      	subs	r2, #32
 8001d0a:	40d4      	lsrs	r4, r2
 8001d0c:	0022      	movs	r2, r4
 8001d0e:	4664      	mov	r4, ip
 8001d10:	2c20      	cmp	r4, #32
 8001d12:	d004      	beq.n	8001d1e <__aeabi_dsub+0x4be>
 8001d14:	2740      	movs	r7, #64	; 0x40
 8001d16:	1b3f      	subs	r7, r7, r4
 8001d18:	40b9      	lsls	r1, r7
 8001d1a:	4308      	orrs	r0, r1
 8001d1c:	4680      	mov	r8, r0
 8001d1e:	4644      	mov	r4, r8
 8001d20:	1e61      	subs	r1, r4, #1
 8001d22:	418c      	sbcs	r4, r1
 8001d24:	4322      	orrs	r2, r4
 8001d26:	e5e9      	b.n	80018fc <__aeabi_dsub+0x9c>
 8001d28:	464c      	mov	r4, r9
 8001d2a:	4323      	orrs	r3, r4
 8001d2c:	001c      	movs	r4, r3
 8001d2e:	1e63      	subs	r3, r4, #1
 8001d30:	419c      	sbcs	r4, r3
 8001d32:	1b04      	subs	r4, r0, r4
 8001d34:	42a0      	cmp	r0, r4
 8001d36:	419b      	sbcs	r3, r3
 8001d38:	425b      	negs	r3, r3
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	4698      	mov	r8, r3
 8001d3e:	465d      	mov	r5, fp
 8001d40:	0016      	movs	r6, r2
 8001d42:	e5e2      	b.n	800190a <__aeabi_dsub+0xaa>
 8001d44:	464e      	mov	r6, r9
 8001d46:	431e      	orrs	r6, r3
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x4ec>
 8001d4a:	e0ae      	b.n	8001eaa <__aeabi_dsub+0x64a>
 8001d4c:	1e66      	subs	r6, r4, #1
 8001d4e:	2c01      	cmp	r4, #1
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x4f4>
 8001d52:	e0fd      	b.n	8001f50 <__aeabi_dsub+0x6f0>
 8001d54:	4f7b      	ldr	r7, [pc, #492]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001d56:	42bc      	cmp	r4, r7
 8001d58:	d100      	bne.n	8001d5c <__aeabi_dsub+0x4fc>
 8001d5a:	e107      	b.n	8001f6c <__aeabi_dsub+0x70c>
 8001d5c:	46b4      	mov	ip, r6
 8001d5e:	e69b      	b.n	8001a98 <__aeabi_dsub+0x238>
 8001d60:	4664      	mov	r4, ip
 8001d62:	2220      	movs	r2, #32
 8001d64:	1b12      	subs	r2, r2, r4
 8001d66:	000c      	movs	r4, r1
 8001d68:	4094      	lsls	r4, r2
 8001d6a:	0007      	movs	r7, r0
 8001d6c:	4090      	lsls	r0, r2
 8001d6e:	46a0      	mov	r8, r4
 8001d70:	4664      	mov	r4, ip
 8001d72:	1e42      	subs	r2, r0, #1
 8001d74:	4190      	sbcs	r0, r2
 8001d76:	4662      	mov	r2, ip
 8001d78:	40e7      	lsrs	r7, r4
 8001d7a:	4644      	mov	r4, r8
 8001d7c:	40d1      	lsrs	r1, r2
 8001d7e:	433c      	orrs	r4, r7
 8001d80:	4304      	orrs	r4, r0
 8001d82:	185b      	adds	r3, r3, r1
 8001d84:	e6f3      	b.n	8001b6e <__aeabi_dsub+0x30e>
 8001d86:	4c6f      	ldr	r4, [pc, #444]	; (8001f44 <__aeabi_dsub+0x6e4>)
 8001d88:	42a2      	cmp	r2, r4
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x52e>
 8001d8c:	e0d5      	b.n	8001f3a <__aeabi_dsub+0x6da>
 8001d8e:	4448      	add	r0, r9
 8001d90:	185b      	adds	r3, r3, r1
 8001d92:	4548      	cmp	r0, r9
 8001d94:	4189      	sbcs	r1, r1
 8001d96:	4249      	negs	r1, r1
 8001d98:	185b      	adds	r3, r3, r1
 8001d9a:	07dc      	lsls	r4, r3, #31
 8001d9c:	0840      	lsrs	r0, r0, #1
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	4698      	mov	r8, r3
 8001da2:	0016      	movs	r6, r2
 8001da4:	4304      	orrs	r4, r0
 8001da6:	e6cc      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d000      	beq.n	8001dae <__aeabi_dsub+0x54e>
 8001dac:	e082      	b.n	8001eb4 <__aeabi_dsub+0x654>
 8001dae:	000a      	movs	r2, r1
 8001db0:	4302      	orrs	r2, r0
 8001db2:	d140      	bne.n	8001e36 <__aeabi_dsub+0x5d6>
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	2500      	movs	r5, #0
 8001db8:	031b      	lsls	r3, r3, #12
 8001dba:	e713      	b.n	8001be4 <__aeabi_dsub+0x384>
 8001dbc:	074b      	lsls	r3, r1, #29
 8001dbe:	08c2      	lsrs	r2, r0, #3
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	465d      	mov	r5, fp
 8001dc4:	08cb      	lsrs	r3, r1, #3
 8001dc6:	e6c5      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001dc8:	464a      	mov	r2, r9
 8001dca:	1a84      	subs	r4, r0, r2
 8001dcc:	42a0      	cmp	r0, r4
 8001dce:	4192      	sbcs	r2, r2
 8001dd0:	1acb      	subs	r3, r1, r3
 8001dd2:	4252      	negs	r2, r2
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	4698      	mov	r8, r3
 8001dd8:	465d      	mov	r5, fp
 8001dda:	e59e      	b.n	800191a <__aeabi_dsub+0xba>
 8001ddc:	464a      	mov	r2, r9
 8001dde:	0759      	lsls	r1, r3, #29
 8001de0:	08d2      	lsrs	r2, r2, #3
 8001de2:	430a      	orrs	r2, r1
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	e6f9      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001de8:	464a      	mov	r2, r9
 8001dea:	1a14      	subs	r4, r2, r0
 8001dec:	45a1      	cmp	r9, r4
 8001dee:	4192      	sbcs	r2, r2
 8001df0:	1a5b      	subs	r3, r3, r1
 8001df2:	4252      	negs	r2, r2
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	4698      	mov	r8, r3
 8001df8:	2601      	movs	r6, #1
 8001dfa:	e586      	b.n	800190a <__aeabi_dsub+0xaa>
 8001dfc:	464a      	mov	r2, r9
 8001dfe:	0759      	lsls	r1, r3, #29
 8001e00:	08d2      	lsrs	r2, r2, #3
 8001e02:	430a      	orrs	r2, r1
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	e6a5      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001e08:	464c      	mov	r4, r9
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	001c      	movs	r4, r3
 8001e0e:	1e63      	subs	r3, r4, #1
 8001e10:	419c      	sbcs	r4, r3
 8001e12:	e65b      	b.n	8001acc <__aeabi_dsub+0x26c>
 8001e14:	4665      	mov	r5, ip
 8001e16:	001e      	movs	r6, r3
 8001e18:	3d20      	subs	r5, #32
 8001e1a:	40ee      	lsrs	r6, r5
 8001e1c:	2c20      	cmp	r4, #32
 8001e1e:	d005      	beq.n	8001e2c <__aeabi_dsub+0x5cc>
 8001e20:	2540      	movs	r5, #64	; 0x40
 8001e22:	1b2d      	subs	r5, r5, r4
 8001e24:	40ab      	lsls	r3, r5
 8001e26:	464c      	mov	r4, r9
 8001e28:	431c      	orrs	r4, r3
 8001e2a:	46a2      	mov	sl, r4
 8001e2c:	4654      	mov	r4, sl
 8001e2e:	1e63      	subs	r3, r4, #1
 8001e30:	419c      	sbcs	r4, r3
 8001e32:	4334      	orrs	r4, r6
 8001e34:	e77d      	b.n	8001d32 <__aeabi_dsub+0x4d2>
 8001e36:	074b      	lsls	r3, r1, #29
 8001e38:	08c2      	lsrs	r2, r0, #3
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	465d      	mov	r5, fp
 8001e3e:	08cb      	lsrs	r3, r1, #3
 8001e40:	e6cc      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001e42:	000a      	movs	r2, r1
 8001e44:	4302      	orrs	r2, r0
 8001e46:	d100      	bne.n	8001e4a <__aeabi_dsub+0x5ea>
 8001e48:	e736      	b.n	8001cb8 <__aeabi_dsub+0x458>
 8001e4a:	074b      	lsls	r3, r1, #29
 8001e4c:	08c2      	lsrs	r2, r0, #3
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	465d      	mov	r5, fp
 8001e52:	08cb      	lsrs	r3, r1, #3
 8001e54:	e681      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001e56:	464a      	mov	r2, r9
 8001e58:	1a84      	subs	r4, r0, r2
 8001e5a:	42a0      	cmp	r0, r4
 8001e5c:	4192      	sbcs	r2, r2
 8001e5e:	1acb      	subs	r3, r1, r3
 8001e60:	4252      	negs	r2, r2
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	4698      	mov	r8, r3
 8001e66:	465d      	mov	r5, fp
 8001e68:	2601      	movs	r6, #1
 8001e6a:	e54e      	b.n	800190a <__aeabi_dsub+0xaa>
 8001e6c:	074b      	lsls	r3, r1, #29
 8001e6e:	08c2      	lsrs	r2, r0, #3
 8001e70:	431a      	orrs	r2, r3
 8001e72:	08cb      	lsrs	r3, r1, #3
 8001e74:	e6b2      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001e76:	464a      	mov	r2, r9
 8001e78:	1a14      	subs	r4, r2, r0
 8001e7a:	45a1      	cmp	r9, r4
 8001e7c:	4192      	sbcs	r2, r2
 8001e7e:	1a5f      	subs	r7, r3, r1
 8001e80:	4252      	negs	r2, r2
 8001e82:	1aba      	subs	r2, r7, r2
 8001e84:	4690      	mov	r8, r2
 8001e86:	0212      	lsls	r2, r2, #8
 8001e88:	d56b      	bpl.n	8001f62 <__aeabi_dsub+0x702>
 8001e8a:	464a      	mov	r2, r9
 8001e8c:	1a84      	subs	r4, r0, r2
 8001e8e:	42a0      	cmp	r0, r4
 8001e90:	4192      	sbcs	r2, r2
 8001e92:	1acb      	subs	r3, r1, r3
 8001e94:	4252      	negs	r2, r2
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	4698      	mov	r8, r3
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	e564      	b.n	8001968 <__aeabi_dsub+0x108>
 8001e9e:	074b      	lsls	r3, r1, #29
 8001ea0:	08c2      	lsrs	r2, r0, #3
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	465d      	mov	r5, fp
 8001ea6:	08cb      	lsrs	r3, r1, #3
 8001ea8:	e698      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001eaa:	074b      	lsls	r3, r1, #29
 8001eac:	08c2      	lsrs	r2, r0, #3
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	08cb      	lsrs	r3, r1, #3
 8001eb2:	e64f      	b.n	8001b54 <__aeabi_dsub+0x2f4>
 8001eb4:	000a      	movs	r2, r1
 8001eb6:	4302      	orrs	r2, r0
 8001eb8:	d090      	beq.n	8001ddc <__aeabi_dsub+0x57c>
 8001eba:	464a      	mov	r2, r9
 8001ebc:	075c      	lsls	r4, r3, #29
 8001ebe:	08d2      	lsrs	r2, r2, #3
 8001ec0:	4314      	orrs	r4, r2
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	0312      	lsls	r2, r2, #12
 8001ec8:	4213      	tst	r3, r2
 8001eca:	d008      	beq.n	8001ede <__aeabi_dsub+0x67e>
 8001ecc:	08ce      	lsrs	r6, r1, #3
 8001ece:	4216      	tst	r6, r2
 8001ed0:	d105      	bne.n	8001ede <__aeabi_dsub+0x67e>
 8001ed2:	08c0      	lsrs	r0, r0, #3
 8001ed4:	0749      	lsls	r1, r1, #29
 8001ed6:	4308      	orrs	r0, r1
 8001ed8:	0004      	movs	r4, r0
 8001eda:	465d      	mov	r5, fp
 8001edc:	0033      	movs	r3, r6
 8001ede:	0f61      	lsrs	r1, r4, #29
 8001ee0:	00e2      	lsls	r2, r4, #3
 8001ee2:	0749      	lsls	r1, r1, #29
 8001ee4:	08d2      	lsrs	r2, r2, #3
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	e678      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001eea:	074b      	lsls	r3, r1, #29
 8001eec:	08c2      	lsrs	r2, r0, #3
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	08cb      	lsrs	r3, r1, #3
 8001ef2:	e632      	b.n	8001b5a <__aeabi_dsub+0x2fa>
 8001ef4:	4448      	add	r0, r9
 8001ef6:	185b      	adds	r3, r3, r1
 8001ef8:	4548      	cmp	r0, r9
 8001efa:	4192      	sbcs	r2, r2
 8001efc:	4698      	mov	r8, r3
 8001efe:	4252      	negs	r2, r2
 8001f00:	4490      	add	r8, r2
 8001f02:	4643      	mov	r3, r8
 8001f04:	0004      	movs	r4, r0
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	d400      	bmi.n	8001f0c <__aeabi_dsub+0x6ac>
 8001f0a:	e61a      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f0c:	4642      	mov	r2, r8
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <__aeabi_dsub+0x6e8>)
 8001f10:	2601      	movs	r6, #1
 8001f12:	401a      	ands	r2, r3
 8001f14:	4690      	mov	r8, r2
 8001f16:	e614      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f18:	4666      	mov	r6, ip
 8001f1a:	001f      	movs	r7, r3
 8001f1c:	3e20      	subs	r6, #32
 8001f1e:	40f7      	lsrs	r7, r6
 8001f20:	2c20      	cmp	r4, #32
 8001f22:	d005      	beq.n	8001f30 <__aeabi_dsub+0x6d0>
 8001f24:	2640      	movs	r6, #64	; 0x40
 8001f26:	1b36      	subs	r6, r6, r4
 8001f28:	40b3      	lsls	r3, r6
 8001f2a:	464c      	mov	r4, r9
 8001f2c:	431c      	orrs	r4, r3
 8001f2e:	46a2      	mov	sl, r4
 8001f30:	4654      	mov	r4, sl
 8001f32:	1e63      	subs	r3, r4, #1
 8001f34:	419c      	sbcs	r4, r3
 8001f36:	433c      	orrs	r4, r7
 8001f38:	e5c8      	b.n	8001acc <__aeabi_dsub+0x26c>
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2200      	movs	r2, #0
 8001f40:	e532      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	000007ff 	.word	0x000007ff
 8001f48:	ff7fffff 	.word	0xff7fffff
 8001f4c:	000007fe 	.word	0x000007fe
 8001f50:	464a      	mov	r2, r9
 8001f52:	1814      	adds	r4, r2, r0
 8001f54:	4284      	cmp	r4, r0
 8001f56:	4192      	sbcs	r2, r2
 8001f58:	185b      	adds	r3, r3, r1
 8001f5a:	4698      	mov	r8, r3
 8001f5c:	4252      	negs	r2, r2
 8001f5e:	4490      	add	r8, r2
 8001f60:	e5e9      	b.n	8001b36 <__aeabi_dsub+0x2d6>
 8001f62:	4642      	mov	r2, r8
 8001f64:	4322      	orrs	r2, r4
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x70a>
 8001f68:	e6a6      	b.n	8001cb8 <__aeabi_dsub+0x458>
 8001f6a:	e5ea      	b.n	8001b42 <__aeabi_dsub+0x2e2>
 8001f6c:	074b      	lsls	r3, r1, #29
 8001f6e:	08c2      	lsrs	r2, r0, #3
 8001f70:	431a      	orrs	r2, r3
 8001f72:	08cb      	lsrs	r3, r1, #3
 8001f74:	e632      	b.n	8001bdc <__aeabi_dsub+0x37c>
 8001f76:	2200      	movs	r2, #0
 8001f78:	4901      	ldr	r1, [pc, #4]	; (8001f80 <__aeabi_dsub+0x720>)
 8001f7a:	0013      	movs	r3, r2
 8001f7c:	e514      	b.n	80019a8 <__aeabi_dsub+0x148>
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	000007ff 	.word	0x000007ff

08001f84 <__aeabi_d2iz>:
 8001f84:	000a      	movs	r2, r1
 8001f86:	b530      	push	{r4, r5, lr}
 8001f88:	4c13      	ldr	r4, [pc, #76]	; (8001fd8 <__aeabi_d2iz+0x54>)
 8001f8a:	0053      	lsls	r3, r2, #1
 8001f8c:	0309      	lsls	r1, r1, #12
 8001f8e:	0005      	movs	r5, r0
 8001f90:	0b09      	lsrs	r1, r1, #12
 8001f92:	2000      	movs	r0, #0
 8001f94:	0d5b      	lsrs	r3, r3, #21
 8001f96:	0fd2      	lsrs	r2, r2, #31
 8001f98:	42a3      	cmp	r3, r4
 8001f9a:	dd04      	ble.n	8001fa6 <__aeabi_d2iz+0x22>
 8001f9c:	480f      	ldr	r0, [pc, #60]	; (8001fdc <__aeabi_d2iz+0x58>)
 8001f9e:	4283      	cmp	r3, r0
 8001fa0:	dd02      	ble.n	8001fa8 <__aeabi_d2iz+0x24>
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <__aeabi_d2iz+0x5c>)
 8001fa4:	18d0      	adds	r0, r2, r3
 8001fa6:	bd30      	pop	{r4, r5, pc}
 8001fa8:	2080      	movs	r0, #128	; 0x80
 8001faa:	0340      	lsls	r0, r0, #13
 8001fac:	4301      	orrs	r1, r0
 8001fae:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <__aeabi_d2iz+0x60>)
 8001fb0:	1ac0      	subs	r0, r0, r3
 8001fb2:	281f      	cmp	r0, #31
 8001fb4:	dd08      	ble.n	8001fc8 <__aeabi_d2iz+0x44>
 8001fb6:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <__aeabi_d2iz+0x64>)
 8001fb8:	1ac3      	subs	r3, r0, r3
 8001fba:	40d9      	lsrs	r1, r3
 8001fbc:	000b      	movs	r3, r1
 8001fbe:	4258      	negs	r0, r3
 8001fc0:	2a00      	cmp	r2, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <__aeabi_d2iz+0x22>
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	e7ee      	b.n	8001fa6 <__aeabi_d2iz+0x22>
 8001fc8:	4c08      	ldr	r4, [pc, #32]	; (8001fec <__aeabi_d2iz+0x68>)
 8001fca:	40c5      	lsrs	r5, r0
 8001fcc:	46a4      	mov	ip, r4
 8001fce:	4463      	add	r3, ip
 8001fd0:	4099      	lsls	r1, r3
 8001fd2:	000b      	movs	r3, r1
 8001fd4:	432b      	orrs	r3, r5
 8001fd6:	e7f2      	b.n	8001fbe <__aeabi_d2iz+0x3a>
 8001fd8:	000003fe 	.word	0x000003fe
 8001fdc:	0000041d 	.word	0x0000041d
 8001fe0:	7fffffff 	.word	0x7fffffff
 8001fe4:	00000433 	.word	0x00000433
 8001fe8:	00000413 	.word	0x00000413
 8001fec:	fffffbed 	.word	0xfffffbed

08001ff0 <__aeabi_i2d>:
 8001ff0:	b570      	push	{r4, r5, r6, lr}
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d016      	beq.n	8002024 <__aeabi_i2d+0x34>
 8001ff6:	17c3      	asrs	r3, r0, #31
 8001ff8:	18c5      	adds	r5, r0, r3
 8001ffa:	405d      	eors	r5, r3
 8001ffc:	0fc4      	lsrs	r4, r0, #31
 8001ffe:	0028      	movs	r0, r5
 8002000:	f000 f84c 	bl	800209c <__clzsi2>
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <__aeabi_i2d+0x5c>)
 8002006:	1a12      	subs	r2, r2, r0
 8002008:	280a      	cmp	r0, #10
 800200a:	dc16      	bgt.n	800203a <__aeabi_i2d+0x4a>
 800200c:	0003      	movs	r3, r0
 800200e:	002e      	movs	r6, r5
 8002010:	3315      	adds	r3, #21
 8002012:	409e      	lsls	r6, r3
 8002014:	230b      	movs	r3, #11
 8002016:	1a18      	subs	r0, r3, r0
 8002018:	40c5      	lsrs	r5, r0
 800201a:	0553      	lsls	r3, r2, #21
 800201c:	032d      	lsls	r5, r5, #12
 800201e:	0b2d      	lsrs	r5, r5, #12
 8002020:	0d5b      	lsrs	r3, r3, #21
 8002022:	e003      	b.n	800202c <__aeabi_i2d+0x3c>
 8002024:	2400      	movs	r4, #0
 8002026:	2300      	movs	r3, #0
 8002028:	2500      	movs	r5, #0
 800202a:	2600      	movs	r6, #0
 800202c:	051b      	lsls	r3, r3, #20
 800202e:	432b      	orrs	r3, r5
 8002030:	07e4      	lsls	r4, r4, #31
 8002032:	4323      	orrs	r3, r4
 8002034:	0030      	movs	r0, r6
 8002036:	0019      	movs	r1, r3
 8002038:	bd70      	pop	{r4, r5, r6, pc}
 800203a:	380b      	subs	r0, #11
 800203c:	4085      	lsls	r5, r0
 800203e:	0553      	lsls	r3, r2, #21
 8002040:	032d      	lsls	r5, r5, #12
 8002042:	2600      	movs	r6, #0
 8002044:	0b2d      	lsrs	r5, r5, #12
 8002046:	0d5b      	lsrs	r3, r3, #21
 8002048:	e7f0      	b.n	800202c <__aeabi_i2d+0x3c>
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	0000041e 	.word	0x0000041e

08002050 <__aeabi_ui2d>:
 8002050:	b510      	push	{r4, lr}
 8002052:	1e04      	subs	r4, r0, #0
 8002054:	d010      	beq.n	8002078 <__aeabi_ui2d+0x28>
 8002056:	f000 f821 	bl	800209c <__clzsi2>
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <__aeabi_ui2d+0x48>)
 800205c:	1a1b      	subs	r3, r3, r0
 800205e:	280a      	cmp	r0, #10
 8002060:	dc11      	bgt.n	8002086 <__aeabi_ui2d+0x36>
 8002062:	220b      	movs	r2, #11
 8002064:	0021      	movs	r1, r4
 8002066:	1a12      	subs	r2, r2, r0
 8002068:	40d1      	lsrs	r1, r2
 800206a:	3015      	adds	r0, #21
 800206c:	030a      	lsls	r2, r1, #12
 800206e:	055b      	lsls	r3, r3, #21
 8002070:	4084      	lsls	r4, r0
 8002072:	0b12      	lsrs	r2, r2, #12
 8002074:	0d5b      	lsrs	r3, r3, #21
 8002076:	e001      	b.n	800207c <__aeabi_ui2d+0x2c>
 8002078:	2300      	movs	r3, #0
 800207a:	2200      	movs	r2, #0
 800207c:	051b      	lsls	r3, r3, #20
 800207e:	4313      	orrs	r3, r2
 8002080:	0020      	movs	r0, r4
 8002082:	0019      	movs	r1, r3
 8002084:	bd10      	pop	{r4, pc}
 8002086:	0022      	movs	r2, r4
 8002088:	380b      	subs	r0, #11
 800208a:	4082      	lsls	r2, r0
 800208c:	055b      	lsls	r3, r3, #21
 800208e:	0312      	lsls	r2, r2, #12
 8002090:	2400      	movs	r4, #0
 8002092:	0b12      	lsrs	r2, r2, #12
 8002094:	0d5b      	lsrs	r3, r3, #21
 8002096:	e7f1      	b.n	800207c <__aeabi_ui2d+0x2c>
 8002098:	0000041e 	.word	0x0000041e

0800209c <__clzsi2>:
 800209c:	211c      	movs	r1, #28
 800209e:	2301      	movs	r3, #1
 80020a0:	041b      	lsls	r3, r3, #16
 80020a2:	4298      	cmp	r0, r3
 80020a4:	d301      	bcc.n	80020aa <__clzsi2+0xe>
 80020a6:	0c00      	lsrs	r0, r0, #16
 80020a8:	3910      	subs	r1, #16
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	4298      	cmp	r0, r3
 80020ae:	d301      	bcc.n	80020b4 <__clzsi2+0x18>
 80020b0:	0a00      	lsrs	r0, r0, #8
 80020b2:	3908      	subs	r1, #8
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	4298      	cmp	r0, r3
 80020b8:	d301      	bcc.n	80020be <__clzsi2+0x22>
 80020ba:	0900      	lsrs	r0, r0, #4
 80020bc:	3904      	subs	r1, #4
 80020be:	a202      	add	r2, pc, #8	; (adr r2, 80020c8 <__clzsi2+0x2c>)
 80020c0:	5c10      	ldrb	r0, [r2, r0]
 80020c2:	1840      	adds	r0, r0, r1
 80020c4:	4770      	bx	lr
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	02020304 	.word	0x02020304
 80020cc:	01010101 	.word	0x01010101
	...

080020d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	0002      	movs	r2, r0
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020e4:	1dfb      	adds	r3, r7, #7
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ea:	d809      	bhi.n	8002100 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ec:	1dfb      	adds	r3, r7, #7
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	001a      	movs	r2, r3
 80020f2:	231f      	movs	r3, #31
 80020f4:	401a      	ands	r2, r3
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <__NVIC_EnableIRQ+0x30>)
 80020f8:	2101      	movs	r1, #1
 80020fa:	4091      	lsls	r1, r2
 80020fc:	000a      	movs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	0002      	movs	r2, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	1dfb      	adds	r3, r7, #7
 8002118:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800211a:	1dfb      	adds	r3, r7, #7
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b7f      	cmp	r3, #127	; 0x7f
 8002120:	d828      	bhi.n	8002174 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002122:	4a2f      	ldr	r2, [pc, #188]	; (80021e0 <__NVIC_SetPriority+0xd4>)
 8002124:	1dfb      	adds	r3, r7, #7
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b25b      	sxtb	r3, r3
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	33c0      	adds	r3, #192	; 0xc0
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	589b      	ldr	r3, [r3, r2]
 8002132:	1dfa      	adds	r2, r7, #7
 8002134:	7812      	ldrb	r2, [r2, #0]
 8002136:	0011      	movs	r1, r2
 8002138:	2203      	movs	r2, #3
 800213a:	400a      	ands	r2, r1
 800213c:	00d2      	lsls	r2, r2, #3
 800213e:	21ff      	movs	r1, #255	; 0xff
 8002140:	4091      	lsls	r1, r2
 8002142:	000a      	movs	r2, r1
 8002144:	43d2      	mvns	r2, r2
 8002146:	401a      	ands	r2, r3
 8002148:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	019b      	lsls	r3, r3, #6
 800214e:	22ff      	movs	r2, #255	; 0xff
 8002150:	401a      	ands	r2, r3
 8002152:	1dfb      	adds	r3, r7, #7
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	0018      	movs	r0, r3
 8002158:	2303      	movs	r3, #3
 800215a:	4003      	ands	r3, r0
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002160:	481f      	ldr	r0, [pc, #124]	; (80021e0 <__NVIC_SetPriority+0xd4>)
 8002162:	1dfb      	adds	r3, r7, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b25b      	sxtb	r3, r3
 8002168:	089b      	lsrs	r3, r3, #2
 800216a:	430a      	orrs	r2, r1
 800216c:	33c0      	adds	r3, #192	; 0xc0
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002172:	e031      	b.n	80021d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002174:	4a1b      	ldr	r2, [pc, #108]	; (80021e4 <__NVIC_SetPriority+0xd8>)
 8002176:	1dfb      	adds	r3, r7, #7
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	0019      	movs	r1, r3
 800217c:	230f      	movs	r3, #15
 800217e:	400b      	ands	r3, r1
 8002180:	3b08      	subs	r3, #8
 8002182:	089b      	lsrs	r3, r3, #2
 8002184:	3306      	adds	r3, #6
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	18d3      	adds	r3, r2, r3
 800218a:	3304      	adds	r3, #4
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	1dfa      	adds	r2, r7, #7
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	0011      	movs	r1, r2
 8002194:	2203      	movs	r2, #3
 8002196:	400a      	ands	r2, r1
 8002198:	00d2      	lsls	r2, r2, #3
 800219a:	21ff      	movs	r1, #255	; 0xff
 800219c:	4091      	lsls	r1, r2
 800219e:	000a      	movs	r2, r1
 80021a0:	43d2      	mvns	r2, r2
 80021a2:	401a      	ands	r2, r3
 80021a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	019b      	lsls	r3, r3, #6
 80021aa:	22ff      	movs	r2, #255	; 0xff
 80021ac:	401a      	ands	r2, r3
 80021ae:	1dfb      	adds	r3, r7, #7
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	0018      	movs	r0, r3
 80021b4:	2303      	movs	r3, #3
 80021b6:	4003      	ands	r3, r0
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021bc:	4809      	ldr	r0, [pc, #36]	; (80021e4 <__NVIC_SetPriority+0xd8>)
 80021be:	1dfb      	adds	r3, r7, #7
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	001c      	movs	r4, r3
 80021c4:	230f      	movs	r3, #15
 80021c6:	4023      	ands	r3, r4
 80021c8:	3b08      	subs	r3, #8
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	430a      	orrs	r2, r1
 80021ce:	3306      	adds	r3, #6
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	18c3      	adds	r3, r0, r3
 80021d4:	3304      	adds	r3, #4
 80021d6:	601a      	str	r2, [r3, #0]
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	b003      	add	sp, #12
 80021de:	bd90      	pop	{r4, r7, pc}
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2201      	movs	r2, #1
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	601a      	str	r2, [r3, #0]
}
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b002      	add	sp, #8
 8002202:	bd80      	pop	{r7, pc}

08002204 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a03      	ldr	r2, [pc, #12]	; (8002220 <LL_USART_DisableFIFO+0x1c>)
 8002212:	401a      	ands	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	601a      	str	r2, [r3, #0]
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}
 8002220:	dfffffff 	.word	0xdfffffff

08002224 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	075b      	lsls	r3, r3, #29
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}

08002248 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <LL_USART_SetRXFIFOThreshold+0x24>)
 8002258:	401a      	ands	r2, r3
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	065b      	lsls	r3, r3, #25
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}
 800226c:	f1ffffff 	.word	0xf1ffffff

08002270 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <LL_USART_ConfigAsyncMode+0x2c>)
 800227e:	401a      	ands	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	222a      	movs	r2, #42	; 0x2a
 800228a:	4393      	bics	r3, r2
 800228c:	001a      	movs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	609a      	str	r2, [r3, #8]
}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	46bd      	mov	sp, r7
 8002296:	b002      	add	sp, #8
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	ffffb7ff 	.word	0xffffb7ff

080022a0 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	039b      	lsls	r3, r3, #14
 80022b0:	401a      	ands	r2, r3
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	039b      	lsls	r3, r3, #14
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d101      	bne.n	80022be <LL_USART_IsActiveFlag_TEACK+0x1e>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <LL_USART_IsActiveFlag_TEACK+0x20>
 80022be:	2300      	movs	r3, #0
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b002      	add	sp, #8
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69da      	ldr	r2, [r3, #28]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	03db      	lsls	r3, r3, #15
 80022d8:	401a      	ands	r2, r3
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	03db      	lsls	r3, r3, #15
 80022de:	429a      	cmp	r2, r3
 80022e0:	d101      	bne.n	80022e6 <LL_USART_IsActiveFlag_REACK+0x1e>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_USART_IsActiveFlag_REACK+0x20>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2220      	movs	r2, #32
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	601a      	str	r2, [r3, #0]
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}

0800230c <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2201      	movs	r2, #1
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	609a      	str	r2, [r3, #8]
}
 8002320:	46c0      	nop			; (mov r8, r8)
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}

08002328 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	b29b      	uxth	r3, r3
 8002336:	05db      	lsls	r3, r3, #23
 8002338:	0ddb      	lsrs	r3, r3, #23
 800233a:	b29b      	uxth	r3, r3
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}

08002344 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800234e:	6819      	ldr	r1, [r3, #0]
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40010000 	.word	0x40010000

08002364 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	619a      	str	r2, [r3, #24]
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b002      	add	sp, #8
 800237a:	bd80      	pop	{r7, pc}

0800237c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b002      	add	sp, #8
 8002392:	bd80      	pop	{r7, pc}

08002394 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <LL_APB1_GRP1_EnableClock+0x28>)
 800239e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <LL_APB1_GRP1_EnableClock+0x28>)
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <LL_APB1_GRP1_EnableClock+0x28>)
 80023aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4013      	ands	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b004      	add	sp, #16
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000

080023c0 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80023ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <LL_IOP_GRP1_EnableClock+0x28>)
 80023d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	4013      	ands	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	46c0      	nop			; (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	b004      	add	sp, #16
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000

080023ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80023f2:	231e      	movs	r3, #30
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	2200      	movs	r2, #0
 80023f8:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80023fa:	231c      	movs	r3, #28
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	2200      	movs	r2, #0
 8002400:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8002402:	231a      	movs	r3, #26
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	2200      	movs	r2, #0
 8002408:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 800240a:	2318      	movs	r3, #24
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2200      	movs	r2, #0
 8002410:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 8002412:	2316      	movs	r3, #22
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2201      	movs	r2, #1
 8002418:	4252      	negs	r2, r2
 800241a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800241c:	f003 fa8c 	bl	8005938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002420:	f000 f894 	bl	800254c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002424:	4b43      	ldr	r3, [pc, #268]	; (8002534 <main+0x148>)
 8002426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002428:	4b42      	ldr	r3, [pc, #264]	; (8002534 <main+0x148>)
 800242a:	2101      	movs	r1, #1
 800242c:	430a      	orrs	r2, r1
 800242e:	635a      	str	r2, [r3, #52]	; 0x34
 8002430:	4b40      	ldr	r3, [pc, #256]	; (8002534 <main+0x148>)
 8002432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002434:	2201      	movs	r2, #1
 8002436:	4013      	ands	r3, r2
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800243c:	4b3d      	ldr	r3, [pc, #244]	; (8002534 <main+0x148>)
 800243e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002440:	4b3c      	ldr	r3, [pc, #240]	; (8002534 <main+0x148>)
 8002442:	2102      	movs	r1, #2
 8002444:	430a      	orrs	r2, r1
 8002446:	635a      	str	r2, [r3, #52]	; 0x34
 8002448:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <main+0x148>)
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244c:	2202      	movs	r2, #2
 800244e:	4013      	ands	r3, r2
 8002450:	607b      	str	r3, [r7, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002454:	4b37      	ldr	r3, [pc, #220]	; (8002534 <main+0x148>)
 8002456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002458:	4b36      	ldr	r3, [pc, #216]	; (8002534 <main+0x148>)
 800245a:	2104      	movs	r1, #4
 800245c:	430a      	orrs	r2, r1
 800245e:	635a      	str	r2, [r3, #52]	; 0x34
 8002460:	4b34      	ldr	r3, [pc, #208]	; (8002534 <main+0x148>)
 8002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002464:	2204      	movs	r2, #4
 8002466:	4013      	ands	r3, r2
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800246c:	f000 fbd6 	bl	8002c1c <MX_GPIO_Init>
  MX_DMA_Init();
 8002470:	f000 fba6 	bl	8002bc0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002474:	f000 fac4 	bl	8002a00 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8002478:	f000 f8e8 	bl	800264c <MX_COMP1_Init>
  MX_TIM1_Init();
 800247c:	f000 f9c6 	bl	800280c <MX_TIM1_Init>
  MX_USART3_Init();
 8002480:	f000 fb5c 	bl	8002b3c <MX_USART3_Init>
  MX_I2S1_Init();
 8002484:	f000 f954 	bl	8002730 <MX_I2S1_Init>
  MX_I2C1_Init();
 8002488:	f000 f912 	bl	80026b0 <MX_I2C1_Init>
  MX_SPI2_Init();
 800248c:	f000 f97a 	bl	8002784 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 8002490:	4b29      	ldr	r3, [pc, #164]	; (8002538 <main+0x14c>)
 8002492:	0018      	movs	r0, r3
 8002494:	f003 fd1e 	bl	8005ed4 <HAL_COMP_Start>
	HAL_Delay(100);
 8002498:	2064      	movs	r0, #100	; 0x64
 800249a:	f003 fad3 	bl	8005a44 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800249e:	f001 fe19 	bl	80040d4 <MEM_Reset>

	weoInit();
 80024a2:	f000 fecd 	bl	8003240 <weoInit>
	HAL_Delay(1);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f003 facc 	bl	8005a44 <HAL_Delay>
	weoClear();
 80024ac:	f000 ff34 	bl	8003318 <weoClear>
	MEM_GetID();
 80024b0:	f002 f8a0 	bl	80045f4 <MEM_GetID>
	soundSetup();
 80024b4:	f001 f940 	bl	8003738 <soundSetup>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80024b8:	4b20      	ldr	r3, [pc, #128]	; (800253c <main+0x150>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b1f      	ldr	r3, [pc, #124]	; (800253c <main+0x150>)
 80024be:	4920      	ldr	r1, [pc, #128]	; (8002540 <main+0x154>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <main+0x150>)
 80024c6:	0018      	movs	r0, r3
 80024c8:	f7ff ff12 	bl	80022f0 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <main+0x150>)
 80024ce:	0018      	movs	r0, r3
 80024d0:	f7ff ff1c 	bl	800230c <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <main+0x150>)
 80024d6:	6a1a      	ldr	r2, [r3, #32]
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <main+0x150>)
 80024da:	2108      	movs	r1, #8
 80024dc:	430a      	orrs	r2, r1
 80024de:	621a      	str	r2, [r3, #32]

	I2C_SOUND_ChangePage(0x01);
 80024e0:	2001      	movs	r0, #1
 80024e2:	f001 f8e9 	bl	80036b8 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80024e6:	2100      	movs	r1, #0
 80024e8:	2010      	movs	r0, #16
 80024ea:	f001 f903 	bl	80036f4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 80024ee:	2124      	movs	r1, #36	; 0x24
 80024f0:	202e      	movs	r0, #46	; 0x2e
 80024f2:	f001 f8ff 	bl	80036f4 <WriteReg_I2C_SOUND>
    squeak_triple();
 80024f6:	f002 fcf9 	bl	8004eec <squeak_triple>
//    HAL_Delay(500);
//    squeak_long();

	uint8_t x=0x02;
 80024fa:	2315      	movs	r3, #21
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	2202      	movs	r2, #2
 8002500:	701a      	strb	r2, [r3, #0]
	uint8_t y=0x04;
 8002502:	2314      	movs	r3, #20
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	2204      	movs	r2, #4
 8002508:	701a      	strb	r2, [r3, #0]
//				if(y % 2 !=0){
//					decY=0x02;
//				}
//	weoDrawRectangleFilled(x,y,(x+localWidth-1),(y+localHeight-decY),0xFF,aim);

	I2C_SOUND_ChangePage(0x01);
 800250a:	2001      	movs	r0, #1
 800250c:	f001 f8d4 	bl	80036b8 <I2C_SOUND_ChangePage>
//	WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
	WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8002510:	2124      	movs	r1, #36	; 0x24
 8002512:	202e      	movs	r0, #46	; 0x2e
 8002514:	f001 f8ee 	bl	80036f4 <WriteReg_I2C_SOUND>

	GPIOC->ODR |= 1 << 6;
 8002518:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <main+0x158>)
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <main+0x158>)
 800251e:	2140      	movs	r1, #64	; 0x40
 8002520:	430a      	orrs	r2, r1
 8002522:	615a      	str	r2, [r3, #20]
	while (1) {
		cmdExecute(cmd2Execute);
 8002524:	4b08      	ldr	r3, [pc, #32]	; (8002548 <main+0x15c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	0018      	movs	r0, r3
 800252a:	f002 f8cb 	bl	80046c4 <cmdExecute>
//		squeak_single();
		Scount();
 800252e:	f002 f8c3 	bl	80046b8 <Scount>
		cmdExecute(cmd2Execute);
 8002532:	e7f7      	b.n	8002524 <main+0x138>
 8002534:	40021000 	.word	0x40021000
 8002538:	2000025c 	.word	0x2000025c
 800253c:	40004400 	.word	0x40004400
 8002540:	1000100d 	.word	0x1000100d
 8002544:	50000800 	.word	0x50000800
 8002548:	20000372 	.word	0x20000372

0800254c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b0a1      	sub	sp, #132	; 0x84
 8002550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002552:	2448      	movs	r4, #72	; 0x48
 8002554:	193b      	adds	r3, r7, r4
 8002556:	0018      	movs	r0, r3
 8002558:	2338      	movs	r3, #56	; 0x38
 800255a:	001a      	movs	r2, r3
 800255c:	2100      	movs	r1, #0
 800255e:	f00b fa41 	bl	800d9e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002562:	2338      	movs	r3, #56	; 0x38
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	0018      	movs	r0, r3
 8002568:	2310      	movs	r3, #16
 800256a:	001a      	movs	r2, r3
 800256c:	2100      	movs	r1, #0
 800256e:	f00b fa39 	bl	800d9e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	0018      	movs	r0, r3
 8002576:	2334      	movs	r3, #52	; 0x34
 8002578:	001a      	movs	r2, r3
 800257a:	2100      	movs	r1, #0
 800257c:	f00b fa32 	bl	800d9e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	0018      	movs	r0, r3
 8002586:	f005 ff9b 	bl	80084c0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800258a:	193b      	adds	r3, r7, r4
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002590:	193b      	adds	r3, r7, r4
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	0052      	lsls	r2, r2, #1
 8002596:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002598:	0021      	movs	r1, r4
 800259a:	187b      	adds	r3, r7, r1
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	2240      	movs	r2, #64	; 0x40
 80025a4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025a6:	187b      	adds	r3, r7, r1
 80025a8:	2202      	movs	r2, #2
 80025aa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	2202      	movs	r2, #2
 80025b0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80025b2:	187b      	adds	r3, r7, r1
 80025b4:	2200      	movs	r2, #0
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80025b8:	187b      	adds	r3, r7, r1
 80025ba:	2208      	movs	r2, #8
 80025bc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025be:	187b      	adds	r3, r7, r1
 80025c0:	2280      	movs	r2, #128	; 0x80
 80025c2:	0292      	lsls	r2, r2, #10
 80025c4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2280      	movs	r2, #128	; 0x80
 80025ca:	0492      	lsls	r2, r2, #18
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	2280      	movs	r2, #128	; 0x80
 80025d2:	0592      	lsls	r2, r2, #22
 80025d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d6:	187b      	adds	r3, r7, r1
 80025d8:	0018      	movs	r0, r3
 80025da:	f005 ffbd 	bl	8008558 <HAL_RCC_OscConfig>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d001      	beq.n	80025e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80025e2:	f002 fd27 	bl	8005034 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e6:	2138      	movs	r1, #56	; 0x38
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	2207      	movs	r2, #7
 80025ec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ee:	187b      	adds	r3, r7, r1
 80025f0:	2202      	movs	r2, #2
 80025f2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f4:	187b      	adds	r3, r7, r1
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025fa:	187b      	adds	r3, r7, r1
 80025fc:	2200      	movs	r2, #0
 80025fe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002600:	187b      	adds	r3, r7, r1
 8002602:	2102      	movs	r1, #2
 8002604:	0018      	movs	r0, r3
 8002606:	f006 fac7 	bl	8008b98 <HAL_RCC_ClockConfig>
 800260a:	1e03      	subs	r3, r0, #0
 800260c:	d001      	beq.n	8002612 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800260e:	f002 fd11 	bl	8005034 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	4a0c      	ldr	r2, [pc, #48]	; (8002648 <SystemClock_Config+0xfc>)
 8002616:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	2200      	movs	r2, #0
 8002628:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	2200      	movs	r2, #0
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	0018      	movs	r0, r3
 8002634:	f006 fc5a 	bl	8008eec <HAL_RCCEx_PeriphCLKConfig>
 8002638:	1e03      	subs	r3, r0, #0
 800263a:	d001      	beq.n	8002640 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800263c:	f002 fcfa 	bl	8005034 <Error_Handler>
  }
}
 8002640:	46c0      	nop			; (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	b021      	add	sp, #132	; 0x84
 8002646:	bd90      	pop	{r4, r7, pc}
 8002648:	00200822 	.word	0x00200822

0800264c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002652:	4a16      	ldr	r2, [pc, #88]	; (80026ac <MX_COMP1_Init+0x60>)
 8002654:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8002656:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	0052      	lsls	r2, r2, #1
 800265c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002660:	2230      	movs	r2, #48	; 0x30
 8002662:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <MX_COMP1_Init+0x5c>)
 800266c:	2200      	movs	r2, #0
 800266e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002670:	4b0d      	ldr	r3, [pc, #52]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002672:	2200      	movs	r2, #0
 8002674:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002678:	2280      	movs	r2, #128	; 0x80
 800267a:	0392      	lsls	r2, r2, #14
 800267c:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002686:	2200      	movs	r2, #0
 8002688:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <MX_COMP1_Init+0x5c>)
 800268c:	2212      	movs	r2, #18
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <MX_COMP1_Init+0x5c>)
 8002692:	0018      	movs	r0, r3
 8002694:	f003 fabc 	bl	8005c10 <HAL_COMP_Init>
 8002698:	1e03      	subs	r3, r0, #0
 800269a:	d001      	beq.n	80026a0 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 800269c:	f002 fcca 	bl	8005034 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80026a0:	46c0      	nop			; (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	2000025c 	.word	0x2000025c
 80026ac:	40010200 	.word	0x40010200

080026b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026b4:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <MX_I2C1_Init+0x74>)
 80026b6:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <MX_I2C1_Init+0x78>)
 80026b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80026ba:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <MX_I2C1_Init+0x74>)
 80026bc:	4a1b      	ldr	r2, [pc, #108]	; (800272c <MX_I2C1_Init+0x7c>)
 80026be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026c0:	4b18      	ldr	r3, [pc, #96]	; (8002724 <MX_I2C1_Init+0x74>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026c6:	4b17      	ldr	r3, [pc, #92]	; (8002724 <MX_I2C1_Init+0x74>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026cc:	4b15      	ldr	r3, [pc, #84]	; (8002724 <MX_I2C1_Init+0x74>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <MX_I2C1_Init+0x74>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <MX_I2C1_Init+0x74>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <MX_I2C1_Init+0x74>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <MX_I2C1_Init+0x74>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <MX_I2C1_Init+0x74>)
 80026ec:	0018      	movs	r0, r3
 80026ee:	f004 f94d 	bl	800698c <HAL_I2C_Init>
 80026f2:	1e03      	subs	r3, r0, #0
 80026f4:	d001      	beq.n	80026fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026f6:	f002 fc9d 	bl	8005034 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <MX_I2C1_Init+0x74>)
 80026fc:	2100      	movs	r1, #0
 80026fe:	0018      	movs	r0, r3
 8002700:	f005 fa38 	bl	8007b74 <HAL_I2CEx_ConfigAnalogFilter>
 8002704:	1e03      	subs	r3, r0, #0
 8002706:	d001      	beq.n	800270c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002708:	f002 fc94 	bl	8005034 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <MX_I2C1_Init+0x74>)
 800270e:	2100      	movs	r1, #0
 8002710:	0018      	movs	r0, r3
 8002712:	f005 fa7b 	bl	8007c0c <HAL_I2CEx_ConfigDigitalFilter>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d001      	beq.n	800271e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800271a:	f002 fc8b 	bl	8005034 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000138 	.word	0x20000138
 8002728:	40005400 	.word	0x40005400
 800272c:	1094102c 	.word	0x1094102c

08002730 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <MX_I2S1_Init+0x4c>)
 8002736:	4a12      	ldr	r2, [pc, #72]	; (8002780 <MX_I2S1_Init+0x50>)
 8002738:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <MX_I2S1_Init+0x4c>)
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <MX_I2S1_Init+0x4c>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <MX_I2S1_Init+0x4c>)
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <MX_I2S1_Init+0x4c>)
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	0092      	lsls	r2, r2, #2
 8002754:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <MX_I2S1_Init+0x4c>)
 8002758:	22fa      	movs	r2, #250	; 0xfa
 800275a:	0192      	lsls	r2, r2, #6
 800275c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800275e:	4b07      	ldr	r3, [pc, #28]	; (800277c <MX_I2S1_Init+0x4c>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <MX_I2S1_Init+0x4c>)
 8002766:	0018      	movs	r0, r3
 8002768:	f005 fa9c 	bl	8007ca4 <HAL_I2S_Init>
 800276c:	1e03      	subs	r3, r0, #0
 800276e:	d001      	beq.n	8002774 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8002770:	f002 fc60 	bl	8005034 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	20000378 	.word	0x20000378
 8002780:	40013000 	.word	0x40013000

08002784 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <MX_SPI2_Init+0x80>)
 800278a:	2208      	movs	r2, #8
 800278c:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <MX_SPI2_Init+0x80>)
 8002790:	4a1d      	ldr	r2, [pc, #116]	; (8002808 <MX_SPI2_Init+0x84>)
 8002792:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <MX_SPI2_Init+0x80>)
 8002796:	2282      	movs	r2, #130	; 0x82
 8002798:	0052      	lsls	r2, r2, #1
 800279a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <MX_SPI2_Init+0x80>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <MX_SPI2_Init+0x80>)
 80027a4:	22e0      	movs	r2, #224	; 0xe0
 80027a6:	00d2      	lsls	r2, r2, #3
 80027a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027aa:	4b16      	ldr	r3, [pc, #88]	; (8002804 <MX_SPI2_Init+0x80>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <MX_SPI2_Init+0x80>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <MX_SPI2_Init+0x80>)
 80027b8:	2280      	movs	r2, #128	; 0x80
 80027ba:	0092      	lsls	r2, r2, #2
 80027bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <MX_SPI2_Init+0x80>)
 80027c0:	2208      	movs	r2, #8
 80027c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <MX_SPI2_Init+0x80>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <MX_SPI2_Init+0x80>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <MX_SPI2_Init+0x80>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <MX_SPI2_Init+0x80>)
 80027d8:	2207      	movs	r2, #7
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027dc:	4b09      	ldr	r3, [pc, #36]	; (8002804 <MX_SPI2_Init+0x80>)
 80027de:	2200      	movs	r2, #0
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <MX_SPI2_Init+0x80>)
 80027e4:	2208      	movs	r2, #8
 80027e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <MX_SPI2_Init+0x80>)
 80027ea:	0018      	movs	r0, r3
 80027ec:	f007 f87e 	bl	80098ec <HAL_SPI_Init>
 80027f0:	1e03      	subs	r3, r0, #0
 80027f2:	d001      	beq.n	80027f8 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80027f4:	f002 fc1e 	bl	8005034 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80027f8:	4b02      	ldr	r3, [pc, #8]	; (8002804 <MX_SPI2_Init+0x80>)
 80027fa:	2208      	movs	r2, #8
 80027fc:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200000b0 	.word	0x200000b0
 8002808:	40003800 	.word	0x40003800

0800280c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b09e      	sub	sp, #120	; 0x78
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002812:	2368      	movs	r3, #104	; 0x68
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	0018      	movs	r0, r3
 8002818:	2310      	movs	r3, #16
 800281a:	001a      	movs	r2, r3
 800281c:	2100      	movs	r1, #0
 800281e:	f00b f8e1 	bl	800d9e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002822:	235c      	movs	r3, #92	; 0x5c
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	0018      	movs	r0, r3
 8002828:	230c      	movs	r3, #12
 800282a:	001a      	movs	r2, r3
 800282c:	2100      	movs	r1, #0
 800282e:	f00b f8d9 	bl	800d9e4 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002832:	2350      	movs	r3, #80	; 0x50
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	0018      	movs	r0, r3
 8002838:	230c      	movs	r3, #12
 800283a:	001a      	movs	r2, r3
 800283c:	2100      	movs	r1, #0
 800283e:	f00b f8d1 	bl	800d9e4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002842:	2334      	movs	r3, #52	; 0x34
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	0018      	movs	r0, r3
 8002848:	231c      	movs	r3, #28
 800284a:	001a      	movs	r2, r3
 800284c:	2100      	movs	r1, #0
 800284e:	f00b f8c9 	bl	800d9e4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002852:	003b      	movs	r3, r7
 8002854:	0018      	movs	r0, r3
 8002856:	2334      	movs	r3, #52	; 0x34
 8002858:	001a      	movs	r2, r3
 800285a:	2100      	movs	r1, #0
 800285c:	f00b f8c2 	bl	800d9e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002860:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002862:	4a65      	ldr	r2, [pc, #404]	; (80029f8 <MX_TIM1_Init+0x1ec>)
 8002864:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002866:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002868:	2200      	movs	r2, #0
 800286a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286c:	4b61      	ldr	r3, [pc, #388]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8002872:	4b60      	ldr	r3, [pc, #384]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002874:	4a61      	ldr	r2, [pc, #388]	; (80029fc <MX_TIM1_Init+0x1f0>)
 8002876:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002878:	4b5e      	ldr	r3, [pc, #376]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800287e:	4b5d      	ldr	r3, [pc, #372]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002880:	2200      	movs	r2, #0
 8002882:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002884:	4b5b      	ldr	r3, [pc, #364]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800288a:	4b5a      	ldr	r3, [pc, #360]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 800288c:	0018      	movs	r0, r3
 800288e:	f008 fc21 	bl	800b0d4 <HAL_TIM_Base_Init>
 8002892:	1e03      	subs	r3, r0, #0
 8002894:	d001      	beq.n	800289a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002896:	f002 fbcd 	bl	8005034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800289a:	2168      	movs	r1, #104	; 0x68
 800289c:	187b      	adds	r3, r7, r1
 800289e:	2280      	movs	r2, #128	; 0x80
 80028a0:	0152      	lsls	r2, r2, #5
 80028a2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028a4:	187a      	adds	r2, r7, r1
 80028a6:	4b53      	ldr	r3, [pc, #332]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 80028a8:	0011      	movs	r1, r2
 80028aa:	0018      	movs	r0, r3
 80028ac:	f008 feaa 	bl	800b604 <HAL_TIM_ConfigClockSource>
 80028b0:	1e03      	subs	r3, r0, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80028b4:	f002 fbbe 	bl	8005034 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80028b8:	4b4e      	ldr	r3, [pc, #312]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 80028ba:	0018      	movs	r0, r3
 80028bc:	f008 fc62 	bl	800b184 <HAL_TIM_PWM_Init>
 80028c0:	1e03      	subs	r3, r0, #0
 80028c2:	d001      	beq.n	80028c8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80028c4:	f002 fbb6 	bl	8005034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c8:	215c      	movs	r1, #92	; 0x5c
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028d0:	187b      	adds	r3, r7, r1
 80028d2:	2200      	movs	r2, #0
 80028d4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d6:	187b      	adds	r3, r7, r1
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028dc:	187a      	adds	r2, r7, r1
 80028de:	4b45      	ldr	r3, [pc, #276]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 80028e0:	0011      	movs	r1, r2
 80028e2:	0018      	movs	r0, r3
 80028e4:	f009 fb5e 	bl	800bfa4 <HAL_TIMEx_MasterConfigSynchronization>
 80028e8:	1e03      	subs	r3, r0, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80028ec:	f002 fba2 	bl	8005034 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80028f0:	2150      	movs	r1, #80	; 0x50
 80028f2:	187b      	adds	r3, r7, r1
 80028f4:	2202      	movs	r2, #2
 80028f6:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80028f8:	187b      	adds	r3, r7, r1
 80028fa:	2201      	movs	r2, #1
 80028fc:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80028fe:	187b      	adds	r3, r7, r1
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002904:	187a      	adds	r2, r7, r1
 8002906:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002908:	2101      	movs	r1, #1
 800290a:	0018      	movs	r0, r3
 800290c:	f009 fc5e 	bl	800c1cc <HAL_TIMEx_ConfigBreakInput>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8002914:	f002 fb8e 	bl	8005034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002918:	2134      	movs	r1, #52	; 0x34
 800291a:	187b      	adds	r3, r7, r1
 800291c:	2260      	movs	r2, #96	; 0x60
 800291e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8002920:	187b      	adds	r3, r7, r1
 8002922:	2296      	movs	r2, #150	; 0x96
 8002924:	0052      	lsls	r2, r2, #1
 8002926:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002928:	187b      	adds	r3, r7, r1
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800292e:	187b      	adds	r3, r7, r1
 8002930:	2200      	movs	r2, #0
 8002932:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002934:	187b      	adds	r3, r7, r1
 8002936:	2204      	movs	r2, #4
 8002938:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800293a:	187b      	adds	r3, r7, r1
 800293c:	2200      	movs	r2, #0
 800293e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002940:	187b      	adds	r3, r7, r1
 8002942:	2200      	movs	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002946:	1879      	adds	r1, r7, r1
 8002948:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 800294a:	2200      	movs	r2, #0
 800294c:	0018      	movs	r0, r3
 800294e:	f008 fd63 	bl	800b418 <HAL_TIM_PWM_ConfigChannel>
 8002952:	1e03      	subs	r3, r0, #0
 8002954:	d001      	beq.n	800295a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8002956:	f002 fb6d 	bl	8005034 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 800295a:	2134      	movs	r1, #52	; 0x34
 800295c:	187b      	adds	r3, r7, r1
 800295e:	2232      	movs	r2, #50	; 0x32
 8002960:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8002962:	1879      	adds	r1, r7, r1
 8002964:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 8002966:	2210      	movs	r2, #16
 8002968:	0018      	movs	r0, r3
 800296a:	f008 fd55 	bl	800b418 <HAL_TIM_PWM_ConfigChannel>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d001      	beq.n	8002976 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8002972:	f002 fb5f 	bl	8005034 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8002976:	003b      	movs	r3, r7
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	0112      	lsls	r2, r2, #4
 800297c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800297e:	003b      	movs	r3, r7
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	00d2      	lsls	r2, r2, #3
 8002984:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002986:	003b      	movs	r3, r7
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800298c:	003b      	movs	r3, r7
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8002992:	003b      	movs	r3, r7
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	0152      	lsls	r2, r2, #5
 8002998:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800299a:	003b      	movs	r3, r7
 800299c:	2280      	movs	r2, #128	; 0x80
 800299e:	0192      	lsls	r2, r2, #6
 80029a0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 80029a2:	003b      	movs	r3, r7
 80029a4:	220a      	movs	r2, #10
 80029a6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80029a8:	003b      	movs	r3, r7
 80029aa:	2200      	movs	r2, #0
 80029ac:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80029ae:	003b      	movs	r3, r7
 80029b0:	2200      	movs	r2, #0
 80029b2:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80029b4:	003b      	movs	r3, r7
 80029b6:	2280      	movs	r2, #128	; 0x80
 80029b8:	0492      	lsls	r2, r2, #18
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80029bc:	003b      	movs	r3, r7
 80029be:	2200      	movs	r2, #0
 80029c0:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80029c2:	003b      	movs	r3, r7
 80029c4:	2200      	movs	r2, #0
 80029c6:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80029c8:	003b      	movs	r3, r7
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	01d2      	lsls	r2, r2, #7
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029d0:	003a      	movs	r2, r7
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 80029d4:	0011      	movs	r1, r2
 80029d6:	0018      	movs	r0, r3
 80029d8:	f009 fb52 	bl	800c080 <HAL_TIMEx_ConfigBreakDeadTime>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 80029e0:	f002 fb28 	bl	8005034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <MX_TIM1_Init+0x1e8>)
 80029e6:	0018      	movs	r0, r3
 80029e8:	f002 fd6a 	bl	80054c0 <HAL_TIM_MspPostInit>

}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b01e      	add	sp, #120	; 0x78
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000318 	.word	0x20000318
 80029f8:	40012c00 	.word	0x40012c00
 80029fc:	0000027f 	.word	0x0000027f

08002a00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b08f      	sub	sp, #60	; 0x3c
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002a06:	2418      	movs	r4, #24
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	001a      	movs	r2, r3
 8002a10:	2100      	movs	r1, #0
 8002a12:	f00a ffe7 	bl	800d9e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a16:	003b      	movs	r3, r7
 8002a18:	0018      	movs	r0, r3
 8002a1a:	2318      	movs	r3, #24
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	2100      	movs	r1, #0
 8002a20:	f00a ffe0 	bl	800d9e4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	029b      	lsls	r3, r3, #10
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7ff fcb3 	bl	8002394 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f7ff fcc6 	bl	80023c0 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002a34:	003b      	movs	r3, r7
 8002a36:	2204      	movs	r2, #4
 8002a38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a3a:	003b      	movs	r3, r7
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a40:	003b      	movs	r3, r7
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a46:	003b      	movs	r3, r7
 8002a48:	2200      	movs	r2, #0
 8002a4a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a4c:	003b      	movs	r3, r7
 8002a4e:	2200      	movs	r2, #0
 8002a50:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002a52:	003b      	movs	r3, r7
 8002a54:	2201      	movs	r2, #1
 8002a56:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a58:	003a      	movs	r2, r7
 8002a5a:	23a0      	movs	r3, #160	; 0xa0
 8002a5c:	05db      	lsls	r3, r3, #23
 8002a5e:	0011      	movs	r1, r2
 8002a60:	0018      	movs	r0, r3
 8002a62:	f00a fc41 	bl	800d2e8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002a66:	003b      	movs	r3, r7
 8002a68:	2208      	movs	r2, #8
 8002a6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a6c:	003b      	movs	r3, r7
 8002a6e:	2202      	movs	r2, #2
 8002a70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a72:	003b      	movs	r3, r7
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a78:	003b      	movs	r3, r7
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a7e:	003b      	movs	r3, r7
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002a84:	003b      	movs	r3, r7
 8002a86:	2201      	movs	r2, #1
 8002a88:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8a:	003a      	movs	r2, r7
 8002a8c:	23a0      	movs	r3, #160	; 0xa0
 8002a8e:	05db      	lsls	r3, r3, #23
 8002a90:	0011      	movs	r1, r2
 8002a92:	0018      	movs	r0, r3
 8002a94:	f00a fc28 	bl	800d2e8 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002a98:	2100      	movs	r1, #0
 8002a9a:	201c      	movs	r0, #28
 8002a9c:	f7ff fb36 	bl	800210c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002aa0:	201c      	movs	r0, #28
 8002aa2:	f7ff fb19 	bl	80020d8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	22e1      	movs	r2, #225	; 0xe1
 8002ab0:	0212      	lsls	r2, r2, #8
 8002ab2:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	0152      	lsls	r2, r2, #5
 8002aba:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002abc:	0021      	movs	r1, r4
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	220c      	movs	r2, #12
 8002ace:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2200      	movs	r2, #0
 8002ada:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002ae0:	0019      	movs	r1, r3
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	f00a fecc 	bl	800d880 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002aea:	2100      	movs	r1, #0
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7ff fb99 	bl	8002224 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002af4:	2100      	movs	r1, #0
 8002af6:	0018      	movs	r0, r3
 8002af8:	f7ff fba6 	bl	8002248 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7ff fb80 	bl	8002204 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002b06:	0018      	movs	r0, r3
 8002b08:	f7ff fbb2 	bl	8002270 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f7ff fb6a 	bl	80021e8 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7ff fbc1 	bl	80022a0 <LL_USART_IsActiveFlag_TEACK>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d0f9      	beq.n	8002b16 <MX_USART2_UART_Init+0x116>
 8002b22:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <MX_USART2_UART_Init+0x138>)
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7ff fbcf 	bl	80022c8 <LL_USART_IsActiveFlag_REACK>
 8002b2a:	1e03      	subs	r3, r0, #0
 8002b2c:	d0f3      	beq.n	8002b16 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b00f      	add	sp, #60	; 0x3c
 8002b36:	bd90      	pop	{r4, r7, pc}
 8002b38:	40004400 	.word	0x40004400

08002b3c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8002b40:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <MX_USART3_Init+0x78>)
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <MX_USART3_Init+0x78>)
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	0309      	lsls	r1, r1, #12
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b50:	4a18      	ldr	r2, [pc, #96]	; (8002bb4 <MX_USART3_Init+0x78>)
 8002b52:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8100000;
 8002b54:	4b18      	ldr	r3, [pc, #96]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b56:	4a19      	ldr	r2, [pc, #100]	; (8002bbc <MX_USART3_Init+0x80>)
 8002b58:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8002b60:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b6e:	2208      	movs	r2, #8
 8002b70:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8002b72:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	00d2      	lsls	r2, r2, #3
 8002b78:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8002b7a:	4b0f      	ldr	r3, [pc, #60]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	0092      	lsls	r2, r2, #2
 8002b80:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b84:	2280      	movs	r2, #128	; 0x80
 8002b86:	0052      	lsls	r2, r2, #1
 8002b88:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8002b90:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f009 fbb7 	bl	800c30c <HAL_USART_Init>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8002ba2:	f002 fa47 	bl	8005034 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8100000;
 8002ba6:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <MX_USART3_Init+0x7c>)
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <MX_USART3_Init+0x80>)
 8002baa:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	40004800 	.word	0x40004800
 8002bb8:	2000029c 	.word	0x2000029c
 8002bbc:	007b98a0 	.word	0x007b98a0

08002bc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <MX_DMA_Init+0x58>)
 8002bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <MX_DMA_Init+0x58>)
 8002bcc:	2101      	movs	r1, #1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	639a      	str	r2, [r3, #56]	; 0x38
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <MX_DMA_Init+0x58>)
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	4013      	ands	r3, r2
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2100      	movs	r1, #0
 8002be2:	2009      	movs	r0, #9
 8002be4:	f003 fa74 	bl	80060d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002be8:	2009      	movs	r0, #9
 8002bea:	f003 fa86 	bl	80060fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	200a      	movs	r0, #10
 8002bf4:	f003 fa6c 	bl	80060d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002bf8:	200a      	movs	r0, #10
 8002bfa:	f003 fa7e 	bl	80060fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	200b      	movs	r0, #11
 8002c04:	f003 fa64 	bl	80060d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8002c08:	200b      	movs	r0, #11
 8002c0a:	f003 fa76 	bl	80060fa <HAL_NVIC_EnableIRQ>

}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b002      	add	sp, #8
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	40021000 	.word	0x40021000

08002c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c22:	003b      	movs	r3, r7
 8002c24:	0018      	movs	r0, r3
 8002c26:	2318      	movs	r3, #24
 8002c28:	001a      	movs	r2, r3
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	f00a feda 	bl	800d9e4 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8002c30:	2002      	movs	r0, #2
 8002c32:	f7ff fbc5 	bl	80023c0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8002c36:	2004      	movs	r0, #4
 8002c38:	f7ff fbc2 	bl	80023c0 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f7ff fbbf 	bl	80023c0 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4aa0      	ldr	r2, [pc, #640]	; (8002ec8 <MX_GPIO_Init+0x2ac>)
 8002c48:	0019      	movs	r1, r3
 8002c4a:	0010      	movs	r0, r2
 8002c4c:	f7ff fb8a 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	01db      	lsls	r3, r3, #7
 8002c54:	4a9d      	ldr	r2, [pc, #628]	; (8002ecc <MX_GPIO_Init+0x2b0>)
 8002c56:	0019      	movs	r1, r3
 8002c58:	0010      	movs	r0, r2
 8002c5a:	f7ff fb83 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	4a9a      	ldr	r2, [pc, #616]	; (8002ecc <MX_GPIO_Init+0x2b0>)
 8002c64:	0019      	movs	r1, r3
 8002c66:	0010      	movs	r0, r2
 8002c68:	f7ff fb7c 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8002c6c:	23a0      	movs	r3, #160	; 0xa0
 8002c6e:	05db      	lsls	r3, r3, #23
 8002c70:	2140      	movs	r1, #64	; 0x40
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7ff fb76 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8002c78:	23a0      	movs	r3, #160	; 0xa0
 8002c7a:	05db      	lsls	r3, r3, #23
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f7ff fb70 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8002c84:	4b91      	ldr	r3, [pc, #580]	; (8002ecc <MX_GPIO_Init+0x2b0>)
 8002c86:	2140      	movs	r1, #64	; 0x40
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7ff fb6b 	bl	8002364 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8002c8e:	2380      	movs	r3, #128	; 0x80
 8002c90:	011a      	lsls	r2, r3, #4
 8002c92:	23a0      	movs	r3, #160	; 0xa0
 8002c94:	05db      	lsls	r3, r3, #23
 8002c96:	0011      	movs	r1, r2
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7ff fb6f 	bl	800237c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	23a0      	movs	r3, #160	; 0xa0
 8002ca4:	05db      	lsls	r3, r3, #23
 8002ca6:	0011      	movs	r1, r2
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7ff fb67 	bl	800237c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8002cae:	003b      	movs	r3, r7
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	0092      	lsls	r2, r2, #2
 8002cb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002cb6:	003b      	movs	r3, r7
 8002cb8:	2201      	movs	r2, #1
 8002cba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbc:	003b      	movs	r3, r7
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cc2:	003b      	movs	r3, r7
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cc8:	003b      	movs	r3, r7
 8002cca:	2200      	movs	r2, #0
 8002ccc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002cce:	003b      	movs	r3, r7
 8002cd0:	4a7d      	ldr	r2, [pc, #500]	; (8002ec8 <MX_GPIO_Init+0x2ac>)
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	0010      	movs	r0, r2
 8002cd6:	f00a fb07 	bl	800d2e8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8002cda:	003b      	movs	r3, r7
 8002cdc:	2280      	movs	r2, #128	; 0x80
 8002cde:	01d2      	lsls	r2, r2, #7
 8002ce0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002ce2:	003b      	movs	r3, r7
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002ce8:	003b      	movs	r3, r7
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cee:	003b      	movs	r3, r7
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cf4:	003b      	movs	r3, r7
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8002cfa:	003b      	movs	r3, r7
 8002cfc:	4a73      	ldr	r2, [pc, #460]	; (8002ecc <MX_GPIO_Init+0x2b0>)
 8002cfe:	0019      	movs	r1, r3
 8002d00:	0010      	movs	r0, r2
 8002d02:	f00a faf1 	bl	800d2e8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8002d06:	003b      	movs	r3, r7
 8002d08:	2280      	movs	r2, #128	; 0x80
 8002d0a:	0212      	lsls	r2, r2, #8
 8002d0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d0e:	003b      	movs	r3, r7
 8002d10:	2201      	movs	r2, #1
 8002d12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d14:	003b      	movs	r3, r7
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d1a:	003b      	movs	r3, r7
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d20:	003b      	movs	r3, r7
 8002d22:	2200      	movs	r2, #0
 8002d24:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8002d26:	003b      	movs	r3, r7
 8002d28:	4a68      	ldr	r2, [pc, #416]	; (8002ecc <MX_GPIO_Init+0x2b0>)
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	0010      	movs	r0, r2
 8002d2e:	f00a fadb 	bl	800d2e8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8002d32:	003b      	movs	r3, r7
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d38:	003b      	movs	r3, r7
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d3e:	003b      	movs	r3, r7
 8002d40:	2201      	movs	r2, #1
 8002d42:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8002d44:	003a      	movs	r2, r7
 8002d46:	23a0      	movs	r3, #160	; 0xa0
 8002d48:	05db      	lsls	r3, r3, #23
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f00a facb 	bl	800d2e8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8002d52:	003b      	movs	r3, r7
 8002d54:	2202      	movs	r2, #2
 8002d56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d58:	003b      	movs	r3, r7
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d5e:	003b      	movs	r3, r7
 8002d60:	2201      	movs	r2, #1
 8002d62:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8002d64:	003a      	movs	r2, r7
 8002d66:	23a0      	movs	r3, #160	; 0xa0
 8002d68:	05db      	lsls	r3, r3, #23
 8002d6a:	0011      	movs	r1, r2
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f00a fabb 	bl	800d2e8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8002d72:	003b      	movs	r3, r7
 8002d74:	2210      	movs	r2, #16
 8002d76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d78:	003b      	movs	r3, r7
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d7e:	003b      	movs	r3, r7
 8002d80:	2201      	movs	r2, #1
 8002d82:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8002d84:	003a      	movs	r2, r7
 8002d86:	23a0      	movs	r3, #160	; 0xa0
 8002d88:	05db      	lsls	r3, r3, #23
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f00a faab 	bl	800d2e8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8002d92:	003b      	movs	r3, r7
 8002d94:	2240      	movs	r2, #64	; 0x40
 8002d96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d98:	003b      	movs	r3, r7
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9e:	003b      	movs	r3, r7
 8002da0:	2203      	movs	r2, #3
 8002da2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002da4:	003b      	movs	r3, r7
 8002da6:	2200      	movs	r2, #0
 8002da8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002daa:	003b      	movs	r3, r7
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8002db0:	003a      	movs	r2, r7
 8002db2:	23a0      	movs	r3, #160	; 0xa0
 8002db4:	05db      	lsls	r3, r3, #23
 8002db6:	0011      	movs	r1, r2
 8002db8:	0018      	movs	r0, r3
 8002dba:	f00a fa95 	bl	800d2e8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8002dbe:	003b      	movs	r3, r7
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002dc4:	003b      	movs	r3, r7
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002dca:	003b      	movs	r3, r7
 8002dcc:	2203      	movs	r2, #3
 8002dce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dd0:	003b      	movs	r3, r7
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002dd6:	003b      	movs	r3, r7
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8002ddc:	003a      	movs	r2, r7
 8002dde:	23a0      	movs	r3, #160	; 0xa0
 8002de0:	05db      	lsls	r3, r3, #23
 8002de2:	0011      	movs	r1, r2
 8002de4:	0018      	movs	r0, r3
 8002de6:	f00a fa7f 	bl	800d2e8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8002dea:	003b      	movs	r3, r7
 8002dec:	2240      	movs	r2, #64	; 0x40
 8002dee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002df0:	003b      	movs	r3, r7
 8002df2:	2201      	movs	r2, #1
 8002df4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002df6:	003b      	movs	r3, r7
 8002df8:	2203      	movs	r2, #3
 8002dfa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002dfc:	003b      	movs	r3, r7
 8002dfe:	2200      	movs	r2, #0
 8002e00:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e02:	003b      	movs	r3, r7
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8002e08:	003b      	movs	r3, r7
 8002e0a:	4a30      	ldr	r2, [pc, #192]	; (8002ecc <MX_GPIO_Init+0x2b0>)
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	0010      	movs	r0, r2
 8002e10:	f00a fa6a 	bl	800d2e8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8002e14:	003b      	movs	r3, r7
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	0112      	lsls	r2, r2, #4
 8002e1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e1c:	003b      	movs	r3, r7
 8002e1e:	2201      	movs	r2, #1
 8002e20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e22:	003b      	movs	r3, r7
 8002e24:	2203      	movs	r2, #3
 8002e26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e28:	003b      	movs	r3, r7
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e2e:	003b      	movs	r3, r7
 8002e30:	2200      	movs	r2, #0
 8002e32:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8002e34:	003a      	movs	r2, r7
 8002e36:	23a0      	movs	r3, #160	; 0xa0
 8002e38:	05db      	lsls	r3, r3, #23
 8002e3a:	0011      	movs	r1, r2
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f00a fa53 	bl	800d2e8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8002e42:	003b      	movs	r3, r7
 8002e44:	2280      	movs	r2, #128	; 0x80
 8002e46:	0152      	lsls	r2, r2, #5
 8002e48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e4a:	003b      	movs	r3, r7
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e50:	003b      	movs	r3, r7
 8002e52:	2203      	movs	r2, #3
 8002e54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e56:	003b      	movs	r3, r7
 8002e58:	2200      	movs	r2, #0
 8002e5a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e5c:	003b      	movs	r3, r7
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8002e62:	003a      	movs	r2, r7
 8002e64:	23a0      	movs	r3, #160	; 0xa0
 8002e66:	05db      	lsls	r3, r3, #23
 8002e68:	0011      	movs	r1, r2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f00a fa3c 	bl	800d2e8 <LL_GPIO_Init>
  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8002e70:	003b      	movs	r3, r7
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	0192      	lsls	r2, r2, #6
 8002e76:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002e78:	003b      	movs	r3, r7
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002e7e:	003b      	movs	r3, r7
 8002e80:	2201      	movs	r2, #1
 8002e82:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8002e84:	003a      	movs	r2, r7
 8002e86:	23a0      	movs	r3, #160	; 0xa0
 8002e88:	05db      	lsls	r3, r3, #23
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f00a fa2b 	bl	800d2e8 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8002e92:	003b      	movs	r3, r7
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	01d2      	lsls	r2, r2, #7
 8002e98:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002e9a:	003b      	movs	r3, r7
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002ea0:	003b      	movs	r3, r7
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8002ea6:	003a      	movs	r2, r7
 8002ea8:	23a0      	movs	r3, #160	; 0xa0
 8002eaa:	05db      	lsls	r3, r3, #23
 8002eac:	0011      	movs	r1, r2
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f00a fa1a 	bl	800d2e8 <LL_GPIO_Init>
  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	031b      	lsls	r3, r3, #12
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7ff fa43 	bl	8002344 <LL_SYSCFG_EnableFastModePlus>

}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b006      	add	sp, #24
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	50000400 	.word	0x50000400
 8002ecc:	50000800 	.word	0x50000800

08002ed0 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8002ed4:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <USART2_RX_Callback+0x60>)
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7ff fa26 	bl	8002328 <LL_USART_ReceiveData9>
 8002edc:	0003      	movs	r3, r0
 8002ede:	001a      	movs	r2, r3
 8002ee0:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <USART2_RX_Callback+0x64>)
 8002ee2:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <USART2_RX_Callback+0x60>)
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	05db      	lsls	r3, r3, #23
 8002eec:	0ddb      	lsrs	r3, r3, #23
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <USART2_RX_Callback+0x64>)
 8002ef2:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <USART2_RX_Callback+0x68>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <USART2_RX_Callback+0x64>)
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	2bff      	cmp	r3, #255	; 0xff
 8002f00:	d90a      	bls.n	8002f18 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <USART2_RX_Callback+0x64>)
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <USART2_RX_Callback+0x6c>)
 8002f0a:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <USART2_RX_Callback+0x70>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <USART2_RX_Callback+0x74>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8002f18:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <USART2_RX_Callback+0x74>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d104      	bne.n	8002f2a <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8002f20:	4b04      	ldr	r3, [pc, #16]	; (8002f34 <USART2_RX_Callback+0x64>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 f90d 	bl	8003144 <cmdReceive>
  }
}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40004400 	.word	0x40004400
 8002f34:	200004fe 	.word	0x200004fe
 8002f38:	20000060 	.word	0x20000060
 8002f3c:	20002504 	.word	0x20002504
 8002f40:	20000062 	.word	0x20000062
 8002f44:	20000061 	.word	0x20000061

08002f48 <HAL_SPI_RxHalfCpltCallback>:
//====================================================================================================================
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  	GPIOA->ODR |= 1 << 11;	//set test 1
 8002f50:	23a0      	movs	r3, #160	; 0xa0
 8002f52:	05db      	lsls	r3, r3, #23
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	23a0      	movs	r3, #160	; 0xa0
 8002f58:	05db      	lsls	r3, r3, #23
 8002f5a:	2180      	movs	r1, #128	; 0x80
 8002f5c:	0109      	lsls	r1, r1, #4
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 11);	//reset test 1
 8002f62:	23a0      	movs	r3, #160	; 0xa0
 8002f64:	05db      	lsls	r3, r3, #23
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	23a0      	movs	r3, #160	; 0xa0
 8002f6a:	05db      	lsls	r3, r3, #23
 8002f6c:	4917      	ldr	r1, [pc, #92]	; (8002fcc <HAL_SPI_RxHalfCpltCallback+0x84>)
 8002f6e:	400a      	ands	r2, r1
 8002f70:	615a      	str	r2, [r3, #20]
  	if(cmd2Execute==0x11){
 8002f72:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <HAL_SPI_RxHalfCpltCallback+0x88>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b11      	cmp	r3, #17
 8002f78:	d116      	bne.n	8002fa8 <HAL_SPI_RxHalfCpltCallback+0x60>
  	GPIOA->ODR &= ~(1 << 6);	//reset cs of DISPLAY
 8002f7a:	23a0      	movs	r3, #160	; 0xa0
 8002f7c:	05db      	lsls	r3, r3, #23
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	23a0      	movs	r3, #160	; 0xa0
 8002f82:	05db      	lsls	r3, r3, #23
 8002f84:	2140      	movs	r1, #64	; 0x40
 8002f86:	438a      	bics	r2, r1
 8002f88:	615a      	str	r2, [r3, #20]
  		GPIOA->ODR |= 1 << 7;	//set   dc of DISPLAY
 8002f8a:	23a0      	movs	r3, #160	; 0xa0
 8002f8c:	05db      	lsls	r3, r3, #23
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	23a0      	movs	r3, #160	; 0xa0
 8002f92:	05db      	lsls	r3, r3, #23
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	430a      	orrs	r2, r1
 8002f98:	615a      	str	r2, [r3, #20]
  		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,len);
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_SPI_RxHalfCpltCallback+0x8c>)
 8002f9c:	881a      	ldrh	r2, [r3, #0]
 8002f9e:	490e      	ldr	r1, [pc, #56]	; (8002fd8 <HAL_SPI_RxHalfCpltCallback+0x90>)
 8002fa0:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <HAL_SPI_RxHalfCpltCallback+0x94>)
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f009 fac0 	bl	800c528 <HAL_USART_Transmit_DMA>
  	}
  	if(cmd2Execute==0x14){
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <HAL_SPI_RxHalfCpltCallback+0x88>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b14      	cmp	r3, #20
 8002fae:	d108      	bne.n	8002fc2 <HAL_SPI_RxHalfCpltCallback+0x7a>
  	  		HAL_I2S_Transmit_DMA(&hi2s1, MEM_Buffer,len*2);
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <HAL_SPI_RxHalfCpltCallback+0x8c>)
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	18db      	adds	r3, r3, r3
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	4907      	ldr	r1, [pc, #28]	; (8002fd8 <HAL_SPI_RxHalfCpltCallback+0x90>)
 8002fba:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <HAL_SPI_RxHalfCpltCallback+0x98>)
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f005 f85f 	bl	8008080 <HAL_I2S_Transmit_DMA>
  	  	}

}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b002      	add	sp, #8
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	fffff7ff 	.word	0xfffff7ff
 8002fd0:	20000372 	.word	0x20000372
 8002fd4:	200004fc 	.word	0x200004fc
 8002fd8:	20000504 	.word	0x20000504
 8002fdc:	2000029c 	.word	0x2000029c
 8002fe0:	20000378 	.word	0x20000378

08002fe4 <HAL_SPI_RxCpltCallback>:
//==========================================================
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	if(cmd2Execute==0x11){
 8002fec:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_SPI_RxCpltCallback+0x28>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b11      	cmp	r3, #17
 8002ff2:	d106      	bne.n	8003002 <HAL_SPI_RxCpltCallback+0x1e>
		GPIOC->ODR |= 1 << 15; // set cs
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_SPI_RxCpltCallback+0x2c>)
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_SPI_RxCpltCallback+0x2c>)
 8002ffa:	2180      	movs	r1, #128	; 0x80
 8002ffc:	0209      	lsls	r1, r1, #8
 8002ffe:	430a      	orrs	r2, r1
 8003000:	615a      	str	r2, [r3, #20]
	}
	if(cmd2Execute==0x14){

	}
}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	46bd      	mov	sp, r7
 8003006:	b002      	add	sp, #8
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	20000372 	.word	0x20000372
 8003010:	50000800 	.word	0x50000800

08003014 <HAL_USART_TxCpltCallback>:
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 800301c:	23a0      	movs	r3, #160	; 0xa0
 800301e:	05db      	lsls	r3, r3, #23
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	23a0      	movs	r3, #160	; 0xa0
 8003024:	05db      	lsls	r3, r3, #23
 8003026:	2180      	movs	r1, #128	; 0x80
 8003028:	438a      	bics	r2, r1
 800302a:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 800302c:	23a0      	movs	r3, #160	; 0xa0
 800302e:	05db      	lsls	r3, r3, #23
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	23a0      	movs	r3, #160	; 0xa0
 8003034:	05db      	lsls	r3, r3, #23
 8003036:	2140      	movs	r1, #64	; 0x40
 8003038:	430a      	orrs	r2, r1
 800303a:	615a      	str	r2, [r3, #20]

	GPIOC->ODR |= 1 << 6;	//set BF
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_USART_TxCpltCallback+0x44>)
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_USART_TxCpltCallback+0x44>)
 8003042:	2140      	movs	r1, #64	; 0x40
 8003044:	430a      	orrs	r2, r1
 8003046:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <HAL_USART_TxCpltCallback+0x48>)
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	46bd      	mov	sp, r7
 8003052:	b002      	add	sp, #8
 8003054:	bd80      	pop	{r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	50000800 	.word	0x50000800
 800305c:	20000372 	.word	0x20000372

08003060 <HAL_I2S_TxHalfCpltCallback>:

//	GPIOC->ODR |= 1 << 6;	//set BF
//	cmd2Execute=0;
}
//======================================================================================================================
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s1) {
 8003060:	b5b0      	push	{r4, r5, r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	uint8_t addr[4];
    if ((curAddr+sizeof(MEM_Buffer))<(address+len)){
 8003068:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <HAL_I2S_TxHalfCpltCallback+0xc8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2580      	movs	r5, #128	; 0x80
 800306e:	01ad      	lsls	r5, r5, #6
 8003070:	195a      	adds	r2, r3, r5
 8003072:	4b2e      	ldr	r3, [pc, #184]	; (800312c <HAL_I2S_TxHalfCpltCallback+0xcc>)
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	0019      	movs	r1, r3
 8003078:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <HAL_I2S_TxHalfCpltCallback+0xd0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	18cb      	adds	r3, r1, r3
 800307e:	429a      	cmp	r2, r3
 8003080:	d24e      	bcs.n	8003120 <HAL_I2S_TxHalfCpltCallback+0xc0>

    	addr[0]=curAddr & 0xFF;
 8003082:	4b29      	ldr	r3, [pc, #164]	; (8003128 <HAL_I2S_TxHalfCpltCallback+0xc8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	b2da      	uxtb	r2, r3
 8003088:	240c      	movs	r4, #12
 800308a:	193b      	adds	r3, r7, r4
 800308c:	701a      	strb	r2, [r3, #0]
		addr[1]=(curAddr >> 8) & 0xFF;
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <HAL_I2S_TxHalfCpltCallback+0xc8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	0a1b      	lsrs	r3, r3, #8
 8003094:	b2da      	uxtb	r2, r3
 8003096:	193b      	adds	r3, r7, r4
 8003098:	705a      	strb	r2, [r3, #1]
		addr[2]=(curAddr >> 16) & 0xFF;
 800309a:	4b23      	ldr	r3, [pc, #140]	; (8003128 <HAL_I2S_TxHalfCpltCallback+0xc8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	0c1b      	lsrs	r3, r3, #16
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	193b      	adds	r3, r7, r4
 80030a4:	709a      	strb	r2, [r3, #2]
		addr[3]=(curAddr >> 24) & 0xFF;
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_I2S_TxHalfCpltCallback+0xc8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	0e1b      	lsrs	r3, r3, #24
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	193b      	adds	r3, r7, r4
 80030b0:	70da      	strb	r2, [r3, #3]

		uint8_t memCMD = 0x13; //read command with 4-byte address
 80030b2:	200b      	movs	r0, #11
 80030b4:	183b      	adds	r3, r7, r0
 80030b6:	2213      	movs	r2, #19
 80030b8:	701a      	strb	r2, [r3, #0]
    	GPIOC->ODR &= ~(1 << 15); //reset cs
 80030ba:	4b1e      	ldr	r3, [pc, #120]	; (8003134 <HAL_I2S_TxHalfCpltCallback+0xd4>)
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <HAL_I2S_TxHalfCpltCallback+0xd4>)
 80030c0:	491d      	ldr	r1, [pc, #116]	; (8003138 <HAL_I2S_TxHalfCpltCallback+0xd8>)
 80030c2:	400a      	ands	r2, r1
 80030c4:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80030c6:	1839      	adds	r1, r7, r0
 80030c8:	481c      	ldr	r0, [pc, #112]	; (800313c <HAL_I2S_TxHalfCpltCallback+0xdc>)
 80030ca:	2332      	movs	r3, #50	; 0x32
 80030cc:	2201      	movs	r2, #1
 80030ce:	f006 fcc5 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[3], 1, 50); //send address
 80030d2:	193b      	adds	r3, r7, r4
 80030d4:	1cd9      	adds	r1, r3, #3
 80030d6:	4819      	ldr	r0, [pc, #100]	; (800313c <HAL_I2S_TxHalfCpltCallback+0xdc>)
 80030d8:	2332      	movs	r3, #50	; 0x32
 80030da:	2201      	movs	r2, #1
 80030dc:	f006 fcbe 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[2], 1, 50); //send address
 80030e0:	193b      	adds	r3, r7, r4
 80030e2:	1c99      	adds	r1, r3, #2
 80030e4:	4815      	ldr	r0, [pc, #84]	; (800313c <HAL_I2S_TxHalfCpltCallback+0xdc>)
 80030e6:	2332      	movs	r3, #50	; 0x32
 80030e8:	2201      	movs	r2, #1
 80030ea:	f006 fcb7 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[1], 1, 50); //send address
 80030ee:	193b      	adds	r3, r7, r4
 80030f0:	1c59      	adds	r1, r3, #1
 80030f2:	4812      	ldr	r0, [pc, #72]	; (800313c <HAL_I2S_TxHalfCpltCallback+0xdc>)
 80030f4:	2332      	movs	r3, #50	; 0x32
 80030f6:	2201      	movs	r2, #1
 80030f8:	f006 fcb0 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[0], 1, 50); //send address
 80030fc:	1939      	adds	r1, r7, r4
 80030fe:	480f      	ldr	r0, [pc, #60]	; (800313c <HAL_I2S_TxHalfCpltCallback+0xdc>)
 8003100:	2332      	movs	r3, #50	; 0x32
 8003102:	2201      	movs	r2, #1
 8003104:	f006 fcaa 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
 8003108:	4b08      	ldr	r3, [pc, #32]	; (800312c <HAL_I2S_TxHalfCpltCallback+0xcc>)
 800310a:	881a      	ldrh	r2, [r3, #0]
 800310c:	490c      	ldr	r1, [pc, #48]	; (8003140 <HAL_I2S_TxHalfCpltCallback+0xe0>)
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_I2S_TxHalfCpltCallback+0xdc>)
 8003110:	0018      	movs	r0, r3
 8003112:	f007 f919 	bl	800a348 <HAL_SPI_Receive_DMA>
		curAddr+=sizeof(MEM_Buffer);
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <HAL_I2S_TxHalfCpltCallback+0xc8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	195a      	adds	r2, r3, r5
 800311c:	4b02      	ldr	r3, [pc, #8]	; (8003128 <HAL_I2S_TxHalfCpltCallback+0xc8>)
 800311e:	601a      	str	r2, [r3, #0]
    }
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	b004      	add	sp, #16
 8003126:	bdb0      	pop	{r4, r5, r7, pc}
 8003128:	20000368 	.word	0x20000368
 800312c:	200004fc 	.word	0x200004fc
 8003130:	2000012c 	.word	0x2000012c
 8003134:	50000800 	.word	0x50000800
 8003138:	ffff7fff 	.word	0xffff7fff
 800313c:	200000b0 	.word	0x200000b0
 8003140:	20000504 	.word	0x20000504

08003144 <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	0002      	movs	r2, r0
 800314c:	1dbb      	adds	r3, r7, #6
 800314e:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8003150:	230f      	movs	r3, #15
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <cmdReceive+0xc4>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0fb      	beq.n	800315a <cmdReceive+0x16>
	  ByteReceived=0;
 8003162:	4b29      	ldr	r3, [pc, #164]	; (8003208 <cmdReceive+0xc4>)
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8003168:	4b28      	ldr	r3, [pc, #160]	; (800320c <cmdReceive+0xc8>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	001a      	movs	r2, r3
 800316e:	1dbb      	adds	r3, r7, #6
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	b2d9      	uxtb	r1, r3
 8003174:	4b26      	ldr	r3, [pc, #152]	; (8003210 <cmdReceive+0xcc>)
 8003176:	5499      	strb	r1, [r3, r2]
	  ind++;
 8003178:	4b24      	ldr	r3, [pc, #144]	; (800320c <cmdReceive+0xc8>)
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	3301      	adds	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	4b22      	ldr	r3, [pc, #136]	; (800320c <cmdReceive+0xc8>)
 8003182:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8003184:	4b21      	ldr	r3, [pc, #132]	; (800320c <cmdReceive+0xc8>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d033      	beq.n	80031f4 <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 800318c:	4b1f      	ldr	r3, [pc, #124]	; (800320c <cmdReceive+0xc8>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	001a      	movs	r2, r3
 8003192:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <cmdReceive+0xcc>)
 8003194:	785b      	ldrb	r3, [r3, #1]
 8003196:	3301      	adds	r3, #1
 8003198:	429a      	cmp	r2, r3
 800319a:	dd2b      	ble.n	80031f4 <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 800319c:	230f      	movs	r3, #15
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
 80031a4:	e00f      	b.n	80031c6 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 80031a6:	210f      	movs	r1, #15
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4a18      	ldr	r2, [pc, #96]	; (8003210 <cmdReceive+0xcc>)
 80031ae:	5cd2      	ldrb	r2, [r2, r3]
 80031b0:	4b18      	ldr	r3, [pc, #96]	; (8003214 <cmdReceive+0xd0>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	18d3      	adds	r3, r2, r3
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	4b16      	ldr	r3, [pc, #88]	; (8003214 <cmdReceive+0xd0>)
 80031ba:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 80031bc:	187b      	adds	r3, r7, r1
 80031be:	781a      	ldrb	r2, [r3, #0]
 80031c0:	187b      	adds	r3, r7, r1
 80031c2:	3201      	adds	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	4b12      	ldr	r3, [pc, #72]	; (8003210 <cmdReceive+0xcc>)
 80031c8:	785b      	ldrb	r3, [r3, #1]
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	210f      	movs	r1, #15
 80031ce:	187b      	adds	r3, r7, r1
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	dae7      	bge.n	80031a6 <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 80031d6:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <cmdReceive+0xd0>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <cmdReceive+0xb0>
 80031de:	187b      	adds	r3, r7, r1
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <cmdReceive+0xcc>)
 80031e4:	785b      	ldrb	r3, [r3, #1]
 80031e6:	3302      	adds	r3, #2
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d103      	bne.n	80031f4 <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 80031ec:	4b08      	ldr	r3, [pc, #32]	; (8003210 <cmdReceive+0xcc>)
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 fb2c 	bl	800384c <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 80031f4:	4b08      	ldr	r3, [pc, #32]	; (8003218 <cmdReceive+0xd4>)
 80031f6:	6a1a      	ldr	r2, [r3, #32]
 80031f8:	4b07      	ldr	r3, [pc, #28]	; (8003218 <cmdReceive+0xd4>)
 80031fa:	2108      	movs	r1, #8
 80031fc:	430a      	orrs	r2, r1
 80031fe:	621a      	str	r2, [r3, #32]
	}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b004      	add	sp, #16
 8003206:	bd80      	pop	{r7, pc}
 8003208:	20000060 	.word	0x20000060
 800320c:	20000062 	.word	0x20000062
 8003210:	20002504 	.word	0x20002504
 8003214:	20000065 	.word	0x20000065
 8003218:	40004400 	.word	0x40004400

0800321c <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	0002      	movs	r2, r0
 8003224:	1dfb      	adds	r3, r7, #7
 8003226:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8003228:	1df9      	adds	r1, r7, #7
 800322a:	4804      	ldr	r0, [pc, #16]	; (800323c <USART_AS_SPI_sendCMD+0x20>)
 800322c:	230a      	movs	r3, #10
 800322e:	2201      	movs	r2, #1
 8003230:	f009 f8bc 	bl	800c3ac <HAL_USART_Transmit>
		}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}
 800323c:	2000029c 	.word	0x2000029c

08003240 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <weoInit+0xd0>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b31      	ldr	r3, [pc, #196]	; (8003310 <weoInit+0xd0>)
 800324a:	2101      	movs	r1, #1
 800324c:	438a      	bics	r2, r1
 800324e:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8003250:	4b2f      	ldr	r3, [pc, #188]	; (8003310 <weoInit+0xd0>)
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	4b2e      	ldr	r3, [pc, #184]	; (8003310 <weoInit+0xd0>)
 8003256:	2180      	movs	r1, #128	; 0x80
 8003258:	0309      	lsls	r1, r1, #12
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 800325e:	4b2c      	ldr	r3, [pc, #176]	; (8003310 <weoInit+0xd0>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <weoInit+0xd0>)
 8003264:	2101      	movs	r1, #1
 8003266:	430a      	orrs	r2, r1
 8003268:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 800326a:	2001      	movs	r0, #1
 800326c:	f002 fbea 	bl	8005a44 <HAL_Delay>
		HAL_Delay(1);
 8003270:	2001      	movs	r0, #1
 8003272:	f002 fbe7 	bl	8005a44 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003276:	4b27      	ldr	r3, [pc, #156]	; (8003314 <weoInit+0xd4>)
 8003278:	2100      	movs	r1, #0
 800327a:	0018      	movs	r0, r3
 800327c:	f007 ffe2 	bl	800b244 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8003280:	2001      	movs	r0, #1
 8003282:	f002 fbdf 	bl	8005a44 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 8003286:	23a0      	movs	r3, #160	; 0xa0
 8003288:	05db      	lsls	r3, r3, #23
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	23a0      	movs	r3, #160	; 0xa0
 800328e:	05db      	lsls	r3, r3, #23
 8003290:	2140      	movs	r1, #64	; 0x40
 8003292:	438a      	bics	r2, r1
 8003294:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 8003296:	23a0      	movs	r3, #160	; 0xa0
 8003298:	05db      	lsls	r3, r3, #23
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	23a0      	movs	r3, #160	; 0xa0
 800329e:	05db      	lsls	r3, r3, #23
 80032a0:	2180      	movs	r1, #128	; 0x80
 80032a2:	438a      	bics	r2, r1
 80032a4:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 80032a6:	20af      	movs	r0, #175	; 0xaf
 80032a8:	f7ff ffb8 	bl	800321c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 80032ac:	20a0      	movs	r0, #160	; 0xa0
 80032ae:	f7ff ffb5 	bl	800321c <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 80032b2:	2051      	movs	r0, #81	; 0x51
 80032b4:	f7ff ffb2 	bl	800321c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 80032b8:	2081      	movs	r0, #129	; 0x81
 80032ba:	f7ff ffaf 	bl	800321c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 80032be:	20ff      	movs	r0, #255	; 0xff
 80032c0:	f7ff ffac 	bl	800321c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 80032c4:	20a1      	movs	r0, #161	; 0xa1
 80032c6:	f7ff ffa9 	bl	800321c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80032ca:	2000      	movs	r0, #0
 80032cc:	f7ff ffa6 	bl	800321c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 80032d0:	20a2      	movs	r0, #162	; 0xa2
 80032d2:	f7ff ffa3 	bl	800321c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80032d6:	2000      	movs	r0, #0
 80032d8:	f7ff ffa0 	bl	800321c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 80032dc:	20a8      	movs	r0, #168	; 0xa8
 80032de:	f7ff ff9d 	bl	800321c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80032e2:	207f      	movs	r0, #127	; 0x7f
 80032e4:	f7ff ff9a 	bl	800321c <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 80032e8:	23a0      	movs	r3, #160	; 0xa0
 80032ea:	05db      	lsls	r3, r3, #23
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	23a0      	movs	r3, #160	; 0xa0
 80032f0:	05db      	lsls	r3, r3, #23
 80032f2:	2180      	movs	r1, #128	; 0x80
 80032f4:	430a      	orrs	r2, r1
 80032f6:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 80032f8:	23a0      	movs	r3, #160	; 0xa0
 80032fa:	05db      	lsls	r3, r3, #23
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	23a0      	movs	r3, #160	; 0xa0
 8003300:	05db      	lsls	r3, r3, #23
 8003302:	2140      	movs	r1, #64	; 0x40
 8003304:	430a      	orrs	r2, r1
 8003306:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8003308:	46c0      	nop			; (mov r8, r8)
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	40004800 	.word	0x40004800
 8003314:	20000318 	.word	0x20000318

08003318 <weoClear>:
	void weoClear(void) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800331e:	23a0      	movs	r3, #160	; 0xa0
 8003320:	05db      	lsls	r3, r3, #23
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	23a0      	movs	r3, #160	; 0xa0
 8003326:	05db      	lsls	r3, r3, #23
 8003328:	2140      	movs	r1, #64	; 0x40
 800332a:	438a      	bics	r2, r1
 800332c:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 800332e:	23a0      	movs	r3, #160	; 0xa0
 8003330:	05db      	lsls	r3, r3, #23
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	23a0      	movs	r3, #160	; 0xa0
 8003336:	05db      	lsls	r3, r3, #23
 8003338:	2180      	movs	r1, #128	; 0x80
 800333a:	438a      	bics	r2, r1
 800333c:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800333e:	2075      	movs	r0, #117	; 0x75
 8003340:	f7ff ff6c 	bl	800321c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8003344:	2000      	movs	r0, #0
 8003346:	f7ff ff69 	bl	800321c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 800334a:	207f      	movs	r0, #127	; 0x7f
 800334c:	f7ff ff66 	bl	800321c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8003350:	2015      	movs	r0, #21
 8003352:	f7ff ff63 	bl	800321c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8003356:	2000      	movs	r0, #0
 8003358:	f7ff ff60 	bl	800321c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 800335c:	207f      	movs	r0, #127	; 0x7f
 800335e:	f7ff ff5d 	bl	800321c <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8003362:	23a0      	movs	r3, #160	; 0xa0
 8003364:	05db      	lsls	r3, r3, #23
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	23a0      	movs	r3, #160	; 0xa0
 800336a:	05db      	lsls	r3, r3, #23
 800336c:	2140      	movs	r1, #64	; 0x40
 800336e:	438a      	bics	r2, r1
 8003370:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 8003372:	23a0      	movs	r3, #160	; 0xa0
 8003374:	05db      	lsls	r3, r3, #23
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	23a0      	movs	r3, #160	; 0xa0
 800337a:	05db      	lsls	r3, r3, #23
 800337c:	2180      	movs	r1, #128	; 0x80
 800337e:	430a      	orrs	r2, r1
 8003380:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8003382:	1dbb      	adds	r3, r7, #6
 8003384:	2200      	movs	r2, #0
 8003386:	801a      	strh	r2, [r3, #0]
 8003388:	e00d      	b.n	80033a6 <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <weoClear+0xc0>)
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	2280      	movs	r2, #128	; 0x80
 8003392:	4013      	ands	r3, r2
 8003394:	d0fa      	beq.n	800338c <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <weoClear+0xc0>)
 8003398:	2200      	movs	r2, #0
 800339a:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 800339c:	1dbb      	adds	r3, r7, #6
 800339e:	881a      	ldrh	r2, [r3, #0]
 80033a0:	1dbb      	adds	r3, r7, #6
 80033a2:	3201      	adds	r2, #1
 80033a4:	801a      	strh	r2, [r3, #0]
 80033a6:	1dbb      	adds	r3, r7, #6
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	4a0c      	ldr	r2, [pc, #48]	; (80033dc <weoClear+0xc4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d9ec      	bls.n	800338a <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 80033b0:	23a0      	movs	r3, #160	; 0xa0
 80033b2:	05db      	lsls	r3, r3, #23
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	23a0      	movs	r3, #160	; 0xa0
 80033b8:	05db      	lsls	r3, r3, #23
 80033ba:	2180      	movs	r1, #128	; 0x80
 80033bc:	438a      	bics	r2, r1
 80033be:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 80033c0:	23a0      	movs	r3, #160	; 0xa0
 80033c2:	05db      	lsls	r3, r3, #23
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	23a0      	movs	r3, #160	; 0xa0
 80033c8:	05db      	lsls	r3, r3, #23
 80033ca:	2140      	movs	r1, #64	; 0x40
 80033cc:	430a      	orrs	r2, r1
 80033ce:	615a      	str	r2, [r3, #20]
	}
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40004800 	.word	0x40004800
 80033dc:	00002001 	.word	0x00002001

080033e0 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80033e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	0005      	movs	r5, r0
 80033e8:	000c      	movs	r4, r1
 80033ea:	0010      	movs	r0, r2
 80033ec:	0019      	movs	r1, r3
 80033ee:	1dfb      	adds	r3, r7, #7
 80033f0:	1c2a      	adds	r2, r5, #0
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	1dbb      	adds	r3, r7, #6
 80033f6:	1c22      	adds	r2, r4, #0
 80033f8:	701a      	strb	r2, [r3, #0]
 80033fa:	1d7b      	adds	r3, r7, #5
 80033fc:	1c02      	adds	r2, r0, #0
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	1d3b      	adds	r3, r7, #4
 8003402:	1c0a      	adds	r2, r1, #0
 8003404:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8003406:	240e      	movs	r4, #14
 8003408:	193b      	adds	r3, r7, r4
 800340a:	2200      	movs	r2, #0
 800340c:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800340e:	1dfb      	adds	r3, r7, #7
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	b25b      	sxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	da00      	bge.n	800341a <weoDrawRectangleFilled+0x3a>
 8003418:	e0bf      	b.n	800359a <weoDrawRectangleFilled+0x1ba>
 800341a:	1dbb      	adds	r3, r7, #6
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	b25b      	sxtb	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	da00      	bge.n	8003426 <weoDrawRectangleFilled+0x46>
 8003424:	e0b9      	b.n	800359a <weoDrawRectangleFilled+0x1ba>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8003426:	1d7b      	adds	r3, r7, #5
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b25b      	sxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	da00      	bge.n	8003432 <weoDrawRectangleFilled+0x52>
 8003430:	e0b3      	b.n	800359a <weoDrawRectangleFilled+0x1ba>
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	b25b      	sxtb	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	da00      	bge.n	800343e <weoDrawRectangleFilled+0x5e>
 800343c:	e0ad      	b.n	800359a <weoDrawRectangleFilled+0x1ba>
				return;
			}

			start_x_New=start_x;
 800343e:	250d      	movs	r5, #13
 8003440:	197b      	adds	r3, r7, r5
 8003442:	1dfa      	adds	r2, r7, #7
 8003444:	7812      	ldrb	r2, [r2, #0]
 8003446:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8003448:	260c      	movs	r6, #12
 800344a:	19bb      	adds	r3, r7, r6
 800344c:	1d3a      	adds	r2, r7, #4
 800344e:	7812      	ldrb	r2, [r2, #0]
 8003450:	217f      	movs	r1, #127	; 0x7f
 8003452:	1a8a      	subs	r2, r1, r2
 8003454:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8003456:	230b      	movs	r3, #11
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	1d7a      	adds	r2, r7, #5
 800345c:	7812      	ldrb	r2, [r2, #0]
 800345e:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8003460:	220a      	movs	r2, #10
 8003462:	18bb      	adds	r3, r7, r2
 8003464:	1dba      	adds	r2, r7, #6
 8003466:	7812      	ldrb	r2, [r2, #0]
 8003468:	217f      	movs	r1, #127	; 0x7f
 800346a:	1a8a      	subs	r2, r1, r2
 800346c:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800346e:	23a0      	movs	r3, #160	; 0xa0
 8003470:	05db      	lsls	r3, r3, #23
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	23a0      	movs	r3, #160	; 0xa0
 8003476:	05db      	lsls	r3, r3, #23
 8003478:	2140      	movs	r1, #64	; 0x40
 800347a:	438a      	bics	r2, r1
 800347c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800347e:	23a0      	movs	r3, #160	; 0xa0
 8003480:	05db      	lsls	r3, r3, #23
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	23a0      	movs	r3, #160	; 0xa0
 8003486:	05db      	lsls	r3, r3, #23
 8003488:	2180      	movs	r1, #128	; 0x80
 800348a:	438a      	bics	r2, r1
 800348c:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800348e:	2075      	movs	r0, #117	; 0x75
 8003490:	f7ff fec4 	bl	800321c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8003494:	197b      	adds	r3, r7, r5
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	0018      	movs	r0, r3
 800349a:	f7ff febf 	bl	800321c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800349e:	230b      	movs	r3, #11
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	0018      	movs	r0, r3
 80034a6:	f7ff feb9 	bl	800321c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80034aa:	2015      	movs	r0, #21
 80034ac:	f7ff feb6 	bl	800321c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 80034b0:	19bb      	adds	r3, r7, r6
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	085b      	lsrs	r3, r3, #1
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff feaf 	bl	800321c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80034be:	220a      	movs	r2, #10
 80034c0:	18bb      	adds	r3, r7, r2
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	0018      	movs	r0, r3
 80034ca:	f7ff fea7 	bl	800321c <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 80034ce:	23a0      	movs	r3, #160	; 0xa0
 80034d0:	05db      	lsls	r3, r3, #23
 80034d2:	695a      	ldr	r2, [r3, #20]
 80034d4:	23a0      	movs	r3, #160	; 0xa0
 80034d6:	05db      	lsls	r3, r3, #23
 80034d8:	2180      	movs	r1, #128	; 0x80
 80034da:	430a      	orrs	r2, r1
 80034dc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80034de:	23a0      	movs	r3, #160	; 0xa0
 80034e0:	05db      	lsls	r3, r3, #23
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	23a0      	movs	r3, #160	; 0xa0
 80034e6:	05db      	lsls	r3, r3, #23
 80034e8:	2140      	movs	r1, #64	; 0x40
 80034ea:	430a      	orrs	r2, r1
 80034ec:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80034ee:	23a0      	movs	r3, #160	; 0xa0
 80034f0:	05db      	lsls	r3, r3, #23
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	23a0      	movs	r3, #160	; 0xa0
 80034f6:	05db      	lsls	r3, r3, #23
 80034f8:	2140      	movs	r1, #64	; 0x40
 80034fa:	438a      	bics	r2, r1
 80034fc:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80034fe:	23a0      	movs	r3, #160	; 0xa0
 8003500:	05db      	lsls	r3, r3, #23
 8003502:	695a      	ldr	r2, [r3, #20]
 8003504:	23a0      	movs	r3, #160	; 0xa0
 8003506:	05db      	lsls	r3, r3, #23
 8003508:	2180      	movs	r1, #128	; 0x80
 800350a:	430a      	orrs	r2, r1
 800350c:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800350e:	193b      	adds	r3, r7, r4
 8003510:	2200      	movs	r2, #0
 8003512:	801a      	strh	r2, [r3, #0]
 8003514:	e012      	b.n	800353c <weoDrawRectangleFilled+0x15c>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <weoDrawRectangleFilled+0x1c4>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	4013      	ands	r3, r2
 8003520:	d0fa      	beq.n	8003518 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 8003522:	210e      	movs	r1, #14
 8003524:	187b      	adds	r3, r7, r1
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800352a:	18d3      	adds	r3, r2, r3
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <weoDrawRectangleFilled+0x1c4>)
 8003530:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 8003532:	187b      	adds	r3, r7, r1
 8003534:	881a      	ldrh	r2, [r3, #0]
 8003536:	187b      	adds	r3, r7, r1
 8003538:	3201      	adds	r2, #1
 800353a:	801a      	strh	r2, [r3, #0]
 800353c:	230e      	movs	r3, #14
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	881a      	ldrh	r2, [r3, #0]
 8003542:	230b      	movs	r3, #11
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	7819      	ldrb	r1, [r3, #0]
 8003548:	230d      	movs	r3, #13
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	1acb      	subs	r3, r1, r3
 8003550:	3301      	adds	r3, #1
 8003552:	210a      	movs	r1, #10
 8003554:	1879      	adds	r1, r7, r1
 8003556:	7809      	ldrb	r1, [r1, #0]
 8003558:	0849      	lsrs	r1, r1, #1
 800355a:	b2c9      	uxtb	r1, r1
 800355c:	0008      	movs	r0, r1
 800355e:	210c      	movs	r1, #12
 8003560:	1879      	adds	r1, r7, r1
 8003562:	7809      	ldrb	r1, [r1, #0]
 8003564:	0849      	lsrs	r1, r1, #1
 8003566:	b2c9      	uxtb	r1, r1
 8003568:	1a41      	subs	r1, r0, r1
 800356a:	3101      	adds	r1, #1
 800356c:	434b      	muls	r3, r1
 800356e:	429a      	cmp	r2, r3
 8003570:	dbd1      	blt.n	8003516 <weoDrawRectangleFilled+0x136>
			}
//			while(!(USART3->ISR & USART_ISR_TXE)){};
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8003572:	23a0      	movs	r3, #160	; 0xa0
 8003574:	05db      	lsls	r3, r3, #23
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	23a0      	movs	r3, #160	; 0xa0
 800357a:	05db      	lsls	r3, r3, #23
 800357c:	2180      	movs	r1, #128	; 0x80
 800357e:	438a      	bics	r2, r1
 8003580:	615a      	str	r2, [r3, #20]
//			USART_AS_SPI_sendCMD(0xBB);	// command for NOP
			HAL_Delay(1);
 8003582:	2001      	movs	r0, #1
 8003584:	f002 fa5e 	bl	8005a44 <HAL_Delay>
//			GPIOA->ODR &= ~(1 << 7);	//reset dc
			GPIOA->ODR |= 1 << 6;	//set cs
 8003588:	23a0      	movs	r3, #160	; 0xa0
 800358a:	05db      	lsls	r3, r3, #23
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	23a0      	movs	r3, #160	; 0xa0
 8003590:	05db      	lsls	r3, r3, #23
 8003592:	2140      	movs	r1, #64	; 0x40
 8003594:	430a      	orrs	r2, r1
 8003596:	615a      	str	r2, [r3, #20]
 8003598:	e000      	b.n	800359c <weoDrawRectangleFilled+0x1bc>
				return;
 800359a:	46c0      	nop			; (mov r8, r8)
		}
 800359c:	46bd      	mov	sp, r7
 800359e:	b005      	add	sp, #20
 80035a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	40004800 	.word	0x40004800

080035a8 <weoDrawRectangleInit>:
//========================================================================================================================
	void weoDrawRectangleInit(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y) {
 80035a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	0005      	movs	r5, r0
 80035b0:	000c      	movs	r4, r1
 80035b2:	0010      	movs	r0, r2
 80035b4:	0019      	movs	r1, r3
 80035b6:	1dfb      	adds	r3, r7, #7
 80035b8:	1c2a      	adds	r2, r5, #0
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	1dbb      	adds	r3, r7, #6
 80035be:	1c22      	adds	r2, r4, #0
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	1d7b      	adds	r3, r7, #5
 80035c4:	1c02      	adds	r2, r0, #0
 80035c6:	701a      	strb	r2, [r3, #0]
 80035c8:	1d3b      	adds	r3, r7, #4
 80035ca:	1c0a      	adds	r2, r1, #0
 80035cc:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80035ce:	230e      	movs	r3, #14
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	2200      	movs	r2, #0
 80035d4:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80035d6:	1dfb      	adds	r3, r7, #7
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b25b      	sxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	db66      	blt.n	80036ae <weoDrawRectangleInit+0x106>
 80035e0:	1dbb      	adds	r3, r7, #6
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b25b      	sxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	db61      	blt.n	80036ae <weoDrawRectangleInit+0x106>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80035ea:	1d7b      	adds	r3, r7, #5
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	db5c      	blt.n	80036ae <weoDrawRectangleInit+0x106>
 80035f4:	1d3b      	adds	r3, r7, #4
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	b25b      	sxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	db57      	blt.n	80036ae <weoDrawRectangleInit+0x106>
				return;
			}
			start_x_New=start_x;
 80035fe:	240d      	movs	r4, #13
 8003600:	193b      	adds	r3, r7, r4
 8003602:	1dfa      	adds	r2, r7, #7
 8003604:	7812      	ldrb	r2, [r2, #0]
 8003606:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8003608:	250c      	movs	r5, #12
 800360a:	197b      	adds	r3, r7, r5
 800360c:	1d3a      	adds	r2, r7, #4
 800360e:	7812      	ldrb	r2, [r2, #0]
 8003610:	217f      	movs	r1, #127	; 0x7f
 8003612:	1a8a      	subs	r2, r1, r2
 8003614:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8003616:	260b      	movs	r6, #11
 8003618:	19bb      	adds	r3, r7, r6
 800361a:	1d7a      	adds	r2, r7, #5
 800361c:	7812      	ldrb	r2, [r2, #0]
 800361e:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8003620:	230a      	movs	r3, #10
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	1dba      	adds	r2, r7, #6
 8003626:	7812      	ldrb	r2, [r2, #0]
 8003628:	217f      	movs	r1, #127	; 0x7f
 800362a:	1a8a      	subs	r2, r1, r2
 800362c:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800362e:	23a0      	movs	r3, #160	; 0xa0
 8003630:	05db      	lsls	r3, r3, #23
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	23a0      	movs	r3, #160	; 0xa0
 8003636:	05db      	lsls	r3, r3, #23
 8003638:	2140      	movs	r1, #64	; 0x40
 800363a:	438a      	bics	r2, r1
 800363c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800363e:	23a0      	movs	r3, #160	; 0xa0
 8003640:	05db      	lsls	r3, r3, #23
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	23a0      	movs	r3, #160	; 0xa0
 8003646:	05db      	lsls	r3, r3, #23
 8003648:	2180      	movs	r1, #128	; 0x80
 800364a:	438a      	bics	r2, r1
 800364c:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800364e:	2075      	movs	r0, #117	; 0x75
 8003650:	f7ff fde4 	bl	800321c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8003654:	193b      	adds	r3, r7, r4
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	0018      	movs	r0, r3
 800365a:	f7ff fddf 	bl	800321c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800365e:	19bb      	adds	r3, r7, r6
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	0018      	movs	r0, r3
 8003664:	f7ff fdda 	bl	800321c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8003668:	2015      	movs	r0, #21
 800366a:	f7ff fdd7 	bl	800321c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 800366e:	197b      	adds	r3, r7, r5
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	b2db      	uxtb	r3, r3
 8003676:	0018      	movs	r0, r3
 8003678:	f7ff fdd0 	bl	800321c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800367c:	230a      	movs	r3, #10
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	085b      	lsrs	r3, r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	0018      	movs	r0, r3
 8003688:	f7ff fdc8 	bl	800321c <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 800368c:	23a0      	movs	r3, #160	; 0xa0
 800368e:	05db      	lsls	r3, r3, #23
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	23a0      	movs	r3, #160	; 0xa0
 8003694:	05db      	lsls	r3, r3, #23
 8003696:	2180      	movs	r1, #128	; 0x80
 8003698:	430a      	orrs	r2, r1
 800369a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800369c:	23a0      	movs	r3, #160	; 0xa0
 800369e:	05db      	lsls	r3, r3, #23
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	23a0      	movs	r3, #160	; 0xa0
 80036a4:	05db      	lsls	r3, r3, #23
 80036a6:	2140      	movs	r1, #64	; 0x40
 80036a8:	430a      	orrs	r2, r1
 80036aa:	615a      	str	r2, [r3, #20]
 80036ac:	e000      	b.n	80036b0 <weoDrawRectangleInit+0x108>
				return;
 80036ae:	46c0      	nop			; (mov r8, r8)
		}
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b005      	add	sp, #20
 80036b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080036b8 <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af02      	add	r7, sp, #8
 80036be:	0002      	movs	r2, r0
 80036c0:	1dfb      	adds	r3, r7, #7
 80036c2:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 80036c4:	210c      	movs	r1, #12
 80036c6:	187b      	adds	r3, r7, r1
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
 80036cc:	187b      	adds	r3, r7, r1
 80036ce:	1dfa      	adds	r2, r7, #7
 80036d0:	7812      	ldrb	r2, [r2, #0]
 80036d2:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 80036d4:	187a      	adds	r2, r7, r1
 80036d6:	4806      	ldr	r0, [pc, #24]	; (80036f0 <I2C_SOUND_ChangePage+0x38>)
 80036d8:	23fa      	movs	r3, #250	; 0xfa
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	2302      	movs	r3, #2
 80036e0:	2130      	movs	r1, #48	; 0x30
 80036e2:	f003 f9e9 	bl	8006ab8 <HAL_I2C_Master_Transmit>
	}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b004      	add	sp, #16
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	20000138 	.word	0x20000138

080036f4 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	0002      	movs	r2, r0
 80036fc:	1dfb      	adds	r3, r7, #7
 80036fe:	701a      	strb	r2, [r3, #0]
 8003700:	1dbb      	adds	r3, r7, #6
 8003702:	1c0a      	adds	r2, r1, #0
 8003704:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8003706:	210c      	movs	r1, #12
 8003708:	187b      	adds	r3, r7, r1
 800370a:	1dfa      	adds	r2, r7, #7
 800370c:	7812      	ldrb	r2, [r2, #0]
 800370e:	701a      	strb	r2, [r3, #0]
 8003710:	187b      	adds	r3, r7, r1
 8003712:	1dba      	adds	r2, r7, #6
 8003714:	7812      	ldrb	r2, [r2, #0]
 8003716:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 8003718:	187a      	adds	r2, r7, r1
 800371a:	4806      	ldr	r0, [pc, #24]	; (8003734 <WriteReg_I2C_SOUND+0x40>)
 800371c:	23fa      	movs	r3, #250	; 0xfa
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	2302      	movs	r3, #2
 8003724:	2130      	movs	r1, #48	; 0x30
 8003726:	f003 f9c7 	bl	8006ab8 <HAL_I2C_Master_Transmit>
	}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b004      	add	sp, #16
 8003730:	bd80      	pop	{r7, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	20000138 	.word	0x20000138

08003738 <soundSetup>:
	void soundSetup(void) {
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 800373c:	2000      	movs	r0, #0
 800373e:	f7ff ffbb 	bl	80036b8 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 8003742:	2101      	movs	r1, #1
 8003744:	2001      	movs	r0, #1
 8003746:	f7ff ffd5 	bl	80036f4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 800374a:	2001      	movs	r0, #1
 800374c:	f7ff ffb4 	bl	80036b8 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 8003750:	2100      	movs	r1, #0
 8003752:	2002      	movs	r0, #2
 8003754:	f7ff ffce 	bl	80036f4 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 8003758:	200f      	movs	r0, #15
 800375a:	f002 f973 	bl	8005a44 <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 800375e:	2000      	movs	r0, #0
 8003760:	f7ff ffaa 	bl	80036b8 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 8003764:	2103      	movs	r1, #3
 8003766:	2004      	movs	r0, #4
 8003768:	f7ff ffc4 	bl	80036f4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 800376c:	2191      	movs	r1, #145	; 0x91
 800376e:	2005      	movs	r0, #5
 8003770:	f7ff ffc0 	bl	80036f4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 8003774:	2104      	movs	r1, #4
 8003776:	2006      	movs	r0, #6
 8003778:	f7ff ffbc 	bl	80036f4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 800377c:	2100      	movs	r1, #0
 800377e:	2007      	movs	r0, #7
 8003780:	f7ff ffb8 	bl	80036f4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 8003784:	2100      	movs	r1, #0
 8003786:	2008      	movs	r0, #8
 8003788:	f7ff ffb4 	bl	80036f4 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 800378c:	200f      	movs	r0, #15
 800378e:	f002 f959 	bl	8005a44 <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 8003792:	2184      	movs	r1, #132	; 0x84
 8003794:	200b      	movs	r0, #11
 8003796:	f7ff ffad 	bl	80036f4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 800379a:	2182      	movs	r1, #130	; 0x82
 800379c:	200c      	movs	r0, #12
 800379e:	f7ff ffa9 	bl	80036f4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 80037a2:	2100      	movs	r1, #0
 80037a4:	200d      	movs	r0, #13
 80037a6:	f7ff ffa5 	bl	80036f4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 80037aa:	2180      	movs	r1, #128	; 0x80
 80037ac:	200e      	movs	r0, #14
 80037ae:	f7ff ffa1 	bl	80036f4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 80037b2:	2100      	movs	r1, #0
 80037b4:	201b      	movs	r0, #27
 80037b6:	f7ff ff9d 	bl	80036f4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 80037ba:	2100      	movs	r1, #0
 80037bc:	201c      	movs	r0, #28
 80037be:	f7ff ff99 	bl	80036f4 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 80037c2:	2102      	movs	r1, #2
 80037c4:	203c      	movs	r0, #60	; 0x3c
 80037c6:	f7ff ff95 	bl	80036f4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 80037ca:	2001      	movs	r0, #1
 80037cc:	f7ff ff74 	bl	80036b8 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 80037d0:	2110      	movs	r1, #16
 80037d2:	2001      	movs	r0, #1
 80037d4:	f7ff ff8e 	bl	80036f4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 80037d8:	2100      	movs	r1, #0
 80037da:	200a      	movs	r0, #10
 80037dc:	f7ff ff8a 	bl	80036f4 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 80037e0:	2100      	movs	r1, #0
 80037e2:	200c      	movs	r0, #12
 80037e4:	f7ff ff86 	bl	80036f4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 80037e8:	2100      	movs	r1, #0
 80037ea:	2016      	movs	r0, #22
 80037ec:	f7ff ff82 	bl	80036f4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 80037f0:	2100      	movs	r1, #0
 80037f2:	2018      	movs	r0, #24
 80037f4:	f7ff ff7e 	bl	80036f4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 80037f8:	2100      	movs	r1, #0
 80037fa:	2019      	movs	r0, #25
 80037fc:	f7ff ff7a 	bl	80036f4 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 8003800:	2100      	movs	r1, #0
 8003802:	2009      	movs	r0, #9
 8003804:	f7ff ff76 	bl	80036f4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8003808:	2100      	movs	r1, #0
 800380a:	2010      	movs	r0, #16
 800380c:	f7ff ff72 	bl	80036f4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 8003810:	2100      	movs	r1, #0
 8003812:	202e      	movs	r0, #46	; 0x2e
 8003814:	f7ff ff6e 	bl	80036f4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 8003818:	2110      	movs	r1, #16
 800381a:	2030      	movs	r0, #48	; 0x30
 800381c:	f7ff ff6a 	bl	80036f4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 8003820:	2102      	movs	r1, #2
 8003822:	202d      	movs	r0, #45	; 0x2d
 8003824:	f7ff ff66 	bl	80036f4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8003828:	2000      	movs	r0, #0
 800382a:	f7ff ff45 	bl	80036b8 <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 800382e:	2190      	movs	r1, #144	; 0x90
 8003830:	203f      	movs	r0, #63	; 0x3f
 8003832:	f7ff ff5f 	bl	80036f4 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 8003836:	2100      	movs	r1, #0
 8003838:	2041      	movs	r0, #65	; 0x41
 800383a:	f7ff ff5b 	bl	80036f4 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 800383e:	2104      	movs	r1, #4
 8003840:	2040      	movs	r0, #64	; 0x40
 8003842:	f7ff ff57 	bl	80036f4 <WriteReg_I2C_SOUND>
	}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 8003854:	230f      	movs	r3, #15
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	22ff      	movs	r2, #255	; 0xff
 800385a:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 800385c:	230d      	movs	r3, #13
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 8003864:	230a      	movs	r3, #10
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	2200      	movs	r2, #0
 800386a:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 800386c:	4bd3      	ldr	r3, [pc, #844]	; (8003bbc <answer2CPU+0x370>)
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b11      	cmp	r3, #17
 8003878:	d00f      	beq.n	800389a <answer2CPU+0x4e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b12      	cmp	r3, #18
 8003880:	d00b      	beq.n	800389a <answer2CPU+0x4e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b13      	cmp	r3, #19
 8003888:	d007      	beq.n	800389a <answer2CPU+0x4e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b14      	cmp	r3, #20
 8003890:	d003      	beq.n	800389a <answer2CPU+0x4e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b15      	cmp	r3, #21
 8003898:	d105      	bne.n	80038a6 <answer2CPU+0x5a>
 800389a:	4bc9      	ldr	r3, [pc, #804]	; (8003bc0 <answer2CPU+0x374>)
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	4bc8      	ldr	r3, [pc, #800]	; (8003bc0 <answer2CPU+0x374>)
 80038a0:	2140      	movs	r1, #64	; 0x40
 80038a2:	438a      	bics	r2, r1
 80038a4:	615a      	str	r2, [r3, #20]
		ans[0] = cmd[0]|0x80;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2280      	movs	r2, #128	; 0x80
 80038ac:	4252      	negs	r2, r2
 80038ae:	4313      	orrs	r3, r2
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	4bc3      	ldr	r3, [pc, #780]	; (8003bc4 <answer2CPU+0x378>)
 80038b6:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b0f      	cmp	r3, #15
 80038be:	d800      	bhi.n	80038c2 <answer2CPU+0x76>
 80038c0:	e14d      	b.n	8003b5e <answer2CPU+0x312>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b15      	cmp	r3, #21
 80038c8:	d900      	bls.n	80038cc <answer2CPU+0x80>
 80038ca:	e148      	b.n	8003b5e <answer2CPU+0x312>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 80038cc:	23a0      	movs	r3, #160	; 0xa0
 80038ce:	05db      	lsls	r3, r3, #23
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2201      	movs	r2, #1
 80038d4:	4013      	ands	r3, r2
 80038d6:	d106      	bne.n	80038e6 <answer2CPU+0x9a>
					keyboard &= 0b11111110;
 80038d8:	220f      	movs	r2, #15
 80038da:	18bb      	adds	r3, r7, r2
 80038dc:	18ba      	adds	r2, r7, r2
 80038de:	7812      	ldrb	r2, [r2, #0]
 80038e0:	2101      	movs	r1, #1
 80038e2:	438a      	bics	r2, r1
 80038e4:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 80038e6:	23a0      	movs	r3, #160	; 0xa0
 80038e8:	05db      	lsls	r3, r3, #23
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2202      	movs	r2, #2
 80038ee:	4013      	ands	r3, r2
 80038f0:	d106      	bne.n	8003900 <answer2CPU+0xb4>
					keyboard &= 0b11111101;
 80038f2:	220f      	movs	r2, #15
 80038f4:	18bb      	adds	r3, r7, r2
 80038f6:	18ba      	adds	r2, r7, r2
 80038f8:	7812      	ldrb	r2, [r2, #0]
 80038fa:	2102      	movs	r1, #2
 80038fc:	438a      	bics	r2, r1
 80038fe:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8003900:	23a0      	movs	r3, #160	; 0xa0
 8003902:	05db      	lsls	r3, r3, #23
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2210      	movs	r2, #16
 8003908:	4013      	ands	r3, r2
 800390a:	d106      	bne.n	800391a <answer2CPU+0xce>
					keyboard &= 0b11111011;
 800390c:	220f      	movs	r2, #15
 800390e:	18bb      	adds	r3, r7, r2
 8003910:	18ba      	adds	r2, r7, r2
 8003912:	7812      	ldrb	r2, [r2, #0]
 8003914:	2104      	movs	r1, #4
 8003916:	438a      	bics	r2, r1
 8003918:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 800391a:	23a0      	movs	r3, #160	; 0xa0
 800391c:	05db      	lsls	r3, r3, #23
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	019b      	lsls	r3, r3, #6
 8003924:	4013      	ands	r3, r2
 8003926:	d106      	bne.n	8003936 <answer2CPU+0xea>
					keyboard &= 0b11110111;
 8003928:	220f      	movs	r2, #15
 800392a:	18bb      	adds	r3, r7, r2
 800392c:	18ba      	adds	r2, r7, r2
 800392e:	7812      	ldrb	r2, [r2, #0]
 8003930:	2108      	movs	r1, #8
 8003932:	438a      	bics	r2, r1
 8003934:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8003936:	23a0      	movs	r3, #160	; 0xa0
 8003938:	05db      	lsls	r3, r3, #23
 800393a:	691a      	ldr	r2, [r3, #16]
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	01db      	lsls	r3, r3, #7
 8003940:	4013      	ands	r3, r2
 8003942:	d106      	bne.n	8003952 <answer2CPU+0x106>
					keyboard &= 0b11101111;
 8003944:	220f      	movs	r2, #15
 8003946:	18bb      	adds	r3, r7, r2
 8003948:	18ba      	adds	r2, r7, r2
 800394a:	7812      	ldrb	r2, [r2, #0]
 800394c:	2110      	movs	r1, #16
 800394e:	438a      	bics	r2, r1
 8003950:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8003952:	210f      	movs	r1, #15
 8003954:	187b      	adds	r3, r7, r1
 8003956:	187a      	adds	r2, r7, r1
 8003958:	7812      	ldrb	r2, [r2, #0]
 800395a:	43d2      	mvns	r2, r2
 800395c:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 800395e:	2009      	movs	r0, #9
 8003960:	183b      	adds	r3, r7, r0
 8003962:	2204      	movs	r2, #4
 8003964:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003966:	183b      	adds	r3, r7, r0
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b02      	subs	r3, #2
 800396e:	b29a      	uxth	r2, r3
 8003970:	4b94      	ldr	r3, [pc, #592]	; (8003bc4 <answer2CPU+0x378>)
 8003972:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 8003974:	187b      	adds	r3, r7, r1
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	b29a      	uxth	r2, r3
 800397a:	4b92      	ldr	r3, [pc, #584]	; (8003bc4 <answer2CPU+0x378>)
 800397c:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 800397e:	230e      	movs	r3, #14
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e011      	b.n	80039ac <answer2CPU+0x160>
					myCS = myCS + ans[i];
 8003988:	200e      	movs	r0, #14
 800398a:	183b      	adds	r3, r7, r0
 800398c:	781a      	ldrb	r2, [r3, #0]
 800398e:	4b8d      	ldr	r3, [pc, #564]	; (8003bc4 <answer2CPU+0x378>)
 8003990:	0052      	lsls	r2, r2, #1
 8003992:	5ad3      	ldrh	r3, [r2, r3]
 8003994:	b2d9      	uxtb	r1, r3
 8003996:	220d      	movs	r2, #13
 8003998:	18bb      	adds	r3, r7, r2
 800399a:	18ba      	adds	r2, r7, r2
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	188a      	adds	r2, r1, r2
 80039a0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80039a2:	183b      	adds	r3, r7, r0
 80039a4:	781a      	ldrb	r2, [r3, #0]
 80039a6:	183b      	adds	r3, r7, r0
 80039a8:	3201      	adds	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	200e      	movs	r0, #14
 80039ae:	183b      	adds	r3, r7, r0
 80039b0:	781a      	ldrb	r2, [r3, #0]
 80039b2:	2309      	movs	r3, #9
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	429a      	cmp	r2, r3
 80039bc:	dbe4      	blt.n	8003988 <answer2CPU+0x13c>
				}
				myCS = 0 - myCS;
 80039be:	210d      	movs	r1, #13
 80039c0:	187b      	adds	r3, r7, r1
 80039c2:	187a      	adds	r2, r7, r1
 80039c4:	7812      	ldrb	r2, [r2, #0]
 80039c6:	4252      	negs	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 80039ca:	187b      	adds	r3, r7, r1
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	4b7c      	ldr	r3, [pc, #496]	; (8003bc4 <answer2CPU+0x378>)
 80039d2:	80da      	strh	r2, [r3, #6]
				i=0;
 80039d4:	183b      	adds	r3, r7, r0
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	4b7a      	ldr	r3, [pc, #488]	; (8003bc8 <answer2CPU+0x37c>)
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	4013      	ands	r3, r2
 80039e4:	d0fa      	beq.n	80039dc <answer2CPU+0x190>
				USART2->TDR = ans[0]|0x0100;
 80039e6:	4b77      	ldr	r3, [pc, #476]	; (8003bc4 <answer2CPU+0x378>)
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	0052      	lsls	r2, r2, #1
 80039ee:	4313      	orrs	r3, r2
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	4b75      	ldr	r3, [pc, #468]	; (8003bc8 <answer2CPU+0x37c>)
 80039f4:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80039f6:	230e      	movs	r3, #14
 80039f8:	18fb      	adds	r3, r7, r3
 80039fa:	2201      	movs	r2, #1
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	e013      	b.n	8003a28 <answer2CPU+0x1dc>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003a00:	46c0      	nop			; (mov r8, r8)
 8003a02:	4b71      	ldr	r3, [pc, #452]	; (8003bc8 <answer2CPU+0x37c>)
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	2280      	movs	r2, #128	; 0x80
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d0fa      	beq.n	8003a02 <answer2CPU+0x1b6>
				    USART2->TDR = (uint8_t)ans[i];
 8003a0c:	210e      	movs	r1, #14
 8003a0e:	187b      	adds	r3, r7, r1
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	4b6c      	ldr	r3, [pc, #432]	; (8003bc4 <answer2CPU+0x378>)
 8003a14:	0052      	lsls	r2, r2, #1
 8003a16:	5ad3      	ldrh	r3, [r2, r3]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	4b6b      	ldr	r3, [pc, #428]	; (8003bc8 <answer2CPU+0x37c>)
 8003a1c:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8003a1e:	187b      	adds	r3, r7, r1
 8003a20:	781a      	ldrb	r2, [r3, #0]
 8003a22:	187b      	adds	r3, r7, r1
 8003a24:	3201      	adds	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
 8003a28:	230e      	movs	r3, #14
 8003a2a:	18fa      	adds	r2, r7, r3
 8003a2c:	2309      	movs	r3, #9
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	7812      	ldrb	r2, [r2, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d3e3      	bcc.n	8003a00 <answer2CPU+0x1b4>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b11      	cmp	r3, #17
 8003a3e:	d109      	bne.n	8003a54 <answer2CPU+0x208>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	789a      	ldrb	r2, [r3, #2]
 8003a44:	4b61      	ldr	r3, [pc, #388]	; (8003bcc <answer2CPU+0x380>)
 8003a46:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8003a48:	4b5c      	ldr	r3, [pc, #368]	; (8003bbc <answer2CPU+0x370>)
 8003a4a:	2211      	movs	r2, #17
 8003a4c:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003a4e:	4b60      	ldr	r3, [pc, #384]	; (8003bd0 <answer2CPU+0x384>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b12      	cmp	r3, #18
 8003a5a:	d115      	bne.n	8003a88 <answer2CPU+0x23c>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3302      	adds	r3, #2
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	001a      	movs	r2, r3
 8003a64:	4b5b      	ldr	r3, [pc, #364]	; (8003bd4 <answer2CPU+0x388>)
 8003a66:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3303      	adds	r3, #3
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	001a      	movs	r2, r3
 8003a70:	4b59      	ldr	r3, [pc, #356]	; (8003bd8 <answer2CPU+0x38c>)
 8003a72:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	791a      	ldrb	r2, [r3, #4]
 8003a78:	4b54      	ldr	r3, [pc, #336]	; (8003bcc <answer2CPU+0x380>)
 8003a7a:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8003a7c:	4b4f      	ldr	r3, [pc, #316]	; (8003bbc <answer2CPU+0x370>)
 8003a7e:	2212      	movs	r2, #18
 8003a80:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003a82:	4b53      	ldr	r3, [pc, #332]	; (8003bd0 <answer2CPU+0x384>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b13      	cmp	r3, #19
 8003a8e:	d134      	bne.n	8003afa <answer2CPU+0x2ae>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3302      	adds	r3, #2
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	001a      	movs	r2, r3
 8003a98:	4b4e      	ldr	r3, [pc, #312]	; (8003bd4 <answer2CPU+0x388>)
 8003a9a:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3303      	adds	r3, #3
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	4b4c      	ldr	r3, [pc, #304]	; (8003bd8 <answer2CPU+0x38c>)
 8003aa6:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	3b03      	subs	r3, #3
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	4b4a      	ldr	r3, [pc, #296]	; (8003bdc <answer2CPU+0x390>)
 8003ab4:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8003ab6:	230e      	movs	r3, #14
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	e00f      	b.n	8003ae0 <answer2CPU+0x294>
					dataASCII[i] = cmd[i+4];
 8003ac0:	200e      	movs	r0, #14
 8003ac2:	183b      	adds	r3, r7, r0
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	18d2      	adds	r2, r2, r3
 8003acc:	183b      	adds	r3, r7, r0
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	7811      	ldrb	r1, [r2, #0]
 8003ad2:	4a43      	ldr	r2, [pc, #268]	; (8003be0 <answer2CPU+0x394>)
 8003ad4:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8003ad6:	183b      	adds	r3, r7, r0
 8003ad8:	781a      	ldrb	r2, [r3, #0]
 8003ada:	183b      	adds	r3, r7, r0
 8003adc:	3201      	adds	r2, #1
 8003ade:	701a      	strb	r2, [r3, #0]
 8003ae0:	4b3e      	ldr	r3, [pc, #248]	; (8003bdc <answer2CPU+0x390>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	220e      	movs	r2, #14
 8003ae6:	18ba      	adds	r2, r7, r2
 8003ae8:	7812      	ldrb	r2, [r2, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d3e8      	bcc.n	8003ac0 <answer2CPU+0x274>
				}
					cmd2Execute=0x13;
 8003aee:	4b33      	ldr	r3, [pc, #204]	; (8003bbc <answer2CPU+0x370>)
 8003af0:	2213      	movs	r2, #19
 8003af2:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003af4:	4b36      	ldr	r3, [pc, #216]	; (8003bd0 <answer2CPU+0x384>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b14      	cmp	r3, #20
 8003b00:	d109      	bne.n	8003b16 <answer2CPU+0x2ca>
					numSound = cmd[2];
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	789a      	ldrb	r2, [r3, #2]
 8003b06:	4b37      	ldr	r3, [pc, #220]	; (8003be4 <answer2CPU+0x398>)
 8003b08:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8003b0a:	4b2c      	ldr	r3, [pc, #176]	; (8003bbc <answer2CPU+0x370>)
 8003b0c:	2214      	movs	r2, #20
 8003b0e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003b10:	4b2f      	ldr	r3, [pc, #188]	; (8003bd0 <answer2CPU+0x384>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b15      	cmp	r3, #21
 8003b1c:	d10d      	bne.n	8003b3a <answer2CPU+0x2ee>
					volume = cmd[2];
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	789a      	ldrb	r2, [r3, #2]
 8003b22:	4b31      	ldr	r3, [pc, #196]	; (8003be8 <answer2CPU+0x39c>)
 8003b24:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	78da      	ldrb	r2, [r3, #3]
 8003b2a:	4b30      	ldr	r3, [pc, #192]	; (8003bec <answer2CPU+0x3a0>)
 8003b2c:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8003b2e:	4b23      	ldr	r3, [pc, #140]	; (8003bbc <answer2CPU+0x370>)
 8003b30:	2215      	movs	r2, #21
 8003b32:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003b34:	4b26      	ldr	r3, [pc, #152]	; (8003bd0 <answer2CPU+0x384>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b16      	cmp	r3, #22
 8003b40:	d10d      	bne.n	8003b5e <answer2CPU+0x312>
					volume = cmd[3];
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	78da      	ldrb	r2, [r3, #3]
 8003b46:	4b28      	ldr	r3, [pc, #160]	; (8003be8 <answer2CPU+0x39c>)
 8003b48:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	791a      	ldrb	r2, [r3, #4]
 8003b4e:	4b27      	ldr	r3, [pc, #156]	; (8003bec <answer2CPU+0x3a0>)
 8003b50:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8003b52:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <answer2CPU+0x370>)
 8003b54:	2216      	movs	r2, #22
 8003b56:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <answer2CPU+0x384>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d000      	beq.n	8003b68 <answer2CPU+0x31c>
 8003b66:	e09b      	b.n	8003ca0 <answer2CPU+0x454>
				myLength = 0x14; //20 bytes length answer
 8003b68:	2109      	movs	r1, #9
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	2214      	movs	r2, #20
 8003b6e:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003b70:	187b      	adds	r3, r7, r1
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b02      	subs	r3, #2
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <answer2CPU+0x378>)
 8003b7c:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003b7e:	230e      	movs	r3, #14
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	e010      	b.n	8003baa <answer2CPU+0x35e>
					ans[i + 2] = PCB_type[i];
 8003b88:	200e      	movs	r0, #14
 8003b8a:	183b      	adds	r3, r7, r0
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	4a18      	ldr	r2, [pc, #96]	; (8003bf0 <answer2CPU+0x3a4>)
 8003b90:	5cd1      	ldrb	r1, [r2, r3]
 8003b92:	183b      	adds	r3, r7, r0
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	1c9a      	adds	r2, r3, #2
 8003b98:	b289      	uxth	r1, r1
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <answer2CPU+0x378>)
 8003b9c:	0052      	lsls	r2, r2, #1
 8003b9e:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003ba0:	183b      	adds	r3, r7, r0
 8003ba2:	781a      	ldrb	r2, [r3, #0]
 8003ba4:	183b      	adds	r3, r7, r0
 8003ba6:	3201      	adds	r2, #1
 8003ba8:	701a      	strb	r2, [r3, #0]
 8003baa:	220e      	movs	r2, #14
 8003bac:	18bb      	adds	r3, r7, r2
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d9e9      	bls.n	8003b88 <answer2CPU+0x33c>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8003bb4:	18bb      	adds	r3, r7, r2
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	e02d      	b.n	8003c18 <answer2CPU+0x3cc>
 8003bbc:	20000372 	.word	0x20000372
 8003bc0:	50000800 	.word	0x50000800
 8003bc4:	200003c0 	.word	0x200003c0
 8003bc8:	40004400 	.word	0x40004400
 8003bcc:	20000371 	.word	0x20000371
 8003bd0:	200003d4 	.word	0x200003d4
 8003bd4:	200001fc 	.word	0x200001fc
 8003bd8:	20000290 	.word	0x20000290
 8003bdc:	200003bd 	.word	0x200003bd
 8003be0:	200000a0 	.word	0x200000a0
 8003be4:	2000043d 	.word	0x2000043d
 8003be8:	200001f8 	.word	0x200001f8
 8003bec:	200002fc 	.word	0x200002fc
 8003bf0:	20000000 	.word	0x20000000
					myCS = myCS + ans[i];
 8003bf4:	200e      	movs	r0, #14
 8003bf6:	183b      	adds	r3, r7, r0
 8003bf8:	781a      	ldrb	r2, [r3, #0]
 8003bfa:	4bdb      	ldr	r3, [pc, #876]	; (8003f68 <answer2CPU+0x71c>)
 8003bfc:	0052      	lsls	r2, r2, #1
 8003bfe:	5ad3      	ldrh	r3, [r2, r3]
 8003c00:	b2d9      	uxtb	r1, r3
 8003c02:	220d      	movs	r2, #13
 8003c04:	18bb      	adds	r3, r7, r2
 8003c06:	18ba      	adds	r2, r7, r2
 8003c08:	7812      	ldrb	r2, [r2, #0]
 8003c0a:	188a      	adds	r2, r1, r2
 8003c0c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8003c0e:	183b      	adds	r3, r7, r0
 8003c10:	781a      	ldrb	r2, [r3, #0]
 8003c12:	183b      	adds	r3, r7, r0
 8003c14:	3201      	adds	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	230e      	movs	r3, #14
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	781a      	ldrb	r2, [r3, #0]
 8003c1e:	2009      	movs	r0, #9
 8003c20:	183b      	adds	r3, r7, r0
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	429a      	cmp	r2, r3
 8003c28:	dbe4      	blt.n	8003bf4 <answer2CPU+0x3a8>
				}
				myCS = 0 - myCS;
 8003c2a:	210d      	movs	r1, #13
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	187a      	adds	r2, r7, r1
 8003c30:	7812      	ldrb	r2, [r2, #0]
 8003c32:	4252      	negs	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003c36:	183b      	adds	r3, r7, r0
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	1e5a      	subs	r2, r3, #1
 8003c3c:	187b      	adds	r3, r7, r1
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	b299      	uxth	r1, r3
 8003c42:	4bc9      	ldr	r3, [pc, #804]	; (8003f68 <answer2CPU+0x71c>)
 8003c44:	0052      	lsls	r2, r2, #1
 8003c46:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	4bc8      	ldr	r3, [pc, #800]	; (8003f6c <answer2CPU+0x720>)
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	2280      	movs	r2, #128	; 0x80
 8003c50:	4013      	ands	r3, r2
 8003c52:	d0fa      	beq.n	8003c4a <answer2CPU+0x3fe>
				USART2->TDR = ans[0]|0x0100;
 8003c54:	4bc4      	ldr	r3, [pc, #784]	; (8003f68 <answer2CPU+0x71c>)
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	2280      	movs	r2, #128	; 0x80
 8003c5a:	0052      	lsls	r2, r2, #1
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	4bc2      	ldr	r3, [pc, #776]	; (8003f6c <answer2CPU+0x720>)
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003c64:	e014      	b.n	8003c90 <answer2CPU+0x444>
				  {
				    i++;
 8003c66:	210e      	movs	r1, #14
 8003c68:	187b      	adds	r3, r7, r1
 8003c6a:	781a      	ldrb	r2, [r3, #0]
 8003c6c:	187b      	adds	r3, r7, r1
 8003c6e:	3201      	adds	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	4bbd      	ldr	r3, [pc, #756]	; (8003f6c <answer2CPU+0x720>)
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	2280      	movs	r2, #128	; 0x80
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d0fa      	beq.n	8003c74 <answer2CPU+0x428>
				    USART2->TDR = (uint8_t)ans[i];
 8003c7e:	230e      	movs	r3, #14
 8003c80:	18fb      	adds	r3, r7, r3
 8003c82:	781a      	ldrb	r2, [r3, #0]
 8003c84:	4bb8      	ldr	r3, [pc, #736]	; (8003f68 <answer2CPU+0x71c>)
 8003c86:	0052      	lsls	r2, r2, #1
 8003c88:	5ad3      	ldrh	r3, [r2, r3]
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	4bb7      	ldr	r3, [pc, #732]	; (8003f6c <answer2CPU+0x720>)
 8003c8e:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003c90:	230e      	movs	r3, #14
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	781a      	ldrb	r2, [r3, #0]
 8003c96:	4bb4      	ldr	r3, [pc, #720]	; (8003f68 <answer2CPU+0x71c>)
 8003c98:	0052      	lsls	r2, r2, #1
 8003c9a:	5ad3      	ldrh	r3, [r2, r3]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e2      	bne.n	8003c66 <answer2CPU+0x41a>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d000      	beq.n	8003caa <answer2CPU+0x45e>
 8003ca8:	e07f      	b.n	8003daa <answer2CPU+0x55e>
				myLength = 0x0B; //19 bytes length answer
 8003caa:	2109      	movs	r1, #9
 8003cac:	187b      	adds	r3, r7, r1
 8003cae:	220b      	movs	r2, #11
 8003cb0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003cb2:	187b      	adds	r3, r7, r1
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b02      	subs	r3, #2
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	4baa      	ldr	r3, [pc, #680]	; (8003f68 <answer2CPU+0x71c>)
 8003cbe:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003cc0:	230e      	movs	r3, #14
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	e010      	b.n	8003cec <answer2CPU+0x4a0>
					ans[i + 2] = PCB_rev[i];
 8003cca:	200e      	movs	r0, #14
 8003ccc:	183b      	adds	r3, r7, r0
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	4aa7      	ldr	r2, [pc, #668]	; (8003f70 <answer2CPU+0x724>)
 8003cd2:	5cd1      	ldrb	r1, [r2, r3]
 8003cd4:	183b      	adds	r3, r7, r0
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	1c9a      	adds	r2, r3, #2
 8003cda:	b289      	uxth	r1, r1
 8003cdc:	4ba2      	ldr	r3, [pc, #648]	; (8003f68 <answer2CPU+0x71c>)
 8003cde:	0052      	lsls	r2, r2, #1
 8003ce0:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003ce2:	183b      	adds	r3, r7, r0
 8003ce4:	781a      	ldrb	r2, [r3, #0]
 8003ce6:	183b      	adds	r3, r7, r0
 8003ce8:	3201      	adds	r2, #1
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	220e      	movs	r2, #14
 8003cee:	18bb      	adds	r3, r7, r2
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b10      	cmp	r3, #16
 8003cf4:	d9e9      	bls.n	8003cca <answer2CPU+0x47e>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8003cf6:	18bb      	adds	r3, r7, r2
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	e011      	b.n	8003d22 <answer2CPU+0x4d6>
					myCS = myCS + ans[i];
 8003cfe:	200e      	movs	r0, #14
 8003d00:	183b      	adds	r3, r7, r0
 8003d02:	781a      	ldrb	r2, [r3, #0]
 8003d04:	4b98      	ldr	r3, [pc, #608]	; (8003f68 <answer2CPU+0x71c>)
 8003d06:	0052      	lsls	r2, r2, #1
 8003d08:	5ad3      	ldrh	r3, [r2, r3]
 8003d0a:	b2d9      	uxtb	r1, r3
 8003d0c:	220d      	movs	r2, #13
 8003d0e:	18bb      	adds	r3, r7, r2
 8003d10:	18ba      	adds	r2, r7, r2
 8003d12:	7812      	ldrb	r2, [r2, #0]
 8003d14:	188a      	adds	r2, r1, r2
 8003d16:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8003d18:	183b      	adds	r3, r7, r0
 8003d1a:	781a      	ldrb	r2, [r3, #0]
 8003d1c:	183b      	adds	r3, r7, r0
 8003d1e:	3201      	adds	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	230e      	movs	r3, #14
 8003d24:	18fb      	adds	r3, r7, r3
 8003d26:	781a      	ldrb	r2, [r3, #0]
 8003d28:	2009      	movs	r0, #9
 8003d2a:	183b      	adds	r3, r7, r0
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	429a      	cmp	r2, r3
 8003d32:	dbe4      	blt.n	8003cfe <answer2CPU+0x4b2>
				}
				myCS = 0 - myCS;
 8003d34:	210d      	movs	r1, #13
 8003d36:	187b      	adds	r3, r7, r1
 8003d38:	187a      	adds	r2, r7, r1
 8003d3a:	7812      	ldrb	r2, [r2, #0]
 8003d3c:	4252      	negs	r2, r2
 8003d3e:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003d40:	183b      	adds	r3, r7, r0
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	1e5a      	subs	r2, r3, #1
 8003d46:	187b      	adds	r3, r7, r1
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	b299      	uxth	r1, r3
 8003d4c:	4b86      	ldr	r3, [pc, #536]	; (8003f68 <answer2CPU+0x71c>)
 8003d4e:	0052      	lsls	r2, r2, #1
 8003d50:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	4b85      	ldr	r3, [pc, #532]	; (8003f6c <answer2CPU+0x720>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	2280      	movs	r2, #128	; 0x80
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d0fa      	beq.n	8003d54 <answer2CPU+0x508>
				USART2->TDR = ans[0]|0x0100;
 8003d5e:	4b82      	ldr	r3, [pc, #520]	; (8003f68 <answer2CPU+0x71c>)
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	2280      	movs	r2, #128	; 0x80
 8003d64:	0052      	lsls	r2, r2, #1
 8003d66:	4313      	orrs	r3, r2
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	4b80      	ldr	r3, [pc, #512]	; (8003f6c <answer2CPU+0x720>)
 8003d6c:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003d6e:	e014      	b.n	8003d9a <answer2CPU+0x54e>
					  {
					    i++;
 8003d70:	210e      	movs	r1, #14
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	781a      	ldrb	r2, [r3, #0]
 8003d76:	187b      	adds	r3, r7, r1
 8003d78:	3201      	adds	r2, #1
 8003d7a:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	4b7b      	ldr	r3, [pc, #492]	; (8003f6c <answer2CPU+0x720>)
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	4013      	ands	r3, r2
 8003d86:	d0fa      	beq.n	8003d7e <answer2CPU+0x532>
					    USART2->TDR = (uint8_t)ans[i];
 8003d88:	230e      	movs	r3, #14
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	781a      	ldrb	r2, [r3, #0]
 8003d8e:	4b76      	ldr	r3, [pc, #472]	; (8003f68 <answer2CPU+0x71c>)
 8003d90:	0052      	lsls	r2, r2, #1
 8003d92:	5ad3      	ldrh	r3, [r2, r3]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	4b75      	ldr	r3, [pc, #468]	; (8003f6c <answer2CPU+0x720>)
 8003d98:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003d9a:	230e      	movs	r3, #14
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	781a      	ldrb	r2, [r3, #0]
 8003da0:	4b71      	ldr	r3, [pc, #452]	; (8003f68 <answer2CPU+0x71c>)
 8003da2:	0052      	lsls	r2, r2, #1
 8003da4:	5ad3      	ldrh	r3, [r2, r3]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e2      	bne.n	8003d70 <answer2CPU+0x524>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d000      	beq.n	8003db4 <answer2CPU+0x568>
 8003db2:	e07f      	b.n	8003eb4 <answer2CPU+0x668>
				myLength = 0x13; //19 bytes length answer
 8003db4:	2109      	movs	r1, #9
 8003db6:	187b      	adds	r3, r7, r1
 8003db8:	2213      	movs	r2, #19
 8003dba:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003dbc:	187b      	adds	r3, r7, r1
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b02      	subs	r3, #2
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	4b68      	ldr	r3, [pc, #416]	; (8003f68 <answer2CPU+0x71c>)
 8003dc8:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003dca:	230e      	movs	r3, #14
 8003dcc:	18fb      	adds	r3, r7, r3
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e010      	b.n	8003df6 <answer2CPU+0x5aa>
					ans[i + 2] = EmitterSN[i];
 8003dd4:	200e      	movs	r0, #14
 8003dd6:	183b      	adds	r3, r7, r0
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	4a66      	ldr	r2, [pc, #408]	; (8003f74 <answer2CPU+0x728>)
 8003ddc:	5cd1      	ldrb	r1, [r2, r3]
 8003dde:	183b      	adds	r3, r7, r0
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	1c9a      	adds	r2, r3, #2
 8003de4:	b289      	uxth	r1, r1
 8003de6:	4b60      	ldr	r3, [pc, #384]	; (8003f68 <answer2CPU+0x71c>)
 8003de8:	0052      	lsls	r2, r2, #1
 8003dea:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003dec:	183b      	adds	r3, r7, r0
 8003dee:	781a      	ldrb	r2, [r3, #0]
 8003df0:	183b      	adds	r3, r7, r0
 8003df2:	3201      	adds	r2, #1
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	220e      	movs	r2, #14
 8003df8:	18bb      	adds	r3, r7, r2
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d9e9      	bls.n	8003dd4 <answer2CPU+0x588>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8003e00:	18bb      	adds	r3, r7, r2
 8003e02:	2200      	movs	r2, #0
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	e011      	b.n	8003e2c <answer2CPU+0x5e0>
					myCS = myCS + ans[i];
 8003e08:	200e      	movs	r0, #14
 8003e0a:	183b      	adds	r3, r7, r0
 8003e0c:	781a      	ldrb	r2, [r3, #0]
 8003e0e:	4b56      	ldr	r3, [pc, #344]	; (8003f68 <answer2CPU+0x71c>)
 8003e10:	0052      	lsls	r2, r2, #1
 8003e12:	5ad3      	ldrh	r3, [r2, r3]
 8003e14:	b2d9      	uxtb	r1, r3
 8003e16:	220d      	movs	r2, #13
 8003e18:	18bb      	adds	r3, r7, r2
 8003e1a:	18ba      	adds	r2, r7, r2
 8003e1c:	7812      	ldrb	r2, [r2, #0]
 8003e1e:	188a      	adds	r2, r1, r2
 8003e20:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8003e22:	183b      	adds	r3, r7, r0
 8003e24:	781a      	ldrb	r2, [r3, #0]
 8003e26:	183b      	adds	r3, r7, r0
 8003e28:	3201      	adds	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	230e      	movs	r3, #14
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	2009      	movs	r0, #9
 8003e34:	183b      	adds	r3, r7, r0
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	dbe4      	blt.n	8003e08 <answer2CPU+0x5bc>
				}
				myCS = 0 - myCS;
 8003e3e:	210d      	movs	r1, #13
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	187a      	adds	r2, r7, r1
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	4252      	negs	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003e4a:	183b      	adds	r3, r7, r0
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	1e5a      	subs	r2, r3, #1
 8003e50:	187b      	adds	r3, r7, r1
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	b299      	uxth	r1, r3
 8003e56:	4b44      	ldr	r3, [pc, #272]	; (8003f68 <answer2CPU+0x71c>)
 8003e58:	0052      	lsls	r2, r2, #1
 8003e5a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003e5c:	46c0      	nop			; (mov r8, r8)
 8003e5e:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <answer2CPU+0x720>)
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	4013      	ands	r3, r2
 8003e66:	d0fa      	beq.n	8003e5e <answer2CPU+0x612>
				USART2->TDR = ans[0]|0x0100;
 8003e68:	4b3f      	ldr	r3, [pc, #252]	; (8003f68 <answer2CPU+0x71c>)
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	2280      	movs	r2, #128	; 0x80
 8003e6e:	0052      	lsls	r2, r2, #1
 8003e70:	4313      	orrs	r3, r2
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	4b3d      	ldr	r3, [pc, #244]	; (8003f6c <answer2CPU+0x720>)
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003e78:	e014      	b.n	8003ea4 <answer2CPU+0x658>
				  {
				    i++;
 8003e7a:	210e      	movs	r1, #14
 8003e7c:	187b      	adds	r3, r7, r1
 8003e7e:	781a      	ldrb	r2, [r3, #0]
 8003e80:	187b      	adds	r3, r7, r1
 8003e82:	3201      	adds	r2, #1
 8003e84:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	4b38      	ldr	r3, [pc, #224]	; (8003f6c <answer2CPU+0x720>)
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	2280      	movs	r2, #128	; 0x80
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d0fa      	beq.n	8003e88 <answer2CPU+0x63c>
				    	USART2->TDR = (uint8_t)ans[i];
 8003e92:	230e      	movs	r3, #14
 8003e94:	18fb      	adds	r3, r7, r3
 8003e96:	781a      	ldrb	r2, [r3, #0]
 8003e98:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <answer2CPU+0x71c>)
 8003e9a:	0052      	lsls	r2, r2, #1
 8003e9c:	5ad3      	ldrh	r3, [r2, r3]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <answer2CPU+0x720>)
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003ea4:	230e      	movs	r3, #14
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	781a      	ldrb	r2, [r3, #0]
 8003eaa:	4b2f      	ldr	r3, [pc, #188]	; (8003f68 <answer2CPU+0x71c>)
 8003eac:	0052      	lsls	r2, r2, #1
 8003eae:	5ad3      	ldrh	r3, [r2, r3]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e2      	bne.n	8003e7a <answer2CPU+0x62e>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d000      	beq.n	8003ebe <answer2CPU+0x672>
 8003ebc:	e07b      	b.n	8003fb6 <answer2CPU+0x76a>
				myLength = 0x04; //4 bytes length answer
 8003ebe:	2109      	movs	r1, #9
 8003ec0:	187b      	adds	r3, r7, r1
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003ec6:	187b      	adds	r3, r7, r1
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b02      	subs	r3, #2
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	4b25      	ldr	r3, [pc, #148]	; (8003f68 <answer2CPU+0x71c>)
 8003ed2:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8003ed4:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <answer2CPU+0x72c>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	4b23      	ldr	r3, [pc, #140]	; (8003f68 <answer2CPU+0x71c>)
 8003edc:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8003ede:	230d      	movs	r3, #13
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	4b20      	ldr	r3, [pc, #128]	; (8003f68 <answer2CPU+0x71c>)
 8003ee8:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8003eea:	230e      	movs	r3, #14
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	2200      	movs	r2, #0
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e011      	b.n	8003f18 <answer2CPU+0x6cc>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8003ef4:	200e      	movs	r0, #14
 8003ef6:	183b      	adds	r3, r7, r0
 8003ef8:	781a      	ldrb	r2, [r3, #0]
 8003efa:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <answer2CPU+0x71c>)
 8003efc:	0052      	lsls	r2, r2, #1
 8003efe:	5ad3      	ldrh	r3, [r2, r3]
 8003f00:	b2d9      	uxtb	r1, r3
 8003f02:	220d      	movs	r2, #13
 8003f04:	18bb      	adds	r3, r7, r2
 8003f06:	18ba      	adds	r2, r7, r2
 8003f08:	7812      	ldrb	r2, [r2, #0]
 8003f0a:	188a      	adds	r2, r1, r2
 8003f0c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8003f0e:	183b      	adds	r3, r7, r0
 8003f10:	781a      	ldrb	r2, [r3, #0]
 8003f12:	183b      	adds	r3, r7, r0
 8003f14:	3201      	adds	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]
 8003f18:	230e      	movs	r3, #14
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	781a      	ldrb	r2, [r3, #0]
 8003f1e:	2009      	movs	r0, #9
 8003f20:	183b      	adds	r3, r7, r0
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	429a      	cmp	r2, r3
 8003f28:	dbe4      	blt.n	8003ef4 <answer2CPU+0x6a8>
				}
				myCS = 0 - myCS;
 8003f2a:	210d      	movs	r1, #13
 8003f2c:	187b      	adds	r3, r7, r1
 8003f2e:	187a      	adds	r2, r7, r1
 8003f30:	7812      	ldrb	r2, [r2, #0]
 8003f32:	4252      	negs	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003f36:	183b      	adds	r3, r7, r0
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	1e5a      	subs	r2, r3, #1
 8003f3c:	187b      	adds	r3, r7, r1
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	b299      	uxth	r1, r3
 8003f42:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <answer2CPU+0x71c>)
 8003f44:	0052      	lsls	r2, r2, #1
 8003f46:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003f48:	46c0      	nop			; (mov r8, r8)
 8003f4a:	4b08      	ldr	r3, [pc, #32]	; (8003f6c <answer2CPU+0x720>)
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	2280      	movs	r2, #128	; 0x80
 8003f50:	4013      	ands	r3, r2
 8003f52:	d0fa      	beq.n	8003f4a <answer2CPU+0x6fe>
					USART2->TDR = ans[0]|0x0100;
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <answer2CPU+0x71c>)
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	2280      	movs	r2, #128	; 0x80
 8003f5a:	0052      	lsls	r2, r2, #1
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	4b02      	ldr	r3, [pc, #8]	; (8003f6c <answer2CPU+0x720>)
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8003f64:	e01f      	b.n	8003fa6 <answer2CPU+0x75a>
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	200003c0 	.word	0x200003c0
 8003f6c:	40004400 	.word	0x40004400
 8003f70:	20000014 	.word	0x20000014
 8003f74:	20000020 	.word	0x20000020
 8003f78:	2000001c 	.word	0x2000001c
						{
						  i++;
 8003f7c:	210e      	movs	r1, #14
 8003f7e:	187b      	adds	r3, r7, r1
 8003f80:	781a      	ldrb	r2, [r3, #0]
 8003f82:	187b      	adds	r3, r7, r1
 8003f84:	3201      	adds	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8003f88:	46c0      	nop			; (mov r8, r8)
 8003f8a:	4b4e      	ldr	r3, [pc, #312]	; (80040c4 <answer2CPU+0x878>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	2280      	movs	r2, #128	; 0x80
 8003f90:	4013      	ands	r3, r2
 8003f92:	d0fa      	beq.n	8003f8a <answer2CPU+0x73e>
						     USART2->TDR = (uint8_t)ans[i];
 8003f94:	230e      	movs	r3, #14
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	781a      	ldrb	r2, [r3, #0]
 8003f9a:	4b4b      	ldr	r3, [pc, #300]	; (80040c8 <answer2CPU+0x87c>)
 8003f9c:	0052      	lsls	r2, r2, #1
 8003f9e:	5ad3      	ldrh	r3, [r2, r3]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	4b48      	ldr	r3, [pc, #288]	; (80040c4 <answer2CPU+0x878>)
 8003fa4:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8003fa6:	230e      	movs	r3, #14
 8003fa8:	18fb      	adds	r3, r7, r3
 8003faa:	781a      	ldrb	r2, [r3, #0]
 8003fac:	4b46      	ldr	r3, [pc, #280]	; (80040c8 <answer2CPU+0x87c>)
 8003fae:	0052      	lsls	r2, r2, #1
 8003fb0:	5ad3      	ldrh	r3, [r2, r3]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1e2      	bne.n	8003f7c <answer2CPU+0x730>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d000      	beq.n	8003fc0 <answer2CPU+0x774>
 8003fbe:	e076      	b.n	80040ae <answer2CPU+0x862>
				myLength = 0x04; //4 bytes length answer
 8003fc0:	2109      	movs	r1, #9
 8003fc2:	187b      	adds	r3, r7, r1
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003fc8:	187b      	adds	r3, r7, r1
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b02      	subs	r3, #2
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	4b3d      	ldr	r3, [pc, #244]	; (80040c8 <answer2CPU+0x87c>)
 8003fd4:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3302      	adds	r3, #2
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	001a      	movs	r2, r3
 8003fde:	4b3b      	ldr	r3, [pc, #236]	; (80040cc <answer2CPU+0x880>)
 8003fe0:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8003fe2:	4b3b      	ldr	r3, [pc, #236]	; (80040d0 <answer2CPU+0x884>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	4b37      	ldr	r3, [pc, #220]	; (80040c8 <answer2CPU+0x87c>)
 8003fea:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8003fec:	230d      	movs	r3, #13
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	4b34      	ldr	r3, [pc, #208]	; (80040c8 <answer2CPU+0x87c>)
 8003ff6:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8003ff8:	230e      	movs	r3, #14
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
 8004000:	e011      	b.n	8004026 <answer2CPU+0x7da>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8004002:	200e      	movs	r0, #14
 8004004:	183b      	adds	r3, r7, r0
 8004006:	781a      	ldrb	r2, [r3, #0]
 8004008:	4b2f      	ldr	r3, [pc, #188]	; (80040c8 <answer2CPU+0x87c>)
 800400a:	0052      	lsls	r2, r2, #1
 800400c:	5ad3      	ldrh	r3, [r2, r3]
 800400e:	b2d9      	uxtb	r1, r3
 8004010:	220d      	movs	r2, #13
 8004012:	18bb      	adds	r3, r7, r2
 8004014:	18ba      	adds	r2, r7, r2
 8004016:	7812      	ldrb	r2, [r2, #0]
 8004018:	188a      	adds	r2, r1, r2
 800401a:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 800401c:	183b      	adds	r3, r7, r0
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	183b      	adds	r3, r7, r0
 8004022:	3201      	adds	r2, #1
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	230e      	movs	r3, #14
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	2009      	movs	r0, #9
 800402e:	183b      	adds	r3, r7, r0
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	3b01      	subs	r3, #1
 8004034:	429a      	cmp	r2, r3
 8004036:	dbe4      	blt.n	8004002 <answer2CPU+0x7b6>
				}
				myCS = 0 - myCS;
 8004038:	210d      	movs	r1, #13
 800403a:	187b      	adds	r3, r7, r1
 800403c:	187a      	adds	r2, r7, r1
 800403e:	7812      	ldrb	r2, [r2, #0]
 8004040:	4252      	negs	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8004044:	183b      	adds	r3, r7, r0
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	1e5a      	subs	r2, r3, #1
 800404a:	187b      	adds	r3, r7, r1
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	b299      	uxth	r1, r3
 8004050:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <answer2CPU+0x87c>)
 8004052:	0052      	lsls	r2, r2, #1
 8004054:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <answer2CPU+0x878>)
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	2280      	movs	r2, #128	; 0x80
 800405e:	4013      	ands	r3, r2
 8004060:	d0fa      	beq.n	8004058 <answer2CPU+0x80c>
				USART2->TDR = ans[0]|0x0100;
 8004062:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <answer2CPU+0x87c>)
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	2280      	movs	r2, #128	; 0x80
 8004068:	0052      	lsls	r2, r2, #1
 800406a:	4313      	orrs	r3, r2
 800406c:	b29a      	uxth	r2, r3
 800406e:	4b15      	ldr	r3, [pc, #84]	; (80040c4 <answer2CPU+0x878>)
 8004070:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8004072:	e014      	b.n	800409e <answer2CPU+0x852>
				{
				  i++;
 8004074:	210e      	movs	r1, #14
 8004076:	187b      	adds	r3, r7, r1
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	187b      	adds	r3, r7, r1
 800407c:	3201      	adds	r2, #1
 800407e:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <answer2CPU+0x878>)
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	2280      	movs	r2, #128	; 0x80
 8004088:	4013      	ands	r3, r2
 800408a:	d0fa      	beq.n	8004082 <answer2CPU+0x836>
				  USART2->TDR = (uint8_t)ans[i];
 800408c:	230e      	movs	r3, #14
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	781a      	ldrb	r2, [r3, #0]
 8004092:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <answer2CPU+0x87c>)
 8004094:	0052      	lsls	r2, r2, #1
 8004096:	5ad3      	ldrh	r3, [r2, r3]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <answer2CPU+0x878>)
 800409c:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 800409e:	230e      	movs	r3, #14
 80040a0:	18fb      	adds	r3, r7, r3
 80040a2:	781a      	ldrb	r2, [r3, #0]
 80040a4:	4b08      	ldr	r3, [pc, #32]	; (80040c8 <answer2CPU+0x87c>)
 80040a6:	0052      	lsls	r2, r2, #1
 80040a8:	5ad3      	ldrh	r3, [r2, r3]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e2      	bne.n	8004074 <answer2CPU+0x828>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <answer2CPU+0x878>)
 80040b0:	6a1a      	ldr	r2, [r3, #32]
 80040b2:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <answer2CPU+0x878>)
 80040b4:	2108      	movs	r1, #8
 80040b6:	430a      	orrs	r2, r1
 80040b8:	621a      	str	r2, [r3, #32]
}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	0018      	movs	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	b004      	add	sp, #16
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40004400 	.word	0x40004400
 80040c8:	200003c0 	.word	0x200003c0
 80040cc:	20000308 	.word	0x20000308
 80040d0:	200001f9 	.word	0x200001f9

080040d4 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 80040da:	2001      	movs	r0, #1
 80040dc:	f001 fcb2 	bl	8005a44 <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 80040e0:	4b28      	ldr	r3, [pc, #160]	; (8004184 <MEM_Reset+0xb0>)
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	4b27      	ldr	r3, [pc, #156]	; (8004184 <MEM_Reset+0xb0>)
 80040e6:	4928      	ldr	r1, [pc, #160]	; (8004188 <MEM_Reset+0xb4>)
 80040e8:	400a      	ands	r2, r1
 80040ea:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 80040ec:	1dfb      	adds	r3, r7, #7
 80040ee:	2266      	movs	r2, #102	; 0x66
 80040f0:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 80040f2:	1df9      	adds	r1, r7, #7
 80040f4:	4825      	ldr	r0, [pc, #148]	; (800418c <MEM_Reset+0xb8>)
 80040f6:	2305      	movs	r3, #5
 80040f8:	2201      	movs	r2, #1
 80040fa:	f005 fcaf 	bl	8009a5c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 80040fe:	4b21      	ldr	r3, [pc, #132]	; (8004184 <MEM_Reset+0xb0>)
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <MEM_Reset+0xb0>)
 8004104:	2180      	movs	r1, #128	; 0x80
 8004106:	0209      	lsls	r1, r1, #8
 8004108:	430a      	orrs	r2, r1
 800410a:	615a      	str	r2, [r3, #20]
		asm("NOP");
 800410c:	46c0      	nop			; (mov r8, r8)
		__NOP();
 800410e:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8004110:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8004112:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8004114:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8004116:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8004118:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <MEM_Reset+0xb0>)
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	4b19      	ldr	r3, [pc, #100]	; (8004184 <MEM_Reset+0xb0>)
 800411e:	491a      	ldr	r1, [pc, #104]	; (8004188 <MEM_Reset+0xb4>)
 8004120:	400a      	ands	r2, r1
 8004122:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8004124:	1dfb      	adds	r3, r7, #7
 8004126:	2299      	movs	r2, #153	; 0x99
 8004128:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 800412a:	1df9      	adds	r1, r7, #7
 800412c:	4817      	ldr	r0, [pc, #92]	; (800418c <MEM_Reset+0xb8>)
 800412e:	2305      	movs	r3, #5
 8004130:	2201      	movs	r2, #1
 8004132:	f005 fc93 	bl	8009a5c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8004136:	4b13      	ldr	r3, [pc, #76]	; (8004184 <MEM_Reset+0xb0>)
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	4b12      	ldr	r3, [pc, #72]	; (8004184 <MEM_Reset+0xb0>)
 800413c:	2180      	movs	r1, #128	; 0x80
 800413e:	0209      	lsls	r1, r1, #8
 8004140:	430a      	orrs	r2, r1
 8004142:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8004144:	2001      	movs	r0, #1
 8004146:	f001 fc7d 	bl	8005a44 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 800414a:	1dfb      	adds	r3, r7, #7
 800414c:	22b7      	movs	r2, #183	; 0xb7
 800414e:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <MEM_Reset+0xb0>)
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <MEM_Reset+0xb0>)
 8004156:	490c      	ldr	r1, [pc, #48]	; (8004188 <MEM_Reset+0xb4>)
 8004158:	400a      	ands	r2, r1
 800415a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 800415c:	1df9      	adds	r1, r7, #7
 800415e:	480b      	ldr	r0, [pc, #44]	; (800418c <MEM_Reset+0xb8>)
 8004160:	2305      	movs	r3, #5
 8004162:	2201      	movs	r2, #1
 8004164:	f005 fc7a 	bl	8009a5c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8004168:	4b06      	ldr	r3, [pc, #24]	; (8004184 <MEM_Reset+0xb0>)
 800416a:	695a      	ldr	r2, [r3, #20]
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <MEM_Reset+0xb0>)
 800416e:	2180      	movs	r1, #128	; 0x80
 8004170:	0209      	lsls	r1, r1, #8
 8004172:	430a      	orrs	r2, r1
 8004174:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8004176:	2001      	movs	r0, #1
 8004178:	f001 fc64 	bl	8005a44 <HAL_Delay>
	}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	46bd      	mov	sp, r7
 8004180:	b002      	add	sp, #8
 8004182:	bd80      	pop	{r7, pc}
 8004184:	50000800 	.word	0x50000800
 8004188:	ffff7fff 	.word	0xffff7fff
 800418c:	200000b0 	.word	0x200000b0

08004190 <weoShowFullScreenDMA>:
		GPIOC->ODR |= 1 << 6;	//set BF
		cmd2Execute=0;
	}
//==========================================================================================================================

	uint8_t weoShowFullScreenDMA(uint8_t picNum) {
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	4c41      	ldr	r4, [pc, #260]	; (8004298 <weoShowFullScreenDMA+0x108>)
 8004194:	44a5      	add	sp, r4
 8004196:	af00      	add	r7, sp, #0
 8004198:	0002      	movs	r2, r0
 800419a:	4b40      	ldr	r3, [pc, #256]	; (800429c <weoShowFullScreenDMA+0x10c>)
 800419c:	4940      	ldr	r1, [pc, #256]	; (80042a0 <weoShowFullScreenDMA+0x110>)
 800419e:	468c      	mov	ip, r1
 80041a0:	44bc      	add	ip, r7
 80041a2:	4463      	add	r3, ip
 80041a4:	701a      	strb	r2, [r3, #0]
//		uint8_t MEM_Buffer[8192];
		uint8_t DUMMY_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i;
		uint32_t addrInfo,addr;

		weoDrawRectangleInit(0x00, 0x00, 0x7F, 0x7F); // Здесь ещё работает
 80041a6:	237f      	movs	r3, #127	; 0x7f
 80041a8:	227f      	movs	r2, #127	; 0x7f
 80041aa:	2100      	movs	r1, #0
 80041ac:	2000      	movs	r0, #0
 80041ae:	f7ff f9fb 	bl	80035a8 <weoDrawRectangleInit>

		len=8192;
 80041b2:	4b3c      	ldr	r3, [pc, #240]	; (80042a4 <weoShowFullScreenDMA+0x114>)
 80041b4:	2280      	movs	r2, #128	; 0x80
 80041b6:	0192      	lsls	r2, r2, #6
 80041b8:	801a      	strh	r2, [r3, #0]
		dma_spi_cnt=len;
 80041ba:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <weoShowFullScreenDMA+0x114>)
 80041bc:	881a      	ldrh	r2, [r3, #0]
 80041be:	4b3a      	ldr	r3, [pc, #232]	; (80042a8 <weoShowFullScreenDMA+0x118>)
 80041c0:	801a      	strh	r2, [r3, #0]
		memCMD = 0x13; //read command with 4-byte address
 80041c2:	483a      	ldr	r0, [pc, #232]	; (80042ac <weoShowFullScreenDMA+0x11c>)
 80041c4:	183b      	adds	r3, r7, r0
 80041c6:	2213      	movs	r2, #19
 80041c8:	701a      	strb	r2, [r3, #0]

		addr=((picNum)*0x2000);
 80041ca:	4b34      	ldr	r3, [pc, #208]	; (800429c <weoShowFullScreenDMA+0x10c>)
 80041cc:	4a34      	ldr	r2, [pc, #208]	; (80042a0 <weoShowFullScreenDMA+0x110>)
 80041ce:	4694      	mov	ip, r2
 80041d0:	44bc      	add	ip, r7
 80041d2:	4463      	add	r3, ip
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	035b      	lsls	r3, r3, #13
 80041d8:	4935      	ldr	r1, [pc, #212]	; (80042b0 <weoShowFullScreenDMA+0x120>)
 80041da:	187a      	adds	r2, r7, r1
 80041dc:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 80041de:	187b      	adds	r3, r7, r1
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	4b33      	ldr	r3, [pc, #204]	; (80042b4 <weoShowFullScreenDMA+0x124>)
 80041e6:	4c2e      	ldr	r4, [pc, #184]	; (80042a0 <weoShowFullScreenDMA+0x110>)
 80041e8:	46a4      	mov	ip, r4
 80041ea:	44bc      	add	ip, r7
 80041ec:	4463      	add	r3, ip
 80041ee:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80041f0:	187b      	adds	r3, r7, r1
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	4b2e      	ldr	r3, [pc, #184]	; (80042b4 <weoShowFullScreenDMA+0x124>)
 80041fa:	4c29      	ldr	r4, [pc, #164]	; (80042a0 <weoShowFullScreenDMA+0x110>)
 80041fc:	46a4      	mov	ip, r4
 80041fe:	44bc      	add	ip, r7
 8004200:	4463      	add	r3, ip
 8004202:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8004204:	187b      	adds	r3, r7, r1
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	b2da      	uxtb	r2, r3
 800420c:	4b29      	ldr	r3, [pc, #164]	; (80042b4 <weoShowFullScreenDMA+0x124>)
 800420e:	4c24      	ldr	r4, [pc, #144]	; (80042a0 <weoShowFullScreenDMA+0x110>)
 8004210:	46a4      	mov	ip, r4
 8004212:	44bc      	add	ip, r7
 8004214:	4463      	add	r3, ip
 8004216:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8004218:	187b      	adds	r3, r7, r1
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	0e1b      	lsrs	r3, r3, #24
 800421e:	b2da      	uxtb	r2, r3
 8004220:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <weoShowFullScreenDMA+0x124>)
 8004222:	491f      	ldr	r1, [pc, #124]	; (80042a0 <weoShowFullScreenDMA+0x110>)
 8004224:	468c      	mov	ip, r1
 8004226:	44bc      	add	ip, r7
 8004228:	4463      	add	r3, ip
 800422a:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 800422c:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <weoShowFullScreenDMA+0x128>)
 800422e:	695a      	ldr	r2, [r3, #20]
 8004230:	4b21      	ldr	r3, [pc, #132]	; (80042b8 <weoShowFullScreenDMA+0x128>)
 8004232:	4922      	ldr	r1, [pc, #136]	; (80042bc <weoShowFullScreenDMA+0x12c>)
 8004234:	400a      	ands	r2, r1
 8004236:	615a      	str	r2, [r3, #20]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8004238:	1839      	adds	r1, r7, r0
 800423a:	4821      	ldr	r0, [pc, #132]	; (80042c0 <weoShowFullScreenDMA+0x130>)
 800423c:	2332      	movs	r3, #50	; 0x32
 800423e:	2201      	movs	r2, #1
 8004240:	f005 fc0c 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8004244:	2408      	movs	r4, #8
 8004246:	193b      	adds	r3, r7, r4
 8004248:	1cd9      	adds	r1, r3, #3
 800424a:	481d      	ldr	r0, [pc, #116]	; (80042c0 <weoShowFullScreenDMA+0x130>)
 800424c:	2332      	movs	r3, #50	; 0x32
 800424e:	2201      	movs	r2, #1
 8004250:	f005 fc04 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8004254:	193b      	adds	r3, r7, r4
 8004256:	1c99      	adds	r1, r3, #2
 8004258:	4819      	ldr	r0, [pc, #100]	; (80042c0 <weoShowFullScreenDMA+0x130>)
 800425a:	2332      	movs	r3, #50	; 0x32
 800425c:	2201      	movs	r2, #1
 800425e:	f005 fbfd 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8004262:	193b      	adds	r3, r7, r4
 8004264:	1c59      	adds	r1, r3, #1
 8004266:	4816      	ldr	r0, [pc, #88]	; (80042c0 <weoShowFullScreenDMA+0x130>)
 8004268:	2332      	movs	r3, #50	; 0x32
 800426a:	2201      	movs	r2, #1
 800426c:	f005 fbf6 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8004270:	1939      	adds	r1, r7, r4
 8004272:	4813      	ldr	r0, [pc, #76]	; (80042c0 <weoShowFullScreenDMA+0x130>)
 8004274:	2332      	movs	r3, #50	; 0x32
 8004276:	2201      	movs	r2, #1
 8004278:	f005 fbf0 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <weoShowFullScreenDMA+0x114>)
 800427e:	881a      	ldrh	r2, [r3, #0]
 8004280:	4910      	ldr	r1, [pc, #64]	; (80042c4 <weoShowFullScreenDMA+0x134>)
 8004282:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <weoShowFullScreenDMA+0x130>)
 8004284:	0018      	movs	r0, r3
 8004286:	f006 f85f 	bl	800a348 <HAL_SPI_Receive_DMA>
	}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	0018      	movs	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <weoShowFullScreenDMA+0x138>)
 8004292:	449d      	add	sp, r3
 8004294:	bd90      	pop	{r4, r7, pc}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	ffffdfe4 	.word	0xffffdfe4
 800429c:	ffffdfef 	.word	0xffffdfef
 80042a0:	00002018 	.word	0x00002018
 80042a4:	200004fc 	.word	0x200004fc
 80042a8:	20000032 	.word	0x20000032
 80042ac:	00002013 	.word	0x00002013
 80042b0:	00002014 	.word	0x00002014
 80042b4:	ffffdff0 	.word	0xffffdff0
 80042b8:	50000800 	.word	0x50000800
 80042bc:	ffff7fff 	.word	0xffff7fff
 80042c0:	200000b0 	.word	0x200000b0
 80042c4:	20000504 	.word	0x20000504
 80042c8:	0000201c 	.word	0x0000201c

080042cc <weoShowSmallImage>:
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 80042cc:	b590      	push	{r4, r7, lr}
 80042ce:	4cb4      	ldr	r4, [pc, #720]	; (80045a0 <weoShowSmallImage+0x2d4>)
 80042d0:	44a5      	add	sp, r4
 80042d2:	af02      	add	r7, sp, #8
 80042d4:	0004      	movs	r4, r0
 80042d6:	0008      	movs	r0, r1
 80042d8:	0011      	movs	r1, r2
 80042da:	4bb2      	ldr	r3, [pc, #712]	; (80045a4 <weoShowSmallImage+0x2d8>)
 80042dc:	4ab2      	ldr	r2, [pc, #712]	; (80045a8 <weoShowSmallImage+0x2dc>)
 80042de:	4694      	mov	ip, r2
 80042e0:	44bc      	add	ip, r7
 80042e2:	4463      	add	r3, ip
 80042e4:	1c22      	adds	r2, r4, #0
 80042e6:	701a      	strb	r2, [r3, #0]
 80042e8:	4bb0      	ldr	r3, [pc, #704]	; (80045ac <weoShowSmallImage+0x2e0>)
 80042ea:	4aaf      	ldr	r2, [pc, #700]	; (80045a8 <weoShowSmallImage+0x2dc>)
 80042ec:	4694      	mov	ip, r2
 80042ee:	44bc      	add	ip, r7
 80042f0:	4463      	add	r3, ip
 80042f2:	1c02      	adds	r2, r0, #0
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	4bae      	ldr	r3, [pc, #696]	; (80045b0 <weoShowSmallImage+0x2e4>)
 80042f8:	4aab      	ldr	r2, [pc, #684]	; (80045a8 <weoShowSmallImage+0x2dc>)
 80042fa:	4694      	mov	ip, r2
 80042fc:	44bc      	add	ip, r7
 80042fe:	4463      	add	r3, ip
 8004300:	1c0a      	adds	r2, r1, #0
 8004302:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H,decY;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 8004304:	2300      	movs	r3, #0
 8004306:	49ab      	ldr	r1, [pc, #684]	; (80045b4 <weoShowSmallImage+0x2e8>)
 8004308:	187a      	adds	r2, r7, r1
 800430a:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 800430c:	48aa      	ldr	r0, [pc, #680]	; (80045b8 <weoShowSmallImage+0x2ec>)
 800430e:	183b      	adds	r3, r7, r0
 8004310:	2213      	movs	r2, #19
 8004312:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 8004314:	4ba3      	ldr	r3, [pc, #652]	; (80045a4 <weoShowSmallImage+0x2d8>)
 8004316:	4aa4      	ldr	r2, [pc, #656]	; (80045a8 <weoShowSmallImage+0x2dc>)
 8004318:	4694      	mov	ip, r2
 800431a:	44bc      	add	ip, r7
 800431c:	4463      	add	r3, ip
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	3301      	adds	r3, #1
 8004322:	33ff      	adds	r3, #255	; 0xff
 8004324:	035b      	lsls	r3, r3, #13
 8004326:	187a      	adds	r2, r7, r1
 8004328:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 800432a:	187b      	adds	r3, r7, r1
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b2da      	uxtb	r2, r3
 8004330:	4ba2      	ldr	r3, [pc, #648]	; (80045bc <weoShowSmallImage+0x2f0>)
 8004332:	4c9d      	ldr	r4, [pc, #628]	; (80045a8 <weoShowSmallImage+0x2dc>)
 8004334:	46a4      	mov	ip, r4
 8004336:	44bc      	add	ip, r7
 8004338:	4463      	add	r3, ip
 800433a:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 800433c:	187b      	adds	r3, r7, r1
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	0a1b      	lsrs	r3, r3, #8
 8004342:	b2da      	uxtb	r2, r3
 8004344:	4b9d      	ldr	r3, [pc, #628]	; (80045bc <weoShowSmallImage+0x2f0>)
 8004346:	4c98      	ldr	r4, [pc, #608]	; (80045a8 <weoShowSmallImage+0x2dc>)
 8004348:	46a4      	mov	ip, r4
 800434a:	44bc      	add	ip, r7
 800434c:	4463      	add	r3, ip
 800434e:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8004350:	187b      	adds	r3, r7, r1
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	0c1b      	lsrs	r3, r3, #16
 8004356:	b2da      	uxtb	r2, r3
 8004358:	4b98      	ldr	r3, [pc, #608]	; (80045bc <weoShowSmallImage+0x2f0>)
 800435a:	4c93      	ldr	r4, [pc, #588]	; (80045a8 <weoShowSmallImage+0x2dc>)
 800435c:	46a4      	mov	ip, r4
 800435e:	44bc      	add	ip, r7
 8004360:	4463      	add	r3, ip
 8004362:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8004364:	187b      	adds	r3, r7, r1
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	0e1b      	lsrs	r3, r3, #24
 800436a:	b2da      	uxtb	r2, r3
 800436c:	4b93      	ldr	r3, [pc, #588]	; (80045bc <weoShowSmallImage+0x2f0>)
 800436e:	498e      	ldr	r1, [pc, #568]	; (80045a8 <weoShowSmallImage+0x2dc>)
 8004370:	468c      	mov	ip, r1
 8004372:	44bc      	add	ip, r7
 8004374:	4463      	add	r3, ip
 8004376:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8004378:	4b91      	ldr	r3, [pc, #580]	; (80045c0 <weoShowSmallImage+0x2f4>)
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	4b90      	ldr	r3, [pc, #576]	; (80045c0 <weoShowSmallImage+0x2f4>)
 800437e:	4991      	ldr	r1, [pc, #580]	; (80045c4 <weoShowSmallImage+0x2f8>)
 8004380:	400a      	ands	r2, r1
 8004382:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8004384:	1839      	adds	r1, r7, r0
 8004386:	4890      	ldr	r0, [pc, #576]	; (80045c8 <weoShowSmallImage+0x2fc>)
 8004388:	2332      	movs	r3, #50	; 0x32
 800438a:	2201      	movs	r2, #1
 800438c:	f005 fb66 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8004390:	240c      	movs	r4, #12
 8004392:	193b      	adds	r3, r7, r4
 8004394:	1cd9      	adds	r1, r3, #3
 8004396:	488c      	ldr	r0, [pc, #560]	; (80045c8 <weoShowSmallImage+0x2fc>)
 8004398:	2332      	movs	r3, #50	; 0x32
 800439a:	2201      	movs	r2, #1
 800439c:	f005 fb5e 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80043a0:	193b      	adds	r3, r7, r4
 80043a2:	1c99      	adds	r1, r3, #2
 80043a4:	4888      	ldr	r0, [pc, #544]	; (80045c8 <weoShowSmallImage+0x2fc>)
 80043a6:	2332      	movs	r3, #50	; 0x32
 80043a8:	2201      	movs	r2, #1
 80043aa:	f005 fb57 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80043ae:	193b      	adds	r3, r7, r4
 80043b0:	1c59      	adds	r1, r3, #1
 80043b2:	4885      	ldr	r0, [pc, #532]	; (80045c8 <weoShowSmallImage+0x2fc>)
 80043b4:	2332      	movs	r3, #50	; 0x32
 80043b6:	2201      	movs	r2, #1
 80043b8:	f005 fb50 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80043bc:	1939      	adds	r1, r7, r4
 80043be:	4882      	ldr	r0, [pc, #520]	; (80045c8 <weoShowSmallImage+0x2fc>)
 80043c0:	2332      	movs	r3, #50	; 0x32
 80043c2:	2201      	movs	r2, #1
 80043c4:	f005 fb4a 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 80043c8:	4b80      	ldr	r3, [pc, #512]	; (80045cc <weoShowSmallImage+0x300>)
 80043ca:	2210      	movs	r2, #16
 80043cc:	18b9      	adds	r1, r7, r2
 80043ce:	487e      	ldr	r0, [pc, #504]	; (80045c8 <weoShowSmallImage+0x2fc>)
 80043d0:	2202      	movs	r2, #2
 80043d2:	f005 fc9b 	bl	8009d0c <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 80043d6:	4b7a      	ldr	r3, [pc, #488]	; (80045c0 <weoShowSmallImage+0x2f4>)
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	4b79      	ldr	r3, [pc, #484]	; (80045c0 <weoShowSmallImage+0x2f4>)
 80043dc:	2180      	movs	r1, #128	; 0x80
 80043de:	0209      	lsls	r1, r1, #8
 80043e0:	430a      	orrs	r2, r1
 80043e2:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 80043e4:	497a      	ldr	r1, [pc, #488]	; (80045d0 <weoShowSmallImage+0x304>)
 80043e6:	187b      	adds	r3, r7, r1
 80043e8:	4a7a      	ldr	r2, [pc, #488]	; (80045d4 <weoShowSmallImage+0x308>)
 80043ea:	486f      	ldr	r0, [pc, #444]	; (80045a8 <weoShowSmallImage+0x2dc>)
 80043ec:	4684      	mov	ip, r0
 80043ee:	44bc      	add	ip, r7
 80043f0:	4462      	add	r2, ip
 80043f2:	7812      	ldrb	r2, [r2, #0]
 80043f4:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 80043f6:	4878      	ldr	r0, [pc, #480]	; (80045d8 <weoShowSmallImage+0x30c>)
 80043f8:	183b      	adds	r3, r7, r0
 80043fa:	4a76      	ldr	r2, [pc, #472]	; (80045d4 <weoShowSmallImage+0x308>)
 80043fc:	4c6a      	ldr	r4, [pc, #424]	; (80045a8 <weoShowSmallImage+0x2dc>)
 80043fe:	46a4      	mov	ip, r4
 8004400:	44bc      	add	ip, r7
 8004402:	4462      	add	r2, ip
 8004404:	7852      	ldrb	r2, [r2, #1]
 8004406:	701a      	strb	r2, [r3, #0]

		len=width*height/2;
 8004408:	187b      	adds	r3, r7, r1
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	183a      	adds	r2, r7, r0
 800440e:	7812      	ldrb	r2, [r2, #0]
 8004410:	4353      	muls	r3, r2
 8004412:	2b00      	cmp	r3, #0
 8004414:	da00      	bge.n	8004418 <weoShowSmallImage+0x14c>
 8004416:	3301      	adds	r3, #1
 8004418:	105b      	asrs	r3, r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	4b6f      	ldr	r3, [pc, #444]	; (80045dc <weoShowSmallImage+0x310>)
 800441e:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 8004420:	4b64      	ldr	r3, [pc, #400]	; (80045b4 <weoShowSmallImage+0x2e8>)
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3302      	adds	r3, #2
 8004428:	496d      	ldr	r1, [pc, #436]	; (80045e0 <weoShowSmallImage+0x314>)
 800442a:	187a      	adds	r2, r7, r1
 800442c:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 800442e:	187b      	adds	r3, r7, r1
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	b2da      	uxtb	r2, r3
 8004434:	4b61      	ldr	r3, [pc, #388]	; (80045bc <weoShowSmallImage+0x2f0>)
 8004436:	485c      	ldr	r0, [pc, #368]	; (80045a8 <weoShowSmallImage+0x2dc>)
 8004438:	4684      	mov	ip, r0
 800443a:	44bc      	add	ip, r7
 800443c:	4463      	add	r3, ip
 800443e:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 8004440:	187b      	adds	r3, r7, r1
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	0a1b      	lsrs	r3, r3, #8
 8004446:	b2da      	uxtb	r2, r3
 8004448:	4b5c      	ldr	r3, [pc, #368]	; (80045bc <weoShowSmallImage+0x2f0>)
 800444a:	4857      	ldr	r0, [pc, #348]	; (80045a8 <weoShowSmallImage+0x2dc>)
 800444c:	4684      	mov	ip, r0
 800444e:	44bc      	add	ip, r7
 8004450:	4463      	add	r3, ip
 8004452:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 8004454:	187b      	adds	r3, r7, r1
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	b2da      	uxtb	r2, r3
 800445c:	4b57      	ldr	r3, [pc, #348]	; (80045bc <weoShowSmallImage+0x2f0>)
 800445e:	4852      	ldr	r0, [pc, #328]	; (80045a8 <weoShowSmallImage+0x2dc>)
 8004460:	4684      	mov	ip, r0
 8004462:	44bc      	add	ip, r7
 8004464:	4463      	add	r3, ip
 8004466:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 8004468:	187b      	adds	r3, r7, r1
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	0e1b      	lsrs	r3, r3, #24
 800446e:	b2da      	uxtb	r2, r3
 8004470:	4b52      	ldr	r3, [pc, #328]	; (80045bc <weoShowSmallImage+0x2f0>)
 8004472:	494d      	ldr	r1, [pc, #308]	; (80045a8 <weoShowSmallImage+0x2dc>)
 8004474:	468c      	mov	ip, r1
 8004476:	44bc      	add	ip, r7
 8004478:	4463      	add	r3, ip
 800447a:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 800447c:	4b59      	ldr	r3, [pc, #356]	; (80045e4 <weoShowSmallImage+0x318>)
 800447e:	6a1a      	ldr	r2, [r3, #32]
 8004480:	4b58      	ldr	r3, [pc, #352]	; (80045e4 <weoShowSmallImage+0x318>)
 8004482:	2108      	movs	r1, #8
 8004484:	430a      	orrs	r2, r1
 8004486:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8004488:	484b      	ldr	r0, [pc, #300]	; (80045b8 <weoShowSmallImage+0x2ec>)
 800448a:	183b      	adds	r3, r7, r0
 800448c:	2213      	movs	r2, #19
 800448e:	701a      	strb	r2, [r3, #0]

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 8004490:	4b4b      	ldr	r3, [pc, #300]	; (80045c0 <weoShowSmallImage+0x2f4>)
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	4b4a      	ldr	r3, [pc, #296]	; (80045c0 <weoShowSmallImage+0x2f4>)
 8004496:	494b      	ldr	r1, [pc, #300]	; (80045c4 <weoShowSmallImage+0x2f8>)
 8004498:	400a      	ands	r2, r1
 800449a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 800449c:	1839      	adds	r1, r7, r0
 800449e:	484a      	ldr	r0, [pc, #296]	; (80045c8 <weoShowSmallImage+0x2fc>)
 80044a0:	2332      	movs	r3, #50	; 0x32
 80044a2:	2201      	movs	r2, #1
 80044a4:	f005 fada 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 80044a8:	240c      	movs	r4, #12
 80044aa:	193b      	adds	r3, r7, r4
 80044ac:	1cd9      	adds	r1, r3, #3
 80044ae:	4846      	ldr	r0, [pc, #280]	; (80045c8 <weoShowSmallImage+0x2fc>)
 80044b0:	2332      	movs	r3, #50	; 0x32
 80044b2:	2201      	movs	r2, #1
 80044b4:	f005 fad2 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80044b8:	193b      	adds	r3, r7, r4
 80044ba:	1c99      	adds	r1, r3, #2
 80044bc:	4842      	ldr	r0, [pc, #264]	; (80045c8 <weoShowSmallImage+0x2fc>)
 80044be:	2332      	movs	r3, #50	; 0x32
 80044c0:	2201      	movs	r2, #1
 80044c2:	f005 facb 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 80044c6:	193b      	adds	r3, r7, r4
 80044c8:	1c59      	adds	r1, r3, #1
 80044ca:	483f      	ldr	r0, [pc, #252]	; (80045c8 <weoShowSmallImage+0x2fc>)
 80044cc:	2332      	movs	r3, #50	; 0x32
 80044ce:	2201      	movs	r2, #1
 80044d0:	f005 fac4 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80044d4:	1939      	adds	r1, r7, r4
 80044d6:	483c      	ldr	r0, [pc, #240]	; (80045c8 <weoShowSmallImage+0x2fc>)
 80044d8:	2332      	movs	r3, #50	; 0x32
 80044da:	2201      	movs	r2, #1
 80044dc:	f005 fabe 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80044e0:	4b3e      	ldr	r3, [pc, #248]	; (80045dc <weoShowSmallImage+0x310>)
 80044e2:	881a      	ldrh	r2, [r3, #0]
 80044e4:	4b39      	ldr	r3, [pc, #228]	; (80045cc <weoShowSmallImage+0x300>)
 80044e6:	2114      	movs	r1, #20
 80044e8:	1879      	adds	r1, r7, r1
 80044ea:	4837      	ldr	r0, [pc, #220]	; (80045c8 <weoShowSmallImage+0x2fc>)
 80044ec:	f005 fc0e 	bl	8009d0c <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 80044f0:	4b33      	ldr	r3, [pc, #204]	; (80045c0 <weoShowSmallImage+0x2f4>)
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	4b32      	ldr	r3, [pc, #200]	; (80045c0 <weoShowSmallImage+0x2f4>)
 80044f6:	2180      	movs	r1, #128	; 0x80
 80044f8:	0209      	lsls	r1, r1, #8
 80044fa:	430a      	orrs	r2, r1
 80044fc:	615a      	str	r2, [r3, #20]

		decY=0x01;
 80044fe:	493a      	ldr	r1, [pc, #232]	; (80045e8 <weoShowSmallImage+0x31c>)
 8004500:	187b      	adds	r3, r7, r1
 8004502:	2201      	movs	r2, #1
 8004504:	701a      	strb	r2, [r3, #0]
		if(imY % 2 !=0){
 8004506:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <weoShowSmallImage+0x2e4>)
 8004508:	4a27      	ldr	r2, [pc, #156]	; (80045a8 <weoShowSmallImage+0x2dc>)
 800450a:	4694      	mov	ip, r2
 800450c:	44bc      	add	ip, r7
 800450e:	4463      	add	r3, ip
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2201      	movs	r2, #1
 8004514:	4013      	ands	r3, r2
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <weoShowSmallImage+0x256>
			decY=0x02;
 800451c:	187b      	adds	r3, r7, r1
 800451e:	2202      	movs	r2, #2
 8004520:	701a      	strb	r2, [r3, #0]
		}
		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8004522:	4b22      	ldr	r3, [pc, #136]	; (80045ac <weoShowSmallImage+0x2e0>)
 8004524:	4920      	ldr	r1, [pc, #128]	; (80045a8 <weoShowSmallImage+0x2dc>)
 8004526:	187a      	adds	r2, r7, r1
 8004528:	18d2      	adds	r2, r2, r3
 800452a:	4b29      	ldr	r3, [pc, #164]	; (80045d0 <weoShowSmallImage+0x304>)
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	7812      	ldrb	r2, [r2, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	18d3      	adds	r3, r2, r3
 8004534:	b2db      	uxtb	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b2dc      	uxtb	r4, r3
 800453a:	4b1d      	ldr	r3, [pc, #116]	; (80045b0 <weoShowSmallImage+0x2e4>)
 800453c:	187a      	adds	r2, r7, r1
 800453e:	18d2      	adds	r2, r2, r3
 8004540:	4b25      	ldr	r3, [pc, #148]	; (80045d8 <weoShowSmallImage+0x30c>)
 8004542:	18fb      	adds	r3, r7, r3
 8004544:	7812      	ldrb	r2, [r2, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	18d3      	adds	r3, r2, r3
 800454a:	b2da      	uxtb	r2, r3
 800454c:	4b26      	ldr	r3, [pc, #152]	; (80045e8 <weoShowSmallImage+0x31c>)
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	b2da      	uxtb	r2, r3
 8004556:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <weoShowSmallImage+0x2e4>)
 8004558:	4913      	ldr	r1, [pc, #76]	; (80045a8 <weoShowSmallImage+0x2dc>)
 800455a:	468c      	mov	ip, r1
 800455c:	44bc      	add	ip, r7
 800455e:	4463      	add	r3, ip
 8004560:	7819      	ldrb	r1, [r3, #0]
 8004562:	4b12      	ldr	r3, [pc, #72]	; (80045ac <weoShowSmallImage+0x2e0>)
 8004564:	4810      	ldr	r0, [pc, #64]	; (80045a8 <weoShowSmallImage+0x2dc>)
 8004566:	4684      	mov	ip, r0
 8004568:	44bc      	add	ip, r7
 800456a:	4463      	add	r3, ip
 800456c:	7818      	ldrb	r0, [r3, #0]
 800456e:	2314      	movs	r3, #20
 8004570:	18fb      	adds	r3, r7, r3
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	23ff      	movs	r3, #255	; 0xff
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	0013      	movs	r3, r2
 800457a:	0022      	movs	r2, r4
 800457c:	f7fe ff30 	bl	80033e0 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <weoShowSmallImage+0x2f4>)
 8004582:	695a      	ldr	r2, [r3, #20]
 8004584:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <weoShowSmallImage+0x2f4>)
 8004586:	2140      	movs	r1, #64	; 0x40
 8004588:	430a      	orrs	r2, r1
 800458a:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 800458c:	4b17      	ldr	r3, [pc, #92]	; (80045ec <weoShowSmallImage+0x320>)
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
	}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	0018      	movs	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <weoShowSmallImage+0x324>)
 800459a:	449d      	add	sp, r3
 800459c:	bd90      	pop	{r4, r7, pc}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	ffffdfcc 	.word	0xffffdfcc
 80045a4:	ffffdfdf 	.word	0xffffdfdf
 80045a8:	00002028 	.word	0x00002028
 80045ac:	ffffdfde 	.word	0xffffdfde
 80045b0:	ffffdfdd 	.word	0xffffdfdd
 80045b4:	00002020 	.word	0x00002020
 80045b8:	00002017 	.word	0x00002017
 80045bc:	ffffdfe4 	.word	0xffffdfe4
 80045c0:	50000800 	.word	0x50000800
 80045c4:	ffff7fff 	.word	0xffff7fff
 80045c8:	200000b0 	.word	0x200000b0
 80045cc:	00001388 	.word	0x00001388
 80045d0:	0000201f 	.word	0x0000201f
 80045d4:	ffffdfe8 	.word	0xffffdfe8
 80045d8:	0000201e 	.word	0x0000201e
 80045dc:	200004fc 	.word	0x200004fc
 80045e0:	00002018 	.word	0x00002018
 80045e4:	40004400 	.word	0x40004400
 80045e8:	00002027 	.word	0x00002027
 80045ec:	20000372 	.word	0x20000372
 80045f0:	0000202c 	.word	0x0000202c

080045f4 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80045fa:	1d3b      	adds	r3, r7, #4
 80045fc:	4a29      	ldr	r2, [pc, #164]	; (80046a4 <MEM_GetID+0xb0>)
 80045fe:	7812      	ldrb	r2, [r2, #0]
 8004600:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8004602:	1dfb      	adds	r3, r7, #7
 8004604:	229e      	movs	r2, #158	; 0x9e
 8004606:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 8004608:	4b27      	ldr	r3, [pc, #156]	; (80046a8 <MEM_GetID+0xb4>)
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	4b26      	ldr	r3, [pc, #152]	; (80046a8 <MEM_GetID+0xb4>)
 800460e:	4927      	ldr	r1, [pc, #156]	; (80046ac <MEM_GetID+0xb8>)
 8004610:	400a      	ands	r2, r1
 8004612:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8004614:	1df9      	adds	r1, r7, #7
 8004616:	4826      	ldr	r0, [pc, #152]	; (80046b0 <MEM_GetID+0xbc>)
 8004618:	2332      	movs	r3, #50	; 0x32
 800461a:	2201      	movs	r2, #1
 800461c:	f005 fa1e 	bl	8009a5c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8004620:	23fa      	movs	r3, #250	; 0xfa
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	1d39      	adds	r1, r7, #4
 8004626:	4822      	ldr	r0, [pc, #136]	; (80046b0 <MEM_GetID+0xbc>)
 8004628:	2201      	movs	r2, #1
 800462a:	f005 fb6f 	bl	8009d0c <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 800462e:	1d3b      	adds	r3, r7, #4
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	001a      	movs	r2, r3
 8004634:	4b1f      	ldr	r3, [pc, #124]	; (80046b4 <MEM_GetID+0xc0>)
 8004636:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8004638:	4b1e      	ldr	r3, [pc, #120]	; (80046b4 <MEM_GetID+0xc0>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	021a      	lsls	r2, r3, #8
 800463e:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <MEM_GetID+0xc0>)
 8004640:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8004642:	23fa      	movs	r3, #250	; 0xfa
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	1d39      	adds	r1, r7, #4
 8004648:	4819      	ldr	r0, [pc, #100]	; (80046b0 <MEM_GetID+0xbc>)
 800464a:	2201      	movs	r2, #1
 800464c:	f005 fb5e 	bl	8009d0c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8004650:	1d3b      	adds	r3, r7, #4
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	001a      	movs	r2, r3
 8004656:	4b17      	ldr	r3, [pc, #92]	; (80046b4 <MEM_GetID+0xc0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	18d2      	adds	r2, r2, r3
 800465c:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <MEM_GetID+0xc0>)
 800465e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8004660:	4b14      	ldr	r3, [pc, #80]	; (80046b4 <MEM_GetID+0xc0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	021a      	lsls	r2, r3, #8
 8004666:	4b13      	ldr	r3, [pc, #76]	; (80046b4 <MEM_GetID+0xc0>)
 8004668:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800466a:	23fa      	movs	r3, #250	; 0xfa
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	1d39      	adds	r1, r7, #4
 8004670:	480f      	ldr	r0, [pc, #60]	; (80046b0 <MEM_GetID+0xbc>)
 8004672:	2201      	movs	r2, #1
 8004674:	f005 fb4a 	bl	8009d0c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8004678:	1d3b      	adds	r3, r7, #4
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	001a      	movs	r2, r3
 800467e:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <MEM_GetID+0xc0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	18d2      	adds	r2, r2, r3
 8004684:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <MEM_GetID+0xc0>)
 8004686:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 8004688:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <MEM_GetID+0xb4>)
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <MEM_GetID+0xb4>)
 800468e:	2180      	movs	r1, #128	; 0x80
 8004690:	0209      	lsls	r1, r1, #8
 8004692:	430a      	orrs	r2, r1
 8004694:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8004696:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <MEM_GetID+0xc0>)
 8004698:	681b      	ldr	r3, [r3, #0]
	}
 800469a:	0018      	movs	r0, r3
 800469c:	46bd      	mov	sp, r7
 800469e:	b002      	add	sp, #8
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	0800ea38 	.word	0x0800ea38
 80046a8:	50000800 	.word	0x50000800
 80046ac:	ffff7fff 	.word	0xffff7fff
 80046b0:	200000b0 	.word	0x200000b0
 80046b4:	2000005c 	.word	0x2000005c

080046b8 <Scount>:
		GPIOC->ODR |= 1 << 15;    // set cs
		//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
//==================================================================================================================================

	uint16_t Scount(void){
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0

	}
 80046bc:	46c0      	nop			; (mov r8, r8)
 80046be:	0018      	movs	r0, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <cmdExecute>:
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	0002      	movs	r2, r0
 80046cc:	1dfb      	adds	r3, r7, #7
 80046ce:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 80046d0:	4b70      	ldr	r3, [pc, #448]	; (8004894 <cmdExecute+0x1d0>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d100      	bne.n	80046da <cmdExecute+0x16>
 80046d8:	e0d4      	b.n	8004884 <cmdExecute+0x1c0>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 80046da:	4b6f      	ldr	r3, [pc, #444]	; (8004898 <cmdExecute+0x1d4>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d000      	beq.n	80046e4 <cmdExecute+0x20>
 80046e2:	e0d1      	b.n	8004888 <cmdExecute+0x1c4>
		USART2->ICR|=USART_ICR_ORECF;
 80046e4:	4b6d      	ldr	r3, [pc, #436]	; (800489c <cmdExecute+0x1d8>)
 80046e6:	6a1a      	ldr	r2, [r3, #32]
 80046e8:	4b6c      	ldr	r3, [pc, #432]	; (800489c <cmdExecute+0x1d8>)
 80046ea:	2108      	movs	r1, #8
 80046ec:	430a      	orrs	r2, r1
 80046ee:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 80046f0:	1dfb      	adds	r3, r7, #7
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b11      	cmp	r3, #17
 80046f6:	d107      	bne.n	8004708 <cmdExecute+0x44>
			bf4me=0x11;	//set BF flag 4 me
 80046f8:	4b67      	ldr	r3, [pc, #412]	; (8004898 <cmdExecute+0x1d4>)
 80046fa:	2211      	movs	r2, #17
 80046fc:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowFullScreen(picNum);
			weoShowFullScreenDMA(picNum);
 80046fe:	4b68      	ldr	r3, [pc, #416]	; (80048a0 <cmdExecute+0x1dc>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	0018      	movs	r0, r3
 8004704:	f7ff fd44 	bl	8004190 <weoShowFullScreenDMA>
				}
		if(cmd2Execute==0x12){
 8004708:	1dfb      	adds	r3, r7, #7
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b12      	cmp	r3, #18
 800470e:	d10d      	bne.n	800472c <cmdExecute+0x68>
			bf4me=0x12;	//set BF flag 4 me
 8004710:	4b61      	ldr	r3, [pc, #388]	; (8004898 <cmdExecute+0x1d4>)
 8004712:	2212      	movs	r2, #18
 8004714:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 8004716:	4b62      	ldr	r3, [pc, #392]	; (80048a0 <cmdExecute+0x1dc>)
 8004718:	7818      	ldrb	r0, [r3, #0]
 800471a:	4b62      	ldr	r3, [pc, #392]	; (80048a4 <cmdExecute+0x1e0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	b2d9      	uxtb	r1, r3
 8004720:	4b61      	ldr	r3, [pc, #388]	; (80048a8 <cmdExecute+0x1e4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	001a      	movs	r2, r3
 8004728:	f7ff fdd0 	bl	80042cc <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 800472c:	1dfb      	adds	r3, r7, #7
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b13      	cmp	r3, #19
 8004732:	d10d      	bne.n	8004750 <cmdExecute+0x8c>
			bf4me=0x13;	//set BF flag 4 me
 8004734:	4b58      	ldr	r3, [pc, #352]	; (8004898 <cmdExecute+0x1d4>)
 8004736:	2213      	movs	r2, #19
 8004738:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 800473a:	4b5a      	ldr	r3, [pc, #360]	; (80048a4 <cmdExecute+0x1e0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	b2d8      	uxtb	r0, r3
 8004740:	4b59      	ldr	r3, [pc, #356]	; (80048a8 <cmdExecute+0x1e4>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	b2d9      	uxtb	r1, r3
 8004746:	4b59      	ldr	r3, [pc, #356]	; (80048ac <cmdExecute+0x1e8>)
 8004748:	781a      	ldrb	r2, [r3, #0]
 800474a:	4b59      	ldr	r3, [pc, #356]	; (80048b0 <cmdExecute+0x1ec>)
 800474c:	f000 f8ba 	bl	80048c4 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8004750:	1dfb      	adds	r3, r7, #7
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b14      	cmp	r3, #20
 8004756:	d12c      	bne.n	80047b2 <cmdExecute+0xee>
			bf4me=0x14;	//set BF flag 4 me
 8004758:	4b4f      	ldr	r3, [pc, #316]	; (8004898 <cmdExecute+0x1d4>)
 800475a:	2214      	movs	r2, #20
 800475c:	701a      	strb	r2, [r3, #0]
			if(numSound==0x01){
 800475e:	4b55      	ldr	r3, [pc, #340]	; (80048b4 <cmdExecute+0x1f0>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <cmdExecute+0xa6>
				squeak_single();
 8004766:	f000 f9d3 	bl	8004b10 <squeak_single>
			}
			if(numSound==0x02){
 800476a:	4b52      	ldr	r3, [pc, #328]	; (80048b4 <cmdExecute+0x1f0>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d101      	bne.n	8004776 <cmdExecute+0xb2>
				squeak_double();
 8004772:	f000 fb21 	bl	8004db8 <squeak_double>
			}
			if(numSound==0x03){
 8004776:	4b4f      	ldr	r3, [pc, #316]	; (80048b4 <cmdExecute+0x1f0>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	2b03      	cmp	r3, #3
 800477c:	d101      	bne.n	8004782 <cmdExecute+0xbe>
				squeak_triple();
 800477e:	f000 fbb5 	bl	8004eec <squeak_triple>
				}
			if(numSound==0x04){
 8004782:	4b4c      	ldr	r3, [pc, #304]	; (80048b4 <cmdExecute+0x1f0>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b04      	cmp	r3, #4
 8004788:	d101      	bne.n	800478e <cmdExecute+0xca>
				squeak_long();
 800478a:	f000 fa51 	bl	8004c30 <squeak_long>
				}
			if(numSound!=0x04){
 800478e:	4b49      	ldr	r3, [pc, #292]	; (80048b4 <cmdExecute+0x1f0>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b04      	cmp	r3, #4
 8004794:	d00d      	beq.n	80047b2 <cmdExecute+0xee>
			HAL_Delay(500);
 8004796:	23fa      	movs	r3, #250	; 0xfa
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	0018      	movs	r0, r3
 800479c:	f001 f952 	bl	8005a44 <HAL_Delay>
			GPIOC->ODR |= 1 << 6;	//set BF
 80047a0:	4b45      	ldr	r3, [pc, #276]	; (80048b8 <cmdExecute+0x1f4>)
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	4b44      	ldr	r3, [pc, #272]	; (80048b8 <cmdExecute+0x1f4>)
 80047a6:	2140      	movs	r1, #64	; 0x40
 80047a8:	430a      	orrs	r2, r1
 80047aa:	615a      	str	r2, [r3, #20]
			cmd2Execute=0;
 80047ac:	1dfb      	adds	r3, r7, #7
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
			}
		}
		if(cmd2Execute==0x15){
 80047b2:	1dfb      	adds	r3, r7, #7
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b15      	cmp	r3, #21
 80047b8:	d153      	bne.n	8004862 <cmdExecute+0x19e>
			bf4me=0x15;	//set BF flag 4 me
 80047ba:	4b37      	ldr	r3, [pc, #220]	; (8004898 <cmdExecute+0x1d4>)
 80047bc:	2215      	movs	r2, #21
 80047be:	701a      	strb	r2, [r3, #0]
			I2C_SOUND_ChangePage(0x01);
 80047c0:	2001      	movs	r0, #1
 80047c2:	f7fe ff79 	bl	80036b8 <I2C_SOUND_ChangePage>
//			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
			if(volume==0x00){
 80047c6:	4b3d      	ldr	r3, [pc, #244]	; (80048bc <cmdExecute+0x1f8>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <cmdExecute+0x118>
				I2C_SOUND_ChangePage(0x01);
 80047ce:	2001      	movs	r0, #1
 80047d0:	f7fe ff72 	bl	80036b8 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2E,0xFF);// mute
 80047d4:	21ff      	movs	r1, #255	; 0xff
 80047d6:	202e      	movs	r0, #46	; 0x2e
 80047d8:	f7fe ff8c 	bl	80036f4 <WriteReg_I2C_SOUND>
			}
			I2C_SOUND_ChangePage(0x01);
 80047dc:	2001      	movs	r0, #1
 80047de:	f7fe ff6b 	bl	80036b8 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x2E, volume);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 80047e2:	4b36      	ldr	r3, [pc, #216]	; (80048bc <cmdExecute+0x1f8>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	0019      	movs	r1, r3
 80047e8:	202e      	movs	r0, #46	; 0x2e
 80047ea:	f7fe ff83 	bl	80036f4 <WriteReg_I2C_SOUND>

			if(contrast==0x00){
 80047ee:	4b34      	ldr	r3, [pc, #208]	; (80048c0 <cmdExecute+0x1fc>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <cmdExecute+0x138>
				weoClear();
 80047f6:	f7fe fd8f 	bl	8003318 <weoClear>
 80047fa:	e029      	b.n	8004850 <cmdExecute+0x18c>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 80047fc:	23a0      	movs	r3, #160	; 0xa0
 80047fe:	05db      	lsls	r3, r3, #23
 8004800:	695a      	ldr	r2, [r3, #20]
 8004802:	23a0      	movs	r3, #160	; 0xa0
 8004804:	05db      	lsls	r3, r3, #23
 8004806:	2140      	movs	r1, #64	; 0x40
 8004808:	438a      	bics	r2, r1
 800480a:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 800480c:	23a0      	movs	r3, #160	; 0xa0
 800480e:	05db      	lsls	r3, r3, #23
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	23a0      	movs	r3, #160	; 0xa0
 8004814:	05db      	lsls	r3, r3, #23
 8004816:	2180      	movs	r1, #128	; 0x80
 8004818:	438a      	bics	r2, r1
 800481a:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 800481c:	2081      	movs	r0, #129	; 0x81
 800481e:	f7fe fcfd 	bl	800321c <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast*0x10);
 8004822:	4b27      	ldr	r3, [pc, #156]	; (80048c0 <cmdExecute+0x1fc>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	b2db      	uxtb	r3, r3
 800482a:	0018      	movs	r0, r3
 800482c:	f7fe fcf6 	bl	800321c <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 8004830:	23a0      	movs	r3, #160	; 0xa0
 8004832:	05db      	lsls	r3, r3, #23
 8004834:	695a      	ldr	r2, [r3, #20]
 8004836:	23a0      	movs	r3, #160	; 0xa0
 8004838:	05db      	lsls	r3, r3, #23
 800483a:	2180      	movs	r1, #128	; 0x80
 800483c:	430a      	orrs	r2, r1
 800483e:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8004840:	23a0      	movs	r3, #160	; 0xa0
 8004842:	05db      	lsls	r3, r3, #23
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	23a0      	movs	r3, #160	; 0xa0
 8004848:	05db      	lsls	r3, r3, #23
 800484a:	2140      	movs	r1, #64	; 0x40
 800484c:	430a      	orrs	r2, r1
 800484e:	615a      	str	r2, [r3, #20]
			}
//			bf4me=0x15;	//set BF flag 4 me
			GPIOC->ODR |= 1 << 6;	//set BF
 8004850:	4b19      	ldr	r3, [pc, #100]	; (80048b8 <cmdExecute+0x1f4>)
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	4b18      	ldr	r3, [pc, #96]	; (80048b8 <cmdExecute+0x1f4>)
 8004856:	2140      	movs	r1, #64	; 0x40
 8004858:	430a      	orrs	r2, r1
 800485a:	615a      	str	r2, [r3, #20]
			cmd2Execute=0;
 800485c:	1dfb      	adds	r3, r7, #7
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
		}
		if(cmd2Execute==0x16){
 8004862:	1dfb      	adds	r3, r7, #7
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b16      	cmp	r3, #22
 8004868:	d102      	bne.n	8004870 <cmdExecute+0x1ac>
			bf4me=0x16;	//set BF flag 4 me
 800486a:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <cmdExecute+0x1d4>)
 800486c:	2216      	movs	r2, #22
 800486e:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8004870:	1dfb      	adds	r3, r7, #7
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8004876:	4b09      	ldr	r3, [pc, #36]	; (800489c <cmdExecute+0x1d8>)
 8004878:	6a1a      	ldr	r2, [r3, #32]
 800487a:	4b08      	ldr	r3, [pc, #32]	; (800489c <cmdExecute+0x1d8>)
 800487c:	2108      	movs	r1, #8
 800487e:	430a      	orrs	r2, r1
 8004880:	621a      	str	r2, [r3, #32]
 8004882:	e002      	b.n	800488a <cmdExecute+0x1c6>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	e000      	b.n	800488a <cmdExecute+0x1c6>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 8004888:	46c0      	nop			; (mov r8, r8)
	}
 800488a:	0018      	movs	r0, r3
 800488c:	46bd      	mov	sp, r7
 800488e:	b002      	add	sp, #8
 8004890:	bd80      	pop	{r7, pc}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	20002504 	.word	0x20002504
 8004898:	200003d4 	.word	0x200003d4
 800489c:	40004400 	.word	0x40004400
 80048a0:	20000371 	.word	0x20000371
 80048a4:	200001fc 	.word	0x200001fc
 80048a8:	20000290 	.word	0x20000290
 80048ac:	200003bd 	.word	0x200003bd
 80048b0:	200000a0 	.word	0x200000a0
 80048b4:	2000043d 	.word	0x2000043d
 80048b8:	50000800 	.word	0x50000800
 80048bc:	200001f8 	.word	0x200001f8
 80048c0:	200002fc 	.word	0x200002fc

080048c4 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 80048c4:	b5b0      	push	{r4, r5, r7, lr}
 80048c6:	b0ae      	sub	sp, #184	; 0xb8
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	0004      	movs	r4, r0
 80048cc:	0008      	movs	r0, r1
 80048ce:	0011      	movs	r1, r2
 80048d0:	603b      	str	r3, [r7, #0]
 80048d2:	1dfb      	adds	r3, r7, #7
 80048d4:	1c22      	adds	r2, r4, #0
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	1dbb      	adds	r3, r7, #6
 80048da:	1c02      	adds	r2, r0, #0
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	1d7b      	adds	r3, r7, #5
 80048e0:	1c0a      	adds	r2, r1, #0
 80048e2:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X,decY;
			uint8_t weoBuffer1[49],weoBuffer2[49],weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 80048e4:	23ae      	movs	r3, #174	; 0xae
 80048e6:	18fb      	adds	r3, r7, r3
 80048e8:	1dfa      	adds	r2, r7, #7
 80048ea:	7812      	ldrb	r2, [r2, #0]
 80048ec:	701a      	strb	r2, [r3, #0]

			len=49;
 80048ee:	4b81      	ldr	r3, [pc, #516]	; (8004af4 <printASCIIarray+0x230>)
 80048f0:	2231      	movs	r2, #49	; 0x31
 80048f2:	801a      	strh	r2, [r3, #0]

			decY=0x01;
 80048f4:	21ad      	movs	r1, #173	; 0xad
 80048f6:	187b      	adds	r3, r7, r1
 80048f8:	2201      	movs	r2, #1
 80048fa:	701a      	strb	r2, [r3, #0]
			if(imY % 2 !=0){
 80048fc:	1dbb      	adds	r3, r7, #6
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2201      	movs	r2, #1
 8004902:	4013      	ands	r3, r2
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <printASCIIarray+0x4c>
				decY=0x02;
 800490a:	187b      	adds	r3, r7, r1
 800490c:	2202      	movs	r2, #2
 800490e:	701a      	strb	r2, [r3, #0]
			}

			for (i=0;i<strLen;i++){
 8004910:	23aa      	movs	r3, #170	; 0xaa
 8004912:	18fb      	adds	r3, r7, r3
 8004914:	2200      	movs	r2, #0
 8004916:	801a      	strh	r2, [r3, #0]
 8004918:	e0bd      	b.n	8004a96 <printASCIIarray+0x1d2>
				for(j=0;j<49;j++){
 800491a:	23af      	movs	r3, #175	; 0xaf
 800491c:	18fb      	adds	r3, r7, r3
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	e01b      	b.n	800495c <printASCIIarray+0x98>
					weoBuffer[j]=FONT_X[dataASCII[i]][j];
 8004924:	23aa      	movs	r3, #170	; 0xaa
 8004926:	18fb      	adds	r3, r7, r3
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	18d3      	adds	r3, r2, r3
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	001a      	movs	r2, r3
 8004932:	25af      	movs	r5, #175	; 0xaf
 8004934:	197b      	adds	r3, r7, r5
 8004936:	7818      	ldrb	r0, [r3, #0]
 8004938:	197b      	adds	r3, r7, r5
 800493a:	7819      	ldrb	r1, [r3, #0]
 800493c:	4c6e      	ldr	r4, [pc, #440]	; (8004af8 <printASCIIarray+0x234>)
 800493e:	0013      	movs	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	00da      	lsls	r2, r3, #3
 8004946:	1ad2      	subs	r2, r2, r3
 8004948:	18a3      	adds	r3, r4, r2
 800494a:	5c1a      	ldrb	r2, [r3, r0]
 800494c:	230c      	movs	r3, #12
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 8004952:	197b      	adds	r3, r7, r5
 8004954:	781a      	ldrb	r2, [r3, #0]
 8004956:	197b      	adds	r3, r7, r5
 8004958:	3201      	adds	r2, #1
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	23af      	movs	r3, #175	; 0xaf
 800495e:	18fb      	adds	r3, r7, r3
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b30      	cmp	r3, #48	; 0x30
 8004964:	d9de      	bls.n	8004924 <printASCIIarray+0x60>
					}
				if(imY > 0x7F){
 8004966:	1dbb      	adds	r3, r7, #6
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	b25b      	sxtb	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	da63      	bge.n	8004a38 <printASCIIarray+0x174>
					imY &=0x7F;
 8004970:	1dbb      	adds	r3, r7, #6
 8004972:	1dba      	adds	r2, r7, #6
 8004974:	7812      	ldrb	r2, [r2, #0]
 8004976:	217f      	movs	r1, #127	; 0x7f
 8004978:	400a      	ands	r2, r1
 800497a:	701a      	strb	r2, [r3, #0]
					dimmer=1;
 800497c:	4b5f      	ldr	r3, [pc, #380]	; (8004afc <printASCIIarray+0x238>)
 800497e:	2201      	movs	r2, #1
 8004980:	701a      	strb	r2, [r3, #0]
				for (uint8_t k=0;k<49;k++){
 8004982:	23a9      	movs	r3, #169	; 0xa9
 8004984:	18fb      	adds	r3, r7, r3
 8004986:	2200      	movs	r2, #0
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	e02b      	b.n	80049e4 <printASCIIarray+0x120>
					weoBuffer1[k]=(weoBuffer[k]&0x0F)>>dimmer;
 800498c:	21a9      	movs	r1, #169	; 0xa9
 800498e:	187b      	adds	r3, r7, r1
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	240c      	movs	r4, #12
 8004994:	193a      	adds	r2, r7, r4
 8004996:	5cd3      	ldrb	r3, [r2, r3]
 8004998:	001a      	movs	r2, r3
 800499a:	230f      	movs	r3, #15
 800499c:	4013      	ands	r3, r2
 800499e:	4a57      	ldr	r2, [pc, #348]	; (8004afc <printASCIIarray+0x238>)
 80049a0:	7812      	ldrb	r2, [r2, #0]
 80049a2:	4113      	asrs	r3, r2
 80049a4:	001a      	movs	r2, r3
 80049a6:	0008      	movs	r0, r1
 80049a8:	187b      	adds	r3, r7, r1
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	b2d1      	uxtb	r1, r2
 80049ae:	2274      	movs	r2, #116	; 0x74
 80049b0:	18ba      	adds	r2, r7, r2
 80049b2:	54d1      	strb	r1, [r2, r3]
					weoBuffer2[k]=(weoBuffer[k]&0xF0)>>dimmer;
 80049b4:	0001      	movs	r1, r0
 80049b6:	187b      	adds	r3, r7, r1
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	193a      	adds	r2, r7, r4
 80049bc:	5cd3      	ldrb	r3, [r2, r3]
 80049be:	001a      	movs	r2, r3
 80049c0:	23f0      	movs	r3, #240	; 0xf0
 80049c2:	4013      	ands	r3, r2
 80049c4:	4a4d      	ldr	r2, [pc, #308]	; (8004afc <printASCIIarray+0x238>)
 80049c6:	7812      	ldrb	r2, [r2, #0]
 80049c8:	4113      	asrs	r3, r2
 80049ca:	001a      	movs	r2, r3
 80049cc:	0008      	movs	r0, r1
 80049ce:	187b      	adds	r3, r7, r1
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	b2d1      	uxtb	r1, r2
 80049d4:	2240      	movs	r2, #64	; 0x40
 80049d6:	18ba      	adds	r2, r7, r2
 80049d8:	54d1      	strb	r1, [r2, r3]
				for (uint8_t k=0;k<49;k++){
 80049da:	183b      	adds	r3, r7, r0
 80049dc:	781a      	ldrb	r2, [r3, #0]
 80049de:	183b      	adds	r3, r7, r0
 80049e0:	3201      	adds	r2, #1
 80049e2:	701a      	strb	r2, [r3, #0]
 80049e4:	23a9      	movs	r3, #169	; 0xa9
 80049e6:	18fb      	adds	r3, r7, r3
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b30      	cmp	r3, #48	; 0x30
 80049ec:	d9ce      	bls.n	800498c <printASCIIarray+0xc8>
				}

				for (uint8_t k=0;k<49;k++){
 80049ee:	23a8      	movs	r3, #168	; 0xa8
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	2200      	movs	r2, #0
 80049f4:	701a      	strb	r2, [r3, #0]
 80049f6:	e01a      	b.n	8004a2e <printASCIIarray+0x16a>
					weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
 80049f8:	20a8      	movs	r0, #168	; 0xa8
 80049fa:	183b      	adds	r3, r7, r0
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2240      	movs	r2, #64	; 0x40
 8004a00:	18ba      	adds	r2, r7, r2
 8004a02:	5cd3      	ldrb	r3, [r2, r3]
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	b25a      	sxtb	r2, r3
 8004a08:	183b      	adds	r3, r7, r0
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2174      	movs	r1, #116	; 0x74
 8004a0e:	1879      	adds	r1, r7, r1
 8004a10:	5ccb      	ldrb	r3, [r1, r3]
 8004a12:	b25b      	sxtb	r3, r3
 8004a14:	4313      	orrs	r3, r2
 8004a16:	b25a      	sxtb	r2, r3
 8004a18:	183b      	adds	r3, r7, r0
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	b2d1      	uxtb	r1, r2
 8004a1e:	220c      	movs	r2, #12
 8004a20:	18ba      	adds	r2, r7, r2
 8004a22:	54d1      	strb	r1, [r2, r3]
				for (uint8_t k=0;k<49;k++){
 8004a24:	183b      	adds	r3, r7, r0
 8004a26:	781a      	ldrb	r2, [r3, #0]
 8004a28:	183b      	adds	r3, r7, r0
 8004a2a:	3201      	adds	r2, #1
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	23a8      	movs	r3, #168	; 0xa8
 8004a30:	18fb      	adds	r3, r7, r3
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b30      	cmp	r3, #48	; 0x30
 8004a36:	d9df      	bls.n	80049f8 <printASCIIarray+0x134>
				}
				}
				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-1,imY+ASCII_height-decY,0xFF,weoBuffer);
 8004a38:	4b31      	ldr	r3, [pc, #196]	; (8004b00 <printASCIIarray+0x23c>)
 8004a3a:	781a      	ldrb	r2, [r3, #0]
 8004a3c:	20ae      	movs	r0, #174	; 0xae
 8004a3e:	183b      	adds	r3, r7, r0
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	18d3      	adds	r3, r2, r3
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b2dc      	uxtb	r4, r3
 8004a4a:	4b2e      	ldr	r3, [pc, #184]	; (8004b04 <printASCIIarray+0x240>)
 8004a4c:	781a      	ldrb	r2, [r3, #0]
 8004a4e:	1dbb      	adds	r3, r7, #6
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	18d3      	adds	r3, r2, r3
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	23ad      	movs	r3, #173	; 0xad
 8004a58:	18fb      	adds	r3, r7, r3
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	1dbb      	adds	r3, r7, #6
 8004a62:	7819      	ldrb	r1, [r3, #0]
 8004a64:	0005      	movs	r5, r0
 8004a66:	183b      	adds	r3, r7, r0
 8004a68:	7818      	ldrb	r0, [r3, #0]
 8004a6a:	230c      	movs	r3, #12
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	23ff      	movs	r3, #255	; 0xff
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	0013      	movs	r3, r2
 8004a76:	0022      	movs	r2, r4
 8004a78:	f7fe fcb2 	bl	80033e0 <weoDrawRectangleFilled>
				ASCII_X += X_increment+0;
 8004a7c:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <printASCIIarray+0x23c>)
 8004a7e:	7819      	ldrb	r1, [r3, #0]
 8004a80:	197b      	adds	r3, r7, r5
 8004a82:	197a      	adds	r2, r7, r5
 8004a84:	7812      	ldrb	r2, [r2, #0]
 8004a86:	188a      	adds	r2, r1, r2
 8004a88:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 8004a8a:	21aa      	movs	r1, #170	; 0xaa
 8004a8c:	187b      	adds	r3, r7, r1
 8004a8e:	881a      	ldrh	r2, [r3, #0]
 8004a90:	187b      	adds	r3, r7, r1
 8004a92:	3201      	adds	r2, #1
 8004a94:	801a      	strh	r2, [r3, #0]
 8004a96:	1d7b      	adds	r3, r7, #5
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	21aa      	movs	r1, #170	; 0xaa
 8004a9e:	187a      	adds	r2, r7, r1
 8004aa0:	8812      	ldrh	r2, [r2, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d200      	bcs.n	8004aa8 <printASCIIarray+0x1e4>
 8004aa6:	e738      	b.n	800491a <printASCIIarray+0x56>
			}
			for(i=0;i<len;i++){
 8004aa8:	187b      	adds	r3, r7, r1
 8004aaa:	2200      	movs	r2, #0
 8004aac:	801a      	strh	r2, [r3, #0]
 8004aae:	e00c      	b.n	8004aca <printASCIIarray+0x206>
					weoBuffer[j]=0x00;
 8004ab0:	23af      	movs	r3, #175	; 0xaf
 8004ab2:	18fb      	adds	r3, r7, r3
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	220c      	movs	r2, #12
 8004ab8:	18ba      	adds	r2, r7, r2
 8004aba:	2100      	movs	r1, #0
 8004abc:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<len;i++){
 8004abe:	21aa      	movs	r1, #170	; 0xaa
 8004ac0:	187b      	adds	r3, r7, r1
 8004ac2:	881a      	ldrh	r2, [r3, #0]
 8004ac4:	187b      	adds	r3, r7, r1
 8004ac6:	3201      	adds	r2, #1
 8004ac8:	801a      	strh	r2, [r3, #0]
 8004aca:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <printASCIIarray+0x230>)
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	22aa      	movs	r2, #170	; 0xaa
 8004ad0:	18ba      	adds	r2, r7, r2
 8004ad2:	8812      	ldrh	r2, [r2, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d3eb      	bcc.n	8004ab0 <printASCIIarray+0x1ec>
			}

			GPIOC->ODR |= 1 << 6;	//set BF
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <printASCIIarray+0x244>)
 8004ada:	695a      	ldr	r2, [r3, #20]
 8004adc:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <printASCIIarray+0x244>)
 8004ade:	2140      	movs	r1, #64	; 0x40
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	615a      	str	r2, [r3, #20]
			cmd2Execute=0;
 8004ae4:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <printASCIIarray+0x248>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	701a      	strb	r2, [r3, #0]
		}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	0018      	movs	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b02c      	add	sp, #176	; 0xb0
 8004af2:	bdb0      	pop	{r4, r5, r7, pc}
 8004af4:	200004fc 	.word	0x200004fc
 8004af8:	0800eabc 	.word	0x0800eabc
 8004afc:	20000064 	.word	0x20000064
 8004b00:	20000030 	.word	0x20000030
 8004b04:	20000031 	.word	0x20000031
 8004b08:	50000800 	.word	0x50000800
 8004b0c:	20000372 	.word	0x20000372

08004b10 <squeak_single>:
//=============================================================================================================
	void squeak_single(void){
 8004b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b12:	4c3d      	ldr	r4, [pc, #244]	; (8004c08 <squeak_single+0xf8>)
 8004b14:	44a5      	add	sp, r4
 8004b16:	af00      	add	r7, sp, #0
		   uint16_t signal[2048];
		    uint16_t nsamples = sizeof(signal) / sizeof(signal[0]);
 8004b18:	4b3c      	ldr	r3, [pc, #240]	; (8004c0c <squeak_single+0xfc>)
 8004b1a:	18fb      	adds	r3, r7, r3
 8004b1c:	2280      	movs	r2, #128	; 0x80
 8004b1e:	0112      	lsls	r2, r2, #4
 8004b20:	801a      	strh	r2, [r3, #0]

		    uint16_t k = 0;
 8004b22:	4b3b      	ldr	r3, [pc, #236]	; (8004c10 <squeak_single+0x100>)
 8004b24:	18fb      	adds	r3, r7, r3
 8004b26:	2200      	movs	r2, #0
 8004b28:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 8004b2a:	e048      	b.n	8004bbe <squeak_single+0xae>
		        double t = ((double)k/2.0)/((double)nsamples);
 8004b2c:	4e38      	ldr	r6, [pc, #224]	; (8004c10 <squeak_single+0x100>)
 8004b2e:	19bb      	adds	r3, r7, r6
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	0018      	movs	r0, r3
 8004b34:	f7fd fa8c 	bl	8002050 <__aeabi_ui2d>
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2380      	movs	r3, #128	; 0x80
 8004b3c:	05db      	lsls	r3, r3, #23
 8004b3e:	f7fc f81d 	bl	8000b7c <__aeabi_ddiv>
 8004b42:	0002      	movs	r2, r0
 8004b44:	000b      	movs	r3, r1
 8004b46:	0014      	movs	r4, r2
 8004b48:	001d      	movs	r5, r3
 8004b4a:	4b30      	ldr	r3, [pc, #192]	; (8004c0c <squeak_single+0xfc>)
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	0018      	movs	r0, r3
 8004b52:	f7fd fa7d 	bl	8002050 <__aeabi_ui2d>
 8004b56:	0002      	movs	r2, r0
 8004b58:	000b      	movs	r3, r1
 8004b5a:	0020      	movs	r0, r4
 8004b5c:	0029      	movs	r1, r5
 8004b5e:	f7fc f80d 	bl	8000b7c <__aeabi_ddiv>
 8004b62:	0002      	movs	r2, r0
 8004b64:	000b      	movs	r3, r1
 8004b66:	2180      	movs	r1, #128	; 0x80
 8004b68:	0149      	lsls	r1, r1, #5
 8004b6a:	1878      	adds	r0, r7, r1
 8004b6c:	6002      	str	r2, [r0, #0]
 8004b6e:	6043      	str	r3, [r0, #4]
		        signal[k] = 32767*sin(100.0 * TAU * t); // left
 8004b70:	4a28      	ldr	r2, [pc, #160]	; (8004c14 <squeak_single+0x104>)
 8004b72:	4b29      	ldr	r3, [pc, #164]	; (8004c18 <squeak_single+0x108>)
 8004b74:	1879      	adds	r1, r7, r1
 8004b76:	6808      	ldr	r0, [r1, #0]
 8004b78:	6849      	ldr	r1, [r1, #4]
 8004b7a:	f7fc fc05 	bl	8001388 <__aeabi_dmul>
 8004b7e:	0002      	movs	r2, r0
 8004b80:	000b      	movs	r3, r1
 8004b82:	0010      	movs	r0, r2
 8004b84:	0019      	movs	r1, r3
 8004b86:	f008 ff35 	bl	800d9f4 <sin>
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	4b23      	ldr	r3, [pc, #140]	; (8004c1c <squeak_single+0x10c>)
 8004b8e:	f7fc fbfb 	bl	8001388 <__aeabi_dmul>
 8004b92:	0002      	movs	r2, r0
 8004b94:	000b      	movs	r3, r1
 8004b96:	19b9      	adds	r1, r7, r6
 8004b98:	880c      	ldrh	r4, [r1, #0]
 8004b9a:	0010      	movs	r0, r2
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	f7fb fc65 	bl	800046c <__aeabi_d2uiz>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	b299      	uxth	r1, r3
 8004ba6:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <squeak_single+0x110>)
 8004ba8:	4a1e      	ldr	r2, [pc, #120]	; (8004c24 <squeak_single+0x114>)
 8004baa:	4694      	mov	ip, r2
 8004bac:	44bc      	add	ip, r7
 8004bae:	4463      	add	r3, ip
 8004bb0:	0062      	lsls	r2, r4, #1
 8004bb2:	52d1      	strh	r1, [r2, r3]
		        k += 1;
 8004bb4:	19bb      	adds	r3, r7, r6
 8004bb6:	19ba      	adds	r2, r7, r6
 8004bb8:	8812      	ldrh	r2, [r2, #0]
 8004bba:	3201      	adds	r2, #1
 8004bbc:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 8004bbe:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <squeak_single+0x100>)
 8004bc0:	18fa      	adds	r2, r7, r3
 8004bc2:	4c12      	ldr	r4, [pc, #72]	; (8004c0c <squeak_single+0xfc>)
 8004bc4:	193b      	adds	r3, r7, r4
 8004bc6:	8812      	ldrh	r2, [r2, #0]
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d3ae      	bcc.n	8004b2c <squeak_single+0x1c>
		    }
		I2C_SOUND_ChangePage(0x01);
 8004bce:	2001      	movs	r0, #1
 8004bd0:	f7fe fd72 	bl	80036b8 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	2001      	movs	r0, #1
 8004bd8:	f7fe fd8c 	bl	80036f4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f7fe fd6b 	bl	80036b8 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8004be2:	2130      	movs	r1, #48	; 0x30
 8004be4:	2041      	movs	r0, #65	; 0x41
 8004be6:	f7fe fd85 	bl	80036f4 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 8004bea:	2001      	movs	r0, #1
 8004bec:	f7fe fd64 	bl	80036b8 <I2C_SOUND_ChangePage>
//		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004bf0:	193b      	adds	r3, r7, r4
 8004bf2:	881a      	ldrh	r2, [r3, #0]
 8004bf4:	0039      	movs	r1, r7
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <squeak_single+0x118>)
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f003 fa41 	bl	8008080 <HAL_I2S_Transmit_DMA>
//		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	46bd      	mov	sp, r7
 8004c02:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <squeak_single+0x11c>)
 8004c04:	449d      	add	sp, r3
 8004c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c08:	ffffefec 	.word	0xffffefec
 8004c0c:	0000100c 	.word	0x0000100c
 8004c10:	0000100e 	.word	0x0000100e
 8004c14:	59d5433b 	.word	0x59d5433b
 8004c18:	4083a28c 	.word	0x4083a28c
 8004c1c:	40dfffc0 	.word	0x40dfffc0
 8004c20:	ffffeff0 	.word	0xffffeff0
 8004c24:	00001010 	.word	0x00001010
 8004c28:	20000378 	.word	0x20000378
 8004c2c:	00001014 	.word	0x00001014

08004c30 <squeak_long>:
//==========================================================================================================================
	void squeak_long(void){
 8004c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c32:	4c55      	ldr	r4, [pc, #340]	; (8004d88 <squeak_long+0x158>)
 8004c34:	44a5      	add	sp, r4
 8004c36:	af00      	add	r7, sp, #0
		   uint16_t signal[2048];
		    uint16_t nsamples = sizeof(signal) / sizeof(signal[0]);
 8004c38:	4b54      	ldr	r3, [pc, #336]	; (8004d8c <squeak_long+0x15c>)
 8004c3a:	18fb      	adds	r3, r7, r3
 8004c3c:	2280      	movs	r2, #128	; 0x80
 8004c3e:	0112      	lsls	r2, r2, #4
 8004c40:	801a      	strh	r2, [r3, #0]

		    uint16_t k = 0;
 8004c42:	4b53      	ldr	r3, [pc, #332]	; (8004d90 <squeak_long+0x160>)
 8004c44:	18fb      	adds	r3, r7, r3
 8004c46:	2200      	movs	r2, #0
 8004c48:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 8004c4a:	e048      	b.n	8004cde <squeak_long+0xae>
		        double t = ((double)k/2.0)/((double)nsamples);
 8004c4c:	4e50      	ldr	r6, [pc, #320]	; (8004d90 <squeak_long+0x160>)
 8004c4e:	19bb      	adds	r3, r7, r6
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	0018      	movs	r0, r3
 8004c54:	f7fd f9fc 	bl	8002050 <__aeabi_ui2d>
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2380      	movs	r3, #128	; 0x80
 8004c5c:	05db      	lsls	r3, r3, #23
 8004c5e:	f7fb ff8d 	bl	8000b7c <__aeabi_ddiv>
 8004c62:	0002      	movs	r2, r0
 8004c64:	000b      	movs	r3, r1
 8004c66:	0014      	movs	r4, r2
 8004c68:	001d      	movs	r5, r3
 8004c6a:	4b48      	ldr	r3, [pc, #288]	; (8004d8c <squeak_long+0x15c>)
 8004c6c:	18fb      	adds	r3, r7, r3
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	0018      	movs	r0, r3
 8004c72:	f7fd f9ed 	bl	8002050 <__aeabi_ui2d>
 8004c76:	0002      	movs	r2, r0
 8004c78:	000b      	movs	r3, r1
 8004c7a:	0020      	movs	r0, r4
 8004c7c:	0029      	movs	r1, r5
 8004c7e:	f7fb ff7d 	bl	8000b7c <__aeabi_ddiv>
 8004c82:	0002      	movs	r2, r0
 8004c84:	000b      	movs	r3, r1
 8004c86:	2180      	movs	r1, #128	; 0x80
 8004c88:	0149      	lsls	r1, r1, #5
 8004c8a:	1878      	adds	r0, r7, r1
 8004c8c:	6002      	str	r2, [r0, #0]
 8004c8e:	6043      	str	r3, [r0, #4]
		        signal[k] = 32767*sin(100.0 * TAU * t); // left
 8004c90:	4a40      	ldr	r2, [pc, #256]	; (8004d94 <squeak_long+0x164>)
 8004c92:	4b41      	ldr	r3, [pc, #260]	; (8004d98 <squeak_long+0x168>)
 8004c94:	1879      	adds	r1, r7, r1
 8004c96:	6808      	ldr	r0, [r1, #0]
 8004c98:	6849      	ldr	r1, [r1, #4]
 8004c9a:	f7fc fb75 	bl	8001388 <__aeabi_dmul>
 8004c9e:	0002      	movs	r2, r0
 8004ca0:	000b      	movs	r3, r1
 8004ca2:	0010      	movs	r0, r2
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	f008 fea5 	bl	800d9f4 <sin>
 8004caa:	2200      	movs	r2, #0
 8004cac:	4b3b      	ldr	r3, [pc, #236]	; (8004d9c <squeak_long+0x16c>)
 8004cae:	f7fc fb6b 	bl	8001388 <__aeabi_dmul>
 8004cb2:	0002      	movs	r2, r0
 8004cb4:	000b      	movs	r3, r1
 8004cb6:	19b9      	adds	r1, r7, r6
 8004cb8:	880c      	ldrh	r4, [r1, #0]
 8004cba:	0010      	movs	r0, r2
 8004cbc:	0019      	movs	r1, r3
 8004cbe:	f7fb fbd5 	bl	800046c <__aeabi_d2uiz>
 8004cc2:	0003      	movs	r3, r0
 8004cc4:	b299      	uxth	r1, r3
 8004cc6:	4b36      	ldr	r3, [pc, #216]	; (8004da0 <squeak_long+0x170>)
 8004cc8:	4a36      	ldr	r2, [pc, #216]	; (8004da4 <squeak_long+0x174>)
 8004cca:	4694      	mov	ip, r2
 8004ccc:	44bc      	add	ip, r7
 8004cce:	4463      	add	r3, ip
 8004cd0:	0062      	lsls	r2, r4, #1
 8004cd2:	52d1      	strh	r1, [r2, r3]
		        k += 1;
 8004cd4:	19bb      	adds	r3, r7, r6
 8004cd6:	19ba      	adds	r2, r7, r6
 8004cd8:	8812      	ldrh	r2, [r2, #0]
 8004cda:	3201      	adds	r2, #1
 8004cdc:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 8004cde:	4b2c      	ldr	r3, [pc, #176]	; (8004d90 <squeak_long+0x160>)
 8004ce0:	18fa      	adds	r2, r7, r3
 8004ce2:	4d2a      	ldr	r5, [pc, #168]	; (8004d8c <squeak_long+0x15c>)
 8004ce4:	197b      	adds	r3, r7, r5
 8004ce6:	8812      	ldrh	r2, [r2, #0]
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d3ae      	bcc.n	8004c4c <squeak_long+0x1c>
		    }
		I2C_SOUND_ChangePage(0x01);
 8004cee:	2001      	movs	r0, #1
 8004cf0:	f7fe fce2 	bl	80036b8 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	f7fe fcfc 	bl	80036f4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	f7fe fcdb 	bl	80036b8 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8004d02:	2130      	movs	r1, #48	; 0x30
 8004d04:	2041      	movs	r0, #65	; 0x41
 8004d06:	f7fe fcf5 	bl	80036f4 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 8004d0a:	2001      	movs	r0, #1
 8004d0c:	f7fe fcd4 	bl	80036b8 <I2C_SOUND_ChangePage>
//		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,HAL_MAX_DELAY);
 8004d10:	2301      	movs	r3, #1
 8004d12:	425c      	negs	r4, r3
 8004d14:	197b      	adds	r3, r7, r5
 8004d16:	881a      	ldrh	r2, [r3, #0]
 8004d18:	0039      	movs	r1, r7
 8004d1a:	4823      	ldr	r0, [pc, #140]	; (8004da8 <squeak_long+0x178>)
 8004d1c:	0023      	movs	r3, r4
 8004d1e:	f003 f8b7 	bl	8007e90 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,HAL_MAX_DELAY);
 8004d22:	2301      	movs	r3, #1
 8004d24:	425c      	negs	r4, r3
 8004d26:	197b      	adds	r3, r7, r5
 8004d28:	881a      	ldrh	r2, [r3, #0]
 8004d2a:	0039      	movs	r1, r7
 8004d2c:	481e      	ldr	r0, [pc, #120]	; (8004da8 <squeak_long+0x178>)
 8004d2e:	0023      	movs	r3, r4
 8004d30:	f003 f8ae 	bl	8007e90 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,HAL_MAX_DELAY);
 8004d34:	2301      	movs	r3, #1
 8004d36:	425c      	negs	r4, r3
 8004d38:	197b      	adds	r3, r7, r5
 8004d3a:	881a      	ldrh	r2, [r3, #0]
 8004d3c:	0039      	movs	r1, r7
 8004d3e:	481a      	ldr	r0, [pc, #104]	; (8004da8 <squeak_long+0x178>)
 8004d40:	0023      	movs	r3, r4
 8004d42:	f003 f8a5 	bl	8007e90 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,HAL_MAX_DELAY);
 8004d46:	2301      	movs	r3, #1
 8004d48:	425c      	negs	r4, r3
 8004d4a:	197b      	adds	r3, r7, r5
 8004d4c:	881a      	ldrh	r2, [r3, #0]
 8004d4e:	0039      	movs	r1, r7
 8004d50:	4815      	ldr	r0, [pc, #84]	; (8004da8 <squeak_long+0x178>)
 8004d52:	0023      	movs	r3, r4
 8004d54:	f003 f89c 	bl	8007e90 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,HAL_MAX_DELAY);
 8004d58:	2301      	movs	r3, #1
 8004d5a:	425c      	negs	r4, r3
 8004d5c:	197b      	adds	r3, r7, r5
 8004d5e:	881a      	ldrh	r2, [r3, #0]
 8004d60:	0039      	movs	r1, r7
 8004d62:	4811      	ldr	r0, [pc, #68]	; (8004da8 <squeak_long+0x178>)
 8004d64:	0023      	movs	r3, r4
 8004d66:	f003 f893 	bl	8007e90 <HAL_I2S_Transmit>
//		HAL_Delay(500);
		GPIOC->ODR |= 1 << 6;	//set BF
 8004d6a:	4b10      	ldr	r3, [pc, #64]	; (8004dac <squeak_long+0x17c>)
 8004d6c:	695a      	ldr	r2, [r3, #20]
 8004d6e:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <squeak_long+0x17c>)
 8004d70:	2140      	movs	r1, #64	; 0x40
 8004d72:	430a      	orrs	r2, r1
 8004d74:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 8004d76:	4b0e      	ldr	r3, [pc, #56]	; (8004db0 <squeak_long+0x180>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	701a      	strb	r2, [r3, #0]
	}
 8004d7c:	46c0      	nop			; (mov r8, r8)
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <squeak_long+0x184>)
 8004d82:	449d      	add	sp, r3
 8004d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	ffffefec 	.word	0xffffefec
 8004d8c:	0000100c 	.word	0x0000100c
 8004d90:	0000100e 	.word	0x0000100e
 8004d94:	59d5433b 	.word	0x59d5433b
 8004d98:	4083a28c 	.word	0x4083a28c
 8004d9c:	40dfffc0 	.word	0x40dfffc0
 8004da0:	ffffeff0 	.word	0xffffeff0
 8004da4:	00001010 	.word	0x00001010
 8004da8:	20000378 	.word	0x20000378
 8004dac:	50000800 	.word	0x50000800
 8004db0:	20000372 	.word	0x20000372
 8004db4:	00001014 	.word	0x00001014

08004db8 <squeak_double>:
//=============================================================================================================
	void squeak_double(void){
 8004db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dba:	4c42      	ldr	r4, [pc, #264]	; (8004ec4 <squeak_double+0x10c>)
 8004dbc:	44a5      	add	sp, r4
 8004dbe:	af00      	add	r7, sp, #0
		   uint16_t signal[2048];
		    uint16_t nsamples = sizeof(signal) / sizeof(signal[0]);
 8004dc0:	4b41      	ldr	r3, [pc, #260]	; (8004ec8 <squeak_double+0x110>)
 8004dc2:	18fb      	adds	r3, r7, r3
 8004dc4:	2280      	movs	r2, #128	; 0x80
 8004dc6:	0112      	lsls	r2, r2, #4
 8004dc8:	801a      	strh	r2, [r3, #0]

		    uint16_t k = 0;
 8004dca:	4b40      	ldr	r3, [pc, #256]	; (8004ecc <squeak_double+0x114>)
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	2200      	movs	r2, #0
 8004dd0:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 8004dd2:	e048      	b.n	8004e66 <squeak_double+0xae>
		        double t = ((double)k/2.0)/((double)nsamples);
 8004dd4:	4e3d      	ldr	r6, [pc, #244]	; (8004ecc <squeak_double+0x114>)
 8004dd6:	19bb      	adds	r3, r7, r6
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f7fd f938 	bl	8002050 <__aeabi_ui2d>
 8004de0:	2200      	movs	r2, #0
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	05db      	lsls	r3, r3, #23
 8004de6:	f7fb fec9 	bl	8000b7c <__aeabi_ddiv>
 8004dea:	0002      	movs	r2, r0
 8004dec:	000b      	movs	r3, r1
 8004dee:	0014      	movs	r4, r2
 8004df0:	001d      	movs	r5, r3
 8004df2:	4b35      	ldr	r3, [pc, #212]	; (8004ec8 <squeak_double+0x110>)
 8004df4:	18fb      	adds	r3, r7, r3
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7fd f929 	bl	8002050 <__aeabi_ui2d>
 8004dfe:	0002      	movs	r2, r0
 8004e00:	000b      	movs	r3, r1
 8004e02:	0020      	movs	r0, r4
 8004e04:	0029      	movs	r1, r5
 8004e06:	f7fb feb9 	bl	8000b7c <__aeabi_ddiv>
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	000b      	movs	r3, r1
 8004e0e:	2180      	movs	r1, #128	; 0x80
 8004e10:	0149      	lsls	r1, r1, #5
 8004e12:	1878      	adds	r0, r7, r1
 8004e14:	6002      	str	r2, [r0, #0]
 8004e16:	6043      	str	r3, [r0, #4]
		        signal[k] = 32767*sin(100.0 * TAU * t); // left
 8004e18:	4a2d      	ldr	r2, [pc, #180]	; (8004ed0 <squeak_double+0x118>)
 8004e1a:	4b2e      	ldr	r3, [pc, #184]	; (8004ed4 <squeak_double+0x11c>)
 8004e1c:	1879      	adds	r1, r7, r1
 8004e1e:	6808      	ldr	r0, [r1, #0]
 8004e20:	6849      	ldr	r1, [r1, #4]
 8004e22:	f7fc fab1 	bl	8001388 <__aeabi_dmul>
 8004e26:	0002      	movs	r2, r0
 8004e28:	000b      	movs	r3, r1
 8004e2a:	0010      	movs	r0, r2
 8004e2c:	0019      	movs	r1, r3
 8004e2e:	f008 fde1 	bl	800d9f4 <sin>
 8004e32:	2200      	movs	r2, #0
 8004e34:	4b28      	ldr	r3, [pc, #160]	; (8004ed8 <squeak_double+0x120>)
 8004e36:	f7fc faa7 	bl	8001388 <__aeabi_dmul>
 8004e3a:	0002      	movs	r2, r0
 8004e3c:	000b      	movs	r3, r1
 8004e3e:	19b9      	adds	r1, r7, r6
 8004e40:	880c      	ldrh	r4, [r1, #0]
 8004e42:	0010      	movs	r0, r2
 8004e44:	0019      	movs	r1, r3
 8004e46:	f7fb fb11 	bl	800046c <__aeabi_d2uiz>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	b299      	uxth	r1, r3
 8004e4e:	4b23      	ldr	r3, [pc, #140]	; (8004edc <squeak_double+0x124>)
 8004e50:	4a23      	ldr	r2, [pc, #140]	; (8004ee0 <squeak_double+0x128>)
 8004e52:	4694      	mov	ip, r2
 8004e54:	44bc      	add	ip, r7
 8004e56:	4463      	add	r3, ip
 8004e58:	0062      	lsls	r2, r4, #1
 8004e5a:	52d1      	strh	r1, [r2, r3]
		        k += 1;
 8004e5c:	19bb      	adds	r3, r7, r6
 8004e5e:	19ba      	adds	r2, r7, r6
 8004e60:	8812      	ldrh	r2, [r2, #0]
 8004e62:	3201      	adds	r2, #1
 8004e64:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 8004e66:	4b19      	ldr	r3, [pc, #100]	; (8004ecc <squeak_double+0x114>)
 8004e68:	18fa      	adds	r2, r7, r3
 8004e6a:	4c17      	ldr	r4, [pc, #92]	; (8004ec8 <squeak_double+0x110>)
 8004e6c:	193b      	adds	r3, r7, r4
 8004e6e:	8812      	ldrh	r2, [r2, #0]
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d3ae      	bcc.n	8004dd4 <squeak_double+0x1c>
		    }
		I2C_SOUND_ChangePage(0x01);
 8004e76:	2001      	movs	r0, #1
 8004e78:	f7fe fc1e 	bl	80036b8 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	2001      	movs	r0, #1
 8004e80:	f7fe fc38 	bl	80036f4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8004e84:	2000      	movs	r0, #0
 8004e86:	f7fe fc17 	bl	80036b8 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8004e8a:	2130      	movs	r1, #48	; 0x30
 8004e8c:	2041      	movs	r0, #65	; 0x41
 8004e8e:	f7fe fc31 	bl	80036f4 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 8004e92:	2001      	movs	r0, #1
 8004e94:	f7fe fc10 	bl	80036b8 <I2C_SOUND_ChangePage>
//		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004e98:	193b      	adds	r3, r7, r4
 8004e9a:	881a      	ldrh	r2, [r3, #0]
 8004e9c:	0039      	movs	r1, r7
 8004e9e:	4b11      	ldr	r3, [pc, #68]	; (8004ee4 <squeak_double+0x12c>)
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f003 f8ed 	bl	8008080 <HAL_I2S_Transmit_DMA>
		HAL_Delay(100);
 8004ea6:	2064      	movs	r0, #100	; 0x64
 8004ea8:	f000 fdcc 	bl	8005a44 <HAL_Delay>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004eac:	193b      	adds	r3, r7, r4
 8004eae:	881a      	ldrh	r2, [r3, #0]
 8004eb0:	0039      	movs	r1, r7
 8004eb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <squeak_double+0x12c>)
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f003 f8e3 	bl	8008080 <HAL_I2S_Transmit_DMA>
//		HAL_Delay(500);
	}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <squeak_double+0x130>)
 8004ec0:	449d      	add	sp, r3
 8004ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec4:	ffffefec 	.word	0xffffefec
 8004ec8:	0000100c 	.word	0x0000100c
 8004ecc:	0000100e 	.word	0x0000100e
 8004ed0:	59d5433b 	.word	0x59d5433b
 8004ed4:	4083a28c 	.word	0x4083a28c
 8004ed8:	40dfffc0 	.word	0x40dfffc0
 8004edc:	ffffeff0 	.word	0xffffeff0
 8004ee0:	00001010 	.word	0x00001010
 8004ee4:	20000378 	.word	0x20000378
 8004ee8:	00001014 	.word	0x00001014

08004eec <squeak_triple>:
//=============================================================================================================
	void squeak_triple(void){
 8004eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eee:	4c47      	ldr	r4, [pc, #284]	; (800500c <squeak_triple+0x120>)
 8004ef0:	44a5      	add	sp, r4
 8004ef2:	af00      	add	r7, sp, #0
		   uint16_t signal[2048];
		    uint16_t nsamples = sizeof(signal) / sizeof(signal[0]);
 8004ef4:	4b46      	ldr	r3, [pc, #280]	; (8005010 <squeak_triple+0x124>)
 8004ef6:	18fb      	adds	r3, r7, r3
 8004ef8:	2280      	movs	r2, #128	; 0x80
 8004efa:	0112      	lsls	r2, r2, #4
 8004efc:	801a      	strh	r2, [r3, #0]

		    uint16_t k = 0;
 8004efe:	4b45      	ldr	r3, [pc, #276]	; (8005014 <squeak_triple+0x128>)
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	2200      	movs	r2, #0
 8004f04:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 8004f06:	e048      	b.n	8004f9a <squeak_triple+0xae>
		        double t = ((double)k/2.0)/((double)nsamples);
 8004f08:	4e42      	ldr	r6, [pc, #264]	; (8005014 <squeak_triple+0x128>)
 8004f0a:	19bb      	adds	r3, r7, r6
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f7fd f89e 	bl	8002050 <__aeabi_ui2d>
 8004f14:	2200      	movs	r2, #0
 8004f16:	2380      	movs	r3, #128	; 0x80
 8004f18:	05db      	lsls	r3, r3, #23
 8004f1a:	f7fb fe2f 	bl	8000b7c <__aeabi_ddiv>
 8004f1e:	0002      	movs	r2, r0
 8004f20:	000b      	movs	r3, r1
 8004f22:	0014      	movs	r4, r2
 8004f24:	001d      	movs	r5, r3
 8004f26:	4b3a      	ldr	r3, [pc, #232]	; (8005010 <squeak_triple+0x124>)
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f7fd f88f 	bl	8002050 <__aeabi_ui2d>
 8004f32:	0002      	movs	r2, r0
 8004f34:	000b      	movs	r3, r1
 8004f36:	0020      	movs	r0, r4
 8004f38:	0029      	movs	r1, r5
 8004f3a:	f7fb fe1f 	bl	8000b7c <__aeabi_ddiv>
 8004f3e:	0002      	movs	r2, r0
 8004f40:	000b      	movs	r3, r1
 8004f42:	2180      	movs	r1, #128	; 0x80
 8004f44:	0149      	lsls	r1, r1, #5
 8004f46:	1878      	adds	r0, r7, r1
 8004f48:	6002      	str	r2, [r0, #0]
 8004f4a:	6043      	str	r3, [r0, #4]
		        signal[k] = 32767*sin(100.0 * TAU * t); // left
 8004f4c:	4a32      	ldr	r2, [pc, #200]	; (8005018 <squeak_triple+0x12c>)
 8004f4e:	4b33      	ldr	r3, [pc, #204]	; (800501c <squeak_triple+0x130>)
 8004f50:	1879      	adds	r1, r7, r1
 8004f52:	6808      	ldr	r0, [r1, #0]
 8004f54:	6849      	ldr	r1, [r1, #4]
 8004f56:	f7fc fa17 	bl	8001388 <__aeabi_dmul>
 8004f5a:	0002      	movs	r2, r0
 8004f5c:	000b      	movs	r3, r1
 8004f5e:	0010      	movs	r0, r2
 8004f60:	0019      	movs	r1, r3
 8004f62:	f008 fd47 	bl	800d9f4 <sin>
 8004f66:	2200      	movs	r2, #0
 8004f68:	4b2d      	ldr	r3, [pc, #180]	; (8005020 <squeak_triple+0x134>)
 8004f6a:	f7fc fa0d 	bl	8001388 <__aeabi_dmul>
 8004f6e:	0002      	movs	r2, r0
 8004f70:	000b      	movs	r3, r1
 8004f72:	19b9      	adds	r1, r7, r6
 8004f74:	880c      	ldrh	r4, [r1, #0]
 8004f76:	0010      	movs	r0, r2
 8004f78:	0019      	movs	r1, r3
 8004f7a:	f7fb fa77 	bl	800046c <__aeabi_d2uiz>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	b299      	uxth	r1, r3
 8004f82:	4b28      	ldr	r3, [pc, #160]	; (8005024 <squeak_triple+0x138>)
 8004f84:	4a28      	ldr	r2, [pc, #160]	; (8005028 <squeak_triple+0x13c>)
 8004f86:	4694      	mov	ip, r2
 8004f88:	44bc      	add	ip, r7
 8004f8a:	4463      	add	r3, ip
 8004f8c:	0062      	lsls	r2, r4, #1
 8004f8e:	52d1      	strh	r1, [r2, r3]
		        k += 1;
 8004f90:	19bb      	adds	r3, r7, r6
 8004f92:	19ba      	adds	r2, r7, r6
 8004f94:	8812      	ldrh	r2, [r2, #0]
 8004f96:	3201      	adds	r2, #1
 8004f98:	801a      	strh	r2, [r3, #0]
		    while(k < nsamples) {
 8004f9a:	4b1e      	ldr	r3, [pc, #120]	; (8005014 <squeak_triple+0x128>)
 8004f9c:	18fa      	adds	r2, r7, r3
 8004f9e:	4c1c      	ldr	r4, [pc, #112]	; (8005010 <squeak_triple+0x124>)
 8004fa0:	193b      	adds	r3, r7, r4
 8004fa2:	8812      	ldrh	r2, [r2, #0]
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d3ae      	bcc.n	8004f08 <squeak_triple+0x1c>
		    }
		I2C_SOUND_ChangePage(0x01);
 8004faa:	2001      	movs	r0, #1
 8004fac:	f7fe fb84 	bl	80036b8 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	2001      	movs	r0, #1
 8004fb4:	f7fe fb9e 	bl	80036f4 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8004fb8:	2000      	movs	r0, #0
 8004fba:	f7fe fb7d 	bl	80036b8 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8004fbe:	2130      	movs	r1, #48	; 0x30
 8004fc0:	2041      	movs	r0, #65	; 0x41
 8004fc2:	f7fe fb97 	bl	80036f4 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 8004fc6:	2001      	movs	r0, #1
 8004fc8:	f7fe fb76 	bl	80036b8 <I2C_SOUND_ChangePage>
//		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004fcc:	193b      	adds	r3, r7, r4
 8004fce:	881a      	ldrh	r2, [r3, #0]
 8004fd0:	0039      	movs	r1, r7
 8004fd2:	4b16      	ldr	r3, [pc, #88]	; (800502c <squeak_triple+0x140>)
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f003 f853 	bl	8008080 <HAL_I2S_Transmit_DMA>
		HAL_Delay(100);
 8004fda:	2064      	movs	r0, #100	; 0x64
 8004fdc:	f000 fd32 	bl	8005a44 <HAL_Delay>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004fe0:	193b      	adds	r3, r7, r4
 8004fe2:	881a      	ldrh	r2, [r3, #0]
 8004fe4:	0039      	movs	r1, r7
 8004fe6:	4b11      	ldr	r3, [pc, #68]	; (800502c <squeak_triple+0x140>)
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f003 f849 	bl	8008080 <HAL_I2S_Transmit_DMA>
		HAL_Delay(100);
 8004fee:	2064      	movs	r0, #100	; 0x64
 8004ff0:	f000 fd28 	bl	8005a44 <HAL_Delay>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8004ff4:	193b      	adds	r3, r7, r4
 8004ff6:	881a      	ldrh	r2, [r3, #0]
 8004ff8:	0039      	movs	r1, r7
 8004ffa:	4b0c      	ldr	r3, [pc, #48]	; (800502c <squeak_triple+0x140>)
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f003 f83f 	bl	8008080 <HAL_I2S_Transmit_DMA>
//		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	46bd      	mov	sp, r7
 8005006:	4b0a      	ldr	r3, [pc, #40]	; (8005030 <squeak_triple+0x144>)
 8005008:	449d      	add	sp, r3
 800500a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800500c:	ffffefec 	.word	0xffffefec
 8005010:	0000100c 	.word	0x0000100c
 8005014:	0000100e 	.word	0x0000100e
 8005018:	59d5433b 	.word	0x59d5433b
 800501c:	4083a28c 	.word	0x4083a28c
 8005020:	40dfffc0 	.word	0x40dfffc0
 8005024:	ffffeff0 	.word	0xffffeff0
 8005028:	00001010 	.word	0x00001010
 800502c:	20000378 	.word	0x20000378
 8005030:	00001014 	.word	0x00001014

08005034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005038:	46c0      	nop			; (mov r8, r8)
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005046:	4b11      	ldr	r3, [pc, #68]	; (800508c <HAL_MspInit+0x4c>)
 8005048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800504a:	4b10      	ldr	r3, [pc, #64]	; (800508c <HAL_MspInit+0x4c>)
 800504c:	2101      	movs	r1, #1
 800504e:	430a      	orrs	r2, r1
 8005050:	641a      	str	r2, [r3, #64]	; 0x40
 8005052:	4b0e      	ldr	r3, [pc, #56]	; (800508c <HAL_MspInit+0x4c>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	2201      	movs	r2, #1
 8005058:	4013      	ands	r3, r2
 800505a:	607b      	str	r3, [r7, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800505e:	4b0b      	ldr	r3, [pc, #44]	; (800508c <HAL_MspInit+0x4c>)
 8005060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005062:	4b0a      	ldr	r3, [pc, #40]	; (800508c <HAL_MspInit+0x4c>)
 8005064:	2180      	movs	r1, #128	; 0x80
 8005066:	0549      	lsls	r1, r1, #21
 8005068:	430a      	orrs	r2, r1
 800506a:	63da      	str	r2, [r3, #60]	; 0x3c
 800506c:	4b07      	ldr	r3, [pc, #28]	; (800508c <HAL_MspInit+0x4c>)
 800506e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	055b      	lsls	r3, r3, #21
 8005074:	4013      	ands	r3, r2
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800507a:	2380      	movs	r3, #128	; 0x80
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	0018      	movs	r0, r3
 8005080:	f000 fd04 	bl	8005a8c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005084:	46c0      	nop			; (mov r8, r8)
 8005086:	46bd      	mov	sp, r7
 8005088:	b002      	add	sp, #8
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40021000 	.word	0x40021000

08005090 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8005090:	b590      	push	{r4, r7, lr}
 8005092:	b089      	sub	sp, #36	; 0x24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005098:	240c      	movs	r4, #12
 800509a:	193b      	adds	r3, r7, r4
 800509c:	0018      	movs	r0, r3
 800509e:	2314      	movs	r3, #20
 80050a0:	001a      	movs	r2, r3
 80050a2:	2100      	movs	r1, #0
 80050a4:	f008 fc9e 	bl	800d9e4 <memset>
  if(hcomp->Instance==COMP1)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a10      	ldr	r2, [pc, #64]	; (80050f0 <HAL_COMP_MspInit+0x60>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d11a      	bne.n	80050e8 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050b2:	4b10      	ldr	r3, [pc, #64]	; (80050f4 <HAL_COMP_MspInit+0x64>)
 80050b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <HAL_COMP_MspInit+0x64>)
 80050b8:	2102      	movs	r1, #2
 80050ba:	430a      	orrs	r2, r1
 80050bc:	635a      	str	r2, [r3, #52]	; 0x34
 80050be:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <HAL_COMP_MspInit+0x64>)
 80050c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c2:	2202      	movs	r2, #2
 80050c4:	4013      	ands	r3, r2
 80050c6:	60bb      	str	r3, [r7, #8]
 80050c8:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80050ca:	193b      	adds	r3, r7, r4
 80050cc:	2204      	movs	r2, #4
 80050ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050d0:	193b      	adds	r3, r7, r4
 80050d2:	2203      	movs	r2, #3
 80050d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d6:	193b      	adds	r3, r7, r4
 80050d8:	2200      	movs	r2, #0
 80050da:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050dc:	193b      	adds	r3, r7, r4
 80050de:	4a06      	ldr	r2, [pc, #24]	; (80050f8 <HAL_COMP_MspInit+0x68>)
 80050e0:	0019      	movs	r1, r3
 80050e2:	0010      	movs	r0, r2
 80050e4:	f001 faee 	bl	80066c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 80050e8:	46c0      	nop			; (mov r8, r8)
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b009      	add	sp, #36	; 0x24
 80050ee:	bd90      	pop	{r4, r7, pc}
 80050f0:	40010200 	.word	0x40010200
 80050f4:	40021000 	.word	0x40021000
 80050f8:	50000400 	.word	0x50000400

080050fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80050fc:	b590      	push	{r4, r7, lr}
 80050fe:	b08b      	sub	sp, #44	; 0x2c
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005104:	2414      	movs	r4, #20
 8005106:	193b      	adds	r3, r7, r4
 8005108:	0018      	movs	r0, r3
 800510a:	2314      	movs	r3, #20
 800510c:	001a      	movs	r2, r3
 800510e:	2100      	movs	r1, #0
 8005110:	f008 fc68 	bl	800d9e4 <memset>
  if(hi2c->Instance==I2C1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a20      	ldr	r2, [pc, #128]	; (800519c <HAL_I2C_MspInit+0xa0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d139      	bne.n	8005192 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800511e:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <HAL_I2C_MspInit+0xa4>)
 8005120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005122:	4b1f      	ldr	r3, [pc, #124]	; (80051a0 <HAL_I2C_MspInit+0xa4>)
 8005124:	2101      	movs	r1, #1
 8005126:	430a      	orrs	r2, r1
 8005128:	635a      	str	r2, [r3, #52]	; 0x34
 800512a:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <HAL_I2C_MspInit+0xa4>)
 800512c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512e:	2201      	movs	r2, #1
 8005130:	4013      	ands	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005136:	193b      	adds	r3, r7, r4
 8005138:	22c0      	movs	r2, #192	; 0xc0
 800513a:	00d2      	lsls	r2, r2, #3
 800513c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800513e:	0021      	movs	r1, r4
 8005140:	187b      	adds	r3, r7, r1
 8005142:	2212      	movs	r2, #18
 8005144:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005146:	187b      	adds	r3, r7, r1
 8005148:	2201      	movs	r2, #1
 800514a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514c:	187b      	adds	r3, r7, r1
 800514e:	2200      	movs	r2, #0
 8005150:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8005152:	187b      	adds	r3, r7, r1
 8005154:	2206      	movs	r2, #6
 8005156:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005158:	187a      	adds	r2, r7, r1
 800515a:	23a0      	movs	r3, #160	; 0xa0
 800515c:	05db      	lsls	r3, r3, #23
 800515e:	0011      	movs	r1, r2
 8005160:	0018      	movs	r0, r3
 8005162:	f001 faaf 	bl	80066c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005166:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <HAL_I2C_MspInit+0xa4>)
 8005168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800516a:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <HAL_I2C_MspInit+0xa4>)
 800516c:	2180      	movs	r1, #128	; 0x80
 800516e:	0389      	lsls	r1, r1, #14
 8005170:	430a      	orrs	r2, r1
 8005172:	63da      	str	r2, [r3, #60]	; 0x3c
 8005174:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <HAL_I2C_MspInit+0xa4>)
 8005176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005178:	2380      	movs	r3, #128	; 0x80
 800517a:	039b      	lsls	r3, r3, #14
 800517c:	4013      	ands	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8005182:	2200      	movs	r2, #0
 8005184:	2100      	movs	r1, #0
 8005186:	2017      	movs	r0, #23
 8005188:	f000 ffa2 	bl	80060d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800518c:	2017      	movs	r0, #23
 800518e:	f000 ffb4 	bl	80060fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	46bd      	mov	sp, r7
 8005196:	b00b      	add	sp, #44	; 0x2c
 8005198:	bd90      	pop	{r4, r7, pc}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	40005400 	.word	0x40005400
 80051a0:	40021000 	.word	0x40021000

080051a4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80051a4:	b590      	push	{r4, r7, lr}
 80051a6:	b08b      	sub	sp, #44	; 0x2c
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ac:	2414      	movs	r4, #20
 80051ae:	193b      	adds	r3, r7, r4
 80051b0:	0018      	movs	r0, r3
 80051b2:	2314      	movs	r3, #20
 80051b4:	001a      	movs	r2, r3
 80051b6:	2100      	movs	r1, #0
 80051b8:	f008 fc14 	bl	800d9e4 <memset>
  if(hi2s->Instance==SPI1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a47      	ldr	r2, [pc, #284]	; (80052e0 <HAL_I2S_MspInit+0x13c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d000      	beq.n	80051c8 <HAL_I2S_MspInit+0x24>
 80051c6:	e086      	b.n	80052d6 <HAL_I2S_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80051c8:	4b46      	ldr	r3, [pc, #280]	; (80052e4 <HAL_I2S_MspInit+0x140>)
 80051ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051cc:	4b45      	ldr	r3, [pc, #276]	; (80052e4 <HAL_I2S_MspInit+0x140>)
 80051ce:	2180      	movs	r1, #128	; 0x80
 80051d0:	0149      	lsls	r1, r1, #5
 80051d2:	430a      	orrs	r2, r1
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40
 80051d6:	4b43      	ldr	r3, [pc, #268]	; (80052e4 <HAL_I2S_MspInit+0x140>)
 80051d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	015b      	lsls	r3, r3, #5
 80051de:	4013      	ands	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051e4:	4b3f      	ldr	r3, [pc, #252]	; (80052e4 <HAL_I2S_MspInit+0x140>)
 80051e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051e8:	4b3e      	ldr	r3, [pc, #248]	; (80052e4 <HAL_I2S_MspInit+0x140>)
 80051ea:	2101      	movs	r1, #1
 80051ec:	430a      	orrs	r2, r1
 80051ee:	635a      	str	r2, [r3, #52]	; 0x34
 80051f0:	4b3c      	ldr	r3, [pc, #240]	; (80052e4 <HAL_I2S_MspInit+0x140>)
 80051f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f4:	2201      	movs	r2, #1
 80051f6:	4013      	ands	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051fc:	4b39      	ldr	r3, [pc, #228]	; (80052e4 <HAL_I2S_MspInit+0x140>)
 80051fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005200:	4b38      	ldr	r3, [pc, #224]	; (80052e4 <HAL_I2S_MspInit+0x140>)
 8005202:	2102      	movs	r1, #2
 8005204:	430a      	orrs	r2, r1
 8005206:	635a      	str	r2, [r3, #52]	; 0x34
 8005208:	4b36      	ldr	r3, [pc, #216]	; (80052e4 <HAL_I2S_MspInit+0x140>)
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	2202      	movs	r2, #2
 800520e:	4013      	ands	r3, r2
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005214:	193b      	adds	r3, r7, r4
 8005216:	2280      	movs	r2, #128	; 0x80
 8005218:	0212      	lsls	r2, r2, #8
 800521a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521c:	193b      	adds	r3, r7, r4
 800521e:	2202      	movs	r2, #2
 8005220:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005222:	193b      	adds	r3, r7, r4
 8005224:	2200      	movs	r2, #0
 8005226:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005228:	193b      	adds	r3, r7, r4
 800522a:	2200      	movs	r2, #0
 800522c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800522e:	193b      	adds	r3, r7, r4
 8005230:	2200      	movs	r2, #0
 8005232:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005234:	193a      	adds	r2, r7, r4
 8005236:	23a0      	movs	r3, #160	; 0xa0
 8005238:	05db      	lsls	r3, r3, #23
 800523a:	0011      	movs	r1, r2
 800523c:	0018      	movs	r0, r3
 800523e:	f001 fa41 	bl	80066c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005242:	0021      	movs	r1, r4
 8005244:	187b      	adds	r3, r7, r1
 8005246:	2238      	movs	r2, #56	; 0x38
 8005248:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800524a:	187b      	adds	r3, r7, r1
 800524c:	2202      	movs	r2, #2
 800524e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005250:	187b      	adds	r3, r7, r1
 8005252:	2200      	movs	r2, #0
 8005254:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005256:	187b      	adds	r3, r7, r1
 8005258:	2200      	movs	r2, #0
 800525a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800525c:	187b      	adds	r3, r7, r1
 800525e:	2200      	movs	r2, #0
 8005260:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005262:	187b      	adds	r3, r7, r1
 8005264:	4a20      	ldr	r2, [pc, #128]	; (80052e8 <HAL_I2S_MspInit+0x144>)
 8005266:	0019      	movs	r1, r3
 8005268:	0010      	movs	r0, r2
 800526a:	f001 fa2b 	bl	80066c4 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 800526e:	4b1f      	ldr	r3, [pc, #124]	; (80052ec <HAL_I2S_MspInit+0x148>)
 8005270:	4a1f      	ldr	r2, [pc, #124]	; (80052f0 <HAL_I2S_MspInit+0x14c>)
 8005272:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8005274:	4b1d      	ldr	r3, [pc, #116]	; (80052ec <HAL_I2S_MspInit+0x148>)
 8005276:	2211      	movs	r2, #17
 8005278:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800527a:	4b1c      	ldr	r3, [pc, #112]	; (80052ec <HAL_I2S_MspInit+0x148>)
 800527c:	2210      	movs	r2, #16
 800527e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005280:	4b1a      	ldr	r3, [pc, #104]	; (80052ec <HAL_I2S_MspInit+0x148>)
 8005282:	2200      	movs	r2, #0
 8005284:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005286:	4b19      	ldr	r3, [pc, #100]	; (80052ec <HAL_I2S_MspInit+0x148>)
 8005288:	2280      	movs	r2, #128	; 0x80
 800528a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800528c:	4b17      	ldr	r3, [pc, #92]	; (80052ec <HAL_I2S_MspInit+0x148>)
 800528e:	2280      	movs	r2, #128	; 0x80
 8005290:	0052      	lsls	r2, r2, #1
 8005292:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005294:	4b15      	ldr	r3, [pc, #84]	; (80052ec <HAL_I2S_MspInit+0x148>)
 8005296:	2280      	movs	r2, #128	; 0x80
 8005298:	00d2      	lsls	r2, r2, #3
 800529a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800529c:	4b13      	ldr	r3, [pc, #76]	; (80052ec <HAL_I2S_MspInit+0x148>)
 800529e:	2200      	movs	r2, #0
 80052a0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80052a2:	4b12      	ldr	r3, [pc, #72]	; (80052ec <HAL_I2S_MspInit+0x148>)
 80052a4:	22c0      	movs	r2, #192	; 0xc0
 80052a6:	0192      	lsls	r2, r2, #6
 80052a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80052aa:	4b10      	ldr	r3, [pc, #64]	; (80052ec <HAL_I2S_MspInit+0x148>)
 80052ac:	0018      	movs	r0, r3
 80052ae:	f000 ff41 	bl	8006134 <HAL_DMA_Init>
 80052b2:	1e03      	subs	r3, r0, #0
 80052b4:	d001      	beq.n	80052ba <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 80052b6:	f7ff febd 	bl	8005034 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a0b      	ldr	r2, [pc, #44]	; (80052ec <HAL_I2S_MspInit+0x148>)
 80052be:	62da      	str	r2, [r3, #44]	; 0x2c
 80052c0:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <HAL_I2S_MspInit+0x148>)
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80052c6:	2200      	movs	r2, #0
 80052c8:	2100      	movs	r1, #0
 80052ca:	2019      	movs	r0, #25
 80052cc:	f000 ff00 	bl	80060d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80052d0:	2019      	movs	r0, #25
 80052d2:	f000 ff12 	bl	80060fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	46bd      	mov	sp, r7
 80052da:	b00b      	add	sp, #44	; 0x2c
 80052dc:	bd90      	pop	{r4, r7, pc}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	40013000 	.word	0x40013000
 80052e4:	40021000 	.word	0x40021000
 80052e8:	50000400 	.word	0x50000400
 80052ec:	200004a0 	.word	0x200004a0
 80052f0:	40020008 	.word	0x40020008

080052f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80052f4:	b590      	push	{r4, r7, lr}
 80052f6:	b08b      	sub	sp, #44	; 0x2c
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052fc:	2414      	movs	r4, #20
 80052fe:	193b      	adds	r3, r7, r4
 8005300:	0018      	movs	r0, r3
 8005302:	2314      	movs	r3, #20
 8005304:	001a      	movs	r2, r3
 8005306:	2100      	movs	r1, #0
 8005308:	f008 fb6c 	bl	800d9e4 <memset>
  if(hspi->Instance==SPI2)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a54      	ldr	r2, [pc, #336]	; (8005464 <HAL_SPI_MspInit+0x170>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d000      	beq.n	8005318 <HAL_SPI_MspInit+0x24>
 8005316:	e0a0      	b.n	800545a <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005318:	4b53      	ldr	r3, [pc, #332]	; (8005468 <HAL_SPI_MspInit+0x174>)
 800531a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800531c:	4b52      	ldr	r3, [pc, #328]	; (8005468 <HAL_SPI_MspInit+0x174>)
 800531e:	2180      	movs	r1, #128	; 0x80
 8005320:	01c9      	lsls	r1, r1, #7
 8005322:	430a      	orrs	r2, r1
 8005324:	63da      	str	r2, [r3, #60]	; 0x3c
 8005326:	4b50      	ldr	r3, [pc, #320]	; (8005468 <HAL_SPI_MspInit+0x174>)
 8005328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800532a:	2380      	movs	r3, #128	; 0x80
 800532c:	01db      	lsls	r3, r3, #7
 800532e:	4013      	ands	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005334:	4b4c      	ldr	r3, [pc, #304]	; (8005468 <HAL_SPI_MspInit+0x174>)
 8005336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005338:	4b4b      	ldr	r3, [pc, #300]	; (8005468 <HAL_SPI_MspInit+0x174>)
 800533a:	2102      	movs	r1, #2
 800533c:	430a      	orrs	r2, r1
 800533e:	635a      	str	r2, [r3, #52]	; 0x34
 8005340:	4b49      	ldr	r3, [pc, #292]	; (8005468 <HAL_SPI_MspInit+0x174>)
 8005342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005344:	2202      	movs	r2, #2
 8005346:	4013      	ands	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800534c:	193b      	adds	r3, r7, r4
 800534e:	2240      	movs	r2, #64	; 0x40
 8005350:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005352:	193b      	adds	r3, r7, r4
 8005354:	2202      	movs	r2, #2
 8005356:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005358:	193b      	adds	r3, r7, r4
 800535a:	2200      	movs	r2, #0
 800535c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800535e:	193b      	adds	r3, r7, r4
 8005360:	2200      	movs	r2, #0
 8005362:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8005364:	193b      	adds	r3, r7, r4
 8005366:	2204      	movs	r2, #4
 8005368:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800536a:	193b      	adds	r3, r7, r4
 800536c:	4a3f      	ldr	r2, [pc, #252]	; (800546c <HAL_SPI_MspInit+0x178>)
 800536e:	0019      	movs	r1, r3
 8005370:	0010      	movs	r0, r2
 8005372:	f001 f9a7 	bl	80066c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8005376:	0021      	movs	r1, r4
 8005378:	187b      	adds	r3, r7, r1
 800537a:	22c0      	movs	r2, #192	; 0xc0
 800537c:	0052      	lsls	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005380:	187b      	adds	r3, r7, r1
 8005382:	2202      	movs	r2, #2
 8005384:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005386:	187b      	adds	r3, r7, r1
 8005388:	2200      	movs	r2, #0
 800538a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800538c:	187b      	adds	r3, r7, r1
 800538e:	2200      	movs	r2, #0
 8005390:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8005392:	187b      	adds	r3, r7, r1
 8005394:	2201      	movs	r2, #1
 8005396:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005398:	187b      	adds	r3, r7, r1
 800539a:	4a34      	ldr	r2, [pc, #208]	; (800546c <HAL_SPI_MspInit+0x178>)
 800539c:	0019      	movs	r1, r3
 800539e:	0010      	movs	r0, r2
 80053a0:	f001 f990 	bl	80066c4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 80053a4:	4b32      	ldr	r3, [pc, #200]	; (8005470 <HAL_SPI_MspInit+0x17c>)
 80053a6:	4a33      	ldr	r2, [pc, #204]	; (8005474 <HAL_SPI_MspInit+0x180>)
 80053a8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80053aa:	4b31      	ldr	r3, [pc, #196]	; (8005470 <HAL_SPI_MspInit+0x17c>)
 80053ac:	2212      	movs	r2, #18
 80053ae:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053b0:	4b2f      	ldr	r3, [pc, #188]	; (8005470 <HAL_SPI_MspInit+0x17c>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053b6:	4b2e      	ldr	r3, [pc, #184]	; (8005470 <HAL_SPI_MspInit+0x17c>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053bc:	4b2c      	ldr	r3, [pc, #176]	; (8005470 <HAL_SPI_MspInit+0x17c>)
 80053be:	2280      	movs	r2, #128	; 0x80
 80053c0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053c2:	4b2b      	ldr	r3, [pc, #172]	; (8005470 <HAL_SPI_MspInit+0x17c>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053c8:	4b29      	ldr	r3, [pc, #164]	; (8005470 <HAL_SPI_MspInit+0x17c>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80053ce:	4b28      	ldr	r3, [pc, #160]	; (8005470 <HAL_SPI_MspInit+0x17c>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80053d4:	4b26      	ldr	r3, [pc, #152]	; (8005470 <HAL_SPI_MspInit+0x17c>)
 80053d6:	2280      	movs	r2, #128	; 0x80
 80053d8:	0192      	lsls	r2, r2, #6
 80053da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80053dc:	4b24      	ldr	r3, [pc, #144]	; (8005470 <HAL_SPI_MspInit+0x17c>)
 80053de:	0018      	movs	r0, r3
 80053e0:	f000 fea8 	bl	8006134 <HAL_DMA_Init>
 80053e4:	1e03      	subs	r3, r0, #0
 80053e6:	d001      	beq.n	80053ec <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 80053e8:	f7ff fe24 	bl	8005034 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a20      	ldr	r2, [pc, #128]	; (8005470 <HAL_SPI_MspInit+0x17c>)
 80053f0:	659a      	str	r2, [r3, #88]	; 0x58
 80053f2:	4b1f      	ldr	r3, [pc, #124]	; (8005470 <HAL_SPI_MspInit+0x17c>)
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 80053f8:	4b1f      	ldr	r3, [pc, #124]	; (8005478 <HAL_SPI_MspInit+0x184>)
 80053fa:	4a20      	ldr	r2, [pc, #128]	; (800547c <HAL_SPI_MspInit+0x188>)
 80053fc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80053fe:	4b1e      	ldr	r3, [pc, #120]	; (8005478 <HAL_SPI_MspInit+0x184>)
 8005400:	2213      	movs	r2, #19
 8005402:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005404:	4b1c      	ldr	r3, [pc, #112]	; (8005478 <HAL_SPI_MspInit+0x184>)
 8005406:	2210      	movs	r2, #16
 8005408:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800540a:	4b1b      	ldr	r3, [pc, #108]	; (8005478 <HAL_SPI_MspInit+0x184>)
 800540c:	2200      	movs	r2, #0
 800540e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005410:	4b19      	ldr	r3, [pc, #100]	; (8005478 <HAL_SPI_MspInit+0x184>)
 8005412:	2280      	movs	r2, #128	; 0x80
 8005414:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005416:	4b18      	ldr	r3, [pc, #96]	; (8005478 <HAL_SPI_MspInit+0x184>)
 8005418:	2200      	movs	r2, #0
 800541a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800541c:	4b16      	ldr	r3, [pc, #88]	; (8005478 <HAL_SPI_MspInit+0x184>)
 800541e:	2200      	movs	r2, #0
 8005420:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005422:	4b15      	ldr	r3, [pc, #84]	; (8005478 <HAL_SPI_MspInit+0x184>)
 8005424:	2200      	movs	r2, #0
 8005426:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005428:	4b13      	ldr	r3, [pc, #76]	; (8005478 <HAL_SPI_MspInit+0x184>)
 800542a:	2200      	movs	r2, #0
 800542c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800542e:	4b12      	ldr	r3, [pc, #72]	; (8005478 <HAL_SPI_MspInit+0x184>)
 8005430:	0018      	movs	r0, r3
 8005432:	f000 fe7f 	bl	8006134 <HAL_DMA_Init>
 8005436:	1e03      	subs	r3, r0, #0
 8005438:	d001      	beq.n	800543e <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 800543a:	f7ff fdfb 	bl	8005034 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a0d      	ldr	r2, [pc, #52]	; (8005478 <HAL_SPI_MspInit+0x184>)
 8005442:	655a      	str	r2, [r3, #84]	; 0x54
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <HAL_SPI_MspInit+0x184>)
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800544a:	2200      	movs	r2, #0
 800544c:	2100      	movs	r1, #0
 800544e:	201a      	movs	r0, #26
 8005450:	f000 fe3e 	bl	80060d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005454:	201a      	movs	r0, #26
 8005456:	f000 fe50 	bl	80060fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	46bd      	mov	sp, r7
 800545e:	b00b      	add	sp, #44	; 0x2c
 8005460:	bd90      	pop	{r4, r7, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	40003800 	.word	0x40003800
 8005468:	40021000 	.word	0x40021000
 800546c:	50000400 	.word	0x50000400
 8005470:	20000198 	.word	0x20000198
 8005474:	4002001c 	.word	0x4002001c
 8005478:	20000440 	.word	0x20000440
 800547c:	40020030 	.word	0x40020030

08005480 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <HAL_TIM_Base_MspInit+0x38>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d10d      	bne.n	80054ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005492:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <HAL_TIM_Base_MspInit+0x3c>)
 8005494:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005496:	4b09      	ldr	r3, [pc, #36]	; (80054bc <HAL_TIM_Base_MspInit+0x3c>)
 8005498:	2180      	movs	r1, #128	; 0x80
 800549a:	0109      	lsls	r1, r1, #4
 800549c:	430a      	orrs	r2, r1
 800549e:	641a      	str	r2, [r3, #64]	; 0x40
 80054a0:	4b06      	ldr	r3, [pc, #24]	; (80054bc <HAL_TIM_Base_MspInit+0x3c>)
 80054a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054a4:	2380      	movs	r3, #128	; 0x80
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	4013      	ands	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80054ae:	46c0      	nop			; (mov r8, r8)
 80054b0:	46bd      	mov	sp, r7
 80054b2:	b004      	add	sp, #16
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	40012c00 	.word	0x40012c00
 80054bc:	40021000 	.word	0x40021000

080054c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80054c0:	b590      	push	{r4, r7, lr}
 80054c2:	b089      	sub	sp, #36	; 0x24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c8:	240c      	movs	r4, #12
 80054ca:	193b      	adds	r3, r7, r4
 80054cc:	0018      	movs	r0, r3
 80054ce:	2314      	movs	r3, #20
 80054d0:	001a      	movs	r2, r3
 80054d2:	2100      	movs	r1, #0
 80054d4:	f008 fa86 	bl	800d9e4 <memset>
  if(htim->Instance==TIM1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a15      	ldr	r2, [pc, #84]	; (8005534 <HAL_TIM_MspPostInit+0x74>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d123      	bne.n	800552a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <HAL_TIM_MspPostInit+0x78>)
 80054e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e6:	4b14      	ldr	r3, [pc, #80]	; (8005538 <HAL_TIM_MspPostInit+0x78>)
 80054e8:	2101      	movs	r1, #1
 80054ea:	430a      	orrs	r2, r1
 80054ec:	635a      	str	r2, [r3, #52]	; 0x34
 80054ee:	4b12      	ldr	r3, [pc, #72]	; (8005538 <HAL_TIM_MspPostInit+0x78>)
 80054f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f2:	2201      	movs	r2, #1
 80054f4:	4013      	ands	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]
 80054f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80054fa:	193b      	adds	r3, r7, r4
 80054fc:	2280      	movs	r2, #128	; 0x80
 80054fe:	0052      	lsls	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005502:	0021      	movs	r1, r4
 8005504:	187b      	adds	r3, r7, r1
 8005506:	2202      	movs	r2, #2
 8005508:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800550a:	187b      	adds	r3, r7, r1
 800550c:	2202      	movs	r2, #2
 800550e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005510:	187b      	adds	r3, r7, r1
 8005512:	2203      	movs	r2, #3
 8005514:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005516:	187b      	adds	r3, r7, r1
 8005518:	2202      	movs	r2, #2
 800551a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800551c:	187a      	adds	r2, r7, r1
 800551e:	23a0      	movs	r3, #160	; 0xa0
 8005520:	05db      	lsls	r3, r3, #23
 8005522:	0011      	movs	r1, r2
 8005524:	0018      	movs	r0, r3
 8005526:	f001 f8cd 	bl	80066c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	46bd      	mov	sp, r7
 800552e:	b009      	add	sp, #36	; 0x24
 8005530:	bd90      	pop	{r4, r7, pc}
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	40012c00 	.word	0x40012c00
 8005538:	40021000 	.word	0x40021000

0800553c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800553c:	b590      	push	{r4, r7, lr}
 800553e:	b08b      	sub	sp, #44	; 0x2c
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005544:	2414      	movs	r4, #20
 8005546:	193b      	adds	r3, r7, r4
 8005548:	0018      	movs	r0, r3
 800554a:	2314      	movs	r3, #20
 800554c:	001a      	movs	r2, r3
 800554e:	2100      	movs	r1, #0
 8005550:	f008 fa48 	bl	800d9e4 <memset>
  if(husart->Instance==USART3)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a45      	ldr	r2, [pc, #276]	; (8005670 <HAL_USART_MspInit+0x134>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d000      	beq.n	8005560 <HAL_USART_MspInit+0x24>
 800555e:	e083      	b.n	8005668 <HAL_USART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005560:	4b44      	ldr	r3, [pc, #272]	; (8005674 <HAL_USART_MspInit+0x138>)
 8005562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005564:	4b43      	ldr	r3, [pc, #268]	; (8005674 <HAL_USART_MspInit+0x138>)
 8005566:	2180      	movs	r1, #128	; 0x80
 8005568:	02c9      	lsls	r1, r1, #11
 800556a:	430a      	orrs	r2, r1
 800556c:	63da      	str	r2, [r3, #60]	; 0x3c
 800556e:	4b41      	ldr	r3, [pc, #260]	; (8005674 <HAL_USART_MspInit+0x138>)
 8005570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005572:	2380      	movs	r3, #128	; 0x80
 8005574:	02db      	lsls	r3, r3, #11
 8005576:	4013      	ands	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800557c:	4b3d      	ldr	r3, [pc, #244]	; (8005674 <HAL_USART_MspInit+0x138>)
 800557e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005580:	4b3c      	ldr	r3, [pc, #240]	; (8005674 <HAL_USART_MspInit+0x138>)
 8005582:	2101      	movs	r1, #1
 8005584:	430a      	orrs	r2, r1
 8005586:	635a      	str	r2, [r3, #52]	; 0x34
 8005588:	4b3a      	ldr	r3, [pc, #232]	; (8005674 <HAL_USART_MspInit+0x138>)
 800558a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558c:	2201      	movs	r2, #1
 800558e:	4013      	ands	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005594:	4b37      	ldr	r3, [pc, #220]	; (8005674 <HAL_USART_MspInit+0x138>)
 8005596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005598:	4b36      	ldr	r3, [pc, #216]	; (8005674 <HAL_USART_MspInit+0x138>)
 800559a:	2102      	movs	r1, #2
 800559c:	430a      	orrs	r2, r1
 800559e:	635a      	str	r2, [r3, #52]	; 0x34
 80055a0:	4b34      	ldr	r3, [pc, #208]	; (8005674 <HAL_USART_MspInit+0x138>)
 80055a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a4:	2202      	movs	r2, #2
 80055a6:	4013      	ands	r3, r2
 80055a8:	60bb      	str	r3, [r7, #8]
 80055aa:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80055ac:	193b      	adds	r3, r7, r4
 80055ae:	2220      	movs	r2, #32
 80055b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055b2:	193b      	adds	r3, r7, r4
 80055b4:	2202      	movs	r2, #2
 80055b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b8:	193b      	adds	r3, r7, r4
 80055ba:	2200      	movs	r2, #0
 80055bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055be:	193b      	adds	r3, r7, r4
 80055c0:	2203      	movs	r2, #3
 80055c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80055c4:	193b      	adds	r3, r7, r4
 80055c6:	2204      	movs	r2, #4
 80055c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ca:	193a      	adds	r2, r7, r4
 80055cc:	23a0      	movs	r3, #160	; 0xa0
 80055ce:	05db      	lsls	r3, r3, #23
 80055d0:	0011      	movs	r1, r2
 80055d2:	0018      	movs	r0, r3
 80055d4:	f001 f876 	bl	80066c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80055d8:	0021      	movs	r1, r4
 80055da:	187b      	adds	r3, r7, r1
 80055dc:	2203      	movs	r2, #3
 80055de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e0:	187b      	adds	r3, r7, r1
 80055e2:	2202      	movs	r2, #2
 80055e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e6:	187b      	adds	r3, r7, r1
 80055e8:	2200      	movs	r2, #0
 80055ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055ec:	187b      	adds	r3, r7, r1
 80055ee:	2203      	movs	r2, #3
 80055f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80055f2:	187b      	adds	r3, r7, r1
 80055f4:	2204      	movs	r2, #4
 80055f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055f8:	187b      	adds	r3, r7, r1
 80055fa:	4a1f      	ldr	r2, [pc, #124]	; (8005678 <HAL_USART_MspInit+0x13c>)
 80055fc:	0019      	movs	r1, r3
 80055fe:	0010      	movs	r0, r2
 8005600:	f001 f860 	bl	80066c4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8005604:	4b1d      	ldr	r3, [pc, #116]	; (800567c <HAL_USART_MspInit+0x140>)
 8005606:	4a1e      	ldr	r2, [pc, #120]	; (8005680 <HAL_USART_MspInit+0x144>)
 8005608:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800560a:	4b1c      	ldr	r3, [pc, #112]	; (800567c <HAL_USART_MspInit+0x140>)
 800560c:	2237      	movs	r2, #55	; 0x37
 800560e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005610:	4b1a      	ldr	r3, [pc, #104]	; (800567c <HAL_USART_MspInit+0x140>)
 8005612:	2210      	movs	r2, #16
 8005614:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005616:	4b19      	ldr	r3, [pc, #100]	; (800567c <HAL_USART_MspInit+0x140>)
 8005618:	2200      	movs	r2, #0
 800561a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800561c:	4b17      	ldr	r3, [pc, #92]	; (800567c <HAL_USART_MspInit+0x140>)
 800561e:	2280      	movs	r2, #128	; 0x80
 8005620:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005622:	4b16      	ldr	r3, [pc, #88]	; (800567c <HAL_USART_MspInit+0x140>)
 8005624:	2200      	movs	r2, #0
 8005626:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005628:	4b14      	ldr	r3, [pc, #80]	; (800567c <HAL_USART_MspInit+0x140>)
 800562a:	2200      	movs	r2, #0
 800562c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800562e:	4b13      	ldr	r3, [pc, #76]	; (800567c <HAL_USART_MspInit+0x140>)
 8005630:	2200      	movs	r2, #0
 8005632:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005634:	4b11      	ldr	r3, [pc, #68]	; (800567c <HAL_USART_MspInit+0x140>)
 8005636:	2280      	movs	r2, #128	; 0x80
 8005638:	0192      	lsls	r2, r2, #6
 800563a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800563c:	4b0f      	ldr	r3, [pc, #60]	; (800567c <HAL_USART_MspInit+0x140>)
 800563e:	0018      	movs	r0, r3
 8005640:	f000 fd78 	bl	8006134 <HAL_DMA_Init>
 8005644:	1e03      	subs	r3, r0, #0
 8005646:	d001      	beq.n	800564c <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8005648:	f7ff fcf4 	bl	8005034 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a0b      	ldr	r2, [pc, #44]	; (800567c <HAL_USART_MspInit+0x140>)
 8005650:	651a      	str	r2, [r3, #80]	; 0x50
 8005652:	4b0a      	ldr	r3, [pc, #40]	; (800567c <HAL_USART_MspInit+0x140>)
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8005658:	2200      	movs	r2, #0
 800565a:	2100      	movs	r1, #0
 800565c:	201d      	movs	r0, #29
 800565e:	f000 fd37 	bl	80060d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8005662:	201d      	movs	r0, #29
 8005664:	f000 fd49 	bl	80060fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005668:	46c0      	nop			; (mov r8, r8)
 800566a:	46bd      	mov	sp, r7
 800566c:	b00b      	add	sp, #44	; 0x2c
 800566e:	bd90      	pop	{r4, r7, pc}
 8005670:	40004800 	.word	0x40004800
 8005674:	40021000 	.word	0x40021000
 8005678:	50000400 	.word	0x50000400
 800567c:	20000200 	.word	0x20000200
 8005680:	40020044 	.word	0x40020044

08005684 <LL_USART_IsActiveFlag_FE>:
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	2202      	movs	r2, #2
 8005692:	4013      	ands	r3, r2
 8005694:	2b02      	cmp	r3, #2
 8005696:	d101      	bne.n	800569c <LL_USART_IsActiveFlag_FE+0x18>
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <LL_USART_IsActiveFlag_FE+0x1a>
 800569c:	2300      	movs	r3, #0
}
 800569e:	0018      	movs	r0, r3
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b002      	add	sp, #8
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <LL_USART_IsActiveFlag_NE>:
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	2204      	movs	r2, #4
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d101      	bne.n	80056be <LL_USART_IsActiveFlag_NE+0x18>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <LL_USART_IsActiveFlag_NE+0x1a>
 80056be:	2300      	movs	r3, #0
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b002      	add	sp, #8
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <LL_USART_IsActiveFlag_ORE>:
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	2208      	movs	r2, #8
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b08      	cmp	r3, #8
 80056da:	d101      	bne.n	80056e0 <LL_USART_IsActiveFlag_ORE+0x18>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <LL_USART_IsActiveFlag_ORE+0x1a>
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	0018      	movs	r0, r3
 80056e4:	46bd      	mov	sp, r7
 80056e6:	b002      	add	sp, #8
 80056e8:	bd80      	pop	{r7, pc}

080056ea <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	2220      	movs	r2, #32
 80056f8:	4013      	ands	r3, r2
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d101      	bne.n	8005702 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8005702:	2300      	movs	r3, #0
}
 8005704:	0018      	movs	r0, r3
 8005706:	46bd      	mov	sp, r7
 8005708:	b002      	add	sp, #8
 800570a:	bd80      	pop	{r7, pc}

0800570c <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2220      	movs	r2, #32
 800571a:	4013      	ands	r3, r2
 800571c:	2b20      	cmp	r3, #32
 800571e:	d101      	bne.n	8005724 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8005720:	2301      	movs	r3, #1
 8005722:	e000      	b.n	8005726 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8005724:	2300      	movs	r3, #0
}
 8005726:	0018      	movs	r0, r3
 8005728:	46bd      	mov	sp, r7
 800572a:	b002      	add	sp, #8
 800572c:	bd80      	pop	{r7, pc}

0800572e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800573c:	e7fe      	b.n	800573c <HardFault_Handler+0x4>

0800573e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800574c:	46c0      	nop			; (mov r8, r8)
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005756:	f000 f959 	bl	8005a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005764:	4b03      	ldr	r3, [pc, #12]	; (8005774 <DMA1_Channel1_IRQHandler+0x14>)
 8005766:	0018      	movs	r0, r3
 8005768:	f000 fe5e 	bl	8006428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800576c:	46c0      	nop			; (mov r8, r8)
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	200004a0 	.word	0x200004a0

08005778 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800577e:	0018      	movs	r0, r3
 8005780:	f000 fe52 	bl	8006428 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005784:	4b04      	ldr	r3, [pc, #16]	; (8005798 <DMA1_Channel2_3_IRQHandler+0x20>)
 8005786:	0018      	movs	r0, r3
 8005788:	f000 fe4e 	bl	8006428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800578c:	46c0      	nop			; (mov r8, r8)
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	20000198 	.word	0x20000198
 8005798:	20000440 	.word	0x20000440

0800579c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80057a0:	4b03      	ldr	r3, [pc, #12]	; (80057b0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 80057a2:	0018      	movs	r0, r3
 80057a4:	f000 fe40 	bl	8006428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 80057a8:	46c0      	nop			; (mov r8, r8)
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	20000200 	.word	0x20000200

080057b4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80057b8:	4b09      	ldr	r3, [pc, #36]	; (80057e0 <I2C1_IRQHandler+0x2c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	23e0      	movs	r3, #224	; 0xe0
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4013      	ands	r3, r2
 80057c4:	d004      	beq.n	80057d0 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80057c6:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <I2C1_IRQHandler+0x2c>)
 80057c8:	0018      	movs	r0, r3
 80057ca:	f001 fa97 	bl	8006cfc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80057ce:	e003      	b.n	80057d8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80057d0:	4b03      	ldr	r3, [pc, #12]	; (80057e0 <I2C1_IRQHandler+0x2c>)
 80057d2:	0018      	movs	r0, r3
 80057d4:	f001 fa78 	bl	8006cc8 <HAL_I2C_EV_IRQHandler>
}
 80057d8:	46c0      	nop			; (mov r8, r8)
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	20000138 	.word	0x20000138

080057e4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 80057e8:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <SPI1_IRQHandler+0x14>)
 80057ea:	0018      	movs	r0, r3
 80057ec:	f002 fcf4 	bl	80081d8 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80057f0:	46c0      	nop			; (mov r8, r8)
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	46c0      	nop			; (mov r8, r8)
 80057f8:	20000378 	.word	0x20000378

080057fc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005800:	4b03      	ldr	r3, [pc, #12]	; (8005810 <SPI2_IRQHandler+0x14>)
 8005802:	0018      	movs	r0, r3
 8005804:	f005 f890 	bl	800a928 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005808:	46c0      	nop			; (mov r8, r8)
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	46c0      	nop			; (mov r8, r8)
 8005810:	200000b0 	.word	0x200000b0

08005814 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8005818:	4b25      	ldr	r3, [pc, #148]	; (80058b0 <USART2_IRQHandler+0x9c>)
 800581a:	6a1a      	ldr	r2, [r3, #32]
 800581c:	4b24      	ldr	r3, [pc, #144]	; (80058b0 <USART2_IRQHandler+0x9c>)
 800581e:	2108      	movs	r1, #8
 8005820:	430a      	orrs	r2, r1
 8005822:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8005824:	4b22      	ldr	r3, [pc, #136]	; (80058b0 <USART2_IRQHandler+0x9c>)
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <USART2_IRQHandler+0x9c>)
 800582a:	2102      	movs	r1, #2
 800582c:	430a      	orrs	r2, r1
 800582e:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8005830:	4b1f      	ldr	r3, [pc, #124]	; (80058b0 <USART2_IRQHandler+0x9c>)
 8005832:	6a1a      	ldr	r2, [r3, #32]
 8005834:	4b1e      	ldr	r3, [pc, #120]	; (80058b0 <USART2_IRQHandler+0x9c>)
 8005836:	2104      	movs	r1, #4
 8005838:	430a      	orrs	r2, r1
 800583a:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 800583c:	4b1c      	ldr	r3, [pc, #112]	; (80058b0 <USART2_IRQHandler+0x9c>)
 800583e:	0018      	movs	r0, r3
 8005840:	f7ff ff53 	bl	80056ea <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8005844:	1e03      	subs	r3, r0, #0
 8005846:	d009      	beq.n	800585c <USART2_IRQHandler+0x48>
 8005848:	4b19      	ldr	r3, [pc, #100]	; (80058b0 <USART2_IRQHandler+0x9c>)
 800584a:	0018      	movs	r0, r3
 800584c:	f7ff ff5e 	bl	800570c <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8005850:	1e03      	subs	r3, r0, #0
 8005852:	d003      	beq.n	800585c <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8005854:	f7fd fb3c 	bl	8002ed0 <USART2_RX_Callback>
	  {
 8005858:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800585a:	e025      	b.n	80058a8 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 800585c:	4b14      	ldr	r3, [pc, #80]	; (80058b0 <USART2_IRQHandler+0x9c>)
 800585e:	6a1a      	ldr	r2, [r3, #32]
 8005860:	4b13      	ldr	r3, [pc, #76]	; (80058b0 <USART2_IRQHandler+0x9c>)
 8005862:	2108      	movs	r1, #8
 8005864:	430a      	orrs	r2, r1
 8005866:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8005868:	4b11      	ldr	r3, [pc, #68]	; (80058b0 <USART2_IRQHandler+0x9c>)
 800586a:	0018      	movs	r0, r3
 800586c:	f7ff ff2c 	bl	80056c8 <LL_USART_IsActiveFlag_ORE>
 8005870:	1e03      	subs	r3, r0, #0
 8005872:	d008      	beq.n	8005886 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8005874:	4b0e      	ldr	r3, [pc, #56]	; (80058b0 <USART2_IRQHandler+0x9c>)
 8005876:	6a1a      	ldr	r2, [r3, #32]
 8005878:	4b0d      	ldr	r3, [pc, #52]	; (80058b0 <USART2_IRQHandler+0x9c>)
 800587a:	2108      	movs	r1, #8
 800587c:	430a      	orrs	r2, r1
 800587e:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8005880:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <USART2_IRQHandler+0x9c>)
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005884:	e010      	b.n	80058a8 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8005886:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <USART2_IRQHandler+0x9c>)
 8005888:	0018      	movs	r0, r3
 800588a:	f7ff fefb 	bl	8005684 <LL_USART_IsActiveFlag_FE>
 800588e:	1e03      	subs	r3, r0, #0
 8005890:	d002      	beq.n	8005898 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8005892:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <USART2_IRQHandler+0x9c>)
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005896:	e007      	b.n	80058a8 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8005898:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <USART2_IRQHandler+0x9c>)
 800589a:	0018      	movs	r0, r3
 800589c:	f7ff ff03 	bl	80056a6 <LL_USART_IsActiveFlag_NE>
 80058a0:	1e03      	subs	r3, r0, #0
 80058a2:	d001      	beq.n	80058a8 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 80058a4:	4b02      	ldr	r3, [pc, #8]	; (80058b0 <USART2_IRQHandler+0x9c>)
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80058a8:	46c0      	nop			; (mov r8, r8)
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	40004400 	.word	0x40004400

080058b4 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 80058b8:	4b03      	ldr	r3, [pc, #12]	; (80058c8 <USART3_4_LPUART1_IRQHandler+0x14>)
 80058ba:	0018      	movs	r0, r3
 80058bc:	f006 fed0 	bl	800c660 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 80058c0:	46c0      	nop			; (mov r8, r8)
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	2000029c 	.word	0x2000029c

080058cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80058d0:	4b03      	ldr	r3, [pc, #12]	; (80058e0 <SystemInit+0x14>)
 80058d2:	2280      	movs	r2, #128	; 0x80
 80058d4:	0512      	lsls	r2, r2, #20
 80058d6:	609a      	str	r2, [r3, #8]
#endif
}
 80058d8:	46c0      	nop			; (mov r8, r8)
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	46c0      	nop			; (mov r8, r8)
 80058e0:	e000ed00 	.word	0xe000ed00

080058e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80058e4:	480d      	ldr	r0, [pc, #52]	; (800591c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80058e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80058e8:	f7ff fff0 	bl	80058cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058ec:	480c      	ldr	r0, [pc, #48]	; (8005920 <LoopForever+0x6>)
  ldr r1, =_edata
 80058ee:	490d      	ldr	r1, [pc, #52]	; (8005924 <LoopForever+0xa>)
  ldr r2, =_sidata
 80058f0:	4a0d      	ldr	r2, [pc, #52]	; (8005928 <LoopForever+0xe>)
  movs r3, #0
 80058f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058f4:	e002      	b.n	80058fc <LoopCopyDataInit>

080058f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058fa:	3304      	adds	r3, #4

080058fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005900:	d3f9      	bcc.n	80058f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005902:	4a0a      	ldr	r2, [pc, #40]	; (800592c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005904:	4c0a      	ldr	r4, [pc, #40]	; (8005930 <LoopForever+0x16>)
  movs r3, #0
 8005906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005908:	e001      	b.n	800590e <LoopFillZerobss>

0800590a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800590a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800590c:	3204      	adds	r2, #4

0800590e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800590e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005910:	d3fb      	bcc.n	800590a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005912:	f008 f843 	bl	800d99c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005916:	f7fc fd69 	bl	80023ec <main>

0800591a <LoopForever>:

LoopForever:
  b LoopForever
 800591a:	e7fe      	b.n	800591a <LoopForever>
  ldr   r0, =_estack
 800591c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005924:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8005928:	08011e80 	.word	0x08011e80
  ldr r2, =_sbss
 800592c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8005930:	20002524 	.word	0x20002524

08005934 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005934:	e7fe      	b.n	8005934 <ADC1_COMP_IRQHandler>
	...

08005938 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800593e:	1dfb      	adds	r3, r7, #7
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005944:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <HAL_Init+0x3c>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <HAL_Init+0x3c>)
 800594a:	2180      	movs	r1, #128	; 0x80
 800594c:	0049      	lsls	r1, r1, #1
 800594e:	430a      	orrs	r2, r1
 8005950:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005952:	2000      	movs	r0, #0
 8005954:	f000 f810 	bl	8005978 <HAL_InitTick>
 8005958:	1e03      	subs	r3, r0, #0
 800595a:	d003      	beq.n	8005964 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800595c:	1dfb      	adds	r3, r7, #7
 800595e:	2201      	movs	r2, #1
 8005960:	701a      	strb	r2, [r3, #0]
 8005962:	e001      	b.n	8005968 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005964:	f7ff fb6c 	bl	8005040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005968:	1dfb      	adds	r3, r7, #7
 800596a:	781b      	ldrb	r3, [r3, #0]
}
 800596c:	0018      	movs	r0, r3
 800596e:	46bd      	mov	sp, r7
 8005970:	b002      	add	sp, #8
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40022000 	.word	0x40022000

08005978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005978:	b590      	push	{r4, r7, lr}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005980:	230f      	movs	r3, #15
 8005982:	18fb      	adds	r3, r7, r3
 8005984:	2200      	movs	r2, #0
 8005986:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005988:	4b1d      	ldr	r3, [pc, #116]	; (8005a00 <HAL_InitTick+0x88>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d02b      	beq.n	80059e8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005990:	4b1c      	ldr	r3, [pc, #112]	; (8005a04 <HAL_InitTick+0x8c>)
 8005992:	681c      	ldr	r4, [r3, #0]
 8005994:	4b1a      	ldr	r3, [pc, #104]	; (8005a00 <HAL_InitTick+0x88>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	0019      	movs	r1, r3
 800599a:	23fa      	movs	r3, #250	; 0xfa
 800599c:	0098      	lsls	r0, r3, #2
 800599e:	f7fa fbb1 	bl	8000104 <__udivsi3>
 80059a2:	0003      	movs	r3, r0
 80059a4:	0019      	movs	r1, r3
 80059a6:	0020      	movs	r0, r4
 80059a8:	f7fa fbac 	bl	8000104 <__udivsi3>
 80059ac:	0003      	movs	r3, r0
 80059ae:	0018      	movs	r0, r3
 80059b0:	f000 fbb3 	bl	800611a <HAL_SYSTICK_Config>
 80059b4:	1e03      	subs	r3, r0, #0
 80059b6:	d112      	bne.n	80059de <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d80a      	bhi.n	80059d4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	2301      	movs	r3, #1
 80059c2:	425b      	negs	r3, r3
 80059c4:	2200      	movs	r2, #0
 80059c6:	0018      	movs	r0, r3
 80059c8:	f000 fb82 	bl	80060d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80059cc:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <HAL_InitTick+0x90>)
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e00d      	b.n	80059f0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80059d4:	230f      	movs	r3, #15
 80059d6:	18fb      	adds	r3, r7, r3
 80059d8:	2201      	movs	r2, #1
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	e008      	b.n	80059f0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80059de:	230f      	movs	r3, #15
 80059e0:	18fb      	adds	r3, r7, r3
 80059e2:	2201      	movs	r2, #1
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	e003      	b.n	80059f0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80059e8:	230f      	movs	r3, #15
 80059ea:	18fb      	adds	r3, r7, r3
 80059ec:	2201      	movs	r2, #1
 80059ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80059f0:	230f      	movs	r3, #15
 80059f2:	18fb      	adds	r3, r7, r3
 80059f4:	781b      	ldrb	r3, [r3, #0]
}
 80059f6:	0018      	movs	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b005      	add	sp, #20
 80059fc:	bd90      	pop	{r4, r7, pc}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	2000003c 	.word	0x2000003c
 8005a04:	20000034 	.word	0x20000034
 8005a08:	20000038 	.word	0x20000038

08005a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005a10:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <HAL_IncTick+0x1c>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	001a      	movs	r2, r3
 8005a16:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <HAL_IncTick+0x20>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	18d2      	adds	r2, r2, r3
 8005a1c:	4b03      	ldr	r3, [pc, #12]	; (8005a2c <HAL_IncTick+0x20>)
 8005a1e:	601a      	str	r2, [r3, #0]
}
 8005a20:	46c0      	nop			; (mov r8, r8)
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	46c0      	nop			; (mov r8, r8)
 8005a28:	2000003c 	.word	0x2000003c
 8005a2c:	20002520 	.word	0x20002520

08005a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
  return uwTick;
 8005a34:	4b02      	ldr	r3, [pc, #8]	; (8005a40 <HAL_GetTick+0x10>)
 8005a36:	681b      	ldr	r3, [r3, #0]
}
 8005a38:	0018      	movs	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	20002520 	.word	0x20002520

08005a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a4c:	f7ff fff0 	bl	8005a30 <HAL_GetTick>
 8005a50:	0003      	movs	r3, r0
 8005a52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	d005      	beq.n	8005a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a5e:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <HAL_Delay+0x44>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	001a      	movs	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	189b      	adds	r3, r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a6a:	46c0      	nop			; (mov r8, r8)
 8005a6c:	f7ff ffe0 	bl	8005a30 <HAL_GetTick>
 8005a70:	0002      	movs	r2, r0
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d8f7      	bhi.n	8005a6c <HAL_Delay+0x28>
  {
  }
}
 8005a7c:	46c0      	nop			; (mov r8, r8)
 8005a7e:	46c0      	nop			; (mov r8, r8)
 8005a80:	46bd      	mov	sp, r7
 8005a82:	b004      	add	sp, #16
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	2000003c 	.word	0x2000003c

08005a8c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005a94:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a06      	ldr	r2, [pc, #24]	; (8005ab4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	0019      	movs	r1, r3
 8005a9e:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	601a      	str	r2, [r3, #0]
}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	b002      	add	sp, #8
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	46c0      	nop			; (mov r8, r8)
 8005ab0:	40010000 	.word	0x40010000
 8005ab4:	fffff9ff 	.word	0xfffff9ff

08005ab8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005ac0:	4a05      	ldr	r2, [pc, #20]	; (8005ad8 <LL_EXTI_EnableIT_0_31+0x20>)
 8005ac2:	2380      	movs	r3, #128	; 0x80
 8005ac4:	58d2      	ldr	r2, [r2, r3]
 8005ac6:	4904      	ldr	r1, [pc, #16]	; (8005ad8 <LL_EXTI_EnableIT_0_31+0x20>)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	2280      	movs	r2, #128	; 0x80
 8005ace:	508b      	str	r3, [r1, r2]
}
 8005ad0:	46c0      	nop			; (mov r8, r8)
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b002      	add	sp, #8
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40021800 	.word	0x40021800

08005adc <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005ae4:	4a06      	ldr	r2, [pc, #24]	; (8005b00 <LL_EXTI_DisableIT_0_31+0x24>)
 8005ae6:	2380      	movs	r3, #128	; 0x80
 8005ae8:	58d3      	ldr	r3, [r2, r3]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	43d2      	mvns	r2, r2
 8005aee:	4904      	ldr	r1, [pc, #16]	; (8005b00 <LL_EXTI_DisableIT_0_31+0x24>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	2280      	movs	r2, #128	; 0x80
 8005af4:	508b      	str	r3, [r1, r2]
}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b002      	add	sp, #8
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	40021800 	.word	0x40021800

08005b04 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8005b0c:	4a05      	ldr	r2, [pc, #20]	; (8005b24 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005b0e:	2384      	movs	r3, #132	; 0x84
 8005b10:	58d2      	ldr	r2, [r2, r3]
 8005b12:	4904      	ldr	r1, [pc, #16]	; (8005b24 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	2284      	movs	r2, #132	; 0x84
 8005b1a:	508b      	str	r3, [r1, r2]

}
 8005b1c:	46c0      	nop			; (mov r8, r8)
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	b002      	add	sp, #8
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40021800 	.word	0x40021800

08005b28 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005b30:	4a06      	ldr	r2, [pc, #24]	; (8005b4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8005b32:	2384      	movs	r3, #132	; 0x84
 8005b34:	58d3      	ldr	r3, [r2, r3]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	43d2      	mvns	r2, r2
 8005b3a:	4904      	ldr	r1, [pc, #16]	; (8005b4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2284      	movs	r2, #132	; 0x84
 8005b40:	508b      	str	r3, [r1, r2]
}
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b002      	add	sp, #8
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	40021800 	.word	0x40021800

08005b50 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005b58:	4b04      	ldr	r3, [pc, #16]	; (8005b6c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8005b5a:	6819      	ldr	r1, [r3, #0]
 8005b5c:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	601a      	str	r2, [r3, #0]

}
 8005b64:	46c0      	nop			; (mov r8, r8)
 8005b66:	46bd      	mov	sp, r7
 8005b68:	b002      	add	sp, #8
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40021800 	.word	0x40021800

08005b70 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8005b78:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	43d9      	mvns	r1, r3
 8005b80:	4b03      	ldr	r3, [pc, #12]	; (8005b90 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8005b82:	400a      	ands	r2, r1
 8005b84:	601a      	str	r2, [r3, #0]

}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	b002      	add	sp, #8
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	40021800 	.word	0x40021800

08005b94 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005b9c:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8005b9e:	6859      	ldr	r1, [r3, #4]
 8005ba0:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	605a      	str	r2, [r3, #4]
}
 8005ba8:	46c0      	nop			; (mov r8, r8)
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b002      	add	sp, #8
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40021800 	.word	0x40021800

08005bb4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	43d9      	mvns	r1, r3
 8005bc4:	4b03      	ldr	r3, [pc, #12]	; (8005bd4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8005bc6:	400a      	ands	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	b002      	add	sp, #8
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	40021800 	.word	0x40021800

08005bd8 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8005be0:	4b03      	ldr	r3, [pc, #12]	; (8005bf0 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	611a      	str	r2, [r3, #16]
}
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	46bd      	mov	sp, r7
 8005bea:	b002      	add	sp, #8
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	40021800 	.word	0x40021800

08005bf4 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8005bfc:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	60da      	str	r2, [r3, #12]
}
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	46bd      	mov	sp, r7
 8005c06:	b002      	add	sp, #8
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	40021800 	.word	0x40021800

08005c10 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005c1c:	211f      	movs	r1, #31
 8005c1e:	187b      	adds	r3, r7, r1
 8005c20:	2200      	movs	r2, #0
 8005c22:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d103      	bne.n	8005c32 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8005c2a:	187b      	adds	r3, r7, r1
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	701a      	strb	r2, [r3, #0]
 8005c30:	e13d      	b.n	8005eae <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	0fdb      	lsrs	r3, r3, #31
 8005c3a:	07da      	lsls	r2, r3, #31
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	061b      	lsls	r3, r3, #24
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d104      	bne.n	8005c4e <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8005c44:	231f      	movs	r3, #31
 8005c46:	18fb      	adds	r3, r7, r3
 8005c48:	2201      	movs	r2, #1
 8005c4a:	701a      	strb	r2, [r3, #0]
 8005c4c:	e12f      	b.n	8005eae <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2229      	movs	r2, #41	; 0x29
 8005c52:	5c9b      	ldrb	r3, [r3, r2]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10a      	bne.n	8005c70 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2228      	movs	r2, #40	; 0x28
 8005c5e:	2100      	movs	r1, #0
 8005c60:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f7ff fa10 	bl	8005090 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2230      	movs	r2, #48	; 0x30
 8005c78:	4013      	ands	r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a85      	ldr	r2, [pc, #532]	; (8005ebc <HAL_COMP_Init+0x2ac>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	0019      	movs	r1, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	2380      	movs	r3, #128	; 0x80
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d10d      	bne.n	8005cde <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005cc2:	4b7f      	ldr	r3, [pc, #508]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4b7e      	ldr	r3, [pc, #504]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005cc8:	497e      	ldr	r1, [pc, #504]	; (8005ec4 <HAL_COMP_Init+0x2b4>)
 8005cca:	400a      	ands	r2, r1
 8005ccc:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8005cce:	4b7c      	ldr	r3, [pc, #496]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	4b7b      	ldr	r3, [pc, #492]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005cd4:	2180      	movs	r1, #128	; 0x80
 8005cd6:	0109      	lsls	r1, r1, #4
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]
 8005cdc:	e01f      	b.n	8005d1e <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	23c0      	movs	r3, #192	; 0xc0
 8005ce4:	015b      	lsls	r3, r3, #5
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d10d      	bne.n	8005d06 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005cea:	4b75      	ldr	r3, [pc, #468]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	4b74      	ldr	r3, [pc, #464]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005cf0:	2180      	movs	r1, #128	; 0x80
 8005cf2:	0109      	lsls	r1, r1, #4
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8005cf8:	4b71      	ldr	r3, [pc, #452]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	4b70      	ldr	r3, [pc, #448]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005cfe:	4971      	ldr	r1, [pc, #452]	; (8005ec4 <HAL_COMP_Init+0x2b4>)
 8005d00:	400a      	ands	r2, r1
 8005d02:	605a      	str	r2, [r3, #4]
 8005d04:	e00b      	b.n	8005d1e <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005d06:	4b6e      	ldr	r3, [pc, #440]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	4b6d      	ldr	r3, [pc, #436]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d0c:	496d      	ldr	r1, [pc, #436]	; (8005ec4 <HAL_COMP_Init+0x2b4>)
 8005d0e:	400a      	ands	r2, r1
 8005d10:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8005d12:	4b6b      	ldr	r3, [pc, #428]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	4b6a      	ldr	r3, [pc, #424]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d18:	496a      	ldr	r1, [pc, #424]	; (8005ec4 <HAL_COMP_Init+0x2b4>)
 8005d1a:	400a      	ands	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	22a0      	movs	r2, #160	; 0xa0
 8005d24:	01d2      	lsls	r2, r2, #7
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d017      	beq.n	8005d5a <HAL_COMP_Init+0x14a>
 8005d2a:	22a0      	movs	r2, #160	; 0xa0
 8005d2c:	01d2      	lsls	r2, r2, #7
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d830      	bhi.n	8005d94 <HAL_COMP_Init+0x184>
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d01f      	beq.n	8005d76 <HAL_COMP_Init+0x166>
 8005d36:	2280      	movs	r2, #128	; 0x80
 8005d38:	01d2      	lsls	r2, r2, #7
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d12a      	bne.n	8005d94 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005d3e:	4b60      	ldr	r3, [pc, #384]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4b5f      	ldr	r3, [pc, #380]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d44:	2180      	movs	r1, #128	; 0x80
 8005d46:	01c9      	lsls	r1, r1, #7
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005d4c:	4b5c      	ldr	r3, [pc, #368]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	4b5b      	ldr	r3, [pc, #364]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d52:	495d      	ldr	r1, [pc, #372]	; (8005ec8 <HAL_COMP_Init+0x2b8>)
 8005d54:	400a      	ands	r2, r1
 8005d56:	605a      	str	r2, [r3, #4]
        break;
 8005d58:	e029      	b.n	8005dae <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005d5a:	4b59      	ldr	r3, [pc, #356]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	4b58      	ldr	r3, [pc, #352]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d60:	4959      	ldr	r1, [pc, #356]	; (8005ec8 <HAL_COMP_Init+0x2b8>)
 8005d62:	400a      	ands	r2, r1
 8005d64:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005d66:	4b56      	ldr	r3, [pc, #344]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	4b55      	ldr	r3, [pc, #340]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d6c:	2180      	movs	r1, #128	; 0x80
 8005d6e:	01c9      	lsls	r1, r1, #7
 8005d70:	430a      	orrs	r2, r1
 8005d72:	605a      	str	r2, [r3, #4]
        break;
 8005d74:	e01b      	b.n	8005dae <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005d76:	4b52      	ldr	r3, [pc, #328]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	4b51      	ldr	r3, [pc, #324]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d7c:	2180      	movs	r1, #128	; 0x80
 8005d7e:	01c9      	lsls	r1, r1, #7
 8005d80:	430a      	orrs	r2, r1
 8005d82:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005d84:	4b4e      	ldr	r3, [pc, #312]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	4b4d      	ldr	r3, [pc, #308]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d8a:	2180      	movs	r1, #128	; 0x80
 8005d8c:	01c9      	lsls	r1, r1, #7
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	605a      	str	r2, [r3, #4]
        break;
 8005d92:	e00c      	b.n	8005dae <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8005d94:	4b4a      	ldr	r3, [pc, #296]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	4b49      	ldr	r3, [pc, #292]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005d9a:	494b      	ldr	r1, [pc, #300]	; (8005ec8 <HAL_COMP_Init+0x2b8>)
 8005d9c:	400a      	ands	r2, r1
 8005d9e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8005da0:	4b47      	ldr	r3, [pc, #284]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	4b46      	ldr	r3, [pc, #280]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005da6:	4948      	ldr	r1, [pc, #288]	; (8005ec8 <HAL_COMP_Init+0x2b8>)
 8005da8:	400a      	ands	r2, r1
 8005daa:	605a      	str	r2, [r3, #4]
        break;
 8005dac:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2230      	movs	r2, #48	; 0x30
 8005db6:	4013      	ands	r3, r2
 8005db8:	d016      	beq.n	8005de8 <HAL_COMP_Init+0x1d8>
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d113      	bne.n	8005de8 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005dc0:	4b42      	ldr	r3, [pc, #264]	; (8005ecc <HAL_COMP_Init+0x2bc>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4942      	ldr	r1, [pc, #264]	; (8005ed0 <HAL_COMP_Init+0x2c0>)
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f7fa f99c 	bl	8000104 <__udivsi3>
 8005dcc:	0003      	movs	r3, r0
 8005dce:	001a      	movs	r2, r3
 8005dd0:	0013      	movs	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	189b      	adds	r3, r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005dda:	e002      	b.n	8005de2 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1f9      	bne.n	8005ddc <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a34      	ldr	r2, [pc, #208]	; (8005ec0 <HAL_COMP_Init+0x2b0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d102      	bne.n	8005df8 <HAL_COMP_Init+0x1e8>
 8005df2:	2380      	movs	r3, #128	; 0x80
 8005df4:	029b      	lsls	r3, r3, #10
 8005df6:	e001      	b.n	8005dfc <HAL_COMP_Init+0x1ec>
 8005df8:	2380      	movs	r3, #128	; 0x80
 8005dfa:	02db      	lsls	r3, r3, #11
 8005dfc:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	2203      	movs	r2, #3
 8005e04:	4013      	ands	r3, r2
 8005e06:	d040      	beq.n	8005e8a <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0c:	2210      	movs	r2, #16
 8005e0e:	4013      	ands	r3, r2
 8005e10:	d004      	beq.n	8005e1c <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	0018      	movs	r0, r3
 8005e16:	f7ff fe9b 	bl	8005b50 <LL_EXTI_EnableRisingTrig_0_31>
 8005e1a:	e003      	b.n	8005e24 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f7ff fea6 	bl	8005b70 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	2220      	movs	r2, #32
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d004      	beq.n	8005e38 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	0018      	movs	r0, r3
 8005e32:	f7ff feaf 	bl	8005b94 <LL_EXTI_EnableFallingTrig_0_31>
 8005e36:	e003      	b.n	8005e40 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	f7ff feba 	bl	8005bb4 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	0018      	movs	r0, r3
 8005e44:	f7ff fed6 	bl	8005bf4 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f7ff fec4 	bl	8005bd8 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	2202      	movs	r2, #2
 8005e56:	4013      	ands	r3, r2
 8005e58:	d004      	beq.n	8005e64 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f7ff fe51 	bl	8005b04 <LL_EXTI_EnableEvent_0_31>
 8005e62:	e003      	b.n	8005e6c <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	0018      	movs	r0, r3
 8005e68:	f7ff fe5e 	bl	8005b28 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2201      	movs	r2, #1
 8005e72:	4013      	ands	r3, r2
 8005e74:	d004      	beq.n	8005e80 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f7ff fe1d 	bl	8005ab8 <LL_EXTI_EnableIT_0_31>
 8005e7e:	e00c      	b.n	8005e9a <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	0018      	movs	r0, r3
 8005e84:	f7ff fe2a 	bl	8005adc <LL_EXTI_DisableIT_0_31>
 8005e88:	e007      	b.n	8005e9a <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f7ff fe4b 	bl	8005b28 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	0018      	movs	r0, r3
 8005e96:	f7ff fe21 	bl	8005adc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2229      	movs	r2, #41	; 0x29
 8005e9e:	5c9b      	ldrb	r3, [r3, r2]
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d103      	bne.n	8005eae <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2229      	movs	r2, #41	; 0x29
 8005eaa:	2101      	movs	r1, #1
 8005eac:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005eae:	231f      	movs	r3, #31
 8005eb0:	18fb      	adds	r3, r7, r3
 8005eb2:	781b      	ldrb	r3, [r3, #0]
}
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	b008      	add	sp, #32
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	fe00740f 	.word	0xfe00740f
 8005ec0:	40010200 	.word	0x40010200
 8005ec4:	fffff7ff 	.word	0xfffff7ff
 8005ec8:	ffffbfff 	.word	0xffffbfff
 8005ecc:	20000034 	.word	0x20000034
 8005ed0:	00030d40 	.word	0x00030d40

08005ed4 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee0:	210f      	movs	r1, #15
 8005ee2:	187b      	adds	r3, r7, r1
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d103      	bne.n	8005ef6 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8005eee:	187b      	adds	r3, r7, r1
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	e034      	b.n	8005f60 <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	0fdb      	lsrs	r3, r3, #31
 8005efe:	07da      	lsls	r2, r3, #31
 8005f00:	2380      	movs	r3, #128	; 0x80
 8005f02:	061b      	lsls	r3, r3, #24
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d104      	bne.n	8005f12 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8005f08:	230f      	movs	r3, #15
 8005f0a:	18fb      	adds	r3, r7, r3
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	701a      	strb	r2, [r3, #0]
 8005f10:	e026      	b.n	8005f60 <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2229      	movs	r2, #41	; 0x29
 8005f16:	5c9b      	ldrb	r3, [r3, r2]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d11c      	bne.n	8005f58 <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2101      	movs	r1, #1
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2229      	movs	r2, #41	; 0x29
 8005f32:	2102      	movs	r1, #2
 8005f34:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005f36:	4b0e      	ldr	r3, [pc, #56]	; (8005f70 <HAL_COMP_Start+0x9c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	490e      	ldr	r1, [pc, #56]	; (8005f74 <HAL_COMP_Start+0xa0>)
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	f7fa f8e1 	bl	8000104 <__udivsi3>
 8005f42:	0003      	movs	r3, r0
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005f48:	e002      	b.n	8005f50 <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f9      	bne.n	8005f4a <HAL_COMP_Start+0x76>
 8005f56:	e003      	b.n	8005f60 <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005f58:	230f      	movs	r3, #15
 8005f5a:	18fb      	adds	r3, r7, r3
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005f60:	230f      	movs	r3, #15
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	781b      	ldrb	r3, [r3, #0]
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b004      	add	sp, #16
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	20000034 	.word	0x20000034
 8005f74:	00030d40 	.word	0x00030d40

08005f78 <__NVIC_EnableIRQ>:
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	0002      	movs	r2, r0
 8005f80:	1dfb      	adds	r3, r7, #7
 8005f82:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005f84:	1dfb      	adds	r3, r7, #7
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b7f      	cmp	r3, #127	; 0x7f
 8005f8a:	d809      	bhi.n	8005fa0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f8c:	1dfb      	adds	r3, r7, #7
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	001a      	movs	r2, r3
 8005f92:	231f      	movs	r3, #31
 8005f94:	401a      	ands	r2, r3
 8005f96:	4b04      	ldr	r3, [pc, #16]	; (8005fa8 <__NVIC_EnableIRQ+0x30>)
 8005f98:	2101      	movs	r1, #1
 8005f9a:	4091      	lsls	r1, r2
 8005f9c:	000a      	movs	r2, r1
 8005f9e:	601a      	str	r2, [r3, #0]
}
 8005fa0:	46c0      	nop			; (mov r8, r8)
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b002      	add	sp, #8
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	e000e100 	.word	0xe000e100

08005fac <__NVIC_SetPriority>:
{
 8005fac:	b590      	push	{r4, r7, lr}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	0002      	movs	r2, r0
 8005fb4:	6039      	str	r1, [r7, #0]
 8005fb6:	1dfb      	adds	r3, r7, #7
 8005fb8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005fba:	1dfb      	adds	r3, r7, #7
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc0:	d828      	bhi.n	8006014 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005fc2:	4a2f      	ldr	r2, [pc, #188]	; (8006080 <__NVIC_SetPriority+0xd4>)
 8005fc4:	1dfb      	adds	r3, r7, #7
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	b25b      	sxtb	r3, r3
 8005fca:	089b      	lsrs	r3, r3, #2
 8005fcc:	33c0      	adds	r3, #192	; 0xc0
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	589b      	ldr	r3, [r3, r2]
 8005fd2:	1dfa      	adds	r2, r7, #7
 8005fd4:	7812      	ldrb	r2, [r2, #0]
 8005fd6:	0011      	movs	r1, r2
 8005fd8:	2203      	movs	r2, #3
 8005fda:	400a      	ands	r2, r1
 8005fdc:	00d2      	lsls	r2, r2, #3
 8005fde:	21ff      	movs	r1, #255	; 0xff
 8005fe0:	4091      	lsls	r1, r2
 8005fe2:	000a      	movs	r2, r1
 8005fe4:	43d2      	mvns	r2, r2
 8005fe6:	401a      	ands	r2, r3
 8005fe8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	019b      	lsls	r3, r3, #6
 8005fee:	22ff      	movs	r2, #255	; 0xff
 8005ff0:	401a      	ands	r2, r3
 8005ff2:	1dfb      	adds	r3, r7, #7
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	4003      	ands	r3, r0
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006000:	481f      	ldr	r0, [pc, #124]	; (8006080 <__NVIC_SetPriority+0xd4>)
 8006002:	1dfb      	adds	r3, r7, #7
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	b25b      	sxtb	r3, r3
 8006008:	089b      	lsrs	r3, r3, #2
 800600a:	430a      	orrs	r2, r1
 800600c:	33c0      	adds	r3, #192	; 0xc0
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	501a      	str	r2, [r3, r0]
}
 8006012:	e031      	b.n	8006078 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006014:	4a1b      	ldr	r2, [pc, #108]	; (8006084 <__NVIC_SetPriority+0xd8>)
 8006016:	1dfb      	adds	r3, r7, #7
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	0019      	movs	r1, r3
 800601c:	230f      	movs	r3, #15
 800601e:	400b      	ands	r3, r1
 8006020:	3b08      	subs	r3, #8
 8006022:	089b      	lsrs	r3, r3, #2
 8006024:	3306      	adds	r3, #6
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	18d3      	adds	r3, r2, r3
 800602a:	3304      	adds	r3, #4
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	1dfa      	adds	r2, r7, #7
 8006030:	7812      	ldrb	r2, [r2, #0]
 8006032:	0011      	movs	r1, r2
 8006034:	2203      	movs	r2, #3
 8006036:	400a      	ands	r2, r1
 8006038:	00d2      	lsls	r2, r2, #3
 800603a:	21ff      	movs	r1, #255	; 0xff
 800603c:	4091      	lsls	r1, r2
 800603e:	000a      	movs	r2, r1
 8006040:	43d2      	mvns	r2, r2
 8006042:	401a      	ands	r2, r3
 8006044:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	019b      	lsls	r3, r3, #6
 800604a:	22ff      	movs	r2, #255	; 0xff
 800604c:	401a      	ands	r2, r3
 800604e:	1dfb      	adds	r3, r7, #7
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	0018      	movs	r0, r3
 8006054:	2303      	movs	r3, #3
 8006056:	4003      	ands	r3, r0
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800605c:	4809      	ldr	r0, [pc, #36]	; (8006084 <__NVIC_SetPriority+0xd8>)
 800605e:	1dfb      	adds	r3, r7, #7
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	001c      	movs	r4, r3
 8006064:	230f      	movs	r3, #15
 8006066:	4023      	ands	r3, r4
 8006068:	3b08      	subs	r3, #8
 800606a:	089b      	lsrs	r3, r3, #2
 800606c:	430a      	orrs	r2, r1
 800606e:	3306      	adds	r3, #6
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	18c3      	adds	r3, r0, r3
 8006074:	3304      	adds	r3, #4
 8006076:	601a      	str	r2, [r3, #0]
}
 8006078:	46c0      	nop			; (mov r8, r8)
 800607a:	46bd      	mov	sp, r7
 800607c:	b003      	add	sp, #12
 800607e:	bd90      	pop	{r4, r7, pc}
 8006080:	e000e100 	.word	0xe000e100
 8006084:	e000ed00 	.word	0xe000ed00

08006088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	1e5a      	subs	r2, r3, #1
 8006094:	2380      	movs	r3, #128	; 0x80
 8006096:	045b      	lsls	r3, r3, #17
 8006098:	429a      	cmp	r2, r3
 800609a:	d301      	bcc.n	80060a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800609c:	2301      	movs	r3, #1
 800609e:	e010      	b.n	80060c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80060a0:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <SysTick_Config+0x44>)
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	3a01      	subs	r2, #1
 80060a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80060a8:	2301      	movs	r3, #1
 80060aa:	425b      	negs	r3, r3
 80060ac:	2103      	movs	r1, #3
 80060ae:	0018      	movs	r0, r3
 80060b0:	f7ff ff7c 	bl	8005fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060b4:	4b05      	ldr	r3, [pc, #20]	; (80060cc <SysTick_Config+0x44>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060ba:	4b04      	ldr	r3, [pc, #16]	; (80060cc <SysTick_Config+0x44>)
 80060bc:	2207      	movs	r2, #7
 80060be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	0018      	movs	r0, r3
 80060c4:	46bd      	mov	sp, r7
 80060c6:	b002      	add	sp, #8
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	e000e010 	.word	0xe000e010

080060d0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
 80060da:	210f      	movs	r1, #15
 80060dc:	187b      	adds	r3, r7, r1
 80060de:	1c02      	adds	r2, r0, #0
 80060e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	187b      	adds	r3, r7, r1
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	b25b      	sxtb	r3, r3
 80060ea:	0011      	movs	r1, r2
 80060ec:	0018      	movs	r0, r3
 80060ee:	f7ff ff5d 	bl	8005fac <__NVIC_SetPriority>
}
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b004      	add	sp, #16
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b082      	sub	sp, #8
 80060fe:	af00      	add	r7, sp, #0
 8006100:	0002      	movs	r2, r0
 8006102:	1dfb      	adds	r3, r7, #7
 8006104:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006106:	1dfb      	adds	r3, r7, #7
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	b25b      	sxtb	r3, r3
 800610c:	0018      	movs	r0, r3
 800610e:	f7ff ff33 	bl	8005f78 <__NVIC_EnableIRQ>
}
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	46bd      	mov	sp, r7
 8006116:	b002      	add	sp, #8
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	0018      	movs	r0, r3
 8006126:	f7ff ffaf 	bl	8006088 <SysTick_Config>
 800612a:	0003      	movs	r3, r0
}
 800612c:	0018      	movs	r0, r3
 800612e:	46bd      	mov	sp, r7
 8006130:	b002      	add	sp, #8
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e077      	b.n	8006236 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a3d      	ldr	r2, [pc, #244]	; (8006240 <HAL_DMA_Init+0x10c>)
 800614c:	4694      	mov	ip, r2
 800614e:	4463      	add	r3, ip
 8006150:	2114      	movs	r1, #20
 8006152:	0018      	movs	r0, r3
 8006154:	f7f9 ffd6 	bl	8000104 <__udivsi3>
 8006158:	0003      	movs	r3, r0
 800615a:	009a      	lsls	r2, r3, #2
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2225      	movs	r2, #37	; 0x25
 8006164:	2102      	movs	r1, #2
 8006166:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4934      	ldr	r1, [pc, #208]	; (8006244 <HAL_DMA_Init+0x110>)
 8006174:	400a      	ands	r2, r1
 8006176:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6819      	ldr	r1, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	0018      	movs	r0, r3
 80061b2:	f000 fa37 	bl	8006624 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	2380      	movs	r3, #128	; 0x80
 80061bc:	01db      	lsls	r3, r3, #7
 80061be:	429a      	cmp	r2, r3
 80061c0:	d102      	bne.n	80061c8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d0:	213f      	movs	r1, #63	; 0x3f
 80061d2:	400a      	ands	r2, r1
 80061d4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80061de:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d011      	beq.n	800620c <HAL_DMA_Init+0xd8>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	2b04      	cmp	r3, #4
 80061ee:	d80d      	bhi.n	800620c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	0018      	movs	r0, r3
 80061f4:	f000 fa42 	bl	800667c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061fc:	2200      	movs	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006208:	605a      	str	r2, [r3, #4]
 800620a:	e008      	b.n	800621e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2225      	movs	r2, #37	; 0x25
 8006228:	2101      	movs	r1, #1
 800622a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2224      	movs	r2, #36	; 0x24
 8006230:	2100      	movs	r1, #0
 8006232:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	0018      	movs	r0, r3
 8006238:	46bd      	mov	sp, r7
 800623a:	b002      	add	sp, #8
 800623c:	bd80      	pop	{r7, pc}
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	bffdfff8 	.word	0xbffdfff8
 8006244:	ffff800f 	.word	0xffff800f

08006248 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006256:	2317      	movs	r3, #23
 8006258:	18fb      	adds	r3, r7, r3
 800625a:	2200      	movs	r2, #0
 800625c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2224      	movs	r2, #36	; 0x24
 8006262:	5c9b      	ldrb	r3, [r3, r2]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_DMA_Start_IT+0x24>
 8006268:	2302      	movs	r3, #2
 800626a:	e06f      	b.n	800634c <HAL_DMA_Start_IT+0x104>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2224      	movs	r2, #36	; 0x24
 8006270:	2101      	movs	r1, #1
 8006272:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2225      	movs	r2, #37	; 0x25
 8006278:	5c9b      	ldrb	r3, [r3, r2]
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b01      	cmp	r3, #1
 800627e:	d157      	bne.n	8006330 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2225      	movs	r2, #37	; 0x25
 8006284:	2102      	movs	r1, #2
 8006286:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2101      	movs	r1, #1
 800629a:	438a      	bics	r2, r1
 800629c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f97d 	bl	80065a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d008      	beq.n	80062c4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	210e      	movs	r1, #14
 80062be:	430a      	orrs	r2, r1
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e00f      	b.n	80062e4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2104      	movs	r1, #4
 80062d0:	438a      	bics	r2, r1
 80062d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	210a      	movs	r1, #10
 80062e0:	430a      	orrs	r2, r1
 80062e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	2380      	movs	r3, #128	; 0x80
 80062ec:	025b      	lsls	r3, r3, #9
 80062ee:	4013      	ands	r3, r2
 80062f0:	d008      	beq.n	8006304 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fc:	2180      	movs	r1, #128	; 0x80
 80062fe:	0049      	lsls	r1, r1, #1
 8006300:	430a      	orrs	r2, r1
 8006302:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006316:	2180      	movs	r1, #128	; 0x80
 8006318:	0049      	lsls	r1, r1, #1
 800631a:	430a      	orrs	r2, r1
 800631c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2101      	movs	r1, #1
 800632a:	430a      	orrs	r2, r1
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	e00a      	b.n	8006346 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2280      	movs	r2, #128	; 0x80
 8006334:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2224      	movs	r2, #36	; 0x24
 800633a:	2100      	movs	r1, #0
 800633c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800633e:	2317      	movs	r3, #23
 8006340:	18fb      	adds	r3, r7, r3
 8006342:	2201      	movs	r2, #1
 8006344:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006346:	2317      	movs	r3, #23
 8006348:	18fb      	adds	r3, r7, r3
 800634a:	781b      	ldrb	r3, [r3, #0]
}
 800634c:	0018      	movs	r0, r3
 800634e:	46bd      	mov	sp, r7
 8006350:	b006      	add	sp, #24
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800635c:	210f      	movs	r1, #15
 800635e:	187b      	adds	r3, r7, r1
 8006360:	2200      	movs	r2, #0
 8006362:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2225      	movs	r2, #37	; 0x25
 8006368:	5c9b      	ldrb	r3, [r3, r2]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d006      	beq.n	800637e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2204      	movs	r2, #4
 8006374:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006376:	187b      	adds	r3, r7, r1
 8006378:	2201      	movs	r2, #1
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	e049      	b.n	8006412 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	210e      	movs	r1, #14
 800638a:	438a      	bics	r2, r1
 800638c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2101      	movs	r1, #1
 800639a:	438a      	bics	r2, r1
 800639c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a8:	491d      	ldr	r1, [pc, #116]	; (8006420 <HAL_DMA_Abort_IT+0xcc>)
 80063aa:	400a      	ands	r2, r1
 80063ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80063ae:	4b1d      	ldr	r3, [pc, #116]	; (8006424 <HAL_DMA_Abort_IT+0xd0>)
 80063b0:	6859      	ldr	r1, [r3, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	221c      	movs	r2, #28
 80063b8:	4013      	ands	r3, r2
 80063ba:	2201      	movs	r2, #1
 80063bc:	409a      	lsls	r2, r3
 80063be:	4b19      	ldr	r3, [pc, #100]	; (8006424 <HAL_DMA_Abort_IT+0xd0>)
 80063c0:	430a      	orrs	r2, r1
 80063c2:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80063cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00c      	beq.n	80063f0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e0:	490f      	ldr	r1, [pc, #60]	; (8006420 <HAL_DMA_Abort_IT+0xcc>)
 80063e2:	400a      	ands	r2, r1
 80063e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80063ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2225      	movs	r2, #37	; 0x25
 80063f4:	2101      	movs	r1, #1
 80063f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2224      	movs	r2, #36	; 0x24
 80063fc:	2100      	movs	r1, #0
 80063fe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	2b00      	cmp	r3, #0
 8006406:	d004      	beq.n	8006412 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	0010      	movs	r0, r2
 8006410:	4798      	blx	r3
    }
  }
  return status;
 8006412:	230f      	movs	r3, #15
 8006414:	18fb      	adds	r3, r7, r3
 8006416:	781b      	ldrb	r3, [r3, #0]
}
 8006418:	0018      	movs	r0, r3
 800641a:	46bd      	mov	sp, r7
 800641c:	b004      	add	sp, #16
 800641e:	bd80      	pop	{r7, pc}
 8006420:	fffffeff 	.word	0xfffffeff
 8006424:	40020000 	.word	0x40020000

08006428 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8006430:	4b55      	ldr	r3, [pc, #340]	; (8006588 <HAL_DMA_IRQHandler+0x160>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	221c      	movs	r2, #28
 8006444:	4013      	ands	r3, r2
 8006446:	2204      	movs	r2, #4
 8006448:	409a      	lsls	r2, r3
 800644a:	0013      	movs	r3, r2
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	4013      	ands	r3, r2
 8006450:	d027      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x7a>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2204      	movs	r2, #4
 8006456:	4013      	ands	r3, r2
 8006458:	d023      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2220      	movs	r2, #32
 8006462:	4013      	ands	r3, r2
 8006464:	d107      	bne.n	8006476 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2104      	movs	r1, #4
 8006472:	438a      	bics	r2, r1
 8006474:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8006476:	4b44      	ldr	r3, [pc, #272]	; (8006588 <HAL_DMA_IRQHandler+0x160>)
 8006478:	6859      	ldr	r1, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	221c      	movs	r2, #28
 8006480:	4013      	ands	r3, r2
 8006482:	2204      	movs	r2, #4
 8006484:	409a      	lsls	r2, r3
 8006486:	4b40      	ldr	r3, [pc, #256]	; (8006588 <HAL_DMA_IRQHandler+0x160>)
 8006488:	430a      	orrs	r2, r1
 800648a:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	2b00      	cmp	r3, #0
 8006492:	d100      	bne.n	8006496 <HAL_DMA_IRQHandler+0x6e>
 8006494:	e073      	b.n	800657e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	0010      	movs	r0, r2
 800649e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80064a0:	e06d      	b.n	800657e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	221c      	movs	r2, #28
 80064a8:	4013      	ands	r3, r2
 80064aa:	2202      	movs	r2, #2
 80064ac:	409a      	lsls	r2, r3
 80064ae:	0013      	movs	r3, r2
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4013      	ands	r3, r2
 80064b4:	d02e      	beq.n	8006514 <HAL_DMA_IRQHandler+0xec>
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2202      	movs	r2, #2
 80064ba:	4013      	ands	r3, r2
 80064bc:	d02a      	beq.n	8006514 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2220      	movs	r2, #32
 80064c6:	4013      	ands	r3, r2
 80064c8:	d10b      	bne.n	80064e2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	210a      	movs	r1, #10
 80064d6:	438a      	bics	r2, r1
 80064d8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2225      	movs	r2, #37	; 0x25
 80064de:	2101      	movs	r1, #1
 80064e0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80064e2:	4b29      	ldr	r3, [pc, #164]	; (8006588 <HAL_DMA_IRQHandler+0x160>)
 80064e4:	6859      	ldr	r1, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	221c      	movs	r2, #28
 80064ec:	4013      	ands	r3, r2
 80064ee:	2202      	movs	r2, #2
 80064f0:	409a      	lsls	r2, r3
 80064f2:	4b25      	ldr	r3, [pc, #148]	; (8006588 <HAL_DMA_IRQHandler+0x160>)
 80064f4:	430a      	orrs	r2, r1
 80064f6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2224      	movs	r2, #36	; 0x24
 80064fc:	2100      	movs	r1, #0
 80064fe:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	2b00      	cmp	r3, #0
 8006506:	d03a      	beq.n	800657e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	0010      	movs	r0, r2
 8006510:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006512:	e034      	b.n	800657e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	221c      	movs	r2, #28
 800651a:	4013      	ands	r3, r2
 800651c:	2208      	movs	r2, #8
 800651e:	409a      	lsls	r2, r3
 8006520:	0013      	movs	r3, r2
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4013      	ands	r3, r2
 8006526:	d02b      	beq.n	8006580 <HAL_DMA_IRQHandler+0x158>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2208      	movs	r2, #8
 800652c:	4013      	ands	r3, r2
 800652e:	d027      	beq.n	8006580 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	210e      	movs	r1, #14
 800653c:	438a      	bics	r2, r1
 800653e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006540:	4b11      	ldr	r3, [pc, #68]	; (8006588 <HAL_DMA_IRQHandler+0x160>)
 8006542:	6859      	ldr	r1, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	221c      	movs	r2, #28
 800654a:	4013      	ands	r3, r2
 800654c:	2201      	movs	r2, #1
 800654e:	409a      	lsls	r2, r3
 8006550:	4b0d      	ldr	r3, [pc, #52]	; (8006588 <HAL_DMA_IRQHandler+0x160>)
 8006552:	430a      	orrs	r2, r1
 8006554:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2225      	movs	r2, #37	; 0x25
 8006560:	2101      	movs	r1, #1
 8006562:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2224      	movs	r2, #36	; 0x24
 8006568:	2100      	movs	r1, #0
 800656a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	0010      	movs	r0, r2
 800657c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800657e:	46c0      	nop			; (mov r8, r8)
 8006580:	46c0      	nop			; (mov r8, r8)
}
 8006582:	46bd      	mov	sp, r7
 8006584:	b004      	add	sp, #16
 8006586:	bd80      	pop	{r7, pc}
 8006588:	40020000 	.word	0x40020000

0800658c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2225      	movs	r2, #37	; 0x25
 8006598:	5c9b      	ldrb	r3, [r3, r2]
 800659a:	b2db      	uxtb	r3, r3
}
 800659c:	0018      	movs	r0, r3
 800659e:	46bd      	mov	sp, r7
 80065a0:	b002      	add	sp, #8
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80065ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d004      	beq.n	80065ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80065cc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80065ce:	4b14      	ldr	r3, [pc, #80]	; (8006620 <DMA_SetConfig+0x7c>)
 80065d0:	6859      	ldr	r1, [r3, #4]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	221c      	movs	r2, #28
 80065d8:	4013      	ands	r3, r2
 80065da:	2201      	movs	r2, #1
 80065dc:	409a      	lsls	r2, r3
 80065de:	4b10      	ldr	r3, [pc, #64]	; (8006620 <DMA_SetConfig+0x7c>)
 80065e0:	430a      	orrs	r2, r1
 80065e2:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b10      	cmp	r3, #16
 80065f2:	d108      	bne.n	8006606 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006604:	e007      	b.n	8006616 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	60da      	str	r2, [r3, #12]
}
 8006616:	46c0      	nop			; (mov r8, r8)
 8006618:	46bd      	mov	sp, r7
 800661a:	b004      	add	sp, #16
 800661c:	bd80      	pop	{r7, pc}
 800661e:	46c0      	nop			; (mov r8, r8)
 8006620:	40020000 	.word	0x40020000

08006624 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	089b      	lsrs	r3, r3, #2
 8006632:	4a10      	ldr	r2, [pc, #64]	; (8006674 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006634:	4694      	mov	ip, r2
 8006636:	4463      	add	r3, ip
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	001a      	movs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	001a      	movs	r2, r3
 8006646:	23ff      	movs	r3, #255	; 0xff
 8006648:	4013      	ands	r3, r2
 800664a:	3b08      	subs	r3, #8
 800664c:	2114      	movs	r1, #20
 800664e:	0018      	movs	r0, r3
 8006650:	f7f9 fd58 	bl	8000104 <__udivsi3>
 8006654:	0003      	movs	r3, r0
 8006656:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a07      	ldr	r2, [pc, #28]	; (8006678 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800665c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	221f      	movs	r2, #31
 8006662:	4013      	ands	r3, r2
 8006664:	2201      	movs	r2, #1
 8006666:	409a      	lsls	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800666c:	46c0      	nop			; (mov r8, r8)
 800666e:	46bd      	mov	sp, r7
 8006670:	b004      	add	sp, #16
 8006672:	bd80      	pop	{r7, pc}
 8006674:	10008200 	.word	0x10008200
 8006678:	40020880 	.word	0x40020880

0800667c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	223f      	movs	r2, #63	; 0x3f
 800668a:	4013      	ands	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a0a      	ldr	r2, [pc, #40]	; (80066bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006692:	4694      	mov	ip, r2
 8006694:	4463      	add	r3, ip
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	001a      	movs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a07      	ldr	r2, [pc, #28]	; (80066c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80066a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	2203      	movs	r2, #3
 80066aa:	4013      	ands	r3, r2
 80066ac:	2201      	movs	r2, #1
 80066ae:	409a      	lsls	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80066b4:	46c0      	nop			; (mov r8, r8)
 80066b6:	46bd      	mov	sp, r7
 80066b8:	b004      	add	sp, #16
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	1000823f 	.word	0x1000823f
 80066c0:	40020940 	.word	0x40020940

080066c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80066ce:	2300      	movs	r3, #0
 80066d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066d2:	e147      	b.n	8006964 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2101      	movs	r1, #1
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	4091      	lsls	r1, r2
 80066de:	000a      	movs	r2, r1
 80066e0:	4013      	ands	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d100      	bne.n	80066ec <HAL_GPIO_Init+0x28>
 80066ea:	e138      	b.n	800695e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d00b      	beq.n	800670c <HAL_GPIO_Init+0x48>
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d007      	beq.n	800670c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006700:	2b11      	cmp	r3, #17
 8006702:	d003      	beq.n	800670c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b12      	cmp	r3, #18
 800670a:	d130      	bne.n	800676e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	2203      	movs	r2, #3
 8006718:	409a      	lsls	r2, r3
 800671a:	0013      	movs	r3, r2
 800671c:	43da      	mvns	r2, r3
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	4013      	ands	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	409a      	lsls	r2, r3
 800672e:	0013      	movs	r3, r2
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4313      	orrs	r3, r2
 8006734:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006742:	2201      	movs	r2, #1
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	409a      	lsls	r2, r3
 8006748:	0013      	movs	r3, r2
 800674a:	43da      	mvns	r2, r3
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4013      	ands	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	091b      	lsrs	r3, r3, #4
 8006758:	2201      	movs	r2, #1
 800675a:	401a      	ands	r2, r3
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	409a      	lsls	r2, r3
 8006760:	0013      	movs	r3, r2
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	2203      	movs	r2, #3
 800677a:	409a      	lsls	r2, r3
 800677c:	0013      	movs	r3, r2
 800677e:	43da      	mvns	r2, r3
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	4013      	ands	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	409a      	lsls	r2, r3
 8006790:	0013      	movs	r3, r2
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d003      	beq.n	80067ae <HAL_GPIO_Init+0xea>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b12      	cmp	r3, #18
 80067ac:	d123      	bne.n	80067f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	08da      	lsrs	r2, r3, #3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3208      	adds	r2, #8
 80067b6:	0092      	lsls	r2, r2, #2
 80067b8:	58d3      	ldr	r3, [r2, r3]
 80067ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2207      	movs	r2, #7
 80067c0:	4013      	ands	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	220f      	movs	r2, #15
 80067c6:	409a      	lsls	r2, r3
 80067c8:	0013      	movs	r3, r2
 80067ca:	43da      	mvns	r2, r3
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	4013      	ands	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	691a      	ldr	r2, [r3, #16]
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2107      	movs	r1, #7
 80067da:	400b      	ands	r3, r1
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	409a      	lsls	r2, r3
 80067e0:	0013      	movs	r3, r2
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	08da      	lsrs	r2, r3, #3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	3208      	adds	r2, #8
 80067f0:	0092      	lsls	r2, r2, #2
 80067f2:	6939      	ldr	r1, [r7, #16]
 80067f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	2203      	movs	r2, #3
 8006802:	409a      	lsls	r2, r3
 8006804:	0013      	movs	r3, r2
 8006806:	43da      	mvns	r2, r3
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	4013      	ands	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2203      	movs	r2, #3
 8006814:	401a      	ands	r2, r3
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	409a      	lsls	r2, r3
 800681c:	0013      	movs	r3, r2
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	4313      	orrs	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	2380      	movs	r3, #128	; 0x80
 8006830:	055b      	lsls	r3, r3, #21
 8006832:	4013      	ands	r3, r2
 8006834:	d100      	bne.n	8006838 <HAL_GPIO_Init+0x174>
 8006836:	e092      	b.n	800695e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006838:	4a50      	ldr	r2, [pc, #320]	; (800697c <HAL_GPIO_Init+0x2b8>)
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	089b      	lsrs	r3, r3, #2
 800683e:	3318      	adds	r3, #24
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	589b      	ldr	r3, [r3, r2]
 8006844:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2203      	movs	r2, #3
 800684a:	4013      	ands	r3, r2
 800684c:	00db      	lsls	r3, r3, #3
 800684e:	220f      	movs	r2, #15
 8006850:	409a      	lsls	r2, r3
 8006852:	0013      	movs	r3, r2
 8006854:	43da      	mvns	r2, r3
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	4013      	ands	r3, r2
 800685a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	23a0      	movs	r3, #160	; 0xa0
 8006860:	05db      	lsls	r3, r3, #23
 8006862:	429a      	cmp	r2, r3
 8006864:	d013      	beq.n	800688e <HAL_GPIO_Init+0x1ca>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a45      	ldr	r2, [pc, #276]	; (8006980 <HAL_GPIO_Init+0x2bc>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00d      	beq.n	800688a <HAL_GPIO_Init+0x1c6>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a44      	ldr	r2, [pc, #272]	; (8006984 <HAL_GPIO_Init+0x2c0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d007      	beq.n	8006886 <HAL_GPIO_Init+0x1c2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a43      	ldr	r2, [pc, #268]	; (8006988 <HAL_GPIO_Init+0x2c4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d101      	bne.n	8006882 <HAL_GPIO_Init+0x1be>
 800687e:	2303      	movs	r3, #3
 8006880:	e006      	b.n	8006890 <HAL_GPIO_Init+0x1cc>
 8006882:	2305      	movs	r3, #5
 8006884:	e004      	b.n	8006890 <HAL_GPIO_Init+0x1cc>
 8006886:	2302      	movs	r3, #2
 8006888:	e002      	b.n	8006890 <HAL_GPIO_Init+0x1cc>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <HAL_GPIO_Init+0x1cc>
 800688e:	2300      	movs	r3, #0
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	2103      	movs	r1, #3
 8006894:	400a      	ands	r2, r1
 8006896:	00d2      	lsls	r2, r2, #3
 8006898:	4093      	lsls	r3, r2
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	4313      	orrs	r3, r2
 800689e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80068a0:	4936      	ldr	r1, [pc, #216]	; (800697c <HAL_GPIO_Init+0x2b8>)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	089b      	lsrs	r3, r3, #2
 80068a6:	3318      	adds	r3, #24
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80068ae:	4a33      	ldr	r2, [pc, #204]	; (800697c <HAL_GPIO_Init+0x2b8>)
 80068b0:	2380      	movs	r3, #128	; 0x80
 80068b2:	58d3      	ldr	r3, [r2, r3]
 80068b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	43da      	mvns	r2, r3
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	4013      	ands	r3, r2
 80068be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685a      	ldr	r2, [r3, #4]
 80068c4:	2380      	movs	r3, #128	; 0x80
 80068c6:	025b      	lsls	r3, r3, #9
 80068c8:	4013      	ands	r3, r2
 80068ca:	d003      	beq.n	80068d4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068d4:	4929      	ldr	r1, [pc, #164]	; (800697c <HAL_GPIO_Init+0x2b8>)
 80068d6:	2280      	movs	r2, #128	; 0x80
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80068dc:	4a27      	ldr	r2, [pc, #156]	; (800697c <HAL_GPIO_Init+0x2b8>)
 80068de:	2384      	movs	r3, #132	; 0x84
 80068e0:	58d3      	ldr	r3, [r2, r3]
 80068e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	43da      	mvns	r2, r3
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	4013      	ands	r3, r2
 80068ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	2380      	movs	r3, #128	; 0x80
 80068f4:	029b      	lsls	r3, r3, #10
 80068f6:	4013      	ands	r3, r2
 80068f8:	d003      	beq.n	8006902 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006902:	491e      	ldr	r1, [pc, #120]	; (800697c <HAL_GPIO_Init+0x2b8>)
 8006904:	2284      	movs	r2, #132	; 0x84
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800690a:	4b1c      	ldr	r3, [pc, #112]	; (800697c <HAL_GPIO_Init+0x2b8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	43da      	mvns	r2, r3
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	4013      	ands	r3, r2
 8006918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	2380      	movs	r3, #128	; 0x80
 8006920:	035b      	lsls	r3, r3, #13
 8006922:	4013      	ands	r3, r2
 8006924:	d003      	beq.n	800692e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <HAL_GPIO_Init+0x2b8>)
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006934:	4b11      	ldr	r3, [pc, #68]	; (800697c <HAL_GPIO_Init+0x2b8>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	43da      	mvns	r2, r3
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4013      	ands	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	2380      	movs	r3, #128	; 0x80
 800694a:	039b      	lsls	r3, r3, #14
 800694c:	4013      	ands	r3, r2
 800694e:	d003      	beq.n	8006958 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006958:	4b08      	ldr	r3, [pc, #32]	; (800697c <HAL_GPIO_Init+0x2b8>)
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	3301      	adds	r3, #1
 8006962:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	40da      	lsrs	r2, r3
 800696c:	1e13      	subs	r3, r2, #0
 800696e:	d000      	beq.n	8006972 <HAL_GPIO_Init+0x2ae>
 8006970:	e6b0      	b.n	80066d4 <HAL_GPIO_Init+0x10>
  }
}
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	46c0      	nop			; (mov r8, r8)
 8006976:	46bd      	mov	sp, r7
 8006978:	b006      	add	sp, #24
 800697a:	bd80      	pop	{r7, pc}
 800697c:	40021800 	.word	0x40021800
 8006980:	50000400 	.word	0x50000400
 8006984:	50000800 	.word	0x50000800
 8006988:	50000c00 	.word	0x50000c00

0800698c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e082      	b.n	8006aa4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2241      	movs	r2, #65	; 0x41
 80069a2:	5c9b      	ldrb	r3, [r3, r2]
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d107      	bne.n	80069ba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2240      	movs	r2, #64	; 0x40
 80069ae:	2100      	movs	r1, #0
 80069b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	0018      	movs	r0, r3
 80069b6:	f7fe fba1 	bl	80050fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2241      	movs	r2, #65	; 0x41
 80069be:	2124      	movs	r1, #36	; 0x24
 80069c0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2101      	movs	r1, #1
 80069ce:	438a      	bics	r2, r1
 80069d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685a      	ldr	r2, [r3, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4934      	ldr	r1, [pc, #208]	; (8006aac <HAL_I2C_Init+0x120>)
 80069dc:	400a      	ands	r2, r1
 80069de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4931      	ldr	r1, [pc, #196]	; (8006ab0 <HAL_I2C_Init+0x124>)
 80069ec:	400a      	ands	r2, r1
 80069ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d108      	bne.n	8006a0a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2180      	movs	r1, #128	; 0x80
 8006a02:	0209      	lsls	r1, r1, #8
 8006a04:	430a      	orrs	r2, r1
 8006a06:	609a      	str	r2, [r3, #8]
 8006a08:	e007      	b.n	8006a1a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2184      	movs	r1, #132	; 0x84
 8006a14:	0209      	lsls	r1, r1, #8
 8006a16:	430a      	orrs	r2, r1
 8006a18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d104      	bne.n	8006a2c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2280      	movs	r2, #128	; 0x80
 8006a28:	0112      	lsls	r2, r2, #4
 8006a2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	491f      	ldr	r1, [pc, #124]	; (8006ab4 <HAL_I2C_Init+0x128>)
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	491a      	ldr	r1, [pc, #104]	; (8006ab0 <HAL_I2C_Init+0x124>)
 8006a48:	400a      	ands	r2, r1
 8006a4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	691a      	ldr	r2, [r3, #16]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	431a      	orrs	r2, r3
 8006a56:	0011      	movs	r1, r2
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	021a      	lsls	r2, r3, #8
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	69d9      	ldr	r1, [r3, #28]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1a      	ldr	r2, [r3, #32]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2101      	movs	r1, #1
 8006a82:	430a      	orrs	r2, r1
 8006a84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2241      	movs	r2, #65	; 0x41
 8006a90:	2120      	movs	r1, #32
 8006a92:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2242      	movs	r2, #66	; 0x42
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b002      	add	sp, #8
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	f0ffffff 	.word	0xf0ffffff
 8006ab0:	ffff7fff 	.word	0xffff7fff
 8006ab4:	02008000 	.word	0x02008000

08006ab8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab8:	b590      	push	{r4, r7, lr}
 8006aba:	b089      	sub	sp, #36	; 0x24
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	0008      	movs	r0, r1
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	0019      	movs	r1, r3
 8006ac6:	230a      	movs	r3, #10
 8006ac8:	18fb      	adds	r3, r7, r3
 8006aca:	1c02      	adds	r2, r0, #0
 8006acc:	801a      	strh	r2, [r3, #0]
 8006ace:	2308      	movs	r3, #8
 8006ad0:	18fb      	adds	r3, r7, r3
 8006ad2:	1c0a      	adds	r2, r1, #0
 8006ad4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2241      	movs	r2, #65	; 0x41
 8006ada:	5c9b      	ldrb	r3, [r3, r2]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d000      	beq.n	8006ae4 <HAL_I2C_Master_Transmit+0x2c>
 8006ae2:	e0e7      	b.n	8006cb4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2240      	movs	r2, #64	; 0x40
 8006ae8:	5c9b      	ldrb	r3, [r3, r2]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d101      	bne.n	8006af2 <HAL_I2C_Master_Transmit+0x3a>
 8006aee:	2302      	movs	r3, #2
 8006af0:	e0e1      	b.n	8006cb6 <HAL_I2C_Master_Transmit+0x1fe>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2240      	movs	r2, #64	; 0x40
 8006af6:	2101      	movs	r1, #1
 8006af8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006afa:	f7fe ff99 	bl	8005a30 <HAL_GetTick>
 8006afe:	0003      	movs	r3, r0
 8006b00:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b02:	2380      	movs	r3, #128	; 0x80
 8006b04:	0219      	lsls	r1, r3, #8
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	2319      	movs	r3, #25
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f000 fe76 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 8006b14:	1e03      	subs	r3, r0, #0
 8006b16:	d001      	beq.n	8006b1c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e0cc      	b.n	8006cb6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2241      	movs	r2, #65	; 0x41
 8006b20:	2121      	movs	r1, #33	; 0x21
 8006b22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2242      	movs	r2, #66	; 0x42
 8006b28:	2110      	movs	r1, #16
 8006b2a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2208      	movs	r2, #8
 8006b3c:	18ba      	adds	r2, r7, r2
 8006b3e:	8812      	ldrh	r2, [r2, #0]
 8006b40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2bff      	cmp	r3, #255	; 0xff
 8006b50:	d911      	bls.n	8006b76 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	22ff      	movs	r2, #255	; 0xff
 8006b56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	2380      	movs	r3, #128	; 0x80
 8006b60:	045c      	lsls	r4, r3, #17
 8006b62:	230a      	movs	r3, #10
 8006b64:	18fb      	adds	r3, r7, r3
 8006b66:	8819      	ldrh	r1, [r3, #0]
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	4b55      	ldr	r3, [pc, #340]	; (8006cc0 <HAL_I2C_Master_Transmit+0x208>)
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	0023      	movs	r3, r4
 8006b70:	f000 ff66 	bl	8007a40 <I2C_TransferConfig>
 8006b74:	e075      	b.n	8006c62 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	2380      	movs	r3, #128	; 0x80
 8006b88:	049c      	lsls	r4, r3, #18
 8006b8a:	230a      	movs	r3, #10
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	8819      	ldrh	r1, [r3, #0]
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	4b4b      	ldr	r3, [pc, #300]	; (8006cc0 <HAL_I2C_Master_Transmit+0x208>)
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	0023      	movs	r3, r4
 8006b98:	f000 ff52 	bl	8007a40 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006b9c:	e061      	b.n	8006c62 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f000 fe6a 	bl	800787e <I2C_WaitOnTXISFlagUntilTimeout>
 8006baa:	1e03      	subs	r3, r0, #0
 8006bac:	d001      	beq.n	8006bb2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e081      	b.n	8006cb6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	781a      	ldrb	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d03a      	beq.n	8006c62 <HAL_I2C_Master_Transmit+0x1aa>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d136      	bne.n	8006c62 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	0013      	movs	r3, r2
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2180      	movs	r1, #128	; 0x80
 8006c02:	f000 fdfd 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 8006c06:	1e03      	subs	r3, r0, #0
 8006c08:	d001      	beq.n	8006c0e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e053      	b.n	8006cb6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	2bff      	cmp	r3, #255	; 0xff
 8006c16:	d911      	bls.n	8006c3c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	22ff      	movs	r2, #255	; 0xff
 8006c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	2380      	movs	r3, #128	; 0x80
 8006c26:	045c      	lsls	r4, r3, #17
 8006c28:	230a      	movs	r3, #10
 8006c2a:	18fb      	adds	r3, r7, r3
 8006c2c:	8819      	ldrh	r1, [r3, #0]
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	2300      	movs	r3, #0
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	0023      	movs	r3, r4
 8006c36:	f000 ff03 	bl	8007a40 <I2C_TransferConfig>
 8006c3a:	e012      	b.n	8006c62 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	049c      	lsls	r4, r3, #18
 8006c50:	230a      	movs	r3, #10
 8006c52:	18fb      	adds	r3, r7, r3
 8006c54:	8819      	ldrh	r1, [r3, #0]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	0023      	movs	r3, r4
 8006c5e:	f000 feef 	bl	8007a40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d198      	bne.n	8006b9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	0018      	movs	r0, r3
 8006c74:	f000 fe42 	bl	80078fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c78:	1e03      	subs	r3, r0, #0
 8006c7a:	d001      	beq.n	8006c80 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e01a      	b.n	8006cb6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2220      	movs	r2, #32
 8006c86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	490c      	ldr	r1, [pc, #48]	; (8006cc4 <HAL_I2C_Master_Transmit+0x20c>)
 8006c94:	400a      	ands	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2241      	movs	r2, #65	; 0x41
 8006c9c:	2120      	movs	r1, #32
 8006c9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2242      	movs	r2, #66	; 0x42
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2240      	movs	r2, #64	; 0x40
 8006cac:	2100      	movs	r1, #0
 8006cae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	e000      	b.n	8006cb6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8006cb4:	2302      	movs	r3, #2
  }
}
 8006cb6:	0018      	movs	r0, r3
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	b007      	add	sp, #28
 8006cbc:	bd90      	pop	{r4, r7, pc}
 8006cbe:	46c0      	nop			; (mov r8, r8)
 8006cc0:	80002000 	.word	0x80002000
 8006cc4:	fe00e800 	.word	0xfe00e800

08006cc8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	68f9      	ldr	r1, [r7, #12]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	4798      	blx	r3
  }
}
 8006cf4:	46c0      	nop			; (mov r8, r8)
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	b004      	add	sp, #16
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	0a1b      	lsrs	r3, r3, #8
 8006d18:	001a      	movs	r2, r3
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	d010      	beq.n	8006d42 <HAL_I2C_ER_IRQHandler+0x46>
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	09db      	lsrs	r3, r3, #7
 8006d24:	001a      	movs	r2, r3
 8006d26:	2301      	movs	r3, #1
 8006d28:	4013      	ands	r3, r2
 8006d2a:	d00a      	beq.n	8006d42 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d30:	2201      	movs	r2, #1
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2280      	movs	r2, #128	; 0x80
 8006d3e:	0052      	lsls	r2, r2, #1
 8006d40:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	0a9b      	lsrs	r3, r3, #10
 8006d46:	001a      	movs	r2, r3
 8006d48:	2301      	movs	r3, #1
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	d010      	beq.n	8006d70 <HAL_I2C_ER_IRQHandler+0x74>
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	09db      	lsrs	r3, r3, #7
 8006d52:	001a      	movs	r2, r3
 8006d54:	2301      	movs	r3, #1
 8006d56:	4013      	ands	r3, r2
 8006d58:	d00a      	beq.n	8006d70 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5e:	2208      	movs	r2, #8
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2280      	movs	r2, #128	; 0x80
 8006d6c:	00d2      	lsls	r2, r2, #3
 8006d6e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	0a5b      	lsrs	r3, r3, #9
 8006d74:	001a      	movs	r2, r3
 8006d76:	2301      	movs	r3, #1
 8006d78:	4013      	ands	r3, r2
 8006d7a:	d010      	beq.n	8006d9e <HAL_I2C_ER_IRQHandler+0xa2>
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	09db      	lsrs	r3, r3, #7
 8006d80:	001a      	movs	r2, r3
 8006d82:	2301      	movs	r3, #1
 8006d84:	4013      	ands	r3, r2
 8006d86:	d00a      	beq.n	8006d9e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2280      	movs	r2, #128	; 0x80
 8006d9a:	0092      	lsls	r2, r2, #2
 8006d9c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	220b      	movs	r2, #11
 8006da8:	4013      	ands	r3, r2
 8006daa:	d005      	beq.n	8006db8 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	0011      	movs	r1, r2
 8006db2:	0018      	movs	r0, r3
 8006db4:	f000 fbd8 	bl	8007568 <I2C_ITError>
  }
}
 8006db8:	46c0      	nop			; (mov r8, r8)
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	b006      	add	sp, #24
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006dc8:	46c0      	nop			; (mov r8, r8)
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b002      	add	sp, #8
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006dd8:	46c0      	nop			; (mov r8, r8)
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	b002      	add	sp, #8
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	0008      	movs	r0, r1
 8006dea:	0011      	movs	r1, r2
 8006dec:	1cfb      	adds	r3, r7, #3
 8006dee:	1c02      	adds	r2, r0, #0
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	003b      	movs	r3, r7
 8006df4:	1c0a      	adds	r2, r1, #0
 8006df6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006df8:	46c0      	nop			; (mov r8, r8)
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	b002      	add	sp, #8
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006e08:	46c0      	nop			; (mov r8, r8)
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	b002      	add	sp, #8
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006e18:	46c0      	nop			; (mov r8, r8)
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	b002      	add	sp, #8
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006e28:	46c0      	nop			; (mov r8, r8)
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	b002      	add	sp, #8
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2240      	movs	r2, #64	; 0x40
 8006e4a:	5c9b      	ldrb	r3, [r3, r2]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <I2C_Slave_ISR_IT+0x24>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e0fa      	b.n	800704a <I2C_Slave_ISR_IT+0x21a>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2240      	movs	r2, #64	; 0x40
 8006e58:	2101      	movs	r1, #1
 8006e5a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	001a      	movs	r2, r3
 8006e62:	2301      	movs	r3, #1
 8006e64:	4013      	ands	r3, r2
 8006e66:	d00b      	beq.n	8006e80 <I2C_Slave_ISR_IT+0x50>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	095b      	lsrs	r3, r3, #5
 8006e6c:	001a      	movs	r2, r3
 8006e6e:	2301      	movs	r3, #1
 8006e70:	4013      	ands	r3, r2
 8006e72:	d005      	beq.n	8006e80 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	0011      	movs	r1, r2
 8006e7a:	0018      	movs	r0, r3
 8006e7c:	f000 f9f6 	bl	800726c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	091b      	lsrs	r3, r3, #4
 8006e84:	001a      	movs	r2, r3
 8006e86:	2301      	movs	r3, #1
 8006e88:	4013      	ands	r3, r2
 8006e8a:	d054      	beq.n	8006f36 <I2C_Slave_ISR_IT+0x106>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	091b      	lsrs	r3, r3, #4
 8006e90:	001a      	movs	r2, r3
 8006e92:	2301      	movs	r3, #1
 8006e94:	4013      	ands	r3, r2
 8006e96:	d04e      	beq.n	8006f36 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d12d      	bne.n	8006efe <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2241      	movs	r2, #65	; 0x41
 8006ea6:	5c9b      	ldrb	r3, [r3, r2]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b28      	cmp	r3, #40	; 0x28
 8006eac:	d10b      	bne.n	8006ec6 <I2C_Slave_ISR_IT+0x96>
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	2380      	movs	r3, #128	; 0x80
 8006eb2:	049b      	lsls	r3, r3, #18
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d106      	bne.n	8006ec6 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	0011      	movs	r1, r2
 8006ebe:	0018      	movs	r0, r3
 8006ec0:	f000 faf8 	bl	80074b4 <I2C_ITListenCplt>
 8006ec4:	e036      	b.n	8006f34 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2241      	movs	r2, #65	; 0x41
 8006eca:	5c9b      	ldrb	r3, [r3, r2]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b29      	cmp	r3, #41	; 0x29
 8006ed0:	d110      	bne.n	8006ef4 <I2C_Slave_ISR_IT+0xc4>
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	4a5f      	ldr	r2, [pc, #380]	; (8007054 <I2C_Slave_ISR_IT+0x224>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00c      	beq.n	8006ef4 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2210      	movs	r2, #16
 8006ee0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f000 fc4a 	bl	800777e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	0018      	movs	r0, r3
 8006eee:	f000 f957 	bl	80071a0 <I2C_ITSlaveSeqCplt>
 8006ef2:	e01f      	b.n	8006f34 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2210      	movs	r2, #16
 8006efa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006efc:	e09d      	b.n	800703a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2210      	movs	r2, #16
 8006f04:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0a:	2204      	movs	r2, #4
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <I2C_Slave_ISR_IT+0xf4>
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	2380      	movs	r3, #128	; 0x80
 8006f1c:	045b      	lsls	r3, r3, #17
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d000      	beq.n	8006f24 <I2C_Slave_ISR_IT+0xf4>
 8006f22:	e08a      	b.n	800703a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	0011      	movs	r1, r2
 8006f2c:	0018      	movs	r0, r3
 8006f2e:	f000 fb1b 	bl	8007568 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006f32:	e082      	b.n	800703a <I2C_Slave_ISR_IT+0x20a>
 8006f34:	e081      	b.n	800703a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	089b      	lsrs	r3, r3, #2
 8006f3a:	001a      	movs	r2, r3
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	4013      	ands	r3, r2
 8006f40:	d031      	beq.n	8006fa6 <I2C_Slave_ISR_IT+0x176>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	089b      	lsrs	r3, r3, #2
 8006f46:	001a      	movs	r2, r3
 8006f48:	2301      	movs	r3, #1
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	d02b      	beq.n	8006fa6 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d018      	beq.n	8006f8a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	b2d2      	uxtb	r2, r2
 8006f64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f74:	3b01      	subs	r3, #1
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d154      	bne.n	800703e <I2C_Slave_ISR_IT+0x20e>
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	4a2f      	ldr	r2, [pc, #188]	; (8007054 <I2C_Slave_ISR_IT+0x224>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d050      	beq.n	800703e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f000 f8fe 	bl	80071a0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006fa4:	e04b      	b.n	800703e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	08db      	lsrs	r3, r3, #3
 8006faa:	001a      	movs	r2, r3
 8006fac:	2301      	movs	r3, #1
 8006fae:	4013      	ands	r3, r2
 8006fb0:	d00c      	beq.n	8006fcc <I2C_Slave_ISR_IT+0x19c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	08db      	lsrs	r3, r3, #3
 8006fb6:	001a      	movs	r2, r3
 8006fb8:	2301      	movs	r3, #1
 8006fba:	4013      	ands	r3, r2
 8006fbc:	d006      	beq.n	8006fcc <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	0011      	movs	r1, r2
 8006fc4:	0018      	movs	r0, r3
 8006fc6:	f000 f847 	bl	8007058 <I2C_ITAddrCplt>
 8006fca:	e039      	b.n	8007040 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	001a      	movs	r2, r3
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	d033      	beq.n	8007040 <I2C_Slave_ISR_IT+0x210>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	085b      	lsrs	r3, r3, #1
 8006fdc:	001a      	movs	r2, r3
 8006fde:	2301      	movs	r3, #1
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	d02d      	beq.n	8007040 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d018      	beq.n	8007020 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	781a      	ldrb	r2, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007008:	b29b      	uxth	r3, r3
 800700a:	3b01      	subs	r3, #1
 800700c:	b29a      	uxth	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	851a      	strh	r2, [r3, #40]	; 0x28
 800701e:	e00f      	b.n	8007040 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	2380      	movs	r3, #128	; 0x80
 8007024:	045b      	lsls	r3, r3, #17
 8007026:	429a      	cmp	r2, r3
 8007028:	d002      	beq.n	8007030 <I2C_Slave_ISR_IT+0x200>
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d107      	bne.n	8007040 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	0018      	movs	r0, r3
 8007034:	f000 f8b4 	bl	80071a0 <I2C_ITSlaveSeqCplt>
 8007038:	e002      	b.n	8007040 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800703a:	46c0      	nop			; (mov r8, r8)
 800703c:	e000      	b.n	8007040 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800703e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2240      	movs	r2, #64	; 0x40
 8007044:	2100      	movs	r1, #0
 8007046:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	0018      	movs	r0, r3
 800704c:	46bd      	mov	sp, r7
 800704e:	b006      	add	sp, #24
 8007050:	bd80      	pop	{r7, pc}
 8007052:	46c0      	nop			; (mov r8, r8)
 8007054:	ffff0000 	.word	0xffff0000

08007058 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007058:	b5b0      	push	{r4, r5, r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2241      	movs	r2, #65	; 0x41
 8007066:	5c9b      	ldrb	r3, [r3, r2]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	001a      	movs	r2, r3
 800706c:	2328      	movs	r3, #40	; 0x28
 800706e:	4013      	ands	r3, r2
 8007070:	2b28      	cmp	r3, #40	; 0x28
 8007072:	d000      	beq.n	8007076 <I2C_ITAddrCplt+0x1e>
 8007074:	e088      	b.n	8007188 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	0c1b      	lsrs	r3, r3, #16
 800707e:	b2da      	uxtb	r2, r3
 8007080:	250f      	movs	r5, #15
 8007082:	197b      	adds	r3, r7, r5
 8007084:	2101      	movs	r1, #1
 8007086:	400a      	ands	r2, r1
 8007088:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	0c1b      	lsrs	r3, r3, #16
 8007092:	b29a      	uxth	r2, r3
 8007094:	200c      	movs	r0, #12
 8007096:	183b      	adds	r3, r7, r0
 8007098:	21fe      	movs	r1, #254	; 0xfe
 800709a:	400a      	ands	r2, r1
 800709c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	240a      	movs	r4, #10
 80070a8:	193b      	adds	r3, r7, r4
 80070aa:	0592      	lsls	r2, r2, #22
 80070ac:	0d92      	lsrs	r2, r2, #22
 80070ae:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	2308      	movs	r3, #8
 80070ba:	18fb      	adds	r3, r7, r3
 80070bc:	21fe      	movs	r1, #254	; 0xfe
 80070be:	400a      	ands	r2, r1
 80070c0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d148      	bne.n	800715c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80070ca:	0021      	movs	r1, r4
 80070cc:	187b      	adds	r3, r7, r1
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	09db      	lsrs	r3, r3, #7
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	183b      	adds	r3, r7, r0
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	4053      	eors	r3, r2
 80070da:	b29b      	uxth	r3, r3
 80070dc:	001a      	movs	r2, r3
 80070de:	2306      	movs	r3, #6
 80070e0:	4013      	ands	r3, r2
 80070e2:	d120      	bne.n	8007126 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80070e4:	183b      	adds	r3, r7, r0
 80070e6:	187a      	adds	r2, r7, r1
 80070e8:	8812      	ldrh	r2, [r2, #0]
 80070ea:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d14c      	bne.n	8007198 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2208      	movs	r2, #8
 800710a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2240      	movs	r2, #64	; 0x40
 8007110:	2100      	movs	r1, #0
 8007112:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007114:	183b      	adds	r3, r7, r0
 8007116:	881a      	ldrh	r2, [r3, #0]
 8007118:	197b      	adds	r3, r7, r5
 800711a:	7819      	ldrb	r1, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	0018      	movs	r0, r3
 8007120:	f7ff fe5e 	bl	8006de0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007124:	e038      	b.n	8007198 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8007126:	240c      	movs	r4, #12
 8007128:	193b      	adds	r3, r7, r4
 800712a:	2208      	movs	r2, #8
 800712c:	18ba      	adds	r2, r7, r2
 800712e:	8812      	ldrh	r2, [r2, #0]
 8007130:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007132:	2380      	movs	r3, #128	; 0x80
 8007134:	021a      	lsls	r2, r3, #8
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	0011      	movs	r1, r2
 800713a:	0018      	movs	r0, r3
 800713c:	f000 fcb6 	bl	8007aac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2240      	movs	r2, #64	; 0x40
 8007144:	2100      	movs	r1, #0
 8007146:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007148:	193b      	adds	r3, r7, r4
 800714a:	881a      	ldrh	r2, [r3, #0]
 800714c:	230f      	movs	r3, #15
 800714e:	18fb      	adds	r3, r7, r3
 8007150:	7819      	ldrb	r1, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	0018      	movs	r0, r3
 8007156:	f7ff fe43 	bl	8006de0 <HAL_I2C_AddrCallback>
}
 800715a:	e01d      	b.n	8007198 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800715c:	2380      	movs	r3, #128	; 0x80
 800715e:	021a      	lsls	r2, r3, #8
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	0011      	movs	r1, r2
 8007164:	0018      	movs	r0, r3
 8007166:	f000 fca1 	bl	8007aac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2240      	movs	r2, #64	; 0x40
 800716e:	2100      	movs	r1, #0
 8007170:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007172:	230c      	movs	r3, #12
 8007174:	18fb      	adds	r3, r7, r3
 8007176:	881a      	ldrh	r2, [r3, #0]
 8007178:	230f      	movs	r3, #15
 800717a:	18fb      	adds	r3, r7, r3
 800717c:	7819      	ldrb	r1, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	0018      	movs	r0, r3
 8007182:	f7ff fe2d 	bl	8006de0 <HAL_I2C_AddrCallback>
}
 8007186:	e007      	b.n	8007198 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2208      	movs	r2, #8
 800718e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2240      	movs	r2, #64	; 0x40
 8007194:	2100      	movs	r1, #0
 8007196:	5499      	strb	r1, [r3, r2]
}
 8007198:	46c0      	nop			; (mov r8, r8)
 800719a:	46bd      	mov	sp, r7
 800719c:	b004      	add	sp, #16
 800719e:	bdb0      	pop	{r4, r5, r7, pc}

080071a0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2242      	movs	r2, #66	; 0x42
 80071b4:	2100      	movs	r1, #0
 80071b6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	0b9b      	lsrs	r3, r3, #14
 80071bc:	001a      	movs	r2, r3
 80071be:	2301      	movs	r3, #1
 80071c0:	4013      	ands	r3, r2
 80071c2:	d008      	beq.n	80071d6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4925      	ldr	r1, [pc, #148]	; (8007264 <I2C_ITSlaveSeqCplt+0xc4>)
 80071d0:	400a      	ands	r2, r1
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	e00d      	b.n	80071f2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	0bdb      	lsrs	r3, r3, #15
 80071da:	001a      	movs	r2, r3
 80071dc:	2301      	movs	r3, #1
 80071de:	4013      	ands	r3, r2
 80071e0:	d007      	beq.n	80071f2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	491e      	ldr	r1, [pc, #120]	; (8007268 <I2C_ITSlaveSeqCplt+0xc8>)
 80071ee:	400a      	ands	r2, r1
 80071f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2241      	movs	r2, #65	; 0x41
 80071f6:	5c9b      	ldrb	r3, [r3, r2]
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b29      	cmp	r3, #41	; 0x29
 80071fc:	d114      	bne.n	8007228 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2241      	movs	r2, #65	; 0x41
 8007202:	2128      	movs	r1, #40	; 0x28
 8007204:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2221      	movs	r2, #33	; 0x21
 800720a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2101      	movs	r1, #1
 8007210:	0018      	movs	r0, r3
 8007212:	f000 fc4b 	bl	8007aac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2240      	movs	r2, #64	; 0x40
 800721a:	2100      	movs	r1, #0
 800721c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	0018      	movs	r0, r3
 8007222:	f7ff fdcd 	bl	8006dc0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007226:	e019      	b.n	800725c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2241      	movs	r2, #65	; 0x41
 800722c:	5c9b      	ldrb	r3, [r3, r2]
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b2a      	cmp	r3, #42	; 0x2a
 8007232:	d113      	bne.n	800725c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2241      	movs	r2, #65	; 0x41
 8007238:	2128      	movs	r1, #40	; 0x28
 800723a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2222      	movs	r2, #34	; 0x22
 8007240:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2102      	movs	r1, #2
 8007246:	0018      	movs	r0, r3
 8007248:	f000 fc30 	bl	8007aac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2240      	movs	r2, #64	; 0x40
 8007250:	2100      	movs	r1, #0
 8007252:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	0018      	movs	r0, r3
 8007258:	f7ff fdba 	bl	8006dd0 <HAL_I2C_SlaveRxCpltCallback>
}
 800725c:	46c0      	nop			; (mov r8, r8)
 800725e:	46bd      	mov	sp, r7
 8007260:	b004      	add	sp, #16
 8007262:	bd80      	pop	{r7, pc}
 8007264:	ffffbfff 	.word	0xffffbfff
 8007268:	ffff7fff 	.word	0xffff7fff

0800726c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007282:	200f      	movs	r0, #15
 8007284:	183b      	adds	r3, r7, r0
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	2141      	movs	r1, #65	; 0x41
 800728a:	5c52      	ldrb	r2, [r2, r1]
 800728c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2220      	movs	r2, #32
 8007294:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007296:	183b      	adds	r3, r7, r0
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b21      	cmp	r3, #33	; 0x21
 800729c:	d003      	beq.n	80072a6 <I2C_ITSlaveCplt+0x3a>
 800729e:	183b      	adds	r3, r7, r0
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	2b29      	cmp	r3, #41	; 0x29
 80072a4:	d109      	bne.n	80072ba <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80072a6:	4a7d      	ldr	r2, [pc, #500]	; (800749c <I2C_ITSlaveCplt+0x230>)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	0011      	movs	r1, r2
 80072ac:	0018      	movs	r0, r3
 80072ae:	f000 fbfd 	bl	8007aac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2221      	movs	r2, #33	; 0x21
 80072b6:	631a      	str	r2, [r3, #48]	; 0x30
 80072b8:	e011      	b.n	80072de <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80072ba:	220f      	movs	r2, #15
 80072bc:	18bb      	adds	r3, r7, r2
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b22      	cmp	r3, #34	; 0x22
 80072c2:	d003      	beq.n	80072cc <I2C_ITSlaveCplt+0x60>
 80072c4:	18bb      	adds	r3, r7, r2
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b2a      	cmp	r3, #42	; 0x2a
 80072ca:	d108      	bne.n	80072de <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80072cc:	4a74      	ldr	r2, [pc, #464]	; (80074a0 <I2C_ITSlaveCplt+0x234>)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	0011      	movs	r1, r2
 80072d2:	0018      	movs	r0, r3
 80072d4:	f000 fbea 	bl	8007aac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2222      	movs	r2, #34	; 0x22
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2180      	movs	r1, #128	; 0x80
 80072ea:	0209      	lsls	r1, r1, #8
 80072ec:	430a      	orrs	r2, r1
 80072ee:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	496a      	ldr	r1, [pc, #424]	; (80074a4 <I2C_ITSlaveCplt+0x238>)
 80072fc:	400a      	ands	r2, r1
 80072fe:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	0018      	movs	r0, r3
 8007304:	f000 fa3b 	bl	800777e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	0b9b      	lsrs	r3, r3, #14
 800730c:	001a      	movs	r2, r3
 800730e:	2301      	movs	r3, #1
 8007310:	4013      	ands	r3, r2
 8007312:	d013      	beq.n	800733c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4962      	ldr	r1, [pc, #392]	; (80074a8 <I2C_ITSlaveCplt+0x23c>)
 8007320:	400a      	ands	r2, r1
 8007322:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007328:	2b00      	cmp	r3, #0
 800732a:	d020      	beq.n	800736e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	b29a      	uxth	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	855a      	strh	r2, [r3, #42]	; 0x2a
 800733a:	e018      	b.n	800736e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	0bdb      	lsrs	r3, r3, #15
 8007340:	001a      	movs	r2, r3
 8007342:	2301      	movs	r3, #1
 8007344:	4013      	ands	r3, r2
 8007346:	d012      	beq.n	800736e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4956      	ldr	r1, [pc, #344]	; (80074ac <I2C_ITSlaveCplt+0x240>)
 8007354:	400a      	ands	r2, r1
 8007356:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735c:	2b00      	cmp	r3, #0
 800735e:	d006      	beq.n	800736e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	b29a      	uxth	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	089b      	lsrs	r3, r3, #2
 8007372:	001a      	movs	r2, r3
 8007374:	2301      	movs	r3, #1
 8007376:	4013      	ands	r3, r2
 8007378:	d020      	beq.n	80073bc <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2204      	movs	r2, #4
 800737e:	4393      	bics	r3, r2
 8007380:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	b2d2      	uxtb	r2, r2
 800738e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00c      	beq.n	80073bc <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d005      	beq.n	80073d2 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ca:	2204      	movs	r2, #4
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2242      	movs	r2, #66	; 0x42
 80073d6:	2100      	movs	r1, #0
 80073d8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d013      	beq.n	8007410 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	0011      	movs	r1, r2
 80073f0:	0018      	movs	r0, r3
 80073f2:	f000 f8b9 	bl	8007568 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2241      	movs	r2, #65	; 0x41
 80073fa:	5c9b      	ldrb	r3, [r3, r2]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b28      	cmp	r3, #40	; 0x28
 8007400:	d147      	bne.n	8007492 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	0011      	movs	r1, r2
 8007408:	0018      	movs	r0, r3
 800740a:	f000 f853 	bl	80074b4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800740e:	e040      	b.n	8007492 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	4a26      	ldr	r2, [pc, #152]	; (80074b0 <I2C_ITSlaveCplt+0x244>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d016      	beq.n	8007448 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	0018      	movs	r0, r3
 800741e:	f7ff febf 	bl	80071a0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a22      	ldr	r2, [pc, #136]	; (80074b0 <I2C_ITSlaveCplt+0x244>)
 8007426:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2241      	movs	r2, #65	; 0x41
 800742c:	2120      	movs	r1, #32
 800742e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2240      	movs	r2, #64	; 0x40
 800743a:	2100      	movs	r1, #0
 800743c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	0018      	movs	r0, r3
 8007442:	f7ff fcdd 	bl	8006e00 <HAL_I2C_ListenCpltCallback>
}
 8007446:	e024      	b.n	8007492 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2241      	movs	r2, #65	; 0x41
 800744c:	5c9b      	ldrb	r3, [r3, r2]
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b22      	cmp	r3, #34	; 0x22
 8007452:	d10f      	bne.n	8007474 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2241      	movs	r2, #65	; 0x41
 8007458:	2120      	movs	r1, #32
 800745a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2240      	movs	r2, #64	; 0x40
 8007466:	2100      	movs	r1, #0
 8007468:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	0018      	movs	r0, r3
 800746e:	f7ff fcaf 	bl	8006dd0 <HAL_I2C_SlaveRxCpltCallback>
}
 8007472:	e00e      	b.n	8007492 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2241      	movs	r2, #65	; 0x41
 8007478:	2120      	movs	r1, #32
 800747a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2240      	movs	r2, #64	; 0x40
 8007486:	2100      	movs	r1, #0
 8007488:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	0018      	movs	r0, r3
 800748e:	f7ff fc97 	bl	8006dc0 <HAL_I2C_SlaveTxCpltCallback>
}
 8007492:	46c0      	nop			; (mov r8, r8)
 8007494:	46bd      	mov	sp, r7
 8007496:	b006      	add	sp, #24
 8007498:	bd80      	pop	{r7, pc}
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	00008001 	.word	0x00008001
 80074a0:	00008002 	.word	0x00008002
 80074a4:	fe00e800 	.word	0xfe00e800
 80074a8:	ffffbfff 	.word	0xffffbfff
 80074ac:	ffff7fff 	.word	0xffff7fff
 80074b0:	ffff0000 	.word	0xffff0000

080074b4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a27      	ldr	r2, [pc, #156]	; (8007560 <I2C_ITListenCplt+0xac>)
 80074c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2241      	movs	r2, #65	; 0x41
 80074ce:	2120      	movs	r1, #32
 80074d0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2242      	movs	r2, #66	; 0x42
 80074d6:	2100      	movs	r1, #0
 80074d8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	089b      	lsrs	r3, r3, #2
 80074e4:	001a      	movs	r2, r3
 80074e6:	2301      	movs	r3, #1
 80074e8:	4013      	ands	r3, r2
 80074ea:	d022      	beq.n	8007532 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	b2d2      	uxtb	r2, r2
 80074f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007508:	2b00      	cmp	r3, #0
 800750a:	d012      	beq.n	8007532 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751c:	b29b      	uxth	r3, r3
 800751e:	3b01      	subs	r3, #1
 8007520:	b29a      	uxth	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752a:	2204      	movs	r2, #4
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007532:	4a0c      	ldr	r2, [pc, #48]	; (8007564 <I2C_ITListenCplt+0xb0>)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	0011      	movs	r1, r2
 8007538:	0018      	movs	r0, r3
 800753a:	f000 fab7 	bl	8007aac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2210      	movs	r2, #16
 8007544:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2240      	movs	r2, #64	; 0x40
 800754a:	2100      	movs	r1, #0
 800754c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	0018      	movs	r0, r3
 8007552:	f7ff fc55 	bl	8006e00 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007556:	46c0      	nop			; (mov r8, r8)
 8007558:	46bd      	mov	sp, r7
 800755a:	b002      	add	sp, #8
 800755c:	bd80      	pop	{r7, pc}
 800755e:	46c0      	nop			; (mov r8, r8)
 8007560:	ffff0000 	.word	0xffff0000
 8007564:	00008003 	.word	0x00008003

08007568 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007572:	200f      	movs	r0, #15
 8007574:	183b      	adds	r3, r7, r0
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	2141      	movs	r1, #65	; 0x41
 800757a:	5c52      	ldrb	r2, [r2, r1]
 800757c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2242      	movs	r2, #66	; 0x42
 8007582:	2100      	movs	r1, #0
 8007584:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a62      	ldr	r2, [pc, #392]	; (8007714 <I2C_ITError+0x1ac>)
 800758a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	431a      	orrs	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800759e:	183b      	adds	r3, r7, r0
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	2b28      	cmp	r3, #40	; 0x28
 80075a4:	d007      	beq.n	80075b6 <I2C_ITError+0x4e>
 80075a6:	183b      	adds	r3, r7, r0
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	2b29      	cmp	r3, #41	; 0x29
 80075ac:	d003      	beq.n	80075b6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80075ae:	183b      	adds	r3, r7, r0
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b2a      	cmp	r3, #42	; 0x2a
 80075b4:	d10c      	bne.n	80075d0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2103      	movs	r1, #3
 80075ba:	0018      	movs	r0, r3
 80075bc:	f000 fa76 	bl	8007aac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2241      	movs	r2, #65	; 0x41
 80075c4:	2128      	movs	r1, #40	; 0x28
 80075c6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a53      	ldr	r2, [pc, #332]	; (8007718 <I2C_ITError+0x1b0>)
 80075cc:	635a      	str	r2, [r3, #52]	; 0x34
 80075ce:	e012      	b.n	80075f6 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80075d0:	4a52      	ldr	r2, [pc, #328]	; (800771c <I2C_ITError+0x1b4>)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	0011      	movs	r1, r2
 80075d6:	0018      	movs	r0, r3
 80075d8:	f000 fa68 	bl	8007aac <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2241      	movs	r2, #65	; 0x41
 80075e0:	5c9b      	ldrb	r3, [r3, r2]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b60      	cmp	r3, #96	; 0x60
 80075e6:	d003      	beq.n	80075f0 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2241      	movs	r2, #65	; 0x41
 80075ec:	2120      	movs	r1, #32
 80075ee:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fa:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	2b00      	cmp	r3, #0
 8007602:	d03b      	beq.n	800767c <I2C_ITError+0x114>
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b11      	cmp	r3, #17
 8007608:	d002      	beq.n	8007610 <I2C_ITError+0xa8>
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b21      	cmp	r3, #33	; 0x21
 800760e:	d135      	bne.n	800767c <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	2380      	movs	r3, #128	; 0x80
 8007618:	01db      	lsls	r3, r3, #7
 800761a:	401a      	ands	r2, r3
 800761c:	2380      	movs	r3, #128	; 0x80
 800761e:	01db      	lsls	r3, r3, #7
 8007620:	429a      	cmp	r2, r3
 8007622:	d107      	bne.n	8007634 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	493c      	ldr	r1, [pc, #240]	; (8007720 <I2C_ITError+0x1b8>)
 8007630:	400a      	ands	r2, r1
 8007632:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007638:	0018      	movs	r0, r3
 800763a:	f7fe ffa7 	bl	800658c <HAL_DMA_GetState>
 800763e:	0003      	movs	r3, r0
 8007640:	2b01      	cmp	r3, #1
 8007642:	d016      	beq.n	8007672 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007648:	4a36      	ldr	r2, [pc, #216]	; (8007724 <I2C_ITError+0x1bc>)
 800764a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2240      	movs	r2, #64	; 0x40
 8007650:	2100      	movs	r1, #0
 8007652:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	0018      	movs	r0, r3
 800765a:	f7fe fe7b 	bl	8006354 <HAL_DMA_Abort_IT>
 800765e:	1e03      	subs	r3, r0, #0
 8007660:	d051      	beq.n	8007706 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766c:	0018      	movs	r0, r3
 800766e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007670:	e049      	b.n	8007706 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	0018      	movs	r0, r3
 8007676:	f000 f859 	bl	800772c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800767a:	e044      	b.n	8007706 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007680:	2b00      	cmp	r3, #0
 8007682:	d03b      	beq.n	80076fc <I2C_ITError+0x194>
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b12      	cmp	r3, #18
 8007688:	d002      	beq.n	8007690 <I2C_ITError+0x128>
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2b22      	cmp	r3, #34	; 0x22
 800768e:	d135      	bne.n	80076fc <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	2380      	movs	r3, #128	; 0x80
 8007698:	021b      	lsls	r3, r3, #8
 800769a:	401a      	ands	r2, r3
 800769c:	2380      	movs	r3, #128	; 0x80
 800769e:	021b      	lsls	r3, r3, #8
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d107      	bne.n	80076b4 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	491e      	ldr	r1, [pc, #120]	; (8007728 <I2C_ITError+0x1c0>)
 80076b0:	400a      	ands	r2, r1
 80076b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b8:	0018      	movs	r0, r3
 80076ba:	f7fe ff67 	bl	800658c <HAL_DMA_GetState>
 80076be:	0003      	movs	r3, r0
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d016      	beq.n	80076f2 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c8:	4a16      	ldr	r2, [pc, #88]	; (8007724 <I2C_ITError+0x1bc>)
 80076ca:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2240      	movs	r2, #64	; 0x40
 80076d0:	2100      	movs	r1, #0
 80076d2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d8:	0018      	movs	r0, r3
 80076da:	f7fe fe3b 	bl	8006354 <HAL_DMA_Abort_IT>
 80076de:	1e03      	subs	r3, r0, #0
 80076e0:	d013      	beq.n	800770a <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ec:	0018      	movs	r0, r3
 80076ee:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076f0:	e00b      	b.n	800770a <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	0018      	movs	r0, r3
 80076f6:	f000 f819 	bl	800772c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076fa:	e006      	b.n	800770a <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	0018      	movs	r0, r3
 8007700:	f000 f814 	bl	800772c <I2C_TreatErrorCallback>
  }
}
 8007704:	e002      	b.n	800770c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007706:	46c0      	nop			; (mov r8, r8)
 8007708:	e000      	b.n	800770c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800770a:	46c0      	nop			; (mov r8, r8)
}
 800770c:	46c0      	nop			; (mov r8, r8)
 800770e:	46bd      	mov	sp, r7
 8007710:	b004      	add	sp, #16
 8007712:	bd80      	pop	{r7, pc}
 8007714:	ffff0000 	.word	0xffff0000
 8007718:	08006e31 	.word	0x08006e31
 800771c:	00008003 	.word	0x00008003
 8007720:	ffffbfff 	.word	0xffffbfff
 8007724:	080077c3 	.word	0x080077c3
 8007728:	ffff7fff 	.word	0xffff7fff

0800772c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2241      	movs	r2, #65	; 0x41
 8007738:	5c9b      	ldrb	r3, [r3, r2]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b60      	cmp	r3, #96	; 0x60
 800773e:	d10f      	bne.n	8007760 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2241      	movs	r2, #65	; 0x41
 8007744:	2120      	movs	r1, #32
 8007746:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2240      	movs	r2, #64	; 0x40
 8007752:	2100      	movs	r1, #0
 8007754:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	0018      	movs	r0, r3
 800775a:	f7ff fb61 	bl	8006e20 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800775e:	e00a      	b.n	8007776 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2240      	movs	r2, #64	; 0x40
 800776a:	2100      	movs	r1, #0
 800776c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	0018      	movs	r0, r3
 8007772:	f7ff fb4d 	bl	8006e10 <HAL_I2C_ErrorCallback>
}
 8007776:	46c0      	nop			; (mov r8, r8)
 8007778:	46bd      	mov	sp, r7
 800777a:	b002      	add	sp, #8
 800777c:	bd80      	pop	{r7, pc}

0800777e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	2202      	movs	r2, #2
 800778e:	4013      	ands	r3, r2
 8007790:	2b02      	cmp	r3, #2
 8007792:	d103      	bne.n	800779c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2200      	movs	r2, #0
 800779a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	2201      	movs	r2, #1
 80077a4:	4013      	ands	r3, r2
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d007      	beq.n	80077ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	699a      	ldr	r2, [r3, #24]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2101      	movs	r1, #1
 80077b6:	430a      	orrs	r2, r1
 80077b8:	619a      	str	r2, [r3, #24]
  }
}
 80077ba:	46c0      	nop			; (mov r8, r8)
 80077bc:	46bd      	mov	sp, r7
 80077be:	b002      	add	sp, #8
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d003      	beq.n	80077e0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077dc:	2200      	movs	r2, #0
 80077de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ec:	2200      	movs	r2, #0
 80077ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	0018      	movs	r0, r3
 80077f4:	f7ff ff9a 	bl	800772c <I2C_TreatErrorCallback>
}
 80077f8:	46c0      	nop			; (mov r8, r8)
 80077fa:	46bd      	mov	sp, r7
 80077fc:	b004      	add	sp, #16
 80077fe:	bd80      	pop	{r7, pc}

08007800 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	603b      	str	r3, [r7, #0]
 800780c:	1dfb      	adds	r3, r7, #7
 800780e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007810:	e021      	b.n	8007856 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	3301      	adds	r3, #1
 8007816:	d01e      	beq.n	8007856 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007818:	f7fe f90a 	bl	8005a30 <HAL_GetTick>
 800781c:	0002      	movs	r2, r0
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d302      	bcc.n	800782e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d113      	bne.n	8007856 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007832:	2220      	movs	r2, #32
 8007834:	431a      	orrs	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2241      	movs	r2, #65	; 0x41
 800783e:	2120      	movs	r1, #32
 8007840:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2242      	movs	r2, #66	; 0x42
 8007846:	2100      	movs	r1, #0
 8007848:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2240      	movs	r2, #64	; 0x40
 800784e:	2100      	movs	r1, #0
 8007850:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e00f      	b.n	8007876 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	4013      	ands	r3, r2
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	425a      	negs	r2, r3
 8007866:	4153      	adcs	r3, r2
 8007868:	b2db      	uxtb	r3, r3
 800786a:	001a      	movs	r2, r3
 800786c:	1dfb      	adds	r3, r7, #7
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d0ce      	beq.n	8007812 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	0018      	movs	r0, r3
 8007878:	46bd      	mov	sp, r7
 800787a:	b004      	add	sp, #16
 800787c:	bd80      	pop	{r7, pc}

0800787e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	60b9      	str	r1, [r7, #8]
 8007888:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800788a:	e02b      	b.n	80078e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	68b9      	ldr	r1, [r7, #8]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	0018      	movs	r0, r3
 8007894:	f000 f86e 	bl	8007974 <I2C_IsAcknowledgeFailed>
 8007898:	1e03      	subs	r3, r0, #0
 800789a:	d001      	beq.n	80078a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e029      	b.n	80078f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	3301      	adds	r3, #1
 80078a4:	d01e      	beq.n	80078e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078a6:	f7fe f8c3 	bl	8005a30 <HAL_GetTick>
 80078aa:	0002      	movs	r2, r0
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d302      	bcc.n	80078bc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d113      	bne.n	80078e4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078c0:	2220      	movs	r2, #32
 80078c2:	431a      	orrs	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2241      	movs	r2, #65	; 0x41
 80078cc:	2120      	movs	r1, #32
 80078ce:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2242      	movs	r2, #66	; 0x42
 80078d4:	2100      	movs	r1, #0
 80078d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2240      	movs	r2, #64	; 0x40
 80078dc:	2100      	movs	r1, #0
 80078de:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e007      	b.n	80078f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	2202      	movs	r2, #2
 80078ec:	4013      	ands	r3, r2
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d1cc      	bne.n	800788c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	0018      	movs	r0, r3
 80078f6:	46bd      	mov	sp, r7
 80078f8:	b004      	add	sp, #16
 80078fa:	bd80      	pop	{r7, pc}

080078fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007908:	e028      	b.n	800795c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	68b9      	ldr	r1, [r7, #8]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	0018      	movs	r0, r3
 8007912:	f000 f82f 	bl	8007974 <I2C_IsAcknowledgeFailed>
 8007916:	1e03      	subs	r3, r0, #0
 8007918:	d001      	beq.n	800791e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e026      	b.n	800796c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800791e:	f7fe f887 	bl	8005a30 <HAL_GetTick>
 8007922:	0002      	movs	r2, r0
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	429a      	cmp	r2, r3
 800792c:	d302      	bcc.n	8007934 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d113      	bne.n	800795c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007938:	2220      	movs	r2, #32
 800793a:	431a      	orrs	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2241      	movs	r2, #65	; 0x41
 8007944:	2120      	movs	r1, #32
 8007946:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2242      	movs	r2, #66	; 0x42
 800794c:	2100      	movs	r1, #0
 800794e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2240      	movs	r2, #64	; 0x40
 8007954:	2100      	movs	r1, #0
 8007956:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e007      	b.n	800796c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	2220      	movs	r2, #32
 8007964:	4013      	ands	r3, r2
 8007966:	2b20      	cmp	r3, #32
 8007968:	d1cf      	bne.n	800790a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	0018      	movs	r0, r3
 800796e:	46bd      	mov	sp, r7
 8007970:	b004      	add	sp, #16
 8007972:	bd80      	pop	{r7, pc}

08007974 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	2210      	movs	r2, #16
 8007988:	4013      	ands	r3, r2
 800798a:	2b10      	cmp	r3, #16
 800798c:	d151      	bne.n	8007a32 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800798e:	e021      	b.n	80079d4 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	3301      	adds	r3, #1
 8007994:	d01e      	beq.n	80079d4 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007996:	f7fe f84b 	bl	8005a30 <HAL_GetTick>
 800799a:	0002      	movs	r2, r0
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d302      	bcc.n	80079ac <I2C_IsAcknowledgeFailed+0x38>
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d113      	bne.n	80079d4 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b0:	2220      	movs	r2, #32
 80079b2:	431a      	orrs	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2241      	movs	r2, #65	; 0x41
 80079bc:	2120      	movs	r1, #32
 80079be:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2242      	movs	r2, #66	; 0x42
 80079c4:	2100      	movs	r1, #0
 80079c6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2240      	movs	r2, #64	; 0x40
 80079cc:	2100      	movs	r1, #0
 80079ce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e02f      	b.n	8007a34 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	2220      	movs	r2, #32
 80079dc:	4013      	ands	r3, r2
 80079de:	2b20      	cmp	r3, #32
 80079e0:	d1d6      	bne.n	8007990 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2210      	movs	r2, #16
 80079e8:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2220      	movs	r2, #32
 80079f0:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	0018      	movs	r0, r3
 80079f6:	f7ff fec2 	bl	800777e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	490d      	ldr	r1, [pc, #52]	; (8007a3c <I2C_IsAcknowledgeFailed+0xc8>)
 8007a06:	400a      	ands	r2, r1
 8007a08:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a0e:	2204      	movs	r2, #4
 8007a10:	431a      	orrs	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2241      	movs	r2, #65	; 0x41
 8007a1a:	2120      	movs	r1, #32
 8007a1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2242      	movs	r2, #66	; 0x42
 8007a22:	2100      	movs	r1, #0
 8007a24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2240      	movs	r2, #64	; 0x40
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e000      	b.n	8007a34 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	0018      	movs	r0, r3
 8007a36:	46bd      	mov	sp, r7
 8007a38:	b004      	add	sp, #16
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	fe00e800 	.word	0xfe00e800

08007a40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007a40:	b590      	push	{r4, r7, lr}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	0008      	movs	r0, r1
 8007a4a:	0011      	movs	r1, r2
 8007a4c:	607b      	str	r3, [r7, #4]
 8007a4e:	240a      	movs	r4, #10
 8007a50:	193b      	adds	r3, r7, r4
 8007a52:	1c02      	adds	r2, r0, #0
 8007a54:	801a      	strh	r2, [r3, #0]
 8007a56:	2009      	movs	r0, #9
 8007a58:	183b      	adds	r3, r7, r0
 8007a5a:	1c0a      	adds	r2, r1, #0
 8007a5c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	6a3a      	ldr	r2, [r7, #32]
 8007a66:	0d51      	lsrs	r1, r2, #21
 8007a68:	2280      	movs	r2, #128	; 0x80
 8007a6a:	00d2      	lsls	r2, r2, #3
 8007a6c:	400a      	ands	r2, r1
 8007a6e:	490e      	ldr	r1, [pc, #56]	; (8007aa8 <I2C_TransferConfig+0x68>)
 8007a70:	430a      	orrs	r2, r1
 8007a72:	43d2      	mvns	r2, r2
 8007a74:	401a      	ands	r2, r3
 8007a76:	0011      	movs	r1, r2
 8007a78:	193b      	adds	r3, r7, r4
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	059b      	lsls	r3, r3, #22
 8007a7e:	0d9a      	lsrs	r2, r3, #22
 8007a80:	183b      	adds	r3, r7, r0
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	0418      	lsls	r0, r3, #16
 8007a86:	23ff      	movs	r3, #255	; 0xff
 8007a88:	041b      	lsls	r3, r3, #16
 8007a8a:	4003      	ands	r3, r0
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	431a      	orrs	r2, r3
 8007a92:	6a3b      	ldr	r3, [r7, #32]
 8007a94:	431a      	orrs	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007a9e:	46c0      	nop			; (mov r8, r8)
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	b005      	add	sp, #20
 8007aa4:	bd90      	pop	{r4, r7, pc}
 8007aa6:	46c0      	nop			; (mov r8, r8)
 8007aa8:	03ff63ff 	.word	0x03ff63ff

08007aac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	000a      	movs	r2, r1
 8007ab6:	1cbb      	adds	r3, r7, #2
 8007ab8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007abe:	1cbb      	adds	r3, r7, #2
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	d010      	beq.n	8007aea <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2242      	movs	r2, #66	; 0x42
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2241      	movs	r2, #65	; 0x41
 8007ad4:	5c9b      	ldrb	r3, [r3, r2]
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	001a      	movs	r2, r3
 8007ada:	2328      	movs	r3, #40	; 0x28
 8007adc:	4013      	ands	r3, r2
 8007ade:	2b28      	cmp	r3, #40	; 0x28
 8007ae0:	d003      	beq.n	8007aea <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	22b0      	movs	r2, #176	; 0xb0
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007aea:	1cbb      	adds	r3, r7, #2
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	2202      	movs	r2, #2
 8007af0:	4013      	ands	r3, r2
 8007af2:	d010      	beq.n	8007b16 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2244      	movs	r2, #68	; 0x44
 8007af8:	4313      	orrs	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2241      	movs	r2, #65	; 0x41
 8007b00:	5c9b      	ldrb	r3, [r3, r2]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	001a      	movs	r2, r3
 8007b06:	2328      	movs	r3, #40	; 0x28
 8007b08:	4013      	ands	r3, r2
 8007b0a:	2b28      	cmp	r3, #40	; 0x28
 8007b0c:	d003      	beq.n	8007b16 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	22b0      	movs	r2, #176	; 0xb0
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b16:	1cbb      	adds	r3, r7, #2
 8007b18:	2200      	movs	r2, #0
 8007b1a:	5e9b      	ldrsh	r3, [r3, r2]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	da03      	bge.n	8007b28 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	22b8      	movs	r2, #184	; 0xb8
 8007b24:	4313      	orrs	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007b28:	1cbb      	adds	r3, r7, #2
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	2b10      	cmp	r3, #16
 8007b2e:	d103      	bne.n	8007b38 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2290      	movs	r2, #144	; 0x90
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b38:	1cbb      	adds	r3, r7, #2
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	d103      	bne.n	8007b48 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2220      	movs	r2, #32
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007b48:	1cbb      	adds	r3, r7, #2
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	2b40      	cmp	r3, #64	; 0x40
 8007b4e:	d103      	bne.n	8007b58 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2240      	movs	r2, #64	; 0x40
 8007b54:	4313      	orrs	r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	43d9      	mvns	r1, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	400a      	ands	r2, r1
 8007b68:	601a      	str	r2, [r3, #0]
}
 8007b6a:	46c0      	nop			; (mov r8, r8)
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	b004      	add	sp, #16
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2241      	movs	r2, #65	; 0x41
 8007b82:	5c9b      	ldrb	r3, [r3, r2]
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b20      	cmp	r3, #32
 8007b88:	d138      	bne.n	8007bfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2240      	movs	r2, #64	; 0x40
 8007b8e:	5c9b      	ldrb	r3, [r3, r2]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d101      	bne.n	8007b98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007b94:	2302      	movs	r3, #2
 8007b96:	e032      	b.n	8007bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2240      	movs	r2, #64	; 0x40
 8007b9c:	2101      	movs	r1, #1
 8007b9e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2241      	movs	r2, #65	; 0x41
 8007ba4:	2124      	movs	r1, #36	; 0x24
 8007ba6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	438a      	bics	r2, r1
 8007bb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4911      	ldr	r1, [pc, #68]	; (8007c08 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007bc4:	400a      	ands	r2, r1
 8007bc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6819      	ldr	r1, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	683a      	ldr	r2, [r7, #0]
 8007bd4:	430a      	orrs	r2, r1
 8007bd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2101      	movs	r1, #1
 8007be4:	430a      	orrs	r2, r1
 8007be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2241      	movs	r2, #65	; 0x41
 8007bec:	2120      	movs	r1, #32
 8007bee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2240      	movs	r2, #64	; 0x40
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	e000      	b.n	8007bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007bfc:	2302      	movs	r3, #2
  }
}
 8007bfe:	0018      	movs	r0, r3
 8007c00:	46bd      	mov	sp, r7
 8007c02:	b002      	add	sp, #8
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	46c0      	nop			; (mov r8, r8)
 8007c08:	ffffefff 	.word	0xffffefff

08007c0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2241      	movs	r2, #65	; 0x41
 8007c1a:	5c9b      	ldrb	r3, [r3, r2]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b20      	cmp	r3, #32
 8007c20:	d139      	bne.n	8007c96 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2240      	movs	r2, #64	; 0x40
 8007c26:	5c9b      	ldrb	r3, [r3, r2]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d101      	bne.n	8007c30 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	e033      	b.n	8007c98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2240      	movs	r2, #64	; 0x40
 8007c34:	2101      	movs	r1, #1
 8007c36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2241      	movs	r2, #65	; 0x41
 8007c3c:	2124      	movs	r1, #36	; 0x24
 8007c3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	438a      	bics	r2, r1
 8007c4e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4a11      	ldr	r2, [pc, #68]	; (8007ca0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2241      	movs	r2, #65	; 0x41
 8007c86:	2120      	movs	r1, #32
 8007c88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2240      	movs	r2, #64	; 0x40
 8007c8e:	2100      	movs	r1, #0
 8007c90:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	e000      	b.n	8007c98 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007c96:	2302      	movs	r3, #2
  }
}
 8007c98:	0018      	movs	r0, r3
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	b004      	add	sp, #16
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	fffff0ff 	.word	0xfffff0ff

08007ca4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d101      	bne.n	8007cb6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e0e5      	b.n	8007e82 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2235      	movs	r2, #53	; 0x35
 8007cba:	5c9b      	ldrb	r3, [r3, r2]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d107      	bne.n	8007cd2 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2234      	movs	r2, #52	; 0x34
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	0018      	movs	r0, r3
 8007cce:	f7fd fa69 	bl	80051a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2235      	movs	r2, #53	; 0x35
 8007cd6:	2102      	movs	r1, #2
 8007cd8:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69da      	ldr	r2, [r3, #28]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4969      	ldr	r1, [pc, #420]	; (8007e8c <HAL_I2S_Init+0x1e8>)
 8007ce6:	400a      	ands	r2, r1
 8007ce8:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d100      	bne.n	8007cfc <HAL_I2S_Init+0x58>
 8007cfa:	e076      	b.n	8007dea <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d102      	bne.n	8007d0a <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007d04:	2310      	movs	r3, #16
 8007d06:	617b      	str	r3, [r7, #20]
 8007d08:	e001      	b.n	8007d0e <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007d0a:	2320      	movs	r3, #32
 8007d0c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	2b20      	cmp	r3, #32
 8007d14:	d802      	bhi.n	8007d1c <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	005b      	lsls	r3, r3, #1
 8007d1a:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8007d1c:	2380      	movs	r3, #128	; 0x80
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	0018      	movs	r0, r3
 8007d22:	f001 fa9b 	bl	800925c <HAL_RCCEx_GetPeriphCLKFreq>
 8007d26:	0003      	movs	r3, r0
 8007d28:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691a      	ldr	r2, [r3, #16]
 8007d2e:	2380      	movs	r3, #128	; 0x80
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d131      	bne.n	8007d9a <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d016      	beq.n	8007d6c <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	0019      	movs	r1, r3
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f7f8 f9dd 	bl	8000104 <__udivsi3>
 8007d4a:	0003      	movs	r3, r0
 8007d4c:	001a      	movs	r2, r3
 8007d4e:	0013      	movs	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	189b      	adds	r3, r3, r2
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	001a      	movs	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	0019      	movs	r1, r3
 8007d5e:	0010      	movs	r0, r2
 8007d60:	f7f8 f9d0 	bl	8000104 <__udivsi3>
 8007d64:	0003      	movs	r3, r0
 8007d66:	3305      	adds	r3, #5
 8007d68:	613b      	str	r3, [r7, #16]
 8007d6a:	e02a      	b.n	8007dc2 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	0019      	movs	r1, r3
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f7f8 f9c6 	bl	8000104 <__udivsi3>
 8007d78:	0003      	movs	r3, r0
 8007d7a:	001a      	movs	r2, r3
 8007d7c:	0013      	movs	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	189b      	adds	r3, r3, r2
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	001a      	movs	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	0019      	movs	r1, r3
 8007d8c:	0010      	movs	r0, r2
 8007d8e:	f7f8 f9b9 	bl	8000104 <__udivsi3>
 8007d92:	0003      	movs	r3, r0
 8007d94:	3305      	adds	r3, #5
 8007d96:	613b      	str	r3, [r7, #16]
 8007d98:	e013      	b.n	8007dc2 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007d9a:	6979      	ldr	r1, [r7, #20]
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7f8 f9b1 	bl	8000104 <__udivsi3>
 8007da2:	0003      	movs	r3, r0
 8007da4:	001a      	movs	r2, r3
 8007da6:	0013      	movs	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	189b      	adds	r3, r3, r2
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	001a      	movs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	0019      	movs	r1, r3
 8007db6:	0010      	movs	r0, r2
 8007db8:	f7f8 f9a4 	bl	8000104 <__udivsi3>
 8007dbc:	0003      	movs	r3, r0
 8007dbe:	3305      	adds	r3, #5
 8007dc0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	210a      	movs	r1, #10
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	f7f8 f99c 	bl	8000104 <__udivsi3>
 8007dcc:	0003      	movs	r3, r0
 8007dce:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	021b      	lsls	r3, r3, #8
 8007de6:	61bb      	str	r3, [r7, #24]
 8007de8:	e003      	b.n	8007df2 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007dea:	2302      	movs	r3, #2
 8007dec:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d902      	bls.n	8007dfe <HAL_I2S_Init+0x15a>
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	2bff      	cmp	r3, #255	; 0xff
 8007dfc:	d907      	bls.n	8007e0e <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e02:	2210      	movs	r2, #16
 8007e04:	431a      	orrs	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e039      	b.n	8007e82 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691a      	ldr	r2, [r3, #16]
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	431a      	orrs	r2, r3
 8007e16:	0011      	movs	r1, r2
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	69fa      	ldr	r2, [r7, #28]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	69db      	ldr	r3, [r3, #28]
 8007e28:	4a18      	ldr	r2, [pc, #96]	; (8007e8c <HAL_I2S_Init+0x1e8>)
 8007e2a:	401a      	ands	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6859      	ldr	r1, [r3, #4]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	4319      	orrs	r1, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	4319      	orrs	r1, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	430b      	orrs	r3, r1
 8007e42:	431a      	orrs	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2180      	movs	r1, #128	; 0x80
 8007e4a:	0109      	lsls	r1, r1, #4
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	2b30      	cmp	r3, #48	; 0x30
 8007e56:	d003      	beq.n	8007e60 <HAL_I2S_Init+0x1bc>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	2bb0      	cmp	r3, #176	; 0xb0
 8007e5e:	d108      	bne.n	8007e72 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	69da      	ldr	r2, [r3, #28]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2180      	movs	r1, #128	; 0x80
 8007e6c:	0149      	lsls	r1, r1, #5
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2235      	movs	r2, #53	; 0x35
 8007e7c:	2101      	movs	r1, #1
 8007e7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	0018      	movs	r0, r3
 8007e84:	46bd      	mov	sp, r7
 8007e86:	b008      	add	sp, #32
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	46c0      	nop			; (mov r8, r8)
 8007e8c:	fffff040 	.word	0xfffff040

08007e90 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	603b      	str	r3, [r7, #0]
 8007e9c:	1dbb      	adds	r3, r7, #6
 8007e9e:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <HAL_I2S_Transmit+0x1e>
 8007ea6:	1dbb      	adds	r3, r7, #6
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_I2S_Transmit+0x22>
  {
    return  HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e0e2      	b.n	8008078 <HAL_I2S_Transmit+0x1e8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2234      	movs	r2, #52	; 0x34
 8007eb6:	5c9b      	ldrb	r3, [r3, r2]
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d101      	bne.n	8007ec2 <HAL_I2S_Transmit+0x32>
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	e0da      	b.n	8008078 <HAL_I2S_Transmit+0x1e8>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2234      	movs	r2, #52	; 0x34
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2235      	movs	r2, #53	; 0x35
 8007ece:	5c9b      	ldrb	r3, [r3, r2]
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d005      	beq.n	8007ee2 <HAL_I2S_Transmit+0x52>
  {
    __HAL_UNLOCK(hi2s);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2234      	movs	r2, #52	; 0x34
 8007eda:	2100      	movs	r1, #0
 8007edc:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8007ede:	2302      	movs	r3, #2
 8007ee0:	e0ca      	b.n	8008078 <HAL_I2S_Transmit+0x1e8>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2235      	movs	r2, #53	; 0x35
 8007ee6:	2103      	movs	r1, #3
 8007ee8:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	68ba      	ldr	r2, [r7, #8]
 8007ef4:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	2207      	movs	r2, #7
 8007efe:	4013      	ands	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d002      	beq.n	8007f0e <HAL_I2S_Transmit+0x7e>
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	2b05      	cmp	r3, #5
 8007f0c:	d10c      	bne.n	8007f28 <HAL_I2S_Transmit+0x98>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007f0e:	1dbb      	adds	r3, r7, #6
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	18db      	adds	r3, r3, r3
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8007f1a:	1dbb      	adds	r3, r7, #6
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	18db      	adds	r3, r3, r3
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	845a      	strh	r2, [r3, #34]	; 0x22
 8007f26:	e007      	b.n	8007f38 <HAL_I2S_Transmit+0xa8>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	1dba      	adds	r2, r7, #6
 8007f2c:	8812      	ldrh	r2, [r2, #0]
 8007f2e:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	1dba      	adds	r2, r7, #6
 8007f34:	8812      	ldrh	r2, [r2, #0]
 8007f36:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	69da      	ldr	r2, [r3, #28]
 8007f46:	2380      	movs	r3, #128	; 0x80
 8007f48:	00db      	lsls	r3, r3, #3
 8007f4a:	401a      	ands	r2, r3
 8007f4c:	2380      	movs	r3, #128	; 0x80
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d008      	beq.n	8007f66 <HAL_I2S_Transmit+0xd6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	69da      	ldr	r2, [r3, #28]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2180      	movs	r1, #128	; 0x80
 8007f60:	00c9      	lsls	r1, r1, #3
 8007f62:	430a      	orrs	r2, r1
 8007f64:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	2102      	movs	r1, #2
 8007f6e:	f000 fa6d 	bl	800844c <I2S_WaitFlagStateUntilTimeout>
 8007f72:	1e03      	subs	r3, r0, #0
 8007f74:	d04d      	beq.n	8008012 <HAL_I2S_Transmit+0x182>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2235      	movs	r2, #53	; 0x35
 8007f86:	2101      	movs	r1, #1
 8007f88:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2s);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2234      	movs	r2, #52	; 0x34
 8007f8e:	2100      	movs	r1, #0
 8007f90:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e070      	b.n	8008078 <HAL_I2S_Transmit+0x1e8>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	881a      	ldrh	r2, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	1c9a      	adds	r2, r3, #2
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	2102      	movs	r1, #2
 8007fc2:	f000 fa43 	bl	800844c <I2S_WaitFlagStateUntilTimeout>
 8007fc6:	1e03      	subs	r3, r0, #0
 8007fc8:	d00f      	beq.n	8007fea <HAL_I2S_Transmit+0x15a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fce:	2201      	movs	r2, #1
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2235      	movs	r2, #53	; 0x35
 8007fda:	2101      	movs	r1, #1
 8007fdc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2234      	movs	r2, #52	; 0x34
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e046      	b.n	8008078 <HAL_I2S_Transmit+0x1e8>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	2208      	movs	r2, #8
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	2b08      	cmp	r3, #8
 8007ff6:	d10c      	bne.n	8008012 <HAL_I2S_Transmit+0x182>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	613b      	str	r3, [r7, #16]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	613b      	str	r3, [r7, #16]
 8008004:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	2204      	movs	r2, #4
 800800c:	431a      	orrs	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	639a      	str	r2, [r3, #56]	; 0x38
  while (hi2s->TxXferCount > 0U)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8008016:	b29b      	uxth	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1bc      	bne.n	8007f96 <HAL_I2S_Transmit+0x106>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	23c0      	movs	r3, #192	; 0xc0
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4013      	ands	r3, r2
 8008024:	d007      	beq.n	8008036 <HAL_I2S_Transmit+0x1a6>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	23c0      	movs	r3, #192	; 0xc0
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	401a      	ands	r2, r3
 800802e:	2380      	movs	r3, #128	; 0x80
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	429a      	cmp	r2, r3
 8008034:	d117      	bne.n	8008066 <HAL_I2S_Transmit+0x1d6>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	2180      	movs	r1, #128	; 0x80
 800803e:	f000 fa05 	bl	800844c <I2S_WaitFlagStateUntilTimeout>
 8008042:	1e03      	subs	r3, r0, #0
 8008044:	d00f      	beq.n	8008066 <HAL_I2S_Transmit+0x1d6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804a:	2201      	movs	r2, #1
 800804c:	431a      	orrs	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2235      	movs	r2, #53	; 0x35
 8008056:	2101      	movs	r1, #1
 8008058:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2234      	movs	r2, #52	; 0x34
 800805e:	2100      	movs	r1, #0
 8008060:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e008      	b.n	8008078 <HAL_I2S_Transmit+0x1e8>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2235      	movs	r2, #53	; 0x35
 800806a:	2101      	movs	r1, #1
 800806c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hi2s);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2234      	movs	r2, #52	; 0x34
 8008072:	2100      	movs	r1, #0
 8008074:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	0018      	movs	r0, r3
 800807a:	46bd      	mov	sp, r7
 800807c:	b006      	add	sp, #24
 800807e:	bd80      	pop	{r7, pc}

08008080 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	1dbb      	adds	r3, r7, #6
 800808c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <HAL_I2S_Transmit_DMA+0x1c>
 8008094:	1dbb      	adds	r3, r7, #6
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e091      	b.n	80081c4 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2234      	movs	r2, #52	; 0x34
 80080a4:	5c9b      	ldrb	r3, [r3, r2]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_I2S_Transmit_DMA+0x30>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e089      	b.n	80081c4 <HAL_I2S_Transmit_DMA+0x144>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2234      	movs	r2, #52	; 0x34
 80080b4:	2101      	movs	r1, #1
 80080b6:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2235      	movs	r2, #53	; 0x35
 80080bc:	5c9b      	ldrb	r3, [r3, r2]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d005      	beq.n	80080d0 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2234      	movs	r2, #52	; 0x34
 80080c8:	2100      	movs	r1, #0
 80080ca:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80080cc:	2302      	movs	r3, #2
 80080ce:	e079      	b.n	80081c4 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2235      	movs	r2, #53	; 0x35
 80080d4:	2103      	movs	r1, #3
 80080d6:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	2207      	movs	r2, #7
 80080ec:	4013      	ands	r3, r2
 80080ee:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d002      	beq.n	80080fc <HAL_I2S_Transmit_DMA+0x7c>
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b05      	cmp	r3, #5
 80080fa:	d10c      	bne.n	8008116 <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 80080fc:	1dbb      	adds	r3, r7, #6
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	18db      	adds	r3, r3, r3
 8008102:	b29a      	uxth	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8008108:	1dbb      	adds	r3, r7, #6
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	18db      	adds	r3, r3, r3
 800810e:	b29a      	uxth	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	845a      	strh	r2, [r3, #34]	; 0x22
 8008114:	e007      	b.n	8008126 <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	1dba      	adds	r2, r7, #6
 800811a:	8812      	ldrh	r2, [r2, #0]
 800811c:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	1dba      	adds	r2, r7, #6
 8008122:	8812      	ldrh	r2, [r2, #0]
 8008124:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	4a28      	ldr	r2, [pc, #160]	; (80081cc <HAL_I2S_Transmit_DMA+0x14c>)
 800812c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008132:	4a27      	ldr	r2, [pc, #156]	; (80081d0 <HAL_I2S_Transmit_DMA+0x150>)
 8008134:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813a:	4a26      	ldr	r2, [pc, #152]	; (80081d4 <HAL_I2S_Transmit_DMA+0x154>)
 800813c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008146:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800814e:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8c1b      	ldrh	r3, [r3, #32]
 8008154:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008156:	f7fe f877 	bl	8006248 <HAL_DMA_Start_IT>
 800815a:	1e03      	subs	r3, r0, #0
 800815c:	d00f      	beq.n	800817e <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008162:	2208      	movs	r2, #8
 8008164:	431a      	orrs	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2235      	movs	r2, #53	; 0x35
 800816e:	2101      	movs	r1, #1
 8008170:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2234      	movs	r2, #52	; 0x34
 8008176:	2100      	movs	r1, #0
 8008178:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e022      	b.n	80081c4 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69da      	ldr	r2, [r3, #28]
 8008184:	2380      	movs	r3, #128	; 0x80
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	4013      	ands	r3, r2
 800818a:	d108      	bne.n	800819e <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	69da      	ldr	r2, [r3, #28]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2180      	movs	r1, #128	; 0x80
 8008198:	00c9      	lsls	r1, r1, #3
 800819a:	430a      	orrs	r2, r1
 800819c:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	2202      	movs	r2, #2
 80081a6:	4013      	ands	r3, r2
 80081a8:	d107      	bne.n	80081ba <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	685a      	ldr	r2, [r3, #4]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2102      	movs	r1, #2
 80081b6:	430a      	orrs	r2, r1
 80081b8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2234      	movs	r2, #52	; 0x34
 80081be:	2100      	movs	r1, #0
 80081c0:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	0018      	movs	r0, r3
 80081c6:	46bd      	mov	sp, r7
 80081c8:	b006      	add	sp, #24
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	08008323 	.word	0x08008323
 80081d0:	080082df 	.word	0x080082df
 80081d4:	08008341 	.word	0x08008341

080081d8 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	099b      	lsrs	r3, r3, #6
 80081f4:	001a      	movs	r2, r3
 80081f6:	2301      	movs	r3, #1
 80081f8:	4013      	ands	r3, r2
 80081fa:	d10e      	bne.n	800821a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2201      	movs	r2, #1
 8008200:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8008202:	d00a      	beq.n	800821a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	099b      	lsrs	r3, r3, #6
 8008208:	001a      	movs	r2, r3
 800820a:	2301      	movs	r3, #1
 800820c:	4013      	ands	r3, r2
 800820e:	d004      	beq.n	800821a <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	0018      	movs	r0, r3
 8008214:	f000 f8ea 	bl	80083ec <I2S_Receive_IT>
    return;
 8008218:	e046      	b.n	80082a8 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	085b      	lsrs	r3, r3, #1
 800821e:	001a      	movs	r2, r3
 8008220:	2301      	movs	r3, #1
 8008222:	4013      	ands	r3, r2
 8008224:	d00a      	beq.n	800823c <HAL_I2S_IRQHandler+0x64>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	09db      	lsrs	r3, r3, #7
 800822a:	001a      	movs	r2, r3
 800822c:	2301      	movs	r3, #1
 800822e:	4013      	ands	r3, r2
 8008230:	d004      	beq.n	800823c <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	0018      	movs	r0, r3
 8008236:	f000 f8aa 	bl	800838e <I2S_Transmit_IT>
    return;
 800823a:	e035      	b.n	80082a8 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	001a      	movs	r2, r3
 8008242:	2301      	movs	r3, #1
 8008244:	4013      	ands	r3, r2
 8008246:	d02f      	beq.n	80082a8 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	099b      	lsrs	r3, r3, #6
 800824c:	001a      	movs	r2, r3
 800824e:	2301      	movs	r3, #1
 8008250:	4013      	ands	r3, r2
 8008252:	d00d      	beq.n	8008270 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2160      	movs	r1, #96	; 0x60
 8008260:	438a      	bics	r2, r1
 8008262:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008268:	2202      	movs	r2, #2
 800826a:	431a      	orrs	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	08db      	lsrs	r3, r3, #3
 8008274:	001a      	movs	r2, r3
 8008276:	2301      	movs	r3, #1
 8008278:	4013      	ands	r3, r2
 800827a:	d00d      	beq.n	8008298 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	21a0      	movs	r1, #160	; 0xa0
 8008288:	438a      	bics	r2, r1
 800828a:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008290:	2204      	movs	r2, #4
 8008292:	431a      	orrs	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2235      	movs	r2, #53	; 0x35
 800829c:	2101      	movs	r1, #1
 800829e:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	0018      	movs	r0, r3
 80082a4:	f000 f813 	bl	80082ce <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80082a8:	46bd      	mov	sp, r7
 80082aa:	b004      	add	sp, #16
 80082ac:	bd80      	pop	{r7, pc}

080082ae <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	46bd      	mov	sp, r7
 80082ba:	b002      	add	sp, #8
 80082bc:	bd80      	pop	{r7, pc}

080082be <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80082c6:	46c0      	nop			; (mov r8, r8)
 80082c8:	46bd      	mov	sp, r7
 80082ca:	b002      	add	sp, #8
 80082cc:	bd80      	pop	{r7, pc}

080082ce <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80082d6:	46c0      	nop			; (mov r8, r8)
 80082d8:	46bd      	mov	sp, r7
 80082da:	b002      	add	sp, #8
 80082dc:	bd80      	pop	{r7, pc}

080082de <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10e      	bne.n	8008312 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2102      	movs	r1, #2
 8008300:	438a      	bics	r2, r1
 8008302:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2235      	movs	r2, #53	; 0x35
 800830e:	2101      	movs	r1, #1
 8008310:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	0018      	movs	r0, r3
 8008316:	f7ff ffca 	bl	80082ae <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800831a:	46c0      	nop			; (mov r8, r8)
 800831c:	46bd      	mov	sp, r7
 800831e:	b004      	add	sp, #16
 8008320:	bd80      	pop	{r7, pc}

08008322 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800832e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	0018      	movs	r0, r3
 8008334:	f7fa fe94 	bl	8003060 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008338:	46c0      	nop			; (mov r8, r8)
 800833a:	46bd      	mov	sp, r7
 800833c:	b004      	add	sp, #16
 800833e:	bd80      	pop	{r7, pc}

08008340 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685a      	ldr	r2, [r3, #4]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2103      	movs	r1, #3
 800835a:	438a      	bics	r2, r1
 800835c:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2235      	movs	r2, #53	; 0x35
 800836e:	2101      	movs	r1, #1
 8008370:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008376:	2208      	movs	r2, #8
 8008378:	431a      	orrs	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	0018      	movs	r0, r3
 8008382:	f7ff ffa4 	bl	80082ce <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008386:	46c0      	nop			; (mov r8, r8)
 8008388:	46bd      	mov	sp, r7
 800838a:	b004      	add	sp, #16
 800838c:	bd80      	pop	{r7, pc}

0800838e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b082      	sub	sp, #8
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	69db      	ldr	r3, [r3, #28]
 800839a:	881a      	ldrh	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	1c9a      	adds	r2, r3, #2
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	3b01      	subs	r3, #1
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80083be:	b29b      	uxth	r3, r3
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10f      	bne.n	80083e4 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	21a0      	movs	r1, #160	; 0xa0
 80083d0:	438a      	bics	r2, r1
 80083d2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2235      	movs	r2, #53	; 0x35
 80083d8:	2101      	movs	r1, #1
 80083da:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	0018      	movs	r0, r3
 80083e0:	f7ff ff65 	bl	80082ae <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80083e4:	46c0      	nop			; (mov r8, r8)
 80083e6:	46bd      	mov	sp, r7
 80083e8:	b002      	add	sp, #8
 80083ea:	bd80      	pop	{r7, pc}

080083ec <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	b292      	uxth	r2, r2
 8008400:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008406:	1c9a      	adds	r2, r3, #2
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008410:	b29b      	uxth	r3, r3
 8008412:	3b01      	subs	r3, #1
 8008414:	b29a      	uxth	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800841e:	b29b      	uxth	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10f      	bne.n	8008444 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2160      	movs	r1, #96	; 0x60
 8008430:	438a      	bics	r2, r1
 8008432:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2235      	movs	r2, #53	; 0x35
 8008438:	2101      	movs	r1, #1
 800843a:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	0018      	movs	r0, r3
 8008440:	f7ff ff3d 	bl	80082be <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008444:	46c0      	nop			; (mov r8, r8)
 8008446:	46bd      	mov	sp, r7
 8008448:	b002      	add	sp, #8
 800844a:	bd80      	pop	{r7, pc}

0800844c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	603b      	str	r3, [r7, #0]
 8008458:	1dfb      	adds	r3, r7, #7
 800845a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800845c:	f7fd fae8 	bl	8005a30 <HAL_GetTick>
 8008460:	0003      	movs	r3, r0
 8008462:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8008464:	e017      	b.n	8008496 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	3301      	adds	r3, #1
 800846a:	d014      	beq.n	8008496 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800846c:	f7fd fae0 	bl	8005a30 <HAL_GetTick>
 8008470:	0002      	movs	r2, r0
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	429a      	cmp	r2, r3
 800847a:	d902      	bls.n	8008482 <I2S_WaitFlagStateUntilTimeout+0x36>
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d109      	bne.n	8008496 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2235      	movs	r2, #53	; 0x35
 8008486:	2101      	movs	r1, #1
 8008488:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2234      	movs	r2, #52	; 0x34
 800848e:	2100      	movs	r1, #0
 8008490:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e00f      	b.n	80084b6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	4013      	ands	r3, r2
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	425a      	negs	r2, r3
 80084a6:	4153      	adcs	r3, r2
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	001a      	movs	r2, r3
 80084ac:	1dfb      	adds	r3, r7, #7
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d1d8      	bne.n	8008466 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	0018      	movs	r0, r3
 80084b8:	46bd      	mov	sp, r7
 80084ba:	b006      	add	sp, #24
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80084c8:	4b19      	ldr	r3, [pc, #100]	; (8008530 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a19      	ldr	r2, [pc, #100]	; (8008534 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80084ce:	4013      	ands	r3, r2
 80084d0:	0019      	movs	r1, r3
 80084d2:	4b17      	ldr	r3, [pc, #92]	; (8008530 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	2380      	movs	r3, #128	; 0x80
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d11f      	bne.n	8008524 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80084e4:	4b14      	ldr	r3, [pc, #80]	; (8008538 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	0013      	movs	r3, r2
 80084ea:	005b      	lsls	r3, r3, #1
 80084ec:	189b      	adds	r3, r3, r2
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	4912      	ldr	r1, [pc, #72]	; (800853c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80084f2:	0018      	movs	r0, r3
 80084f4:	f7f7 fe06 	bl	8000104 <__udivsi3>
 80084f8:	0003      	movs	r3, r0
 80084fa:	3301      	adds	r3, #1
 80084fc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80084fe:	e008      	b.n	8008512 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	3b01      	subs	r3, #1
 800850a:	60fb      	str	r3, [r7, #12]
 800850c:	e001      	b.n	8008512 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e009      	b.n	8008526 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008514:	695a      	ldr	r2, [r3, #20]
 8008516:	2380      	movs	r3, #128	; 0x80
 8008518:	00db      	lsls	r3, r3, #3
 800851a:	401a      	ands	r2, r3
 800851c:	2380      	movs	r3, #128	; 0x80
 800851e:	00db      	lsls	r3, r3, #3
 8008520:	429a      	cmp	r2, r3
 8008522:	d0ed      	beq.n	8008500 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	0018      	movs	r0, r3
 8008528:	46bd      	mov	sp, r7
 800852a:	b004      	add	sp, #16
 800852c:	bd80      	pop	{r7, pc}
 800852e:	46c0      	nop			; (mov r8, r8)
 8008530:	40007000 	.word	0x40007000
 8008534:	fffff9ff 	.word	0xfffff9ff
 8008538:	20000034 	.word	0x20000034
 800853c:	000f4240 	.word	0x000f4240

08008540 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008544:	4b03      	ldr	r3, [pc, #12]	; (8008554 <LL_RCC_GetAPB1Prescaler+0x14>)
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	23e0      	movs	r3, #224	; 0xe0
 800854a:	01db      	lsls	r3, r3, #7
 800854c:	4013      	ands	r3, r2
}
 800854e:	0018      	movs	r0, r3
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	40021000 	.word	0x40021000

08008558 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e304      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2201      	movs	r2, #1
 8008570:	4013      	ands	r3, r2
 8008572:	d100      	bne.n	8008576 <HAL_RCC_OscConfig+0x1e>
 8008574:	e07c      	b.n	8008670 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008576:	4bc3      	ldr	r3, [pc, #780]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	2238      	movs	r2, #56	; 0x38
 800857c:	4013      	ands	r3, r2
 800857e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008580:	4bc0      	ldr	r3, [pc, #768]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	2203      	movs	r2, #3
 8008586:	4013      	ands	r3, r2
 8008588:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	2b10      	cmp	r3, #16
 800858e:	d102      	bne.n	8008596 <HAL_RCC_OscConfig+0x3e>
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	2b03      	cmp	r3, #3
 8008594:	d002      	beq.n	800859c <HAL_RCC_OscConfig+0x44>
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	2b08      	cmp	r3, #8
 800859a:	d10b      	bne.n	80085b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800859c:	4bb9      	ldr	r3, [pc, #740]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	2380      	movs	r3, #128	; 0x80
 80085a2:	029b      	lsls	r3, r3, #10
 80085a4:	4013      	ands	r3, r2
 80085a6:	d062      	beq.n	800866e <HAL_RCC_OscConfig+0x116>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d15e      	bne.n	800866e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e2df      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685a      	ldr	r2, [r3, #4]
 80085b8:	2380      	movs	r3, #128	; 0x80
 80085ba:	025b      	lsls	r3, r3, #9
 80085bc:	429a      	cmp	r2, r3
 80085be:	d107      	bne.n	80085d0 <HAL_RCC_OscConfig+0x78>
 80085c0:	4bb0      	ldr	r3, [pc, #704]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	4baf      	ldr	r3, [pc, #700]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80085c6:	2180      	movs	r1, #128	; 0x80
 80085c8:	0249      	lsls	r1, r1, #9
 80085ca:	430a      	orrs	r2, r1
 80085cc:	601a      	str	r2, [r3, #0]
 80085ce:	e020      	b.n	8008612 <HAL_RCC_OscConfig+0xba>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	23a0      	movs	r3, #160	; 0xa0
 80085d6:	02db      	lsls	r3, r3, #11
 80085d8:	429a      	cmp	r2, r3
 80085da:	d10e      	bne.n	80085fa <HAL_RCC_OscConfig+0xa2>
 80085dc:	4ba9      	ldr	r3, [pc, #676]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	4ba8      	ldr	r3, [pc, #672]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80085e2:	2180      	movs	r1, #128	; 0x80
 80085e4:	02c9      	lsls	r1, r1, #11
 80085e6:	430a      	orrs	r2, r1
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	4ba6      	ldr	r3, [pc, #664]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	4ba5      	ldr	r3, [pc, #660]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80085f0:	2180      	movs	r1, #128	; 0x80
 80085f2:	0249      	lsls	r1, r1, #9
 80085f4:	430a      	orrs	r2, r1
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	e00b      	b.n	8008612 <HAL_RCC_OscConfig+0xba>
 80085fa:	4ba2      	ldr	r3, [pc, #648]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	4ba1      	ldr	r3, [pc, #644]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 8008600:	49a1      	ldr	r1, [pc, #644]	; (8008888 <HAL_RCC_OscConfig+0x330>)
 8008602:	400a      	ands	r2, r1
 8008604:	601a      	str	r2, [r3, #0]
 8008606:	4b9f      	ldr	r3, [pc, #636]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	4b9e      	ldr	r3, [pc, #632]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 800860c:	499f      	ldr	r1, [pc, #636]	; (800888c <HAL_RCC_OscConfig+0x334>)
 800860e:	400a      	ands	r2, r1
 8008610:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d014      	beq.n	8008644 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800861a:	f7fd fa09 	bl	8005a30 <HAL_GetTick>
 800861e:	0003      	movs	r3, r0
 8008620:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008622:	e008      	b.n	8008636 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008624:	f7fd fa04 	bl	8005a30 <HAL_GetTick>
 8008628:	0002      	movs	r2, r0
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	2b64      	cmp	r3, #100	; 0x64
 8008630:	d901      	bls.n	8008636 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e29e      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008636:	4b93      	ldr	r3, [pc, #588]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	2380      	movs	r3, #128	; 0x80
 800863c:	029b      	lsls	r3, r3, #10
 800863e:	4013      	ands	r3, r2
 8008640:	d0f0      	beq.n	8008624 <HAL_RCC_OscConfig+0xcc>
 8008642:	e015      	b.n	8008670 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008644:	f7fd f9f4 	bl	8005a30 <HAL_GetTick>
 8008648:	0003      	movs	r3, r0
 800864a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800864c:	e008      	b.n	8008660 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800864e:	f7fd f9ef 	bl	8005a30 <HAL_GetTick>
 8008652:	0002      	movs	r2, r0
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	2b64      	cmp	r3, #100	; 0x64
 800865a:	d901      	bls.n	8008660 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e289      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008660:	4b88      	ldr	r3, [pc, #544]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	2380      	movs	r3, #128	; 0x80
 8008666:	029b      	lsls	r3, r3, #10
 8008668:	4013      	ands	r3, r2
 800866a:	d1f0      	bne.n	800864e <HAL_RCC_OscConfig+0xf6>
 800866c:	e000      	b.n	8008670 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800866e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2202      	movs	r2, #2
 8008676:	4013      	ands	r3, r2
 8008678:	d100      	bne.n	800867c <HAL_RCC_OscConfig+0x124>
 800867a:	e099      	b.n	80087b0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800867c:	4b81      	ldr	r3, [pc, #516]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	2238      	movs	r2, #56	; 0x38
 8008682:	4013      	ands	r3, r2
 8008684:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008686:	4b7f      	ldr	r3, [pc, #508]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	2203      	movs	r2, #3
 800868c:	4013      	ands	r3, r2
 800868e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	2b10      	cmp	r3, #16
 8008694:	d102      	bne.n	800869c <HAL_RCC_OscConfig+0x144>
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d002      	beq.n	80086a2 <HAL_RCC_OscConfig+0x14a>
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d135      	bne.n	800870e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086a2:	4b78      	ldr	r3, [pc, #480]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	2380      	movs	r3, #128	; 0x80
 80086a8:	00db      	lsls	r3, r3, #3
 80086aa:	4013      	ands	r3, r2
 80086ac:	d005      	beq.n	80086ba <HAL_RCC_OscConfig+0x162>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d101      	bne.n	80086ba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e25c      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086ba:	4b72      	ldr	r3, [pc, #456]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	4a74      	ldr	r2, [pc, #464]	; (8008890 <HAL_RCC_OscConfig+0x338>)
 80086c0:	4013      	ands	r3, r2
 80086c2:	0019      	movs	r1, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	021a      	lsls	r2, r3, #8
 80086ca:	4b6e      	ldr	r3, [pc, #440]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80086cc:	430a      	orrs	r2, r1
 80086ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d112      	bne.n	80086fc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80086d6:	4b6b      	ldr	r3, [pc, #428]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a6e      	ldr	r2, [pc, #440]	; (8008894 <HAL_RCC_OscConfig+0x33c>)
 80086dc:	4013      	ands	r3, r2
 80086de:	0019      	movs	r1, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	691a      	ldr	r2, [r3, #16]
 80086e4:	4b67      	ldr	r3, [pc, #412]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80086e6:	430a      	orrs	r2, r1
 80086e8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80086ea:	4b66      	ldr	r3, [pc, #408]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	0adb      	lsrs	r3, r3, #11
 80086f0:	2207      	movs	r2, #7
 80086f2:	4013      	ands	r3, r2
 80086f4:	4a68      	ldr	r2, [pc, #416]	; (8008898 <HAL_RCC_OscConfig+0x340>)
 80086f6:	40da      	lsrs	r2, r3
 80086f8:	4b68      	ldr	r3, [pc, #416]	; (800889c <HAL_RCC_OscConfig+0x344>)
 80086fa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80086fc:	4b68      	ldr	r3, [pc, #416]	; (80088a0 <HAL_RCC_OscConfig+0x348>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	0018      	movs	r0, r3
 8008702:	f7fd f939 	bl	8005978 <HAL_InitTick>
 8008706:	1e03      	subs	r3, r0, #0
 8008708:	d051      	beq.n	80087ae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e232      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d030      	beq.n	8008778 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008716:	4b5b      	ldr	r3, [pc, #364]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a5e      	ldr	r2, [pc, #376]	; (8008894 <HAL_RCC_OscConfig+0x33c>)
 800871c:	4013      	ands	r3, r2
 800871e:	0019      	movs	r1, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691a      	ldr	r2, [r3, #16]
 8008724:	4b57      	ldr	r3, [pc, #348]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 8008726:	430a      	orrs	r2, r1
 8008728:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800872a:	4b56      	ldr	r3, [pc, #344]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	4b55      	ldr	r3, [pc, #340]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 8008730:	2180      	movs	r1, #128	; 0x80
 8008732:	0049      	lsls	r1, r1, #1
 8008734:	430a      	orrs	r2, r1
 8008736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008738:	f7fd f97a 	bl	8005a30 <HAL_GetTick>
 800873c:	0003      	movs	r3, r0
 800873e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008740:	e008      	b.n	8008754 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008742:	f7fd f975 	bl	8005a30 <HAL_GetTick>
 8008746:	0002      	movs	r2, r0
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	2b02      	cmp	r3, #2
 800874e:	d901      	bls.n	8008754 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e20f      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008754:	4b4b      	ldr	r3, [pc, #300]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	2380      	movs	r3, #128	; 0x80
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	4013      	ands	r3, r2
 800875e:	d0f0      	beq.n	8008742 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008760:	4b48      	ldr	r3, [pc, #288]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	4a4a      	ldr	r2, [pc, #296]	; (8008890 <HAL_RCC_OscConfig+0x338>)
 8008766:	4013      	ands	r3, r2
 8008768:	0019      	movs	r1, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	021a      	lsls	r2, r3, #8
 8008770:	4b44      	ldr	r3, [pc, #272]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 8008772:	430a      	orrs	r2, r1
 8008774:	605a      	str	r2, [r3, #4]
 8008776:	e01b      	b.n	80087b0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008778:	4b42      	ldr	r3, [pc, #264]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	4b41      	ldr	r3, [pc, #260]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 800877e:	4949      	ldr	r1, [pc, #292]	; (80088a4 <HAL_RCC_OscConfig+0x34c>)
 8008780:	400a      	ands	r2, r1
 8008782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008784:	f7fd f954 	bl	8005a30 <HAL_GetTick>
 8008788:	0003      	movs	r3, r0
 800878a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800878c:	e008      	b.n	80087a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800878e:	f7fd f94f 	bl	8005a30 <HAL_GetTick>
 8008792:	0002      	movs	r2, r0
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	2b02      	cmp	r3, #2
 800879a:	d901      	bls.n	80087a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e1e9      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80087a0:	4b38      	ldr	r3, [pc, #224]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	2380      	movs	r3, #128	; 0x80
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	4013      	ands	r3, r2
 80087aa:	d1f0      	bne.n	800878e <HAL_RCC_OscConfig+0x236>
 80087ac:	e000      	b.n	80087b0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2208      	movs	r2, #8
 80087b6:	4013      	ands	r3, r2
 80087b8:	d047      	beq.n	800884a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80087ba:	4b32      	ldr	r3, [pc, #200]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	2238      	movs	r2, #56	; 0x38
 80087c0:	4013      	ands	r3, r2
 80087c2:	2b18      	cmp	r3, #24
 80087c4:	d10a      	bne.n	80087dc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80087c6:	4b2f      	ldr	r3, [pc, #188]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80087c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087ca:	2202      	movs	r2, #2
 80087cc:	4013      	ands	r3, r2
 80087ce:	d03c      	beq.n	800884a <HAL_RCC_OscConfig+0x2f2>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d138      	bne.n	800884a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e1cb      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d019      	beq.n	8008818 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80087e4:	4b27      	ldr	r3, [pc, #156]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80087e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80087e8:	4b26      	ldr	r3, [pc, #152]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 80087ea:	2101      	movs	r1, #1
 80087ec:	430a      	orrs	r2, r1
 80087ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f0:	f7fd f91e 	bl	8005a30 <HAL_GetTick>
 80087f4:	0003      	movs	r3, r0
 80087f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087f8:	e008      	b.n	800880c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087fa:	f7fd f919 	bl	8005a30 <HAL_GetTick>
 80087fe:	0002      	movs	r2, r0
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	2b02      	cmp	r3, #2
 8008806:	d901      	bls.n	800880c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e1b3      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800880c:	4b1d      	ldr	r3, [pc, #116]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 800880e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008810:	2202      	movs	r2, #2
 8008812:	4013      	ands	r3, r2
 8008814:	d0f1      	beq.n	80087fa <HAL_RCC_OscConfig+0x2a2>
 8008816:	e018      	b.n	800884a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008818:	4b1a      	ldr	r3, [pc, #104]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 800881a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800881c:	4b19      	ldr	r3, [pc, #100]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 800881e:	2101      	movs	r1, #1
 8008820:	438a      	bics	r2, r1
 8008822:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008824:	f7fd f904 	bl	8005a30 <HAL_GetTick>
 8008828:	0003      	movs	r3, r0
 800882a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800882c:	e008      	b.n	8008840 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800882e:	f7fd f8ff 	bl	8005a30 <HAL_GetTick>
 8008832:	0002      	movs	r2, r0
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	2b02      	cmp	r3, #2
 800883a:	d901      	bls.n	8008840 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e199      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008840:	4b10      	ldr	r3, [pc, #64]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 8008842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008844:	2202      	movs	r2, #2
 8008846:	4013      	ands	r3, r2
 8008848:	d1f1      	bne.n	800882e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2204      	movs	r2, #4
 8008850:	4013      	ands	r3, r2
 8008852:	d100      	bne.n	8008856 <HAL_RCC_OscConfig+0x2fe>
 8008854:	e0c6      	b.n	80089e4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008856:	231f      	movs	r3, #31
 8008858:	18fb      	adds	r3, r7, r3
 800885a:	2200      	movs	r2, #0
 800885c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800885e:	4b09      	ldr	r3, [pc, #36]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	2238      	movs	r2, #56	; 0x38
 8008864:	4013      	ands	r3, r2
 8008866:	2b20      	cmp	r3, #32
 8008868:	d11e      	bne.n	80088a8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800886a:	4b06      	ldr	r3, [pc, #24]	; (8008884 <HAL_RCC_OscConfig+0x32c>)
 800886c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800886e:	2202      	movs	r2, #2
 8008870:	4013      	ands	r3, r2
 8008872:	d100      	bne.n	8008876 <HAL_RCC_OscConfig+0x31e>
 8008874:	e0b6      	b.n	80089e4 <HAL_RCC_OscConfig+0x48c>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d000      	beq.n	8008880 <HAL_RCC_OscConfig+0x328>
 800887e:	e0b1      	b.n	80089e4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e177      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
 8008884:	40021000 	.word	0x40021000
 8008888:	fffeffff 	.word	0xfffeffff
 800888c:	fffbffff 	.word	0xfffbffff
 8008890:	ffff80ff 	.word	0xffff80ff
 8008894:	ffffc7ff 	.word	0xffffc7ff
 8008898:	00f42400 	.word	0x00f42400
 800889c:	20000034 	.word	0x20000034
 80088a0:	20000038 	.word	0x20000038
 80088a4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80088a8:	4bb4      	ldr	r3, [pc, #720]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 80088aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088ac:	2380      	movs	r3, #128	; 0x80
 80088ae:	055b      	lsls	r3, r3, #21
 80088b0:	4013      	ands	r3, r2
 80088b2:	d101      	bne.n	80088b8 <HAL_RCC_OscConfig+0x360>
 80088b4:	2301      	movs	r3, #1
 80088b6:	e000      	b.n	80088ba <HAL_RCC_OscConfig+0x362>
 80088b8:	2300      	movs	r3, #0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d011      	beq.n	80088e2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80088be:	4baf      	ldr	r3, [pc, #700]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 80088c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088c2:	4bae      	ldr	r3, [pc, #696]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 80088c4:	2180      	movs	r1, #128	; 0x80
 80088c6:	0549      	lsls	r1, r1, #21
 80088c8:	430a      	orrs	r2, r1
 80088ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80088cc:	4bab      	ldr	r3, [pc, #684]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 80088ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088d0:	2380      	movs	r3, #128	; 0x80
 80088d2:	055b      	lsls	r3, r3, #21
 80088d4:	4013      	ands	r3, r2
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80088da:	231f      	movs	r3, #31
 80088dc:	18fb      	adds	r3, r7, r3
 80088de:	2201      	movs	r2, #1
 80088e0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088e2:	4ba7      	ldr	r3, [pc, #668]	; (8008b80 <HAL_RCC_OscConfig+0x628>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	2380      	movs	r3, #128	; 0x80
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	4013      	ands	r3, r2
 80088ec:	d11a      	bne.n	8008924 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80088ee:	4ba4      	ldr	r3, [pc, #656]	; (8008b80 <HAL_RCC_OscConfig+0x628>)
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	4ba3      	ldr	r3, [pc, #652]	; (8008b80 <HAL_RCC_OscConfig+0x628>)
 80088f4:	2180      	movs	r1, #128	; 0x80
 80088f6:	0049      	lsls	r1, r1, #1
 80088f8:	430a      	orrs	r2, r1
 80088fa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80088fc:	f7fd f898 	bl	8005a30 <HAL_GetTick>
 8008900:	0003      	movs	r3, r0
 8008902:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008904:	e008      	b.n	8008918 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008906:	f7fd f893 	bl	8005a30 <HAL_GetTick>
 800890a:	0002      	movs	r2, r0
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	2b02      	cmp	r3, #2
 8008912:	d901      	bls.n	8008918 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e12d      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008918:	4b99      	ldr	r3, [pc, #612]	; (8008b80 <HAL_RCC_OscConfig+0x628>)
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	2380      	movs	r3, #128	; 0x80
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	4013      	ands	r3, r2
 8008922:	d0f0      	beq.n	8008906 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d106      	bne.n	800893a <HAL_RCC_OscConfig+0x3e2>
 800892c:	4b93      	ldr	r3, [pc, #588]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 800892e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008930:	4b92      	ldr	r3, [pc, #584]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008932:	2101      	movs	r1, #1
 8008934:	430a      	orrs	r2, r1
 8008936:	65da      	str	r2, [r3, #92]	; 0x5c
 8008938:	e01c      	b.n	8008974 <HAL_RCC_OscConfig+0x41c>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	2b05      	cmp	r3, #5
 8008940:	d10c      	bne.n	800895c <HAL_RCC_OscConfig+0x404>
 8008942:	4b8e      	ldr	r3, [pc, #568]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008944:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008946:	4b8d      	ldr	r3, [pc, #564]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008948:	2104      	movs	r1, #4
 800894a:	430a      	orrs	r2, r1
 800894c:	65da      	str	r2, [r3, #92]	; 0x5c
 800894e:	4b8b      	ldr	r3, [pc, #556]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008950:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008952:	4b8a      	ldr	r3, [pc, #552]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008954:	2101      	movs	r1, #1
 8008956:	430a      	orrs	r2, r1
 8008958:	65da      	str	r2, [r3, #92]	; 0x5c
 800895a:	e00b      	b.n	8008974 <HAL_RCC_OscConfig+0x41c>
 800895c:	4b87      	ldr	r3, [pc, #540]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 800895e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008960:	4b86      	ldr	r3, [pc, #536]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008962:	2101      	movs	r1, #1
 8008964:	438a      	bics	r2, r1
 8008966:	65da      	str	r2, [r3, #92]	; 0x5c
 8008968:	4b84      	ldr	r3, [pc, #528]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 800896a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800896c:	4b83      	ldr	r3, [pc, #524]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 800896e:	2104      	movs	r1, #4
 8008970:	438a      	bics	r2, r1
 8008972:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d014      	beq.n	80089a6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800897c:	f7fd f858 	bl	8005a30 <HAL_GetTick>
 8008980:	0003      	movs	r3, r0
 8008982:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008984:	e009      	b.n	800899a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008986:	f7fd f853 	bl	8005a30 <HAL_GetTick>
 800898a:	0002      	movs	r2, r0
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	4a7c      	ldr	r2, [pc, #496]	; (8008b84 <HAL_RCC_OscConfig+0x62c>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d901      	bls.n	800899a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e0ec      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800899a:	4b78      	ldr	r3, [pc, #480]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 800899c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800899e:	2202      	movs	r2, #2
 80089a0:	4013      	ands	r3, r2
 80089a2:	d0f0      	beq.n	8008986 <HAL_RCC_OscConfig+0x42e>
 80089a4:	e013      	b.n	80089ce <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a6:	f7fd f843 	bl	8005a30 <HAL_GetTick>
 80089aa:	0003      	movs	r3, r0
 80089ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80089ae:	e009      	b.n	80089c4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089b0:	f7fd f83e 	bl	8005a30 <HAL_GetTick>
 80089b4:	0002      	movs	r2, r0
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	4a72      	ldr	r2, [pc, #456]	; (8008b84 <HAL_RCC_OscConfig+0x62c>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d901      	bls.n	80089c4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e0d7      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80089c4:	4b6d      	ldr	r3, [pc, #436]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 80089c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c8:	2202      	movs	r2, #2
 80089ca:	4013      	ands	r3, r2
 80089cc:	d1f0      	bne.n	80089b0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80089ce:	231f      	movs	r3, #31
 80089d0:	18fb      	adds	r3, r7, r3
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d105      	bne.n	80089e4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80089d8:	4b68      	ldr	r3, [pc, #416]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 80089da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089dc:	4b67      	ldr	r3, [pc, #412]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 80089de:	496a      	ldr	r1, [pc, #424]	; (8008b88 <HAL_RCC_OscConfig+0x630>)
 80089e0:	400a      	ands	r2, r1
 80089e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d100      	bne.n	80089ee <HAL_RCC_OscConfig+0x496>
 80089ec:	e0c1      	b.n	8008b72 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80089ee:	4b63      	ldr	r3, [pc, #396]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	2238      	movs	r2, #56	; 0x38
 80089f4:	4013      	ands	r3, r2
 80089f6:	2b10      	cmp	r3, #16
 80089f8:	d100      	bne.n	80089fc <HAL_RCC_OscConfig+0x4a4>
 80089fa:	e081      	b.n	8008b00 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d156      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a04:	4b5d      	ldr	r3, [pc, #372]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	4b5c      	ldr	r3, [pc, #368]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008a0a:	4960      	ldr	r1, [pc, #384]	; (8008b8c <HAL_RCC_OscConfig+0x634>)
 8008a0c:	400a      	ands	r2, r1
 8008a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a10:	f7fd f80e 	bl	8005a30 <HAL_GetTick>
 8008a14:	0003      	movs	r3, r0
 8008a16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a18:	e008      	b.n	8008a2c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a1a:	f7fd f809 	bl	8005a30 <HAL_GetTick>
 8008a1e:	0002      	movs	r2, r0
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d901      	bls.n	8008a2c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e0a3      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a2c:	4b53      	ldr	r3, [pc, #332]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	2380      	movs	r3, #128	; 0x80
 8008a32:	049b      	lsls	r3, r3, #18
 8008a34:	4013      	ands	r3, r2
 8008a36:	d1f0      	bne.n	8008a1a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a38:	4b50      	ldr	r3, [pc, #320]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	4a54      	ldr	r2, [pc, #336]	; (8008b90 <HAL_RCC_OscConfig+0x638>)
 8008a3e:	4013      	ands	r3, r2
 8008a40:	0019      	movs	r1, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a1a      	ldr	r2, [r3, #32]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a50:	021b      	lsls	r3, r3, #8
 8008a52:	431a      	orrs	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a64:	431a      	orrs	r2, r3
 8008a66:	4b45      	ldr	r3, [pc, #276]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008a68:	430a      	orrs	r2, r1
 8008a6a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a6c:	4b43      	ldr	r3, [pc, #268]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	4b42      	ldr	r3, [pc, #264]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008a72:	2180      	movs	r1, #128	; 0x80
 8008a74:	0449      	lsls	r1, r1, #17
 8008a76:	430a      	orrs	r2, r1
 8008a78:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008a7a:	4b40      	ldr	r3, [pc, #256]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	4b3f      	ldr	r3, [pc, #252]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008a80:	2180      	movs	r1, #128	; 0x80
 8008a82:	0549      	lsls	r1, r1, #21
 8008a84:	430a      	orrs	r2, r1
 8008a86:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a88:	f7fc ffd2 	bl	8005a30 <HAL_GetTick>
 8008a8c:	0003      	movs	r3, r0
 8008a8e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a90:	e008      	b.n	8008aa4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a92:	f7fc ffcd 	bl	8005a30 <HAL_GetTick>
 8008a96:	0002      	movs	r2, r0
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d901      	bls.n	8008aa4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e067      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008aa4:	4b35      	ldr	r3, [pc, #212]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	2380      	movs	r3, #128	; 0x80
 8008aaa:	049b      	lsls	r3, r3, #18
 8008aac:	4013      	ands	r3, r2
 8008aae:	d0f0      	beq.n	8008a92 <HAL_RCC_OscConfig+0x53a>
 8008ab0:	e05f      	b.n	8008b72 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ab2:	4b32      	ldr	r3, [pc, #200]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	4b31      	ldr	r3, [pc, #196]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008ab8:	4934      	ldr	r1, [pc, #208]	; (8008b8c <HAL_RCC_OscConfig+0x634>)
 8008aba:	400a      	ands	r2, r1
 8008abc:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8008abe:	4b2f      	ldr	r3, [pc, #188]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	4b2e      	ldr	r3, [pc, #184]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008ac4:	2103      	movs	r1, #3
 8008ac6:	438a      	bics	r2, r1
 8008ac8:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008aca:	4b2c      	ldr	r3, [pc, #176]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008acc:	68da      	ldr	r2, [r3, #12]
 8008ace:	4b2b      	ldr	r3, [pc, #172]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008ad0:	4930      	ldr	r1, [pc, #192]	; (8008b94 <HAL_RCC_OscConfig+0x63c>)
 8008ad2:	400a      	ands	r2, r1
 8008ad4:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad6:	f7fc ffab 	bl	8005a30 <HAL_GetTick>
 8008ada:	0003      	movs	r3, r0
 8008adc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ade:	e008      	b.n	8008af2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ae0:	f7fc ffa6 	bl	8005a30 <HAL_GetTick>
 8008ae4:	0002      	movs	r2, r0
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d901      	bls.n	8008af2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e040      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008af2:	4b22      	ldr	r3, [pc, #136]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	2380      	movs	r3, #128	; 0x80
 8008af8:	049b      	lsls	r3, r3, #18
 8008afa:	4013      	ands	r3, r2
 8008afc:	d1f0      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x588>
 8008afe:	e038      	b.n	8008b72 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d101      	bne.n	8008b0c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e033      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008b0c:	4b1b      	ldr	r3, [pc, #108]	; (8008b7c <HAL_RCC_OscConfig+0x624>)
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2203      	movs	r2, #3
 8008b16:	401a      	ands	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d126      	bne.n	8008b6e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2270      	movs	r2, #112	; 0x70
 8008b24:	401a      	ands	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d11f      	bne.n	8008b6e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	23fe      	movs	r3, #254	; 0xfe
 8008b32:	01db      	lsls	r3, r3, #7
 8008b34:	401a      	ands	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d116      	bne.n	8008b6e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	23f8      	movs	r3, #248	; 0xf8
 8008b44:	039b      	lsls	r3, r3, #14
 8008b46:	401a      	ands	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d10e      	bne.n	8008b6e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	23e0      	movs	r3, #224	; 0xe0
 8008b54:	051b      	lsls	r3, r3, #20
 8008b56:	401a      	ands	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d106      	bne.n	8008b6e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	0f5b      	lsrs	r3, r3, #29
 8008b64:	075a      	lsls	r2, r3, #29
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d001      	beq.n	8008b72 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e000      	b.n	8008b74 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	0018      	movs	r0, r3
 8008b76:	46bd      	mov	sp, r7
 8008b78:	b008      	add	sp, #32
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	40021000 	.word	0x40021000
 8008b80:	40007000 	.word	0x40007000
 8008b84:	00001388 	.word	0x00001388
 8008b88:	efffffff 	.word	0xefffffff
 8008b8c:	feffffff 	.word	0xfeffffff
 8008b90:	11c1808c 	.word	0x11c1808c
 8008b94:	eefeffff 	.word	0xeefeffff

08008b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e0e9      	b.n	8008d80 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008bac:	4b76      	ldr	r3, [pc, #472]	; (8008d88 <HAL_RCC_ClockConfig+0x1f0>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2207      	movs	r2, #7
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d91e      	bls.n	8008bf8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bba:	4b73      	ldr	r3, [pc, #460]	; (8008d88 <HAL_RCC_ClockConfig+0x1f0>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2207      	movs	r2, #7
 8008bc0:	4393      	bics	r3, r2
 8008bc2:	0019      	movs	r1, r3
 8008bc4:	4b70      	ldr	r3, [pc, #448]	; (8008d88 <HAL_RCC_ClockConfig+0x1f0>)
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008bcc:	f7fc ff30 	bl	8005a30 <HAL_GetTick>
 8008bd0:	0003      	movs	r3, r0
 8008bd2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008bd4:	e009      	b.n	8008bea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bd6:	f7fc ff2b 	bl	8005a30 <HAL_GetTick>
 8008bda:	0002      	movs	r2, r0
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	1ad3      	subs	r3, r2, r3
 8008be0:	4a6a      	ldr	r2, [pc, #424]	; (8008d8c <HAL_RCC_ClockConfig+0x1f4>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d901      	bls.n	8008bea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e0ca      	b.n	8008d80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008bea:	4b67      	ldr	r3, [pc, #412]	; (8008d88 <HAL_RCC_ClockConfig+0x1f0>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2207      	movs	r2, #7
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d1ee      	bne.n	8008bd6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	4013      	ands	r3, r2
 8008c00:	d015      	beq.n	8008c2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2204      	movs	r2, #4
 8008c08:	4013      	ands	r3, r2
 8008c0a:	d006      	beq.n	8008c1a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008c0c:	4b60      	ldr	r3, [pc, #384]	; (8008d90 <HAL_RCC_ClockConfig+0x1f8>)
 8008c0e:	689a      	ldr	r2, [r3, #8]
 8008c10:	4b5f      	ldr	r3, [pc, #380]	; (8008d90 <HAL_RCC_ClockConfig+0x1f8>)
 8008c12:	21e0      	movs	r1, #224	; 0xe0
 8008c14:	01c9      	lsls	r1, r1, #7
 8008c16:	430a      	orrs	r2, r1
 8008c18:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c1a:	4b5d      	ldr	r3, [pc, #372]	; (8008d90 <HAL_RCC_ClockConfig+0x1f8>)
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	4a5d      	ldr	r2, [pc, #372]	; (8008d94 <HAL_RCC_ClockConfig+0x1fc>)
 8008c20:	4013      	ands	r3, r2
 8008c22:	0019      	movs	r1, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	4b59      	ldr	r3, [pc, #356]	; (8008d90 <HAL_RCC_ClockConfig+0x1f8>)
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2201      	movs	r2, #1
 8008c34:	4013      	ands	r3, r2
 8008c36:	d057      	beq.n	8008ce8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d107      	bne.n	8008c50 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c40:	4b53      	ldr	r3, [pc, #332]	; (8008d90 <HAL_RCC_ClockConfig+0x1f8>)
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	2380      	movs	r3, #128	; 0x80
 8008c46:	029b      	lsls	r3, r3, #10
 8008c48:	4013      	ands	r3, r2
 8008c4a:	d12b      	bne.n	8008ca4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e097      	b.n	8008d80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d107      	bne.n	8008c68 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c58:	4b4d      	ldr	r3, [pc, #308]	; (8008d90 <HAL_RCC_ClockConfig+0x1f8>)
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	2380      	movs	r3, #128	; 0x80
 8008c5e:	049b      	lsls	r3, r3, #18
 8008c60:	4013      	ands	r3, r2
 8008c62:	d11f      	bne.n	8008ca4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e08b      	b.n	8008d80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d107      	bne.n	8008c80 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c70:	4b47      	ldr	r3, [pc, #284]	; (8008d90 <HAL_RCC_ClockConfig+0x1f8>)
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	2380      	movs	r3, #128	; 0x80
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	4013      	ands	r3, r2
 8008c7a:	d113      	bne.n	8008ca4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e07f      	b.n	8008d80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d106      	bne.n	8008c96 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c88:	4b41      	ldr	r3, [pc, #260]	; (8008d90 <HAL_RCC_ClockConfig+0x1f8>)
 8008c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	4013      	ands	r3, r2
 8008c90:	d108      	bne.n	8008ca4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e074      	b.n	8008d80 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c96:	4b3e      	ldr	r3, [pc, #248]	; (8008d90 <HAL_RCC_ClockConfig+0x1f8>)
 8008c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	d101      	bne.n	8008ca4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e06d      	b.n	8008d80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ca4:	4b3a      	ldr	r3, [pc, #232]	; (8008d90 <HAL_RCC_ClockConfig+0x1f8>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	2207      	movs	r2, #7
 8008caa:	4393      	bics	r3, r2
 8008cac:	0019      	movs	r1, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	4b37      	ldr	r3, [pc, #220]	; (8008d90 <HAL_RCC_ClockConfig+0x1f8>)
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cb8:	f7fc feba 	bl	8005a30 <HAL_GetTick>
 8008cbc:	0003      	movs	r3, r0
 8008cbe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cc0:	e009      	b.n	8008cd6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cc2:	f7fc feb5 	bl	8005a30 <HAL_GetTick>
 8008cc6:	0002      	movs	r2, r0
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	4a2f      	ldr	r2, [pc, #188]	; (8008d8c <HAL_RCC_ClockConfig+0x1f4>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d901      	bls.n	8008cd6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e054      	b.n	8008d80 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cd6:	4b2e      	ldr	r3, [pc, #184]	; (8008d90 <HAL_RCC_ClockConfig+0x1f8>)
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	2238      	movs	r2, #56	; 0x38
 8008cdc:	401a      	ands	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	00db      	lsls	r3, r3, #3
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d1ec      	bne.n	8008cc2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ce8:	4b27      	ldr	r3, [pc, #156]	; (8008d88 <HAL_RCC_ClockConfig+0x1f0>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2207      	movs	r2, #7
 8008cee:	4013      	ands	r3, r2
 8008cf0:	683a      	ldr	r2, [r7, #0]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d21e      	bcs.n	8008d34 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cf6:	4b24      	ldr	r3, [pc, #144]	; (8008d88 <HAL_RCC_ClockConfig+0x1f0>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2207      	movs	r2, #7
 8008cfc:	4393      	bics	r3, r2
 8008cfe:	0019      	movs	r1, r3
 8008d00:	4b21      	ldr	r3, [pc, #132]	; (8008d88 <HAL_RCC_ClockConfig+0x1f0>)
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	430a      	orrs	r2, r1
 8008d06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008d08:	f7fc fe92 	bl	8005a30 <HAL_GetTick>
 8008d0c:	0003      	movs	r3, r0
 8008d0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008d10:	e009      	b.n	8008d26 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d12:	f7fc fe8d 	bl	8005a30 <HAL_GetTick>
 8008d16:	0002      	movs	r2, r0
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	4a1b      	ldr	r2, [pc, #108]	; (8008d8c <HAL_RCC_ClockConfig+0x1f4>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e02c      	b.n	8008d80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008d26:	4b18      	ldr	r3, [pc, #96]	; (8008d88 <HAL_RCC_ClockConfig+0x1f0>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2207      	movs	r2, #7
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d1ee      	bne.n	8008d12 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2204      	movs	r2, #4
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	d009      	beq.n	8008d52 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008d3e:	4b14      	ldr	r3, [pc, #80]	; (8008d90 <HAL_RCC_ClockConfig+0x1f8>)
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	4a15      	ldr	r2, [pc, #84]	; (8008d98 <HAL_RCC_ClockConfig+0x200>)
 8008d44:	4013      	ands	r3, r2
 8008d46:	0019      	movs	r1, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68da      	ldr	r2, [r3, #12]
 8008d4c:	4b10      	ldr	r3, [pc, #64]	; (8008d90 <HAL_RCC_ClockConfig+0x1f8>)
 8008d4e:	430a      	orrs	r2, r1
 8008d50:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008d52:	f000 f829 	bl	8008da8 <HAL_RCC_GetSysClockFreq>
 8008d56:	0001      	movs	r1, r0
 8008d58:	4b0d      	ldr	r3, [pc, #52]	; (8008d90 <HAL_RCC_ClockConfig+0x1f8>)
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	0a1b      	lsrs	r3, r3, #8
 8008d5e:	220f      	movs	r2, #15
 8008d60:	401a      	ands	r2, r3
 8008d62:	4b0e      	ldr	r3, [pc, #56]	; (8008d9c <HAL_RCC_ClockConfig+0x204>)
 8008d64:	0092      	lsls	r2, r2, #2
 8008d66:	58d3      	ldr	r3, [r2, r3]
 8008d68:	221f      	movs	r2, #31
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	000a      	movs	r2, r1
 8008d6e:	40da      	lsrs	r2, r3
 8008d70:	4b0b      	ldr	r3, [pc, #44]	; (8008da0 <HAL_RCC_ClockConfig+0x208>)
 8008d72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008d74:	4b0b      	ldr	r3, [pc, #44]	; (8008da4 <HAL_RCC_ClockConfig+0x20c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	0018      	movs	r0, r3
 8008d7a:	f7fc fdfd 	bl	8005978 <HAL_InitTick>
 8008d7e:	0003      	movs	r3, r0
}
 8008d80:	0018      	movs	r0, r3
 8008d82:	46bd      	mov	sp, r7
 8008d84:	b004      	add	sp, #16
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	40022000 	.word	0x40022000
 8008d8c:	00001388 	.word	0x00001388
 8008d90:	40021000 	.word	0x40021000
 8008d94:	fffff0ff 	.word	0xfffff0ff
 8008d98:	ffff8fff 	.word	0xffff8fff
 8008d9c:	08011bbc 	.word	0x08011bbc
 8008da0:	20000034 	.word	0x20000034
 8008da4:	20000038 	.word	0x20000038

08008da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008dae:	4b3c      	ldr	r3, [pc, #240]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	2238      	movs	r2, #56	; 0x38
 8008db4:	4013      	ands	r3, r2
 8008db6:	d10f      	bne.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008db8:	4b39      	ldr	r3, [pc, #228]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	0adb      	lsrs	r3, r3, #11
 8008dbe:	2207      	movs	r2, #7
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	409a      	lsls	r2, r3
 8008dc6:	0013      	movs	r3, r2
 8008dc8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	4835      	ldr	r0, [pc, #212]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008dce:	f7f7 f999 	bl	8000104 <__udivsi3>
 8008dd2:	0003      	movs	r3, r0
 8008dd4:	613b      	str	r3, [r7, #16]
 8008dd6:	e05d      	b.n	8008e94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008dd8:	4b31      	ldr	r3, [pc, #196]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	2238      	movs	r2, #56	; 0x38
 8008dde:	4013      	ands	r3, r2
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	d102      	bne.n	8008dea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008de4:	4b30      	ldr	r3, [pc, #192]	; (8008ea8 <HAL_RCC_GetSysClockFreq+0x100>)
 8008de6:	613b      	str	r3, [r7, #16]
 8008de8:	e054      	b.n	8008e94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008dea:	4b2d      	ldr	r3, [pc, #180]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	2238      	movs	r2, #56	; 0x38
 8008df0:	4013      	ands	r3, r2
 8008df2:	2b10      	cmp	r3, #16
 8008df4:	d138      	bne.n	8008e68 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008df6:	4b2a      	ldr	r3, [pc, #168]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	2203      	movs	r2, #3
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e00:	4b27      	ldr	r3, [pc, #156]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	091b      	lsrs	r3, r3, #4
 8008e06:	2207      	movs	r2, #7
 8008e08:	4013      	ands	r3, r2
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	d10d      	bne.n	8008e30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e14:	68b9      	ldr	r1, [r7, #8]
 8008e16:	4824      	ldr	r0, [pc, #144]	; (8008ea8 <HAL_RCC_GetSysClockFreq+0x100>)
 8008e18:	f7f7 f974 	bl	8000104 <__udivsi3>
 8008e1c:	0003      	movs	r3, r0
 8008e1e:	0019      	movs	r1, r3
 8008e20:	4b1f      	ldr	r3, [pc, #124]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	0a1b      	lsrs	r3, r3, #8
 8008e26:	227f      	movs	r2, #127	; 0x7f
 8008e28:	4013      	ands	r3, r2
 8008e2a:	434b      	muls	r3, r1
 8008e2c:	617b      	str	r3, [r7, #20]
        break;
 8008e2e:	e00d      	b.n	8008e4c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008e30:	68b9      	ldr	r1, [r7, #8]
 8008e32:	481c      	ldr	r0, [pc, #112]	; (8008ea4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008e34:	f7f7 f966 	bl	8000104 <__udivsi3>
 8008e38:	0003      	movs	r3, r0
 8008e3a:	0019      	movs	r1, r3
 8008e3c:	4b18      	ldr	r3, [pc, #96]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	0a1b      	lsrs	r3, r3, #8
 8008e42:	227f      	movs	r2, #127	; 0x7f
 8008e44:	4013      	ands	r3, r2
 8008e46:	434b      	muls	r3, r1
 8008e48:	617b      	str	r3, [r7, #20]
        break;
 8008e4a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008e4c:	4b14      	ldr	r3, [pc, #80]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	0f5b      	lsrs	r3, r3, #29
 8008e52:	2207      	movs	r2, #7
 8008e54:	4013      	ands	r3, r2
 8008e56:	3301      	adds	r3, #1
 8008e58:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008e5a:	6879      	ldr	r1, [r7, #4]
 8008e5c:	6978      	ldr	r0, [r7, #20]
 8008e5e:	f7f7 f951 	bl	8000104 <__udivsi3>
 8008e62:	0003      	movs	r3, r0
 8008e64:	613b      	str	r3, [r7, #16]
 8008e66:	e015      	b.n	8008e94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008e68:	4b0d      	ldr	r3, [pc, #52]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	2238      	movs	r2, #56	; 0x38
 8008e6e:	4013      	ands	r3, r2
 8008e70:	2b20      	cmp	r3, #32
 8008e72:	d103      	bne.n	8008e7c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008e74:	2380      	movs	r3, #128	; 0x80
 8008e76:	021b      	lsls	r3, r3, #8
 8008e78:	613b      	str	r3, [r7, #16]
 8008e7a:	e00b      	b.n	8008e94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008e7c:	4b08      	ldr	r3, [pc, #32]	; (8008ea0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	2238      	movs	r2, #56	; 0x38
 8008e82:	4013      	ands	r3, r2
 8008e84:	2b18      	cmp	r3, #24
 8008e86:	d103      	bne.n	8008e90 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008e88:	23fa      	movs	r3, #250	; 0xfa
 8008e8a:	01db      	lsls	r3, r3, #7
 8008e8c:	613b      	str	r3, [r7, #16]
 8008e8e:	e001      	b.n	8008e94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008e90:	2300      	movs	r3, #0
 8008e92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008e94:	693b      	ldr	r3, [r7, #16]
}
 8008e96:	0018      	movs	r0, r3
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	b006      	add	sp, #24
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	46c0      	nop			; (mov r8, r8)
 8008ea0:	40021000 	.word	0x40021000
 8008ea4:	00f42400 	.word	0x00f42400
 8008ea8:	007a1200 	.word	0x007a1200

08008eac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008eb0:	4b02      	ldr	r3, [pc, #8]	; (8008ebc <HAL_RCC_GetHCLKFreq+0x10>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
}
 8008eb4:	0018      	movs	r0, r3
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	46c0      	nop			; (mov r8, r8)
 8008ebc:	20000034 	.word	0x20000034

08008ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ec0:	b5b0      	push	{r4, r5, r7, lr}
 8008ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008ec4:	f7ff fff2 	bl	8008eac <HAL_RCC_GetHCLKFreq>
 8008ec8:	0004      	movs	r4, r0
 8008eca:	f7ff fb39 	bl	8008540 <LL_RCC_GetAPB1Prescaler>
 8008ece:	0003      	movs	r3, r0
 8008ed0:	0b1a      	lsrs	r2, r3, #12
 8008ed2:	4b05      	ldr	r3, [pc, #20]	; (8008ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ed4:	0092      	lsls	r2, r2, #2
 8008ed6:	58d3      	ldr	r3, [r2, r3]
 8008ed8:	221f      	movs	r2, #31
 8008eda:	4013      	ands	r3, r2
 8008edc:	40dc      	lsrs	r4, r3
 8008ede:	0023      	movs	r3, r4
}
 8008ee0:	0018      	movs	r0, r3
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ee6:	46c0      	nop			; (mov r8, r8)
 8008ee8:	08011bfc 	.word	0x08011bfc

08008eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008ef4:	2313      	movs	r3, #19
 8008ef6:	18fb      	adds	r3, r7, r3
 8008ef8:	2200      	movs	r2, #0
 8008efa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008efc:	2312      	movs	r3, #18
 8008efe:	18fb      	adds	r3, r7, r3
 8008f00:	2200      	movs	r2, #0
 8008f02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	2380      	movs	r3, #128	; 0x80
 8008f0a:	029b      	lsls	r3, r3, #10
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	d100      	bne.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008f10:	e0a3      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f12:	2011      	movs	r0, #17
 8008f14:	183b      	adds	r3, r7, r0
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f1a:	4bc3      	ldr	r3, [pc, #780]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f1e:	2380      	movs	r3, #128	; 0x80
 8008f20:	055b      	lsls	r3, r3, #21
 8008f22:	4013      	ands	r3, r2
 8008f24:	d110      	bne.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f26:	4bc0      	ldr	r3, [pc, #768]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f2a:	4bbf      	ldr	r3, [pc, #764]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f2c:	2180      	movs	r1, #128	; 0x80
 8008f2e:	0549      	lsls	r1, r1, #21
 8008f30:	430a      	orrs	r2, r1
 8008f32:	63da      	str	r2, [r3, #60]	; 0x3c
 8008f34:	4bbc      	ldr	r3, [pc, #752]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f38:	2380      	movs	r3, #128	; 0x80
 8008f3a:	055b      	lsls	r3, r3, #21
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	60bb      	str	r3, [r7, #8]
 8008f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f42:	183b      	adds	r3, r7, r0
 8008f44:	2201      	movs	r2, #1
 8008f46:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f48:	4bb8      	ldr	r3, [pc, #736]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	4bb7      	ldr	r3, [pc, #732]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008f4e:	2180      	movs	r1, #128	; 0x80
 8008f50:	0049      	lsls	r1, r1, #1
 8008f52:	430a      	orrs	r2, r1
 8008f54:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f56:	f7fc fd6b 	bl	8005a30 <HAL_GetTick>
 8008f5a:	0003      	movs	r3, r0
 8008f5c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f5e:	e00b      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f60:	f7fc fd66 	bl	8005a30 <HAL_GetTick>
 8008f64:	0002      	movs	r2, r0
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d904      	bls.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008f6e:	2313      	movs	r3, #19
 8008f70:	18fb      	adds	r3, r7, r3
 8008f72:	2203      	movs	r2, #3
 8008f74:	701a      	strb	r2, [r3, #0]
        break;
 8008f76:	e005      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f78:	4bac      	ldr	r3, [pc, #688]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	2380      	movs	r3, #128	; 0x80
 8008f7e:	005b      	lsls	r3, r3, #1
 8008f80:	4013      	ands	r3, r2
 8008f82:	d0ed      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008f84:	2313      	movs	r3, #19
 8008f86:	18fb      	adds	r3, r7, r3
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d154      	bne.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008f8e:	4ba6      	ldr	r3, [pc, #664]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008f90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f92:	23c0      	movs	r3, #192	; 0xc0
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4013      	ands	r3, r2
 8008f98:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d019      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d014      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008faa:	4b9f      	ldr	r3, [pc, #636]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fae:	4aa0      	ldr	r2, [pc, #640]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008fb4:	4b9c      	ldr	r3, [pc, #624]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008fb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008fb8:	4b9b      	ldr	r3, [pc, #620]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008fba:	2180      	movs	r1, #128	; 0x80
 8008fbc:	0249      	lsls	r1, r1, #9
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008fc2:	4b99      	ldr	r3, [pc, #612]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008fc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008fc6:	4b98      	ldr	r3, [pc, #608]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008fc8:	499a      	ldr	r1, [pc, #616]	; (8009234 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8008fca:	400a      	ands	r2, r1
 8008fcc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008fce:	4b96      	ldr	r3, [pc, #600]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008fd0:	697a      	ldr	r2, [r7, #20]
 8008fd2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	4013      	ands	r3, r2
 8008fda:	d016      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fdc:	f7fc fd28 	bl	8005a30 <HAL_GetTick>
 8008fe0:	0003      	movs	r3, r0
 8008fe2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fe4:	e00c      	b.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fe6:	f7fc fd23 	bl	8005a30 <HAL_GetTick>
 8008fea:	0002      	movs	r2, r0
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	4a91      	ldr	r2, [pc, #580]	; (8009238 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d904      	bls.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008ff6:	2313      	movs	r3, #19
 8008ff8:	18fb      	adds	r3, r7, r3
 8008ffa:	2203      	movs	r2, #3
 8008ffc:	701a      	strb	r2, [r3, #0]
            break;
 8008ffe:	e004      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009000:	4b89      	ldr	r3, [pc, #548]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009004:	2202      	movs	r2, #2
 8009006:	4013      	ands	r3, r2
 8009008:	d0ed      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800900a:	2313      	movs	r3, #19
 800900c:	18fb      	adds	r3, r7, r3
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009014:	4b84      	ldr	r3, [pc, #528]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009018:	4a85      	ldr	r2, [pc, #532]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800901a:	4013      	ands	r3, r2
 800901c:	0019      	movs	r1, r3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009022:	4b81      	ldr	r3, [pc, #516]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009024:	430a      	orrs	r2, r1
 8009026:	65da      	str	r2, [r3, #92]	; 0x5c
 8009028:	e00c      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800902a:	2312      	movs	r3, #18
 800902c:	18fb      	adds	r3, r7, r3
 800902e:	2213      	movs	r2, #19
 8009030:	18ba      	adds	r2, r7, r2
 8009032:	7812      	ldrb	r2, [r2, #0]
 8009034:	701a      	strb	r2, [r3, #0]
 8009036:	e005      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009038:	2312      	movs	r3, #18
 800903a:	18fb      	adds	r3, r7, r3
 800903c:	2213      	movs	r2, #19
 800903e:	18ba      	adds	r2, r7, r2
 8009040:	7812      	ldrb	r2, [r2, #0]
 8009042:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009044:	2311      	movs	r3, #17
 8009046:	18fb      	adds	r3, r7, r3
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d105      	bne.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800904e:	4b76      	ldr	r3, [pc, #472]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009052:	4b75      	ldr	r3, [pc, #468]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009054:	4979      	ldr	r1, [pc, #484]	; (800923c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8009056:	400a      	ands	r2, r1
 8009058:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2201      	movs	r2, #1
 8009060:	4013      	ands	r3, r2
 8009062:	d009      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009064:	4b70      	ldr	r3, [pc, #448]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009068:	2203      	movs	r2, #3
 800906a:	4393      	bics	r3, r2
 800906c:	0019      	movs	r1, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	4b6d      	ldr	r3, [pc, #436]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009074:	430a      	orrs	r2, r1
 8009076:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2202      	movs	r2, #2
 800907e:	4013      	ands	r3, r2
 8009080:	d009      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009082:	4b69      	ldr	r3, [pc, #420]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009086:	220c      	movs	r2, #12
 8009088:	4393      	bics	r3, r2
 800908a:	0019      	movs	r1, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	4b65      	ldr	r3, [pc, #404]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009092:	430a      	orrs	r2, r1
 8009094:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2210      	movs	r2, #16
 800909c:	4013      	ands	r3, r2
 800909e:	d009      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80090a0:	4b61      	ldr	r3, [pc, #388]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80090a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090a4:	4a66      	ldr	r2, [pc, #408]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80090a6:	4013      	ands	r3, r2
 80090a8:	0019      	movs	r1, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68da      	ldr	r2, [r3, #12]
 80090ae:	4b5e      	ldr	r3, [pc, #376]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80090b0:	430a      	orrs	r2, r1
 80090b2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	2380      	movs	r3, #128	; 0x80
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4013      	ands	r3, r2
 80090be:	d009      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80090c0:	4b59      	ldr	r3, [pc, #356]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80090c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c4:	4a5f      	ldr	r2, [pc, #380]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80090c6:	4013      	ands	r3, r2
 80090c8:	0019      	movs	r1, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	699a      	ldr	r2, [r3, #24]
 80090ce:	4b56      	ldr	r3, [pc, #344]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80090d0:	430a      	orrs	r2, r1
 80090d2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	2380      	movs	r3, #128	; 0x80
 80090da:	00db      	lsls	r3, r3, #3
 80090dc:	4013      	ands	r3, r2
 80090de:	d009      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80090e0:	4b51      	ldr	r3, [pc, #324]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80090e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e4:	4a58      	ldr	r2, [pc, #352]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80090e6:	4013      	ands	r3, r2
 80090e8:	0019      	movs	r1, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	69da      	ldr	r2, [r3, #28]
 80090ee:	4b4e      	ldr	r3, [pc, #312]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80090f0:	430a      	orrs	r2, r1
 80090f2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2220      	movs	r2, #32
 80090fa:	4013      	ands	r3, r2
 80090fc:	d009      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80090fe:	4b4a      	ldr	r3, [pc, #296]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009102:	4a52      	ldr	r2, [pc, #328]	; (800924c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8009104:	4013      	ands	r3, r2
 8009106:	0019      	movs	r1, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	691a      	ldr	r2, [r3, #16]
 800910c:	4b46      	ldr	r3, [pc, #280]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800910e:	430a      	orrs	r2, r1
 8009110:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	2380      	movs	r3, #128	; 0x80
 8009118:	01db      	lsls	r3, r3, #7
 800911a:	4013      	ands	r3, r2
 800911c:	d015      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800911e:	4b42      	ldr	r3, [pc, #264]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	0899      	lsrs	r1, r3, #2
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a1a      	ldr	r2, [r3, #32]
 800912a:	4b3f      	ldr	r3, [pc, #252]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800912c:	430a      	orrs	r2, r1
 800912e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a1a      	ldr	r2, [r3, #32]
 8009134:	2380      	movs	r3, #128	; 0x80
 8009136:	05db      	lsls	r3, r3, #23
 8009138:	429a      	cmp	r2, r3
 800913a:	d106      	bne.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800913c:	4b3a      	ldr	r3, [pc, #232]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800913e:	68da      	ldr	r2, [r3, #12]
 8009140:	4b39      	ldr	r3, [pc, #228]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009142:	2180      	movs	r1, #128	; 0x80
 8009144:	0249      	lsls	r1, r1, #9
 8009146:	430a      	orrs	r2, r1
 8009148:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	2380      	movs	r3, #128	; 0x80
 8009150:	031b      	lsls	r3, r3, #12
 8009152:	4013      	ands	r3, r2
 8009154:	d009      	beq.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009156:	4b34      	ldr	r3, [pc, #208]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800915a:	2240      	movs	r2, #64	; 0x40
 800915c:	4393      	bics	r3, r2
 800915e:	0019      	movs	r1, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009164:	4b30      	ldr	r3, [pc, #192]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009166:	430a      	orrs	r2, r1
 8009168:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	2380      	movs	r3, #128	; 0x80
 8009170:	039b      	lsls	r3, r3, #14
 8009172:	4013      	ands	r3, r2
 8009174:	d016      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009176:	4b2c      	ldr	r3, [pc, #176]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800917a:	4a35      	ldr	r2, [pc, #212]	; (8009250 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800917c:	4013      	ands	r3, r2
 800917e:	0019      	movs	r1, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009184:	4b28      	ldr	r3, [pc, #160]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009186:	430a      	orrs	r2, r1
 8009188:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800918e:	2380      	movs	r3, #128	; 0x80
 8009190:	03db      	lsls	r3, r3, #15
 8009192:	429a      	cmp	r2, r3
 8009194:	d106      	bne.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009196:	4b24      	ldr	r3, [pc, #144]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009198:	68da      	ldr	r2, [r3, #12]
 800919a:	4b23      	ldr	r3, [pc, #140]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800919c:	2180      	movs	r1, #128	; 0x80
 800919e:	0449      	lsls	r1, r1, #17
 80091a0:	430a      	orrs	r2, r1
 80091a2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	2380      	movs	r3, #128	; 0x80
 80091aa:	03db      	lsls	r3, r3, #15
 80091ac:	4013      	ands	r3, r2
 80091ae:	d016      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80091b0:	4b1d      	ldr	r3, [pc, #116]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80091b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b4:	4a27      	ldr	r2, [pc, #156]	; (8009254 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80091b6:	4013      	ands	r3, r2
 80091b8:	0019      	movs	r1, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091be:	4b1a      	ldr	r3, [pc, #104]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80091c0:	430a      	orrs	r2, r1
 80091c2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c8:	2380      	movs	r3, #128	; 0x80
 80091ca:	045b      	lsls	r3, r3, #17
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d106      	bne.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80091d0:	4b15      	ldr	r3, [pc, #84]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80091d2:	68da      	ldr	r2, [r3, #12]
 80091d4:	4b14      	ldr	r3, [pc, #80]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80091d6:	2180      	movs	r1, #128	; 0x80
 80091d8:	0449      	lsls	r1, r1, #17
 80091da:	430a      	orrs	r2, r1
 80091dc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	2380      	movs	r3, #128	; 0x80
 80091e4:	011b      	lsls	r3, r3, #4
 80091e6:	4013      	ands	r3, r2
 80091e8:	d016      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80091ea:	4b0f      	ldr	r3, [pc, #60]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80091ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ee:	4a1a      	ldr	r2, [pc, #104]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80091f0:	4013      	ands	r3, r2
 80091f2:	0019      	movs	r1, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	695a      	ldr	r2, [r3, #20]
 80091f8:	4b0b      	ldr	r3, [pc, #44]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80091fa:	430a      	orrs	r2, r1
 80091fc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	695a      	ldr	r2, [r3, #20]
 8009202:	2380      	movs	r3, #128	; 0x80
 8009204:	01db      	lsls	r3, r3, #7
 8009206:	429a      	cmp	r2, r3
 8009208:	d106      	bne.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800920a:	4b07      	ldr	r3, [pc, #28]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	4b06      	ldr	r3, [pc, #24]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009210:	2180      	movs	r1, #128	; 0x80
 8009212:	0249      	lsls	r1, r1, #9
 8009214:	430a      	orrs	r2, r1
 8009216:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8009218:	2312      	movs	r3, #18
 800921a:	18fb      	adds	r3, r7, r3
 800921c:	781b      	ldrb	r3, [r3, #0]
}
 800921e:	0018      	movs	r0, r3
 8009220:	46bd      	mov	sp, r7
 8009222:	b006      	add	sp, #24
 8009224:	bd80      	pop	{r7, pc}
 8009226:	46c0      	nop			; (mov r8, r8)
 8009228:	40021000 	.word	0x40021000
 800922c:	40007000 	.word	0x40007000
 8009230:	fffffcff 	.word	0xfffffcff
 8009234:	fffeffff 	.word	0xfffeffff
 8009238:	00001388 	.word	0x00001388
 800923c:	efffffff 	.word	0xefffffff
 8009240:	fffff3ff 	.word	0xfffff3ff
 8009244:	fff3ffff 	.word	0xfff3ffff
 8009248:	ffcfffff 	.word	0xffcfffff
 800924c:	ffffcfff 	.word	0xffffcfff
 8009250:	ffbfffff 	.word	0xffbfffff
 8009254:	feffffff 	.word	0xfeffffff
 8009258:	ffff3fff 	.word	0xffff3fff

0800925c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	2380      	movs	r3, #128	; 0x80
 800926c:	029b      	lsls	r3, r3, #10
 800926e:	429a      	cmp	r2, r3
 8009270:	d136      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009272:	4bcd      	ldr	r3, [pc, #820]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8009274:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009276:	23c0      	movs	r3, #192	; 0xc0
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4013      	ands	r3, r2
 800927c:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800927e:	4bca      	ldr	r3, [pc, #808]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8009280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009282:	2202      	movs	r2, #2
 8009284:	4013      	ands	r3, r2
 8009286:	2b02      	cmp	r3, #2
 8009288:	d108      	bne.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	2380      	movs	r3, #128	; 0x80
 800928e:	005b      	lsls	r3, r3, #1
 8009290:	429a      	cmp	r2, r3
 8009292:	d103      	bne.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8009294:	2380      	movs	r3, #128	; 0x80
 8009296:	021b      	lsls	r3, r3, #8
 8009298:	617b      	str	r3, [r7, #20]
 800929a:	e31c      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800929c:	4bc2      	ldr	r3, [pc, #776]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800929e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092a0:	2202      	movs	r2, #2
 80092a2:	4013      	ands	r3, r2
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d108      	bne.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	2380      	movs	r3, #128	; 0x80
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d103      	bne.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 80092b2:	23fa      	movs	r3, #250	; 0xfa
 80092b4:	01db      	lsls	r3, r3, #7
 80092b6:	617b      	str	r3, [r7, #20]
 80092b8:	e30d      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80092ba:	4bbb      	ldr	r3, [pc, #748]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	2380      	movs	r3, #128	; 0x80
 80092c0:	029b      	lsls	r3, r3, #10
 80092c2:	401a      	ands	r2, r3
 80092c4:	2380      	movs	r3, #128	; 0x80
 80092c6:	029b      	lsls	r3, r3, #10
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d000      	beq.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80092cc:	e303      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	23c0      	movs	r3, #192	; 0xc0
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d000      	beq.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 80092d8:	e2fd      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 80092da:	4bb4      	ldr	r3, [pc, #720]	; (80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 80092dc:	617b      	str	r3, [r7, #20]
 80092de:	e2fa      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 80092e0:	4bb1      	ldr	r3, [pc, #708]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	2203      	movs	r2, #3
 80092e6:	4013      	ands	r3, r2
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d102      	bne.n	80092f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 80092ec:	4bb0      	ldr	r3, [pc, #704]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80092ee:	613b      	str	r3, [r7, #16]
 80092f0:	e00a      	b.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 80092f2:	4bad      	ldr	r3, [pc, #692]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	2203      	movs	r2, #3
 80092f8:	4013      	ands	r3, r2
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	d102      	bne.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 80092fe:	4bad      	ldr	r3, [pc, #692]	; (80095b4 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8009300:	613b      	str	r3, [r7, #16]
 8009302:	e001      	b.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8009304:	2300      	movs	r3, #0
 8009306:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009308:	4ba7      	ldr	r3, [pc, #668]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	091b      	lsrs	r3, r3, #4
 800930e:	2207      	movs	r2, #7
 8009310:	4013      	ands	r3, r2
 8009312:	3301      	adds	r3, #1
 8009314:	0019      	movs	r1, r3
 8009316:	6938      	ldr	r0, [r7, #16]
 8009318:	f7f6 fef4 	bl	8000104 <__udivsi3>
 800931c:	0003      	movs	r3, r0
 800931e:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	2380      	movs	r3, #128	; 0x80
 8009324:	03db      	lsls	r3, r3, #15
 8009326:	429a      	cmp	r2, r3
 8009328:	d100      	bne.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 800932a:	e28e      	b.n	800984a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	2380      	movs	r3, #128	; 0x80
 8009330:	03db      	lsls	r3, r3, #15
 8009332:	429a      	cmp	r2, r3
 8009334:	d900      	bls.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8009336:	e2b7      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	2380      	movs	r3, #128	; 0x80
 800933c:	039b      	lsls	r3, r3, #14
 800933e:	429a      	cmp	r2, r3
 8009340:	d100      	bne.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8009342:	e253      	b.n	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	2380      	movs	r3, #128	; 0x80
 8009348:	039b      	lsls	r3, r3, #14
 800934a:	429a      	cmp	r2, r3
 800934c:	d900      	bls.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800934e:	e2ab      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	2380      	movs	r3, #128	; 0x80
 8009354:	031b      	lsls	r3, r3, #12
 8009356:	429a      	cmp	r2, r3
 8009358:	d100      	bne.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800935a:	e0b2      	b.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	2380      	movs	r3, #128	; 0x80
 8009360:	031b      	lsls	r3, r3, #12
 8009362:	429a      	cmp	r2, r3
 8009364:	d900      	bls.n	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8009366:	e29f      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	2380      	movs	r3, #128	; 0x80
 800936c:	01db      	lsls	r3, r3, #7
 800936e:	429a      	cmp	r2, r3
 8009370:	d100      	bne.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8009372:	e103      	b.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	2380      	movs	r3, #128	; 0x80
 8009378:	01db      	lsls	r3, r3, #7
 800937a:	429a      	cmp	r2, r3
 800937c:	d900      	bls.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800937e:	e293      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	2380      	movs	r3, #128	; 0x80
 8009384:	011b      	lsls	r3, r3, #4
 8009386:	429a      	cmp	r2, r3
 8009388:	d100      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800938a:	e165      	b.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	2380      	movs	r3, #128	; 0x80
 8009390:	011b      	lsls	r3, r3, #4
 8009392:	429a      	cmp	r2, r3
 8009394:	d900      	bls.n	8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8009396:	e287      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	2380      	movs	r3, #128	; 0x80
 800939c:	00db      	lsls	r3, r3, #3
 800939e:	429a      	cmp	r2, r3
 80093a0:	d100      	bne.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80093a2:	e1e3      	b.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	2380      	movs	r3, #128	; 0x80
 80093a8:	00db      	lsls	r3, r3, #3
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d900      	bls.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80093ae:	e27b      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	2380      	movs	r3, #128	; 0x80
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d100      	bne.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80093ba:	e197      	b.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	2380      	movs	r3, #128	; 0x80
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d900      	bls.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80093c6:	e26f      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b20      	cmp	r3, #32
 80093cc:	d100      	bne.n	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80093ce:	e118      	b.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2b20      	cmp	r3, #32
 80093d4:	d900      	bls.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 80093d6:	e267      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b10      	cmp	r3, #16
 80093dc:	d100      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80093de:	e093      	b.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b10      	cmp	r3, #16
 80093e4:	d900      	bls.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80093e6:	e25f      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d003      	beq.n	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d033      	beq.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 80093f4:	e258      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80093f6:	4b6c      	ldr	r3, [pc, #432]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80093f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093fa:	2203      	movs	r2, #3
 80093fc:	4013      	ands	r3, r2
 80093fe:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d104      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009406:	f7ff fd5b 	bl	8008ec0 <HAL_RCC_GetPCLK1Freq>
 800940a:	0003      	movs	r3, r0
 800940c:	617b      	str	r3, [r7, #20]
        break;
 800940e:	e24d      	b.n	80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d104      	bne.n	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8009416:	f7ff fcc7 	bl	8008da8 <HAL_RCC_GetSysClockFreq>
 800941a:	0003      	movs	r3, r0
 800941c:	617b      	str	r3, [r7, #20]
        break;
 800941e:	e245      	b.n	80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009420:	4b61      	ldr	r3, [pc, #388]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	2380      	movs	r3, #128	; 0x80
 8009426:	00db      	lsls	r3, r3, #3
 8009428:	401a      	ands	r2, r3
 800942a:	2380      	movs	r3, #128	; 0x80
 800942c:	00db      	lsls	r3, r3, #3
 800942e:	429a      	cmp	r2, r3
 8009430:	d105      	bne.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2b02      	cmp	r3, #2
 8009436:	d102      	bne.n	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8009438:	4b5d      	ldr	r3, [pc, #372]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800943a:	617b      	str	r3, [r7, #20]
        break;
 800943c:	e236      	b.n	80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800943e:	4b5a      	ldr	r3, [pc, #360]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8009440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009442:	2202      	movs	r2, #2
 8009444:	4013      	ands	r3, r2
 8009446:	2b02      	cmp	r3, #2
 8009448:	d000      	beq.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 800944a:	e22f      	b.n	80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b03      	cmp	r3, #3
 8009450:	d000      	beq.n	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8009452:	e22b      	b.n	80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8009454:	2380      	movs	r3, #128	; 0x80
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	617b      	str	r3, [r7, #20]
        break;
 800945a:	e227      	b.n	80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800945c:	4b52      	ldr	r3, [pc, #328]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800945e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009460:	220c      	movs	r2, #12
 8009462:	4013      	ands	r3, r2
 8009464:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d104      	bne.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800946c:	f7ff fd28 	bl	8008ec0 <HAL_RCC_GetPCLK1Freq>
 8009470:	0003      	movs	r3, r0
 8009472:	617b      	str	r3, [r7, #20]
        break;
 8009474:	e21c      	b.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b04      	cmp	r3, #4
 800947a:	d104      	bne.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 800947c:	f7ff fc94 	bl	8008da8 <HAL_RCC_GetSysClockFreq>
 8009480:	0003      	movs	r3, r0
 8009482:	617b      	str	r3, [r7, #20]
        break;
 8009484:	e214      	b.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009486:	4b48      	ldr	r3, [pc, #288]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	2380      	movs	r3, #128	; 0x80
 800948c:	00db      	lsls	r3, r3, #3
 800948e:	401a      	ands	r2, r3
 8009490:	2380      	movs	r3, #128	; 0x80
 8009492:	00db      	lsls	r3, r3, #3
 8009494:	429a      	cmp	r2, r3
 8009496:	d105      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2b08      	cmp	r3, #8
 800949c:	d102      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 800949e:	4b44      	ldr	r3, [pc, #272]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80094a0:	617b      	str	r3, [r7, #20]
        break;
 80094a2:	e205      	b.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80094a4:	4b40      	ldr	r3, [pc, #256]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80094a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094a8:	2202      	movs	r2, #2
 80094aa:	4013      	ands	r3, r2
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d000      	beq.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80094b0:	e1fe      	b.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2b0c      	cmp	r3, #12
 80094b6:	d000      	beq.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80094b8:	e1fa      	b.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 80094ba:	2380      	movs	r3, #128	; 0x80
 80094bc:	021b      	lsls	r3, r3, #8
 80094be:	617b      	str	r3, [r7, #20]
        break;
 80094c0:	e1f6      	b.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80094c2:	4b39      	ldr	r3, [pc, #228]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80094c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c6:	2240      	movs	r2, #64	; 0x40
 80094c8:	4013      	ands	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 80094cc:	4b36      	ldr	r3, [pc, #216]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	2380      	movs	r3, #128	; 0x80
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	401a      	ands	r2, r3
 80094d6:	2380      	movs	r3, #128	; 0x80
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	429a      	cmp	r2, r3
 80094dc:	d105      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d102      	bne.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 80094e4:	4b34      	ldr	r3, [pc, #208]	; (80095b8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 80094e6:	617b      	str	r3, [r7, #20]
        break;
 80094e8:	e1e4      	b.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80094ea:	4b2f      	ldr	r3, [pc, #188]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80094ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ee:	2202      	movs	r2, #2
 80094f0:	4013      	ands	r3, r2
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d000      	beq.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 80094f6:	e1dd      	b.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2b40      	cmp	r3, #64	; 0x40
 80094fc:	d000      	beq.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 80094fe:	e1d9      	b.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8009500:	2380      	movs	r3, #128	; 0x80
 8009502:	021b      	lsls	r3, r3, #8
 8009504:	617b      	str	r3, [r7, #20]
        break;
 8009506:	e1d5      	b.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009508:	4b27      	ldr	r3, [pc, #156]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800950a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800950c:	23c0      	movs	r3, #192	; 0xc0
 800950e:	011b      	lsls	r3, r3, #4
 8009510:	4013      	ands	r3, r2
 8009512:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d104      	bne.n	8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800951a:	f7ff fcd1 	bl	8008ec0 <HAL_RCC_GetPCLK1Freq>
 800951e:	0003      	movs	r3, r0
 8009520:	617b      	str	r3, [r7, #20]
        break;
 8009522:	e1c9      	b.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	2380      	movs	r3, #128	; 0x80
 8009528:	00db      	lsls	r3, r3, #3
 800952a:	429a      	cmp	r2, r3
 800952c:	d104      	bne.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800952e:	f7ff fc3b 	bl	8008da8 <HAL_RCC_GetSysClockFreq>
 8009532:	0003      	movs	r3, r0
 8009534:	617b      	str	r3, [r7, #20]
        break;
 8009536:	e1bf      	b.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009538:	4b1b      	ldr	r3, [pc, #108]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	2380      	movs	r3, #128	; 0x80
 800953e:	00db      	lsls	r3, r3, #3
 8009540:	401a      	ands	r2, r3
 8009542:	2380      	movs	r3, #128	; 0x80
 8009544:	00db      	lsls	r3, r3, #3
 8009546:	429a      	cmp	r2, r3
 8009548:	d107      	bne.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	2380      	movs	r3, #128	; 0x80
 800954e:	011b      	lsls	r3, r3, #4
 8009550:	429a      	cmp	r2, r3
 8009552:	d102      	bne.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8009554:	4b16      	ldr	r3, [pc, #88]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8009556:	617b      	str	r3, [r7, #20]
        break;
 8009558:	e1ae      	b.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800955a:	4b13      	ldr	r3, [pc, #76]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800955c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800955e:	2202      	movs	r2, #2
 8009560:	4013      	ands	r3, r2
 8009562:	2b02      	cmp	r3, #2
 8009564:	d000      	beq.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8009566:	e1a7      	b.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	23c0      	movs	r3, #192	; 0xc0
 800956c:	011b      	lsls	r3, r3, #4
 800956e:	429a      	cmp	r2, r3
 8009570:	d000      	beq.n	8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8009572:	e1a1      	b.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8009574:	2380      	movs	r3, #128	; 0x80
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	617b      	str	r3, [r7, #20]
        break;
 800957a:	e19d      	b.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800957c:	4b0a      	ldr	r3, [pc, #40]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800957e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009580:	0f9b      	lsrs	r3, r3, #30
 8009582:	079b      	lsls	r3, r3, #30
 8009584:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d104      	bne.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 800958c:	f7ff fc0c 	bl	8008da8 <HAL_RCC_GetSysClockFreq>
 8009590:	0003      	movs	r3, r0
 8009592:	617b      	str	r3, [r7, #20]
        break;
 8009594:	e192      	b.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	2380      	movs	r3, #128	; 0x80
 800959a:	061b      	lsls	r3, r3, #24
 800959c:	429a      	cmp	r2, r3
 800959e:	d10d      	bne.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 80095a0:	4b03      	ldr	r3, [pc, #12]	; (80095b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80095a2:	617b      	str	r3, [r7, #20]
        break;
 80095a4:	e18a      	b.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80095a6:	46c0      	nop			; (mov r8, r8)
 80095a8:	40021000 	.word	0x40021000
 80095ac:	0003d090 	.word	0x0003d090
 80095b0:	00f42400 	.word	0x00f42400
 80095b4:	007a1200 	.word	0x007a1200
 80095b8:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	2380      	movs	r3, #128	; 0x80
 80095c0:	05db      	lsls	r3, r3, #23
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d000      	beq.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 80095c6:	e179      	b.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80095c8:	4bc5      	ldr	r3, [pc, #788]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80095ca:	68da      	ldr	r2, [r3, #12]
 80095cc:	2380      	movs	r3, #128	; 0x80
 80095ce:	025b      	lsls	r3, r3, #9
 80095d0:	4013      	ands	r3, r2
 80095d2:	d100      	bne.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80095d4:	e172      	b.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80095d6:	4bc2      	ldr	r3, [pc, #776]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	0a1b      	lsrs	r3, r3, #8
 80095dc:	227f      	movs	r2, #127	; 0x7f
 80095de:	4013      	ands	r3, r2
 80095e0:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	435a      	muls	r2, r3
 80095e8:	4bbd      	ldr	r3, [pc, #756]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	0c5b      	lsrs	r3, r3, #17
 80095ee:	211f      	movs	r1, #31
 80095f0:	400b      	ands	r3, r1
 80095f2:	3301      	adds	r3, #1
 80095f4:	0019      	movs	r1, r3
 80095f6:	0010      	movs	r0, r2
 80095f8:	f7f6 fd84 	bl	8000104 <__udivsi3>
 80095fc:	0003      	movs	r3, r0
 80095fe:	617b      	str	r3, [r7, #20]
        break;
 8009600:	e15c      	b.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009602:	4bb7      	ldr	r3, [pc, #732]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009606:	23c0      	movs	r3, #192	; 0xc0
 8009608:	019b      	lsls	r3, r3, #6
 800960a:	4013      	ands	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d104      	bne.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009614:	f7ff fc54 	bl	8008ec0 <HAL_RCC_GetPCLK1Freq>
 8009618:	0003      	movs	r3, r0
 800961a:	617b      	str	r3, [r7, #20]
        break;
 800961c:	e150      	b.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	2380      	movs	r3, #128	; 0x80
 8009622:	015b      	lsls	r3, r3, #5
 8009624:	429a      	cmp	r2, r3
 8009626:	d104      	bne.n	8009632 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8009628:	f7ff fbbe 	bl	8008da8 <HAL_RCC_GetSysClockFreq>
 800962c:	0003      	movs	r3, r0
 800962e:	617b      	str	r3, [r7, #20]
        break;
 8009630:	e146      	b.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009632:	4bab      	ldr	r3, [pc, #684]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	2380      	movs	r3, #128	; 0x80
 8009638:	00db      	lsls	r3, r3, #3
 800963a:	401a      	ands	r2, r3
 800963c:	2380      	movs	r3, #128	; 0x80
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	429a      	cmp	r2, r3
 8009642:	d000      	beq.n	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8009644:	e13c      	b.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	2380      	movs	r3, #128	; 0x80
 800964a:	019b      	lsls	r3, r3, #6
 800964c:	429a      	cmp	r2, r3
 800964e:	d000      	beq.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8009650:	e136      	b.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8009652:	4ba4      	ldr	r3, [pc, #656]	; (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8009654:	617b      	str	r3, [r7, #20]
        break;
 8009656:	e133      	b.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8009658:	4ba1      	ldr	r3, [pc, #644]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800965a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800965c:	23c0      	movs	r3, #192	; 0xc0
 800965e:	021b      	lsls	r3, r3, #8
 8009660:	4013      	ands	r3, r2
 8009662:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	2380      	movs	r3, #128	; 0x80
 8009668:	01db      	lsls	r3, r3, #7
 800966a:	429a      	cmp	r2, r3
 800966c:	d11c      	bne.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800966e:	4b9c      	ldr	r3, [pc, #624]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009670:	68da      	ldr	r2, [r3, #12]
 8009672:	2380      	movs	r3, #128	; 0x80
 8009674:	025b      	lsls	r3, r3, #9
 8009676:	4013      	ands	r3, r2
 8009678:	d100      	bne.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 800967a:	e123      	b.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800967c:	4b98      	ldr	r3, [pc, #608]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	0a1b      	lsrs	r3, r3, #8
 8009682:	227f      	movs	r2, #127	; 0x7f
 8009684:	4013      	ands	r3, r2
 8009686:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	435a      	muls	r2, r3
 800968e:	4b94      	ldr	r3, [pc, #592]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	0c5b      	lsrs	r3, r3, #17
 8009694:	211f      	movs	r1, #31
 8009696:	400b      	ands	r3, r1
 8009698:	3301      	adds	r3, #1
 800969a:	0019      	movs	r1, r3
 800969c:	0010      	movs	r0, r2
 800969e:	f7f6 fd31 	bl	8000104 <__udivsi3>
 80096a2:	0003      	movs	r3, r0
 80096a4:	617b      	str	r3, [r7, #20]
        break;
 80096a6:	e10d      	b.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d104      	bne.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 80096ae:	f7ff fb7b 	bl	8008da8 <HAL_RCC_GetSysClockFreq>
 80096b2:	0003      	movs	r3, r0
 80096b4:	617b      	str	r3, [r7, #20]
        break;
 80096b6:	e105      	b.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 80096b8:	4b89      	ldr	r3, [pc, #548]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	2380      	movs	r3, #128	; 0x80
 80096be:	00db      	lsls	r3, r3, #3
 80096c0:	401a      	ands	r2, r3
 80096c2:	2380      	movs	r3, #128	; 0x80
 80096c4:	00db      	lsls	r3, r3, #3
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d107      	bne.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	2380      	movs	r3, #128	; 0x80
 80096ce:	021b      	lsls	r3, r3, #8
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d102      	bne.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 80096d4:	4b83      	ldr	r3, [pc, #524]	; (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80096d6:	617b      	str	r3, [r7, #20]
        break;
 80096d8:	e0f4      	b.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	23c0      	movs	r3, #192	; 0xc0
 80096de:	021b      	lsls	r3, r3, #8
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d000      	beq.n	80096e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80096e4:	e0ee      	b.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 80096e6:	4b80      	ldr	r3, [pc, #512]	; (80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80096e8:	617b      	str	r3, [r7, #20]
        break;
 80096ea:	e0eb      	b.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80096ec:	4b7c      	ldr	r3, [pc, #496]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80096ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096f0:	23c0      	movs	r3, #192	; 0xc0
 80096f2:	031b      	lsls	r3, r3, #12
 80096f4:	4013      	ands	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d104      	bne.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 80096fe:	f7ff fbdf 	bl	8008ec0 <HAL_RCC_GetPCLK1Freq>
 8009702:	0003      	movs	r3, r0
 8009704:	617b      	str	r3, [r7, #20]
        break;
 8009706:	e0df      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009708:	4b75      	ldr	r3, [pc, #468]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800970a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800970c:	2202      	movs	r2, #2
 800970e:	4013      	ands	r3, r2
 8009710:	2b02      	cmp	r3, #2
 8009712:	d108      	bne.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	2380      	movs	r3, #128	; 0x80
 8009718:	02db      	lsls	r3, r3, #11
 800971a:	429a      	cmp	r2, r3
 800971c:	d103      	bne.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 800971e:	23fa      	movs	r3, #250	; 0xfa
 8009720:	01db      	lsls	r3, r3, #7
 8009722:	617b      	str	r3, [r7, #20]
 8009724:	e021      	b.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009726:	4b6e      	ldr	r3, [pc, #440]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	2380      	movs	r3, #128	; 0x80
 800972c:	00db      	lsls	r3, r3, #3
 800972e:	401a      	ands	r2, r3
 8009730:	2380      	movs	r3, #128	; 0x80
 8009732:	00db      	lsls	r3, r3, #3
 8009734:	429a      	cmp	r2, r3
 8009736:	d107      	bne.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	2380      	movs	r3, #128	; 0x80
 800973c:	031b      	lsls	r3, r3, #12
 800973e:	429a      	cmp	r2, r3
 8009740:	d102      	bne.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 8009742:	4b68      	ldr	r3, [pc, #416]	; (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8009744:	617b      	str	r3, [r7, #20]
 8009746:	e010      	b.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009748:	4b65      	ldr	r3, [pc, #404]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800974a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800974c:	2202      	movs	r2, #2
 800974e:	4013      	ands	r3, r2
 8009750:	2b02      	cmp	r3, #2
 8009752:	d000      	beq.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009754:	e0b8      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	23c0      	movs	r3, #192	; 0xc0
 800975a:	031b      	lsls	r3, r3, #12
 800975c:	429a      	cmp	r2, r3
 800975e:	d000      	beq.n	8009762 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009760:	e0b2      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 8009762:	2380      	movs	r3, #128	; 0x80
 8009764:	021b      	lsls	r3, r3, #8
 8009766:	617b      	str	r3, [r7, #20]
        break;
 8009768:	e0ae      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800976a:	e0ad      	b.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800976c:	4b5c      	ldr	r3, [pc, #368]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800976e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009770:	23c0      	movs	r3, #192	; 0xc0
 8009772:	039b      	lsls	r3, r3, #14
 8009774:	4013      	ands	r3, r2
 8009776:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d104      	bne.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800977e:	f7ff fb9f 	bl	8008ec0 <HAL_RCC_GetPCLK1Freq>
 8009782:	0003      	movs	r3, r0
 8009784:	617b      	str	r3, [r7, #20]
        break;
 8009786:	e0a1      	b.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009788:	4b55      	ldr	r3, [pc, #340]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800978a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800978c:	2202      	movs	r2, #2
 800978e:	4013      	ands	r3, r2
 8009790:	2b02      	cmp	r3, #2
 8009792:	d108      	bne.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	2380      	movs	r3, #128	; 0x80
 8009798:	035b      	lsls	r3, r3, #13
 800979a:	429a      	cmp	r2, r3
 800979c:	d103      	bne.n	80097a6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 800979e:	23fa      	movs	r3, #250	; 0xfa
 80097a0:	01db      	lsls	r3, r3, #7
 80097a2:	617b      	str	r3, [r7, #20]
 80097a4:	e021      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80097a6:	4b4e      	ldr	r3, [pc, #312]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	2380      	movs	r3, #128	; 0x80
 80097ac:	00db      	lsls	r3, r3, #3
 80097ae:	401a      	ands	r2, r3
 80097b0:	2380      	movs	r3, #128	; 0x80
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d107      	bne.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	2380      	movs	r3, #128	; 0x80
 80097bc:	039b      	lsls	r3, r3, #14
 80097be:	429a      	cmp	r2, r3
 80097c0:	d102      	bne.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 80097c2:	4b48      	ldr	r3, [pc, #288]	; (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80097c4:	617b      	str	r3, [r7, #20]
 80097c6:	e010      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80097c8:	4b45      	ldr	r3, [pc, #276]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80097ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097cc:	2202      	movs	r2, #2
 80097ce:	4013      	ands	r3, r2
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d000      	beq.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80097d4:	e07a      	b.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	23c0      	movs	r3, #192	; 0xc0
 80097da:	039b      	lsls	r3, r3, #14
 80097dc:	429a      	cmp	r2, r3
 80097de:	d000      	beq.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 80097e0:	e074      	b.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 80097e2:	2380      	movs	r3, #128	; 0x80
 80097e4:	021b      	lsls	r3, r3, #8
 80097e6:	617b      	str	r3, [r7, #20]
        break;
 80097e8:	e070      	b.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80097ea:	e06f      	b.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80097ec:	4b3c      	ldr	r3, [pc, #240]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80097ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097f0:	2380      	movs	r3, #128	; 0x80
 80097f2:	03db      	lsls	r3, r3, #15
 80097f4:	4013      	ands	r3, r2
 80097f6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	2380      	movs	r3, #128	; 0x80
 80097fc:	03db      	lsls	r3, r3, #15
 80097fe:	429a      	cmp	r2, r3
 8009800:	d11b      	bne.n	800983a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8009802:	4b37      	ldr	r3, [pc, #220]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009804:	68da      	ldr	r2, [r3, #12]
 8009806:	2380      	movs	r3, #128	; 0x80
 8009808:	045b      	lsls	r3, r3, #17
 800980a:	4013      	ands	r3, r2
 800980c:	d060      	beq.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800980e:	4b34      	ldr	r3, [pc, #208]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	0a1b      	lsrs	r3, r3, #8
 8009814:	227f      	movs	r2, #127	; 0x7f
 8009816:	4013      	ands	r3, r2
 8009818:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	435a      	muls	r2, r3
 8009820:	4b2f      	ldr	r3, [pc, #188]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	0e5b      	lsrs	r3, r3, #25
 8009826:	2107      	movs	r1, #7
 8009828:	400b      	ands	r3, r1
 800982a:	3301      	adds	r3, #1
 800982c:	0019      	movs	r1, r3
 800982e:	0010      	movs	r0, r2
 8009830:	f7f6 fc68 	bl	8000104 <__udivsi3>
 8009834:	0003      	movs	r3, r0
 8009836:	617b      	str	r3, [r7, #20]
        break;
 8009838:	e04a      	b.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d147      	bne.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009840:	f7ff fb3e 	bl	8008ec0 <HAL_RCC_GetPCLK1Freq>
 8009844:	0003      	movs	r3, r0
 8009846:	617b      	str	r3, [r7, #20]
        break;
 8009848:	e042      	b.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 800984a:	4b25      	ldr	r3, [pc, #148]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800984c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800984e:	2380      	movs	r3, #128	; 0x80
 8009850:	045b      	lsls	r3, r3, #17
 8009852:	4013      	ands	r3, r2
 8009854:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	2380      	movs	r3, #128	; 0x80
 800985a:	045b      	lsls	r3, r3, #17
 800985c:	429a      	cmp	r2, r3
 800985e:	d11b      	bne.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8009860:	4b1f      	ldr	r3, [pc, #124]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	2380      	movs	r3, #128	; 0x80
 8009866:	045b      	lsls	r3, r3, #17
 8009868:	4013      	ands	r3, r2
 800986a:	d033      	beq.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800986c:	4b1c      	ldr	r3, [pc, #112]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	0a1b      	lsrs	r3, r3, #8
 8009872:	227f      	movs	r2, #127	; 0x7f
 8009874:	4013      	ands	r3, r2
 8009876:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	435a      	muls	r2, r3
 800987e:	4b18      	ldr	r3, [pc, #96]	; (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	0e5b      	lsrs	r3, r3, #25
 8009884:	2107      	movs	r1, #7
 8009886:	400b      	ands	r3, r1
 8009888:	3301      	adds	r3, #1
 800988a:	0019      	movs	r1, r3
 800988c:	0010      	movs	r0, r2
 800988e:	f7f6 fc39 	bl	8000104 <__udivsi3>
 8009892:	0003      	movs	r3, r0
 8009894:	617b      	str	r3, [r7, #20]
        break;
 8009896:	e01d      	b.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d11a      	bne.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 800989e:	f7ff fb0f 	bl	8008ec0 <HAL_RCC_GetPCLK1Freq>
 80098a2:	0003      	movs	r3, r0
 80098a4:	617b      	str	r3, [r7, #20]
        break;
 80098a6:	e015      	b.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 80098a8:	46c0      	nop			; (mov r8, r8)
 80098aa:	e014      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80098ac:	46c0      	nop			; (mov r8, r8)
 80098ae:	e012      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80098b0:	46c0      	nop			; (mov r8, r8)
 80098b2:	e010      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80098b4:	46c0      	nop			; (mov r8, r8)
 80098b6:	e00e      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80098b8:	46c0      	nop			; (mov r8, r8)
 80098ba:	e00c      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80098bc:	46c0      	nop			; (mov r8, r8)
 80098be:	e00a      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80098c0:	46c0      	nop			; (mov r8, r8)
 80098c2:	e008      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80098c4:	46c0      	nop			; (mov r8, r8)
 80098c6:	e006      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80098c8:	46c0      	nop			; (mov r8, r8)
 80098ca:	e004      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80098cc:	46c0      	nop			; (mov r8, r8)
 80098ce:	e002      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80098d0:	46c0      	nop			; (mov r8, r8)
 80098d2:	e000      	b.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80098d4:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 80098d6:	697b      	ldr	r3, [r7, #20]
}
 80098d8:	0018      	movs	r0, r3
 80098da:	46bd      	mov	sp, r7
 80098dc:	b006      	add	sp, #24
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	40021000 	.word	0x40021000
 80098e4:	00f42400 	.word	0x00f42400
 80098e8:	0000bb80 	.word	0x0000bb80

080098ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e0a8      	b.n	8009a50 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009902:	2b00      	cmp	r3, #0
 8009904:	d109      	bne.n	800991a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	2382      	movs	r3, #130	; 0x82
 800990c:	005b      	lsls	r3, r3, #1
 800990e:	429a      	cmp	r2, r3
 8009910:	d009      	beq.n	8009926 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	61da      	str	r2, [r3, #28]
 8009918:	e005      	b.n	8009926 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	225d      	movs	r2, #93	; 0x5d
 8009930:	5c9b      	ldrb	r3, [r3, r2]
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b00      	cmp	r3, #0
 8009936:	d107      	bne.n	8009948 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	225c      	movs	r2, #92	; 0x5c
 800993c:	2100      	movs	r1, #0
 800993e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	0018      	movs	r0, r3
 8009944:	f7fb fcd6 	bl	80052f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	225d      	movs	r2, #93	; 0x5d
 800994c:	2102      	movs	r1, #2
 800994e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2140      	movs	r1, #64	; 0x40
 800995c:	438a      	bics	r2, r1
 800995e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	68da      	ldr	r2, [r3, #12]
 8009964:	23e0      	movs	r3, #224	; 0xe0
 8009966:	00db      	lsls	r3, r3, #3
 8009968:	429a      	cmp	r2, r3
 800996a:	d902      	bls.n	8009972 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]
 8009970:	e002      	b.n	8009978 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009972:	2380      	movs	r3, #128	; 0x80
 8009974:	015b      	lsls	r3, r3, #5
 8009976:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	68da      	ldr	r2, [r3, #12]
 800997c:	23f0      	movs	r3, #240	; 0xf0
 800997e:	011b      	lsls	r3, r3, #4
 8009980:	429a      	cmp	r2, r3
 8009982:	d008      	beq.n	8009996 <HAL_SPI_Init+0xaa>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	68da      	ldr	r2, [r3, #12]
 8009988:	23e0      	movs	r3, #224	; 0xe0
 800998a:	00db      	lsls	r3, r3, #3
 800998c:	429a      	cmp	r2, r3
 800998e:	d002      	beq.n	8009996 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	2382      	movs	r3, #130	; 0x82
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	401a      	ands	r2, r3
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6899      	ldr	r1, [r3, #8]
 80099a4:	2384      	movs	r3, #132	; 0x84
 80099a6:	021b      	lsls	r3, r3, #8
 80099a8:	400b      	ands	r3, r1
 80099aa:	431a      	orrs	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	2102      	movs	r1, #2
 80099b2:	400b      	ands	r3, r1
 80099b4:	431a      	orrs	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	2101      	movs	r1, #1
 80099bc:	400b      	ands	r3, r1
 80099be:	431a      	orrs	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6999      	ldr	r1, [r3, #24]
 80099c4:	2380      	movs	r3, #128	; 0x80
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	400b      	ands	r3, r1
 80099ca:	431a      	orrs	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	69db      	ldr	r3, [r3, #28]
 80099d0:	2138      	movs	r1, #56	; 0x38
 80099d2:	400b      	ands	r3, r1
 80099d4:	431a      	orrs	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	2180      	movs	r1, #128	; 0x80
 80099dc:	400b      	ands	r3, r1
 80099de:	431a      	orrs	r2, r3
 80099e0:	0011      	movs	r1, r2
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099e6:	2380      	movs	r3, #128	; 0x80
 80099e8:	019b      	lsls	r3, r3, #6
 80099ea:	401a      	ands	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	430a      	orrs	r2, r1
 80099f2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	699b      	ldr	r3, [r3, #24]
 80099f8:	0c1b      	lsrs	r3, r3, #16
 80099fa:	2204      	movs	r2, #4
 80099fc:	401a      	ands	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a02:	2110      	movs	r1, #16
 8009a04:	400b      	ands	r3, r1
 8009a06:	431a      	orrs	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0c:	2108      	movs	r1, #8
 8009a0e:	400b      	ands	r3, r1
 8009a10:	431a      	orrs	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68d9      	ldr	r1, [r3, #12]
 8009a16:	23f0      	movs	r3, #240	; 0xf0
 8009a18:	011b      	lsls	r3, r3, #4
 8009a1a:	400b      	ands	r3, r1
 8009a1c:	431a      	orrs	r2, r3
 8009a1e:	0011      	movs	r1, r2
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	2380      	movs	r3, #128	; 0x80
 8009a24:	015b      	lsls	r3, r3, #5
 8009a26:	401a      	ands	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	69da      	ldr	r2, [r3, #28]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4907      	ldr	r1, [pc, #28]	; (8009a58 <HAL_SPI_Init+0x16c>)
 8009a3c:	400a      	ands	r2, r1
 8009a3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	225d      	movs	r2, #93	; 0x5d
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	0018      	movs	r0, r3
 8009a52:	46bd      	mov	sp, r7
 8009a54:	b004      	add	sp, #16
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	fffff7ff 	.word	0xfffff7ff

08009a5c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	603b      	str	r3, [r7, #0]
 8009a68:	1dbb      	adds	r3, r7, #6
 8009a6a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a6c:	231f      	movs	r3, #31
 8009a6e:	18fb      	adds	r3, r7, r3
 8009a70:	2200      	movs	r2, #0
 8009a72:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	225c      	movs	r2, #92	; 0x5c
 8009a78:	5c9b      	ldrb	r3, [r3, r2]
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d101      	bne.n	8009a82 <HAL_SPI_Transmit+0x26>
 8009a7e:	2302      	movs	r3, #2
 8009a80:	e140      	b.n	8009d04 <HAL_SPI_Transmit+0x2a8>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	225c      	movs	r2, #92	; 0x5c
 8009a86:	2101      	movs	r1, #1
 8009a88:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a8a:	f7fb ffd1 	bl	8005a30 <HAL_GetTick>
 8009a8e:	0003      	movs	r3, r0
 8009a90:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009a92:	2316      	movs	r3, #22
 8009a94:	18fb      	adds	r3, r7, r3
 8009a96:	1dba      	adds	r2, r7, #6
 8009a98:	8812      	ldrh	r2, [r2, #0]
 8009a9a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	225d      	movs	r2, #93	; 0x5d
 8009aa0:	5c9b      	ldrb	r3, [r3, r2]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d004      	beq.n	8009ab2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009aa8:	231f      	movs	r3, #31
 8009aaa:	18fb      	adds	r3, r7, r3
 8009aac:	2202      	movs	r2, #2
 8009aae:	701a      	strb	r2, [r3, #0]
    goto error;
 8009ab0:	e11d      	b.n	8009cee <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d003      	beq.n	8009ac0 <HAL_SPI_Transmit+0x64>
 8009ab8:	1dbb      	adds	r3, r7, #6
 8009aba:	881b      	ldrh	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d104      	bne.n	8009aca <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009ac0:	231f      	movs	r3, #31
 8009ac2:	18fb      	adds	r3, r7, r3
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	701a      	strb	r2, [r3, #0]
    goto error;
 8009ac8:	e111      	b.n	8009cee <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	225d      	movs	r2, #93	; 0x5d
 8009ace:	2103      	movs	r1, #3
 8009ad0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	1dba      	adds	r2, r7, #6
 8009ae2:	8812      	ldrh	r2, [r2, #0]
 8009ae4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	1dba      	adds	r2, r7, #6
 8009aea:	8812      	ldrh	r2, [r2, #0]
 8009aec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2244      	movs	r2, #68	; 0x44
 8009af8:	2100      	movs	r1, #0
 8009afa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2246      	movs	r2, #70	; 0x46
 8009b00:	2100      	movs	r1, #0
 8009b02:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	689a      	ldr	r2, [r3, #8]
 8009b14:	2380      	movs	r3, #128	; 0x80
 8009b16:	021b      	lsls	r3, r3, #8
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d110      	bne.n	8009b3e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2140      	movs	r1, #64	; 0x40
 8009b28:	438a      	bics	r2, r1
 8009b2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681a      	ldr	r2, [r3, #0]
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2180      	movs	r1, #128	; 0x80
 8009b38:	01c9      	lsls	r1, r1, #7
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2240      	movs	r2, #64	; 0x40
 8009b46:	4013      	ands	r3, r2
 8009b48:	2b40      	cmp	r3, #64	; 0x40
 8009b4a:	d007      	beq.n	8009b5c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2140      	movs	r1, #64	; 0x40
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	68da      	ldr	r2, [r3, #12]
 8009b60:	23e0      	movs	r3, #224	; 0xe0
 8009b62:	00db      	lsls	r3, r3, #3
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d94e      	bls.n	8009c06 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d004      	beq.n	8009b7a <HAL_SPI_Transmit+0x11e>
 8009b70:	2316      	movs	r3, #22
 8009b72:	18fb      	adds	r3, r7, r3
 8009b74:	881b      	ldrh	r3, [r3, #0]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d13f      	bne.n	8009bfa <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7e:	881a      	ldrh	r2, [r3, #0]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8a:	1c9a      	adds	r2, r3, #2
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	3b01      	subs	r3, #1
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009b9e:	e02c      	b.n	8009bfa <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	4013      	ands	r3, r2
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d112      	bne.n	8009bd4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb2:	881a      	ldrh	r2, [r3, #0]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbe:	1c9a      	adds	r2, r3, #2
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009bd2:	e012      	b.n	8009bfa <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bd4:	f7fb ff2c 	bl	8005a30 <HAL_GetTick>
 8009bd8:	0002      	movs	r2, r0
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	683a      	ldr	r2, [r7, #0]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d802      	bhi.n	8009bea <HAL_SPI_Transmit+0x18e>
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	3301      	adds	r3, #1
 8009be8:	d102      	bne.n	8009bf0 <HAL_SPI_Transmit+0x194>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d104      	bne.n	8009bfa <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8009bf0:	231f      	movs	r3, #31
 8009bf2:	18fb      	adds	r3, r7, r3
 8009bf4:	2203      	movs	r2, #3
 8009bf6:	701a      	strb	r2, [r3, #0]
          goto error;
 8009bf8:	e079      	b.n	8009cee <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1cd      	bne.n	8009ba0 <HAL_SPI_Transmit+0x144>
 8009c04:	e04f      	b.n	8009ca6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d004      	beq.n	8009c18 <HAL_SPI_Transmit+0x1bc>
 8009c0e:	2316      	movs	r3, #22
 8009c10:	18fb      	adds	r3, r7, r3
 8009c12:	881b      	ldrh	r3, [r3, #0]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d141      	bne.n	8009c9c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	330c      	adds	r3, #12
 8009c22:	7812      	ldrb	r2, [r2, #0]
 8009c24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2a:	1c5a      	adds	r2, r3, #1
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	3b01      	subs	r3, #1
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8009c3e:	e02d      	b.n	8009c9c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	2202      	movs	r2, #2
 8009c48:	4013      	ands	r3, r2
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d113      	bne.n	8009c76 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	330c      	adds	r3, #12
 8009c58:	7812      	ldrb	r2, [r2, #0]
 8009c5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c60:	1c5a      	adds	r2, r3, #1
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c74:	e012      	b.n	8009c9c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c76:	f7fb fedb 	bl	8005a30 <HAL_GetTick>
 8009c7a:	0002      	movs	r2, r0
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	1ad3      	subs	r3, r2, r3
 8009c80:	683a      	ldr	r2, [r7, #0]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d802      	bhi.n	8009c8c <HAL_SPI_Transmit+0x230>
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	d102      	bne.n	8009c92 <HAL_SPI_Transmit+0x236>
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d104      	bne.n	8009c9c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8009c92:	231f      	movs	r3, #31
 8009c94:	18fb      	adds	r3, r7, r3
 8009c96:	2203      	movs	r2, #3
 8009c98:	701a      	strb	r2, [r3, #0]
          goto error;
 8009c9a:	e028      	b.n	8009cee <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1cc      	bne.n	8009c40 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ca6:	69ba      	ldr	r2, [r7, #24]
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	0018      	movs	r0, r3
 8009cae:	f001 f9cb 	bl	800b048 <SPI_EndRxTxTransaction>
 8009cb2:	1e03      	subs	r3, r0, #0
 8009cb4:	d002      	beq.n	8009cbc <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2220      	movs	r2, #32
 8009cba:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10a      	bne.n	8009cda <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	613b      	str	r3, [r7, #16]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	613b      	str	r3, [r7, #16]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	613b      	str	r3, [r7, #16]
 8009cd8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d004      	beq.n	8009cec <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8009ce2:	231f      	movs	r3, #31
 8009ce4:	18fb      	adds	r3, r7, r3
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	701a      	strb	r2, [r3, #0]
 8009cea:	e000      	b.n	8009cee <HAL_SPI_Transmit+0x292>
  }

error:
 8009cec:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	225d      	movs	r2, #93	; 0x5d
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	225c      	movs	r2, #92	; 0x5c
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009cfe:	231f      	movs	r3, #31
 8009d00:	18fb      	adds	r3, r7, r3
 8009d02:	781b      	ldrb	r3, [r3, #0]
}
 8009d04:	0018      	movs	r0, r3
 8009d06:	46bd      	mov	sp, r7
 8009d08:	b008      	add	sp, #32
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d0c:	b590      	push	{r4, r7, lr}
 8009d0e:	b089      	sub	sp, #36	; 0x24
 8009d10:	af02      	add	r7, sp, #8
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	603b      	str	r3, [r7, #0]
 8009d18:	1dbb      	adds	r3, r7, #6
 8009d1a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d1c:	2317      	movs	r3, #23
 8009d1e:	18fb      	adds	r3, r7, r3
 8009d20:	2200      	movs	r2, #0
 8009d22:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	2382      	movs	r3, #130	; 0x82
 8009d2a:	005b      	lsls	r3, r3, #1
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d113      	bne.n	8009d58 <HAL_SPI_Receive+0x4c>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10f      	bne.n	8009d58 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	225d      	movs	r2, #93	; 0x5d
 8009d3c:	2104      	movs	r1, #4
 8009d3e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009d40:	1dbb      	adds	r3, r7, #6
 8009d42:	881c      	ldrh	r4, [r3, #0]
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	68b9      	ldr	r1, [r7, #8]
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	0023      	movs	r3, r4
 8009d50:	f000 f928 	bl	8009fa4 <HAL_SPI_TransmitReceive>
 8009d54:	0003      	movs	r3, r0
 8009d56:	e11c      	b.n	8009f92 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	225c      	movs	r2, #92	; 0x5c
 8009d5c:	5c9b      	ldrb	r3, [r3, r2]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d101      	bne.n	8009d66 <HAL_SPI_Receive+0x5a>
 8009d62:	2302      	movs	r3, #2
 8009d64:	e115      	b.n	8009f92 <HAL_SPI_Receive+0x286>
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	225c      	movs	r2, #92	; 0x5c
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d6e:	f7fb fe5f 	bl	8005a30 <HAL_GetTick>
 8009d72:	0003      	movs	r3, r0
 8009d74:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	225d      	movs	r2, #93	; 0x5d
 8009d7a:	5c9b      	ldrb	r3, [r3, r2]
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d004      	beq.n	8009d8c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8009d82:	2317      	movs	r3, #23
 8009d84:	18fb      	adds	r3, r7, r3
 8009d86:	2202      	movs	r2, #2
 8009d88:	701a      	strb	r2, [r3, #0]
    goto error;
 8009d8a:	e0f7      	b.n	8009f7c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <HAL_SPI_Receive+0x8e>
 8009d92:	1dbb      	adds	r3, r7, #6
 8009d94:	881b      	ldrh	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d104      	bne.n	8009da4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8009d9a:	2317      	movs	r3, #23
 8009d9c:	18fb      	adds	r3, r7, r3
 8009d9e:	2201      	movs	r2, #1
 8009da0:	701a      	strb	r2, [r3, #0]
    goto error;
 8009da2:	e0eb      	b.n	8009f7c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	225d      	movs	r2, #93	; 0x5d
 8009da8:	2104      	movs	r1, #4
 8009daa:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	1dba      	adds	r2, r7, #6
 8009dbc:	2144      	movs	r1, #68	; 0x44
 8009dbe:	8812      	ldrh	r2, [r2, #0]
 8009dc0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	1dba      	adds	r2, r7, #6
 8009dc6:	2146      	movs	r1, #70	; 0x46
 8009dc8:	8812      	ldrh	r2, [r2, #0]
 8009dca:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	68da      	ldr	r2, [r3, #12]
 8009dee:	23e0      	movs	r3, #224	; 0xe0
 8009df0:	00db      	lsls	r3, r3, #3
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d908      	bls.n	8009e08 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4966      	ldr	r1, [pc, #408]	; (8009f9c <HAL_SPI_Receive+0x290>)
 8009e02:	400a      	ands	r2, r1
 8009e04:	605a      	str	r2, [r3, #4]
 8009e06:	e008      	b.n	8009e1a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2180      	movs	r1, #128	; 0x80
 8009e14:	0149      	lsls	r1, r1, #5
 8009e16:	430a      	orrs	r2, r1
 8009e18:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	689a      	ldr	r2, [r3, #8]
 8009e1e:	2380      	movs	r3, #128	; 0x80
 8009e20:	021b      	lsls	r3, r3, #8
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d10f      	bne.n	8009e46 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2140      	movs	r1, #64	; 0x40
 8009e32:	438a      	bics	r2, r1
 8009e34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4957      	ldr	r1, [pc, #348]	; (8009fa0 <HAL_SPI_Receive+0x294>)
 8009e42:	400a      	ands	r2, r1
 8009e44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2240      	movs	r2, #64	; 0x40
 8009e4e:	4013      	ands	r3, r2
 8009e50:	2b40      	cmp	r3, #64	; 0x40
 8009e52:	d007      	beq.n	8009e64 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2140      	movs	r1, #64	; 0x40
 8009e60:	430a      	orrs	r2, r1
 8009e62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	68da      	ldr	r2, [r3, #12]
 8009e68:	23e0      	movs	r3, #224	; 0xe0
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d900      	bls.n	8009e72 <HAL_SPI_Receive+0x166>
 8009e70:	e069      	b.n	8009f46 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009e72:	e031      	b.n	8009ed8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d117      	bne.n	8009eb2 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	330c      	adds	r3, #12
 8009e88:	001a      	movs	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8e:	7812      	ldrb	r2, [r2, #0]
 8009e90:	b2d2      	uxtb	r2, r2
 8009e92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e98:	1c5a      	adds	r2, r3, #1
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2246      	movs	r2, #70	; 0x46
 8009ea2:	5a9b      	ldrh	r3, [r3, r2]
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	b299      	uxth	r1, r3
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2246      	movs	r2, #70	; 0x46
 8009eae:	5299      	strh	r1, [r3, r2]
 8009eb0:	e012      	b.n	8009ed8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009eb2:	f7fb fdbd 	bl	8005a30 <HAL_GetTick>
 8009eb6:	0002      	movs	r2, r0
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	683a      	ldr	r2, [r7, #0]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d802      	bhi.n	8009ec8 <HAL_SPI_Receive+0x1bc>
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	d102      	bne.n	8009ece <HAL_SPI_Receive+0x1c2>
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d104      	bne.n	8009ed8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8009ece:	2317      	movs	r3, #23
 8009ed0:	18fb      	adds	r3, r7, r3
 8009ed2:	2203      	movs	r2, #3
 8009ed4:	701a      	strb	r2, [r3, #0]
          goto error;
 8009ed6:	e051      	b.n	8009f7c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2246      	movs	r2, #70	; 0x46
 8009edc:	5a9b      	ldrh	r3, [r3, r2]
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1c7      	bne.n	8009e74 <HAL_SPI_Receive+0x168>
 8009ee4:	e035      	b.n	8009f52 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	2201      	movs	r2, #1
 8009eee:	4013      	ands	r3, r2
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d115      	bne.n	8009f20 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68da      	ldr	r2, [r3, #12]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efe:	b292      	uxth	r2, r2
 8009f00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f06:	1c9a      	adds	r2, r3, #2
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2246      	movs	r2, #70	; 0x46
 8009f10:	5a9b      	ldrh	r3, [r3, r2]
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	3b01      	subs	r3, #1
 8009f16:	b299      	uxth	r1, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2246      	movs	r2, #70	; 0x46
 8009f1c:	5299      	strh	r1, [r3, r2]
 8009f1e:	e012      	b.n	8009f46 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f20:	f7fb fd86 	bl	8005a30 <HAL_GetTick>
 8009f24:	0002      	movs	r2, r0
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d802      	bhi.n	8009f36 <HAL_SPI_Receive+0x22a>
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	3301      	adds	r3, #1
 8009f34:	d102      	bne.n	8009f3c <HAL_SPI_Receive+0x230>
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d104      	bne.n	8009f46 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8009f3c:	2317      	movs	r3, #23
 8009f3e:	18fb      	adds	r3, r7, r3
 8009f40:	2203      	movs	r2, #3
 8009f42:	701a      	strb	r2, [r3, #0]
          goto error;
 8009f44:	e01a      	b.n	8009f7c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2246      	movs	r2, #70	; 0x46
 8009f4a:	5a9b      	ldrh	r3, [r3, r2]
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1c9      	bne.n	8009ee6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	0018      	movs	r0, r3
 8009f5a:	f001 f817 	bl	800af8c <SPI_EndRxTransaction>
 8009f5e:	1e03      	subs	r3, r0, #0
 8009f60:	d002      	beq.n	8009f68 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2220      	movs	r2, #32
 8009f66:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d004      	beq.n	8009f7a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8009f70:	2317      	movs	r3, #23
 8009f72:	18fb      	adds	r3, r7, r3
 8009f74:	2201      	movs	r2, #1
 8009f76:	701a      	strb	r2, [r3, #0]
 8009f78:	e000      	b.n	8009f7c <HAL_SPI_Receive+0x270>
  }

error :
 8009f7a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	225d      	movs	r2, #93	; 0x5d
 8009f80:	2101      	movs	r1, #1
 8009f82:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	225c      	movs	r2, #92	; 0x5c
 8009f88:	2100      	movs	r1, #0
 8009f8a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009f8c:	2317      	movs	r3, #23
 8009f8e:	18fb      	adds	r3, r7, r3
 8009f90:	781b      	ldrb	r3, [r3, #0]
}
 8009f92:	0018      	movs	r0, r3
 8009f94:	46bd      	mov	sp, r7
 8009f96:	b007      	add	sp, #28
 8009f98:	bd90      	pop	{r4, r7, pc}
 8009f9a:	46c0      	nop			; (mov r8, r8)
 8009f9c:	ffffefff 	.word	0xffffefff
 8009fa0:	ffffbfff 	.word	0xffffbfff

08009fa4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08a      	sub	sp, #40	; 0x28
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
 8009fb0:	001a      	movs	r2, r3
 8009fb2:	1cbb      	adds	r3, r7, #2
 8009fb4:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009fba:	2323      	movs	r3, #35	; 0x23
 8009fbc:	18fb      	adds	r3, r7, r3
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	225c      	movs	r2, #92	; 0x5c
 8009fc6:	5c9b      	ldrb	r3, [r3, r2]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d101      	bne.n	8009fd0 <HAL_SPI_TransmitReceive+0x2c>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e1b5      	b.n	800a33c <HAL_SPI_TransmitReceive+0x398>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	225c      	movs	r2, #92	; 0x5c
 8009fd4:	2101      	movs	r1, #1
 8009fd6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009fd8:	f7fb fd2a 	bl	8005a30 <HAL_GetTick>
 8009fdc:	0003      	movs	r3, r0
 8009fde:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009fe0:	201b      	movs	r0, #27
 8009fe2:	183b      	adds	r3, r7, r0
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	215d      	movs	r1, #93	; 0x5d
 8009fe8:	5c52      	ldrb	r2, [r2, r1]
 8009fea:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009ff2:	2312      	movs	r3, #18
 8009ff4:	18fb      	adds	r3, r7, r3
 8009ff6:	1cba      	adds	r2, r7, #2
 8009ff8:	8812      	ldrh	r2, [r2, #0]
 8009ffa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ffc:	183b      	adds	r3, r7, r0
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d011      	beq.n	800a028 <HAL_SPI_TransmitReceive+0x84>
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	2382      	movs	r3, #130	; 0x82
 800a008:	005b      	lsls	r3, r3, #1
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d107      	bne.n	800a01e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d103      	bne.n	800a01e <HAL_SPI_TransmitReceive+0x7a>
 800a016:	183b      	adds	r3, r7, r0
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	2b04      	cmp	r3, #4
 800a01c:	d004      	beq.n	800a028 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800a01e:	2323      	movs	r3, #35	; 0x23
 800a020:	18fb      	adds	r3, r7, r3
 800a022:	2202      	movs	r2, #2
 800a024:	701a      	strb	r2, [r3, #0]
    goto error;
 800a026:	e17e      	b.n	800a326 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d006      	beq.n	800a03c <HAL_SPI_TransmitReceive+0x98>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d003      	beq.n	800a03c <HAL_SPI_TransmitReceive+0x98>
 800a034:	1cbb      	adds	r3, r7, #2
 800a036:	881b      	ldrh	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d104      	bne.n	800a046 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800a03c:	2323      	movs	r3, #35	; 0x23
 800a03e:	18fb      	adds	r3, r7, r3
 800a040:	2201      	movs	r2, #1
 800a042:	701a      	strb	r2, [r3, #0]
    goto error;
 800a044:	e16f      	b.n	800a326 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	225d      	movs	r2, #93	; 0x5d
 800a04a:	5c9b      	ldrb	r3, [r3, r2]
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	2b04      	cmp	r3, #4
 800a050:	d003      	beq.n	800a05a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	225d      	movs	r2, #93	; 0x5d
 800a056:	2105      	movs	r1, #5
 800a058:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	1cba      	adds	r2, r7, #2
 800a06a:	2146      	movs	r1, #70	; 0x46
 800a06c:	8812      	ldrh	r2, [r2, #0]
 800a06e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	1cba      	adds	r2, r7, #2
 800a074:	2144      	movs	r1, #68	; 0x44
 800a076:	8812      	ldrh	r2, [r2, #0]
 800a078:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	1cba      	adds	r2, r7, #2
 800a084:	8812      	ldrh	r2, [r2, #0]
 800a086:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	1cba      	adds	r2, r7, #2
 800a08c:	8812      	ldrh	r2, [r2, #0]
 800a08e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	68da      	ldr	r2, [r3, #12]
 800a0a0:	23e0      	movs	r3, #224	; 0xe0
 800a0a2:	00db      	lsls	r3, r3, #3
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d908      	bls.n	800a0ba <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	685a      	ldr	r2, [r3, #4]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	49a4      	ldr	r1, [pc, #656]	; (800a344 <HAL_SPI_TransmitReceive+0x3a0>)
 800a0b4:	400a      	ands	r2, r1
 800a0b6:	605a      	str	r2, [r3, #4]
 800a0b8:	e008      	b.n	800a0cc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	685a      	ldr	r2, [r3, #4]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2180      	movs	r1, #128	; 0x80
 800a0c6:	0149      	lsls	r1, r1, #5
 800a0c8:	430a      	orrs	r2, r1
 800a0ca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2240      	movs	r2, #64	; 0x40
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	2b40      	cmp	r3, #64	; 0x40
 800a0d8:	d007      	beq.n	800a0ea <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2140      	movs	r1, #64	; 0x40
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	68da      	ldr	r2, [r3, #12]
 800a0ee:	23e0      	movs	r3, #224	; 0xe0
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d800      	bhi.n	800a0f8 <HAL_SPI_TransmitReceive+0x154>
 800a0f6:	e07f      	b.n	800a1f8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d005      	beq.n	800a10c <HAL_SPI_TransmitReceive+0x168>
 800a100:	2312      	movs	r3, #18
 800a102:	18fb      	adds	r3, r7, r3
 800a104:	881b      	ldrh	r3, [r3, #0]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d000      	beq.n	800a10c <HAL_SPI_TransmitReceive+0x168>
 800a10a:	e069      	b.n	800a1e0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a110:	881a      	ldrh	r2, [r3, #0]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11c:	1c9a      	adds	r2, r3, #2
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a126:	b29b      	uxth	r3, r3
 800a128:	3b01      	subs	r3, #1
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a130:	e056      	b.n	800a1e0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	2202      	movs	r2, #2
 800a13a:	4013      	ands	r3, r2
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d11b      	bne.n	800a178 <HAL_SPI_TransmitReceive+0x1d4>
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a144:	b29b      	uxth	r3, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	d016      	beq.n	800a178 <HAL_SPI_TransmitReceive+0x1d4>
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d113      	bne.n	800a178 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a154:	881a      	ldrh	r2, [r3, #0]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a160:	1c9a      	adds	r2, r3, #2
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	3b01      	subs	r3, #1
 800a16e:	b29a      	uxth	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a174:	2300      	movs	r3, #0
 800a176:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	2201      	movs	r2, #1
 800a180:	4013      	ands	r3, r2
 800a182:	2b01      	cmp	r3, #1
 800a184:	d11c      	bne.n	800a1c0 <HAL_SPI_TransmitReceive+0x21c>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2246      	movs	r2, #70	; 0x46
 800a18a:	5a9b      	ldrh	r3, [r3, r2]
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d016      	beq.n	800a1c0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68da      	ldr	r2, [r3, #12]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19c:	b292      	uxth	r2, r2
 800a19e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a4:	1c9a      	adds	r2, r3, #2
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2246      	movs	r2, #70	; 0x46
 800a1ae:	5a9b      	ldrh	r3, [r3, r2]
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	b299      	uxth	r1, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2246      	movs	r2, #70	; 0x46
 800a1ba:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a1c0:	f7fb fc36 	bl	8005a30 <HAL_GetTick>
 800a1c4:	0002      	movs	r2, r0
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d807      	bhi.n	800a1e0 <HAL_SPI_TransmitReceive+0x23c>
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	d004      	beq.n	800a1e0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800a1d6:	2323      	movs	r3, #35	; 0x23
 800a1d8:	18fb      	adds	r3, r7, r3
 800a1da:	2203      	movs	r2, #3
 800a1dc:	701a      	strb	r2, [r3, #0]
        goto error;
 800a1de:	e0a2      	b.n	800a326 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1a3      	bne.n	800a132 <HAL_SPI_TransmitReceive+0x18e>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2246      	movs	r2, #70	; 0x46
 800a1ee:	5a9b      	ldrh	r3, [r3, r2]
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d19d      	bne.n	800a132 <HAL_SPI_TransmitReceive+0x18e>
 800a1f6:	e085      	b.n	800a304 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d005      	beq.n	800a20c <HAL_SPI_TransmitReceive+0x268>
 800a200:	2312      	movs	r3, #18
 800a202:	18fb      	adds	r3, r7, r3
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d000      	beq.n	800a20c <HAL_SPI_TransmitReceive+0x268>
 800a20a:	e070      	b.n	800a2ee <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	330c      	adds	r3, #12
 800a216:	7812      	ldrb	r2, [r2, #0]
 800a218:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21e:	1c5a      	adds	r2, r3, #1
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a228:	b29b      	uxth	r3, r3
 800a22a:	3b01      	subs	r3, #1
 800a22c:	b29a      	uxth	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a232:	e05c      	b.n	800a2ee <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	2202      	movs	r2, #2
 800a23c:	4013      	ands	r3, r2
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d11c      	bne.n	800a27c <HAL_SPI_TransmitReceive+0x2d8>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a246:	b29b      	uxth	r3, r3
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d017      	beq.n	800a27c <HAL_SPI_TransmitReceive+0x2d8>
 800a24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d114      	bne.n	800a27c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	330c      	adds	r3, #12
 800a25c:	7812      	ldrb	r2, [r2, #0]
 800a25e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a264:	1c5a      	adds	r2, r3, #1
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a26e:	b29b      	uxth	r3, r3
 800a270:	3b01      	subs	r3, #1
 800a272:	b29a      	uxth	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a278:	2300      	movs	r3, #0
 800a27a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	2201      	movs	r2, #1
 800a284:	4013      	ands	r3, r2
 800a286:	2b01      	cmp	r3, #1
 800a288:	d11e      	bne.n	800a2c8 <HAL_SPI_TransmitReceive+0x324>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2246      	movs	r2, #70	; 0x46
 800a28e:	5a9b      	ldrh	r3, [r3, r2]
 800a290:	b29b      	uxth	r3, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	d018      	beq.n	800a2c8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	330c      	adds	r3, #12
 800a29c:	001a      	movs	r2, r3
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a2:	7812      	ldrb	r2, [r2, #0]
 800a2a4:	b2d2      	uxtb	r2, r2
 800a2a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ac:	1c5a      	adds	r2, r3, #1
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2246      	movs	r2, #70	; 0x46
 800a2b6:	5a9b      	ldrh	r3, [r3, r2]
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	b299      	uxth	r1, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2246      	movs	r2, #70	; 0x46
 800a2c2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a2c8:	f7fb fbb2 	bl	8005a30 <HAL_GetTick>
 800a2cc:	0002      	movs	r2, r0
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	1ad3      	subs	r3, r2, r3
 800a2d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d802      	bhi.n	800a2de <HAL_SPI_TransmitReceive+0x33a>
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	3301      	adds	r3, #1
 800a2dc:	d102      	bne.n	800a2e4 <HAL_SPI_TransmitReceive+0x340>
 800a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d104      	bne.n	800a2ee <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800a2e4:	2323      	movs	r3, #35	; 0x23
 800a2e6:	18fb      	adds	r3, r7, r3
 800a2e8:	2203      	movs	r2, #3
 800a2ea:	701a      	strb	r2, [r3, #0]
        goto error;
 800a2ec:	e01b      	b.n	800a326 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d19d      	bne.n	800a234 <HAL_SPI_TransmitReceive+0x290>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2246      	movs	r2, #70	; 0x46
 800a2fc:	5a9b      	ldrh	r3, [r3, r2]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	2b00      	cmp	r3, #0
 800a302:	d197      	bne.n	800a234 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a304:	69fa      	ldr	r2, [r7, #28]
 800a306:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	0018      	movs	r0, r3
 800a30c:	f000 fe9c 	bl	800b048 <SPI_EndRxTxTransaction>
 800a310:	1e03      	subs	r3, r0, #0
 800a312:	d007      	beq.n	800a324 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800a314:	2323      	movs	r3, #35	; 0x23
 800a316:	18fb      	adds	r3, r7, r3
 800a318:	2201      	movs	r2, #1
 800a31a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2220      	movs	r2, #32
 800a320:	661a      	str	r2, [r3, #96]	; 0x60
 800a322:	e000      	b.n	800a326 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800a324:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	225d      	movs	r2, #93	; 0x5d
 800a32a:	2101      	movs	r1, #1
 800a32c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	225c      	movs	r2, #92	; 0x5c
 800a332:	2100      	movs	r1, #0
 800a334:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a336:	2323      	movs	r3, #35	; 0x23
 800a338:	18fb      	adds	r3, r7, r3
 800a33a:	781b      	ldrb	r3, [r3, #0]
}
 800a33c:	0018      	movs	r0, r3
 800a33e:	46bd      	mov	sp, r7
 800a340:	b00a      	add	sp, #40	; 0x28
 800a342:	bd80      	pop	{r7, pc}
 800a344:	ffffefff 	.word	0xffffefff

0800a348 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a348:	b590      	push	{r4, r7, lr}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	1dbb      	adds	r3, r7, #6
 800a354:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a356:	2317      	movs	r3, #23
 800a358:	18fb      	adds	r3, r7, r3
 800a35a:	2200      	movs	r2, #0
 800a35c:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d112      	bne.n	800a38c <HAL_SPI_Receive_DMA+0x44>
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	2382      	movs	r3, #130	; 0x82
 800a36c:	005b      	lsls	r3, r3, #1
 800a36e:	429a      	cmp	r2, r3
 800a370:	d10c      	bne.n	800a38c <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	225d      	movs	r2, #93	; 0x5d
 800a376:	2104      	movs	r1, #4
 800a378:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800a37a:	1dbb      	adds	r3, r7, #6
 800a37c:	881b      	ldrh	r3, [r3, #0]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	68b9      	ldr	r1, [r7, #8]
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f000 f91e 	bl	800a5c4 <HAL_SPI_TransmitReceive_DMA>
 800a388:	0003      	movs	r3, r0
 800a38a:	e10b      	b.n	800a5a4 <HAL_SPI_Receive_DMA+0x25c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	225c      	movs	r2, #92	; 0x5c
 800a390:	5c9b      	ldrb	r3, [r3, r2]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d101      	bne.n	800a39a <HAL_SPI_Receive_DMA+0x52>
 800a396:	2302      	movs	r3, #2
 800a398:	e104      	b.n	800a5a4 <HAL_SPI_Receive_DMA+0x25c>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	225c      	movs	r2, #92	; 0x5c
 800a39e:	2101      	movs	r1, #1
 800a3a0:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	225d      	movs	r2, #93	; 0x5d
 800a3a6:	5c9b      	ldrb	r3, [r3, r2]
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d004      	beq.n	800a3b8 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800a3ae:	2317      	movs	r3, #23
 800a3b0:	18fb      	adds	r3, r7, r3
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	701a      	strb	r2, [r3, #0]
    goto error;
 800a3b6:	e0ee      	b.n	800a596 <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <HAL_SPI_Receive_DMA+0x7e>
 800a3be:	1dbb      	adds	r3, r7, #6
 800a3c0:	881b      	ldrh	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d104      	bne.n	800a3d0 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 800a3c6:	2317      	movs	r3, #23
 800a3c8:	18fb      	adds	r3, r7, r3
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	701a      	strb	r2, [r3, #0]
    goto error;
 800a3ce:	e0e2      	b.n	800a596 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	225d      	movs	r2, #93	; 0x5d
 800a3d4:	2104      	movs	r1, #4
 800a3d6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	1dba      	adds	r2, r7, #6
 800a3e8:	2144      	movs	r1, #68	; 0x44
 800a3ea:	8812      	ldrh	r2, [r2, #0]
 800a3ec:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	1dba      	adds	r2, r7, #6
 800a3f2:	2146      	movs	r1, #70	; 0x46
 800a3f4:	8812      	ldrh	r2, [r2, #0]
 800a3f6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	689a      	ldr	r2, [r3, #8]
 800a414:	2380      	movs	r3, #128	; 0x80
 800a416:	021b      	lsls	r3, r3, #8
 800a418:	429a      	cmp	r2, r3
 800a41a:	d10f      	bne.n	800a43c <HAL_SPI_Receive_DMA+0xf4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2140      	movs	r1, #64	; 0x40
 800a428:	438a      	bics	r2, r1
 800a42a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	495d      	ldr	r1, [pc, #372]	; (800a5ac <HAL_SPI_Receive_DMA+0x264>)
 800a438:	400a      	ands	r2, r1
 800a43a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	495a      	ldr	r1, [pc, #360]	; (800a5b0 <HAL_SPI_Receive_DMA+0x268>)
 800a448:	400a      	ands	r2, r1
 800a44a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	68da      	ldr	r2, [r3, #12]
 800a450:	23e0      	movs	r3, #224	; 0xe0
 800a452:	00db      	lsls	r3, r3, #3
 800a454:	429a      	cmp	r2, r3
 800a456:	d908      	bls.n	800a46a <HAL_SPI_Receive_DMA+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	685a      	ldr	r2, [r3, #4]
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4954      	ldr	r1, [pc, #336]	; (800a5b4 <HAL_SPI_Receive_DMA+0x26c>)
 800a464:	400a      	ands	r2, r1
 800a466:	605a      	str	r2, [r3, #4]
 800a468:	e045      	b.n	800a4f6 <HAL_SPI_Receive_DMA+0x1ae>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	685a      	ldr	r2, [r3, #4]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2180      	movs	r1, #128	; 0x80
 800a476:	0149      	lsls	r1, r1, #5
 800a478:	430a      	orrs	r2, r1
 800a47a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a480:	699a      	ldr	r2, [r3, #24]
 800a482:	2380      	movs	r3, #128	; 0x80
 800a484:	00db      	lsls	r3, r3, #3
 800a486:	429a      	cmp	r2, r3
 800a488:	d135      	bne.n	800a4f6 <HAL_SPI_Receive_DMA+0x1ae>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	685a      	ldr	r2, [r3, #4]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4947      	ldr	r1, [pc, #284]	; (800a5b4 <HAL_SPI_Receive_DMA+0x26c>)
 800a496:	400a      	ands	r2, r1
 800a498:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2246      	movs	r2, #70	; 0x46
 800a49e:	5a9b      	ldrh	r3, [r3, r2]
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	001a      	movs	r2, r3
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	d111      	bne.n	800a4ce <HAL_SPI_Receive_DMA+0x186>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	493e      	ldr	r1, [pc, #248]	; (800a5b0 <HAL_SPI_Receive_DMA+0x268>)
 800a4b6:	400a      	ands	r2, r1
 800a4b8:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2246      	movs	r2, #70	; 0x46
 800a4be:	5a9b      	ldrh	r3, [r3, r2]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	085b      	lsrs	r3, r3, #1
 800a4c4:	b299      	uxth	r1, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2246      	movs	r2, #70	; 0x46
 800a4ca:	5299      	strh	r1, [r3, r2]
 800a4cc:	e013      	b.n	800a4f6 <HAL_SPI_Receive_DMA+0x1ae>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	685a      	ldr	r2, [r3, #4]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2180      	movs	r1, #128	; 0x80
 800a4da:	0189      	lsls	r1, r1, #6
 800a4dc:	430a      	orrs	r2, r1
 800a4de:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2246      	movs	r2, #70	; 0x46
 800a4e4:	5a9b      	ldrh	r3, [r3, r2]
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	085b      	lsrs	r3, r3, #1
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	b299      	uxth	r1, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2246      	movs	r2, #70	; 0x46
 800a4f4:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4fa:	4a2f      	ldr	r2, [pc, #188]	; (800a5b8 <HAL_SPI_Receive_DMA+0x270>)
 800a4fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a502:	4a2e      	ldr	r2, [pc, #184]	; (800a5bc <HAL_SPI_Receive_DMA+0x274>)
 800a504:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a50a:	4a2d      	ldr	r2, [pc, #180]	; (800a5c0 <HAL_SPI_Receive_DMA+0x278>)
 800a50c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a512:	2200      	movs	r2, #0
 800a514:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	330c      	adds	r3, #12
 800a520:	0019      	movs	r1, r3
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a526:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2246      	movs	r2, #70	; 0x46
 800a52c:	5a9b      	ldrh	r3, [r3, r2]
 800a52e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a530:	0022      	movs	r2, r4
 800a532:	f7fb fe89 	bl	8006248 <HAL_DMA_Start_IT>
 800a536:	1e03      	subs	r3, r0, #0
 800a538:	d00e      	beq.n	800a558 <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a53e:	2210      	movs	r2, #16
 800a540:	431a      	orrs	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a546:	2317      	movs	r3, #23
 800a548:	18fb      	adds	r3, r7, r3
 800a54a:	2201      	movs	r2, #1
 800a54c:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	225d      	movs	r2, #93	; 0x5d
 800a552:	2101      	movs	r1, #1
 800a554:	5499      	strb	r1, [r3, r2]
    goto error;
 800a556:	e01e      	b.n	800a596 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2240      	movs	r2, #64	; 0x40
 800a560:	4013      	ands	r3, r2
 800a562:	2b40      	cmp	r3, #64	; 0x40
 800a564:	d007      	beq.n	800a576 <HAL_SPI_Receive_DMA+0x22e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	2140      	movs	r1, #64	; 0x40
 800a572:	430a      	orrs	r2, r1
 800a574:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	685a      	ldr	r2, [r3, #4]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2120      	movs	r1, #32
 800a582:	430a      	orrs	r2, r1
 800a584:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2101      	movs	r1, #1
 800a592:	430a      	orrs	r2, r1
 800a594:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	225c      	movs	r2, #92	; 0x5c
 800a59a:	2100      	movs	r1, #0
 800a59c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a59e:	2317      	movs	r3, #23
 800a5a0:	18fb      	adds	r3, r7, r3
 800a5a2:	781b      	ldrb	r3, [r3, #0]
}
 800a5a4:	0018      	movs	r0, r3
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	b007      	add	sp, #28
 800a5aa:	bd90      	pop	{r4, r7, pc}
 800a5ac:	ffffbfff 	.word	0xffffbfff
 800a5b0:	ffffdfff 	.word	0xffffdfff
 800a5b4:	ffffefff 	.word	0xffffefff
 800a5b8:	0800ac9b 	.word	0x0800ac9b
 800a5bc:	0800ab55 	.word	0x0800ab55
 800a5c0:	0800acd7 	.word	0x0800acd7

0800a5c4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a5c4:	b590      	push	{r4, r7, lr}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	001a      	movs	r2, r3
 800a5d2:	1cbb      	adds	r3, r7, #2
 800a5d4:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a5d6:	2317      	movs	r3, #23
 800a5d8:	18fb      	adds	r3, r7, r3
 800a5da:	2200      	movs	r2, #0
 800a5dc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	225c      	movs	r2, #92	; 0x5c
 800a5e2:	5c9b      	ldrb	r3, [r3, r2]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d101      	bne.n	800a5ec <HAL_SPI_TransmitReceive_DMA+0x28>
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	e186      	b.n	800a8fa <HAL_SPI_TransmitReceive_DMA+0x336>
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	225c      	movs	r2, #92	; 0x5c
 800a5f0:	2101      	movs	r1, #1
 800a5f2:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a5f4:	2016      	movs	r0, #22
 800a5f6:	183b      	adds	r3, r7, r0
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	215d      	movs	r1, #93	; 0x5d
 800a5fc:	5c52      	ldrb	r2, [r2, r1]
 800a5fe:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a606:	0001      	movs	r1, r0
 800a608:	187b      	adds	r3, r7, r1
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d011      	beq.n	800a634 <HAL_SPI_TransmitReceive_DMA+0x70>
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	2382      	movs	r3, #130	; 0x82
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	429a      	cmp	r2, r3
 800a618:	d107      	bne.n	800a62a <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d103      	bne.n	800a62a <HAL_SPI_TransmitReceive_DMA+0x66>
 800a622:	187b      	adds	r3, r7, r1
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	2b04      	cmp	r3, #4
 800a628:	d004      	beq.n	800a634 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800a62a:	2317      	movs	r3, #23
 800a62c:	18fb      	adds	r3, r7, r3
 800a62e:	2202      	movs	r2, #2
 800a630:	701a      	strb	r2, [r3, #0]
    goto error;
 800a632:	e15b      	b.n	800a8ec <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d006      	beq.n	800a648 <HAL_SPI_TransmitReceive_DMA+0x84>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <HAL_SPI_TransmitReceive_DMA+0x84>
 800a640:	1cbb      	adds	r3, r7, #2
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d104      	bne.n	800a652 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 800a648:	2317      	movs	r3, #23
 800a64a:	18fb      	adds	r3, r7, r3
 800a64c:	2201      	movs	r2, #1
 800a64e:	701a      	strb	r2, [r3, #0]
    goto error;
 800a650:	e14c      	b.n	800a8ec <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	225d      	movs	r2, #93	; 0x5d
 800a656:	5c9b      	ldrb	r3, [r3, r2]
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b04      	cmp	r3, #4
 800a65c:	d003      	beq.n	800a666 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	225d      	movs	r2, #93	; 0x5d
 800a662:	2105      	movs	r1, #5
 800a664:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	1cba      	adds	r2, r7, #2
 800a676:	8812      	ldrh	r2, [r2, #0]
 800a678:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	1cba      	adds	r2, r7, #2
 800a67e:	8812      	ldrh	r2, [r2, #0]
 800a680:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	1cba      	adds	r2, r7, #2
 800a68c:	2144      	movs	r1, #68	; 0x44
 800a68e:	8812      	ldrh	r2, [r2, #0]
 800a690:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	1cba      	adds	r2, r7, #2
 800a696:	2146      	movs	r1, #70	; 0x46
 800a698:	8812      	ldrh	r2, [r2, #0]
 800a69a:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4994      	ldr	r1, [pc, #592]	; (800a904 <HAL_SPI_TransmitReceive_DMA+0x340>)
 800a6b4:	400a      	ands	r2, r1
 800a6b6:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	68da      	ldr	r2, [r3, #12]
 800a6bc:	23e0      	movs	r3, #224	; 0xe0
 800a6be:	00db      	lsls	r3, r3, #3
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d908      	bls.n	800a6d6 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	685a      	ldr	r2, [r3, #4]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	498e      	ldr	r1, [pc, #568]	; (800a908 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800a6d0:	400a      	ands	r2, r1
 800a6d2:	605a      	str	r2, [r3, #4]
 800a6d4:	e074      	b.n	800a7c0 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2180      	movs	r1, #128	; 0x80
 800a6e2:	0149      	lsls	r1, r1, #5
 800a6e4:	430a      	orrs	r2, r1
 800a6e6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ec:	699a      	ldr	r2, [r3, #24]
 800a6ee:	2380      	movs	r3, #128	; 0x80
 800a6f0:	00db      	lsls	r3, r3, #3
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d127      	bne.n	800a746 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a6fa:	001a      	movs	r2, r3
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	4013      	ands	r3, r2
 800a700:	d10f      	bne.n	800a722 <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	685a      	ldr	r2, [r3, #4]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	497f      	ldr	r1, [pc, #508]	; (800a90c <HAL_SPI_TransmitReceive_DMA+0x348>)
 800a70e:	400a      	ands	r2, r1
 800a710:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a716:	b29b      	uxth	r3, r3
 800a718:	085b      	lsrs	r3, r3, #1
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a720:	e011      	b.n	800a746 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2180      	movs	r1, #128	; 0x80
 800a72e:	01c9      	lsls	r1, r1, #7
 800a730:	430a      	orrs	r2, r1
 800a732:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a738:	b29b      	uxth	r3, r3
 800a73a:	085b      	lsrs	r3, r3, #1
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	3301      	adds	r3, #1
 800a740:	b29a      	uxth	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a74a:	699a      	ldr	r2, [r3, #24]
 800a74c:	2380      	movs	r3, #128	; 0x80
 800a74e:	00db      	lsls	r3, r3, #3
 800a750:	429a      	cmp	r2, r3
 800a752:	d135      	bne.n	800a7c0 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	685a      	ldr	r2, [r3, #4]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	496a      	ldr	r1, [pc, #424]	; (800a908 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800a760:	400a      	ands	r2, r1
 800a762:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2246      	movs	r2, #70	; 0x46
 800a768:	5a9b      	ldrh	r3, [r3, r2]
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	001a      	movs	r2, r3
 800a76e:	2301      	movs	r3, #1
 800a770:	4013      	ands	r3, r2
 800a772:	d111      	bne.n	800a798 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	685a      	ldr	r2, [r3, #4]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4964      	ldr	r1, [pc, #400]	; (800a910 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 800a780:	400a      	ands	r2, r1
 800a782:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2246      	movs	r2, #70	; 0x46
 800a788:	5a9b      	ldrh	r3, [r3, r2]
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	085b      	lsrs	r3, r3, #1
 800a78e:	b299      	uxth	r1, r3
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2246      	movs	r2, #70	; 0x46
 800a794:	5299      	strh	r1, [r3, r2]
 800a796:	e013      	b.n	800a7c0 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	685a      	ldr	r2, [r3, #4]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2180      	movs	r1, #128	; 0x80
 800a7a4:	0189      	lsls	r1, r1, #6
 800a7a6:	430a      	orrs	r2, r1
 800a7a8:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2246      	movs	r2, #70	; 0x46
 800a7ae:	5a9b      	ldrh	r3, [r3, r2]
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	085b      	lsrs	r3, r3, #1
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	b299      	uxth	r1, r3
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2246      	movs	r2, #70	; 0x46
 800a7be:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	225d      	movs	r2, #93	; 0x5d
 800a7c4:	5c9b      	ldrb	r3, [r3, r2]
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b04      	cmp	r3, #4
 800a7ca:	d108      	bne.n	800a7de <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d0:	4a50      	ldr	r2, [pc, #320]	; (800a914 <HAL_SPI_TransmitReceive_DMA+0x350>)
 800a7d2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d8:	4a4f      	ldr	r2, [pc, #316]	; (800a918 <HAL_SPI_TransmitReceive_DMA+0x354>)
 800a7da:	62da      	str	r2, [r3, #44]	; 0x2c
 800a7dc:	e007      	b.n	800a7ee <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7e2:	4a4e      	ldr	r2, [pc, #312]	; (800a91c <HAL_SPI_TransmitReceive_DMA+0x358>)
 800a7e4:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7ea:	4a4d      	ldr	r2, [pc, #308]	; (800a920 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 800a7ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f2:	4a4c      	ldr	r2, [pc, #304]	; (800a924 <HAL_SPI_TransmitReceive_DMA+0x360>)
 800a7f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	330c      	adds	r3, #12
 800a808:	0019      	movs	r1, r3
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80e:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2246      	movs	r2, #70	; 0x46
 800a814:	5a9b      	ldrh	r3, [r3, r2]
 800a816:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a818:	0022      	movs	r2, r4
 800a81a:	f7fb fd15 	bl	8006248 <HAL_DMA_Start_IT>
 800a81e:	1e03      	subs	r3, r0, #0
 800a820:	d00e      	beq.n	800a840 <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a826:	2210      	movs	r2, #16
 800a828:	431a      	orrs	r2, r3
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a82e:	2317      	movs	r3, #23
 800a830:	18fb      	adds	r3, r7, r3
 800a832:	2201      	movs	r2, #1
 800a834:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	225d      	movs	r2, #93	; 0x5d
 800a83a:	2101      	movs	r1, #1
 800a83c:	5499      	strb	r1, [r3, r2]
    goto error;
 800a83e:	e055      	b.n	800a8ec <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2101      	movs	r1, #1
 800a84c:	430a      	orrs	r2, r1
 800a84e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a854:	2200      	movs	r2, #0
 800a856:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a85c:	2200      	movs	r2, #0
 800a85e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a864:	2200      	movs	r2, #0
 800a866:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a86c:	2200      	movs	r2, #0
 800a86e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a878:	0019      	movs	r1, r3
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	330c      	adds	r3, #12
 800a880:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a886:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a888:	f7fb fcde 	bl	8006248 <HAL_DMA_Start_IT>
 800a88c:	1e03      	subs	r3, r0, #0
 800a88e:	d00e      	beq.n	800a8ae <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a894:	2210      	movs	r2, #16
 800a896:	431a      	orrs	r2, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a89c:	2317      	movs	r3, #23
 800a89e:	18fb      	adds	r3, r7, r3
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	225d      	movs	r2, #93	; 0x5d
 800a8a8:	2101      	movs	r1, #1
 800a8aa:	5499      	strb	r1, [r3, r2]
    goto error;
 800a8ac:	e01e      	b.n	800a8ec <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2240      	movs	r2, #64	; 0x40
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	2b40      	cmp	r3, #64	; 0x40
 800a8ba:	d007      	beq.n	800a8cc <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2140      	movs	r1, #64	; 0x40
 800a8c8:	430a      	orrs	r2, r1
 800a8ca:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	685a      	ldr	r2, [r3, #4]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2120      	movs	r1, #32
 800a8d8:	430a      	orrs	r2, r1
 800a8da:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	685a      	ldr	r2, [r3, #4]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2102      	movs	r1, #2
 800a8e8:	430a      	orrs	r2, r1
 800a8ea:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	225c      	movs	r2, #92	; 0x5c
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a8f4:	2317      	movs	r3, #23
 800a8f6:	18fb      	adds	r3, r7, r3
 800a8f8:	781b      	ldrb	r3, [r3, #0]
}
 800a8fa:	0018      	movs	r0, r3
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	b007      	add	sp, #28
 800a900:	bd90      	pop	{r4, r7, pc}
 800a902:	46c0      	nop			; (mov r8, r8)
 800a904:	ffff9fff 	.word	0xffff9fff
 800a908:	ffffefff 	.word	0xffffefff
 800a90c:	ffffbfff 	.word	0xffffbfff
 800a910:	ffffdfff 	.word	0xffffdfff
 800a914:	0800ac9b 	.word	0x0800ac9b
 800a918:	0800ab55 	.word	0x0800ab55
 800a91c:	0800acb9 	.word	0x0800acb9
 800a920:	0800ac05 	.word	0x0800ac05
 800a924:	0800acd7 	.word	0x0800acd7

0800a928 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	099b      	lsrs	r3, r3, #6
 800a944:	001a      	movs	r2, r3
 800a946:	2301      	movs	r3, #1
 800a948:	4013      	ands	r3, r2
 800a94a:	d10f      	bne.n	800a96c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	2201      	movs	r2, #1
 800a950:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a952:	d00b      	beq.n	800a96c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	099b      	lsrs	r3, r3, #6
 800a958:	001a      	movs	r2, r3
 800a95a:	2301      	movs	r3, #1
 800a95c:	4013      	ands	r3, r2
 800a95e:	d005      	beq.n	800a96c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	0010      	movs	r0, r2
 800a968:	4798      	blx	r3
    return;
 800a96a:	e0d5      	b.n	800ab18 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	085b      	lsrs	r3, r3, #1
 800a970:	001a      	movs	r2, r3
 800a972:	2301      	movs	r3, #1
 800a974:	4013      	ands	r3, r2
 800a976:	d00b      	beq.n	800a990 <HAL_SPI_IRQHandler+0x68>
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	09db      	lsrs	r3, r3, #7
 800a97c:	001a      	movs	r2, r3
 800a97e:	2301      	movs	r3, #1
 800a980:	4013      	ands	r3, r2
 800a982:	d005      	beq.n	800a990 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	0010      	movs	r0, r2
 800a98c:	4798      	blx	r3
    return;
 800a98e:	e0c3      	b.n	800ab18 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	095b      	lsrs	r3, r3, #5
 800a994:	001a      	movs	r2, r3
 800a996:	2301      	movs	r3, #1
 800a998:	4013      	ands	r3, r2
 800a99a:	d10c      	bne.n	800a9b6 <HAL_SPI_IRQHandler+0x8e>
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	099b      	lsrs	r3, r3, #6
 800a9a0:	001a      	movs	r2, r3
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	d106      	bne.n	800a9b6 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	0a1b      	lsrs	r3, r3, #8
 800a9ac:	001a      	movs	r2, r3
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	d100      	bne.n	800a9b6 <HAL_SPI_IRQHandler+0x8e>
 800a9b4:	e0b0      	b.n	800ab18 <HAL_SPI_IRQHandler+0x1f0>
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	095b      	lsrs	r3, r3, #5
 800a9ba:	001a      	movs	r2, r3
 800a9bc:	2301      	movs	r3, #1
 800a9be:	4013      	ands	r3, r2
 800a9c0:	d100      	bne.n	800a9c4 <HAL_SPI_IRQHandler+0x9c>
 800a9c2:	e0a9      	b.n	800ab18 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	099b      	lsrs	r3, r3, #6
 800a9c8:	001a      	movs	r2, r3
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	d023      	beq.n	800aa18 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	225d      	movs	r2, #93	; 0x5d
 800a9d4:	5c9b      	ldrb	r3, [r3, r2]
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b03      	cmp	r3, #3
 800a9da:	d011      	beq.n	800aa00 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9e0:	2204      	movs	r2, #4
 800a9e2:	431a      	orrs	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	617b      	str	r3, [r7, #20]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	617b      	str	r3, [r7, #20]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	617b      	str	r3, [r7, #20]
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	e00b      	b.n	800aa18 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa00:	2300      	movs	r3, #0
 800aa02:	613b      	str	r3, [r7, #16]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	613b      	str	r3, [r7, #16]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	613b      	str	r3, [r7, #16]
 800aa14:	693b      	ldr	r3, [r7, #16]
        return;
 800aa16:	e07f      	b.n	800ab18 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	095b      	lsrs	r3, r3, #5
 800aa1c:	001a      	movs	r2, r3
 800aa1e:	2301      	movs	r3, #1
 800aa20:	4013      	ands	r3, r2
 800aa22:	d014      	beq.n	800aa4e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa28:	2201      	movs	r2, #1
 800aa2a:	431a      	orrs	r2, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aa30:	2300      	movs	r3, #0
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2140      	movs	r1, #64	; 0x40
 800aa48:	438a      	bics	r2, r1
 800aa4a:	601a      	str	r2, [r3, #0]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	0a1b      	lsrs	r3, r3, #8
 800aa52:	001a      	movs	r2, r3
 800aa54:	2301      	movs	r3, #1
 800aa56:	4013      	ands	r3, r2
 800aa58:	d00c      	beq.n	800aa74 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa5e:	2208      	movs	r2, #8
 800aa60:	431a      	orrs	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aa66:	2300      	movs	r3, #0
 800aa68:	60bb      	str	r3, [r7, #8]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	60bb      	str	r3, [r7, #8]
 800aa72:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d04c      	beq.n	800ab16 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	685a      	ldr	r2, [r3, #4]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	21e0      	movs	r1, #224	; 0xe0
 800aa88:	438a      	bics	r2, r1
 800aa8a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	225d      	movs	r2, #93	; 0x5d
 800aa90:	2101      	movs	r1, #1
 800aa92:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	2202      	movs	r2, #2
 800aa98:	4013      	ands	r3, r2
 800aa9a:	d103      	bne.n	800aaa4 <HAL_SPI_IRQHandler+0x17c>
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	4013      	ands	r3, r2
 800aaa2:	d032      	beq.n	800ab0a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	685a      	ldr	r2, [r3, #4]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2103      	movs	r1, #3
 800aab0:	438a      	bics	r2, r1
 800aab2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d010      	beq.n	800aade <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aac0:	4a17      	ldr	r2, [pc, #92]	; (800ab20 <HAL_SPI_IRQHandler+0x1f8>)
 800aac2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aac8:	0018      	movs	r0, r3
 800aaca:	f7fb fc43 	bl	8006354 <HAL_DMA_Abort_IT>
 800aace:	1e03      	subs	r3, r0, #0
 800aad0:	d005      	beq.n	800aade <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aad6:	2240      	movs	r2, #64	; 0x40
 800aad8:	431a      	orrs	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d016      	beq.n	800ab14 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaea:	4a0d      	ldr	r2, [pc, #52]	; (800ab20 <HAL_SPI_IRQHandler+0x1f8>)
 800aaec:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf2:	0018      	movs	r0, r3
 800aaf4:	f7fb fc2e 	bl	8006354 <HAL_DMA_Abort_IT>
 800aaf8:	1e03      	subs	r3, r0, #0
 800aafa:	d00b      	beq.n	800ab14 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab00:	2240      	movs	r2, #64	; 0x40
 800ab02:	431a      	orrs	r2, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800ab08:	e004      	b.n	800ab14 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	0018      	movs	r0, r3
 800ab0e:	f000 f819 	bl	800ab44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ab12:	e000      	b.n	800ab16 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800ab14:	46c0      	nop			; (mov r8, r8)
    return;
 800ab16:	46c0      	nop			; (mov r8, r8)
  }
}
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	b008      	add	sp, #32
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	46c0      	nop			; (mov r8, r8)
 800ab20:	0800ad19 	.word	0x0800ad19

0800ab24 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ab2c:	46c0      	nop			; (mov r8, r8)
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	b002      	add	sp, #8
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ab3c:	46c0      	nop			; (mov r8, r8)
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	b002      	add	sp, #8
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ab4c:	46c0      	nop			; (mov r8, r8)
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	b002      	add	sp, #8
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab60:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab62:	f7fa ff65 	bl	8005a30 <HAL_GetTick>
 800ab66:	0003      	movs	r3, r0
 800ab68:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2220      	movs	r2, #32
 800ab72:	4013      	ands	r3, r2
 800ab74:	2b20      	cmp	r3, #32
 800ab76:	d03e      	beq.n	800abf6 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	685a      	ldr	r2, [r3, #4]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2120      	movs	r1, #32
 800ab84:	438a      	bics	r2, r1
 800ab86:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10e      	bne.n	800abae <SPI_DMAReceiveCplt+0x5a>
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	685a      	ldr	r2, [r3, #4]
 800ab94:	2382      	movs	r3, #130	; 0x82
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d108      	bne.n	800abae <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	685a      	ldr	r2, [r3, #4]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2103      	movs	r1, #3
 800aba8:	438a      	bics	r2, r1
 800abaa:	605a      	str	r2, [r3, #4]
 800abac:	e007      	b.n	800abbe <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	685a      	ldr	r2, [r3, #4]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2101      	movs	r1, #1
 800abba:	438a      	bics	r2, r1
 800abbc:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2164      	movs	r1, #100	; 0x64
 800abc4:	0018      	movs	r0, r3
 800abc6:	f000 f9e1 	bl	800af8c <SPI_EndRxTransaction>
 800abca:	1e03      	subs	r3, r0, #0
 800abcc:	d002      	beq.n	800abd4 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2220      	movs	r2, #32
 800abd2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2246      	movs	r2, #70	; 0x46
 800abd8:	2100      	movs	r1, #0
 800abda:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	225d      	movs	r2, #93	; 0x5d
 800abe0:	2101      	movs	r1, #1
 800abe2:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d004      	beq.n	800abf6 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	0018      	movs	r0, r3
 800abf0:	f7ff ffa8 	bl	800ab44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800abf4:	e003      	b.n	800abfe <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	0018      	movs	r0, r3
 800abfa:	f7f8 f9f3 	bl	8002fe4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800abfe:	46bd      	mov	sp, r7
 800ac00:	b004      	add	sp, #16
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac10:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac12:	f7fa ff0d 	bl	8005a30 <HAL_GetTick>
 800ac16:	0003      	movs	r3, r0
 800ac18:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2220      	movs	r2, #32
 800ac22:	4013      	ands	r3, r2
 800ac24:	2b20      	cmp	r3, #32
 800ac26:	d031      	beq.n	800ac8c <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2120      	movs	r1, #32
 800ac34:	438a      	bics	r2, r1
 800ac36:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2164      	movs	r1, #100	; 0x64
 800ac3e:	0018      	movs	r0, r3
 800ac40:	f000 fa02 	bl	800b048 <SPI_EndRxTxTransaction>
 800ac44:	1e03      	subs	r3, r0, #0
 800ac46:	d005      	beq.n	800ac54 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac4c:	2220      	movs	r2, #32
 800ac4e:	431a      	orrs	r2, r3
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	685a      	ldr	r2, [r3, #4]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2103      	movs	r1, #3
 800ac60:	438a      	bics	r2, r1
 800ac62:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2200      	movs	r2, #0
 800ac68:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2246      	movs	r2, #70	; 0x46
 800ac6e:	2100      	movs	r1, #0
 800ac70:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	225d      	movs	r2, #93	; 0x5d
 800ac76:	2101      	movs	r1, #1
 800ac78:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d004      	beq.n	800ac8c <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	0018      	movs	r0, r3
 800ac86:	f7ff ff5d 	bl	800ab44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ac8a:	e003      	b.n	800ac94 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	0018      	movs	r0, r3
 800ac90:	f7ff ff48 	bl	800ab24 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac94:	46bd      	mov	sp, r7
 800ac96:	b004      	add	sp, #16
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b084      	sub	sp, #16
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	0018      	movs	r0, r3
 800acac:	f7f8 f94c 	bl	8002f48 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800acb0:	46c0      	nop			; (mov r8, r8)
 800acb2:	46bd      	mov	sp, r7
 800acb4:	b004      	add	sp, #16
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	0018      	movs	r0, r3
 800acca:	f7ff ff33 	bl	800ab34 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800acce:	46c0      	nop			; (mov r8, r8)
 800acd0:	46bd      	mov	sp, r7
 800acd2:	b004      	add	sp, #16
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b084      	sub	sp, #16
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	685a      	ldr	r2, [r3, #4]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2103      	movs	r1, #3
 800acf0:	438a      	bics	r2, r1
 800acf2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acf8:	2210      	movs	r2, #16
 800acfa:	431a      	orrs	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	225d      	movs	r2, #93	; 0x5d
 800ad04:	2101      	movs	r1, #1
 800ad06:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	0018      	movs	r0, r3
 800ad0c:	f7ff ff1a 	bl	800ab44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad10:	46c0      	nop			; (mov r8, r8)
 800ad12:	46bd      	mov	sp, r7
 800ad14:	b004      	add	sp, #16
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2246      	movs	r2, #70	; 0x46
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	0018      	movs	r0, r3
 800ad38:	f7ff ff04 	bl	800ab44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad3c:	46c0      	nop			; (mov r8, r8)
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	b004      	add	sp, #16
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b088      	sub	sp, #32
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	603b      	str	r3, [r7, #0]
 800ad50:	1dfb      	adds	r3, r7, #7
 800ad52:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ad54:	f7fa fe6c 	bl	8005a30 <HAL_GetTick>
 800ad58:	0002      	movs	r2, r0
 800ad5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5c:	1a9b      	subs	r3, r3, r2
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	18d3      	adds	r3, r2, r3
 800ad62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ad64:	f7fa fe64 	bl	8005a30 <HAL_GetTick>
 800ad68:	0003      	movs	r3, r0
 800ad6a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ad6c:	4b3a      	ldr	r3, [pc, #232]	; (800ae58 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	015b      	lsls	r3, r3, #5
 800ad72:	0d1b      	lsrs	r3, r3, #20
 800ad74:	69fa      	ldr	r2, [r7, #28]
 800ad76:	4353      	muls	r3, r2
 800ad78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad7a:	e058      	b.n	800ae2e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	d055      	beq.n	800ae2e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ad82:	f7fa fe55 	bl	8005a30 <HAL_GetTick>
 800ad86:	0002      	movs	r2, r0
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	69fa      	ldr	r2, [r7, #28]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d902      	bls.n	800ad98 <SPI_WaitFlagStateUntilTimeout+0x54>
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d142      	bne.n	800ae1e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	685a      	ldr	r2, [r3, #4]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	21e0      	movs	r1, #224	; 0xe0
 800ada4:	438a      	bics	r2, r1
 800ada6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	2382      	movs	r3, #130	; 0x82
 800adae:	005b      	lsls	r3, r3, #1
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d113      	bne.n	800addc <SPI_WaitFlagStateUntilTimeout+0x98>
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	689a      	ldr	r2, [r3, #8]
 800adb8:	2380      	movs	r3, #128	; 0x80
 800adba:	021b      	lsls	r3, r3, #8
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d005      	beq.n	800adcc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	689a      	ldr	r2, [r3, #8]
 800adc4:	2380      	movs	r3, #128	; 0x80
 800adc6:	00db      	lsls	r3, r3, #3
 800adc8:	429a      	cmp	r2, r3
 800adca:	d107      	bne.n	800addc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2140      	movs	r1, #64	; 0x40
 800add8:	438a      	bics	r2, r1
 800adda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ade0:	2380      	movs	r3, #128	; 0x80
 800ade2:	019b      	lsls	r3, r3, #6
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d110      	bne.n	800ae0a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	491a      	ldr	r1, [pc, #104]	; (800ae5c <SPI_WaitFlagStateUntilTimeout+0x118>)
 800adf4:	400a      	ands	r2, r1
 800adf6:	601a      	str	r2, [r3, #0]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2180      	movs	r1, #128	; 0x80
 800ae04:	0189      	lsls	r1, r1, #6
 800ae06:	430a      	orrs	r2, r1
 800ae08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	225d      	movs	r2, #93	; 0x5d
 800ae0e:	2101      	movs	r1, #1
 800ae10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	225c      	movs	r2, #92	; 0x5c
 800ae16:	2100      	movs	r1, #0
 800ae18:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ae1a:	2303      	movs	r3, #3
 800ae1c:	e017      	b.n	800ae4e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800ae24:	2300      	movs	r3, #0
 800ae26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	4013      	ands	r3, r2
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	425a      	negs	r2, r3
 800ae3e:	4153      	adcs	r3, r2
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	001a      	movs	r2, r3
 800ae44:	1dfb      	adds	r3, r7, #7
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d197      	bne.n	800ad7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	0018      	movs	r0, r3
 800ae50:	46bd      	mov	sp, r7
 800ae52:	b008      	add	sp, #32
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	46c0      	nop			; (mov r8, r8)
 800ae58:	20000034 	.word	0x20000034
 800ae5c:	ffffdfff 	.word	0xffffdfff

0800ae60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b088      	sub	sp, #32
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ae6e:	f7fa fddf 	bl	8005a30 <HAL_GetTick>
 800ae72:	0002      	movs	r2, r0
 800ae74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae76:	1a9b      	subs	r3, r3, r2
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	18d3      	adds	r3, r2, r3
 800ae7c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ae7e:	f7fa fdd7 	bl	8005a30 <HAL_GetTick>
 800ae82:	0003      	movs	r3, r0
 800ae84:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ae86:	4b3f      	ldr	r3, [pc, #252]	; (800af84 <SPI_WaitFifoStateUntilTimeout+0x124>)
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	0013      	movs	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	189b      	adds	r3, r3, r2
 800ae90:	00da      	lsls	r2, r3, #3
 800ae92:	1ad3      	subs	r3, r2, r3
 800ae94:	0d1b      	lsrs	r3, r3, #20
 800ae96:	69fa      	ldr	r2, [r7, #28]
 800ae98:	4353      	muls	r3, r2
 800ae9a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800ae9c:	e064      	b.n	800af68 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	23c0      	movs	r3, #192	; 0xc0
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d106      	bne.n	800aeb6 <SPI_WaitFifoStateUntilTimeout+0x56>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d103      	bne.n	800aeb6 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	330c      	adds	r3, #12
 800aeb4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	d055      	beq.n	800af68 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aebc:	f7fa fdb8 	bl	8005a30 <HAL_GetTick>
 800aec0:	0002      	movs	r2, r0
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	69fa      	ldr	r2, [r7, #28]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d902      	bls.n	800aed2 <SPI_WaitFifoStateUntilTimeout+0x72>
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d142      	bne.n	800af58 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	685a      	ldr	r2, [r3, #4]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	21e0      	movs	r1, #224	; 0xe0
 800aede:	438a      	bics	r2, r1
 800aee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	2382      	movs	r3, #130	; 0x82
 800aee8:	005b      	lsls	r3, r3, #1
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d113      	bne.n	800af16 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	689a      	ldr	r2, [r3, #8]
 800aef2:	2380      	movs	r3, #128	; 0x80
 800aef4:	021b      	lsls	r3, r3, #8
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d005      	beq.n	800af06 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	689a      	ldr	r2, [r3, #8]
 800aefe:	2380      	movs	r3, #128	; 0x80
 800af00:	00db      	lsls	r3, r3, #3
 800af02:	429a      	cmp	r2, r3
 800af04:	d107      	bne.n	800af16 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2140      	movs	r1, #64	; 0x40
 800af12:	438a      	bics	r2, r1
 800af14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800af1a:	2380      	movs	r3, #128	; 0x80
 800af1c:	019b      	lsls	r3, r3, #6
 800af1e:	429a      	cmp	r2, r3
 800af20:	d110      	bne.n	800af44 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4916      	ldr	r1, [pc, #88]	; (800af88 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800af2e:	400a      	ands	r2, r1
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2180      	movs	r1, #128	; 0x80
 800af3e:	0189      	lsls	r1, r1, #6
 800af40:	430a      	orrs	r2, r1
 800af42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	225d      	movs	r2, #93	; 0x5d
 800af48:	2101      	movs	r1, #1
 800af4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	225c      	movs	r2, #92	; 0x5c
 800af50:	2100      	movs	r1, #0
 800af52:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800af54:	2303      	movs	r3, #3
 800af56:	e010      	b.n	800af7a <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d101      	bne.n	800af62 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800af5e:	2300      	movs	r3, #0
 800af60:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	3b01      	subs	r3, #1
 800af66:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	4013      	ands	r3, r2
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	429a      	cmp	r2, r3
 800af76:	d192      	bne.n	800ae9e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	0018      	movs	r0, r3
 800af7c:	46bd      	mov	sp, r7
 800af7e:	b008      	add	sp, #32
 800af80:	bd80      	pop	{r7, pc}
 800af82:	46c0      	nop			; (mov r8, r8)
 800af84:	20000034 	.word	0x20000034
 800af88:	ffffdfff 	.word	0xffffdfff

0800af8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af02      	add	r7, sp, #8
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	685a      	ldr	r2, [r3, #4]
 800af9c:	2382      	movs	r3, #130	; 0x82
 800af9e:	005b      	lsls	r3, r3, #1
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d113      	bne.n	800afcc <SPI_EndRxTransaction+0x40>
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	689a      	ldr	r2, [r3, #8]
 800afa8:	2380      	movs	r3, #128	; 0x80
 800afaa:	021b      	lsls	r3, r3, #8
 800afac:	429a      	cmp	r2, r3
 800afae:	d005      	beq.n	800afbc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	689a      	ldr	r2, [r3, #8]
 800afb4:	2380      	movs	r3, #128	; 0x80
 800afb6:	00db      	lsls	r3, r3, #3
 800afb8:	429a      	cmp	r2, r3
 800afba:	d107      	bne.n	800afcc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2140      	movs	r1, #64	; 0x40
 800afc8:	438a      	bics	r2, r1
 800afca:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800afcc:	68ba      	ldr	r2, [r7, #8]
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	0013      	movs	r3, r2
 800afd6:	2200      	movs	r2, #0
 800afd8:	2180      	movs	r1, #128	; 0x80
 800afda:	f7ff feb3 	bl	800ad44 <SPI_WaitFlagStateUntilTimeout>
 800afde:	1e03      	subs	r3, r0, #0
 800afe0:	d007      	beq.n	800aff2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afe6:	2220      	movs	r2, #32
 800afe8:	431a      	orrs	r2, r3
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800afee:	2303      	movs	r3, #3
 800aff0:	e026      	b.n	800b040 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	685a      	ldr	r2, [r3, #4]
 800aff6:	2382      	movs	r3, #130	; 0x82
 800aff8:	005b      	lsls	r3, r3, #1
 800affa:	429a      	cmp	r2, r3
 800affc:	d11f      	bne.n	800b03e <SPI_EndRxTransaction+0xb2>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	689a      	ldr	r2, [r3, #8]
 800b002:	2380      	movs	r3, #128	; 0x80
 800b004:	021b      	lsls	r3, r3, #8
 800b006:	429a      	cmp	r2, r3
 800b008:	d005      	beq.n	800b016 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	689a      	ldr	r2, [r3, #8]
 800b00e:	2380      	movs	r3, #128	; 0x80
 800b010:	00db      	lsls	r3, r3, #3
 800b012:	429a      	cmp	r2, r3
 800b014:	d113      	bne.n	800b03e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b016:	68ba      	ldr	r2, [r7, #8]
 800b018:	23c0      	movs	r3, #192	; 0xc0
 800b01a:	00d9      	lsls	r1, r3, #3
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	9300      	str	r3, [sp, #0]
 800b022:	0013      	movs	r3, r2
 800b024:	2200      	movs	r2, #0
 800b026:	f7ff ff1b 	bl	800ae60 <SPI_WaitFifoStateUntilTimeout>
 800b02a:	1e03      	subs	r3, r0, #0
 800b02c:	d007      	beq.n	800b03e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b032:	2220      	movs	r2, #32
 800b034:	431a      	orrs	r2, r3
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b03a:	2303      	movs	r3, #3
 800b03c:	e000      	b.n	800b040 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	0018      	movs	r0, r3
 800b042:	46bd      	mov	sp, r7
 800b044:	b004      	add	sp, #16
 800b046:	bd80      	pop	{r7, pc}

0800b048 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af02      	add	r7, sp, #8
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b054:	68ba      	ldr	r2, [r7, #8]
 800b056:	23c0      	movs	r3, #192	; 0xc0
 800b058:	0159      	lsls	r1, r3, #5
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	9300      	str	r3, [sp, #0]
 800b060:	0013      	movs	r3, r2
 800b062:	2200      	movs	r2, #0
 800b064:	f7ff fefc 	bl	800ae60 <SPI_WaitFifoStateUntilTimeout>
 800b068:	1e03      	subs	r3, r0, #0
 800b06a:	d007      	beq.n	800b07c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b070:	2220      	movs	r2, #32
 800b072:	431a      	orrs	r2, r3
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b078:	2303      	movs	r3, #3
 800b07a:	e027      	b.n	800b0cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	0013      	movs	r3, r2
 800b086:	2200      	movs	r2, #0
 800b088:	2180      	movs	r1, #128	; 0x80
 800b08a:	f7ff fe5b 	bl	800ad44 <SPI_WaitFlagStateUntilTimeout>
 800b08e:	1e03      	subs	r3, r0, #0
 800b090:	d007      	beq.n	800b0a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b096:	2220      	movs	r2, #32
 800b098:	431a      	orrs	r2, r3
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e014      	b.n	800b0cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b0a2:	68ba      	ldr	r2, [r7, #8]
 800b0a4:	23c0      	movs	r3, #192	; 0xc0
 800b0a6:	00d9      	lsls	r1, r3, #3
 800b0a8:	68f8      	ldr	r0, [r7, #12]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	0013      	movs	r3, r2
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f7ff fed5 	bl	800ae60 <SPI_WaitFifoStateUntilTimeout>
 800b0b6:	1e03      	subs	r3, r0, #0
 800b0b8:	d007      	beq.n	800b0ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0be:	2220      	movs	r2, #32
 800b0c0:	431a      	orrs	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b0c6:	2303      	movs	r3, #3
 800b0c8:	e000      	b.n	800b0cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	0018      	movs	r0, r3
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	b004      	add	sp, #16
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d101      	bne.n	800b0e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e04a      	b.n	800b17c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	223d      	movs	r2, #61	; 0x3d
 800b0ea:	5c9b      	ldrb	r3, [r3, r2]
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d107      	bne.n	800b102 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	223c      	movs	r2, #60	; 0x3c
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	0018      	movs	r0, r3
 800b0fe:	f7fa f9bf 	bl	8005480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	223d      	movs	r2, #61	; 0x3d
 800b106:	2102      	movs	r1, #2
 800b108:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	3304      	adds	r3, #4
 800b112:	0019      	movs	r1, r3
 800b114:	0010      	movs	r0, r2
 800b116:	f000 fb41 	bl	800b79c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2248      	movs	r2, #72	; 0x48
 800b11e:	2101      	movs	r1, #1
 800b120:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	223e      	movs	r2, #62	; 0x3e
 800b126:	2101      	movs	r1, #1
 800b128:	5499      	strb	r1, [r3, r2]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	223f      	movs	r2, #63	; 0x3f
 800b12e:	2101      	movs	r1, #1
 800b130:	5499      	strb	r1, [r3, r2]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2240      	movs	r2, #64	; 0x40
 800b136:	2101      	movs	r1, #1
 800b138:	5499      	strb	r1, [r3, r2]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2241      	movs	r2, #65	; 0x41
 800b13e:	2101      	movs	r1, #1
 800b140:	5499      	strb	r1, [r3, r2]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2242      	movs	r2, #66	; 0x42
 800b146:	2101      	movs	r1, #1
 800b148:	5499      	strb	r1, [r3, r2]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2243      	movs	r2, #67	; 0x43
 800b14e:	2101      	movs	r1, #1
 800b150:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2244      	movs	r2, #68	; 0x44
 800b156:	2101      	movs	r1, #1
 800b158:	5499      	strb	r1, [r3, r2]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2245      	movs	r2, #69	; 0x45
 800b15e:	2101      	movs	r1, #1
 800b160:	5499      	strb	r1, [r3, r2]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2246      	movs	r2, #70	; 0x46
 800b166:	2101      	movs	r1, #1
 800b168:	5499      	strb	r1, [r3, r2]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2247      	movs	r2, #71	; 0x47
 800b16e:	2101      	movs	r1, #1
 800b170:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	223d      	movs	r2, #61	; 0x3d
 800b176:	2101      	movs	r1, #1
 800b178:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	0018      	movs	r0, r3
 800b17e:	46bd      	mov	sp, r7
 800b180:	b002      	add	sp, #8
 800b182:	bd80      	pop	{r7, pc}

0800b184 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d101      	bne.n	800b196 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	e04a      	b.n	800b22c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	223d      	movs	r2, #61	; 0x3d
 800b19a:	5c9b      	ldrb	r3, [r3, r2]
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d107      	bne.n	800b1b2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	223c      	movs	r2, #60	; 0x3c
 800b1a6:	2100      	movs	r1, #0
 800b1a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	0018      	movs	r0, r3
 800b1ae:	f000 f841 	bl	800b234 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	223d      	movs	r2, #61	; 0x3d
 800b1b6:	2102      	movs	r1, #2
 800b1b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	0019      	movs	r1, r3
 800b1c4:	0010      	movs	r0, r2
 800b1c6:	f000 fae9 	bl	800b79c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2248      	movs	r2, #72	; 0x48
 800b1ce:	2101      	movs	r1, #1
 800b1d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	223e      	movs	r2, #62	; 0x3e
 800b1d6:	2101      	movs	r1, #1
 800b1d8:	5499      	strb	r1, [r3, r2]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	223f      	movs	r2, #63	; 0x3f
 800b1de:	2101      	movs	r1, #1
 800b1e0:	5499      	strb	r1, [r3, r2]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2240      	movs	r2, #64	; 0x40
 800b1e6:	2101      	movs	r1, #1
 800b1e8:	5499      	strb	r1, [r3, r2]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2241      	movs	r2, #65	; 0x41
 800b1ee:	2101      	movs	r1, #1
 800b1f0:	5499      	strb	r1, [r3, r2]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2242      	movs	r2, #66	; 0x42
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	5499      	strb	r1, [r3, r2]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2243      	movs	r2, #67	; 0x43
 800b1fe:	2101      	movs	r1, #1
 800b200:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2244      	movs	r2, #68	; 0x44
 800b206:	2101      	movs	r1, #1
 800b208:	5499      	strb	r1, [r3, r2]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2245      	movs	r2, #69	; 0x45
 800b20e:	2101      	movs	r1, #1
 800b210:	5499      	strb	r1, [r3, r2]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2246      	movs	r2, #70	; 0x46
 800b216:	2101      	movs	r1, #1
 800b218:	5499      	strb	r1, [r3, r2]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2247      	movs	r2, #71	; 0x47
 800b21e:	2101      	movs	r1, #1
 800b220:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	223d      	movs	r2, #61	; 0x3d
 800b226:	2101      	movs	r1, #1
 800b228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	0018      	movs	r0, r3
 800b22e:	46bd      	mov	sp, r7
 800b230:	b002      	add	sp, #8
 800b232:	bd80      	pop	{r7, pc}

0800b234 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b23c:	46c0      	nop			; (mov r8, r8)
 800b23e:	46bd      	mov	sp, r7
 800b240:	b002      	add	sp, #8
 800b242:	bd80      	pop	{r7, pc}

0800b244 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d108      	bne.n	800b266 <HAL_TIM_PWM_Start+0x22>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	223e      	movs	r2, #62	; 0x3e
 800b258:	5c9b      	ldrb	r3, [r3, r2]
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	3b01      	subs	r3, #1
 800b25e:	1e5a      	subs	r2, r3, #1
 800b260:	4193      	sbcs	r3, r2
 800b262:	b2db      	uxtb	r3, r3
 800b264:	e037      	b.n	800b2d6 <HAL_TIM_PWM_Start+0x92>
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	2b04      	cmp	r3, #4
 800b26a:	d108      	bne.n	800b27e <HAL_TIM_PWM_Start+0x3a>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	223f      	movs	r2, #63	; 0x3f
 800b270:	5c9b      	ldrb	r3, [r3, r2]
 800b272:	b2db      	uxtb	r3, r3
 800b274:	3b01      	subs	r3, #1
 800b276:	1e5a      	subs	r2, r3, #1
 800b278:	4193      	sbcs	r3, r2
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	e02b      	b.n	800b2d6 <HAL_TIM_PWM_Start+0x92>
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	2b08      	cmp	r3, #8
 800b282:	d108      	bne.n	800b296 <HAL_TIM_PWM_Start+0x52>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2240      	movs	r2, #64	; 0x40
 800b288:	5c9b      	ldrb	r3, [r3, r2]
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	3b01      	subs	r3, #1
 800b28e:	1e5a      	subs	r2, r3, #1
 800b290:	4193      	sbcs	r3, r2
 800b292:	b2db      	uxtb	r3, r3
 800b294:	e01f      	b.n	800b2d6 <HAL_TIM_PWM_Start+0x92>
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	2b0c      	cmp	r3, #12
 800b29a:	d108      	bne.n	800b2ae <HAL_TIM_PWM_Start+0x6a>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2241      	movs	r2, #65	; 0x41
 800b2a0:	5c9b      	ldrb	r3, [r3, r2]
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	1e5a      	subs	r2, r3, #1
 800b2a8:	4193      	sbcs	r3, r2
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	e013      	b.n	800b2d6 <HAL_TIM_PWM_Start+0x92>
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	2b10      	cmp	r3, #16
 800b2b2:	d108      	bne.n	800b2c6 <HAL_TIM_PWM_Start+0x82>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2242      	movs	r2, #66	; 0x42
 800b2b8:	5c9b      	ldrb	r3, [r3, r2]
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	1e5a      	subs	r2, r3, #1
 800b2c0:	4193      	sbcs	r3, r2
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	e007      	b.n	800b2d6 <HAL_TIM_PWM_Start+0x92>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2243      	movs	r2, #67	; 0x43
 800b2ca:	5c9b      	ldrb	r3, [r3, r2]
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	1e5a      	subs	r2, r3, #1
 800b2d2:	4193      	sbcs	r3, r2
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e08b      	b.n	800b3f6 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d104      	bne.n	800b2ee <HAL_TIM_PWM_Start+0xaa>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	223e      	movs	r2, #62	; 0x3e
 800b2e8:	2102      	movs	r1, #2
 800b2ea:	5499      	strb	r1, [r3, r2]
 800b2ec:	e023      	b.n	800b336 <HAL_TIM_PWM_Start+0xf2>
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	2b04      	cmp	r3, #4
 800b2f2:	d104      	bne.n	800b2fe <HAL_TIM_PWM_Start+0xba>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	223f      	movs	r2, #63	; 0x3f
 800b2f8:	2102      	movs	r1, #2
 800b2fa:	5499      	strb	r1, [r3, r2]
 800b2fc:	e01b      	b.n	800b336 <HAL_TIM_PWM_Start+0xf2>
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2b08      	cmp	r3, #8
 800b302:	d104      	bne.n	800b30e <HAL_TIM_PWM_Start+0xca>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2240      	movs	r2, #64	; 0x40
 800b308:	2102      	movs	r1, #2
 800b30a:	5499      	strb	r1, [r3, r2]
 800b30c:	e013      	b.n	800b336 <HAL_TIM_PWM_Start+0xf2>
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	2b0c      	cmp	r3, #12
 800b312:	d104      	bne.n	800b31e <HAL_TIM_PWM_Start+0xda>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2241      	movs	r2, #65	; 0x41
 800b318:	2102      	movs	r1, #2
 800b31a:	5499      	strb	r1, [r3, r2]
 800b31c:	e00b      	b.n	800b336 <HAL_TIM_PWM_Start+0xf2>
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	2b10      	cmp	r3, #16
 800b322:	d104      	bne.n	800b32e <HAL_TIM_PWM_Start+0xea>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2242      	movs	r2, #66	; 0x42
 800b328:	2102      	movs	r1, #2
 800b32a:	5499      	strb	r1, [r3, r2]
 800b32c:	e003      	b.n	800b336 <HAL_TIM_PWM_Start+0xf2>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2243      	movs	r2, #67	; 0x43
 800b332:	2102      	movs	r1, #2
 800b334:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	2201      	movs	r2, #1
 800b33e:	0018      	movs	r0, r3
 800b340:	f000 fe0c 	bl	800bf5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a2d      	ldr	r2, [pc, #180]	; (800b400 <HAL_TIM_PWM_Start+0x1bc>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d00e      	beq.n	800b36c <HAL_TIM_PWM_Start+0x128>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a2c      	ldr	r2, [pc, #176]	; (800b404 <HAL_TIM_PWM_Start+0x1c0>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d009      	beq.n	800b36c <HAL_TIM_PWM_Start+0x128>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a2a      	ldr	r2, [pc, #168]	; (800b408 <HAL_TIM_PWM_Start+0x1c4>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d004      	beq.n	800b36c <HAL_TIM_PWM_Start+0x128>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a29      	ldr	r2, [pc, #164]	; (800b40c <HAL_TIM_PWM_Start+0x1c8>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d101      	bne.n	800b370 <HAL_TIM_PWM_Start+0x12c>
 800b36c:	2301      	movs	r3, #1
 800b36e:	e000      	b.n	800b372 <HAL_TIM_PWM_Start+0x12e>
 800b370:	2300      	movs	r3, #0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d008      	beq.n	800b388 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2180      	movs	r1, #128	; 0x80
 800b382:	0209      	lsls	r1, r1, #8
 800b384:	430a      	orrs	r2, r1
 800b386:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a1c      	ldr	r2, [pc, #112]	; (800b400 <HAL_TIM_PWM_Start+0x1bc>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d00f      	beq.n	800b3b2 <HAL_TIM_PWM_Start+0x16e>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	2380      	movs	r3, #128	; 0x80
 800b398:	05db      	lsls	r3, r3, #23
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d009      	beq.n	800b3b2 <HAL_TIM_PWM_Start+0x16e>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a1b      	ldr	r2, [pc, #108]	; (800b410 <HAL_TIM_PWM_Start+0x1cc>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d004      	beq.n	800b3b2 <HAL_TIM_PWM_Start+0x16e>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a15      	ldr	r2, [pc, #84]	; (800b404 <HAL_TIM_PWM_Start+0x1c0>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d116      	bne.n	800b3e0 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	4a16      	ldr	r2, [pc, #88]	; (800b414 <HAL_TIM_PWM_Start+0x1d0>)
 800b3ba:	4013      	ands	r3, r2
 800b3bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b06      	cmp	r3, #6
 800b3c2:	d016      	beq.n	800b3f2 <HAL_TIM_PWM_Start+0x1ae>
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	2380      	movs	r3, #128	; 0x80
 800b3c8:	025b      	lsls	r3, r3, #9
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d011      	beq.n	800b3f2 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	2101      	movs	r1, #1
 800b3da:	430a      	orrs	r2, r1
 800b3dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3de:	e008      	b.n	800b3f2 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2101      	movs	r1, #1
 800b3ec:	430a      	orrs	r2, r1
 800b3ee:	601a      	str	r2, [r3, #0]
 800b3f0:	e000      	b.n	800b3f4 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3f2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	0018      	movs	r0, r3
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	b004      	add	sp, #16
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	46c0      	nop			; (mov r8, r8)
 800b400:	40012c00 	.word	0x40012c00
 800b404:	40014000 	.word	0x40014000
 800b408:	40014400 	.word	0x40014400
 800b40c:	40014800 	.word	0x40014800
 800b410:	40000400 	.word	0x40000400
 800b414:	00010007 	.word	0x00010007

0800b418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	223c      	movs	r2, #60	; 0x3c
 800b428:	5c9b      	ldrb	r3, [r3, r2]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d101      	bne.n	800b432 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b42e:	2302      	movs	r3, #2
 800b430:	e0df      	b.n	800b5f2 <HAL_TIM_PWM_ConfigChannel+0x1da>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	223c      	movs	r2, #60	; 0x3c
 800b436:	2101      	movs	r1, #1
 800b438:	5499      	strb	r1, [r3, r2]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2b14      	cmp	r3, #20
 800b43e:	d900      	bls.n	800b442 <HAL_TIM_PWM_ConfigChannel+0x2a>
 800b440:	e0d1      	b.n	800b5e6 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	009a      	lsls	r2, r3, #2
 800b446:	4b6d      	ldr	r3, [pc, #436]	; (800b5fc <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800b448:	18d3      	adds	r3, r2, r3
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	68ba      	ldr	r2, [r7, #8]
 800b454:	0011      	movs	r1, r2
 800b456:	0018      	movs	r0, r3
 800b458:	f000 fa20 	bl	800b89c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	699a      	ldr	r2, [r3, #24]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2108      	movs	r1, #8
 800b468:	430a      	orrs	r2, r1
 800b46a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	699a      	ldr	r2, [r3, #24]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2104      	movs	r1, #4
 800b478:	438a      	bics	r2, r1
 800b47a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	6999      	ldr	r1, [r3, #24]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	691a      	ldr	r2, [r3, #16]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	430a      	orrs	r2, r1
 800b48c:	619a      	str	r2, [r3, #24]
      break;
 800b48e:	e0ab      	b.n	800b5e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	0011      	movs	r1, r2
 800b498:	0018      	movs	r0, r3
 800b49a:	f000 fa89 	bl	800b9b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	699a      	ldr	r2, [r3, #24]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2180      	movs	r1, #128	; 0x80
 800b4aa:	0109      	lsls	r1, r1, #4
 800b4ac:	430a      	orrs	r2, r1
 800b4ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	699a      	ldr	r2, [r3, #24]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4951      	ldr	r1, [pc, #324]	; (800b600 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800b4bc:	400a      	ands	r2, r1
 800b4be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6999      	ldr	r1, [r3, #24]
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	021a      	lsls	r2, r3, #8
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	619a      	str	r2, [r3, #24]
      break;
 800b4d4:	e088      	b.n	800b5e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	0011      	movs	r1, r2
 800b4de:	0018      	movs	r0, r3
 800b4e0:	f000 faea 	bl	800bab8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	69da      	ldr	r2, [r3, #28]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2108      	movs	r1, #8
 800b4f0:	430a      	orrs	r2, r1
 800b4f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	69da      	ldr	r2, [r3, #28]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2104      	movs	r1, #4
 800b500:	438a      	bics	r2, r1
 800b502:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	69d9      	ldr	r1, [r3, #28]
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	691a      	ldr	r2, [r3, #16]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	430a      	orrs	r2, r1
 800b514:	61da      	str	r2, [r3, #28]
      break;
 800b516:	e067      	b.n	800b5e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	0011      	movs	r1, r2
 800b520:	0018      	movs	r0, r3
 800b522:	f000 fb51 	bl	800bbc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	69da      	ldr	r2, [r3, #28]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2180      	movs	r1, #128	; 0x80
 800b532:	0109      	lsls	r1, r1, #4
 800b534:	430a      	orrs	r2, r1
 800b536:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	69da      	ldr	r2, [r3, #28]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	492f      	ldr	r1, [pc, #188]	; (800b600 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800b544:	400a      	ands	r2, r1
 800b546:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	69d9      	ldr	r1, [r3, #28]
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	021a      	lsls	r2, r3, #8
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	430a      	orrs	r2, r1
 800b55a:	61da      	str	r2, [r3, #28]
      break;
 800b55c:	e044      	b.n	800b5e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68ba      	ldr	r2, [r7, #8]
 800b564:	0011      	movs	r1, r2
 800b566:	0018      	movs	r0, r3
 800b568:	f000 fb98 	bl	800bc9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2108      	movs	r1, #8
 800b578:	430a      	orrs	r2, r1
 800b57a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2104      	movs	r1, #4
 800b588:	438a      	bics	r2, r1
 800b58a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	691a      	ldr	r2, [r3, #16]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	430a      	orrs	r2, r1
 800b59c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b59e:	e023      	b.n	800b5e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68ba      	ldr	r2, [r7, #8]
 800b5a6:	0011      	movs	r1, r2
 800b5a8:	0018      	movs	r0, r3
 800b5aa:	f000 fbd7 	bl	800bd5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2180      	movs	r1, #128	; 0x80
 800b5ba:	0109      	lsls	r1, r1, #4
 800b5bc:	430a      	orrs	r2, r1
 800b5be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	490d      	ldr	r1, [pc, #52]	; (800b600 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800b5cc:	400a      	ands	r2, r1
 800b5ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	021a      	lsls	r2, r3, #8
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	430a      	orrs	r2, r1
 800b5e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b5e4:	e000      	b.n	800b5e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800b5e6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	223c      	movs	r2, #60	; 0x3c
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	0018      	movs	r0, r3
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	b004      	add	sp, #16
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	46c0      	nop			; (mov r8, r8)
 800b5fc:	08011c1c 	.word	0x08011c1c
 800b600:	fffffbff 	.word	0xfffffbff

0800b604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	223c      	movs	r2, #60	; 0x3c
 800b612:	5c9b      	ldrb	r3, [r3, r2]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d101      	bne.n	800b61c <HAL_TIM_ConfigClockSource+0x18>
 800b618:	2302      	movs	r3, #2
 800b61a:	e0b7      	b.n	800b78c <HAL_TIM_ConfigClockSource+0x188>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	223c      	movs	r2, #60	; 0x3c
 800b620:	2101      	movs	r1, #1
 800b622:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	223d      	movs	r2, #61	; 0x3d
 800b628:	2102      	movs	r1, #2
 800b62a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	4a57      	ldr	r2, [pc, #348]	; (800b794 <HAL_TIM_ConfigClockSource+0x190>)
 800b638:	4013      	ands	r3, r2
 800b63a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	4a56      	ldr	r2, [pc, #344]	; (800b798 <HAL_TIM_ConfigClockSource+0x194>)
 800b640:	4013      	ands	r3, r2
 800b642:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2280      	movs	r2, #128	; 0x80
 800b652:	0192      	lsls	r2, r2, #6
 800b654:	4293      	cmp	r3, r2
 800b656:	d040      	beq.n	800b6da <HAL_TIM_ConfigClockSource+0xd6>
 800b658:	2280      	movs	r2, #128	; 0x80
 800b65a:	0192      	lsls	r2, r2, #6
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d900      	bls.n	800b662 <HAL_TIM_ConfigClockSource+0x5e>
 800b660:	e088      	b.n	800b774 <HAL_TIM_ConfigClockSource+0x170>
 800b662:	2280      	movs	r2, #128	; 0x80
 800b664:	0152      	lsls	r2, r2, #5
 800b666:	4293      	cmp	r3, r2
 800b668:	d100      	bne.n	800b66c <HAL_TIM_ConfigClockSource+0x68>
 800b66a:	e085      	b.n	800b778 <HAL_TIM_ConfigClockSource+0x174>
 800b66c:	2280      	movs	r2, #128	; 0x80
 800b66e:	0152      	lsls	r2, r2, #5
 800b670:	4293      	cmp	r3, r2
 800b672:	d900      	bls.n	800b676 <HAL_TIM_ConfigClockSource+0x72>
 800b674:	e07e      	b.n	800b774 <HAL_TIM_ConfigClockSource+0x170>
 800b676:	2b70      	cmp	r3, #112	; 0x70
 800b678:	d018      	beq.n	800b6ac <HAL_TIM_ConfigClockSource+0xa8>
 800b67a:	d900      	bls.n	800b67e <HAL_TIM_ConfigClockSource+0x7a>
 800b67c:	e07a      	b.n	800b774 <HAL_TIM_ConfigClockSource+0x170>
 800b67e:	2b60      	cmp	r3, #96	; 0x60
 800b680:	d04f      	beq.n	800b722 <HAL_TIM_ConfigClockSource+0x11e>
 800b682:	d900      	bls.n	800b686 <HAL_TIM_ConfigClockSource+0x82>
 800b684:	e076      	b.n	800b774 <HAL_TIM_ConfigClockSource+0x170>
 800b686:	2b50      	cmp	r3, #80	; 0x50
 800b688:	d03b      	beq.n	800b702 <HAL_TIM_ConfigClockSource+0xfe>
 800b68a:	d900      	bls.n	800b68e <HAL_TIM_ConfigClockSource+0x8a>
 800b68c:	e072      	b.n	800b774 <HAL_TIM_ConfigClockSource+0x170>
 800b68e:	2b40      	cmp	r3, #64	; 0x40
 800b690:	d057      	beq.n	800b742 <HAL_TIM_ConfigClockSource+0x13e>
 800b692:	d900      	bls.n	800b696 <HAL_TIM_ConfigClockSource+0x92>
 800b694:	e06e      	b.n	800b774 <HAL_TIM_ConfigClockSource+0x170>
 800b696:	2b30      	cmp	r3, #48	; 0x30
 800b698:	d063      	beq.n	800b762 <HAL_TIM_ConfigClockSource+0x15e>
 800b69a:	d86b      	bhi.n	800b774 <HAL_TIM_ConfigClockSource+0x170>
 800b69c:	2b20      	cmp	r3, #32
 800b69e:	d060      	beq.n	800b762 <HAL_TIM_ConfigClockSource+0x15e>
 800b6a0:	d868      	bhi.n	800b774 <HAL_TIM_ConfigClockSource+0x170>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d05d      	beq.n	800b762 <HAL_TIM_ConfigClockSource+0x15e>
 800b6a6:	2b10      	cmp	r3, #16
 800b6a8:	d05b      	beq.n	800b762 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800b6aa:	e063      	b.n	800b774 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6818      	ldr	r0, [r3, #0]
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	6899      	ldr	r1, [r3, #8]
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	685a      	ldr	r2, [r3, #4]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	f000 fc2e 	bl	800bf1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2277      	movs	r2, #119	; 0x77
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	609a      	str	r2, [r3, #8]
      break;
 800b6d8:	e04f      	b.n	800b77a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6818      	ldr	r0, [r3, #0]
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	6899      	ldr	r1, [r3, #8]
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	685a      	ldr	r2, [r3, #4]
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	f000 fc17 	bl	800bf1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	689a      	ldr	r2, [r3, #8]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2180      	movs	r1, #128	; 0x80
 800b6fa:	01c9      	lsls	r1, r1, #7
 800b6fc:	430a      	orrs	r2, r1
 800b6fe:	609a      	str	r2, [r3, #8]
      break;
 800b700:	e03b      	b.n	800b77a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6818      	ldr	r0, [r3, #0]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	6859      	ldr	r1, [r3, #4]
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	001a      	movs	r2, r3
 800b710:	f000 fb88 	bl	800be24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2150      	movs	r1, #80	; 0x50
 800b71a:	0018      	movs	r0, r3
 800b71c:	f000 fbe2 	bl	800bee4 <TIM_ITRx_SetConfig>
      break;
 800b720:	e02b      	b.n	800b77a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6818      	ldr	r0, [r3, #0]
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	6859      	ldr	r1, [r3, #4]
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	001a      	movs	r2, r3
 800b730:	f000 fba6 	bl	800be80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2160      	movs	r1, #96	; 0x60
 800b73a:	0018      	movs	r0, r3
 800b73c:	f000 fbd2 	bl	800bee4 <TIM_ITRx_SetConfig>
      break;
 800b740:	e01b      	b.n	800b77a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6818      	ldr	r0, [r3, #0]
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	6859      	ldr	r1, [r3, #4]
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	001a      	movs	r2, r3
 800b750:	f000 fb68 	bl	800be24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2140      	movs	r1, #64	; 0x40
 800b75a:	0018      	movs	r0, r3
 800b75c:	f000 fbc2 	bl	800bee4 <TIM_ITRx_SetConfig>
      break;
 800b760:	e00b      	b.n	800b77a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681a      	ldr	r2, [r3, #0]
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	0019      	movs	r1, r3
 800b76c:	0010      	movs	r0, r2
 800b76e:	f000 fbb9 	bl	800bee4 <TIM_ITRx_SetConfig>
        break;
 800b772:	e002      	b.n	800b77a <HAL_TIM_ConfigClockSource+0x176>
      break;
 800b774:	46c0      	nop			; (mov r8, r8)
 800b776:	e000      	b.n	800b77a <HAL_TIM_ConfigClockSource+0x176>
      break;
 800b778:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	223d      	movs	r2, #61	; 0x3d
 800b77e:	2101      	movs	r1, #1
 800b780:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	223c      	movs	r2, #60	; 0x3c
 800b786:	2100      	movs	r1, #0
 800b788:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	0018      	movs	r0, r3
 800b78e:	46bd      	mov	sp, r7
 800b790:	b004      	add	sp, #16
 800b792:	bd80      	pop	{r7, pc}
 800b794:	ffceff88 	.word	0xffceff88
 800b798:	ffff00ff 	.word	0xffff00ff

0800b79c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4a34      	ldr	r2, [pc, #208]	; (800b880 <TIM_Base_SetConfig+0xe4>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d008      	beq.n	800b7c6 <TIM_Base_SetConfig+0x2a>
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	2380      	movs	r3, #128	; 0x80
 800b7b8:	05db      	lsls	r3, r3, #23
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d003      	beq.n	800b7c6 <TIM_Base_SetConfig+0x2a>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4a30      	ldr	r2, [pc, #192]	; (800b884 <TIM_Base_SetConfig+0xe8>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d108      	bne.n	800b7d8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2270      	movs	r2, #112	; 0x70
 800b7ca:	4393      	bics	r3, r2
 800b7cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a29      	ldr	r2, [pc, #164]	; (800b880 <TIM_Base_SetConfig+0xe4>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d018      	beq.n	800b812 <TIM_Base_SetConfig+0x76>
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	2380      	movs	r3, #128	; 0x80
 800b7e4:	05db      	lsls	r3, r3, #23
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d013      	beq.n	800b812 <TIM_Base_SetConfig+0x76>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a25      	ldr	r2, [pc, #148]	; (800b884 <TIM_Base_SetConfig+0xe8>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d00f      	beq.n	800b812 <TIM_Base_SetConfig+0x76>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a24      	ldr	r2, [pc, #144]	; (800b888 <TIM_Base_SetConfig+0xec>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d00b      	beq.n	800b812 <TIM_Base_SetConfig+0x76>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a23      	ldr	r2, [pc, #140]	; (800b88c <TIM_Base_SetConfig+0xf0>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d007      	beq.n	800b812 <TIM_Base_SetConfig+0x76>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a22      	ldr	r2, [pc, #136]	; (800b890 <TIM_Base_SetConfig+0xf4>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d003      	beq.n	800b812 <TIM_Base_SetConfig+0x76>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a21      	ldr	r2, [pc, #132]	; (800b894 <TIM_Base_SetConfig+0xf8>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d108      	bne.n	800b824 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	4a20      	ldr	r2, [pc, #128]	; (800b898 <TIM_Base_SetConfig+0xfc>)
 800b816:	4013      	ands	r3, r2
 800b818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	4313      	orrs	r3, r2
 800b822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2280      	movs	r2, #128	; 0x80
 800b828:	4393      	bics	r3, r2
 800b82a:	001a      	movs	r2, r3
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	695b      	ldr	r3, [r3, #20]
 800b830:	4313      	orrs	r3, r2
 800b832:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	689a      	ldr	r2, [r3, #8]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4a0c      	ldr	r2, [pc, #48]	; (800b880 <TIM_Base_SetConfig+0xe4>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d00b      	beq.n	800b86a <TIM_Base_SetConfig+0xce>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	4a0d      	ldr	r2, [pc, #52]	; (800b88c <TIM_Base_SetConfig+0xf0>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d007      	beq.n	800b86a <TIM_Base_SetConfig+0xce>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4a0c      	ldr	r2, [pc, #48]	; (800b890 <TIM_Base_SetConfig+0xf4>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d003      	beq.n	800b86a <TIM_Base_SetConfig+0xce>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a0b      	ldr	r2, [pc, #44]	; (800b894 <TIM_Base_SetConfig+0xf8>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d103      	bne.n	800b872 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	691a      	ldr	r2, [r3, #16]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	615a      	str	r2, [r3, #20]
}
 800b878:	46c0      	nop			; (mov r8, r8)
 800b87a:	46bd      	mov	sp, r7
 800b87c:	b004      	add	sp, #16
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	40012c00 	.word	0x40012c00
 800b884:	40000400 	.word	0x40000400
 800b888:	40002000 	.word	0x40002000
 800b88c:	40014000 	.word	0x40014000
 800b890:	40014400 	.word	0x40014400
 800b894:	40014800 	.word	0x40014800
 800b898:	fffffcff 	.word	0xfffffcff

0800b89c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b086      	sub	sp, #24
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	4393      	bics	r3, r2
 800b8ae:	001a      	movs	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6a1b      	ldr	r3, [r3, #32]
 800b8b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	699b      	ldr	r3, [r3, #24]
 800b8c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	4a32      	ldr	r2, [pc, #200]	; (800b994 <TIM_OC1_SetConfig+0xf8>)
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2203      	movs	r2, #3
 800b8d2:	4393      	bics	r3, r2
 800b8d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	4393      	bics	r3, r2
 800b8e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	697a      	ldr	r2, [r7, #20]
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	4a28      	ldr	r2, [pc, #160]	; (800b998 <TIM_OC1_SetConfig+0xfc>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d00b      	beq.n	800b912 <TIM_OC1_SetConfig+0x76>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4a27      	ldr	r2, [pc, #156]	; (800b99c <TIM_OC1_SetConfig+0x100>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d007      	beq.n	800b912 <TIM_OC1_SetConfig+0x76>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	4a26      	ldr	r2, [pc, #152]	; (800b9a0 <TIM_OC1_SetConfig+0x104>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d003      	beq.n	800b912 <TIM_OC1_SetConfig+0x76>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4a25      	ldr	r2, [pc, #148]	; (800b9a4 <TIM_OC1_SetConfig+0x108>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d10c      	bne.n	800b92c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	2208      	movs	r2, #8
 800b916:	4393      	bics	r3, r2
 800b918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	4313      	orrs	r3, r2
 800b922:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	2204      	movs	r2, #4
 800b928:	4393      	bics	r3, r2
 800b92a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	4a1a      	ldr	r2, [pc, #104]	; (800b998 <TIM_OC1_SetConfig+0xfc>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d00b      	beq.n	800b94c <TIM_OC1_SetConfig+0xb0>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a19      	ldr	r2, [pc, #100]	; (800b99c <TIM_OC1_SetConfig+0x100>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d007      	beq.n	800b94c <TIM_OC1_SetConfig+0xb0>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a18      	ldr	r2, [pc, #96]	; (800b9a0 <TIM_OC1_SetConfig+0x104>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d003      	beq.n	800b94c <TIM_OC1_SetConfig+0xb0>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4a17      	ldr	r2, [pc, #92]	; (800b9a4 <TIM_OC1_SetConfig+0x108>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d111      	bne.n	800b970 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	4a16      	ldr	r2, [pc, #88]	; (800b9a8 <TIM_OC1_SetConfig+0x10c>)
 800b950:	4013      	ands	r3, r2
 800b952:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	4a15      	ldr	r2, [pc, #84]	; (800b9ac <TIM_OC1_SetConfig+0x110>)
 800b958:	4013      	ands	r3, r2
 800b95a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	695b      	ldr	r3, [r3, #20]
 800b960:	693a      	ldr	r2, [r7, #16]
 800b962:	4313      	orrs	r3, r2
 800b964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	699b      	ldr	r3, [r3, #24]
 800b96a:	693a      	ldr	r2, [r7, #16]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	697a      	ldr	r2, [r7, #20]
 800b988:	621a      	str	r2, [r3, #32]
}
 800b98a:	46c0      	nop			; (mov r8, r8)
 800b98c:	46bd      	mov	sp, r7
 800b98e:	b006      	add	sp, #24
 800b990:	bd80      	pop	{r7, pc}
 800b992:	46c0      	nop			; (mov r8, r8)
 800b994:	fffeff8f 	.word	0xfffeff8f
 800b998:	40012c00 	.word	0x40012c00
 800b99c:	40014000 	.word	0x40014000
 800b9a0:	40014400 	.word	0x40014400
 800b9a4:	40014800 	.word	0x40014800
 800b9a8:	fffffeff 	.word	0xfffffeff
 800b9ac:	fffffdff 	.word	0xfffffdff

0800b9b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a1b      	ldr	r3, [r3, #32]
 800b9be:	2210      	movs	r2, #16
 800b9c0:	4393      	bics	r3, r2
 800b9c2:	001a      	movs	r2, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a1b      	ldr	r3, [r3, #32]
 800b9cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	699b      	ldr	r3, [r3, #24]
 800b9d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	4a2e      	ldr	r2, [pc, #184]	; (800ba98 <TIM_OC2_SetConfig+0xe8>)
 800b9de:	4013      	ands	r3, r2
 800b9e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	4a2d      	ldr	r2, [pc, #180]	; (800ba9c <TIM_OC2_SetConfig+0xec>)
 800b9e6:	4013      	ands	r3, r2
 800b9e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	021b      	lsls	r3, r3, #8
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	4393      	bics	r3, r2
 800b9fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	011b      	lsls	r3, r3, #4
 800ba04:	697a      	ldr	r2, [r7, #20]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	4a24      	ldr	r2, [pc, #144]	; (800baa0 <TIM_OC2_SetConfig+0xf0>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d10d      	bne.n	800ba2e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	2280      	movs	r2, #128	; 0x80
 800ba16:	4393      	bics	r3, r2
 800ba18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	011b      	lsls	r3, r3, #4
 800ba20:	697a      	ldr	r2, [r7, #20]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	2240      	movs	r2, #64	; 0x40
 800ba2a:	4393      	bics	r3, r2
 800ba2c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4a1b      	ldr	r2, [pc, #108]	; (800baa0 <TIM_OC2_SetConfig+0xf0>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d00b      	beq.n	800ba4e <TIM_OC2_SetConfig+0x9e>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a1a      	ldr	r2, [pc, #104]	; (800baa4 <TIM_OC2_SetConfig+0xf4>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d007      	beq.n	800ba4e <TIM_OC2_SetConfig+0x9e>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4a19      	ldr	r2, [pc, #100]	; (800baa8 <TIM_OC2_SetConfig+0xf8>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d003      	beq.n	800ba4e <TIM_OC2_SetConfig+0x9e>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	4a18      	ldr	r2, [pc, #96]	; (800baac <TIM_OC2_SetConfig+0xfc>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d113      	bne.n	800ba76 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	4a17      	ldr	r2, [pc, #92]	; (800bab0 <TIM_OC2_SetConfig+0x100>)
 800ba52:	4013      	ands	r3, r2
 800ba54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	4a16      	ldr	r2, [pc, #88]	; (800bab4 <TIM_OC2_SetConfig+0x104>)
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	695b      	ldr	r3, [r3, #20]
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	693a      	ldr	r2, [r7, #16]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	693a      	ldr	r2, [r7, #16]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	693a      	ldr	r2, [r7, #16]
 800ba7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	685a      	ldr	r2, [r3, #4]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	697a      	ldr	r2, [r7, #20]
 800ba8e:	621a      	str	r2, [r3, #32]
}
 800ba90:	46c0      	nop			; (mov r8, r8)
 800ba92:	46bd      	mov	sp, r7
 800ba94:	b006      	add	sp, #24
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	feff8fff 	.word	0xfeff8fff
 800ba9c:	fffffcff 	.word	0xfffffcff
 800baa0:	40012c00 	.word	0x40012c00
 800baa4:	40014000 	.word	0x40014000
 800baa8:	40014400 	.word	0x40014400
 800baac:	40014800 	.word	0x40014800
 800bab0:	fffffbff 	.word	0xfffffbff
 800bab4:	fffff7ff 	.word	0xfffff7ff

0800bab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a1b      	ldr	r3, [r3, #32]
 800bac6:	4a35      	ldr	r2, [pc, #212]	; (800bb9c <TIM_OC3_SetConfig+0xe4>)
 800bac8:	401a      	ands	r2, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a1b      	ldr	r3, [r3, #32]
 800bad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	69db      	ldr	r3, [r3, #28]
 800bade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	4a2f      	ldr	r2, [pc, #188]	; (800bba0 <TIM_OC3_SetConfig+0xe8>)
 800bae4:	4013      	ands	r3, r2
 800bae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2203      	movs	r2, #3
 800baec:	4393      	bics	r3, r2
 800baee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	4313      	orrs	r3, r2
 800baf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	4a29      	ldr	r2, [pc, #164]	; (800bba4 <TIM_OC3_SetConfig+0xec>)
 800bafe:	4013      	ands	r3, r2
 800bb00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	021b      	lsls	r3, r3, #8
 800bb08:	697a      	ldr	r2, [r7, #20]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a25      	ldr	r2, [pc, #148]	; (800bba8 <TIM_OC3_SetConfig+0xf0>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d10d      	bne.n	800bb32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	4a24      	ldr	r2, [pc, #144]	; (800bbac <TIM_OC3_SetConfig+0xf4>)
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	021b      	lsls	r3, r3, #8
 800bb24:	697a      	ldr	r2, [r7, #20]
 800bb26:	4313      	orrs	r3, r2
 800bb28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	4a20      	ldr	r2, [pc, #128]	; (800bbb0 <TIM_OC3_SetConfig+0xf8>)
 800bb2e:	4013      	ands	r3, r2
 800bb30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4a1c      	ldr	r2, [pc, #112]	; (800bba8 <TIM_OC3_SetConfig+0xf0>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d00b      	beq.n	800bb52 <TIM_OC3_SetConfig+0x9a>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a1d      	ldr	r2, [pc, #116]	; (800bbb4 <TIM_OC3_SetConfig+0xfc>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d007      	beq.n	800bb52 <TIM_OC3_SetConfig+0x9a>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4a1c      	ldr	r2, [pc, #112]	; (800bbb8 <TIM_OC3_SetConfig+0x100>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d003      	beq.n	800bb52 <TIM_OC3_SetConfig+0x9a>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a1b      	ldr	r2, [pc, #108]	; (800bbbc <TIM_OC3_SetConfig+0x104>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d113      	bne.n	800bb7a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	4a1a      	ldr	r2, [pc, #104]	; (800bbc0 <TIM_OC3_SetConfig+0x108>)
 800bb56:	4013      	ands	r3, r2
 800bb58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	4a19      	ldr	r2, [pc, #100]	; (800bbc4 <TIM_OC3_SetConfig+0x10c>)
 800bb5e:	4013      	ands	r3, r2
 800bb60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	695b      	ldr	r3, [r3, #20]
 800bb66:	011b      	lsls	r3, r3, #4
 800bb68:	693a      	ldr	r2, [r7, #16]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	011b      	lsls	r3, r3, #4
 800bb74:	693a      	ldr	r2, [r7, #16]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	693a      	ldr	r2, [r7, #16]
 800bb7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	685a      	ldr	r2, [r3, #4]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	697a      	ldr	r2, [r7, #20]
 800bb92:	621a      	str	r2, [r3, #32]
}
 800bb94:	46c0      	nop			; (mov r8, r8)
 800bb96:	46bd      	mov	sp, r7
 800bb98:	b006      	add	sp, #24
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	fffffeff 	.word	0xfffffeff
 800bba0:	fffeff8f 	.word	0xfffeff8f
 800bba4:	fffffdff 	.word	0xfffffdff
 800bba8:	40012c00 	.word	0x40012c00
 800bbac:	fffff7ff 	.word	0xfffff7ff
 800bbb0:	fffffbff 	.word	0xfffffbff
 800bbb4:	40014000 	.word	0x40014000
 800bbb8:	40014400 	.word	0x40014400
 800bbbc:	40014800 	.word	0x40014800
 800bbc0:	ffffefff 	.word	0xffffefff
 800bbc4:	ffffdfff 	.word	0xffffdfff

0800bbc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	4a28      	ldr	r2, [pc, #160]	; (800bc78 <TIM_OC4_SetConfig+0xb0>)
 800bbd8:	401a      	ands	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6a1b      	ldr	r3, [r3, #32]
 800bbe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	69db      	ldr	r3, [r3, #28]
 800bbee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	4a22      	ldr	r2, [pc, #136]	; (800bc7c <TIM_OC4_SetConfig+0xb4>)
 800bbf4:	4013      	ands	r3, r2
 800bbf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	4a21      	ldr	r2, [pc, #132]	; (800bc80 <TIM_OC4_SetConfig+0xb8>)
 800bbfc:	4013      	ands	r3, r2
 800bbfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	021b      	lsls	r3, r3, #8
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	4a1d      	ldr	r2, [pc, #116]	; (800bc84 <TIM_OC4_SetConfig+0xbc>)
 800bc10:	4013      	ands	r3, r2
 800bc12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	031b      	lsls	r3, r3, #12
 800bc1a:	693a      	ldr	r2, [r7, #16]
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a19      	ldr	r2, [pc, #100]	; (800bc88 <TIM_OC4_SetConfig+0xc0>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d00b      	beq.n	800bc40 <TIM_OC4_SetConfig+0x78>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a18      	ldr	r2, [pc, #96]	; (800bc8c <TIM_OC4_SetConfig+0xc4>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d007      	beq.n	800bc40 <TIM_OC4_SetConfig+0x78>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4a17      	ldr	r2, [pc, #92]	; (800bc90 <TIM_OC4_SetConfig+0xc8>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d003      	beq.n	800bc40 <TIM_OC4_SetConfig+0x78>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a16      	ldr	r2, [pc, #88]	; (800bc94 <TIM_OC4_SetConfig+0xcc>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d109      	bne.n	800bc54 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	4a15      	ldr	r2, [pc, #84]	; (800bc98 <TIM_OC4_SetConfig+0xd0>)
 800bc44:	4013      	ands	r3, r2
 800bc46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	695b      	ldr	r3, [r3, #20]
 800bc4c:	019b      	lsls	r3, r3, #6
 800bc4e:	697a      	ldr	r2, [r7, #20]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	697a      	ldr	r2, [r7, #20]
 800bc58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	685a      	ldr	r2, [r3, #4]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	693a      	ldr	r2, [r7, #16]
 800bc6c:	621a      	str	r2, [r3, #32]
}
 800bc6e:	46c0      	nop			; (mov r8, r8)
 800bc70:	46bd      	mov	sp, r7
 800bc72:	b006      	add	sp, #24
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	46c0      	nop			; (mov r8, r8)
 800bc78:	ffffefff 	.word	0xffffefff
 800bc7c:	feff8fff 	.word	0xfeff8fff
 800bc80:	fffffcff 	.word	0xfffffcff
 800bc84:	ffffdfff 	.word	0xffffdfff
 800bc88:	40012c00 	.word	0x40012c00
 800bc8c:	40014000 	.word	0x40014000
 800bc90:	40014400 	.word	0x40014400
 800bc94:	40014800 	.word	0x40014800
 800bc98:	ffffbfff 	.word	0xffffbfff

0800bc9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	4a25      	ldr	r2, [pc, #148]	; (800bd40 <TIM_OC5_SetConfig+0xa4>)
 800bcac:	401a      	ands	r2, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	4a1f      	ldr	r2, [pc, #124]	; (800bd44 <TIM_OC5_SetConfig+0xa8>)
 800bcc8:	4013      	ands	r3, r2
 800bcca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	4a1b      	ldr	r2, [pc, #108]	; (800bd48 <TIM_OC5_SetConfig+0xac>)
 800bcda:	4013      	ands	r3, r2
 800bcdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	041b      	lsls	r3, r3, #16
 800bce4:	693a      	ldr	r2, [r7, #16]
 800bce6:	4313      	orrs	r3, r2
 800bce8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4a17      	ldr	r2, [pc, #92]	; (800bd4c <TIM_OC5_SetConfig+0xb0>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d00b      	beq.n	800bd0a <TIM_OC5_SetConfig+0x6e>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a16      	ldr	r2, [pc, #88]	; (800bd50 <TIM_OC5_SetConfig+0xb4>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d007      	beq.n	800bd0a <TIM_OC5_SetConfig+0x6e>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4a15      	ldr	r2, [pc, #84]	; (800bd54 <TIM_OC5_SetConfig+0xb8>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d003      	beq.n	800bd0a <TIM_OC5_SetConfig+0x6e>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a14      	ldr	r2, [pc, #80]	; (800bd58 <TIM_OC5_SetConfig+0xbc>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d109      	bne.n	800bd1e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	4a0c      	ldr	r2, [pc, #48]	; (800bd40 <TIM_OC5_SetConfig+0xa4>)
 800bd0e:	4013      	ands	r3, r2
 800bd10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	695b      	ldr	r3, [r3, #20]
 800bd16:	021b      	lsls	r3, r3, #8
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	697a      	ldr	r2, [r7, #20]
 800bd22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	68fa      	ldr	r2, [r7, #12]
 800bd28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	685a      	ldr	r2, [r3, #4]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	693a      	ldr	r2, [r7, #16]
 800bd36:	621a      	str	r2, [r3, #32]
}
 800bd38:	46c0      	nop			; (mov r8, r8)
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	b006      	add	sp, #24
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	fffeffff 	.word	0xfffeffff
 800bd44:	fffeff8f 	.word	0xfffeff8f
 800bd48:	fffdffff 	.word	0xfffdffff
 800bd4c:	40012c00 	.word	0x40012c00
 800bd50:	40014000 	.word	0x40014000
 800bd54:	40014400 	.word	0x40014400
 800bd58:	40014800 	.word	0x40014800

0800bd5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b086      	sub	sp, #24
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a1b      	ldr	r3, [r3, #32]
 800bd6a:	4a26      	ldr	r2, [pc, #152]	; (800be04 <TIM_OC6_SetConfig+0xa8>)
 800bd6c:	401a      	ands	r2, r3
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a1b      	ldr	r3, [r3, #32]
 800bd76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	4a20      	ldr	r2, [pc, #128]	; (800be08 <TIM_OC6_SetConfig+0xac>)
 800bd88:	4013      	ands	r3, r2
 800bd8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	021b      	lsls	r3, r3, #8
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	4a1c      	ldr	r2, [pc, #112]	; (800be0c <TIM_OC6_SetConfig+0xb0>)
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	051b      	lsls	r3, r3, #20
 800bda6:	693a      	ldr	r2, [r7, #16]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a18      	ldr	r2, [pc, #96]	; (800be10 <TIM_OC6_SetConfig+0xb4>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d00b      	beq.n	800bdcc <TIM_OC6_SetConfig+0x70>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a17      	ldr	r2, [pc, #92]	; (800be14 <TIM_OC6_SetConfig+0xb8>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d007      	beq.n	800bdcc <TIM_OC6_SetConfig+0x70>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4a16      	ldr	r2, [pc, #88]	; (800be18 <TIM_OC6_SetConfig+0xbc>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d003      	beq.n	800bdcc <TIM_OC6_SetConfig+0x70>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a15      	ldr	r2, [pc, #84]	; (800be1c <TIM_OC6_SetConfig+0xc0>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d109      	bne.n	800bde0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	4a14      	ldr	r2, [pc, #80]	; (800be20 <TIM_OC6_SetConfig+0xc4>)
 800bdd0:	4013      	ands	r3, r2
 800bdd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	695b      	ldr	r3, [r3, #20]
 800bdd8:	029b      	lsls	r3, r3, #10
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	697a      	ldr	r2, [r7, #20]
 800bde4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	685a      	ldr	r2, [r3, #4]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	693a      	ldr	r2, [r7, #16]
 800bdf8:	621a      	str	r2, [r3, #32]
}
 800bdfa:	46c0      	nop			; (mov r8, r8)
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	b006      	add	sp, #24
 800be00:	bd80      	pop	{r7, pc}
 800be02:	46c0      	nop			; (mov r8, r8)
 800be04:	ffefffff 	.word	0xffefffff
 800be08:	feff8fff 	.word	0xfeff8fff
 800be0c:	ffdfffff 	.word	0xffdfffff
 800be10:	40012c00 	.word	0x40012c00
 800be14:	40014000 	.word	0x40014000
 800be18:	40014400 	.word	0x40014400
 800be1c:	40014800 	.word	0x40014800
 800be20:	fffbffff 	.word	0xfffbffff

0800be24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b086      	sub	sp, #24
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6a1b      	ldr	r3, [r3, #32]
 800be34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	6a1b      	ldr	r3, [r3, #32]
 800be3a:	2201      	movs	r2, #1
 800be3c:	4393      	bics	r3, r2
 800be3e:	001a      	movs	r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	699b      	ldr	r3, [r3, #24]
 800be48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	22f0      	movs	r2, #240	; 0xf0
 800be4e:	4393      	bics	r3, r2
 800be50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	011b      	lsls	r3, r3, #4
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	4313      	orrs	r3, r2
 800be5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	220a      	movs	r2, #10
 800be60:	4393      	bics	r3, r2
 800be62:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be64:	697a      	ldr	r2, [r7, #20]
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	4313      	orrs	r3, r2
 800be6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	693a      	ldr	r2, [r7, #16]
 800be70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	697a      	ldr	r2, [r7, #20]
 800be76:	621a      	str	r2, [r3, #32]
}
 800be78:	46c0      	nop			; (mov r8, r8)
 800be7a:	46bd      	mov	sp, r7
 800be7c:	b006      	add	sp, #24
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6a1b      	ldr	r3, [r3, #32]
 800be90:	2210      	movs	r2, #16
 800be92:	4393      	bics	r3, r2
 800be94:	001a      	movs	r2, r3
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	699b      	ldr	r3, [r3, #24]
 800be9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6a1b      	ldr	r3, [r3, #32]
 800bea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	4a0d      	ldr	r2, [pc, #52]	; (800bee0 <TIM_TI2_ConfigInputStage+0x60>)
 800beaa:	4013      	ands	r3, r2
 800beac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	031b      	lsls	r3, r3, #12
 800beb2:	697a      	ldr	r2, [r7, #20]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	22a0      	movs	r2, #160	; 0xa0
 800bebc:	4393      	bics	r3, r2
 800bebe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	011b      	lsls	r3, r3, #4
 800bec4:	693a      	ldr	r2, [r7, #16]
 800bec6:	4313      	orrs	r3, r2
 800bec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	697a      	ldr	r2, [r7, #20]
 800bece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	693a      	ldr	r2, [r7, #16]
 800bed4:	621a      	str	r2, [r3, #32]
}
 800bed6:	46c0      	nop			; (mov r8, r8)
 800bed8:	46bd      	mov	sp, r7
 800beda:	b006      	add	sp, #24
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	46c0      	nop			; (mov r8, r8)
 800bee0:	ffff0fff 	.word	0xffff0fff

0800bee4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	4a08      	ldr	r2, [pc, #32]	; (800bf18 <TIM_ITRx_SetConfig+0x34>)
 800bef8:	4013      	ands	r3, r2
 800befa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	4313      	orrs	r3, r2
 800bf02:	2207      	movs	r2, #7
 800bf04:	4313      	orrs	r3, r2
 800bf06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	609a      	str	r2, [r3, #8]
}
 800bf0e:	46c0      	nop			; (mov r8, r8)
 800bf10:	46bd      	mov	sp, r7
 800bf12:	b004      	add	sp, #16
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	46c0      	nop			; (mov r8, r8)
 800bf18:	ffcfff8f 	.word	0xffcfff8f

0800bf1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b086      	sub	sp, #24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
 800bf28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	4a09      	ldr	r2, [pc, #36]	; (800bf58 <TIM_ETR_SetConfig+0x3c>)
 800bf34:	4013      	ands	r3, r2
 800bf36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	021a      	lsls	r2, r3, #8
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	431a      	orrs	r2, r3
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	697a      	ldr	r2, [r7, #20]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	697a      	ldr	r2, [r7, #20]
 800bf4e:	609a      	str	r2, [r3, #8]
}
 800bf50:	46c0      	nop			; (mov r8, r8)
 800bf52:	46bd      	mov	sp, r7
 800bf54:	b006      	add	sp, #24
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	ffff00ff 	.word	0xffff00ff

0800bf5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b086      	sub	sp, #24
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	221f      	movs	r2, #31
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	2201      	movs	r2, #1
 800bf70:	409a      	lsls	r2, r3
 800bf72:	0013      	movs	r3, r2
 800bf74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6a1b      	ldr	r3, [r3, #32]
 800bf7a:	697a      	ldr	r2, [r7, #20]
 800bf7c:	43d2      	mvns	r2, r2
 800bf7e:	401a      	ands	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6a1a      	ldr	r2, [r3, #32]
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	211f      	movs	r1, #31
 800bf8c:	400b      	ands	r3, r1
 800bf8e:	6879      	ldr	r1, [r7, #4]
 800bf90:	4099      	lsls	r1, r3
 800bf92:	000b      	movs	r3, r1
 800bf94:	431a      	orrs	r2, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	621a      	str	r2, [r3, #32]
}
 800bf9a:	46c0      	nop			; (mov r8, r8)
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	b006      	add	sp, #24
 800bfa0:	bd80      	pop	{r7, pc}
	...

0800bfa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	223c      	movs	r2, #60	; 0x3c
 800bfb2:	5c9b      	ldrb	r3, [r3, r2]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d101      	bne.n	800bfbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bfb8:	2302      	movs	r3, #2
 800bfba:	e055      	b.n	800c068 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	223c      	movs	r2, #60	; 0x3c
 800bfc0:	2101      	movs	r1, #1
 800bfc2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	223d      	movs	r2, #61	; 0x3d
 800bfc8:	2102      	movs	r1, #2
 800bfca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4a23      	ldr	r2, [pc, #140]	; (800c070 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d108      	bne.n	800bff8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	4a22      	ldr	r2, [pc, #136]	; (800c074 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bfea:	4013      	ands	r3, r2
 800bfec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	68fa      	ldr	r2, [r7, #12]
 800bff4:	4313      	orrs	r3, r2
 800bff6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2270      	movs	r2, #112	; 0x70
 800bffc:	4393      	bics	r3, r2
 800bffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	4313      	orrs	r3, r2
 800c008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	68fa      	ldr	r2, [r7, #12]
 800c010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a16      	ldr	r2, [pc, #88]	; (800c070 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d00f      	beq.n	800c03c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681a      	ldr	r2, [r3, #0]
 800c020:	2380      	movs	r3, #128	; 0x80
 800c022:	05db      	lsls	r3, r3, #23
 800c024:	429a      	cmp	r2, r3
 800c026:	d009      	beq.n	800c03c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a12      	ldr	r2, [pc, #72]	; (800c078 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d004      	beq.n	800c03c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a11      	ldr	r2, [pc, #68]	; (800c07c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d10c      	bne.n	800c056 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	2280      	movs	r2, #128	; 0x80
 800c040:	4393      	bics	r3, r2
 800c042:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	68ba      	ldr	r2, [r7, #8]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	68ba      	ldr	r2, [r7, #8]
 800c054:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	223d      	movs	r2, #61	; 0x3d
 800c05a:	2101      	movs	r1, #1
 800c05c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	223c      	movs	r2, #60	; 0x3c
 800c062:	2100      	movs	r1, #0
 800c064:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	0018      	movs	r0, r3
 800c06a:	46bd      	mov	sp, r7
 800c06c:	b004      	add	sp, #16
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	40012c00 	.word	0x40012c00
 800c074:	ff0fffff 	.word	0xff0fffff
 800c078:	40000400 	.word	0x40000400
 800c07c:	40014000 	.word	0x40014000

0800c080 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c08a:	2300      	movs	r3, #0
 800c08c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	223c      	movs	r2, #60	; 0x3c
 800c092:	5c9b      	ldrb	r3, [r3, r2]
 800c094:	2b01      	cmp	r3, #1
 800c096:	d101      	bne.n	800c09c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c098:	2302      	movs	r3, #2
 800c09a:	e079      	b.n	800c190 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	223c      	movs	r2, #60	; 0x3c
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	22ff      	movs	r2, #255	; 0xff
 800c0a8:	4393      	bics	r3, r2
 800c0aa:	001a      	movs	r2, r3
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	4a38      	ldr	r2, [pc, #224]	; (800c198 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800c0b8:	401a      	ands	r2, r3
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	4a35      	ldr	r2, [pc, #212]	; (800c19c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c0c6:	401a      	ands	r2, r3
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	4a33      	ldr	r2, [pc, #204]	; (800c1a0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c0d4:	401a      	ands	r2, r3
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	4a30      	ldr	r2, [pc, #192]	; (800c1a4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c0e2:	401a      	ands	r2, r3
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	4a2e      	ldr	r2, [pc, #184]	; (800c1a8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800c0f0:	401a      	ands	r2, r3
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	695b      	ldr	r3, [r3, #20]
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	4a2b      	ldr	r2, [pc, #172]	; (800c1ac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800c0fe:	401a      	ands	r2, r3
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c104:	4313      	orrs	r3, r2
 800c106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	4a29      	ldr	r2, [pc, #164]	; (800c1b0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800c10c:	401a      	ands	r2, r3
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	041b      	lsls	r3, r3, #16
 800c114:	4313      	orrs	r3, r2
 800c116:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a25      	ldr	r2, [pc, #148]	; (800c1b4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d106      	bne.n	800c130 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	4a24      	ldr	r2, [pc, #144]	; (800c1b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c126:	401a      	ands	r2, r3
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	69db      	ldr	r3, [r3, #28]
 800c12c:	4313      	orrs	r3, r2
 800c12e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a1f      	ldr	r2, [pc, #124]	; (800c1b4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d121      	bne.n	800c17e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	4a1f      	ldr	r2, [pc, #124]	; (800c1bc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c13e:	401a      	ands	r2, r3
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c144:	051b      	lsls	r3, r3, #20
 800c146:	4313      	orrs	r3, r2
 800c148:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	4a1c      	ldr	r2, [pc, #112]	; (800c1c0 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800c14e:	401a      	ands	r2, r3
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	6a1b      	ldr	r3, [r3, #32]
 800c154:	4313      	orrs	r3, r2
 800c156:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	4a1a      	ldr	r2, [pc, #104]	; (800c1c4 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800c15c:	401a      	ands	r2, r3
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c162:	4313      	orrs	r3, r2
 800c164:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a12      	ldr	r2, [pc, #72]	; (800c1b4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d106      	bne.n	800c17e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	4a15      	ldr	r2, [pc, #84]	; (800c1c8 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800c174:	401a      	ands	r2, r3
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c17a:	4313      	orrs	r3, r2
 800c17c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	68fa      	ldr	r2, [r7, #12]
 800c184:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	223c      	movs	r2, #60	; 0x3c
 800c18a:	2100      	movs	r1, #0
 800c18c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c18e:	2300      	movs	r3, #0
}
 800c190:	0018      	movs	r0, r3
 800c192:	46bd      	mov	sp, r7
 800c194:	b004      	add	sp, #16
 800c196:	bd80      	pop	{r7, pc}
 800c198:	fffffcff 	.word	0xfffffcff
 800c19c:	fffffbff 	.word	0xfffffbff
 800c1a0:	fffff7ff 	.word	0xfffff7ff
 800c1a4:	ffffefff 	.word	0xffffefff
 800c1a8:	ffffdfff 	.word	0xffffdfff
 800c1ac:	ffffbfff 	.word	0xffffbfff
 800c1b0:	fff0ffff 	.word	0xfff0ffff
 800c1b4:	40012c00 	.word	0x40012c00
 800c1b8:	efffffff 	.word	0xefffffff
 800c1bc:	ff0fffff 	.word	0xff0fffff
 800c1c0:	feffffff 	.word	0xfeffffff
 800c1c4:	fdffffff 	.word	0xfdffffff
 800c1c8:	dfffffff 	.word	0xdfffffff

0800c1cc <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b08a      	sub	sp, #40	; 0x28
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	223c      	movs	r2, #60	; 0x3c
 800c1dc:	5c9b      	ldrb	r3, [r3, r2]
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d101      	bne.n	800c1e6 <HAL_TIMEx_ConfigBreakInput+0x1a>
 800c1e2:	2302      	movs	r3, #2
 800c1e4:	e08e      	b.n	800c304 <HAL_TIMEx_ConfigBreakInput+0x138>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	223c      	movs	r2, #60	; 0x3c
 800c1ea:	2101      	movs	r1, #1
 800c1ec:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2b04      	cmp	r3, #4
 800c1f4:	d019      	beq.n	800c22a <HAL_TIMEx_ConfigBreakInput+0x5e>
 800c1f6:	d822      	bhi.n	800c23e <HAL_TIMEx_ConfigBreakInput+0x72>
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d002      	beq.n	800c202 <HAL_TIMEx_ConfigBreakInput+0x36>
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	d00a      	beq.n	800c216 <HAL_TIMEx_ConfigBreakInput+0x4a>
 800c200:	e01d      	b.n	800c23e <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800c202:	2301      	movs	r3, #1
 800c204:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800c206:	2300      	movs	r3, #0
 800c208:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800c20a:	2380      	movs	r3, #128	; 0x80
 800c20c:	009b      	lsls	r3, r3, #2
 800c20e:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800c210:	2309      	movs	r3, #9
 800c212:	61bb      	str	r3, [r7, #24]
      break;
 800c214:	e01c      	b.n	800c250 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800c216:	2302      	movs	r3, #2
 800c218:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800c21a:	2301      	movs	r3, #1
 800c21c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800c21e:	2380      	movs	r3, #128	; 0x80
 800c220:	00db      	lsls	r3, r3, #3
 800c222:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800c224:	230a      	movs	r3, #10
 800c226:	61bb      	str	r3, [r7, #24]
      break;
 800c228:	e012      	b.n	800c250 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800c22a:	2304      	movs	r3, #4
 800c22c:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800c22e:	2302      	movs	r3, #2
 800c230:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800c232:	2380      	movs	r3, #128	; 0x80
 800c234:	011b      	lsls	r3, r3, #4
 800c236:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800c238:	230b      	movs	r3, #11
 800c23a:	61bb      	str	r3, [r7, #24]
      break;
 800c23c:	e008      	b.n	800c250 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800c23e:	2300      	movs	r3, #0
 800c240:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 800c242:	2300      	movs	r3, #0
 800c244:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 800c246:	2300      	movs	r3, #0
 800c248:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800c24a:	2300      	movs	r3, #0
 800c24c:	61bb      	str	r3, [r7, #24]
      break;
 800c24e:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	2b01      	cmp	r3, #1
 800c254:	d003      	beq.n	800c25e <HAL_TIMEx_ConfigBreakInput+0x92>
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2b02      	cmp	r3, #2
 800c25a:	d027      	beq.n	800c2ac <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 800c25c:	e04d      	b.n	800c2fa <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c264:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800c266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c268:	43da      	mvns	r2, r3
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	4013      	ands	r3, r2
 800c26e:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685a      	ldr	r2, [r3, #4]
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	409a      	lsls	r2, r3
 800c278:	0013      	movs	r3, r2
 800c27a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c27c:	4013      	ands	r3, r2
 800c27e:	697a      	ldr	r2, [r7, #20]
 800c280:	4313      	orrs	r3, r2
 800c282:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800c284:	6a3b      	ldr	r3, [r7, #32]
 800c286:	43da      	mvns	r2, r3
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	4013      	ands	r3, r2
 800c28c:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	689a      	ldr	r2, [r3, #8]
 800c292:	69bb      	ldr	r3, [r7, #24]
 800c294:	409a      	lsls	r2, r3
 800c296:	0013      	movs	r3, r2
 800c298:	6a3a      	ldr	r2, [r7, #32]
 800c29a:	4013      	ands	r3, r2
 800c29c:	697a      	ldr	r2, [r7, #20]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	697a      	ldr	r2, [r7, #20]
 800c2a8:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800c2aa:	e026      	b.n	800c2fa <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2b2:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b6:	43da      	mvns	r2, r3
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	4013      	ands	r3, r2
 800c2bc:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	409a      	lsls	r2, r3
 800c2c6:	0013      	movs	r3, r2
 800c2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2ca:	4013      	ands	r3, r2
 800c2cc:	697a      	ldr	r2, [r7, #20]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800c2d2:	6a3b      	ldr	r3, [r7, #32]
 800c2d4:	43da      	mvns	r2, r3
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	4013      	ands	r3, r2
 800c2da:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	689a      	ldr	r2, [r3, #8]
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	409a      	lsls	r2, r3
 800c2e4:	0013      	movs	r3, r2
 800c2e6:	6a3a      	ldr	r2, [r7, #32]
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	697a      	ldr	r2, [r7, #20]
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	697a      	ldr	r2, [r7, #20]
 800c2f6:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800c2f8:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	223c      	movs	r2, #60	; 0x3c
 800c2fe:	2100      	movs	r1, #0
 800c300:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c302:	2300      	movs	r3, #0
}
 800c304:	0018      	movs	r0, r3
 800c306:	46bd      	mov	sp, r7
 800c308:	b00a      	add	sp, #40	; 0x28
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d101      	bne.n	800c31e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800c31a:	2301      	movs	r3, #1
 800c31c:	e03f      	b.n	800c39e <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2259      	movs	r2, #89	; 0x59
 800c322:	5c9b      	ldrb	r3, [r3, r2]
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b00      	cmp	r3, #0
 800c328:	d107      	bne.n	800c33a <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2258      	movs	r2, #88	; 0x58
 800c32e:	2100      	movs	r1, #0
 800c330:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	0018      	movs	r0, r3
 800c336:	f7f9 f901 	bl	800553c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2259      	movs	r2, #89	; 0x59
 800c33e:	2102      	movs	r1, #2
 800c340:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2101      	movs	r1, #1
 800c34e:	438a      	bics	r2, r1
 800c350:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	0018      	movs	r0, r3
 800c356:	f000 fbdb 	bl	800cb10 <USART_SetConfig>
 800c35a:	0003      	movs	r3, r0
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d101      	bne.n	800c364 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800c360:	2301      	movs	r3, #1
 800c362:	e01c      	b.n	800c39e <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	685a      	ldr	r2, [r3, #4]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	490e      	ldr	r1, [pc, #56]	; (800c3a8 <HAL_USART_Init+0x9c>)
 800c370:	400a      	ands	r2, r1
 800c372:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	689a      	ldr	r2, [r3, #8]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	212a      	movs	r1, #42	; 0x2a
 800c380:	438a      	bics	r2, r1
 800c382:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2101      	movs	r1, #1
 800c390:	430a      	orrs	r2, r1
 800c392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	0018      	movs	r0, r3
 800c398:	f000 fe56 	bl	800d048 <USART_CheckIdleState>
 800c39c:	0003      	movs	r3, r0
}
 800c39e:	0018      	movs	r0, r3
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	b002      	add	sp, #8
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	46c0      	nop			; (mov r8, r8)
 800c3a8:	ffffbfff 	.word	0xffffbfff

0800c3ac <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b08a      	sub	sp, #40	; 0x28
 800c3b0:	af02      	add	r7, sp, #8
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	603b      	str	r3, [r7, #0]
 800c3b8:	1dbb      	adds	r3, r7, #6
 800c3ba:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2259      	movs	r2, #89	; 0x59
 800c3c0:	5c9b      	ldrb	r3, [r3, r2]
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d000      	beq.n	800c3ca <HAL_USART_Transmit+0x1e>
 800c3c8:	e0a9      	b.n	800c51e <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d003      	beq.n	800c3d8 <HAL_USART_Transmit+0x2c>
 800c3d0:	1dbb      	adds	r3, r7, #6
 800c3d2:	881b      	ldrh	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d101      	bne.n	800c3dc <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e0a1      	b.n	800c520 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	689a      	ldr	r2, [r3, #8]
 800c3e0:	2380      	movs	r3, #128	; 0x80
 800c3e2:	015b      	lsls	r3, r3, #5
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d109      	bne.n	800c3fc <HAL_USART_Transmit+0x50>
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	691b      	ldr	r3, [r3, #16]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d105      	bne.n	800c3fc <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	d001      	beq.n	800c3fc <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e091      	b.n	800c520 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2258      	movs	r2, #88	; 0x58
 800c400:	5c9b      	ldrb	r3, [r3, r2]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d101      	bne.n	800c40a <HAL_USART_Transmit+0x5e>
 800c406:	2302      	movs	r3, #2
 800c408:	e08a      	b.n	800c520 <HAL_USART_Transmit+0x174>
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2258      	movs	r2, #88	; 0x58
 800c40e:	2101      	movs	r1, #1
 800c410:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2200      	movs	r2, #0
 800c416:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2259      	movs	r2, #89	; 0x59
 800c41c:	2112      	movs	r1, #18
 800c41e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c420:	f7f9 fb06 	bl	8005a30 <HAL_GetTick>
 800c424:	0003      	movs	r3, r0
 800c426:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	1dba      	adds	r2, r7, #6
 800c42c:	8812      	ldrh	r2, [r2, #0]
 800c42e:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	1dba      	adds	r2, r7, #6
 800c434:	8812      	ldrh	r2, [r2, #0]
 800c436:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	689a      	ldr	r2, [r3, #8]
 800c43c:	2380      	movs	r3, #128	; 0x80
 800c43e:	015b      	lsls	r3, r3, #5
 800c440:	429a      	cmp	r2, r3
 800c442:	d108      	bne.n	800c456 <HAL_USART_Transmit+0xaa>
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d104      	bne.n	800c456 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800c44c:	2300      	movs	r3, #0
 800c44e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	61bb      	str	r3, [r7, #24]
 800c454:	e003      	b.n	800c45e <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800c45a:	2300      	movs	r3, #0
 800c45c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800c45e:	e02a      	b.n	800c4b6 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c460:	697a      	ldr	r2, [r7, #20]
 800c462:	68f8      	ldr	r0, [r7, #12]
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	0013      	movs	r3, r2
 800c46a:	2200      	movs	r2, #0
 800c46c:	2180      	movs	r1, #128	; 0x80
 800c46e:	f000 fb19 	bl	800caa4 <USART_WaitOnFlagUntilTimeout>
 800c472:	1e03      	subs	r3, r0, #0
 800c474:	d001      	beq.n	800c47a <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800c476:	2303      	movs	r3, #3
 800c478:	e052      	b.n	800c520 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800c47a:	69fb      	ldr	r3, [r7, #28]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10b      	bne.n	800c498 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800c480:	69bb      	ldr	r3, [r7, #24]
 800c482:	881b      	ldrh	r3, [r3, #0]
 800c484:	001a      	movs	r2, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	05d2      	lsls	r2, r2, #23
 800c48c:	0dd2      	lsrs	r2, r2, #23
 800c48e:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800c490:	69bb      	ldr	r3, [r7, #24]
 800c492:	3302      	adds	r3, #2
 800c494:	61bb      	str	r3, [r7, #24]
 800c496:	e007      	b.n	800c4a8 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	781a      	ldrb	r2, [r3, #0]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800c4a2:	69fb      	ldr	r3, [r7, #28]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	3b01      	subs	r3, #1
 800c4b0:	b29a      	uxth	r2, r3
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1cf      	bne.n	800c460 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c4c0:	697a      	ldr	r2, [r7, #20]
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	9300      	str	r3, [sp, #0]
 800c4c8:	0013      	movs	r3, r2
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2140      	movs	r1, #64	; 0x40
 800c4ce:	f000 fae9 	bl	800caa4 <USART_WaitOnFlagUntilTimeout>
 800c4d2:	1e03      	subs	r3, r0, #0
 800c4d4:	d001      	beq.n	800c4da <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800c4d6:	2303      	movs	r3, #3
 800c4d8:	e022      	b.n	800c520 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2240      	movs	r2, #64	; 0x40
 800c4e0:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2208      	movs	r2, #8
 800c4e8:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	699a      	ldr	r2, [r3, #24]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2108      	movs	r1, #8
 800c4f6:	430a      	orrs	r2, r1
 800c4f8:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	699a      	ldr	r2, [r3, #24]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2110      	movs	r1, #16
 800c506:	430a      	orrs	r2, r1
 800c508:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2259      	movs	r2, #89	; 0x59
 800c50e:	2101      	movs	r1, #1
 800c510:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2258      	movs	r2, #88	; 0x58
 800c516:	2100      	movs	r1, #0
 800c518:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c51a:	2300      	movs	r3, #0
 800c51c:	e000      	b.n	800c520 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c51e:	2302      	movs	r3, #2
  }
}
 800c520:	0018      	movs	r0, r3
 800c522:	46bd      	mov	sp, r7
 800c524:	b008      	add	sp, #32
 800c526:	bd80      	pop	{r7, pc}

0800c528 <HAL_USART_Transmit_DMA>:
  * @param  pTxData pointer to data buffer (u8 or u16 data elements).
  * @param  Size amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 800c528:	b590      	push	{r4, r7, lr}
 800c52a:	b087      	sub	sp, #28
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	1dbb      	adds	r3, r7, #6
 800c534:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c536:	2317      	movs	r3, #23
 800c538:	18fb      	adds	r3, r7, r3
 800c53a:	2200      	movs	r2, #0
 800c53c:	701a      	strb	r2, [r3, #0]
  uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2259      	movs	r2, #89	; 0x59
 800c542:	5c9b      	ldrb	r3, [r3, r2]
 800c544:	b2db      	uxtb	r3, r3
 800c546:	2b01      	cmp	r3, #1
 800c548:	d000      	beq.n	800c54c <HAL_USART_Transmit_DMA+0x24>
 800c54a:	e07d      	b.n	800c648 <HAL_USART_Transmit_DMA+0x120>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d003      	beq.n	800c55a <HAL_USART_Transmit_DMA+0x32>
 800c552:	1dbb      	adds	r3, r7, #6
 800c554:	881b      	ldrh	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d101      	bne.n	800c55e <HAL_USART_Transmit_DMA+0x36>
    {
      return HAL_ERROR;
 800c55a:	2301      	movs	r3, #1
 800c55c:	e075      	b.n	800c64a <HAL_USART_Transmit_DMA+0x122>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	689a      	ldr	r2, [r3, #8]
 800c562:	2380      	movs	r3, #128	; 0x80
 800c564:	015b      	lsls	r3, r3, #5
 800c566:	429a      	cmp	r2, r3
 800c568:	d10a      	bne.n	800c580 <HAL_USART_Transmit_DMA+0x58>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d106      	bne.n	800c580 <HAL_USART_Transmit_DMA+0x58>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	001a      	movs	r2, r3
 800c576:	2301      	movs	r3, #1
 800c578:	4013      	ands	r3, r2
 800c57a:	d001      	beq.n	800c580 <HAL_USART_Transmit_DMA+0x58>
      {
        return  HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	e064      	b.n	800c64a <HAL_USART_Transmit_DMA+0x122>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2258      	movs	r2, #88	; 0x58
 800c584:	5c9b      	ldrb	r3, [r3, r2]
 800c586:	2b01      	cmp	r3, #1
 800c588:	d101      	bne.n	800c58e <HAL_USART_Transmit_DMA+0x66>
 800c58a:	2302      	movs	r3, #2
 800c58c:	e05d      	b.n	800c64a <HAL_USART_Transmit_DMA+0x122>
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2258      	movs	r2, #88	; 0x58
 800c592:	2101      	movs	r1, #1
 800c594:	5499      	strb	r1, [r3, r2]

    husart->pTxBuffPtr = pTxData;
 800c596:	68ba      	ldr	r2, [r7, #8]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	629a      	str	r2, [r3, #40]	; 0x28
    husart->TxXferSize = Size;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	1dba      	adds	r2, r7, #6
 800c5a0:	8812      	ldrh	r2, [r2, #0]
 800c5a2:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	1dba      	adds	r2, r7, #6
 800c5a8:	8812      	ldrh	r2, [r2, #0]
 800c5aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2259      	movs	r2, #89	; 0x59
 800c5b6:	2112      	movs	r1, #18
 800c5b8:	5499      	strb	r1, [r3, r2]

    if (husart->hdmatx != NULL)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d01e      	beq.n	800c600 <HAL_USART_Transmit_DMA+0xd8>
    {
      /* Set the USART DMA transfer complete callback */
      husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5c6:	4a23      	ldr	r2, [pc, #140]	; (800c654 <HAL_USART_Transmit_DMA+0x12c>)
 800c5c8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the USART DMA Half transfer complete callback */
      husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5ce:	4a22      	ldr	r2, [pc, #136]	; (800c658 <HAL_USART_Transmit_DMA+0x130>)
 800c5d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      husart->hdmatx->XferErrorCallback = USART_DMAError;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5d6:	4a21      	ldr	r2, [pc, #132]	; (800c65c <HAL_USART_Transmit_DMA+0x134>)
 800c5d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the USART transmit DMA channel */
      tmp = (uint32_t *)&pTxData;
 800c5da:	2308      	movs	r3, #8
 800c5dc:	18fb      	adds	r3, r7, r3
 800c5de:	613b      	str	r3, [r7, #16]
      status = HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->TDR, Size);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	6819      	ldr	r1, [r3, #0]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3328      	adds	r3, #40	; 0x28
 800c5ee:	001a      	movs	r2, r3
 800c5f0:	1dbb      	adds	r3, r7, #6
 800c5f2:	881b      	ldrh	r3, [r3, #0]
 800c5f4:	2417      	movs	r4, #23
 800c5f6:	193c      	adds	r4, r7, r4
 800c5f8:	f7f9 fe26 	bl	8006248 <HAL_DMA_Start_IT>
 800c5fc:	0003      	movs	r3, r0
 800c5fe:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800c600:	2317      	movs	r3, #23
 800c602:	18fb      	adds	r3, r7, r3
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d111      	bne.n	800c62e <HAL_USART_Transmit_DMA+0x106>
    {
      /* Clear the TC flag in the ICR register */
      __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2240      	movs	r2, #64	; 0x40
 800c610:	621a      	str	r2, [r3, #32]

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2258      	movs	r2, #88	; 0x58
 800c616:	2100      	movs	r1, #0
 800c618:	5499      	strb	r1, [r3, r2]

      /* Enable the DMA transfer for transmit request by setting the DMAT bit
         in the USART CR3 register */
      SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	689a      	ldr	r2, [r3, #8]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2180      	movs	r1, #128	; 0x80
 800c626:	430a      	orrs	r2, r1
 800c628:	609a      	str	r2, [r3, #8]

      return HAL_OK;
 800c62a:	2300      	movs	r3, #0
 800c62c:	e00d      	b.n	800c64a <HAL_USART_Transmit_DMA+0x122>
    }
    else
    {
      /* Set error code to DMA */
      husart->ErrorCode = HAL_USART_ERROR_DMA;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2210      	movs	r2, #16
 800c632:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2258      	movs	r2, #88	; 0x58
 800c638:	2100      	movs	r1, #0
 800c63a:	5499      	strb	r1, [r3, r2]

      /* Restore husart->State to ready */
      husart->State = HAL_USART_STATE_READY;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2259      	movs	r2, #89	; 0x59
 800c640:	2101      	movs	r1, #1
 800c642:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800c644:	2301      	movs	r3, #1
 800c646:	e000      	b.n	800c64a <HAL_USART_Transmit_DMA+0x122>
    }
  }
  else
  {
    return HAL_BUSY;
 800c648:	2302      	movs	r3, #2
  }
}
 800c64a:	0018      	movs	r0, r3
 800c64c:	46bd      	mov	sp, r7
 800c64e:	b007      	add	sp, #28
 800c650:	bd90      	pop	{r4, r7, pc}
 800c652:	46c0      	nop			; (mov r8, r8)
 800c654:	0800c9ad 	.word	0x0800c9ad
 800c658:	0800ca17 	.word	0x0800ca17
 800c65c:	0800ca35 	.word	0x0800ca35

0800c660 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b088      	sub	sp, #32
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	69db      	ldr	r3, [r3, #28]
 800c66e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	4aab      	ldr	r2, [pc, #684]	; (800c930 <HAL_USART_IRQHandler+0x2d0>)
 800c684:	4013      	ands	r3, r2
 800c686:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d117      	bne.n	800c6be <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	2220      	movs	r2, #32
 800c692:	4013      	ands	r3, r2
 800c694:	d013      	beq.n	800c6be <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	2220      	movs	r2, #32
 800c69a:	4013      	ands	r3, r2
 800c69c:	d104      	bne.n	800c6a8 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c69e:	697a      	ldr	r2, [r7, #20]
 800c6a0:	2380      	movs	r3, #128	; 0x80
 800c6a2:	055b      	lsls	r3, r3, #21
 800c6a4:	4013      	ands	r3, r2
 800c6a6:	d00a      	beq.n	800c6be <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d100      	bne.n	800c6b2 <HAL_USART_IRQHandler+0x52>
 800c6b0:	e135      	b.n	800c91e <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	0010      	movs	r0, r2
 800c6ba:	4798      	blx	r3
      }
      return;
 800c6bc:	e12f      	b.n	800c91e <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d100      	bne.n	800c6c6 <HAL_USART_IRQHandler+0x66>
 800c6c4:	e0eb      	b.n	800c89e <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	4a9a      	ldr	r2, [pc, #616]	; (800c934 <HAL_USART_IRQHandler+0x2d4>)
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	d105      	bne.n	800c6da <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800c6ce:	69ba      	ldr	r2, [r7, #24]
 800c6d0:	2390      	movs	r3, #144	; 0x90
 800c6d2:	005b      	lsls	r3, r3, #1
 800c6d4:	4013      	ands	r3, r2
 800c6d6:	d100      	bne.n	800c6da <HAL_USART_IRQHandler+0x7a>
 800c6d8:	e0e1      	b.n	800c89e <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	4013      	ands	r3, r2
 800c6e0:	d00e      	beq.n	800c700 <HAL_USART_IRQHandler+0xa0>
 800c6e2:	69ba      	ldr	r2, [r7, #24]
 800c6e4:	2380      	movs	r3, #128	; 0x80
 800c6e6:	005b      	lsls	r3, r3, #1
 800c6e8:	4013      	ands	r3, r2
 800c6ea:	d009      	beq.n	800c700 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	431a      	orrs	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c700:	69fb      	ldr	r3, [r7, #28]
 800c702:	2202      	movs	r2, #2
 800c704:	4013      	ands	r3, r2
 800c706:	d00d      	beq.n	800c724 <HAL_USART_IRQHandler+0xc4>
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	2201      	movs	r2, #1
 800c70c:	4013      	ands	r3, r2
 800c70e:	d009      	beq.n	800c724 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2202      	movs	r2, #2
 800c716:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c71c:	2204      	movs	r2, #4
 800c71e:	431a      	orrs	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	2204      	movs	r2, #4
 800c728:	4013      	ands	r3, r2
 800c72a:	d00d      	beq.n	800c748 <HAL_USART_IRQHandler+0xe8>
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	2201      	movs	r2, #1
 800c730:	4013      	ands	r3, r2
 800c732:	d009      	beq.n	800c748 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2204      	movs	r2, #4
 800c73a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c740:	2202      	movs	r2, #2
 800c742:	431a      	orrs	r2, r3
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	2208      	movs	r2, #8
 800c74c:	4013      	ands	r3, r2
 800c74e:	d011      	beq.n	800c774 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	2220      	movs	r2, #32
 800c754:	4013      	ands	r3, r2
 800c756:	d103      	bne.n	800c760 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	4a76      	ldr	r2, [pc, #472]	; (800c934 <HAL_USART_IRQHandler+0x2d4>)
 800c75c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c75e:	d009      	beq.n	800c774 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2208      	movs	r2, #8
 800c766:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c76c:	2208      	movs	r2, #8
 800c76e:	431a      	orrs	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c774:	69fa      	ldr	r2, [r7, #28]
 800c776:	2380      	movs	r3, #128	; 0x80
 800c778:	019b      	lsls	r3, r3, #6
 800c77a:	4013      	ands	r3, r2
 800c77c:	d01a      	beq.n	800c7b4 <HAL_USART_IRQHandler+0x154>
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	2201      	movs	r2, #1
 800c782:	4013      	ands	r3, r2
 800c784:	d016      	beq.n	800c7b4 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2259      	movs	r2, #89	; 0x59
 800c78a:	5c9b      	ldrb	r3, [r3, r2]
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	2b22      	cmp	r3, #34	; 0x22
 800c790:	d105      	bne.n	800c79e <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2280      	movs	r2, #128	; 0x80
 800c798:	0192      	lsls	r2, r2, #6
 800c79a:	621a      	str	r2, [r3, #32]
        return;
 800c79c:	e0c4      	b.n	800c928 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2280      	movs	r2, #128	; 0x80
 800c7a4:	0192      	lsls	r2, r2, #6
 800c7a6:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ac:	2220      	movs	r2, #32
 800c7ae:	431a      	orrs	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d100      	bne.n	800c7be <HAL_USART_IRQHandler+0x15e>
 800c7bc:	e0b1      	b.n	800c922 <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	2220      	movs	r2, #32
 800c7c2:	4013      	ands	r3, r2
 800c7c4:	d011      	beq.n	800c7ea <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	2220      	movs	r2, #32
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	d104      	bne.n	800c7d8 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c7ce:	697a      	ldr	r2, [r7, #20]
 800c7d0:	2380      	movs	r3, #128	; 0x80
 800c7d2:	055b      	lsls	r3, r3, #21
 800c7d4:	4013      	ands	r3, r2
 800c7d6:	d008      	beq.n	800c7ea <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d004      	beq.n	800c7ea <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	0010      	movs	r0, r2
 800c7e8:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ee:	2208      	movs	r2, #8
 800c7f0:	4013      	ands	r3, r2
 800c7f2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	2240      	movs	r2, #64	; 0x40
 800c7fc:	4013      	ands	r3, r2
 800c7fe:	2b40      	cmp	r3, #64	; 0x40
 800c800:	d002      	beq.n	800c808 <HAL_USART_IRQHandler+0x1a8>
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d040      	beq.n	800c88a <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	0018      	movs	r0, r3
 800c80c:	f000 f8ae 	bl	800c96c <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	2240      	movs	r2, #64	; 0x40
 800c818:	4013      	ands	r3, r2
 800c81a:	2b40      	cmp	r3, #64	; 0x40
 800c81c:	d130      	bne.n	800c880 <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	689a      	ldr	r2, [r3, #8]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2140      	movs	r1, #64	; 0x40
 800c82a:	438a      	bics	r2, r1
 800c82c:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c832:	2b00      	cmp	r3, #0
 800c834:	d008      	beq.n	800c848 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c83a:	2200      	movs	r2, #0
 800c83c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c842:	0018      	movs	r0, r3
 800c844:	f7f9 fd86 	bl	8006354 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d012      	beq.n	800c876 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c854:	4a38      	ldr	r2, [pc, #224]	; (800c938 <HAL_USART_IRQHandler+0x2d8>)
 800c856:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c85c:	0018      	movs	r0, r3
 800c85e:	f7f9 fd79 	bl	8006354 <HAL_DMA_Abort_IT>
 800c862:	1e03      	subs	r3, r0, #0
 800c864:	d019      	beq.n	800c89a <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c86a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c870:	0018      	movs	r0, r3
 800c872:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800c874:	e011      	b.n	800c89a <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	0018      	movs	r0, r3
 800c87a:	f000 f86f 	bl	800c95c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800c87e:	e00c      	b.n	800c89a <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	0018      	movs	r0, r3
 800c884:	f000 f86a 	bl	800c95c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800c888:	e007      	b.n	800c89a <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	0018      	movs	r0, r3
 800c88e:	f000 f865 	bl	800c95c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800c898:	e043      	b.n	800c922 <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800c89a:	46c0      	nop			; (mov r8, r8)
    return;
 800c89c:	e041      	b.n	800c922 <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c89e:	69fb      	ldr	r3, [r7, #28]
 800c8a0:	2280      	movs	r2, #128	; 0x80
 800c8a2:	4013      	ands	r3, r2
 800c8a4:	d012      	beq.n	800c8cc <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	2280      	movs	r2, #128	; 0x80
 800c8aa:	4013      	ands	r3, r2
 800c8ac:	d104      	bne.n	800c8b8 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c8ae:	697a      	ldr	r2, [r7, #20]
 800c8b0:	2380      	movs	r3, #128	; 0x80
 800c8b2:	041b      	lsls	r3, r3, #16
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	d009      	beq.n	800c8cc <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d032      	beq.n	800c926 <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	0010      	movs	r0, r2
 800c8c8:	4798      	blx	r3
    }
    return;
 800c8ca:	e02c      	b.n	800c926 <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	2240      	movs	r2, #64	; 0x40
 800c8d0:	4013      	ands	r3, r2
 800c8d2:	d008      	beq.n	800c8e6 <HAL_USART_IRQHandler+0x286>
 800c8d4:	69bb      	ldr	r3, [r7, #24]
 800c8d6:	2240      	movs	r2, #64	; 0x40
 800c8d8:	4013      	ands	r3, r2
 800c8da:	d004      	beq.n	800c8e6 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	0018      	movs	r0, r3
 800c8e0:	f000 fbf6 	bl	800d0d0 <USART_EndTransmit_IT>
    return;
 800c8e4:	e020      	b.n	800c928 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c8e6:	69fa      	ldr	r2, [r7, #28]
 800c8e8:	2380      	movs	r3, #128	; 0x80
 800c8ea:	041b      	lsls	r3, r3, #16
 800c8ec:	4013      	ands	r3, r2
 800c8ee:	d009      	beq.n	800c904 <HAL_USART_IRQHandler+0x2a4>
 800c8f0:	69ba      	ldr	r2, [r7, #24]
 800c8f2:	2380      	movs	r3, #128	; 0x80
 800c8f4:	05db      	lsls	r3, r3, #23
 800c8f6:	4013      	ands	r3, r2
 800c8f8:	d004      	beq.n	800c904 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	0018      	movs	r0, r3
 800c8fe:	f000 fc32 	bl	800d166 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800c902:	e011      	b.n	800c928 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c904:	69fa      	ldr	r2, [r7, #28]
 800c906:	2380      	movs	r3, #128	; 0x80
 800c908:	045b      	lsls	r3, r3, #17
 800c90a:	4013      	ands	r3, r2
 800c90c:	d00c      	beq.n	800c928 <HAL_USART_IRQHandler+0x2c8>
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	2b00      	cmp	r3, #0
 800c912:	da09      	bge.n	800c928 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	0018      	movs	r0, r3
 800c918:	f000 fc1d 	bl	800d156 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800c91c:	e004      	b.n	800c928 <HAL_USART_IRQHandler+0x2c8>
      return;
 800c91e:	46c0      	nop			; (mov r8, r8)
 800c920:	e002      	b.n	800c928 <HAL_USART_IRQHandler+0x2c8>
    return;
 800c922:	46c0      	nop			; (mov r8, r8)
 800c924:	e000      	b.n	800c928 <HAL_USART_IRQHandler+0x2c8>
    return;
 800c926:	46c0      	nop			; (mov r8, r8)
  }
}
 800c928:	46bd      	mov	sp, r7
 800c92a:	b008      	add	sp, #32
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	46c0      	nop			; (mov r8, r8)
 800c930:	0000200f 	.word	0x0000200f
 800c934:	10000001 	.word	0x10000001
 800c938:	0800ca7b 	.word	0x0800ca7b

0800c93c <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c944:	46c0      	nop			; (mov r8, r8)
 800c946:	46bd      	mov	sp, r7
 800c948:	b002      	add	sp, #8
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b082      	sub	sp, #8
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800c954:	46c0      	nop			; (mov r8, r8)
 800c956:	46bd      	mov	sp, r7
 800c958:	b002      	add	sp, #8
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800c964:	46c0      	nop			; (mov r8, r8)
 800c966:	46bd      	mov	sp, r7
 800c968:	b002      	add	sp, #8
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	4909      	ldr	r1, [pc, #36]	; (800c9a4 <USART_EndTransfer+0x38>)
 800c980:	400a      	ands	r2, r1
 800c982:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	689a      	ldr	r2, [r3, #8]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	4906      	ldr	r1, [pc, #24]	; (800c9a8 <USART_EndTransfer+0x3c>)
 800c990:	400a      	ands	r2, r1
 800c992:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2259      	movs	r2, #89	; 0x59
 800c998:	2101      	movs	r1, #1
 800c99a:	5499      	strb	r1, [r3, r2]
}
 800c99c:	46c0      	nop			; (mov r8, r8)
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	b002      	add	sp, #8
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	fffffe1f 	.word	0xfffffe1f
 800c9a8:	ef7ffffe 	.word	0xef7ffffe

0800c9ac <USART_DMATransmitCplt>:
  * @brief DMA USART transmit process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2220      	movs	r2, #32
 800c9c2:	4013      	ands	r3, r2
 800c9c4:	d119      	bne.n	800c9fa <USART_DMATransmitCplt+0x4e>
  {
    husart->TxXferCount = 0U;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2259      	movs	r2, #89	; 0x59
 800c9d0:	5c9b      	ldrb	r3, [r3, r2]
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	2b12      	cmp	r3, #18
 800c9d6:	d11a      	bne.n	800ca0e <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	689a      	ldr	r2, [r3, #8]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2180      	movs	r1, #128	; 0x80
 800c9e4:	438a      	bics	r2, r1
 800c9e6:	609a      	str	r2, [r3, #8]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2140      	movs	r1, #64	; 0x40
 800c9f4:	430a      	orrs	r2, r1
 800c9f6:	601a      	str	r2, [r3, #0]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 800c9f8:	e009      	b.n	800ca0e <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2259      	movs	r2, #89	; 0x59
 800c9fe:	5c9b      	ldrb	r3, [r3, r2]
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	2b12      	cmp	r3, #18
 800ca04:	d103      	bne.n	800ca0e <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	0018      	movs	r0, r3
 800ca0a:	f7f6 fb03 	bl	8003014 <HAL_USART_TxCpltCallback>
}
 800ca0e:	46c0      	nop			; (mov r8, r8)
 800ca10:	46bd      	mov	sp, r7
 800ca12:	b004      	add	sp, #16
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <USART_DMATxHalfCplt>:
  * @brief DMA USART transmit process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b084      	sub	sp, #16
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca22:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	0018      	movs	r0, r3
 800ca28:	f7ff ff88 	bl	800c93c <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800ca2c:	46c0      	nop			; (mov r8, r8)
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	b004      	add	sp, #16
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <USART_DMAError>:
  * @brief DMA USART communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca40:	60fb      	str	r3, [r7, #12]

  husart->RxXferCount = 0U;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2200      	movs	r2, #0
 800ca46:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  USART_EndTransfer(husart);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	0018      	movs	r0, r3
 800ca52:	f7ff ff8b 	bl	800c96c <USART_EndTransfer>

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca5a:	2210      	movs	r2, #16
 800ca5c:	431a      	orrs	r2, r3
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	65da      	str	r2, [r3, #92]	; 0x5c
  husart->State = HAL_USART_STATE_READY;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2259      	movs	r2, #89	; 0x59
 800ca66:	2101      	movs	r1, #1
 800ca68:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	0018      	movs	r0, r3
 800ca6e:	f7ff ff75 	bl	800c95c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800ca72:	46c0      	nop			; (mov r8, r8)
 800ca74:	46bd      	mov	sp, r7
 800ca76:	b004      	add	sp, #16
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b084      	sub	sp, #16
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca86:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2200      	movs	r2, #0
 800ca92:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	0018      	movs	r0, r3
 800ca98:	f7ff ff60 	bl	800c95c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800ca9c:	46c0      	nop			; (mov r8, r8)
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	b004      	add	sp, #16
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	603b      	str	r3, [r7, #0]
 800cab0:	1dfb      	adds	r3, r7, #7
 800cab2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800cab4:	e017      	b.n	800cae6 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	3301      	adds	r3, #1
 800caba:	d014      	beq.n	800cae6 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cabc:	f7f8 ffb8 	bl	8005a30 <HAL_GetTick>
 800cac0:	0002      	movs	r2, r0
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	1ad3      	subs	r3, r2, r3
 800cac6:	69ba      	ldr	r2, [r7, #24]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d302      	bcc.n	800cad2 <USART_WaitOnFlagUntilTimeout+0x2e>
 800cacc:	69bb      	ldr	r3, [r7, #24]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d109      	bne.n	800cae6 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2259      	movs	r2, #89	; 0x59
 800cad6:	2101      	movs	r1, #1
 800cad8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2258      	movs	r2, #88	; 0x58
 800cade:	2100      	movs	r1, #0
 800cae0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800cae2:	2303      	movs	r3, #3
 800cae4:	e00f      	b.n	800cb06 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	69db      	ldr	r3, [r3, #28]
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	4013      	ands	r3, r2
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	425a      	negs	r2, r3
 800caf6:	4153      	adcs	r3, r2
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	001a      	movs	r2, r3
 800cafc:	1dfb      	adds	r3, r7, #7
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d0d8      	beq.n	800cab6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cb04:	2300      	movs	r3, #0
}
 800cb06:	0018      	movs	r0, r3
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	b004      	add	sp, #16
 800cb0c:	bd80      	pop	{r7, pc}
	...

0800cb10 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b088      	sub	sp, #32
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800cb18:	231e      	movs	r3, #30
 800cb1a:	18fb      	adds	r3, r7, r3
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800cb20:	2300      	movs	r3, #0
 800cb22:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	689a      	ldr	r2, [r3, #8]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	431a      	orrs	r2, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	695b      	ldr	r3, [r3, #20]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	2280      	movs	r2, #128	; 0x80
 800cb36:	0212      	lsls	r2, r2, #8
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4ab1      	ldr	r2, [pc, #708]	; (800ce08 <USART_SetConfig+0x2f8>)
 800cb44:	4013      	ands	r3, r2
 800cb46:	0019      	movs	r1, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	697a      	ldr	r2, [r7, #20]
 800cb4e:	430a      	orrs	r2, r1
 800cb50:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800cb52:	2380      	movs	r3, #128	; 0x80
 800cb54:	011b      	lsls	r3, r3, #4
 800cb56:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6a1b      	ldr	r3, [r3, #32]
 800cb5c:	697a      	ldr	r2, [r7, #20]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	699a      	ldr	r2, [r3, #24]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	697a      	ldr	r2, [r7, #20]
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	68db      	ldr	r3, [r3, #12]
 800cb76:	697a      	ldr	r2, [r7, #20]
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	4aa2      	ldr	r2, [pc, #648]	; (800ce0c <USART_SetConfig+0x2fc>)
 800cb84:	4013      	ands	r3, r2
 800cb86:	0019      	movs	r1, r3
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	697a      	ldr	r2, [r7, #20]
 800cb8e:	430a      	orrs	r2, r1
 800cb90:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb98:	220f      	movs	r2, #15
 800cb9a:	4393      	bics	r3, r2
 800cb9c:	0019      	movs	r1, r3
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	430a      	orrs	r2, r1
 800cba8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4a98      	ldr	r2, [pc, #608]	; (800ce10 <USART_SetConfig+0x300>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d127      	bne.n	800cc04 <USART_SetConfig+0xf4>
 800cbb4:	4b97      	ldr	r3, [pc, #604]	; (800ce14 <USART_SetConfig+0x304>)
 800cbb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbb8:	2203      	movs	r2, #3
 800cbba:	4013      	ands	r3, r2
 800cbbc:	2b03      	cmp	r3, #3
 800cbbe:	d017      	beq.n	800cbf0 <USART_SetConfig+0xe0>
 800cbc0:	d81b      	bhi.n	800cbfa <USART_SetConfig+0xea>
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	d00a      	beq.n	800cbdc <USART_SetConfig+0xcc>
 800cbc6:	d818      	bhi.n	800cbfa <USART_SetConfig+0xea>
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <USART_SetConfig+0xc2>
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d00a      	beq.n	800cbe6 <USART_SetConfig+0xd6>
 800cbd0:	e013      	b.n	800cbfa <USART_SetConfig+0xea>
 800cbd2:	231f      	movs	r3, #31
 800cbd4:	18fb      	adds	r3, r7, r3
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	701a      	strb	r2, [r3, #0]
 800cbda:	e058      	b.n	800cc8e <USART_SetConfig+0x17e>
 800cbdc:	231f      	movs	r3, #31
 800cbde:	18fb      	adds	r3, r7, r3
 800cbe0:	2202      	movs	r2, #2
 800cbe2:	701a      	strb	r2, [r3, #0]
 800cbe4:	e053      	b.n	800cc8e <USART_SetConfig+0x17e>
 800cbe6:	231f      	movs	r3, #31
 800cbe8:	18fb      	adds	r3, r7, r3
 800cbea:	2204      	movs	r2, #4
 800cbec:	701a      	strb	r2, [r3, #0]
 800cbee:	e04e      	b.n	800cc8e <USART_SetConfig+0x17e>
 800cbf0:	231f      	movs	r3, #31
 800cbf2:	18fb      	adds	r3, r7, r3
 800cbf4:	2208      	movs	r2, #8
 800cbf6:	701a      	strb	r2, [r3, #0]
 800cbf8:	e049      	b.n	800cc8e <USART_SetConfig+0x17e>
 800cbfa:	231f      	movs	r3, #31
 800cbfc:	18fb      	adds	r3, r7, r3
 800cbfe:	2210      	movs	r2, #16
 800cc00:	701a      	strb	r2, [r3, #0]
 800cc02:	e044      	b.n	800cc8e <USART_SetConfig+0x17e>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a83      	ldr	r2, [pc, #524]	; (800ce18 <USART_SetConfig+0x308>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d127      	bne.n	800cc5e <USART_SetConfig+0x14e>
 800cc0e:	4b81      	ldr	r3, [pc, #516]	; (800ce14 <USART_SetConfig+0x304>)
 800cc10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc12:	220c      	movs	r2, #12
 800cc14:	4013      	ands	r3, r2
 800cc16:	2b0c      	cmp	r3, #12
 800cc18:	d017      	beq.n	800cc4a <USART_SetConfig+0x13a>
 800cc1a:	d81b      	bhi.n	800cc54 <USART_SetConfig+0x144>
 800cc1c:	2b08      	cmp	r3, #8
 800cc1e:	d00a      	beq.n	800cc36 <USART_SetConfig+0x126>
 800cc20:	d818      	bhi.n	800cc54 <USART_SetConfig+0x144>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d002      	beq.n	800cc2c <USART_SetConfig+0x11c>
 800cc26:	2b04      	cmp	r3, #4
 800cc28:	d00a      	beq.n	800cc40 <USART_SetConfig+0x130>
 800cc2a:	e013      	b.n	800cc54 <USART_SetConfig+0x144>
 800cc2c:	231f      	movs	r3, #31
 800cc2e:	18fb      	adds	r3, r7, r3
 800cc30:	2200      	movs	r2, #0
 800cc32:	701a      	strb	r2, [r3, #0]
 800cc34:	e02b      	b.n	800cc8e <USART_SetConfig+0x17e>
 800cc36:	231f      	movs	r3, #31
 800cc38:	18fb      	adds	r3, r7, r3
 800cc3a:	2202      	movs	r2, #2
 800cc3c:	701a      	strb	r2, [r3, #0]
 800cc3e:	e026      	b.n	800cc8e <USART_SetConfig+0x17e>
 800cc40:	231f      	movs	r3, #31
 800cc42:	18fb      	adds	r3, r7, r3
 800cc44:	2204      	movs	r2, #4
 800cc46:	701a      	strb	r2, [r3, #0]
 800cc48:	e021      	b.n	800cc8e <USART_SetConfig+0x17e>
 800cc4a:	231f      	movs	r3, #31
 800cc4c:	18fb      	adds	r3, r7, r3
 800cc4e:	2208      	movs	r2, #8
 800cc50:	701a      	strb	r2, [r3, #0]
 800cc52:	e01c      	b.n	800cc8e <USART_SetConfig+0x17e>
 800cc54:	231f      	movs	r3, #31
 800cc56:	18fb      	adds	r3, r7, r3
 800cc58:	2210      	movs	r2, #16
 800cc5a:	701a      	strb	r2, [r3, #0]
 800cc5c:	e017      	b.n	800cc8e <USART_SetConfig+0x17e>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a6e      	ldr	r2, [pc, #440]	; (800ce1c <USART_SetConfig+0x30c>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d104      	bne.n	800cc72 <USART_SetConfig+0x162>
 800cc68:	231f      	movs	r3, #31
 800cc6a:	18fb      	adds	r3, r7, r3
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	701a      	strb	r2, [r3, #0]
 800cc70:	e00d      	b.n	800cc8e <USART_SetConfig+0x17e>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a6a      	ldr	r2, [pc, #424]	; (800ce20 <USART_SetConfig+0x310>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d104      	bne.n	800cc86 <USART_SetConfig+0x176>
 800cc7c:	231f      	movs	r3, #31
 800cc7e:	18fb      	adds	r3, r7, r3
 800cc80:	2200      	movs	r2, #0
 800cc82:	701a      	strb	r2, [r3, #0]
 800cc84:	e003      	b.n	800cc8e <USART_SetConfig+0x17e>
 800cc86:	231f      	movs	r3, #31
 800cc88:	18fb      	adds	r3, r7, r3
 800cc8a:	2210      	movs	r2, #16
 800cc8c:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800cc8e:	231f      	movs	r3, #31
 800cc90:	18fb      	adds	r3, r7, r3
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	2b08      	cmp	r3, #8
 800cc96:	d100      	bne.n	800cc9a <USART_SetConfig+0x18a>
 800cc98:	e139      	b.n	800cf0e <USART_SetConfig+0x3fe>
 800cc9a:	dd00      	ble.n	800cc9e <USART_SetConfig+0x18e>
 800cc9c:	e195      	b.n	800cfca <USART_SetConfig+0x4ba>
 800cc9e:	2b04      	cmp	r3, #4
 800cca0:	d100      	bne.n	800cca4 <USART_SetConfig+0x194>
 800cca2:	e0d3      	b.n	800ce4c <USART_SetConfig+0x33c>
 800cca4:	dd00      	ble.n	800cca8 <USART_SetConfig+0x198>
 800cca6:	e190      	b.n	800cfca <USART_SetConfig+0x4ba>
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d003      	beq.n	800ccb4 <USART_SetConfig+0x1a4>
 800ccac:	2b02      	cmp	r3, #2
 800ccae:	d100      	bne.n	800ccb2 <USART_SetConfig+0x1a2>
 800ccb0:	e061      	b.n	800cd76 <USART_SetConfig+0x266>
 800ccb2:	e18a      	b.n	800cfca <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800ccb4:	f7fc f904 	bl	8008ec0 <HAL_RCC_GetPCLK1Freq>
 800ccb8:	0003      	movs	r3, r0
 800ccba:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d044      	beq.n	800cd4e <USART_SetConfig+0x23e>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d03e      	beq.n	800cd4a <USART_SetConfig+0x23a>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	d038      	beq.n	800cd46 <USART_SetConfig+0x236>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd8:	2b03      	cmp	r3, #3
 800ccda:	d032      	beq.n	800cd42 <USART_SetConfig+0x232>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce0:	2b04      	cmp	r3, #4
 800cce2:	d02c      	beq.n	800cd3e <USART_SetConfig+0x22e>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce8:	2b05      	cmp	r3, #5
 800ccea:	d026      	beq.n	800cd3a <USART_SetConfig+0x22a>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf0:	2b06      	cmp	r3, #6
 800ccf2:	d020      	beq.n	800cd36 <USART_SetConfig+0x226>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf8:	2b07      	cmp	r3, #7
 800ccfa:	d01a      	beq.n	800cd32 <USART_SetConfig+0x222>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd00:	2b08      	cmp	r3, #8
 800cd02:	d014      	beq.n	800cd2e <USART_SetConfig+0x21e>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd08:	2b09      	cmp	r3, #9
 800cd0a:	d00e      	beq.n	800cd2a <USART_SetConfig+0x21a>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd10:	2b0a      	cmp	r3, #10
 800cd12:	d008      	beq.n	800cd26 <USART_SetConfig+0x216>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd18:	2b0b      	cmp	r3, #11
 800cd1a:	d102      	bne.n	800cd22 <USART_SetConfig+0x212>
 800cd1c:	2380      	movs	r3, #128	; 0x80
 800cd1e:	005b      	lsls	r3, r3, #1
 800cd20:	e016      	b.n	800cd50 <USART_SetConfig+0x240>
 800cd22:	2301      	movs	r3, #1
 800cd24:	e014      	b.n	800cd50 <USART_SetConfig+0x240>
 800cd26:	2380      	movs	r3, #128	; 0x80
 800cd28:	e012      	b.n	800cd50 <USART_SetConfig+0x240>
 800cd2a:	2340      	movs	r3, #64	; 0x40
 800cd2c:	e010      	b.n	800cd50 <USART_SetConfig+0x240>
 800cd2e:	2320      	movs	r3, #32
 800cd30:	e00e      	b.n	800cd50 <USART_SetConfig+0x240>
 800cd32:	2310      	movs	r3, #16
 800cd34:	e00c      	b.n	800cd50 <USART_SetConfig+0x240>
 800cd36:	230c      	movs	r3, #12
 800cd38:	e00a      	b.n	800cd50 <USART_SetConfig+0x240>
 800cd3a:	230a      	movs	r3, #10
 800cd3c:	e008      	b.n	800cd50 <USART_SetConfig+0x240>
 800cd3e:	2308      	movs	r3, #8
 800cd40:	e006      	b.n	800cd50 <USART_SetConfig+0x240>
 800cd42:	2306      	movs	r3, #6
 800cd44:	e004      	b.n	800cd50 <USART_SetConfig+0x240>
 800cd46:	2304      	movs	r3, #4
 800cd48:	e002      	b.n	800cd50 <USART_SetConfig+0x240>
 800cd4a:	2302      	movs	r3, #2
 800cd4c:	e000      	b.n	800cd50 <USART_SetConfig+0x240>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	0019      	movs	r1, r3
 800cd52:	6938      	ldr	r0, [r7, #16]
 800cd54:	f7f3 f9d6 	bl	8000104 <__udivsi3>
 800cd58:	0003      	movs	r3, r0
 800cd5a:	005a      	lsls	r2, r3, #1
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	085b      	lsrs	r3, r3, #1
 800cd62:	18d2      	adds	r2, r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	0019      	movs	r1, r3
 800cd6a:	0010      	movs	r0, r2
 800cd6c:	f7f3 f9ca 	bl	8000104 <__udivsi3>
 800cd70:	0003      	movs	r3, r0
 800cd72:	61bb      	str	r3, [r7, #24]
      break;
 800cd74:	e12e      	b.n	800cfd4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d052      	beq.n	800ce24 <USART_SetConfig+0x314>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d03e      	beq.n	800ce04 <USART_SetConfig+0x2f4>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd8a:	2b02      	cmp	r3, #2
 800cd8c:	d038      	beq.n	800ce00 <USART_SetConfig+0x2f0>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd92:	2b03      	cmp	r3, #3
 800cd94:	d032      	beq.n	800cdfc <USART_SetConfig+0x2ec>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd9a:	2b04      	cmp	r3, #4
 800cd9c:	d02c      	beq.n	800cdf8 <USART_SetConfig+0x2e8>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda2:	2b05      	cmp	r3, #5
 800cda4:	d026      	beq.n	800cdf4 <USART_SetConfig+0x2e4>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdaa:	2b06      	cmp	r3, #6
 800cdac:	d020      	beq.n	800cdf0 <USART_SetConfig+0x2e0>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb2:	2b07      	cmp	r3, #7
 800cdb4:	d01a      	beq.n	800cdec <USART_SetConfig+0x2dc>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdba:	2b08      	cmp	r3, #8
 800cdbc:	d014      	beq.n	800cde8 <USART_SetConfig+0x2d8>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc2:	2b09      	cmp	r3, #9
 800cdc4:	d00e      	beq.n	800cde4 <USART_SetConfig+0x2d4>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdca:	2b0a      	cmp	r3, #10
 800cdcc:	d008      	beq.n	800cde0 <USART_SetConfig+0x2d0>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd2:	2b0b      	cmp	r3, #11
 800cdd4:	d102      	bne.n	800cddc <USART_SetConfig+0x2cc>
 800cdd6:	2380      	movs	r3, #128	; 0x80
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	e024      	b.n	800ce26 <USART_SetConfig+0x316>
 800cddc:	2301      	movs	r3, #1
 800cdde:	e022      	b.n	800ce26 <USART_SetConfig+0x316>
 800cde0:	2380      	movs	r3, #128	; 0x80
 800cde2:	e020      	b.n	800ce26 <USART_SetConfig+0x316>
 800cde4:	2340      	movs	r3, #64	; 0x40
 800cde6:	e01e      	b.n	800ce26 <USART_SetConfig+0x316>
 800cde8:	2320      	movs	r3, #32
 800cdea:	e01c      	b.n	800ce26 <USART_SetConfig+0x316>
 800cdec:	2310      	movs	r3, #16
 800cdee:	e01a      	b.n	800ce26 <USART_SetConfig+0x316>
 800cdf0:	230c      	movs	r3, #12
 800cdf2:	e018      	b.n	800ce26 <USART_SetConfig+0x316>
 800cdf4:	230a      	movs	r3, #10
 800cdf6:	e016      	b.n	800ce26 <USART_SetConfig+0x316>
 800cdf8:	2308      	movs	r3, #8
 800cdfa:	e014      	b.n	800ce26 <USART_SetConfig+0x316>
 800cdfc:	2306      	movs	r3, #6
 800cdfe:	e012      	b.n	800ce26 <USART_SetConfig+0x316>
 800ce00:	2304      	movs	r3, #4
 800ce02:	e010      	b.n	800ce26 <USART_SetConfig+0x316>
 800ce04:	2302      	movs	r3, #2
 800ce06:	e00e      	b.n	800ce26 <USART_SetConfig+0x316>
 800ce08:	cfff69f3 	.word	0xcfff69f3
 800ce0c:	ffffc0f6 	.word	0xffffc0f6
 800ce10:	40013800 	.word	0x40013800
 800ce14:	40021000 	.word	0x40021000
 800ce18:	40004400 	.word	0x40004400
 800ce1c:	40004800 	.word	0x40004800
 800ce20:	40004c00 	.word	0x40004c00
 800ce24:	2301      	movs	r3, #1
 800ce26:	0019      	movs	r1, r3
 800ce28:	4886      	ldr	r0, [pc, #536]	; (800d044 <USART_SetConfig+0x534>)
 800ce2a:	f7f3 f96b 	bl	8000104 <__udivsi3>
 800ce2e:	0003      	movs	r3, r0
 800ce30:	005a      	lsls	r2, r3, #1
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	085b      	lsrs	r3, r3, #1
 800ce38:	18d2      	adds	r2, r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	0019      	movs	r1, r3
 800ce40:	0010      	movs	r0, r2
 800ce42:	f7f3 f95f 	bl	8000104 <__udivsi3>
 800ce46:	0003      	movs	r3, r0
 800ce48:	61bb      	str	r3, [r7, #24]
      break;
 800ce4a:	e0c3      	b.n	800cfd4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800ce4c:	f7fb ffac 	bl	8008da8 <HAL_RCC_GetSysClockFreq>
 800ce50:	0003      	movs	r3, r0
 800ce52:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d044      	beq.n	800cee6 <USART_SetConfig+0x3d6>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d03e      	beq.n	800cee2 <USART_SetConfig+0x3d2>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d038      	beq.n	800cede <USART_SetConfig+0x3ce>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce70:	2b03      	cmp	r3, #3
 800ce72:	d032      	beq.n	800ceda <USART_SetConfig+0x3ca>
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce78:	2b04      	cmp	r3, #4
 800ce7a:	d02c      	beq.n	800ced6 <USART_SetConfig+0x3c6>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce80:	2b05      	cmp	r3, #5
 800ce82:	d026      	beq.n	800ced2 <USART_SetConfig+0x3c2>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce88:	2b06      	cmp	r3, #6
 800ce8a:	d020      	beq.n	800cece <USART_SetConfig+0x3be>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce90:	2b07      	cmp	r3, #7
 800ce92:	d01a      	beq.n	800ceca <USART_SetConfig+0x3ba>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce98:	2b08      	cmp	r3, #8
 800ce9a:	d014      	beq.n	800cec6 <USART_SetConfig+0x3b6>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea0:	2b09      	cmp	r3, #9
 800cea2:	d00e      	beq.n	800cec2 <USART_SetConfig+0x3b2>
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea8:	2b0a      	cmp	r3, #10
 800ceaa:	d008      	beq.n	800cebe <USART_SetConfig+0x3ae>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb0:	2b0b      	cmp	r3, #11
 800ceb2:	d102      	bne.n	800ceba <USART_SetConfig+0x3aa>
 800ceb4:	2380      	movs	r3, #128	; 0x80
 800ceb6:	005b      	lsls	r3, r3, #1
 800ceb8:	e016      	b.n	800cee8 <USART_SetConfig+0x3d8>
 800ceba:	2301      	movs	r3, #1
 800cebc:	e014      	b.n	800cee8 <USART_SetConfig+0x3d8>
 800cebe:	2380      	movs	r3, #128	; 0x80
 800cec0:	e012      	b.n	800cee8 <USART_SetConfig+0x3d8>
 800cec2:	2340      	movs	r3, #64	; 0x40
 800cec4:	e010      	b.n	800cee8 <USART_SetConfig+0x3d8>
 800cec6:	2320      	movs	r3, #32
 800cec8:	e00e      	b.n	800cee8 <USART_SetConfig+0x3d8>
 800ceca:	2310      	movs	r3, #16
 800cecc:	e00c      	b.n	800cee8 <USART_SetConfig+0x3d8>
 800cece:	230c      	movs	r3, #12
 800ced0:	e00a      	b.n	800cee8 <USART_SetConfig+0x3d8>
 800ced2:	230a      	movs	r3, #10
 800ced4:	e008      	b.n	800cee8 <USART_SetConfig+0x3d8>
 800ced6:	2308      	movs	r3, #8
 800ced8:	e006      	b.n	800cee8 <USART_SetConfig+0x3d8>
 800ceda:	2306      	movs	r3, #6
 800cedc:	e004      	b.n	800cee8 <USART_SetConfig+0x3d8>
 800cede:	2304      	movs	r3, #4
 800cee0:	e002      	b.n	800cee8 <USART_SetConfig+0x3d8>
 800cee2:	2302      	movs	r3, #2
 800cee4:	e000      	b.n	800cee8 <USART_SetConfig+0x3d8>
 800cee6:	2301      	movs	r3, #1
 800cee8:	0019      	movs	r1, r3
 800ceea:	6938      	ldr	r0, [r7, #16]
 800ceec:	f7f3 f90a 	bl	8000104 <__udivsi3>
 800cef0:	0003      	movs	r3, r0
 800cef2:	005a      	lsls	r2, r3, #1
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	085b      	lsrs	r3, r3, #1
 800cefa:	18d2      	adds	r2, r2, r3
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	0019      	movs	r1, r3
 800cf02:	0010      	movs	r0, r2
 800cf04:	f7f3 f8fe 	bl	8000104 <__udivsi3>
 800cf08:	0003      	movs	r3, r0
 800cf0a:	61bb      	str	r3, [r7, #24]
      break;
 800cf0c:	e062      	b.n	800cfd4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d044      	beq.n	800cfa0 <USART_SetConfig+0x490>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d03e      	beq.n	800cf9c <USART_SetConfig+0x48c>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d038      	beq.n	800cf98 <USART_SetConfig+0x488>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf2a:	2b03      	cmp	r3, #3
 800cf2c:	d032      	beq.n	800cf94 <USART_SetConfig+0x484>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf32:	2b04      	cmp	r3, #4
 800cf34:	d02c      	beq.n	800cf90 <USART_SetConfig+0x480>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf3a:	2b05      	cmp	r3, #5
 800cf3c:	d026      	beq.n	800cf8c <USART_SetConfig+0x47c>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf42:	2b06      	cmp	r3, #6
 800cf44:	d020      	beq.n	800cf88 <USART_SetConfig+0x478>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4a:	2b07      	cmp	r3, #7
 800cf4c:	d01a      	beq.n	800cf84 <USART_SetConfig+0x474>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf52:	2b08      	cmp	r3, #8
 800cf54:	d014      	beq.n	800cf80 <USART_SetConfig+0x470>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf5a:	2b09      	cmp	r3, #9
 800cf5c:	d00e      	beq.n	800cf7c <USART_SetConfig+0x46c>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf62:	2b0a      	cmp	r3, #10
 800cf64:	d008      	beq.n	800cf78 <USART_SetConfig+0x468>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf6a:	2b0b      	cmp	r3, #11
 800cf6c:	d102      	bne.n	800cf74 <USART_SetConfig+0x464>
 800cf6e:	2380      	movs	r3, #128	; 0x80
 800cf70:	005b      	lsls	r3, r3, #1
 800cf72:	e016      	b.n	800cfa2 <USART_SetConfig+0x492>
 800cf74:	2301      	movs	r3, #1
 800cf76:	e014      	b.n	800cfa2 <USART_SetConfig+0x492>
 800cf78:	2380      	movs	r3, #128	; 0x80
 800cf7a:	e012      	b.n	800cfa2 <USART_SetConfig+0x492>
 800cf7c:	2340      	movs	r3, #64	; 0x40
 800cf7e:	e010      	b.n	800cfa2 <USART_SetConfig+0x492>
 800cf80:	2320      	movs	r3, #32
 800cf82:	e00e      	b.n	800cfa2 <USART_SetConfig+0x492>
 800cf84:	2310      	movs	r3, #16
 800cf86:	e00c      	b.n	800cfa2 <USART_SetConfig+0x492>
 800cf88:	230c      	movs	r3, #12
 800cf8a:	e00a      	b.n	800cfa2 <USART_SetConfig+0x492>
 800cf8c:	230a      	movs	r3, #10
 800cf8e:	e008      	b.n	800cfa2 <USART_SetConfig+0x492>
 800cf90:	2308      	movs	r3, #8
 800cf92:	e006      	b.n	800cfa2 <USART_SetConfig+0x492>
 800cf94:	2306      	movs	r3, #6
 800cf96:	e004      	b.n	800cfa2 <USART_SetConfig+0x492>
 800cf98:	2304      	movs	r3, #4
 800cf9a:	e002      	b.n	800cfa2 <USART_SetConfig+0x492>
 800cf9c:	2302      	movs	r3, #2
 800cf9e:	e000      	b.n	800cfa2 <USART_SetConfig+0x492>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	0019      	movs	r1, r3
 800cfa4:	2380      	movs	r3, #128	; 0x80
 800cfa6:	0218      	lsls	r0, r3, #8
 800cfa8:	f7f3 f8ac 	bl	8000104 <__udivsi3>
 800cfac:	0003      	movs	r3, r0
 800cfae:	005a      	lsls	r2, r3, #1
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	085b      	lsrs	r3, r3, #1
 800cfb6:	18d2      	adds	r2, r2, r3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	0019      	movs	r1, r3
 800cfbe:	0010      	movs	r0, r2
 800cfc0:	f7f3 f8a0 	bl	8000104 <__udivsi3>
 800cfc4:	0003      	movs	r3, r0
 800cfc6:	61bb      	str	r3, [r7, #24]
      break;
 800cfc8:	e004      	b.n	800cfd4 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800cfca:	231e      	movs	r3, #30
 800cfcc:	18fb      	adds	r3, r7, r3
 800cfce:	2201      	movs	r2, #1
 800cfd0:	701a      	strb	r2, [r3, #0]
      break;
 800cfd2:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	2b0f      	cmp	r3, #15
 800cfd8:	d91c      	bls.n	800d014 <USART_SetConfig+0x504>
 800cfda:	69ba      	ldr	r2, [r7, #24]
 800cfdc:	2380      	movs	r3, #128	; 0x80
 800cfde:	025b      	lsls	r3, r3, #9
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d217      	bcs.n	800d014 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cfe4:	69bb      	ldr	r3, [r7, #24]
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	200e      	movs	r0, #14
 800cfea:	183b      	adds	r3, r7, r0
 800cfec:	210f      	movs	r1, #15
 800cfee:	438a      	bics	r2, r1
 800cff0:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	085b      	lsrs	r3, r3, #1
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	2207      	movs	r2, #7
 800cffa:	4013      	ands	r3, r2
 800cffc:	b299      	uxth	r1, r3
 800cffe:	183b      	adds	r3, r7, r0
 800d000:	183a      	adds	r2, r7, r0
 800d002:	8812      	ldrh	r2, [r2, #0]
 800d004:	430a      	orrs	r2, r1
 800d006:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	183a      	adds	r2, r7, r0
 800d00e:	8812      	ldrh	r2, [r2, #0]
 800d010:	60da      	str	r2, [r3, #12]
 800d012:	e003      	b.n	800d01c <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800d014:	231e      	movs	r3, #30
 800d016:	18fb      	adds	r3, r7, r3
 800d018:	2201      	movs	r2, #1
 800d01a:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2201      	movs	r2, #1
 800d020:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2201      	movs	r2, #1
 800d026:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800d034:	231e      	movs	r3, #30
 800d036:	18fb      	adds	r3, r7, r3
 800d038:	781b      	ldrb	r3, [r3, #0]
}
 800d03a:	0018      	movs	r0, r3
 800d03c:	46bd      	mov	sp, r7
 800d03e:	b008      	add	sp, #32
 800d040:	bd80      	pop	{r7, pc}
 800d042:	46c0      	nop			; (mov r8, r8)
 800d044:	00f42400 	.word	0x00f42400

0800d048 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b086      	sub	sp, #24
 800d04c:	af02      	add	r7, sp, #8
 800d04e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d056:	f7f8 fceb 	bl	8005a30 <HAL_GetTick>
 800d05a:	0003      	movs	r3, r0
 800d05c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	2208      	movs	r2, #8
 800d066:	4013      	ands	r3, r2
 800d068:	2b08      	cmp	r3, #8
 800d06a:	d10e      	bne.n	800d08a <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	2380      	movs	r3, #128	; 0x80
 800d070:	0399      	lsls	r1, r3, #14
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	23fa      	movs	r3, #250	; 0xfa
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	0013      	movs	r3, r2
 800d07c:	2200      	movs	r2, #0
 800d07e:	f7ff fd11 	bl	800caa4 <USART_WaitOnFlagUntilTimeout>
 800d082:	1e03      	subs	r3, r0, #0
 800d084:	d001      	beq.n	800d08a <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d086:	2303      	movs	r3, #3
 800d088:	e01e      	b.n	800d0c8 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2204      	movs	r2, #4
 800d092:	4013      	ands	r3, r2
 800d094:	2b04      	cmp	r3, #4
 800d096:	d10e      	bne.n	800d0b6 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	2380      	movs	r3, #128	; 0x80
 800d09c:	03d9      	lsls	r1, r3, #15
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	23fa      	movs	r3, #250	; 0xfa
 800d0a2:	009b      	lsls	r3, r3, #2
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	0013      	movs	r3, r2
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f7ff fcfb 	bl	800caa4 <USART_WaitOnFlagUntilTimeout>
 800d0ae:	1e03      	subs	r3, r0, #0
 800d0b0:	d001      	beq.n	800d0b6 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0b2:	2303      	movs	r3, #3
 800d0b4:	e008      	b.n	800d0c8 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2259      	movs	r2, #89	; 0x59
 800d0ba:	2101      	movs	r1, #1
 800d0bc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2258      	movs	r2, #88	; 0x58
 800d0c2:	2100      	movs	r1, #0
 800d0c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d0c6:	2300      	movs	r3, #0
}
 800d0c8:	0018      	movs	r0, r3
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	b004      	add	sp, #16
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	681a      	ldr	r2, [r3, #0]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2140      	movs	r1, #64	; 0x40
 800d0e4:	438a      	bics	r2, r1
 800d0e6:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	689a      	ldr	r2, [r3, #8]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2101      	movs	r1, #1
 800d0f4:	438a      	bics	r2, r1
 800d0f6:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2259      	movs	r2, #89	; 0x59
 800d102:	5c9b      	ldrb	r3, [r3, r2]
 800d104:	b2db      	uxtb	r3, r3
 800d106:	2b12      	cmp	r3, #18
 800d108:	d114      	bne.n	800d134 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2208      	movs	r2, #8
 800d110:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	699a      	ldr	r2, [r3, #24]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2108      	movs	r1, #8
 800d11e:	430a      	orrs	r2, r1
 800d120:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2259      	movs	r2, #89	; 0x59
 800d126:	2101      	movs	r1, #1
 800d128:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	0018      	movs	r0, r3
 800d12e:	f7f5 ff71 	bl	8003014 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d132:	e00c      	b.n	800d14e <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d138:	b29b      	uxth	r3, r3
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d107      	bne.n	800d14e <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2259      	movs	r2, #89	; 0x59
 800d142:	2101      	movs	r1, #1
 800d144:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	0018      	movs	r0, r3
 800d14a:	f7ff fbff 	bl	800c94c <HAL_USART_TxRxCpltCallback>
}
 800d14e:	46c0      	nop			; (mov r8, r8)
 800d150:	46bd      	mov	sp, r7
 800d152:	b002      	add	sp, #8
 800d154:	bd80      	pop	{r7, pc}

0800d156 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b082      	sub	sp, #8
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d15e:	46c0      	nop			; (mov r8, r8)
 800d160:	46bd      	mov	sp, r7
 800d162:	b002      	add	sp, #8
 800d164:	bd80      	pop	{r7, pc}

0800d166 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b082      	sub	sp, #8
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d16e:	46c0      	nop			; (mov r8, r8)
 800d170:	46bd      	mov	sp, r7
 800d172:	b002      	add	sp, #8
 800d174:	bd80      	pop	{r7, pc}

0800d176 <LL_GPIO_SetPinMode>:
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b084      	sub	sp, #16
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	60f8      	str	r0, [r7, #12]
 800d17e:	60b9      	str	r1, [r7, #8]
 800d180:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6819      	ldr	r1, [r3, #0]
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	435b      	muls	r3, r3
 800d18a:	001a      	movs	r2, r3
 800d18c:	0013      	movs	r3, r2
 800d18e:	005b      	lsls	r3, r3, #1
 800d190:	189b      	adds	r3, r3, r2
 800d192:	43db      	mvns	r3, r3
 800d194:	400b      	ands	r3, r1
 800d196:	001a      	movs	r2, r3
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	435b      	muls	r3, r3
 800d19c:	6879      	ldr	r1, [r7, #4]
 800d19e:	434b      	muls	r3, r1
 800d1a0:	431a      	orrs	r2, r3
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	601a      	str	r2, [r3, #0]
}
 800d1a6:	46c0      	nop			; (mov r8, r8)
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	b004      	add	sp, #16
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <LL_GPIO_SetPinOutputType>:
{
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b084      	sub	sp, #16
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	60f8      	str	r0, [r7, #12]
 800d1b6:	60b9      	str	r1, [r7, #8]
 800d1b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	68ba      	ldr	r2, [r7, #8]
 800d1c0:	43d2      	mvns	r2, r2
 800d1c2:	401a      	ands	r2, r3
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	6879      	ldr	r1, [r7, #4]
 800d1c8:	434b      	muls	r3, r1
 800d1ca:	431a      	orrs	r2, r3
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	605a      	str	r2, [r3, #4]
}
 800d1d0:	46c0      	nop			; (mov r8, r8)
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	b004      	add	sp, #16
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <LL_GPIO_SetPinSpeed>:
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6899      	ldr	r1, [r3, #8]
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	435b      	muls	r3, r3
 800d1ec:	001a      	movs	r2, r3
 800d1ee:	0013      	movs	r3, r2
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	189b      	adds	r3, r3, r2
 800d1f4:	43db      	mvns	r3, r3
 800d1f6:	400b      	ands	r3, r1
 800d1f8:	001a      	movs	r2, r3
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	435b      	muls	r3, r3
 800d1fe:	6879      	ldr	r1, [r7, #4]
 800d200:	434b      	muls	r3, r1
 800d202:	431a      	orrs	r2, r3
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	609a      	str	r2, [r3, #8]
}
 800d208:	46c0      	nop			; (mov r8, r8)
 800d20a:	46bd      	mov	sp, r7
 800d20c:	b004      	add	sp, #16
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <LL_GPIO_SetPinPull>:
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	68d9      	ldr	r1, [r3, #12]
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	435b      	muls	r3, r3
 800d224:	001a      	movs	r2, r3
 800d226:	0013      	movs	r3, r2
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	189b      	adds	r3, r3, r2
 800d22c:	43db      	mvns	r3, r3
 800d22e:	400b      	ands	r3, r1
 800d230:	001a      	movs	r2, r3
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	435b      	muls	r3, r3
 800d236:	6879      	ldr	r1, [r7, #4]
 800d238:	434b      	muls	r3, r1
 800d23a:	431a      	orrs	r2, r3
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	60da      	str	r2, [r3, #12]
}
 800d240:	46c0      	nop			; (mov r8, r8)
 800d242:	46bd      	mov	sp, r7
 800d244:	b004      	add	sp, #16
 800d246:	bd80      	pop	{r7, pc}

0800d248 <LL_GPIO_SetAFPin_0_7>:
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6a19      	ldr	r1, [r3, #32]
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	435b      	muls	r3, r3
 800d25c:	68ba      	ldr	r2, [r7, #8]
 800d25e:	4353      	muls	r3, r2
 800d260:	68ba      	ldr	r2, [r7, #8]
 800d262:	435a      	muls	r2, r3
 800d264:	0013      	movs	r3, r2
 800d266:	011b      	lsls	r3, r3, #4
 800d268:	1a9b      	subs	r3, r3, r2
 800d26a:	43db      	mvns	r3, r3
 800d26c:	400b      	ands	r3, r1
 800d26e:	001a      	movs	r2, r3
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	435b      	muls	r3, r3
 800d274:	68b9      	ldr	r1, [r7, #8]
 800d276:	434b      	muls	r3, r1
 800d278:	68b9      	ldr	r1, [r7, #8]
 800d27a:	434b      	muls	r3, r1
 800d27c:	6879      	ldr	r1, [r7, #4]
 800d27e:	434b      	muls	r3, r1
 800d280:	431a      	orrs	r2, r3
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	621a      	str	r2, [r3, #32]
}
 800d286:	46c0      	nop			; (mov r8, r8)
 800d288:	46bd      	mov	sp, r7
 800d28a:	b004      	add	sp, #16
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <LL_GPIO_SetAFPin_8_15>:
{
 800d28e:	b580      	push	{r7, lr}
 800d290:	b084      	sub	sp, #16
 800d292:	af00      	add	r7, sp, #0
 800d294:	60f8      	str	r0, [r7, #12]
 800d296:	60b9      	str	r1, [r7, #8]
 800d298:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	0a1b      	lsrs	r3, r3, #8
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	0a12      	lsrs	r2, r2, #8
 800d2a6:	4353      	muls	r3, r2
 800d2a8:	68ba      	ldr	r2, [r7, #8]
 800d2aa:	0a12      	lsrs	r2, r2, #8
 800d2ac:	4353      	muls	r3, r2
 800d2ae:	68ba      	ldr	r2, [r7, #8]
 800d2b0:	0a12      	lsrs	r2, r2, #8
 800d2b2:	435a      	muls	r2, r3
 800d2b4:	0013      	movs	r3, r2
 800d2b6:	011b      	lsls	r3, r3, #4
 800d2b8:	1a9b      	subs	r3, r3, r2
 800d2ba:	43db      	mvns	r3, r3
 800d2bc:	400b      	ands	r3, r1
 800d2be:	001a      	movs	r2, r3
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	0a1b      	lsrs	r3, r3, #8
 800d2c4:	68b9      	ldr	r1, [r7, #8]
 800d2c6:	0a09      	lsrs	r1, r1, #8
 800d2c8:	434b      	muls	r3, r1
 800d2ca:	68b9      	ldr	r1, [r7, #8]
 800d2cc:	0a09      	lsrs	r1, r1, #8
 800d2ce:	434b      	muls	r3, r1
 800d2d0:	68b9      	ldr	r1, [r7, #8]
 800d2d2:	0a09      	lsrs	r1, r1, #8
 800d2d4:	434b      	muls	r3, r1
 800d2d6:	6879      	ldr	r1, [r7, #4]
 800d2d8:	434b      	muls	r3, r1
 800d2da:	431a      	orrs	r2, r3
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d2e0:	46c0      	nop			; (mov r8, r8)
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	b004      	add	sp, #16
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800d2f6:	e047      	b.n	800d388 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	2101      	movs	r1, #1
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	4091      	lsls	r1, r2
 800d302:	000a      	movs	r2, r1
 800d304:	4013      	ands	r3, r2
 800d306:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d039      	beq.n	800d382 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	2b01      	cmp	r3, #1
 800d314:	d003      	beq.n	800d31e <LL_GPIO_Init+0x36>
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	2b02      	cmp	r3, #2
 800d31c:	d10d      	bne.n	800d33a <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	689a      	ldr	r2, [r3, #8]
 800d322:	68b9      	ldr	r1, [r7, #8]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	0018      	movs	r0, r3
 800d328:	f7ff ff56 	bl	800d1d8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	68da      	ldr	r2, [r3, #12]
 800d330:	68b9      	ldr	r1, [r7, #8]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	0018      	movs	r0, r3
 800d336:	f7ff ff3a 	bl	800d1ae <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	691a      	ldr	r2, [r3, #16]
 800d33e:	68b9      	ldr	r1, [r7, #8]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	0018      	movs	r0, r3
 800d344:	f7ff ff64 	bl	800d210 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	2b02      	cmp	r3, #2
 800d34e:	d111      	bne.n	800d374 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	2bff      	cmp	r3, #255	; 0xff
 800d354:	d807      	bhi.n	800d366 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	695a      	ldr	r2, [r3, #20]
 800d35a:	68b9      	ldr	r1, [r7, #8]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	0018      	movs	r0, r3
 800d360:	f7ff ff72 	bl	800d248 <LL_GPIO_SetAFPin_0_7>
 800d364:	e006      	b.n	800d374 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	695a      	ldr	r2, [r3, #20]
 800d36a:	68b9      	ldr	r1, [r7, #8]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	0018      	movs	r0, r3
 800d370:	f7ff ff8d 	bl	800d28e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	685a      	ldr	r2, [r3, #4]
 800d378:	68b9      	ldr	r1, [r7, #8]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	0018      	movs	r0, r3
 800d37e:	f7ff fefa 	bl	800d176 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	3301      	adds	r3, #1
 800d386:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	40da      	lsrs	r2, r3
 800d390:	1e13      	subs	r3, r2, #0
 800d392:	d1b1      	bne.n	800d2f8 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800d394:	2300      	movs	r3, #0
}
 800d396:	0018      	movs	r0, r3
 800d398:	46bd      	mov	sp, r7
 800d39a:	b004      	add	sp, #16
 800d39c:	bd80      	pop	{r7, pc}
	...

0800d3a0 <LL_RCC_HSI_IsReady>:
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800d3a4:	4b07      	ldr	r3, [pc, #28]	; (800d3c4 <LL_RCC_HSI_IsReady+0x24>)
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	2380      	movs	r3, #128	; 0x80
 800d3aa:	00db      	lsls	r3, r3, #3
 800d3ac:	401a      	ands	r2, r3
 800d3ae:	2380      	movs	r3, #128	; 0x80
 800d3b0:	00db      	lsls	r3, r3, #3
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d101      	bne.n	800d3ba <LL_RCC_HSI_IsReady+0x1a>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e000      	b.n	800d3bc <LL_RCC_HSI_IsReady+0x1c>
 800d3ba:	2300      	movs	r3, #0
}
 800d3bc:	0018      	movs	r0, r3
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	46c0      	nop			; (mov r8, r8)
 800d3c4:	40021000 	.word	0x40021000

0800d3c8 <LL_RCC_LSE_IsReady>:
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800d3cc:	4b05      	ldr	r3, [pc, #20]	; (800d3e4 <LL_RCC_LSE_IsReady+0x1c>)
 800d3ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3d0:	2202      	movs	r2, #2
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	2b02      	cmp	r3, #2
 800d3d6:	d101      	bne.n	800d3dc <LL_RCC_LSE_IsReady+0x14>
 800d3d8:	2301      	movs	r3, #1
 800d3da:	e000      	b.n	800d3de <LL_RCC_LSE_IsReady+0x16>
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	0018      	movs	r0, r3
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	40021000 	.word	0x40021000

0800d3e8 <LL_RCC_GetSysClkSource>:
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800d3ec:	4b03      	ldr	r3, [pc, #12]	; (800d3fc <LL_RCC_GetSysClkSource+0x14>)
 800d3ee:	689b      	ldr	r3, [r3, #8]
 800d3f0:	2238      	movs	r2, #56	; 0x38
 800d3f2:	4013      	ands	r3, r2
}
 800d3f4:	0018      	movs	r0, r3
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	46c0      	nop			; (mov r8, r8)
 800d3fc:	40021000 	.word	0x40021000

0800d400 <LL_RCC_GetAHBPrescaler>:
{
 800d400:	b580      	push	{r7, lr}
 800d402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800d404:	4b03      	ldr	r3, [pc, #12]	; (800d414 <LL_RCC_GetAHBPrescaler+0x14>)
 800d406:	689a      	ldr	r2, [r3, #8]
 800d408:	23f0      	movs	r3, #240	; 0xf0
 800d40a:	011b      	lsls	r3, r3, #4
 800d40c:	4013      	ands	r3, r2
}
 800d40e:	0018      	movs	r0, r3
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	40021000 	.word	0x40021000

0800d418 <LL_RCC_GetAPB1Prescaler>:
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800d41c:	4b03      	ldr	r3, [pc, #12]	; (800d42c <LL_RCC_GetAPB1Prescaler+0x14>)
 800d41e:	689a      	ldr	r2, [r3, #8]
 800d420:	23e0      	movs	r3, #224	; 0xe0
 800d422:	01db      	lsls	r3, r3, #7
 800d424:	4013      	ands	r3, r2
}
 800d426:	0018      	movs	r0, r3
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	40021000 	.word	0x40021000

0800d430 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800d438:	4b05      	ldr	r3, [pc, #20]	; (800d450 <LL_RCC_GetUSARTClockSource+0x20>)
 800d43a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	401a      	ands	r2, r3
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	041b      	lsls	r3, r3, #16
 800d444:	4313      	orrs	r3, r2
}
 800d446:	0018      	movs	r0, r3
 800d448:	46bd      	mov	sp, r7
 800d44a:	b002      	add	sp, #8
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	46c0      	nop			; (mov r8, r8)
 800d450:	40021000 	.word	0x40021000

0800d454 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800d458:	4b03      	ldr	r3, [pc, #12]	; (800d468 <LL_RCC_PLL_GetN+0x14>)
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	0a1b      	lsrs	r3, r3, #8
 800d45e:	227f      	movs	r2, #127	; 0x7f
 800d460:	4013      	ands	r3, r2
}
 800d462:	0018      	movs	r0, r3
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	40021000 	.word	0x40021000

0800d46c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800d470:	4b03      	ldr	r3, [pc, #12]	; (800d480 <LL_RCC_PLL_GetR+0x14>)
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	0f5b      	lsrs	r3, r3, #29
 800d476:	075b      	lsls	r3, r3, #29
}
 800d478:	0018      	movs	r0, r3
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	46c0      	nop			; (mov r8, r8)
 800d480:	40021000 	.word	0x40021000

0800d484 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800d488:	4b03      	ldr	r3, [pc, #12]	; (800d498 <LL_RCC_PLL_GetMainSource+0x14>)
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	2203      	movs	r2, #3
 800d48e:	4013      	ands	r3, r2
}
 800d490:	0018      	movs	r0, r3
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	46c0      	nop			; (mov r8, r8)
 800d498:	40021000 	.word	0x40021000

0800d49c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800d4a0:	4b03      	ldr	r3, [pc, #12]	; (800d4b0 <LL_RCC_PLL_GetDivider+0x14>)
 800d4a2:	68db      	ldr	r3, [r3, #12]
 800d4a4:	2270      	movs	r2, #112	; 0x70
 800d4a6:	4013      	ands	r3, r2
}
 800d4a8:	0018      	movs	r0, r3
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	46c0      	nop			; (mov r8, r8)
 800d4b0:	40021000 	.word	0x40021000

0800d4b4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800d4bc:	f000 f8a8 	bl	800d610 <RCC_GetSystemClockFreq>
 800d4c0:	0002      	movs	r2, r0
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	0018      	movs	r0, r3
 800d4cc:	f000 f8ce 	bl	800d66c <RCC_GetHCLKClockFreq>
 800d4d0:	0002      	movs	r2, r0
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	0018      	movs	r0, r3
 800d4dc:	f000 f8de 	bl	800d69c <RCC_GetPCLK1ClockFreq>
 800d4e0:	0002      	movs	r2, r0
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	609a      	str	r2, [r3, #8]
}
 800d4e6:	46c0      	nop			; (mov r8, r8)
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	b002      	add	sp, #8
 800d4ec:	bd80      	pop	{r7, pc}
	...

0800d4f0 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d134      	bne.n	800d56c <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	0018      	movs	r0, r3
 800d506:	f7ff ff93 	bl	800d430 <LL_RCC_GetUSARTClockSource>
 800d50a:	0003      	movs	r3, r0
 800d50c:	4a39      	ldr	r2, [pc, #228]	; (800d5f4 <LL_RCC_GetUSARTClockFreq+0x104>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d016      	beq.n	800d540 <LL_RCC_GetUSARTClockFreq+0x50>
 800d512:	4a38      	ldr	r2, [pc, #224]	; (800d5f4 <LL_RCC_GetUSARTClockFreq+0x104>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d81c      	bhi.n	800d552 <LL_RCC_GetUSARTClockFreq+0x62>
 800d518:	4a37      	ldr	r2, [pc, #220]	; (800d5f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d003      	beq.n	800d526 <LL_RCC_GetUSARTClockFreq+0x36>
 800d51e:	4a37      	ldr	r2, [pc, #220]	; (800d5fc <LL_RCC_GetUSARTClockFreq+0x10c>)
 800d520:	4293      	cmp	r3, r2
 800d522:	d005      	beq.n	800d530 <LL_RCC_GetUSARTClockFreq+0x40>
 800d524:	e015      	b.n	800d552 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800d526:	f000 f873 	bl	800d610 <RCC_GetSystemClockFreq>
 800d52a:	0003      	movs	r3, r0
 800d52c:	60fb      	str	r3, [r7, #12]
        break;
 800d52e:	e05c      	b.n	800d5ea <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800d530:	f7ff ff36 	bl	800d3a0 <LL_RCC_HSI_IsReady>
 800d534:	0003      	movs	r3, r0
 800d536:	2b01      	cmp	r3, #1
 800d538:	d150      	bne.n	800d5dc <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800d53a:	4b31      	ldr	r3, [pc, #196]	; (800d600 <LL_RCC_GetUSARTClockFreq+0x110>)
 800d53c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800d53e:	e04d      	b.n	800d5dc <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800d540:	f7ff ff42 	bl	800d3c8 <LL_RCC_LSE_IsReady>
 800d544:	0003      	movs	r3, r0
 800d546:	2b01      	cmp	r3, #1
 800d548:	d14a      	bne.n	800d5e0 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800d54a:	2380      	movs	r3, #128	; 0x80
 800d54c:	021b      	lsls	r3, r3, #8
 800d54e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800d550:	e046      	b.n	800d5e0 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800d552:	f000 f85d 	bl	800d610 <RCC_GetSystemClockFreq>
 800d556:	0003      	movs	r3, r0
 800d558:	0018      	movs	r0, r3
 800d55a:	f000 f887 	bl	800d66c <RCC_GetHCLKClockFreq>
 800d55e:	0003      	movs	r3, r0
 800d560:	0018      	movs	r0, r3
 800d562:	f000 f89b 	bl	800d69c <RCC_GetPCLK1ClockFreq>
 800d566:	0003      	movs	r3, r0
 800d568:	60fb      	str	r3, [r7, #12]
        break;
 800d56a:	e03e      	b.n	800d5ea <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2b0c      	cmp	r3, #12
 800d570:	d13b      	bne.n	800d5ea <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	0018      	movs	r0, r3
 800d576:	f7ff ff5b 	bl	800d430 <LL_RCC_GetUSARTClockSource>
 800d57a:	0003      	movs	r3, r0
 800d57c:	4a21      	ldr	r2, [pc, #132]	; (800d604 <LL_RCC_GetUSARTClockFreq+0x114>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d016      	beq.n	800d5b0 <LL_RCC_GetUSARTClockFreq+0xc0>
 800d582:	4a20      	ldr	r2, [pc, #128]	; (800d604 <LL_RCC_GetUSARTClockFreq+0x114>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d81c      	bhi.n	800d5c2 <LL_RCC_GetUSARTClockFreq+0xd2>
 800d588:	4a1f      	ldr	r2, [pc, #124]	; (800d608 <LL_RCC_GetUSARTClockFreq+0x118>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d003      	beq.n	800d596 <LL_RCC_GetUSARTClockFreq+0xa6>
 800d58e:	4a1f      	ldr	r2, [pc, #124]	; (800d60c <LL_RCC_GetUSARTClockFreq+0x11c>)
 800d590:	4293      	cmp	r3, r2
 800d592:	d005      	beq.n	800d5a0 <LL_RCC_GetUSARTClockFreq+0xb0>
 800d594:	e015      	b.n	800d5c2 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800d596:	f000 f83b 	bl	800d610 <RCC_GetSystemClockFreq>
 800d59a:	0003      	movs	r3, r0
 800d59c:	60fb      	str	r3, [r7, #12]
        break;
 800d59e:	e024      	b.n	800d5ea <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800d5a0:	f7ff fefe 	bl	800d3a0 <LL_RCC_HSI_IsReady>
 800d5a4:	0003      	movs	r3, r0
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d11c      	bne.n	800d5e4 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800d5aa:	4b15      	ldr	r3, [pc, #84]	; (800d600 <LL_RCC_GetUSARTClockFreq+0x110>)
 800d5ac:	60fb      	str	r3, [r7, #12]
        }
        break;
 800d5ae:	e019      	b.n	800d5e4 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800d5b0:	f7ff ff0a 	bl	800d3c8 <LL_RCC_LSE_IsReady>
 800d5b4:	0003      	movs	r3, r0
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d116      	bne.n	800d5e8 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800d5ba:	2380      	movs	r3, #128	; 0x80
 800d5bc:	021b      	lsls	r3, r3, #8
 800d5be:	60fb      	str	r3, [r7, #12]
        }
        break;
 800d5c0:	e012      	b.n	800d5e8 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800d5c2:	f000 f825 	bl	800d610 <RCC_GetSystemClockFreq>
 800d5c6:	0003      	movs	r3, r0
 800d5c8:	0018      	movs	r0, r3
 800d5ca:	f000 f84f 	bl	800d66c <RCC_GetHCLKClockFreq>
 800d5ce:	0003      	movs	r3, r0
 800d5d0:	0018      	movs	r0, r3
 800d5d2:	f000 f863 	bl	800d69c <RCC_GetPCLK1ClockFreq>
 800d5d6:	0003      	movs	r3, r0
 800d5d8:	60fb      	str	r3, [r7, #12]
        break;
 800d5da:	e006      	b.n	800d5ea <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800d5dc:	46c0      	nop			; (mov r8, r8)
 800d5de:	e004      	b.n	800d5ea <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800d5e0:	46c0      	nop			; (mov r8, r8)
 800d5e2:	e002      	b.n	800d5ea <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800d5e4:	46c0      	nop			; (mov r8, r8)
 800d5e6:	e000      	b.n	800d5ea <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800d5e8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
}
 800d5ec:	0018      	movs	r0, r3
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	b004      	add	sp, #16
 800d5f2:	bd80      	pop	{r7, pc}
 800d5f4:	00030003 	.word	0x00030003
 800d5f8:	00030001 	.word	0x00030001
 800d5fc:	00030002 	.word	0x00030002
 800d600:	00f42400 	.word	0x00f42400
 800d604:	000c000c 	.word	0x000c000c
 800d608:	000c0004 	.word	0x000c0004
 800d60c:	000c0008 	.word	0x000c0008

0800d610 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800d616:	f7ff fee7 	bl	800d3e8 <LL_RCC_GetSysClkSource>
 800d61a:	0003      	movs	r3, r0
 800d61c:	2b08      	cmp	r3, #8
 800d61e:	d002      	beq.n	800d626 <RCC_GetSystemClockFreq+0x16>
 800d620:	2b10      	cmp	r3, #16
 800d622:	d003      	beq.n	800d62c <RCC_GetSystemClockFreq+0x1c>
 800d624:	e007      	b.n	800d636 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800d626:	4b0e      	ldr	r3, [pc, #56]	; (800d660 <RCC_GetSystemClockFreq+0x50>)
 800d628:	607b      	str	r3, [r7, #4]
      break;
 800d62a:	e014      	b.n	800d656 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800d62c:	f000 f84c 	bl	800d6c8 <RCC_PLL_GetFreqDomain_SYS>
 800d630:	0003      	movs	r3, r0
 800d632:	607b      	str	r3, [r7, #4]
      break;
 800d634:	e00f      	b.n	800d656 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800d636:	4b0b      	ldr	r3, [pc, #44]	; (800d664 <RCC_GetSystemClockFreq+0x54>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	0adb      	lsrs	r3, r3, #11
 800d63c:	2207      	movs	r2, #7
 800d63e:	4013      	ands	r3, r2
 800d640:	2201      	movs	r2, #1
 800d642:	409a      	lsls	r2, r3
 800d644:	0013      	movs	r3, r2
 800d646:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800d648:	6839      	ldr	r1, [r7, #0]
 800d64a:	4807      	ldr	r0, [pc, #28]	; (800d668 <RCC_GetSystemClockFreq+0x58>)
 800d64c:	f7f2 fd5a 	bl	8000104 <__udivsi3>
 800d650:	0003      	movs	r3, r0
 800d652:	607b      	str	r3, [r7, #4]
      break;
 800d654:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800d656:	687b      	ldr	r3, [r7, #4]
}
 800d658:	0018      	movs	r0, r3
 800d65a:	46bd      	mov	sp, r7
 800d65c:	b002      	add	sp, #8
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	007a1200 	.word	0x007a1200
 800d664:	40021000 	.word	0x40021000
 800d668:	00f42400 	.word	0x00f42400

0800d66c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800d674:	f7ff fec4 	bl	800d400 <LL_RCC_GetAHBPrescaler>
 800d678:	0003      	movs	r3, r0
 800d67a:	0a1b      	lsrs	r3, r3, #8
 800d67c:	220f      	movs	r2, #15
 800d67e:	401a      	ands	r2, r3
 800d680:	4b05      	ldr	r3, [pc, #20]	; (800d698 <RCC_GetHCLKClockFreq+0x2c>)
 800d682:	0092      	lsls	r2, r2, #2
 800d684:	58d3      	ldr	r3, [r2, r3]
 800d686:	221f      	movs	r2, #31
 800d688:	4013      	ands	r3, r2
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	40da      	lsrs	r2, r3
 800d68e:	0013      	movs	r3, r2
}
 800d690:	0018      	movs	r0, r3
 800d692:	46bd      	mov	sp, r7
 800d694:	b002      	add	sp, #8
 800d696:	bd80      	pop	{r7, pc}
 800d698:	08011bbc 	.word	0x08011bbc

0800d69c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800d6a4:	f7ff feb8 	bl	800d418 <LL_RCC_GetAPB1Prescaler>
 800d6a8:	0003      	movs	r3, r0
 800d6aa:	0b1a      	lsrs	r2, r3, #12
 800d6ac:	4b05      	ldr	r3, [pc, #20]	; (800d6c4 <RCC_GetPCLK1ClockFreq+0x28>)
 800d6ae:	0092      	lsls	r2, r2, #2
 800d6b0:	58d3      	ldr	r3, [r2, r3]
 800d6b2:	221f      	movs	r2, #31
 800d6b4:	4013      	ands	r3, r2
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	40da      	lsrs	r2, r3
 800d6ba:	0013      	movs	r3, r2
}
 800d6bc:	0018      	movs	r0, r3
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	b002      	add	sp, #8
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	08011bfc 	.word	0x08011bfc

0800d6c8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800d6c8:	b590      	push	{r4, r7, lr}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800d6ce:	f7ff fed9 	bl	800d484 <LL_RCC_PLL_GetMainSource>
 800d6d2:	0003      	movs	r3, r0
 800d6d4:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	2b02      	cmp	r3, #2
 800d6da:	d003      	beq.n	800d6e4 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	2b03      	cmp	r3, #3
 800d6e0:	d003      	beq.n	800d6ea <RCC_PLL_GetFreqDomain_SYS+0x22>
 800d6e2:	e005      	b.n	800d6f0 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800d6e4:	4b13      	ldr	r3, [pc, #76]	; (800d734 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800d6e6:	607b      	str	r3, [r7, #4]
      break;
 800d6e8:	e005      	b.n	800d6f6 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800d6ea:	4b13      	ldr	r3, [pc, #76]	; (800d738 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800d6ec:	607b      	str	r3, [r7, #4]
      break;
 800d6ee:	e002      	b.n	800d6f6 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800d6f0:	4b10      	ldr	r3, [pc, #64]	; (800d734 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800d6f2:	607b      	str	r3, [r7, #4]
      break;
 800d6f4:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800d6f6:	f7ff fead 	bl	800d454 <LL_RCC_PLL_GetN>
 800d6fa:	0002      	movs	r2, r0
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	4353      	muls	r3, r2
 800d700:	001c      	movs	r4, r3
 800d702:	f7ff fecb 	bl	800d49c <LL_RCC_PLL_GetDivider>
 800d706:	0003      	movs	r3, r0
 800d708:	091b      	lsrs	r3, r3, #4
 800d70a:	3301      	adds	r3, #1
 800d70c:	0019      	movs	r1, r3
 800d70e:	0020      	movs	r0, r4
 800d710:	f7f2 fcf8 	bl	8000104 <__udivsi3>
 800d714:	0003      	movs	r3, r0
 800d716:	001c      	movs	r4, r3
 800d718:	f7ff fea8 	bl	800d46c <LL_RCC_PLL_GetR>
 800d71c:	0003      	movs	r3, r0
 800d71e:	0f5b      	lsrs	r3, r3, #29
 800d720:	3301      	adds	r3, #1
 800d722:	0019      	movs	r1, r3
 800d724:	0020      	movs	r0, r4
 800d726:	f7f2 fced 	bl	8000104 <__udivsi3>
 800d72a:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800d72c:	0018      	movs	r0, r3
 800d72e:	46bd      	mov	sp, r7
 800d730:	b003      	add	sp, #12
 800d732:	bd90      	pop	{r4, r7, pc}
 800d734:	00f42400 	.word	0x00f42400
 800d738:	007a1200 	.word	0x007a1200

0800d73c <LL_USART_IsEnabled>:
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2201      	movs	r2, #1
 800d74a:	4013      	ands	r3, r2
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d101      	bne.n	800d754 <LL_USART_IsEnabled+0x18>
 800d750:	2301      	movs	r3, #1
 800d752:	e000      	b.n	800d756 <LL_USART_IsEnabled+0x1a>
 800d754:	2300      	movs	r3, #0
}
 800d756:	0018      	movs	r0, r3
 800d758:	46bd      	mov	sp, r7
 800d75a:	b002      	add	sp, #8
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <LL_USART_SetPrescaler>:
{
 800d75e:	b580      	push	{r7, lr}
 800d760:	b082      	sub	sp, #8
 800d762:	af00      	add	r7, sp, #0
 800d764:	6078      	str	r0, [r7, #4]
 800d766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d76c:	220f      	movs	r2, #15
 800d76e:	4393      	bics	r3, r2
 800d770:	683a      	ldr	r2, [r7, #0]
 800d772:	b292      	uxth	r2, r2
 800d774:	431a      	orrs	r2, r3
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800d77a:	46c0      	nop			; (mov r8, r8)
 800d77c:	46bd      	mov	sp, r7
 800d77e:	b002      	add	sp, #8
 800d780:	bd80      	pop	{r7, pc}
	...

0800d784 <LL_USART_SetStopBitsLength>:
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	4a05      	ldr	r2, [pc, #20]	; (800d7a8 <LL_USART_SetStopBitsLength+0x24>)
 800d794:	401a      	ands	r2, r3
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	431a      	orrs	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	605a      	str	r2, [r3, #4]
}
 800d79e:	46c0      	nop			; (mov r8, r8)
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	b002      	add	sp, #8
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	46c0      	nop			; (mov r8, r8)
 800d7a8:	ffffcfff 	.word	0xffffcfff

0800d7ac <LL_USART_SetHWFlowCtrl>:
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	689b      	ldr	r3, [r3, #8]
 800d7ba:	4a05      	ldr	r2, [pc, #20]	; (800d7d0 <LL_USART_SetHWFlowCtrl+0x24>)
 800d7bc:	401a      	ands	r2, r3
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	431a      	orrs	r2, r3
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	609a      	str	r2, [r3, #8]
}
 800d7c6:	46c0      	nop			; (mov r8, r8)
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	b002      	add	sp, #8
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	46c0      	nop			; (mov r8, r8)
 800d7d0:	fffffcff 	.word	0xfffffcff

0800d7d4 <LL_USART_SetBaudRate>:
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b086      	sub	sp, #24
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	607a      	str	r2, [r7, #4]
 800d7e0:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2b0b      	cmp	r3, #11
 800d7e6:	d843      	bhi.n	800d870 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800d7e8:	683a      	ldr	r2, [r7, #0]
 800d7ea:	2380      	movs	r3, #128	; 0x80
 800d7ec:	021b      	lsls	r3, r3, #8
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d126      	bne.n	800d840 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	001a      	movs	r2, r3
 800d7f8:	4b1f      	ldr	r3, [pc, #124]	; (800d878 <LL_USART_SetBaudRate+0xa4>)
 800d7fa:	0092      	lsls	r2, r2, #2
 800d7fc:	58d3      	ldr	r3, [r2, r3]
 800d7fe:	0019      	movs	r1, r3
 800d800:	68b8      	ldr	r0, [r7, #8]
 800d802:	f7f2 fc7f 	bl	8000104 <__udivsi3>
 800d806:	0003      	movs	r3, r0
 800d808:	005a      	lsls	r2, r3, #1
 800d80a:	6a3b      	ldr	r3, [r7, #32]
 800d80c:	085b      	lsrs	r3, r3, #1
 800d80e:	18d3      	adds	r3, r2, r3
 800d810:	6a39      	ldr	r1, [r7, #32]
 800d812:	0018      	movs	r0, r3
 800d814:	f7f2 fc76 	bl	8000104 <__udivsi3>
 800d818:	0003      	movs	r3, r0
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	4a16      	ldr	r2, [pc, #88]	; (800d87c <LL_USART_SetBaudRate+0xa8>)
 800d822:	4013      	ands	r3, r2
 800d824:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	085b      	lsrs	r3, r3, #1
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	001a      	movs	r2, r3
 800d82e:	2307      	movs	r3, #7
 800d830:	4013      	ands	r3, r2
 800d832:	693a      	ldr	r2, [r7, #16]
 800d834:	4313      	orrs	r3, r2
 800d836:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	693a      	ldr	r2, [r7, #16]
 800d83c:	60da      	str	r2, [r3, #12]
}
 800d83e:	e017      	b.n	800d870 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	b2db      	uxtb	r3, r3
 800d844:	001a      	movs	r2, r3
 800d846:	4b0c      	ldr	r3, [pc, #48]	; (800d878 <LL_USART_SetBaudRate+0xa4>)
 800d848:	0092      	lsls	r2, r2, #2
 800d84a:	58d3      	ldr	r3, [r2, r3]
 800d84c:	0019      	movs	r1, r3
 800d84e:	68b8      	ldr	r0, [r7, #8]
 800d850:	f7f2 fc58 	bl	8000104 <__udivsi3>
 800d854:	0003      	movs	r3, r0
 800d856:	001a      	movs	r2, r3
 800d858:	6a3b      	ldr	r3, [r7, #32]
 800d85a:	085b      	lsrs	r3, r3, #1
 800d85c:	18d3      	adds	r3, r2, r3
 800d85e:	6a39      	ldr	r1, [r7, #32]
 800d860:	0018      	movs	r0, r3
 800d862:	f7f2 fc4f 	bl	8000104 <__udivsi3>
 800d866:	0003      	movs	r3, r0
 800d868:	b29b      	uxth	r3, r3
 800d86a:	001a      	movs	r2, r3
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	60da      	str	r2, [r3, #12]
}
 800d870:	46c0      	nop			; (mov r8, r8)
 800d872:	46bd      	mov	sp, r7
 800d874:	b006      	add	sp, #24
 800d876:	bd80      	pop	{r7, pc}
 800d878:	08011c70 	.word	0x08011c70
 800d87c:	0000fff0 	.word	0x0000fff0

0800d880 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800d880:	b590      	push	{r4, r7, lr}
 800d882:	b08b      	sub	sp, #44	; 0x2c
 800d884:	af02      	add	r7, sp, #8
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800d88a:	231f      	movs	r3, #31
 800d88c:	18fb      	adds	r3, r7, r3
 800d88e:	2201      	movs	r2, #1
 800d890:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800d892:	2300      	movs	r3, #0
 800d894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	0018      	movs	r0, r3
 800d89a:	f7ff ff4f 	bl	800d73c <LL_USART_IsEnabled>
 800d89e:	1e03      	subs	r3, r0, #0
 800d8a0:	d16a      	bne.n	800d978 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4a38      	ldr	r2, [pc, #224]	; (800d988 <LL_USART_Init+0x108>)
 800d8a8:	401a      	ands	r2, r3
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	6899      	ldr	r1, [r3, #8]
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	691b      	ldr	r3, [r3, #16]
 800d8b2:	4319      	orrs	r1, r3
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	695b      	ldr	r3, [r3, #20]
 800d8b8:	4319      	orrs	r1, r3
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	69db      	ldr	r3, [r3, #28]
 800d8be:	430b      	orrs	r3, r1
 800d8c0:	431a      	orrs	r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	68da      	ldr	r2, [r3, #12]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	0011      	movs	r1, r2
 800d8ce:	0018      	movs	r0, r3
 800d8d0:	f7ff ff58 	bl	800d784 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	699a      	ldr	r2, [r3, #24]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	0011      	movs	r1, r2
 800d8dc:	0018      	movs	r0, r3
 800d8de:	f7ff ff65 	bl	800d7ac <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	4a29      	ldr	r2, [pc, #164]	; (800d98c <LL_USART_Init+0x10c>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d105      	bne.n	800d8f6 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800d8ea:	2003      	movs	r0, #3
 800d8ec:	f7ff fe00 	bl	800d4f0 <LL_RCC_GetUSARTClockFreq>
 800d8f0:	0003      	movs	r3, r0
 800d8f2:	61bb      	str	r3, [r7, #24]
 800d8f4:	e022      	b.n	800d93c <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	4a25      	ldr	r2, [pc, #148]	; (800d990 <LL_USART_Init+0x110>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d105      	bne.n	800d90a <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800d8fe:	200c      	movs	r0, #12
 800d900:	f7ff fdf6 	bl	800d4f0 <LL_RCC_GetUSARTClockFreq>
 800d904:	0003      	movs	r3, r0
 800d906:	61bb      	str	r3, [r7, #24]
 800d908:	e018      	b.n	800d93c <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	4a21      	ldr	r2, [pc, #132]	; (800d994 <LL_USART_Init+0x114>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d108      	bne.n	800d924 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800d912:	240c      	movs	r4, #12
 800d914:	193b      	adds	r3, r7, r4
 800d916:	0018      	movs	r0, r3
 800d918:	f7ff fdcc 	bl	800d4b4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800d91c:	193b      	adds	r3, r7, r4
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	61bb      	str	r3, [r7, #24]
 800d922:	e00b      	b.n	800d93c <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	4a1c      	ldr	r2, [pc, #112]	; (800d998 <LL_USART_Init+0x118>)
 800d928:	4293      	cmp	r3, r2
 800d92a:	d107      	bne.n	800d93c <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800d92c:	240c      	movs	r4, #12
 800d92e:	193b      	adds	r3, r7, r4
 800d930:	0018      	movs	r0, r3
 800d932:	f7ff fdbf 	bl	800d4b4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800d936:	193b      	adds	r3, r7, r4
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d013      	beq.n	800d96a <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00f      	beq.n	800d96a <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800d94a:	231f      	movs	r3, #31
 800d94c:	18fb      	adds	r3, r7, r3
 800d94e:	2200      	movs	r2, #0
 800d950:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	69dc      	ldr	r4, [r3, #28]
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	69b9      	ldr	r1, [r7, #24]
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	0023      	movs	r3, r4
 800d966:	f7ff ff35 	bl	800d7d4 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	0011      	movs	r1, r2
 800d972:	0018      	movs	r0, r3
 800d974:	f7ff fef3 	bl	800d75e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800d978:	231f      	movs	r3, #31
 800d97a:	18fb      	adds	r3, r7, r3
 800d97c:	781b      	ldrb	r3, [r3, #0]
}
 800d97e:	0018      	movs	r0, r3
 800d980:	46bd      	mov	sp, r7
 800d982:	b009      	add	sp, #36	; 0x24
 800d984:	bd90      	pop	{r4, r7, pc}
 800d986:	46c0      	nop			; (mov r8, r8)
 800d988:	efff69f3 	.word	0xefff69f3
 800d98c:	40013800 	.word	0x40013800
 800d990:	40004400 	.word	0x40004400
 800d994:	40004800 	.word	0x40004800
 800d998:	40004c00 	.word	0x40004c00

0800d99c <__libc_init_array>:
 800d99c:	b570      	push	{r4, r5, r6, lr}
 800d99e:	2600      	movs	r6, #0
 800d9a0:	4d0c      	ldr	r5, [pc, #48]	; (800d9d4 <__libc_init_array+0x38>)
 800d9a2:	4c0d      	ldr	r4, [pc, #52]	; (800d9d8 <__libc_init_array+0x3c>)
 800d9a4:	1b64      	subs	r4, r4, r5
 800d9a6:	10a4      	asrs	r4, r4, #2
 800d9a8:	42a6      	cmp	r6, r4
 800d9aa:	d109      	bne.n	800d9c0 <__libc_init_array+0x24>
 800d9ac:	2600      	movs	r6, #0
 800d9ae:	f001 f837 	bl	800ea20 <_init>
 800d9b2:	4d0a      	ldr	r5, [pc, #40]	; (800d9dc <__libc_init_array+0x40>)
 800d9b4:	4c0a      	ldr	r4, [pc, #40]	; (800d9e0 <__libc_init_array+0x44>)
 800d9b6:	1b64      	subs	r4, r4, r5
 800d9b8:	10a4      	asrs	r4, r4, #2
 800d9ba:	42a6      	cmp	r6, r4
 800d9bc:	d105      	bne.n	800d9ca <__libc_init_array+0x2e>
 800d9be:	bd70      	pop	{r4, r5, r6, pc}
 800d9c0:	00b3      	lsls	r3, r6, #2
 800d9c2:	58eb      	ldr	r3, [r5, r3]
 800d9c4:	4798      	blx	r3
 800d9c6:	3601      	adds	r6, #1
 800d9c8:	e7ee      	b.n	800d9a8 <__libc_init_array+0xc>
 800d9ca:	00b3      	lsls	r3, r6, #2
 800d9cc:	58eb      	ldr	r3, [r5, r3]
 800d9ce:	4798      	blx	r3
 800d9d0:	3601      	adds	r6, #1
 800d9d2:	e7f2      	b.n	800d9ba <__libc_init_array+0x1e>
 800d9d4:	08011e78 	.word	0x08011e78
 800d9d8:	08011e78 	.word	0x08011e78
 800d9dc:	08011e78 	.word	0x08011e78
 800d9e0:	08011e7c 	.word	0x08011e7c

0800d9e4 <memset>:
 800d9e4:	0003      	movs	r3, r0
 800d9e6:	1882      	adds	r2, r0, r2
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d100      	bne.n	800d9ee <memset+0xa>
 800d9ec:	4770      	bx	lr
 800d9ee:	7019      	strb	r1, [r3, #0]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	e7f9      	b.n	800d9e8 <memset+0x4>

0800d9f4 <sin>:
 800d9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9f6:	4a20      	ldr	r2, [pc, #128]	; (800da78 <sin+0x84>)
 800d9f8:	004b      	lsls	r3, r1, #1
 800d9fa:	b087      	sub	sp, #28
 800d9fc:	085b      	lsrs	r3, r3, #1
 800d9fe:	4293      	cmp	r3, r2
 800da00:	dc06      	bgt.n	800da10 <sin+0x1c>
 800da02:	2300      	movs	r3, #0
 800da04:	2200      	movs	r2, #0
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	2300      	movs	r3, #0
 800da0a:	f000 fe5b 	bl	800e6c4 <__kernel_sin>
 800da0e:	e006      	b.n	800da1e <sin+0x2a>
 800da10:	4a1a      	ldr	r2, [pc, #104]	; (800da7c <sin+0x88>)
 800da12:	4293      	cmp	r3, r2
 800da14:	dd05      	ble.n	800da22 <sin+0x2e>
 800da16:	0002      	movs	r2, r0
 800da18:	000b      	movs	r3, r1
 800da1a:	f7f3 ff21 	bl	8001860 <__aeabi_dsub>
 800da1e:	b007      	add	sp, #28
 800da20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da22:	aa02      	add	r2, sp, #8
 800da24:	f000 f82c 	bl	800da80 <__ieee754_rem_pio2>
 800da28:	9c04      	ldr	r4, [sp, #16]
 800da2a:	9d05      	ldr	r5, [sp, #20]
 800da2c:	2303      	movs	r3, #3
 800da2e:	4003      	ands	r3, r0
 800da30:	2b01      	cmp	r3, #1
 800da32:	d00a      	beq.n	800da4a <sin+0x56>
 800da34:	9802      	ldr	r0, [sp, #8]
 800da36:	9903      	ldr	r1, [sp, #12]
 800da38:	2b02      	cmp	r3, #2
 800da3a:	d00d      	beq.n	800da58 <sin+0x64>
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d115      	bne.n	800da6c <sin+0x78>
 800da40:	3301      	adds	r3, #1
 800da42:	9300      	str	r3, [sp, #0]
 800da44:	0022      	movs	r2, r4
 800da46:	002b      	movs	r3, r5
 800da48:	e7df      	b.n	800da0a <sin+0x16>
 800da4a:	0022      	movs	r2, r4
 800da4c:	9802      	ldr	r0, [sp, #8]
 800da4e:	9903      	ldr	r1, [sp, #12]
 800da50:	002b      	movs	r3, r5
 800da52:	f000 fa01 	bl	800de58 <__kernel_cos>
 800da56:	e7e2      	b.n	800da1e <sin+0x2a>
 800da58:	2301      	movs	r3, #1
 800da5a:	0022      	movs	r2, r4
 800da5c:	9300      	str	r3, [sp, #0]
 800da5e:	002b      	movs	r3, r5
 800da60:	f000 fe30 	bl	800e6c4 <__kernel_sin>
 800da64:	2380      	movs	r3, #128	; 0x80
 800da66:	061b      	lsls	r3, r3, #24
 800da68:	18c9      	adds	r1, r1, r3
 800da6a:	e7d8      	b.n	800da1e <sin+0x2a>
 800da6c:	0022      	movs	r2, r4
 800da6e:	002b      	movs	r3, r5
 800da70:	f000 f9f2 	bl	800de58 <__kernel_cos>
 800da74:	e7f6      	b.n	800da64 <sin+0x70>
 800da76:	46c0      	nop			; (mov r8, r8)
 800da78:	3fe921fb 	.word	0x3fe921fb
 800da7c:	7fefffff 	.word	0x7fefffff

0800da80 <__ieee754_rem_pio2>:
 800da80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da82:	004b      	lsls	r3, r1, #1
 800da84:	b091      	sub	sp, #68	; 0x44
 800da86:	085b      	lsrs	r3, r3, #1
 800da88:	9302      	str	r3, [sp, #8]
 800da8a:	0017      	movs	r7, r2
 800da8c:	4bb6      	ldr	r3, [pc, #728]	; (800dd68 <__ieee754_rem_pio2+0x2e8>)
 800da8e:	9a02      	ldr	r2, [sp, #8]
 800da90:	0004      	movs	r4, r0
 800da92:	000d      	movs	r5, r1
 800da94:	9109      	str	r1, [sp, #36]	; 0x24
 800da96:	429a      	cmp	r2, r3
 800da98:	dc09      	bgt.n	800daae <__ieee754_rem_pio2+0x2e>
 800da9a:	0002      	movs	r2, r0
 800da9c:	000b      	movs	r3, r1
 800da9e:	603a      	str	r2, [r7, #0]
 800daa0:	607b      	str	r3, [r7, #4]
 800daa2:	2200      	movs	r2, #0
 800daa4:	2300      	movs	r3, #0
 800daa6:	60ba      	str	r2, [r7, #8]
 800daa8:	60fb      	str	r3, [r7, #12]
 800daaa:	2600      	movs	r6, #0
 800daac:	e025      	b.n	800dafa <__ieee754_rem_pio2+0x7a>
 800daae:	4baf      	ldr	r3, [pc, #700]	; (800dd6c <__ieee754_rem_pio2+0x2ec>)
 800dab0:	9a02      	ldr	r2, [sp, #8]
 800dab2:	429a      	cmp	r2, r3
 800dab4:	dd00      	ble.n	800dab8 <__ieee754_rem_pio2+0x38>
 800dab6:	e06e      	b.n	800db96 <__ieee754_rem_pio2+0x116>
 800dab8:	4ead      	ldr	r6, [pc, #692]	; (800dd70 <__ieee754_rem_pio2+0x2f0>)
 800daba:	4aae      	ldr	r2, [pc, #696]	; (800dd74 <__ieee754_rem_pio2+0x2f4>)
 800dabc:	2d00      	cmp	r5, #0
 800dabe:	dd35      	ble.n	800db2c <__ieee754_rem_pio2+0xac>
 800dac0:	0020      	movs	r0, r4
 800dac2:	0029      	movs	r1, r5
 800dac4:	4baa      	ldr	r3, [pc, #680]	; (800dd70 <__ieee754_rem_pio2+0x2f0>)
 800dac6:	f7f3 fecb 	bl	8001860 <__aeabi_dsub>
 800daca:	9b02      	ldr	r3, [sp, #8]
 800dacc:	0004      	movs	r4, r0
 800dace:	000d      	movs	r5, r1
 800dad0:	42b3      	cmp	r3, r6
 800dad2:	d015      	beq.n	800db00 <__ieee754_rem_pio2+0x80>
 800dad4:	4aa8      	ldr	r2, [pc, #672]	; (800dd78 <__ieee754_rem_pio2+0x2f8>)
 800dad6:	4ba9      	ldr	r3, [pc, #676]	; (800dd7c <__ieee754_rem_pio2+0x2fc>)
 800dad8:	f7f3 fec2 	bl	8001860 <__aeabi_dsub>
 800dadc:	0002      	movs	r2, r0
 800dade:	000b      	movs	r3, r1
 800dae0:	0020      	movs	r0, r4
 800dae2:	603a      	str	r2, [r7, #0]
 800dae4:	607b      	str	r3, [r7, #4]
 800dae6:	0029      	movs	r1, r5
 800dae8:	f7f3 feba 	bl	8001860 <__aeabi_dsub>
 800daec:	4aa2      	ldr	r2, [pc, #648]	; (800dd78 <__ieee754_rem_pio2+0x2f8>)
 800daee:	4ba3      	ldr	r3, [pc, #652]	; (800dd7c <__ieee754_rem_pio2+0x2fc>)
 800daf0:	f7f3 feb6 	bl	8001860 <__aeabi_dsub>
 800daf4:	2601      	movs	r6, #1
 800daf6:	60b8      	str	r0, [r7, #8]
 800daf8:	60f9      	str	r1, [r7, #12]
 800dafa:	0030      	movs	r0, r6
 800dafc:	b011      	add	sp, #68	; 0x44
 800dafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db00:	22d3      	movs	r2, #211	; 0xd3
 800db02:	4b9e      	ldr	r3, [pc, #632]	; (800dd7c <__ieee754_rem_pio2+0x2fc>)
 800db04:	0552      	lsls	r2, r2, #21
 800db06:	f7f3 feab 	bl	8001860 <__aeabi_dsub>
 800db0a:	4a9d      	ldr	r2, [pc, #628]	; (800dd80 <__ieee754_rem_pio2+0x300>)
 800db0c:	4b9d      	ldr	r3, [pc, #628]	; (800dd84 <__ieee754_rem_pio2+0x304>)
 800db0e:	0004      	movs	r4, r0
 800db10:	000d      	movs	r5, r1
 800db12:	f7f3 fea5 	bl	8001860 <__aeabi_dsub>
 800db16:	0002      	movs	r2, r0
 800db18:	000b      	movs	r3, r1
 800db1a:	0020      	movs	r0, r4
 800db1c:	603a      	str	r2, [r7, #0]
 800db1e:	607b      	str	r3, [r7, #4]
 800db20:	0029      	movs	r1, r5
 800db22:	f7f3 fe9d 	bl	8001860 <__aeabi_dsub>
 800db26:	4a96      	ldr	r2, [pc, #600]	; (800dd80 <__ieee754_rem_pio2+0x300>)
 800db28:	4b96      	ldr	r3, [pc, #600]	; (800dd84 <__ieee754_rem_pio2+0x304>)
 800db2a:	e7e1      	b.n	800daf0 <__ieee754_rem_pio2+0x70>
 800db2c:	0020      	movs	r0, r4
 800db2e:	0029      	movs	r1, r5
 800db30:	4b8f      	ldr	r3, [pc, #572]	; (800dd70 <__ieee754_rem_pio2+0x2f0>)
 800db32:	f7f2 fcb9 	bl	80004a8 <__aeabi_dadd>
 800db36:	9b02      	ldr	r3, [sp, #8]
 800db38:	0004      	movs	r4, r0
 800db3a:	000d      	movs	r5, r1
 800db3c:	42b3      	cmp	r3, r6
 800db3e:	d014      	beq.n	800db6a <__ieee754_rem_pio2+0xea>
 800db40:	4a8d      	ldr	r2, [pc, #564]	; (800dd78 <__ieee754_rem_pio2+0x2f8>)
 800db42:	4b8e      	ldr	r3, [pc, #568]	; (800dd7c <__ieee754_rem_pio2+0x2fc>)
 800db44:	f7f2 fcb0 	bl	80004a8 <__aeabi_dadd>
 800db48:	0002      	movs	r2, r0
 800db4a:	000b      	movs	r3, r1
 800db4c:	0020      	movs	r0, r4
 800db4e:	603a      	str	r2, [r7, #0]
 800db50:	607b      	str	r3, [r7, #4]
 800db52:	0029      	movs	r1, r5
 800db54:	f7f3 fe84 	bl	8001860 <__aeabi_dsub>
 800db58:	4a87      	ldr	r2, [pc, #540]	; (800dd78 <__ieee754_rem_pio2+0x2f8>)
 800db5a:	4b88      	ldr	r3, [pc, #544]	; (800dd7c <__ieee754_rem_pio2+0x2fc>)
 800db5c:	f7f2 fca4 	bl	80004a8 <__aeabi_dadd>
 800db60:	2601      	movs	r6, #1
 800db62:	60b8      	str	r0, [r7, #8]
 800db64:	60f9      	str	r1, [r7, #12]
 800db66:	4276      	negs	r6, r6
 800db68:	e7c7      	b.n	800dafa <__ieee754_rem_pio2+0x7a>
 800db6a:	22d3      	movs	r2, #211	; 0xd3
 800db6c:	4b83      	ldr	r3, [pc, #524]	; (800dd7c <__ieee754_rem_pio2+0x2fc>)
 800db6e:	0552      	lsls	r2, r2, #21
 800db70:	f7f2 fc9a 	bl	80004a8 <__aeabi_dadd>
 800db74:	4a82      	ldr	r2, [pc, #520]	; (800dd80 <__ieee754_rem_pio2+0x300>)
 800db76:	4b83      	ldr	r3, [pc, #524]	; (800dd84 <__ieee754_rem_pio2+0x304>)
 800db78:	0004      	movs	r4, r0
 800db7a:	000d      	movs	r5, r1
 800db7c:	f7f2 fc94 	bl	80004a8 <__aeabi_dadd>
 800db80:	0002      	movs	r2, r0
 800db82:	000b      	movs	r3, r1
 800db84:	0020      	movs	r0, r4
 800db86:	603a      	str	r2, [r7, #0]
 800db88:	607b      	str	r3, [r7, #4]
 800db8a:	0029      	movs	r1, r5
 800db8c:	f7f3 fe68 	bl	8001860 <__aeabi_dsub>
 800db90:	4a7b      	ldr	r2, [pc, #492]	; (800dd80 <__ieee754_rem_pio2+0x300>)
 800db92:	4b7c      	ldr	r3, [pc, #496]	; (800dd84 <__ieee754_rem_pio2+0x304>)
 800db94:	e7e2      	b.n	800db5c <__ieee754_rem_pio2+0xdc>
 800db96:	4b7c      	ldr	r3, [pc, #496]	; (800dd88 <__ieee754_rem_pio2+0x308>)
 800db98:	9a02      	ldr	r2, [sp, #8]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	dd00      	ble.n	800dba0 <__ieee754_rem_pio2+0x120>
 800db9e:	e0d3      	b.n	800dd48 <__ieee754_rem_pio2+0x2c8>
 800dba0:	0020      	movs	r0, r4
 800dba2:	0029      	movs	r1, r5
 800dba4:	f000 fe3a 	bl	800e81c <fabs>
 800dba8:	4a78      	ldr	r2, [pc, #480]	; (800dd8c <__ieee754_rem_pio2+0x30c>)
 800dbaa:	4b79      	ldr	r3, [pc, #484]	; (800dd90 <__ieee754_rem_pio2+0x310>)
 800dbac:	0004      	movs	r4, r0
 800dbae:	000d      	movs	r5, r1
 800dbb0:	f7f3 fbea 	bl	8001388 <__aeabi_dmul>
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	4b77      	ldr	r3, [pc, #476]	; (800dd94 <__ieee754_rem_pio2+0x314>)
 800dbb8:	f7f2 fc76 	bl	80004a8 <__aeabi_dadd>
 800dbbc:	f7f4 f9e2 	bl	8001f84 <__aeabi_d2iz>
 800dbc0:	0006      	movs	r6, r0
 800dbc2:	f7f4 fa15 	bl	8001ff0 <__aeabi_i2d>
 800dbc6:	4a6b      	ldr	r2, [pc, #428]	; (800dd74 <__ieee754_rem_pio2+0x2f4>)
 800dbc8:	4b69      	ldr	r3, [pc, #420]	; (800dd70 <__ieee754_rem_pio2+0x2f0>)
 800dbca:	9006      	str	r0, [sp, #24]
 800dbcc:	9107      	str	r1, [sp, #28]
 800dbce:	f7f3 fbdb 	bl	8001388 <__aeabi_dmul>
 800dbd2:	0002      	movs	r2, r0
 800dbd4:	000b      	movs	r3, r1
 800dbd6:	0020      	movs	r0, r4
 800dbd8:	0029      	movs	r1, r5
 800dbda:	f7f3 fe41 	bl	8001860 <__aeabi_dsub>
 800dbde:	4a66      	ldr	r2, [pc, #408]	; (800dd78 <__ieee754_rem_pio2+0x2f8>)
 800dbe0:	9004      	str	r0, [sp, #16]
 800dbe2:	9105      	str	r1, [sp, #20]
 800dbe4:	9806      	ldr	r0, [sp, #24]
 800dbe6:	9907      	ldr	r1, [sp, #28]
 800dbe8:	4b64      	ldr	r3, [pc, #400]	; (800dd7c <__ieee754_rem_pio2+0x2fc>)
 800dbea:	f7f3 fbcd 	bl	8001388 <__aeabi_dmul>
 800dbee:	0004      	movs	r4, r0
 800dbf0:	000d      	movs	r5, r1
 800dbf2:	2e1f      	cmp	r6, #31
 800dbf4:	dc0f      	bgt.n	800dc16 <__ieee754_rem_pio2+0x196>
 800dbf6:	4a68      	ldr	r2, [pc, #416]	; (800dd98 <__ieee754_rem_pio2+0x318>)
 800dbf8:	1e73      	subs	r3, r6, #1
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	589b      	ldr	r3, [r3, r2]
 800dbfe:	9a02      	ldr	r2, [sp, #8]
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d008      	beq.n	800dc16 <__ieee754_rem_pio2+0x196>
 800dc04:	9804      	ldr	r0, [sp, #16]
 800dc06:	9905      	ldr	r1, [sp, #20]
 800dc08:	0022      	movs	r2, r4
 800dc0a:	002b      	movs	r3, r5
 800dc0c:	f7f3 fe28 	bl	8001860 <__aeabi_dsub>
 800dc10:	6038      	str	r0, [r7, #0]
 800dc12:	6079      	str	r1, [r7, #4]
 800dc14:	e012      	b.n	800dc3c <__ieee754_rem_pio2+0x1bc>
 800dc16:	0022      	movs	r2, r4
 800dc18:	9804      	ldr	r0, [sp, #16]
 800dc1a:	9905      	ldr	r1, [sp, #20]
 800dc1c:	002b      	movs	r3, r5
 800dc1e:	f7f3 fe1f 	bl	8001860 <__aeabi_dsub>
 800dc22:	9b02      	ldr	r3, [sp, #8]
 800dc24:	151b      	asrs	r3, r3, #20
 800dc26:	9308      	str	r3, [sp, #32]
 800dc28:	9a08      	ldr	r2, [sp, #32]
 800dc2a:	004b      	lsls	r3, r1, #1
 800dc2c:	0d5b      	lsrs	r3, r3, #21
 800dc2e:	1ad3      	subs	r3, r2, r3
 800dc30:	2b10      	cmp	r3, #16
 800dc32:	dc21      	bgt.n	800dc78 <__ieee754_rem_pio2+0x1f8>
 800dc34:	0002      	movs	r2, r0
 800dc36:	000b      	movs	r3, r1
 800dc38:	603a      	str	r2, [r7, #0]
 800dc3a:	607b      	str	r3, [r7, #4]
 800dc3c:	9804      	ldr	r0, [sp, #16]
 800dc3e:	9905      	ldr	r1, [sp, #20]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	683a      	ldr	r2, [r7, #0]
 800dc44:	9302      	str	r3, [sp, #8]
 800dc46:	9b02      	ldr	r3, [sp, #8]
 800dc48:	f7f3 fe0a 	bl	8001860 <__aeabi_dsub>
 800dc4c:	0022      	movs	r2, r4
 800dc4e:	002b      	movs	r3, r5
 800dc50:	f7f3 fe06 	bl	8001860 <__aeabi_dsub>
 800dc54:	000b      	movs	r3, r1
 800dc56:	0002      	movs	r2, r0
 800dc58:	60ba      	str	r2, [r7, #8]
 800dc5a:	60fb      	str	r3, [r7, #12]
 800dc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	db00      	blt.n	800dc64 <__ieee754_rem_pio2+0x1e4>
 800dc62:	e74a      	b.n	800dafa <__ieee754_rem_pio2+0x7a>
 800dc64:	2280      	movs	r2, #128	; 0x80
 800dc66:	0612      	lsls	r2, r2, #24
 800dc68:	4694      	mov	ip, r2
 800dc6a:	9b02      	ldr	r3, [sp, #8]
 800dc6c:	1889      	adds	r1, r1, r2
 800dc6e:	4463      	add	r3, ip
 800dc70:	607b      	str	r3, [r7, #4]
 800dc72:	60b8      	str	r0, [r7, #8]
 800dc74:	60f9      	str	r1, [r7, #12]
 800dc76:	e776      	b.n	800db66 <__ieee754_rem_pio2+0xe6>
 800dc78:	22d3      	movs	r2, #211	; 0xd3
 800dc7a:	9806      	ldr	r0, [sp, #24]
 800dc7c:	9907      	ldr	r1, [sp, #28]
 800dc7e:	4b3f      	ldr	r3, [pc, #252]	; (800dd7c <__ieee754_rem_pio2+0x2fc>)
 800dc80:	0552      	lsls	r2, r2, #21
 800dc82:	f7f3 fb81 	bl	8001388 <__aeabi_dmul>
 800dc86:	0004      	movs	r4, r0
 800dc88:	000d      	movs	r5, r1
 800dc8a:	0002      	movs	r2, r0
 800dc8c:	000b      	movs	r3, r1
 800dc8e:	9804      	ldr	r0, [sp, #16]
 800dc90:	9905      	ldr	r1, [sp, #20]
 800dc92:	f7f3 fde5 	bl	8001860 <__aeabi_dsub>
 800dc96:	0002      	movs	r2, r0
 800dc98:	000b      	movs	r3, r1
 800dc9a:	9002      	str	r0, [sp, #8]
 800dc9c:	9103      	str	r1, [sp, #12]
 800dc9e:	9804      	ldr	r0, [sp, #16]
 800dca0:	9905      	ldr	r1, [sp, #20]
 800dca2:	f7f3 fddd 	bl	8001860 <__aeabi_dsub>
 800dca6:	0022      	movs	r2, r4
 800dca8:	002b      	movs	r3, r5
 800dcaa:	f7f3 fdd9 	bl	8001860 <__aeabi_dsub>
 800dcae:	0004      	movs	r4, r0
 800dcb0:	000d      	movs	r5, r1
 800dcb2:	9806      	ldr	r0, [sp, #24]
 800dcb4:	9907      	ldr	r1, [sp, #28]
 800dcb6:	4a32      	ldr	r2, [pc, #200]	; (800dd80 <__ieee754_rem_pio2+0x300>)
 800dcb8:	4b32      	ldr	r3, [pc, #200]	; (800dd84 <__ieee754_rem_pio2+0x304>)
 800dcba:	f7f3 fb65 	bl	8001388 <__aeabi_dmul>
 800dcbe:	0022      	movs	r2, r4
 800dcc0:	002b      	movs	r3, r5
 800dcc2:	f7f3 fdcd 	bl	8001860 <__aeabi_dsub>
 800dcc6:	0002      	movs	r2, r0
 800dcc8:	000b      	movs	r3, r1
 800dcca:	0004      	movs	r4, r0
 800dccc:	000d      	movs	r5, r1
 800dcce:	9802      	ldr	r0, [sp, #8]
 800dcd0:	9903      	ldr	r1, [sp, #12]
 800dcd2:	f7f3 fdc5 	bl	8001860 <__aeabi_dsub>
 800dcd6:	9a08      	ldr	r2, [sp, #32]
 800dcd8:	004b      	lsls	r3, r1, #1
 800dcda:	0d5b      	lsrs	r3, r3, #21
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	2b31      	cmp	r3, #49	; 0x31
 800dce0:	dc08      	bgt.n	800dcf4 <__ieee754_rem_pio2+0x274>
 800dce2:	0002      	movs	r2, r0
 800dce4:	000b      	movs	r3, r1
 800dce6:	603a      	str	r2, [r7, #0]
 800dce8:	607b      	str	r3, [r7, #4]
 800dcea:	9a02      	ldr	r2, [sp, #8]
 800dcec:	9b03      	ldr	r3, [sp, #12]
 800dcee:	9204      	str	r2, [sp, #16]
 800dcf0:	9305      	str	r3, [sp, #20]
 800dcf2:	e7a3      	b.n	800dc3c <__ieee754_rem_pio2+0x1bc>
 800dcf4:	22b8      	movs	r2, #184	; 0xb8
 800dcf6:	9806      	ldr	r0, [sp, #24]
 800dcf8:	9907      	ldr	r1, [sp, #28]
 800dcfa:	4b22      	ldr	r3, [pc, #136]	; (800dd84 <__ieee754_rem_pio2+0x304>)
 800dcfc:	0592      	lsls	r2, r2, #22
 800dcfe:	f7f3 fb43 	bl	8001388 <__aeabi_dmul>
 800dd02:	0004      	movs	r4, r0
 800dd04:	000d      	movs	r5, r1
 800dd06:	0002      	movs	r2, r0
 800dd08:	000b      	movs	r3, r1
 800dd0a:	9802      	ldr	r0, [sp, #8]
 800dd0c:	9903      	ldr	r1, [sp, #12]
 800dd0e:	f7f3 fda7 	bl	8001860 <__aeabi_dsub>
 800dd12:	0002      	movs	r2, r0
 800dd14:	000b      	movs	r3, r1
 800dd16:	9004      	str	r0, [sp, #16]
 800dd18:	9105      	str	r1, [sp, #20]
 800dd1a:	9802      	ldr	r0, [sp, #8]
 800dd1c:	9903      	ldr	r1, [sp, #12]
 800dd1e:	f7f3 fd9f 	bl	8001860 <__aeabi_dsub>
 800dd22:	0022      	movs	r2, r4
 800dd24:	002b      	movs	r3, r5
 800dd26:	f7f3 fd9b 	bl	8001860 <__aeabi_dsub>
 800dd2a:	0004      	movs	r4, r0
 800dd2c:	000d      	movs	r5, r1
 800dd2e:	9806      	ldr	r0, [sp, #24]
 800dd30:	9907      	ldr	r1, [sp, #28]
 800dd32:	4a1a      	ldr	r2, [pc, #104]	; (800dd9c <__ieee754_rem_pio2+0x31c>)
 800dd34:	4b1a      	ldr	r3, [pc, #104]	; (800dda0 <__ieee754_rem_pio2+0x320>)
 800dd36:	f7f3 fb27 	bl	8001388 <__aeabi_dmul>
 800dd3a:	0022      	movs	r2, r4
 800dd3c:	002b      	movs	r3, r5
 800dd3e:	f7f3 fd8f 	bl	8001860 <__aeabi_dsub>
 800dd42:	0004      	movs	r4, r0
 800dd44:	000d      	movs	r5, r1
 800dd46:	e75d      	b.n	800dc04 <__ieee754_rem_pio2+0x184>
 800dd48:	4b16      	ldr	r3, [pc, #88]	; (800dda4 <__ieee754_rem_pio2+0x324>)
 800dd4a:	9a02      	ldr	r2, [sp, #8]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	dd2b      	ble.n	800dda8 <__ieee754_rem_pio2+0x328>
 800dd50:	0022      	movs	r2, r4
 800dd52:	002b      	movs	r3, r5
 800dd54:	0020      	movs	r0, r4
 800dd56:	0029      	movs	r1, r5
 800dd58:	f7f3 fd82 	bl	8001860 <__aeabi_dsub>
 800dd5c:	60b8      	str	r0, [r7, #8]
 800dd5e:	60f9      	str	r1, [r7, #12]
 800dd60:	6038      	str	r0, [r7, #0]
 800dd62:	6079      	str	r1, [r7, #4]
 800dd64:	e6a1      	b.n	800daaa <__ieee754_rem_pio2+0x2a>
 800dd66:	46c0      	nop			; (mov r8, r8)
 800dd68:	3fe921fb 	.word	0x3fe921fb
 800dd6c:	4002d97b 	.word	0x4002d97b
 800dd70:	3ff921fb 	.word	0x3ff921fb
 800dd74:	54400000 	.word	0x54400000
 800dd78:	1a626331 	.word	0x1a626331
 800dd7c:	3dd0b461 	.word	0x3dd0b461
 800dd80:	2e037073 	.word	0x2e037073
 800dd84:	3ba3198a 	.word	0x3ba3198a
 800dd88:	413921fb 	.word	0x413921fb
 800dd8c:	6dc9c883 	.word	0x6dc9c883
 800dd90:	3fe45f30 	.word	0x3fe45f30
 800dd94:	3fe00000 	.word	0x3fe00000
 800dd98:	08011ca0 	.word	0x08011ca0
 800dd9c:	252049c1 	.word	0x252049c1
 800dda0:	397b839a 	.word	0x397b839a
 800dda4:	7fefffff 	.word	0x7fefffff
 800dda8:	9a02      	ldr	r2, [sp, #8]
 800ddaa:	0020      	movs	r0, r4
 800ddac:	1516      	asrs	r6, r2, #20
 800ddae:	4a27      	ldr	r2, [pc, #156]	; (800de4c <__ieee754_rem_pio2+0x3cc>)
 800ddb0:	18b6      	adds	r6, r6, r2
 800ddb2:	9a02      	ldr	r2, [sp, #8]
 800ddb4:	0533      	lsls	r3, r6, #20
 800ddb6:	1ad5      	subs	r5, r2, r3
 800ddb8:	0029      	movs	r1, r5
 800ddba:	f7f4 f8e3 	bl	8001f84 <__aeabi_d2iz>
 800ddbe:	f7f4 f917 	bl	8001ff0 <__aeabi_i2d>
 800ddc2:	0002      	movs	r2, r0
 800ddc4:	000b      	movs	r3, r1
 800ddc6:	0020      	movs	r0, r4
 800ddc8:	0029      	movs	r1, r5
 800ddca:	920a      	str	r2, [sp, #40]	; 0x28
 800ddcc:	930b      	str	r3, [sp, #44]	; 0x2c
 800ddce:	f7f3 fd47 	bl	8001860 <__aeabi_dsub>
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	4b1e      	ldr	r3, [pc, #120]	; (800de50 <__ieee754_rem_pio2+0x3d0>)
 800ddd6:	f7f3 fad7 	bl	8001388 <__aeabi_dmul>
 800ddda:	000d      	movs	r5, r1
 800dddc:	0004      	movs	r4, r0
 800ddde:	f7f4 f8d1 	bl	8001f84 <__aeabi_d2iz>
 800dde2:	f7f4 f905 	bl	8001ff0 <__aeabi_i2d>
 800dde6:	0002      	movs	r2, r0
 800dde8:	000b      	movs	r3, r1
 800ddea:	0020      	movs	r0, r4
 800ddec:	0029      	movs	r1, r5
 800ddee:	920c      	str	r2, [sp, #48]	; 0x30
 800ddf0:	930d      	str	r3, [sp, #52]	; 0x34
 800ddf2:	f7f3 fd35 	bl	8001860 <__aeabi_dsub>
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	4b15      	ldr	r3, [pc, #84]	; (800de50 <__ieee754_rem_pio2+0x3d0>)
 800ddfa:	f7f3 fac5 	bl	8001388 <__aeabi_dmul>
 800ddfe:	2503      	movs	r5, #3
 800de00:	900e      	str	r0, [sp, #56]	; 0x38
 800de02:	910f      	str	r1, [sp, #60]	; 0x3c
 800de04:	ac0a      	add	r4, sp, #40	; 0x28
 800de06:	2200      	movs	r2, #0
 800de08:	6920      	ldr	r0, [r4, #16]
 800de0a:	6961      	ldr	r1, [r4, #20]
 800de0c:	2300      	movs	r3, #0
 800de0e:	9502      	str	r5, [sp, #8]
 800de10:	3c08      	subs	r4, #8
 800de12:	3d01      	subs	r5, #1
 800de14:	f7f2 fafc 	bl	8000410 <__aeabi_dcmpeq>
 800de18:	2800      	cmp	r0, #0
 800de1a:	d1f4      	bne.n	800de06 <__ieee754_rem_pio2+0x386>
 800de1c:	4b0d      	ldr	r3, [pc, #52]	; (800de54 <__ieee754_rem_pio2+0x3d4>)
 800de1e:	0032      	movs	r2, r6
 800de20:	9301      	str	r3, [sp, #4]
 800de22:	2302      	movs	r3, #2
 800de24:	0039      	movs	r1, r7
 800de26:	9300      	str	r3, [sp, #0]
 800de28:	a80a      	add	r0, sp, #40	; 0x28
 800de2a:	9b02      	ldr	r3, [sp, #8]
 800de2c:	f000 f8d4 	bl	800dfd8 <__kernel_rem_pio2>
 800de30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de32:	0006      	movs	r6, r0
 800de34:	2b00      	cmp	r3, #0
 800de36:	db00      	blt.n	800de3a <__ieee754_rem_pio2+0x3ba>
 800de38:	e65f      	b.n	800dafa <__ieee754_rem_pio2+0x7a>
 800de3a:	2280      	movs	r2, #128	; 0x80
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	0612      	lsls	r2, r2, #24
 800de40:	189b      	adds	r3, r3, r2
 800de42:	607b      	str	r3, [r7, #4]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	189b      	adds	r3, r3, r2
 800de48:	60fb      	str	r3, [r7, #12]
 800de4a:	e68c      	b.n	800db66 <__ieee754_rem_pio2+0xe6>
 800de4c:	fffffbea 	.word	0xfffffbea
 800de50:	41700000 	.word	0x41700000
 800de54:	08011d20 	.word	0x08011d20

0800de58 <__kernel_cos>:
 800de58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de5a:	b087      	sub	sp, #28
 800de5c:	9204      	str	r2, [sp, #16]
 800de5e:	9305      	str	r3, [sp, #20]
 800de60:	004b      	lsls	r3, r1, #1
 800de62:	085b      	lsrs	r3, r3, #1
 800de64:	9300      	str	r3, [sp, #0]
 800de66:	23f9      	movs	r3, #249	; 0xf9
 800de68:	9a00      	ldr	r2, [sp, #0]
 800de6a:	0007      	movs	r7, r0
 800de6c:	000e      	movs	r6, r1
 800de6e:	059b      	lsls	r3, r3, #22
 800de70:	429a      	cmp	r2, r3
 800de72:	da04      	bge.n	800de7e <__kernel_cos+0x26>
 800de74:	f7f4 f886 	bl	8001f84 <__aeabi_d2iz>
 800de78:	2800      	cmp	r0, #0
 800de7a:	d100      	bne.n	800de7e <__kernel_cos+0x26>
 800de7c:	e084      	b.n	800df88 <__kernel_cos+0x130>
 800de7e:	003a      	movs	r2, r7
 800de80:	0033      	movs	r3, r6
 800de82:	0038      	movs	r0, r7
 800de84:	0031      	movs	r1, r6
 800de86:	f7f3 fa7f 	bl	8001388 <__aeabi_dmul>
 800de8a:	2200      	movs	r2, #0
 800de8c:	4b40      	ldr	r3, [pc, #256]	; (800df90 <__kernel_cos+0x138>)
 800de8e:	0004      	movs	r4, r0
 800de90:	000d      	movs	r5, r1
 800de92:	f7f3 fa79 	bl	8001388 <__aeabi_dmul>
 800de96:	4a3f      	ldr	r2, [pc, #252]	; (800df94 <__kernel_cos+0x13c>)
 800de98:	9002      	str	r0, [sp, #8]
 800de9a:	9103      	str	r1, [sp, #12]
 800de9c:	4b3e      	ldr	r3, [pc, #248]	; (800df98 <__kernel_cos+0x140>)
 800de9e:	0020      	movs	r0, r4
 800dea0:	0029      	movs	r1, r5
 800dea2:	f7f3 fa71 	bl	8001388 <__aeabi_dmul>
 800dea6:	4a3d      	ldr	r2, [pc, #244]	; (800df9c <__kernel_cos+0x144>)
 800dea8:	4b3d      	ldr	r3, [pc, #244]	; (800dfa0 <__kernel_cos+0x148>)
 800deaa:	f7f2 fafd 	bl	80004a8 <__aeabi_dadd>
 800deae:	0022      	movs	r2, r4
 800deb0:	002b      	movs	r3, r5
 800deb2:	f7f3 fa69 	bl	8001388 <__aeabi_dmul>
 800deb6:	4a3b      	ldr	r2, [pc, #236]	; (800dfa4 <__kernel_cos+0x14c>)
 800deb8:	4b3b      	ldr	r3, [pc, #236]	; (800dfa8 <__kernel_cos+0x150>)
 800deba:	f7f3 fcd1 	bl	8001860 <__aeabi_dsub>
 800debe:	0022      	movs	r2, r4
 800dec0:	002b      	movs	r3, r5
 800dec2:	f7f3 fa61 	bl	8001388 <__aeabi_dmul>
 800dec6:	4a39      	ldr	r2, [pc, #228]	; (800dfac <__kernel_cos+0x154>)
 800dec8:	4b39      	ldr	r3, [pc, #228]	; (800dfb0 <__kernel_cos+0x158>)
 800deca:	f7f2 faed 	bl	80004a8 <__aeabi_dadd>
 800dece:	0022      	movs	r2, r4
 800ded0:	002b      	movs	r3, r5
 800ded2:	f7f3 fa59 	bl	8001388 <__aeabi_dmul>
 800ded6:	4a37      	ldr	r2, [pc, #220]	; (800dfb4 <__kernel_cos+0x15c>)
 800ded8:	4b37      	ldr	r3, [pc, #220]	; (800dfb8 <__kernel_cos+0x160>)
 800deda:	f7f3 fcc1 	bl	8001860 <__aeabi_dsub>
 800dede:	0022      	movs	r2, r4
 800dee0:	002b      	movs	r3, r5
 800dee2:	f7f3 fa51 	bl	8001388 <__aeabi_dmul>
 800dee6:	4a35      	ldr	r2, [pc, #212]	; (800dfbc <__kernel_cos+0x164>)
 800dee8:	4b35      	ldr	r3, [pc, #212]	; (800dfc0 <__kernel_cos+0x168>)
 800deea:	f7f2 fadd 	bl	80004a8 <__aeabi_dadd>
 800deee:	0022      	movs	r2, r4
 800def0:	002b      	movs	r3, r5
 800def2:	f7f3 fa49 	bl	8001388 <__aeabi_dmul>
 800def6:	0022      	movs	r2, r4
 800def8:	002b      	movs	r3, r5
 800defa:	f7f3 fa45 	bl	8001388 <__aeabi_dmul>
 800defe:	9a04      	ldr	r2, [sp, #16]
 800df00:	9b05      	ldr	r3, [sp, #20]
 800df02:	0004      	movs	r4, r0
 800df04:	000d      	movs	r5, r1
 800df06:	0038      	movs	r0, r7
 800df08:	0031      	movs	r1, r6
 800df0a:	f7f3 fa3d 	bl	8001388 <__aeabi_dmul>
 800df0e:	0002      	movs	r2, r0
 800df10:	000b      	movs	r3, r1
 800df12:	0020      	movs	r0, r4
 800df14:	0029      	movs	r1, r5
 800df16:	f7f3 fca3 	bl	8001860 <__aeabi_dsub>
 800df1a:	4b2a      	ldr	r3, [pc, #168]	; (800dfc4 <__kernel_cos+0x16c>)
 800df1c:	9a00      	ldr	r2, [sp, #0]
 800df1e:	0004      	movs	r4, r0
 800df20:	000d      	movs	r5, r1
 800df22:	429a      	cmp	r2, r3
 800df24:	dc0d      	bgt.n	800df42 <__kernel_cos+0xea>
 800df26:	0002      	movs	r2, r0
 800df28:	000b      	movs	r3, r1
 800df2a:	9802      	ldr	r0, [sp, #8]
 800df2c:	9903      	ldr	r1, [sp, #12]
 800df2e:	f7f3 fc97 	bl	8001860 <__aeabi_dsub>
 800df32:	0002      	movs	r2, r0
 800df34:	2000      	movs	r0, #0
 800df36:	000b      	movs	r3, r1
 800df38:	4923      	ldr	r1, [pc, #140]	; (800dfc8 <__kernel_cos+0x170>)
 800df3a:	f7f3 fc91 	bl	8001860 <__aeabi_dsub>
 800df3e:	b007      	add	sp, #28
 800df40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df42:	4b22      	ldr	r3, [pc, #136]	; (800dfcc <__kernel_cos+0x174>)
 800df44:	9a00      	ldr	r2, [sp, #0]
 800df46:	2600      	movs	r6, #0
 800df48:	429a      	cmp	r2, r3
 800df4a:	dc1b      	bgt.n	800df84 <__kernel_cos+0x12c>
 800df4c:	0013      	movs	r3, r2
 800df4e:	4a20      	ldr	r2, [pc, #128]	; (800dfd0 <__kernel_cos+0x178>)
 800df50:	4694      	mov	ip, r2
 800df52:	4463      	add	r3, ip
 800df54:	001f      	movs	r7, r3
 800df56:	0032      	movs	r2, r6
 800df58:	003b      	movs	r3, r7
 800df5a:	2000      	movs	r0, #0
 800df5c:	491a      	ldr	r1, [pc, #104]	; (800dfc8 <__kernel_cos+0x170>)
 800df5e:	f7f3 fc7f 	bl	8001860 <__aeabi_dsub>
 800df62:	0032      	movs	r2, r6
 800df64:	003b      	movs	r3, r7
 800df66:	9000      	str	r0, [sp, #0]
 800df68:	9101      	str	r1, [sp, #4]
 800df6a:	9802      	ldr	r0, [sp, #8]
 800df6c:	9903      	ldr	r1, [sp, #12]
 800df6e:	f7f3 fc77 	bl	8001860 <__aeabi_dsub>
 800df72:	0022      	movs	r2, r4
 800df74:	002b      	movs	r3, r5
 800df76:	f7f3 fc73 	bl	8001860 <__aeabi_dsub>
 800df7a:	0002      	movs	r2, r0
 800df7c:	000b      	movs	r3, r1
 800df7e:	9800      	ldr	r0, [sp, #0]
 800df80:	9901      	ldr	r1, [sp, #4]
 800df82:	e7da      	b.n	800df3a <__kernel_cos+0xe2>
 800df84:	4f13      	ldr	r7, [pc, #76]	; (800dfd4 <__kernel_cos+0x17c>)
 800df86:	e7e6      	b.n	800df56 <__kernel_cos+0xfe>
 800df88:	2000      	movs	r0, #0
 800df8a:	490f      	ldr	r1, [pc, #60]	; (800dfc8 <__kernel_cos+0x170>)
 800df8c:	e7d7      	b.n	800df3e <__kernel_cos+0xe6>
 800df8e:	46c0      	nop			; (mov r8, r8)
 800df90:	3fe00000 	.word	0x3fe00000
 800df94:	be8838d4 	.word	0xbe8838d4
 800df98:	bda8fae9 	.word	0xbda8fae9
 800df9c:	bdb4b1c4 	.word	0xbdb4b1c4
 800dfa0:	3e21ee9e 	.word	0x3e21ee9e
 800dfa4:	809c52ad 	.word	0x809c52ad
 800dfa8:	3e927e4f 	.word	0x3e927e4f
 800dfac:	19cb1590 	.word	0x19cb1590
 800dfb0:	3efa01a0 	.word	0x3efa01a0
 800dfb4:	16c15177 	.word	0x16c15177
 800dfb8:	3f56c16c 	.word	0x3f56c16c
 800dfbc:	5555554c 	.word	0x5555554c
 800dfc0:	3fa55555 	.word	0x3fa55555
 800dfc4:	3fd33332 	.word	0x3fd33332
 800dfc8:	3ff00000 	.word	0x3ff00000
 800dfcc:	3fe90000 	.word	0x3fe90000
 800dfd0:	ffe00000 	.word	0xffe00000
 800dfd4:	3fd20000 	.word	0x3fd20000

0800dfd8 <__kernel_rem_pio2>:
 800dfd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfda:	4cd0      	ldr	r4, [pc, #832]	; (800e31c <__kernel_rem_pio2+0x344>)
 800dfdc:	44a5      	add	sp, r4
 800dfde:	930d      	str	r3, [sp, #52]	; 0x34
 800dfe0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800dfe2:	0014      	movs	r4, r2
 800dfe4:	009a      	lsls	r2, r3, #2
 800dfe6:	4bce      	ldr	r3, [pc, #824]	; (800e320 <__kernel_rem_pio2+0x348>)
 800dfe8:	900e      	str	r0, [sp, #56]	; 0x38
 800dfea:	58d3      	ldr	r3, [r2, r3]
 800dfec:	9107      	str	r1, [sp, #28]
 800dfee:	9308      	str	r3, [sp, #32]
 800dff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dff2:	3b01      	subs	r3, #1
 800dff4:	930c      	str	r3, [sp, #48]	; 0x30
 800dff6:	2300      	movs	r3, #0
 800dff8:	9300      	str	r3, [sp, #0]
 800dffa:	0023      	movs	r3, r4
 800dffc:	3314      	adds	r3, #20
 800dffe:	db04      	blt.n	800e00a <__kernel_rem_pio2+0x32>
 800e000:	2118      	movs	r1, #24
 800e002:	1ee0      	subs	r0, r4, #3
 800e004:	f7f2 f908 	bl	8000218 <__divsi3>
 800e008:	9000      	str	r0, [sp, #0]
 800e00a:	2218      	movs	r2, #24
 800e00c:	9b00      	ldr	r3, [sp, #0]
 800e00e:	4252      	negs	r2, r2
 800e010:	3301      	adds	r3, #1
 800e012:	435a      	muls	r2, r3
 800e014:	1913      	adds	r3, r2, r4
 800e016:	9302      	str	r3, [sp, #8]
 800e018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e01a:	9b00      	ldr	r3, [sp, #0]
 800e01c:	ae26      	add	r6, sp, #152	; 0x98
 800e01e:	1a9d      	subs	r5, r3, r2
 800e020:	002c      	movs	r4, r5
 800e022:	9b08      	ldr	r3, [sp, #32]
 800e024:	189f      	adds	r7, r3, r2
 800e026:	1b63      	subs	r3, r4, r5
 800e028:	429f      	cmp	r7, r3
 800e02a:	da17      	bge.n	800e05c <__kernel_rem_pio2+0x84>
 800e02c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e02e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e030:	9304      	str	r3, [sp, #16]
 800e032:	ab76      	add	r3, sp, #472	; 0x1d8
 800e034:	930a      	str	r3, [sp, #40]	; 0x28
 800e036:	2301      	movs	r3, #1
 800e038:	1a9b      	subs	r3, r3, r2
 800e03a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e03c:	ab28      	add	r3, sp, #160	; 0xa0
 800e03e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e040:	9a04      	ldr	r2, [sp, #16]
 800e042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e044:	189b      	adds	r3, r3, r2
 800e046:	9a08      	ldr	r2, [sp, #32]
 800e048:	429a      	cmp	r2, r3
 800e04a:	db31      	blt.n	800e0b0 <__kernel_rem_pio2+0xd8>
 800e04c:	9b04      	ldr	r3, [sp, #16]
 800e04e:	2400      	movs	r4, #0
 800e050:	00de      	lsls	r6, r3, #3
 800e052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e054:	2500      	movs	r5, #0
 800e056:	2700      	movs	r7, #0
 800e058:	199e      	adds	r6, r3, r6
 800e05a:	e01e      	b.n	800e09a <__kernel_rem_pio2+0xc2>
 800e05c:	2c00      	cmp	r4, #0
 800e05e:	db07      	blt.n	800e070 <__kernel_rem_pio2+0x98>
 800e060:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800e062:	00a3      	lsls	r3, r4, #2
 800e064:	58d0      	ldr	r0, [r2, r3]
 800e066:	f7f3 ffc3 	bl	8001ff0 <__aeabi_i2d>
 800e06a:	c603      	stmia	r6!, {r0, r1}
 800e06c:	3401      	adds	r4, #1
 800e06e:	e7da      	b.n	800e026 <__kernel_rem_pio2+0x4e>
 800e070:	2000      	movs	r0, #0
 800e072:	2100      	movs	r1, #0
 800e074:	e7f9      	b.n	800e06a <__kernel_rem_pio2+0x92>
 800e076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e078:	00f9      	lsls	r1, r7, #3
 800e07a:	1859      	adds	r1, r3, r1
 800e07c:	6808      	ldr	r0, [r1, #0]
 800e07e:	6849      	ldr	r1, [r1, #4]
 800e080:	6832      	ldr	r2, [r6, #0]
 800e082:	6873      	ldr	r3, [r6, #4]
 800e084:	f7f3 f980 	bl	8001388 <__aeabi_dmul>
 800e088:	0002      	movs	r2, r0
 800e08a:	000b      	movs	r3, r1
 800e08c:	0020      	movs	r0, r4
 800e08e:	0029      	movs	r1, r5
 800e090:	f7f2 fa0a 	bl	80004a8 <__aeabi_dadd>
 800e094:	0004      	movs	r4, r0
 800e096:	000d      	movs	r5, r1
 800e098:	3701      	adds	r7, #1
 800e09a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e09c:	3e08      	subs	r6, #8
 800e09e:	429f      	cmp	r7, r3
 800e0a0:	dde9      	ble.n	800e076 <__kernel_rem_pio2+0x9e>
 800e0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0a4:	c330      	stmia	r3!, {r4, r5}
 800e0a6:	930a      	str	r3, [sp, #40]	; 0x28
 800e0a8:	9b04      	ldr	r3, [sp, #16]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	9304      	str	r3, [sp, #16]
 800e0ae:	e7c7      	b.n	800e040 <__kernel_rem_pio2+0x68>
 800e0b0:	9b08      	ldr	r3, [sp, #32]
 800e0b2:	aa12      	add	r2, sp, #72	; 0x48
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	189b      	adds	r3, r3, r2
 800e0b8:	9310      	str	r3, [sp, #64]	; 0x40
 800e0ba:	9b00      	ldr	r3, [sp, #0]
 800e0bc:	0098      	lsls	r0, r3, #2
 800e0be:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e0c0:	181b      	adds	r3, r3, r0
 800e0c2:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0c4:	9b08      	ldr	r3, [sp, #32]
 800e0c6:	9304      	str	r3, [sp, #16]
 800e0c8:	9b04      	ldr	r3, [sp, #16]
 800e0ca:	aa76      	add	r2, sp, #472	; 0x1d8
 800e0cc:	00db      	lsls	r3, r3, #3
 800e0ce:	18d3      	adds	r3, r2, r3
 800e0d0:	681c      	ldr	r4, [r3, #0]
 800e0d2:	685d      	ldr	r5, [r3, #4]
 800e0d4:	ab12      	add	r3, sp, #72	; 0x48
 800e0d6:	9300      	str	r3, [sp, #0]
 800e0d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0da:	9b04      	ldr	r3, [sp, #16]
 800e0dc:	9211      	str	r2, [sp, #68]	; 0x44
 800e0de:	930a      	str	r3, [sp, #40]	; 0x28
 800e0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	dc74      	bgt.n	800e1d0 <__kernel_rem_pio2+0x1f8>
 800e0e6:	0020      	movs	r0, r4
 800e0e8:	0029      	movs	r1, r5
 800e0ea:	9a02      	ldr	r2, [sp, #8]
 800e0ec:	f000 fc24 	bl	800e938 <scalbn>
 800e0f0:	23ff      	movs	r3, #255	; 0xff
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	059b      	lsls	r3, r3, #22
 800e0f6:	0004      	movs	r4, r0
 800e0f8:	000d      	movs	r5, r1
 800e0fa:	f7f3 f945 	bl	8001388 <__aeabi_dmul>
 800e0fe:	f000 fb91 	bl	800e824 <floor>
 800e102:	2200      	movs	r2, #0
 800e104:	4b87      	ldr	r3, [pc, #540]	; (800e324 <__kernel_rem_pio2+0x34c>)
 800e106:	f7f3 f93f 	bl	8001388 <__aeabi_dmul>
 800e10a:	0002      	movs	r2, r0
 800e10c:	000b      	movs	r3, r1
 800e10e:	0020      	movs	r0, r4
 800e110:	0029      	movs	r1, r5
 800e112:	f7f3 fba5 	bl	8001860 <__aeabi_dsub>
 800e116:	000d      	movs	r5, r1
 800e118:	0004      	movs	r4, r0
 800e11a:	f7f3 ff33 	bl	8001f84 <__aeabi_d2iz>
 800e11e:	900b      	str	r0, [sp, #44]	; 0x2c
 800e120:	f7f3 ff66 	bl	8001ff0 <__aeabi_i2d>
 800e124:	000b      	movs	r3, r1
 800e126:	0002      	movs	r2, r0
 800e128:	0029      	movs	r1, r5
 800e12a:	0020      	movs	r0, r4
 800e12c:	f7f3 fb98 	bl	8001860 <__aeabi_dsub>
 800e130:	9b02      	ldr	r3, [sp, #8]
 800e132:	0006      	movs	r6, r0
 800e134:	000f      	movs	r7, r1
 800e136:	2b00      	cmp	r3, #0
 800e138:	dd74      	ble.n	800e224 <__kernel_rem_pio2+0x24c>
 800e13a:	2118      	movs	r1, #24
 800e13c:	9b04      	ldr	r3, [sp, #16]
 800e13e:	aa12      	add	r2, sp, #72	; 0x48
 800e140:	3b01      	subs	r3, #1
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	589a      	ldr	r2, [r3, r2]
 800e146:	9802      	ldr	r0, [sp, #8]
 800e148:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e14a:	1a09      	subs	r1, r1, r0
 800e14c:	0010      	movs	r0, r2
 800e14e:	4108      	asrs	r0, r1
 800e150:	1824      	adds	r4, r4, r0
 800e152:	4088      	lsls	r0, r1
 800e154:	a912      	add	r1, sp, #72	; 0x48
 800e156:	1a12      	subs	r2, r2, r0
 800e158:	505a      	str	r2, [r3, r1]
 800e15a:	2317      	movs	r3, #23
 800e15c:	9902      	ldr	r1, [sp, #8]
 800e15e:	940b      	str	r4, [sp, #44]	; 0x2c
 800e160:	1a5b      	subs	r3, r3, r1
 800e162:	411a      	asrs	r2, r3
 800e164:	920a      	str	r2, [sp, #40]	; 0x28
 800e166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e168:	2b00      	cmp	r3, #0
 800e16a:	dd6d      	ble.n	800e248 <__kernel_rem_pio2+0x270>
 800e16c:	2200      	movs	r2, #0
 800e16e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e170:	2080      	movs	r0, #128	; 0x80
 800e172:	3301      	adds	r3, #1
 800e174:	930b      	str	r3, [sp, #44]	; 0x2c
 800e176:	4b6c      	ldr	r3, [pc, #432]	; (800e328 <__kernel_rem_pio2+0x350>)
 800e178:	0014      	movs	r4, r2
 800e17a:	469c      	mov	ip, r3
 800e17c:	2501      	movs	r5, #1
 800e17e:	0440      	lsls	r0, r0, #17
 800e180:	9b04      	ldr	r3, [sp, #16]
 800e182:	4293      	cmp	r3, r2
 800e184:	dd00      	ble.n	800e188 <__kernel_rem_pio2+0x1b0>
 800e186:	e098      	b.n	800e2ba <__kernel_rem_pio2+0x2e2>
 800e188:	9b02      	ldr	r3, [sp, #8]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	dd05      	ble.n	800e19a <__kernel_rem_pio2+0x1c2>
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d100      	bne.n	800e194 <__kernel_rem_pio2+0x1bc>
 800e192:	e0a8      	b.n	800e2e6 <__kernel_rem_pio2+0x30e>
 800e194:	2b02      	cmp	r3, #2
 800e196:	d100      	bne.n	800e19a <__kernel_rem_pio2+0x1c2>
 800e198:	e0b0      	b.n	800e2fc <__kernel_rem_pio2+0x324>
 800e19a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e19c:	2b02      	cmp	r3, #2
 800e19e:	d153      	bne.n	800e248 <__kernel_rem_pio2+0x270>
 800e1a0:	0032      	movs	r2, r6
 800e1a2:	003b      	movs	r3, r7
 800e1a4:	2000      	movs	r0, #0
 800e1a6:	4961      	ldr	r1, [pc, #388]	; (800e32c <__kernel_rem_pio2+0x354>)
 800e1a8:	f7f3 fb5a 	bl	8001860 <__aeabi_dsub>
 800e1ac:	0006      	movs	r6, r0
 800e1ae:	000f      	movs	r7, r1
 800e1b0:	2c00      	cmp	r4, #0
 800e1b2:	d049      	beq.n	800e248 <__kernel_rem_pio2+0x270>
 800e1b4:	9a02      	ldr	r2, [sp, #8]
 800e1b6:	2000      	movs	r0, #0
 800e1b8:	495c      	ldr	r1, [pc, #368]	; (800e32c <__kernel_rem_pio2+0x354>)
 800e1ba:	f000 fbbd 	bl	800e938 <scalbn>
 800e1be:	0002      	movs	r2, r0
 800e1c0:	000b      	movs	r3, r1
 800e1c2:	0030      	movs	r0, r6
 800e1c4:	0039      	movs	r1, r7
 800e1c6:	f7f3 fb4b 	bl	8001860 <__aeabi_dsub>
 800e1ca:	0006      	movs	r6, r0
 800e1cc:	000f      	movs	r7, r1
 800e1ce:	e03b      	b.n	800e248 <__kernel_rem_pio2+0x270>
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	4b57      	ldr	r3, [pc, #348]	; (800e330 <__kernel_rem_pio2+0x358>)
 800e1d4:	0020      	movs	r0, r4
 800e1d6:	0029      	movs	r1, r5
 800e1d8:	f7f3 f8d6 	bl	8001388 <__aeabi_dmul>
 800e1dc:	f7f3 fed2 	bl	8001f84 <__aeabi_d2iz>
 800e1e0:	f7f3 ff06 	bl	8001ff0 <__aeabi_i2d>
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	4b53      	ldr	r3, [pc, #332]	; (800e334 <__kernel_rem_pio2+0x35c>)
 800e1e8:	0006      	movs	r6, r0
 800e1ea:	000f      	movs	r7, r1
 800e1ec:	f7f3 f8cc 	bl	8001388 <__aeabi_dmul>
 800e1f0:	0002      	movs	r2, r0
 800e1f2:	000b      	movs	r3, r1
 800e1f4:	0020      	movs	r0, r4
 800e1f6:	0029      	movs	r1, r5
 800e1f8:	f7f3 fb32 	bl	8001860 <__aeabi_dsub>
 800e1fc:	f7f3 fec2 	bl	8001f84 <__aeabi_d2iz>
 800e200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e202:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e204:	c301      	stmia	r3!, {r0}
 800e206:	930b      	str	r3, [sp, #44]	; 0x2c
 800e208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e20a:	0030      	movs	r0, r6
 800e20c:	3b01      	subs	r3, #1
 800e20e:	930a      	str	r3, [sp, #40]	; 0x28
 800e210:	00db      	lsls	r3, r3, #3
 800e212:	18d3      	adds	r3, r2, r3
 800e214:	0039      	movs	r1, r7
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	f7f2 f945 	bl	80004a8 <__aeabi_dadd>
 800e21e:	0004      	movs	r4, r0
 800e220:	000d      	movs	r5, r1
 800e222:	e75d      	b.n	800e0e0 <__kernel_rem_pio2+0x108>
 800e224:	9b02      	ldr	r3, [sp, #8]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d107      	bne.n	800e23a <__kernel_rem_pio2+0x262>
 800e22a:	9b04      	ldr	r3, [sp, #16]
 800e22c:	aa12      	add	r2, sp, #72	; 0x48
 800e22e:	3b01      	subs	r3, #1
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	5898      	ldr	r0, [r3, r2]
 800e234:	15c3      	asrs	r3, r0, #23
 800e236:	930a      	str	r3, [sp, #40]	; 0x28
 800e238:	e795      	b.n	800e166 <__kernel_rem_pio2+0x18e>
 800e23a:	2200      	movs	r2, #0
 800e23c:	4b3e      	ldr	r3, [pc, #248]	; (800e338 <__kernel_rem_pio2+0x360>)
 800e23e:	f7f2 f90b 	bl	8000458 <__aeabi_dcmpge>
 800e242:	2800      	cmp	r0, #0
 800e244:	d136      	bne.n	800e2b4 <__kernel_rem_pio2+0x2dc>
 800e246:	900a      	str	r0, [sp, #40]	; 0x28
 800e248:	2200      	movs	r2, #0
 800e24a:	2300      	movs	r3, #0
 800e24c:	0030      	movs	r0, r6
 800e24e:	0039      	movs	r1, r7
 800e250:	f7f2 f8de 	bl	8000410 <__aeabi_dcmpeq>
 800e254:	2800      	cmp	r0, #0
 800e256:	d100      	bne.n	800e25a <__kernel_rem_pio2+0x282>
 800e258:	e0b9      	b.n	800e3ce <__kernel_rem_pio2+0x3f6>
 800e25a:	2200      	movs	r2, #0
 800e25c:	9b04      	ldr	r3, [sp, #16]
 800e25e:	3b01      	subs	r3, #1
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	9908      	ldr	r1, [sp, #32]
 800e264:	428b      	cmp	r3, r1
 800e266:	da52      	bge.n	800e30e <__kernel_rem_pio2+0x336>
 800e268:	2a00      	cmp	r2, #0
 800e26a:	d100      	bne.n	800e26e <__kernel_rem_pio2+0x296>
 800e26c:	e095      	b.n	800e39a <__kernel_rem_pio2+0x3c2>
 800e26e:	9b02      	ldr	r3, [sp, #8]
 800e270:	aa12      	add	r2, sp, #72	; 0x48
 800e272:	3b18      	subs	r3, #24
 800e274:	9302      	str	r3, [sp, #8]
 800e276:	9b00      	ldr	r3, [sp, #0]
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	589b      	ldr	r3, [r3, r2]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d100      	bne.n	800e282 <__kernel_rem_pio2+0x2aa>
 800e280:	e0a1      	b.n	800e3c6 <__kernel_rem_pio2+0x3ee>
 800e282:	2000      	movs	r0, #0
 800e284:	9a02      	ldr	r2, [sp, #8]
 800e286:	4929      	ldr	r1, [pc, #164]	; (800e32c <__kernel_rem_pio2+0x354>)
 800e288:	f000 fb56 	bl	800e938 <scalbn>
 800e28c:	0006      	movs	r6, r0
 800e28e:	000f      	movs	r7, r1
 800e290:	9c00      	ldr	r4, [sp, #0]
 800e292:	2c00      	cmp	r4, #0
 800e294:	db00      	blt.n	800e298 <__kernel_rem_pio2+0x2c0>
 800e296:	e0d9      	b.n	800e44c <__kernel_rem_pio2+0x474>
 800e298:	2600      	movs	r6, #0
 800e29a:	9d00      	ldr	r5, [sp, #0]
 800e29c:	2d00      	cmp	r5, #0
 800e29e:	da00      	bge.n	800e2a2 <__kernel_rem_pio2+0x2ca>
 800e2a0:	e10c      	b.n	800e4bc <__kernel_rem_pio2+0x4e4>
 800e2a2:	ab76      	add	r3, sp, #472	; 0x1d8
 800e2a4:	00ef      	lsls	r7, r5, #3
 800e2a6:	2400      	movs	r4, #0
 800e2a8:	18ff      	adds	r7, r7, r3
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	9302      	str	r3, [sp, #8]
 800e2ae:	9403      	str	r4, [sp, #12]
 800e2b0:	2400      	movs	r4, #0
 800e2b2:	e0f4      	b.n	800e49e <__kernel_rem_pio2+0x4c6>
 800e2b4:	2302      	movs	r3, #2
 800e2b6:	930a      	str	r3, [sp, #40]	; 0x28
 800e2b8:	e758      	b.n	800e16c <__kernel_rem_pio2+0x194>
 800e2ba:	9b00      	ldr	r3, [sp, #0]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2c00      	cmp	r4, #0
 800e2c0:	d10b      	bne.n	800e2da <__kernel_rem_pio2+0x302>
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d003      	beq.n	800e2ce <__kernel_rem_pio2+0x2f6>
 800e2c6:	9c00      	ldr	r4, [sp, #0]
 800e2c8:	1ac3      	subs	r3, r0, r3
 800e2ca:	6023      	str	r3, [r4, #0]
 800e2cc:	002b      	movs	r3, r5
 800e2ce:	9c00      	ldr	r4, [sp, #0]
 800e2d0:	3201      	adds	r2, #1
 800e2d2:	3404      	adds	r4, #4
 800e2d4:	9400      	str	r4, [sp, #0]
 800e2d6:	001c      	movs	r4, r3
 800e2d8:	e752      	b.n	800e180 <__kernel_rem_pio2+0x1a8>
 800e2da:	4661      	mov	r1, ip
 800e2dc:	1acb      	subs	r3, r1, r3
 800e2de:	9900      	ldr	r1, [sp, #0]
 800e2e0:	600b      	str	r3, [r1, #0]
 800e2e2:	0023      	movs	r3, r4
 800e2e4:	e7f3      	b.n	800e2ce <__kernel_rem_pio2+0x2f6>
 800e2e6:	9b04      	ldr	r3, [sp, #16]
 800e2e8:	aa12      	add	r2, sp, #72	; 0x48
 800e2ea:	3b01      	subs	r3, #1
 800e2ec:	009b      	lsls	r3, r3, #2
 800e2ee:	589a      	ldr	r2, [r3, r2]
 800e2f0:	9200      	str	r2, [sp, #0]
 800e2f2:	0252      	lsls	r2, r2, #9
 800e2f4:	0a52      	lsrs	r2, r2, #9
 800e2f6:	a912      	add	r1, sp, #72	; 0x48
 800e2f8:	505a      	str	r2, [r3, r1]
 800e2fa:	e74e      	b.n	800e19a <__kernel_rem_pio2+0x1c2>
 800e2fc:	9b04      	ldr	r3, [sp, #16]
 800e2fe:	aa12      	add	r2, sp, #72	; 0x48
 800e300:	3b01      	subs	r3, #1
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	589a      	ldr	r2, [r3, r2]
 800e306:	9200      	str	r2, [sp, #0]
 800e308:	0292      	lsls	r2, r2, #10
 800e30a:	0a92      	lsrs	r2, r2, #10
 800e30c:	e7f3      	b.n	800e2f6 <__kernel_rem_pio2+0x31e>
 800e30e:	0099      	lsls	r1, r3, #2
 800e310:	a812      	add	r0, sp, #72	; 0x48
 800e312:	5809      	ldr	r1, [r1, r0]
 800e314:	3b01      	subs	r3, #1
 800e316:	430a      	orrs	r2, r1
 800e318:	e7a3      	b.n	800e262 <__kernel_rem_pio2+0x28a>
 800e31a:	46c0      	nop			; (mov r8, r8)
 800e31c:	fffffd84 	.word	0xfffffd84
 800e320:	08011e68 	.word	0x08011e68
 800e324:	40200000 	.word	0x40200000
 800e328:	00ffffff 	.word	0x00ffffff
 800e32c:	3ff00000 	.word	0x3ff00000
 800e330:	3e700000 	.word	0x3e700000
 800e334:	41700000 	.word	0x41700000
 800e338:	3fe00000 	.word	0x3fe00000
 800e33c:	3301      	adds	r3, #1
 800e33e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e340:	009a      	lsls	r2, r3, #2
 800e342:	4252      	negs	r2, r2
 800e344:	588a      	ldr	r2, [r1, r2]
 800e346:	2a00      	cmp	r2, #0
 800e348:	d0f8      	beq.n	800e33c <__kernel_rem_pio2+0x364>
 800e34a:	9a04      	ldr	r2, [sp, #16]
 800e34c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e34e:	1c57      	adds	r7, r2, #1
 800e350:	1854      	adds	r4, r2, r1
 800e352:	00e4      	lsls	r4, r4, #3
 800e354:	aa26      	add	r2, sp, #152	; 0x98
 800e356:	1914      	adds	r4, r2, r4
 800e358:	9a04      	ldr	r2, [sp, #16]
 800e35a:	18d3      	adds	r3, r2, r3
 800e35c:	9304      	str	r3, [sp, #16]
 800e35e:	9b04      	ldr	r3, [sp, #16]
 800e360:	42bb      	cmp	r3, r7
 800e362:	da00      	bge.n	800e366 <__kernel_rem_pio2+0x38e>
 800e364:	e6b0      	b.n	800e0c8 <__kernel_rem_pio2+0xf0>
 800e366:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e368:	00bb      	lsls	r3, r7, #2
 800e36a:	58d0      	ldr	r0, [r2, r3]
 800e36c:	f7f3 fe40 	bl	8001ff0 <__aeabi_i2d>
 800e370:	2200      	movs	r2, #0
 800e372:	2300      	movs	r3, #0
 800e374:	0026      	movs	r6, r4
 800e376:	2500      	movs	r5, #0
 800e378:	6020      	str	r0, [r4, #0]
 800e37a:	6061      	str	r1, [r4, #4]
 800e37c:	9200      	str	r2, [sp, #0]
 800e37e:	9301      	str	r3, [sp, #4]
 800e380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e382:	429d      	cmp	r5, r3
 800e384:	dd0b      	ble.n	800e39e <__kernel_rem_pio2+0x3c6>
 800e386:	00fb      	lsls	r3, r7, #3
 800e388:	aa76      	add	r2, sp, #472	; 0x1d8
 800e38a:	18d3      	adds	r3, r2, r3
 800e38c:	3701      	adds	r7, #1
 800e38e:	9900      	ldr	r1, [sp, #0]
 800e390:	9a01      	ldr	r2, [sp, #4]
 800e392:	3408      	adds	r4, #8
 800e394:	6019      	str	r1, [r3, #0]
 800e396:	605a      	str	r2, [r3, #4]
 800e398:	e7e1      	b.n	800e35e <__kernel_rem_pio2+0x386>
 800e39a:	2301      	movs	r3, #1
 800e39c:	e7cf      	b.n	800e33e <__kernel_rem_pio2+0x366>
 800e39e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3a0:	00e9      	lsls	r1, r5, #3
 800e3a2:	1859      	adds	r1, r3, r1
 800e3a4:	6808      	ldr	r0, [r1, #0]
 800e3a6:	6849      	ldr	r1, [r1, #4]
 800e3a8:	6832      	ldr	r2, [r6, #0]
 800e3aa:	6873      	ldr	r3, [r6, #4]
 800e3ac:	f7f2 ffec 	bl	8001388 <__aeabi_dmul>
 800e3b0:	0002      	movs	r2, r0
 800e3b2:	000b      	movs	r3, r1
 800e3b4:	9800      	ldr	r0, [sp, #0]
 800e3b6:	9901      	ldr	r1, [sp, #4]
 800e3b8:	f7f2 f876 	bl	80004a8 <__aeabi_dadd>
 800e3bc:	3501      	adds	r5, #1
 800e3be:	9000      	str	r0, [sp, #0]
 800e3c0:	9101      	str	r1, [sp, #4]
 800e3c2:	3e08      	subs	r6, #8
 800e3c4:	e7dc      	b.n	800e380 <__kernel_rem_pio2+0x3a8>
 800e3c6:	9b00      	ldr	r3, [sp, #0]
 800e3c8:	3b01      	subs	r3, #1
 800e3ca:	9300      	str	r3, [sp, #0]
 800e3cc:	e74f      	b.n	800e26e <__kernel_rem_pio2+0x296>
 800e3ce:	9b02      	ldr	r3, [sp, #8]
 800e3d0:	0030      	movs	r0, r6
 800e3d2:	425a      	negs	r2, r3
 800e3d4:	0039      	movs	r1, r7
 800e3d6:	f000 faaf 	bl	800e938 <scalbn>
 800e3da:	2200      	movs	r2, #0
 800e3dc:	4bb6      	ldr	r3, [pc, #728]	; (800e6b8 <__kernel_rem_pio2+0x6e0>)
 800e3de:	0004      	movs	r4, r0
 800e3e0:	000d      	movs	r5, r1
 800e3e2:	f7f2 f839 	bl	8000458 <__aeabi_dcmpge>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	d025      	beq.n	800e436 <__kernel_rem_pio2+0x45e>
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	4bb3      	ldr	r3, [pc, #716]	; (800e6bc <__kernel_rem_pio2+0x6e4>)
 800e3ee:	0020      	movs	r0, r4
 800e3f0:	0029      	movs	r1, r5
 800e3f2:	f7f2 ffc9 	bl	8001388 <__aeabi_dmul>
 800e3f6:	f7f3 fdc5 	bl	8001f84 <__aeabi_d2iz>
 800e3fa:	9b04      	ldr	r3, [sp, #16]
 800e3fc:	0006      	movs	r6, r0
 800e3fe:	009f      	lsls	r7, r3, #2
 800e400:	f7f3 fdf6 	bl	8001ff0 <__aeabi_i2d>
 800e404:	2200      	movs	r2, #0
 800e406:	4bac      	ldr	r3, [pc, #688]	; (800e6b8 <__kernel_rem_pio2+0x6e0>)
 800e408:	f7f2 ffbe 	bl	8001388 <__aeabi_dmul>
 800e40c:	0002      	movs	r2, r0
 800e40e:	000b      	movs	r3, r1
 800e410:	0020      	movs	r0, r4
 800e412:	0029      	movs	r1, r5
 800e414:	f7f3 fa24 	bl	8001860 <__aeabi_dsub>
 800e418:	f7f3 fdb4 	bl	8001f84 <__aeabi_d2iz>
 800e41c:	ab12      	add	r3, sp, #72	; 0x48
 800e41e:	51d8      	str	r0, [r3, r7]
 800e420:	9b04      	ldr	r3, [sp, #16]
 800e422:	aa12      	add	r2, sp, #72	; 0x48
 800e424:	3301      	adds	r3, #1
 800e426:	9300      	str	r3, [sp, #0]
 800e428:	9b02      	ldr	r3, [sp, #8]
 800e42a:	3318      	adds	r3, #24
 800e42c:	9302      	str	r3, [sp, #8]
 800e42e:	9b00      	ldr	r3, [sp, #0]
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	509e      	str	r6, [r3, r2]
 800e434:	e725      	b.n	800e282 <__kernel_rem_pio2+0x2aa>
 800e436:	9b04      	ldr	r3, [sp, #16]
 800e438:	0020      	movs	r0, r4
 800e43a:	0029      	movs	r1, r5
 800e43c:	009e      	lsls	r6, r3, #2
 800e43e:	f7f3 fda1 	bl	8001f84 <__aeabi_d2iz>
 800e442:	ab12      	add	r3, sp, #72	; 0x48
 800e444:	5198      	str	r0, [r3, r6]
 800e446:	9b04      	ldr	r3, [sp, #16]
 800e448:	9300      	str	r3, [sp, #0]
 800e44a:	e71a      	b.n	800e282 <__kernel_rem_pio2+0x2aa>
 800e44c:	00e5      	lsls	r5, r4, #3
 800e44e:	ab76      	add	r3, sp, #472	; 0x1d8
 800e450:	aa12      	add	r2, sp, #72	; 0x48
 800e452:	195d      	adds	r5, r3, r5
 800e454:	00a3      	lsls	r3, r4, #2
 800e456:	5898      	ldr	r0, [r3, r2]
 800e458:	f7f3 fdca 	bl	8001ff0 <__aeabi_i2d>
 800e45c:	0032      	movs	r2, r6
 800e45e:	003b      	movs	r3, r7
 800e460:	f7f2 ff92 	bl	8001388 <__aeabi_dmul>
 800e464:	2200      	movs	r2, #0
 800e466:	6028      	str	r0, [r5, #0]
 800e468:	6069      	str	r1, [r5, #4]
 800e46a:	4b94      	ldr	r3, [pc, #592]	; (800e6bc <__kernel_rem_pio2+0x6e4>)
 800e46c:	0030      	movs	r0, r6
 800e46e:	0039      	movs	r1, r7
 800e470:	f7f2 ff8a 	bl	8001388 <__aeabi_dmul>
 800e474:	3c01      	subs	r4, #1
 800e476:	0006      	movs	r6, r0
 800e478:	000f      	movs	r7, r1
 800e47a:	e70a      	b.n	800e292 <__kernel_rem_pio2+0x2ba>
 800e47c:	4b90      	ldr	r3, [pc, #576]	; (800e6c0 <__kernel_rem_pio2+0x6e8>)
 800e47e:	00e1      	lsls	r1, r4, #3
 800e480:	1859      	adds	r1, r3, r1
 800e482:	6808      	ldr	r0, [r1, #0]
 800e484:	6849      	ldr	r1, [r1, #4]
 800e486:	cf0c      	ldmia	r7!, {r2, r3}
 800e488:	f7f2 ff7e 	bl	8001388 <__aeabi_dmul>
 800e48c:	0002      	movs	r2, r0
 800e48e:	000b      	movs	r3, r1
 800e490:	9802      	ldr	r0, [sp, #8]
 800e492:	9903      	ldr	r1, [sp, #12]
 800e494:	f7f2 f808 	bl	80004a8 <__aeabi_dadd>
 800e498:	9002      	str	r0, [sp, #8]
 800e49a:	9103      	str	r1, [sp, #12]
 800e49c:	3401      	adds	r4, #1
 800e49e:	9b08      	ldr	r3, [sp, #32]
 800e4a0:	429c      	cmp	r4, r3
 800e4a2:	dc01      	bgt.n	800e4a8 <__kernel_rem_pio2+0x4d0>
 800e4a4:	42a6      	cmp	r6, r4
 800e4a6:	dae9      	bge.n	800e47c <__kernel_rem_pio2+0x4a4>
 800e4a8:	00f3      	lsls	r3, r6, #3
 800e4aa:	aa4e      	add	r2, sp, #312	; 0x138
 800e4ac:	18d3      	adds	r3, r2, r3
 800e4ae:	3d01      	subs	r5, #1
 800e4b0:	9902      	ldr	r1, [sp, #8]
 800e4b2:	9a03      	ldr	r2, [sp, #12]
 800e4b4:	3601      	adds	r6, #1
 800e4b6:	6019      	str	r1, [r3, #0]
 800e4b8:	605a      	str	r2, [r3, #4]
 800e4ba:	e6ef      	b.n	800e29c <__kernel_rem_pio2+0x2c4>
 800e4bc:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e4be:	2b02      	cmp	r3, #2
 800e4c0:	dc0b      	bgt.n	800e4da <__kernel_rem_pio2+0x502>
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	dd00      	ble.n	800e4c8 <__kernel_rem_pio2+0x4f0>
 800e4c6:	e08a      	b.n	800e5de <__kernel_rem_pio2+0x606>
 800e4c8:	d055      	beq.n	800e576 <__kernel_rem_pio2+0x59e>
 800e4ca:	2007      	movs	r0, #7
 800e4cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4ce:	4003      	ands	r3, r0
 800e4d0:	0018      	movs	r0, r3
 800e4d2:	239f      	movs	r3, #159	; 0x9f
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	449d      	add	sp, r3
 800e4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4da:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e4dc:	2b03      	cmp	r3, #3
 800e4de:	d1f4      	bne.n	800e4ca <__kernel_rem_pio2+0x4f2>
 800e4e0:	9b00      	ldr	r3, [sp, #0]
 800e4e2:	00dc      	lsls	r4, r3, #3
 800e4e4:	ab4e      	add	r3, sp, #312	; 0x138
 800e4e6:	191c      	adds	r4, r3, r4
 800e4e8:	0025      	movs	r5, r4
 800e4ea:	9b00      	ldr	r3, [sp, #0]
 800e4ec:	9302      	str	r3, [sp, #8]
 800e4ee:	9b02      	ldr	r3, [sp, #8]
 800e4f0:	3d08      	subs	r5, #8
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	dd00      	ble.n	800e4f8 <__kernel_rem_pio2+0x520>
 800e4f6:	e083      	b.n	800e600 <__kernel_rem_pio2+0x628>
 800e4f8:	9d00      	ldr	r5, [sp, #0]
 800e4fa:	3c08      	subs	r4, #8
 800e4fc:	2d01      	cmp	r5, #1
 800e4fe:	dd00      	ble.n	800e502 <__kernel_rem_pio2+0x52a>
 800e500:	e0a0      	b.n	800e644 <__kernel_rem_pio2+0x66c>
 800e502:	2400      	movs	r4, #0
 800e504:	0021      	movs	r1, r4
 800e506:	9b00      	ldr	r3, [sp, #0]
 800e508:	2b01      	cmp	r3, #1
 800e50a:	dd00      	ble.n	800e50e <__kernel_rem_pio2+0x536>
 800e50c:	e0b8      	b.n	800e680 <__kernel_rem_pio2+0x6a8>
 800e50e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e510:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 800e512:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 800e514:	9d50      	ldr	r5, [sp, #320]	; 0x140
 800e516:	9851      	ldr	r0, [sp, #324]	; 0x144
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d000      	beq.n	800e51e <__kernel_rem_pio2+0x546>
 800e51c:	e0be      	b.n	800e69c <__kernel_rem_pio2+0x6c4>
 800e51e:	0033      	movs	r3, r6
 800e520:	003a      	movs	r2, r7
 800e522:	9e07      	ldr	r6, [sp, #28]
 800e524:	6032      	str	r2, [r6, #0]
 800e526:	6073      	str	r3, [r6, #4]
 800e528:	002a      	movs	r2, r5
 800e52a:	0003      	movs	r3, r0
 800e52c:	60b2      	str	r2, [r6, #8]
 800e52e:	60f3      	str	r3, [r6, #12]
 800e530:	0022      	movs	r2, r4
 800e532:	000b      	movs	r3, r1
 800e534:	6132      	str	r2, [r6, #16]
 800e536:	6173      	str	r3, [r6, #20]
 800e538:	e7c7      	b.n	800e4ca <__kernel_rem_pio2+0x4f2>
 800e53a:	9b00      	ldr	r3, [sp, #0]
 800e53c:	aa4e      	add	r2, sp, #312	; 0x138
 800e53e:	00db      	lsls	r3, r3, #3
 800e540:	18d3      	adds	r3, r2, r3
 800e542:	0028      	movs	r0, r5
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	0021      	movs	r1, r4
 800e54a:	f7f1 ffad 	bl	80004a8 <__aeabi_dadd>
 800e54e:	0005      	movs	r5, r0
 800e550:	000c      	movs	r4, r1
 800e552:	9b00      	ldr	r3, [sp, #0]
 800e554:	3b01      	subs	r3, #1
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	9b00      	ldr	r3, [sp, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	daed      	bge.n	800e53a <__kernel_rem_pio2+0x562>
 800e55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e560:	2b00      	cmp	r3, #0
 800e562:	d002      	beq.n	800e56a <__kernel_rem_pio2+0x592>
 800e564:	2380      	movs	r3, #128	; 0x80
 800e566:	061b      	lsls	r3, r3, #24
 800e568:	18e4      	adds	r4, r4, r3
 800e56a:	002a      	movs	r2, r5
 800e56c:	0023      	movs	r3, r4
 800e56e:	9907      	ldr	r1, [sp, #28]
 800e570:	600a      	str	r2, [r1, #0]
 800e572:	604b      	str	r3, [r1, #4]
 800e574:	e7a9      	b.n	800e4ca <__kernel_rem_pio2+0x4f2>
 800e576:	9da4      	ldr	r5, [sp, #656]	; 0x290
 800e578:	002c      	movs	r4, r5
 800e57a:	e7ed      	b.n	800e558 <__kernel_rem_pio2+0x580>
 800e57c:	00e3      	lsls	r3, r4, #3
 800e57e:	aa4e      	add	r2, sp, #312	; 0x138
 800e580:	18d3      	adds	r3, r2, r3
 800e582:	0030      	movs	r0, r6
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	0029      	movs	r1, r5
 800e58a:	f7f1 ff8d 	bl	80004a8 <__aeabi_dadd>
 800e58e:	0006      	movs	r6, r0
 800e590:	000d      	movs	r5, r1
 800e592:	3c01      	subs	r4, #1
 800e594:	2c00      	cmp	r4, #0
 800e596:	daf1      	bge.n	800e57c <__kernel_rem_pio2+0x5a4>
 800e598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e59a:	0029      	movs	r1, r5
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d002      	beq.n	800e5a6 <__kernel_rem_pio2+0x5ce>
 800e5a0:	2380      	movs	r3, #128	; 0x80
 800e5a2:	061b      	lsls	r3, r3, #24
 800e5a4:	18e9      	adds	r1, r5, r3
 800e5a6:	0032      	movs	r2, r6
 800e5a8:	000b      	movs	r3, r1
 800e5aa:	9907      	ldr	r1, [sp, #28]
 800e5ac:	2401      	movs	r4, #1
 800e5ae:	600a      	str	r2, [r1, #0]
 800e5b0:	604b      	str	r3, [r1, #4]
 800e5b2:	984e      	ldr	r0, [sp, #312]	; 0x138
 800e5b4:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800e5b6:	002b      	movs	r3, r5
 800e5b8:	f7f3 f952 	bl	8001860 <__aeabi_dsub>
 800e5bc:	0006      	movs	r6, r0
 800e5be:	000d      	movs	r5, r1
 800e5c0:	9b00      	ldr	r3, [sp, #0]
 800e5c2:	42a3      	cmp	r3, r4
 800e5c4:	da0f      	bge.n	800e5e6 <__kernel_rem_pio2+0x60e>
 800e5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d002      	beq.n	800e5d2 <__kernel_rem_pio2+0x5fa>
 800e5cc:	2380      	movs	r3, #128	; 0x80
 800e5ce:	061b      	lsls	r3, r3, #24
 800e5d0:	18ed      	adds	r5, r5, r3
 800e5d2:	0032      	movs	r2, r6
 800e5d4:	002b      	movs	r3, r5
 800e5d6:	9907      	ldr	r1, [sp, #28]
 800e5d8:	608a      	str	r2, [r1, #8]
 800e5da:	60cb      	str	r3, [r1, #12]
 800e5dc:	e775      	b.n	800e4ca <__kernel_rem_pio2+0x4f2>
 800e5de:	2600      	movs	r6, #0
 800e5e0:	9c00      	ldr	r4, [sp, #0]
 800e5e2:	0035      	movs	r5, r6
 800e5e4:	e7d6      	b.n	800e594 <__kernel_rem_pio2+0x5bc>
 800e5e6:	00e3      	lsls	r3, r4, #3
 800e5e8:	aa4e      	add	r2, sp, #312	; 0x138
 800e5ea:	18d3      	adds	r3, r2, r3
 800e5ec:	0030      	movs	r0, r6
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	0029      	movs	r1, r5
 800e5f4:	f7f1 ff58 	bl	80004a8 <__aeabi_dadd>
 800e5f8:	3401      	adds	r4, #1
 800e5fa:	0006      	movs	r6, r0
 800e5fc:	000d      	movs	r5, r1
 800e5fe:	e7df      	b.n	800e5c0 <__kernel_rem_pio2+0x5e8>
 800e600:	9b02      	ldr	r3, [sp, #8]
 800e602:	68ae      	ldr	r6, [r5, #8]
 800e604:	68ef      	ldr	r7, [r5, #12]
 800e606:	3b01      	subs	r3, #1
 800e608:	9302      	str	r3, [sp, #8]
 800e60a:	682a      	ldr	r2, [r5, #0]
 800e60c:	686b      	ldr	r3, [r5, #4]
 800e60e:	9204      	str	r2, [sp, #16]
 800e610:	9305      	str	r3, [sp, #20]
 800e612:	9804      	ldr	r0, [sp, #16]
 800e614:	9905      	ldr	r1, [sp, #20]
 800e616:	0032      	movs	r2, r6
 800e618:	003b      	movs	r3, r7
 800e61a:	f7f1 ff45 	bl	80004a8 <__aeabi_dadd>
 800e61e:	0002      	movs	r2, r0
 800e620:	000b      	movs	r3, r1
 800e622:	9008      	str	r0, [sp, #32]
 800e624:	9109      	str	r1, [sp, #36]	; 0x24
 800e626:	9804      	ldr	r0, [sp, #16]
 800e628:	9905      	ldr	r1, [sp, #20]
 800e62a:	f7f3 f919 	bl	8001860 <__aeabi_dsub>
 800e62e:	0032      	movs	r2, r6
 800e630:	003b      	movs	r3, r7
 800e632:	f7f1 ff39 	bl	80004a8 <__aeabi_dadd>
 800e636:	9a08      	ldr	r2, [sp, #32]
 800e638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e63a:	60a8      	str	r0, [r5, #8]
 800e63c:	60e9      	str	r1, [r5, #12]
 800e63e:	602a      	str	r2, [r5, #0]
 800e640:	606b      	str	r3, [r5, #4]
 800e642:	e754      	b.n	800e4ee <__kernel_rem_pio2+0x516>
 800e644:	6826      	ldr	r6, [r4, #0]
 800e646:	6867      	ldr	r7, [r4, #4]
 800e648:	68a2      	ldr	r2, [r4, #8]
 800e64a:	68e3      	ldr	r3, [r4, #12]
 800e64c:	0030      	movs	r0, r6
 800e64e:	0039      	movs	r1, r7
 800e650:	9202      	str	r2, [sp, #8]
 800e652:	9303      	str	r3, [sp, #12]
 800e654:	f7f1 ff28 	bl	80004a8 <__aeabi_dadd>
 800e658:	0002      	movs	r2, r0
 800e65a:	000b      	movs	r3, r1
 800e65c:	9004      	str	r0, [sp, #16]
 800e65e:	9105      	str	r1, [sp, #20]
 800e660:	0030      	movs	r0, r6
 800e662:	0039      	movs	r1, r7
 800e664:	f7f3 f8fc 	bl	8001860 <__aeabi_dsub>
 800e668:	9a02      	ldr	r2, [sp, #8]
 800e66a:	9b03      	ldr	r3, [sp, #12]
 800e66c:	f7f1 ff1c 	bl	80004a8 <__aeabi_dadd>
 800e670:	9a04      	ldr	r2, [sp, #16]
 800e672:	9b05      	ldr	r3, [sp, #20]
 800e674:	60a0      	str	r0, [r4, #8]
 800e676:	60e1      	str	r1, [r4, #12]
 800e678:	6022      	str	r2, [r4, #0]
 800e67a:	6063      	str	r3, [r4, #4]
 800e67c:	3d01      	subs	r5, #1
 800e67e:	e73c      	b.n	800e4fa <__kernel_rem_pio2+0x522>
 800e680:	9b00      	ldr	r3, [sp, #0]
 800e682:	aa4e      	add	r2, sp, #312	; 0x138
 800e684:	00db      	lsls	r3, r3, #3
 800e686:	18d3      	adds	r3, r2, r3
 800e688:	0020      	movs	r0, r4
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	f7f1 ff0b 	bl	80004a8 <__aeabi_dadd>
 800e692:	9b00      	ldr	r3, [sp, #0]
 800e694:	0004      	movs	r4, r0
 800e696:	3b01      	subs	r3, #1
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	e734      	b.n	800e506 <__kernel_rem_pio2+0x52e>
 800e69c:	9b07      	ldr	r3, [sp, #28]
 800e69e:	9a07      	ldr	r2, [sp, #28]
 800e6a0:	601f      	str	r7, [r3, #0]
 800e6a2:	2380      	movs	r3, #128	; 0x80
 800e6a4:	061b      	lsls	r3, r3, #24
 800e6a6:	18f6      	adds	r6, r6, r3
 800e6a8:	18c0      	adds	r0, r0, r3
 800e6aa:	18c9      	adds	r1, r1, r3
 800e6ac:	6056      	str	r6, [r2, #4]
 800e6ae:	6095      	str	r5, [r2, #8]
 800e6b0:	60d0      	str	r0, [r2, #12]
 800e6b2:	6114      	str	r4, [r2, #16]
 800e6b4:	6151      	str	r1, [r2, #20]
 800e6b6:	e708      	b.n	800e4ca <__kernel_rem_pio2+0x4f2>
 800e6b8:	41700000 	.word	0x41700000
 800e6bc:	3e700000 	.word	0x3e700000
 800e6c0:	08011e28 	.word	0x08011e28

0800e6c4 <__kernel_sin>:
 800e6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6c6:	b089      	sub	sp, #36	; 0x24
 800e6c8:	9202      	str	r2, [sp, #8]
 800e6ca:	9303      	str	r3, [sp, #12]
 800e6cc:	22f9      	movs	r2, #249	; 0xf9
 800e6ce:	004b      	lsls	r3, r1, #1
 800e6d0:	0007      	movs	r7, r0
 800e6d2:	000e      	movs	r6, r1
 800e6d4:	085b      	lsrs	r3, r3, #1
 800e6d6:	0592      	lsls	r2, r2, #22
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	da03      	bge.n	800e6e4 <__kernel_sin+0x20>
 800e6dc:	f7f3 fc52 	bl	8001f84 <__aeabi_d2iz>
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	d04c      	beq.n	800e77e <__kernel_sin+0xba>
 800e6e4:	003a      	movs	r2, r7
 800e6e6:	0033      	movs	r3, r6
 800e6e8:	0038      	movs	r0, r7
 800e6ea:	0031      	movs	r1, r6
 800e6ec:	f7f2 fe4c 	bl	8001388 <__aeabi_dmul>
 800e6f0:	0004      	movs	r4, r0
 800e6f2:	000d      	movs	r5, r1
 800e6f4:	0002      	movs	r2, r0
 800e6f6:	000b      	movs	r3, r1
 800e6f8:	0038      	movs	r0, r7
 800e6fa:	0031      	movs	r1, r6
 800e6fc:	f7f2 fe44 	bl	8001388 <__aeabi_dmul>
 800e700:	4a39      	ldr	r2, [pc, #228]	; (800e7e8 <__kernel_sin+0x124>)
 800e702:	9000      	str	r0, [sp, #0]
 800e704:	9101      	str	r1, [sp, #4]
 800e706:	4b39      	ldr	r3, [pc, #228]	; (800e7ec <__kernel_sin+0x128>)
 800e708:	0020      	movs	r0, r4
 800e70a:	0029      	movs	r1, r5
 800e70c:	f7f2 fe3c 	bl	8001388 <__aeabi_dmul>
 800e710:	4a37      	ldr	r2, [pc, #220]	; (800e7f0 <__kernel_sin+0x12c>)
 800e712:	4b38      	ldr	r3, [pc, #224]	; (800e7f4 <__kernel_sin+0x130>)
 800e714:	f7f3 f8a4 	bl	8001860 <__aeabi_dsub>
 800e718:	0022      	movs	r2, r4
 800e71a:	002b      	movs	r3, r5
 800e71c:	f7f2 fe34 	bl	8001388 <__aeabi_dmul>
 800e720:	4a35      	ldr	r2, [pc, #212]	; (800e7f8 <__kernel_sin+0x134>)
 800e722:	4b36      	ldr	r3, [pc, #216]	; (800e7fc <__kernel_sin+0x138>)
 800e724:	f7f1 fec0 	bl	80004a8 <__aeabi_dadd>
 800e728:	0022      	movs	r2, r4
 800e72a:	002b      	movs	r3, r5
 800e72c:	f7f2 fe2c 	bl	8001388 <__aeabi_dmul>
 800e730:	4a33      	ldr	r2, [pc, #204]	; (800e800 <__kernel_sin+0x13c>)
 800e732:	4b34      	ldr	r3, [pc, #208]	; (800e804 <__kernel_sin+0x140>)
 800e734:	f7f3 f894 	bl	8001860 <__aeabi_dsub>
 800e738:	0022      	movs	r2, r4
 800e73a:	002b      	movs	r3, r5
 800e73c:	f7f2 fe24 	bl	8001388 <__aeabi_dmul>
 800e740:	4b31      	ldr	r3, [pc, #196]	; (800e808 <__kernel_sin+0x144>)
 800e742:	4a32      	ldr	r2, [pc, #200]	; (800e80c <__kernel_sin+0x148>)
 800e744:	f7f1 feb0 	bl	80004a8 <__aeabi_dadd>
 800e748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e74a:	9004      	str	r0, [sp, #16]
 800e74c:	9105      	str	r1, [sp, #20]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d119      	bne.n	800e786 <__kernel_sin+0xc2>
 800e752:	0002      	movs	r2, r0
 800e754:	000b      	movs	r3, r1
 800e756:	0020      	movs	r0, r4
 800e758:	0029      	movs	r1, r5
 800e75a:	f7f2 fe15 	bl	8001388 <__aeabi_dmul>
 800e75e:	4a2c      	ldr	r2, [pc, #176]	; (800e810 <__kernel_sin+0x14c>)
 800e760:	4b2c      	ldr	r3, [pc, #176]	; (800e814 <__kernel_sin+0x150>)
 800e762:	f7f3 f87d 	bl	8001860 <__aeabi_dsub>
 800e766:	9a00      	ldr	r2, [sp, #0]
 800e768:	9b01      	ldr	r3, [sp, #4]
 800e76a:	f7f2 fe0d 	bl	8001388 <__aeabi_dmul>
 800e76e:	0002      	movs	r2, r0
 800e770:	000b      	movs	r3, r1
 800e772:	0038      	movs	r0, r7
 800e774:	0031      	movs	r1, r6
 800e776:	f7f1 fe97 	bl	80004a8 <__aeabi_dadd>
 800e77a:	0007      	movs	r7, r0
 800e77c:	000e      	movs	r6, r1
 800e77e:	0038      	movs	r0, r7
 800e780:	0031      	movs	r1, r6
 800e782:	b009      	add	sp, #36	; 0x24
 800e784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e786:	2200      	movs	r2, #0
 800e788:	9802      	ldr	r0, [sp, #8]
 800e78a:	9903      	ldr	r1, [sp, #12]
 800e78c:	4b22      	ldr	r3, [pc, #136]	; (800e818 <__kernel_sin+0x154>)
 800e78e:	f7f2 fdfb 	bl	8001388 <__aeabi_dmul>
 800e792:	9a04      	ldr	r2, [sp, #16]
 800e794:	9b05      	ldr	r3, [sp, #20]
 800e796:	9006      	str	r0, [sp, #24]
 800e798:	9107      	str	r1, [sp, #28]
 800e79a:	9800      	ldr	r0, [sp, #0]
 800e79c:	9901      	ldr	r1, [sp, #4]
 800e79e:	f7f2 fdf3 	bl	8001388 <__aeabi_dmul>
 800e7a2:	0002      	movs	r2, r0
 800e7a4:	000b      	movs	r3, r1
 800e7a6:	9806      	ldr	r0, [sp, #24]
 800e7a8:	9907      	ldr	r1, [sp, #28]
 800e7aa:	f7f3 f859 	bl	8001860 <__aeabi_dsub>
 800e7ae:	0022      	movs	r2, r4
 800e7b0:	002b      	movs	r3, r5
 800e7b2:	f7f2 fde9 	bl	8001388 <__aeabi_dmul>
 800e7b6:	9a02      	ldr	r2, [sp, #8]
 800e7b8:	9b03      	ldr	r3, [sp, #12]
 800e7ba:	f7f3 f851 	bl	8001860 <__aeabi_dsub>
 800e7be:	4a14      	ldr	r2, [pc, #80]	; (800e810 <__kernel_sin+0x14c>)
 800e7c0:	0004      	movs	r4, r0
 800e7c2:	000d      	movs	r5, r1
 800e7c4:	9800      	ldr	r0, [sp, #0]
 800e7c6:	9901      	ldr	r1, [sp, #4]
 800e7c8:	4b12      	ldr	r3, [pc, #72]	; (800e814 <__kernel_sin+0x150>)
 800e7ca:	f7f2 fddd 	bl	8001388 <__aeabi_dmul>
 800e7ce:	0002      	movs	r2, r0
 800e7d0:	000b      	movs	r3, r1
 800e7d2:	0020      	movs	r0, r4
 800e7d4:	0029      	movs	r1, r5
 800e7d6:	f7f1 fe67 	bl	80004a8 <__aeabi_dadd>
 800e7da:	0002      	movs	r2, r0
 800e7dc:	000b      	movs	r3, r1
 800e7de:	0038      	movs	r0, r7
 800e7e0:	0031      	movs	r1, r6
 800e7e2:	f7f3 f83d 	bl	8001860 <__aeabi_dsub>
 800e7e6:	e7c8      	b.n	800e77a <__kernel_sin+0xb6>
 800e7e8:	5acfd57c 	.word	0x5acfd57c
 800e7ec:	3de5d93a 	.word	0x3de5d93a
 800e7f0:	8a2b9ceb 	.word	0x8a2b9ceb
 800e7f4:	3e5ae5e6 	.word	0x3e5ae5e6
 800e7f8:	57b1fe7d 	.word	0x57b1fe7d
 800e7fc:	3ec71de3 	.word	0x3ec71de3
 800e800:	19c161d5 	.word	0x19c161d5
 800e804:	3f2a01a0 	.word	0x3f2a01a0
 800e808:	3f811111 	.word	0x3f811111
 800e80c:	1110f8a6 	.word	0x1110f8a6
 800e810:	55555549 	.word	0x55555549
 800e814:	3fc55555 	.word	0x3fc55555
 800e818:	3fe00000 	.word	0x3fe00000

0800e81c <fabs>:
 800e81c:	004b      	lsls	r3, r1, #1
 800e81e:	0859      	lsrs	r1, r3, #1
 800e820:	4770      	bx	lr
	...

0800e824 <floor>:
 800e824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e826:	004b      	lsls	r3, r1, #1
 800e828:	4a3d      	ldr	r2, [pc, #244]	; (800e920 <floor+0xfc>)
 800e82a:	0d5b      	lsrs	r3, r3, #21
 800e82c:	189f      	adds	r7, r3, r2
 800e82e:	4684      	mov	ip, r0
 800e830:	000e      	movs	r6, r1
 800e832:	000d      	movs	r5, r1
 800e834:	0004      	movs	r4, r0
 800e836:	9001      	str	r0, [sp, #4]
 800e838:	2f13      	cmp	r7, #19
 800e83a:	dc34      	bgt.n	800e8a6 <floor+0x82>
 800e83c:	2f00      	cmp	r7, #0
 800e83e:	da16      	bge.n	800e86e <floor+0x4a>
 800e840:	4a38      	ldr	r2, [pc, #224]	; (800e924 <floor+0x100>)
 800e842:	4b39      	ldr	r3, [pc, #228]	; (800e928 <floor+0x104>)
 800e844:	4660      	mov	r0, ip
 800e846:	0031      	movs	r1, r6
 800e848:	f7f1 fe2e 	bl	80004a8 <__aeabi_dadd>
 800e84c:	2200      	movs	r2, #0
 800e84e:	2300      	movs	r3, #0
 800e850:	f7f1 fdf8 	bl	8000444 <__aeabi_dcmpgt>
 800e854:	2800      	cmp	r0, #0
 800e856:	d007      	beq.n	800e868 <floor+0x44>
 800e858:	2e00      	cmp	r6, #0
 800e85a:	da5d      	bge.n	800e918 <floor+0xf4>
 800e85c:	0073      	lsls	r3, r6, #1
 800e85e:	085b      	lsrs	r3, r3, #1
 800e860:	431c      	orrs	r4, r3
 800e862:	d001      	beq.n	800e868 <floor+0x44>
 800e864:	2400      	movs	r4, #0
 800e866:	4d31      	ldr	r5, [pc, #196]	; (800e92c <floor+0x108>)
 800e868:	46a4      	mov	ip, r4
 800e86a:	002e      	movs	r6, r5
 800e86c:	e029      	b.n	800e8c2 <floor+0x9e>
 800e86e:	4b30      	ldr	r3, [pc, #192]	; (800e930 <floor+0x10c>)
 800e870:	413b      	asrs	r3, r7
 800e872:	9300      	str	r3, [sp, #0]
 800e874:	400b      	ands	r3, r1
 800e876:	4303      	orrs	r3, r0
 800e878:	d023      	beq.n	800e8c2 <floor+0x9e>
 800e87a:	4a2a      	ldr	r2, [pc, #168]	; (800e924 <floor+0x100>)
 800e87c:	4b2a      	ldr	r3, [pc, #168]	; (800e928 <floor+0x104>)
 800e87e:	4660      	mov	r0, ip
 800e880:	0031      	movs	r1, r6
 800e882:	f7f1 fe11 	bl	80004a8 <__aeabi_dadd>
 800e886:	2200      	movs	r2, #0
 800e888:	2300      	movs	r3, #0
 800e88a:	f7f1 fddb 	bl	8000444 <__aeabi_dcmpgt>
 800e88e:	2800      	cmp	r0, #0
 800e890:	d0ea      	beq.n	800e868 <floor+0x44>
 800e892:	2e00      	cmp	r6, #0
 800e894:	da03      	bge.n	800e89e <floor+0x7a>
 800e896:	2380      	movs	r3, #128	; 0x80
 800e898:	035b      	lsls	r3, r3, #13
 800e89a:	413b      	asrs	r3, r7
 800e89c:	18f5      	adds	r5, r6, r3
 800e89e:	9b00      	ldr	r3, [sp, #0]
 800e8a0:	2400      	movs	r4, #0
 800e8a2:	439d      	bics	r5, r3
 800e8a4:	e7e0      	b.n	800e868 <floor+0x44>
 800e8a6:	2f33      	cmp	r7, #51	; 0x33
 800e8a8:	dd0f      	ble.n	800e8ca <floor+0xa6>
 800e8aa:	2380      	movs	r3, #128	; 0x80
 800e8ac:	00db      	lsls	r3, r3, #3
 800e8ae:	429f      	cmp	r7, r3
 800e8b0:	d107      	bne.n	800e8c2 <floor+0x9e>
 800e8b2:	0002      	movs	r2, r0
 800e8b4:	000b      	movs	r3, r1
 800e8b6:	4660      	mov	r0, ip
 800e8b8:	0031      	movs	r1, r6
 800e8ba:	f7f1 fdf5 	bl	80004a8 <__aeabi_dadd>
 800e8be:	4684      	mov	ip, r0
 800e8c0:	000e      	movs	r6, r1
 800e8c2:	4660      	mov	r0, ip
 800e8c4:	0031      	movs	r1, r6
 800e8c6:	b003      	add	sp, #12
 800e8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8ca:	4a1a      	ldr	r2, [pc, #104]	; (800e934 <floor+0x110>)
 800e8cc:	189b      	adds	r3, r3, r2
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	4252      	negs	r2, r2
 800e8d2:	40da      	lsrs	r2, r3
 800e8d4:	9200      	str	r2, [sp, #0]
 800e8d6:	4210      	tst	r0, r2
 800e8d8:	d0f3      	beq.n	800e8c2 <floor+0x9e>
 800e8da:	4a12      	ldr	r2, [pc, #72]	; (800e924 <floor+0x100>)
 800e8dc:	4b12      	ldr	r3, [pc, #72]	; (800e928 <floor+0x104>)
 800e8de:	4660      	mov	r0, ip
 800e8e0:	0031      	movs	r1, r6
 800e8e2:	f7f1 fde1 	bl	80004a8 <__aeabi_dadd>
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	f7f1 fdab 	bl	8000444 <__aeabi_dcmpgt>
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	d0ba      	beq.n	800e868 <floor+0x44>
 800e8f2:	2e00      	cmp	r6, #0
 800e8f4:	da02      	bge.n	800e8fc <floor+0xd8>
 800e8f6:	2f14      	cmp	r7, #20
 800e8f8:	d103      	bne.n	800e902 <floor+0xde>
 800e8fa:	3501      	adds	r5, #1
 800e8fc:	9b00      	ldr	r3, [sp, #0]
 800e8fe:	439c      	bics	r4, r3
 800e900:	e7b2      	b.n	800e868 <floor+0x44>
 800e902:	2334      	movs	r3, #52	; 0x34
 800e904:	1bdf      	subs	r7, r3, r7
 800e906:	3b33      	subs	r3, #51	; 0x33
 800e908:	40bb      	lsls	r3, r7
 800e90a:	18e4      	adds	r4, r4, r3
 800e90c:	9b01      	ldr	r3, [sp, #4]
 800e90e:	429c      	cmp	r4, r3
 800e910:	419b      	sbcs	r3, r3
 800e912:	425b      	negs	r3, r3
 800e914:	18f5      	adds	r5, r6, r3
 800e916:	e7f1      	b.n	800e8fc <floor+0xd8>
 800e918:	2400      	movs	r4, #0
 800e91a:	0025      	movs	r5, r4
 800e91c:	e7a4      	b.n	800e868 <floor+0x44>
 800e91e:	46c0      	nop			; (mov r8, r8)
 800e920:	fffffc01 	.word	0xfffffc01
 800e924:	8800759c 	.word	0x8800759c
 800e928:	7e37e43c 	.word	0x7e37e43c
 800e92c:	bff00000 	.word	0xbff00000
 800e930:	000fffff 	.word	0x000fffff
 800e934:	fffffbed 	.word	0xfffffbed

0800e938 <scalbn>:
 800e938:	004b      	lsls	r3, r1, #1
 800e93a:	b570      	push	{r4, r5, r6, lr}
 800e93c:	0d5b      	lsrs	r3, r3, #21
 800e93e:	0014      	movs	r4, r2
 800e940:	000a      	movs	r2, r1
 800e942:	2b00      	cmp	r3, #0
 800e944:	d10d      	bne.n	800e962 <scalbn+0x2a>
 800e946:	004b      	lsls	r3, r1, #1
 800e948:	085b      	lsrs	r3, r3, #1
 800e94a:	4303      	orrs	r3, r0
 800e94c:	d010      	beq.n	800e970 <scalbn+0x38>
 800e94e:	4b27      	ldr	r3, [pc, #156]	; (800e9ec <scalbn+0xb4>)
 800e950:	2200      	movs	r2, #0
 800e952:	f7f2 fd19 	bl	8001388 <__aeabi_dmul>
 800e956:	4b26      	ldr	r3, [pc, #152]	; (800e9f0 <scalbn+0xb8>)
 800e958:	429c      	cmp	r4, r3
 800e95a:	da0a      	bge.n	800e972 <scalbn+0x3a>
 800e95c:	4a25      	ldr	r2, [pc, #148]	; (800e9f4 <scalbn+0xbc>)
 800e95e:	4b26      	ldr	r3, [pc, #152]	; (800e9f8 <scalbn+0xc0>)
 800e960:	e019      	b.n	800e996 <scalbn+0x5e>
 800e962:	4d26      	ldr	r5, [pc, #152]	; (800e9fc <scalbn+0xc4>)
 800e964:	42ab      	cmp	r3, r5
 800e966:	d108      	bne.n	800e97a <scalbn+0x42>
 800e968:	0002      	movs	r2, r0
 800e96a:	000b      	movs	r3, r1
 800e96c:	f7f1 fd9c 	bl	80004a8 <__aeabi_dadd>
 800e970:	bd70      	pop	{r4, r5, r6, pc}
 800e972:	000a      	movs	r2, r1
 800e974:	004b      	lsls	r3, r1, #1
 800e976:	0d5b      	lsrs	r3, r3, #21
 800e978:	3b36      	subs	r3, #54	; 0x36
 800e97a:	4d21      	ldr	r5, [pc, #132]	; (800ea00 <scalbn+0xc8>)
 800e97c:	18e3      	adds	r3, r4, r3
 800e97e:	42ab      	cmp	r3, r5
 800e980:	dd0c      	ble.n	800e99c <scalbn+0x64>
 800e982:	4c20      	ldr	r4, [pc, #128]	; (800ea04 <scalbn+0xcc>)
 800e984:	4d20      	ldr	r5, [pc, #128]	; (800ea08 <scalbn+0xd0>)
 800e986:	2900      	cmp	r1, #0
 800e988:	da01      	bge.n	800e98e <scalbn+0x56>
 800e98a:	4c1e      	ldr	r4, [pc, #120]	; (800ea04 <scalbn+0xcc>)
 800e98c:	4d1f      	ldr	r5, [pc, #124]	; (800ea0c <scalbn+0xd4>)
 800e98e:	0020      	movs	r0, r4
 800e990:	0029      	movs	r1, r5
 800e992:	4a1c      	ldr	r2, [pc, #112]	; (800ea04 <scalbn+0xcc>)
 800e994:	4b1c      	ldr	r3, [pc, #112]	; (800ea08 <scalbn+0xd0>)
 800e996:	f7f2 fcf7 	bl	8001388 <__aeabi_dmul>
 800e99a:	e7e9      	b.n	800e970 <scalbn+0x38>
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	dd05      	ble.n	800e9ac <scalbn+0x74>
 800e9a0:	4c1b      	ldr	r4, [pc, #108]	; (800ea10 <scalbn+0xd8>)
 800e9a2:	051b      	lsls	r3, r3, #20
 800e9a4:	4022      	ands	r2, r4
 800e9a6:	431a      	orrs	r2, r3
 800e9a8:	0011      	movs	r1, r2
 800e9aa:	e7e1      	b.n	800e970 <scalbn+0x38>
 800e9ac:	001d      	movs	r5, r3
 800e9ae:	3535      	adds	r5, #53	; 0x35
 800e9b0:	da13      	bge.n	800e9da <scalbn+0xa2>
 800e9b2:	4a18      	ldr	r2, [pc, #96]	; (800ea14 <scalbn+0xdc>)
 800e9b4:	0fcb      	lsrs	r3, r1, #31
 800e9b6:	4294      	cmp	r4, r2
 800e9b8:	dd08      	ble.n	800e9cc <scalbn+0x94>
 800e9ba:	4812      	ldr	r0, [pc, #72]	; (800ea04 <scalbn+0xcc>)
 800e9bc:	4912      	ldr	r1, [pc, #72]	; (800ea08 <scalbn+0xd0>)
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d001      	beq.n	800e9c6 <scalbn+0x8e>
 800e9c2:	4810      	ldr	r0, [pc, #64]	; (800ea04 <scalbn+0xcc>)
 800e9c4:	4911      	ldr	r1, [pc, #68]	; (800ea0c <scalbn+0xd4>)
 800e9c6:	4a0f      	ldr	r2, [pc, #60]	; (800ea04 <scalbn+0xcc>)
 800e9c8:	4b0f      	ldr	r3, [pc, #60]	; (800ea08 <scalbn+0xd0>)
 800e9ca:	e7e4      	b.n	800e996 <scalbn+0x5e>
 800e9cc:	4809      	ldr	r0, [pc, #36]	; (800e9f4 <scalbn+0xbc>)
 800e9ce:	490a      	ldr	r1, [pc, #40]	; (800e9f8 <scalbn+0xc0>)
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d0c3      	beq.n	800e95c <scalbn+0x24>
 800e9d4:	4807      	ldr	r0, [pc, #28]	; (800e9f4 <scalbn+0xbc>)
 800e9d6:	4910      	ldr	r1, [pc, #64]	; (800ea18 <scalbn+0xe0>)
 800e9d8:	e7c0      	b.n	800e95c <scalbn+0x24>
 800e9da:	4c0d      	ldr	r4, [pc, #52]	; (800ea10 <scalbn+0xd8>)
 800e9dc:	3336      	adds	r3, #54	; 0x36
 800e9de:	4022      	ands	r2, r4
 800e9e0:	051b      	lsls	r3, r3, #20
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	0019      	movs	r1, r3
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	4b0c      	ldr	r3, [pc, #48]	; (800ea1c <scalbn+0xe4>)
 800e9ea:	e7d4      	b.n	800e996 <scalbn+0x5e>
 800e9ec:	43500000 	.word	0x43500000
 800e9f0:	ffff3cb0 	.word	0xffff3cb0
 800e9f4:	c2f8f359 	.word	0xc2f8f359
 800e9f8:	01a56e1f 	.word	0x01a56e1f
 800e9fc:	000007ff 	.word	0x000007ff
 800ea00:	000007fe 	.word	0x000007fe
 800ea04:	8800759c 	.word	0x8800759c
 800ea08:	7e37e43c 	.word	0x7e37e43c
 800ea0c:	fe37e43c 	.word	0xfe37e43c
 800ea10:	800fffff 	.word	0x800fffff
 800ea14:	0000c350 	.word	0x0000c350
 800ea18:	81a56e1f 	.word	0x81a56e1f
 800ea1c:	3c900000 	.word	0x3c900000

0800ea20 <_init>:
 800ea20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea22:	46c0      	nop			; (mov r8, r8)
 800ea24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea26:	bc08      	pop	{r3}
 800ea28:	469e      	mov	lr, r3
 800ea2a:	4770      	bx	lr

0800ea2c <_fini>:
 800ea2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea2e:	46c0      	nop			; (mov r8, r8)
 800ea30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea32:	bc08      	pop	{r3}
 800ea34:	469e      	mov	lr, r3
 800ea36:	4770      	bx	lr
